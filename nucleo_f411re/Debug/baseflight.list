
baseflight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025e00  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b28  08025f98  08025f98  00035f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029ac0  08029ac0  000401a4  2**0
                  CONTENTS
  4 .ARM          00000008  08029ac0  08029ac0  00039ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029ac8  08029ac8  000401a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029ac8  08029ac8  00039ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029acc  08029acc  00039acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08029ad0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d58  200001a8  08029c74  000401a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f00  08029c74  00041f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c2ca  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ac2e  00000000  00000000  0008c49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002898  00000000  00000000  000970d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e8  00000000  00000000  00099968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e27  00000000  00000000  0009be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a007  00000000  00000000  000bdc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa393  00000000  00000000  000f7c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b178  00000000  00000000  001a2064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08025f80 	.word	0x08025f80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	08025f80 	.word	0x08025f80

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2uiz>:
 8000ae4:	004a      	lsls	r2, r1, #1
 8000ae6:	d211      	bcs.n	8000b0c <__aeabi_d2uiz+0x28>
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d211      	bcs.n	8000b12 <__aeabi_d2uiz+0x2e>
 8000aee:	d50d      	bpl.n	8000b0c <__aeabi_d2uiz+0x28>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d40e      	bmi.n	8000b18 <__aeabi_d2uiz+0x34>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_d2uiz+0x3a>
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0000 	mov.w	r0, #0
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_ldivmod>:
 8000de0:	b97b      	cbnz	r3, 8000e02 <__aeabi_ldivmod+0x22>
 8000de2:	b972      	cbnz	r2, 8000e02 <__aeabi_ldivmod+0x22>
 8000de4:	2900      	cmp	r1, #0
 8000de6:	bfbe      	ittt	lt
 8000de8:	2000      	movlt	r0, #0
 8000dea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dee:	e006      	blt.n	8000dfe <__aeabi_ldivmod+0x1e>
 8000df0:	bf08      	it	eq
 8000df2:	2800      	cmpeq	r0, #0
 8000df4:	bf1c      	itt	ne
 8000df6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000dfa:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfe:	f000 b9bf 	b.w	8001180 <__aeabi_idiv0>
 8000e02:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e06:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0a:	2900      	cmp	r1, #0
 8000e0c:	db09      	blt.n	8000e22 <__aeabi_ldivmod+0x42>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db1a      	blt.n	8000e48 <__aeabi_ldivmod+0x68>
 8000e12:	f000 f84d 	bl	8000eb0 <__udivmoddi4>
 8000e16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1e:	b004      	add	sp, #16
 8000e20:	4770      	bx	lr
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db1b      	blt.n	8000e64 <__aeabi_ldivmod+0x84>
 8000e2c:	f000 f840 	bl	8000eb0 <__udivmoddi4>
 8000e30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e38:	b004      	add	sp, #16
 8000e3a:	4240      	negs	r0, r0
 8000e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e40:	4252      	negs	r2, r2
 8000e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e46:	4770      	bx	lr
 8000e48:	4252      	negs	r2, r2
 8000e4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e4e:	f000 f82f 	bl	8000eb0 <__udivmoddi4>
 8000e52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5a:	b004      	add	sp, #16
 8000e5c:	4240      	negs	r0, r0
 8000e5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e62:	4770      	bx	lr
 8000e64:	4252      	negs	r2, r2
 8000e66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e6a:	f000 f821 	bl	8000eb0 <__udivmoddi4>
 8000e6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e76:	b004      	add	sp, #16
 8000e78:	4252      	negs	r2, r2
 8000e7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_uldivmod>:
 8000e80:	b953      	cbnz	r3, 8000e98 <__aeabi_uldivmod+0x18>
 8000e82:	b94a      	cbnz	r2, 8000e98 <__aeabi_uldivmod+0x18>
 8000e84:	2900      	cmp	r1, #0
 8000e86:	bf08      	it	eq
 8000e88:	2800      	cmpeq	r0, #0
 8000e8a:	bf1c      	itt	ne
 8000e8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e90:	f04f 30ff 	movne.w	r0, #4294967295
 8000e94:	f000 b974 	b.w	8001180 <__aeabi_idiv0>
 8000e98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea0:	f000 f806 	bl	8000eb0 <__udivmoddi4>
 8000ea4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eac:	b004      	add	sp, #16
 8000eae:	4770      	bx	lr

08000eb0 <__udivmoddi4>:
 8000eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb4:	9d08      	ldr	r5, [sp, #32]
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	468e      	mov	lr, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d14d      	bne.n	8000f5a <__udivmoddi4+0xaa>
 8000ebe:	428a      	cmp	r2, r1
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	d969      	bls.n	8000f98 <__udivmoddi4+0xe8>
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b152      	cbz	r2, 8000ee0 <__udivmoddi4+0x30>
 8000eca:	fa01 f302 	lsl.w	r3, r1, r2
 8000ece:	f1c2 0120 	rsb	r1, r2, #32
 8000ed2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ed6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eda:	ea41 0e03 	orr.w	lr, r1, r3
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	0c21      	lsrs	r1, r4, #16
 8000ee6:	fbbe f6f8 	udiv	r6, lr, r8
 8000eea:	fa1f f78c 	uxth.w	r7, ip
 8000eee:	fb08 e316 	mls	r3, r8, r6, lr
 8000ef2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ef6:	fb06 f107 	mul.w	r1, r6, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d90a      	bls.n	8000f14 <__udivmoddi4+0x64>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f06:	f080 811f 	bcs.w	8001148 <__udivmoddi4+0x298>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 811c 	bls.w	8001148 <__udivmoddi4+0x298>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb00 f707 	mul.w	r7, r0, r7
 8000f28:	42a7      	cmp	r7, r4
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x92>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f34:	f080 810a 	bcs.w	800114c <__udivmoddi4+0x29c>
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	f240 8107 	bls.w	800114c <__udivmoddi4+0x29c>
 8000f3e:	4464      	add	r4, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f46:	1be4      	subs	r4, r4, r7
 8000f48:	2600      	movs	r6, #0
 8000f4a:	b11d      	cbz	r5, 8000f54 <__udivmoddi4+0xa4>
 8000f4c:	40d4      	lsrs	r4, r2
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e9c5 4300 	strd	r4, r3, [r5]
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0xc2>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80ef 	beq.w	8001142 <__udivmoddi4+0x292>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x160>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0xd4>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80f9 	bhi.w	8001176 <__udivmoddi4+0x2c6>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0e0      	beq.n	8000f54 <__udivmoddi4+0xa4>
 8000f92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f96:	e7dd      	b.n	8000f54 <__udivmoddi4+0xa4>
 8000f98:	b902      	cbnz	r2, 8000f9c <__udivmoddi4+0xec>
 8000f9a:	deff      	udf	#255	; 0xff
 8000f9c:	fab2 f282 	clz	r2, r2
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	f040 8092 	bne.w	80010ca <__udivmoddi4+0x21a>
 8000fa6:	eba1 010c 	sub.w	r1, r1, ip
 8000faa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fae:	fa1f fe8c 	uxth.w	lr, ip
 8000fb2:	2601      	movs	r6, #1
 8000fb4:	0c20      	lsrs	r0, r4, #16
 8000fb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fba:	fb07 1113 	mls	r1, r7, r3, r1
 8000fbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fc2:	fb0e f003 	mul.w	r0, lr, r3
 8000fc6:	4288      	cmp	r0, r1
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x12c>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x12a>
 8000fd4:	4288      	cmp	r0, r1
 8000fd6:	f200 80cb 	bhi.w	8001170 <__udivmoddi4+0x2c0>
 8000fda:	4643      	mov	r3, r8
 8000fdc:	1a09      	subs	r1, r1, r0
 8000fde:	b2a4      	uxth	r4, r4
 8000fe0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fe4:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fec:	fb0e fe00 	mul.w	lr, lr, r0
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x156>
 8000ff4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ffc:	d202      	bcs.n	8001004 <__udivmoddi4+0x154>
 8000ffe:	45a6      	cmp	lr, r4
 8001000:	f200 80bb 	bhi.w	800117a <__udivmoddi4+0x2ca>
 8001004:	4608      	mov	r0, r1
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800100e:	e79c      	b.n	8000f4a <__udivmoddi4+0x9a>
 8001010:	f1c6 0720 	rsb	r7, r6, #32
 8001014:	40b3      	lsls	r3, r6
 8001016:	fa22 fc07 	lsr.w	ip, r2, r7
 800101a:	ea4c 0c03 	orr.w	ip, ip, r3
 800101e:	fa20 f407 	lsr.w	r4, r0, r7
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	431c      	orrs	r4, r3
 8001028:	40f9      	lsrs	r1, r7
 800102a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800102e:	fa00 f306 	lsl.w	r3, r0, r6
 8001032:	fbb1 f8f9 	udiv	r8, r1, r9
 8001036:	0c20      	lsrs	r0, r4, #16
 8001038:	fa1f fe8c 	uxth.w	lr, ip
 800103c:	fb09 1118 	mls	r1, r9, r8, r1
 8001040:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001044:	fb08 f00e 	mul.w	r0, r8, lr
 8001048:	4288      	cmp	r0, r1
 800104a:	fa02 f206 	lsl.w	r2, r2, r6
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b8>
 8001050:	eb1c 0101 	adds.w	r1, ip, r1
 8001054:	f108 3aff 	add.w	sl, r8, #4294967295
 8001058:	f080 8088 	bcs.w	800116c <__udivmoddi4+0x2bc>
 800105c:	4288      	cmp	r0, r1
 800105e:	f240 8085 	bls.w	800116c <__udivmoddi4+0x2bc>
 8001062:	f1a8 0802 	sub.w	r8, r8, #2
 8001066:	4461      	add	r1, ip
 8001068:	1a09      	subs	r1, r1, r0
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb1 f0f9 	udiv	r0, r1, r9
 8001070:	fb09 1110 	mls	r1, r9, r0, r1
 8001074:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001078:	fb00 fe0e 	mul.w	lr, r0, lr
 800107c:	458e      	cmp	lr, r1
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1e2>
 8001080:	eb1c 0101 	adds.w	r1, ip, r1
 8001084:	f100 34ff 	add.w	r4, r0, #4294967295
 8001088:	d26c      	bcs.n	8001164 <__udivmoddi4+0x2b4>
 800108a:	458e      	cmp	lr, r1
 800108c:	d96a      	bls.n	8001164 <__udivmoddi4+0x2b4>
 800108e:	3802      	subs	r0, #2
 8001090:	4461      	add	r1, ip
 8001092:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001096:	fba0 9402 	umull	r9, r4, r0, r2
 800109a:	eba1 010e 	sub.w	r1, r1, lr
 800109e:	42a1      	cmp	r1, r4
 80010a0:	46c8      	mov	r8, r9
 80010a2:	46a6      	mov	lr, r4
 80010a4:	d356      	bcc.n	8001154 <__udivmoddi4+0x2a4>
 80010a6:	d053      	beq.n	8001150 <__udivmoddi4+0x2a0>
 80010a8:	b15d      	cbz	r5, 80010c2 <__udivmoddi4+0x212>
 80010aa:	ebb3 0208 	subs.w	r2, r3, r8
 80010ae:	eb61 010e 	sbc.w	r1, r1, lr
 80010b2:	fa01 f707 	lsl.w	r7, r1, r7
 80010b6:	fa22 f306 	lsr.w	r3, r2, r6
 80010ba:	40f1      	lsrs	r1, r6
 80010bc:	431f      	orrs	r7, r3
 80010be:	e9c5 7100 	strd	r7, r1, [r5]
 80010c2:	2600      	movs	r6, #0
 80010c4:	4631      	mov	r1, r6
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	f1c2 0320 	rsb	r3, r2, #32
 80010ce:	40d8      	lsrs	r0, r3
 80010d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80010d4:	fa21 f303 	lsr.w	r3, r1, r3
 80010d8:	4091      	lsls	r1, r2
 80010da:	4301      	orrs	r1, r0
 80010dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010e0:	fa1f fe8c 	uxth.w	lr, ip
 80010e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e8:	fb07 3610 	mls	r6, r7, r0, r3
 80010ec:	0c0b      	lsrs	r3, r1, #16
 80010ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010f2:	fb00 f60e 	mul.w	r6, r0, lr
 80010f6:	429e      	cmp	r6, r3
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d908      	bls.n	8001110 <__udivmoddi4+0x260>
 80010fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001102:	f100 38ff 	add.w	r8, r0, #4294967295
 8001106:	d22f      	bcs.n	8001168 <__udivmoddi4+0x2b8>
 8001108:	429e      	cmp	r6, r3
 800110a:	d92d      	bls.n	8001168 <__udivmoddi4+0x2b8>
 800110c:	3802      	subs	r0, #2
 800110e:	4463      	add	r3, ip
 8001110:	1b9b      	subs	r3, r3, r6
 8001112:	b289      	uxth	r1, r1
 8001114:	fbb3 f6f7 	udiv	r6, r3, r7
 8001118:	fb07 3316 	mls	r3, r7, r6, r3
 800111c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001120:	fb06 f30e 	mul.w	r3, r6, lr
 8001124:	428b      	cmp	r3, r1
 8001126:	d908      	bls.n	800113a <__udivmoddi4+0x28a>
 8001128:	eb1c 0101 	adds.w	r1, ip, r1
 800112c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001130:	d216      	bcs.n	8001160 <__udivmoddi4+0x2b0>
 8001132:	428b      	cmp	r3, r1
 8001134:	d914      	bls.n	8001160 <__udivmoddi4+0x2b0>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001140:	e738      	b.n	8000fb4 <__udivmoddi4+0x104>
 8001142:	462e      	mov	r6, r5
 8001144:	4628      	mov	r0, r5
 8001146:	e705      	b.n	8000f54 <__udivmoddi4+0xa4>
 8001148:	4606      	mov	r6, r0
 800114a:	e6e3      	b.n	8000f14 <__udivmoddi4+0x64>
 800114c:	4618      	mov	r0, r3
 800114e:	e6f8      	b.n	8000f42 <__udivmoddi4+0x92>
 8001150:	454b      	cmp	r3, r9
 8001152:	d2a9      	bcs.n	80010a8 <__udivmoddi4+0x1f8>
 8001154:	ebb9 0802 	subs.w	r8, r9, r2
 8001158:	eb64 0e0c 	sbc.w	lr, r4, ip
 800115c:	3801      	subs	r0, #1
 800115e:	e7a3      	b.n	80010a8 <__udivmoddi4+0x1f8>
 8001160:	4646      	mov	r6, r8
 8001162:	e7ea      	b.n	800113a <__udivmoddi4+0x28a>
 8001164:	4620      	mov	r0, r4
 8001166:	e794      	b.n	8001092 <__udivmoddi4+0x1e2>
 8001168:	4640      	mov	r0, r8
 800116a:	e7d1      	b.n	8001110 <__udivmoddi4+0x260>
 800116c:	46d0      	mov	r8, sl
 800116e:	e77b      	b.n	8001068 <__udivmoddi4+0x1b8>
 8001170:	3b02      	subs	r3, #2
 8001172:	4461      	add	r1, ip
 8001174:	e732      	b.n	8000fdc <__udivmoddi4+0x12c>
 8001176:	4630      	mov	r0, r6
 8001178:	e709      	b.n	8000f8e <__udivmoddi4+0xde>
 800117a:	4464      	add	r4, ip
 800117c:	3802      	subs	r0, #2
 800117e:	e742      	b.n	8001006 <__udivmoddi4+0x156>

08001180 <__aeabi_idiv0>:
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <adcInit>:

static uint32_t adcValues[ADC_CHANNEL_MAX];


void adcInit(drv_adc_config_t *init)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    extern ADC_HandleTypeDef hadc1;

    // Start ADC
    HAL_ADC_Start_DMA(&hadc1, adcValues, ADC_CHANNEL_MAX);
 800118c:	2204      	movs	r2, #4
 800118e:	4904      	ldr	r1, [pc, #16]	; (80011a0 <adcInit+0x1c>)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <adcInit+0x20>)
 8001192:	f01a fe7b 	bl	801be8c <HAL_ADC_Start_DMA>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001c4 	.word	0x200001c4
 80011a4:	20000478 	.word	0x20000478

080011a8 <actGetAdcChannel>:

uint16_t actGetAdcChannel(uint8_t channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    return adcValues[channel];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <actGetAdcChannel+0x20>)
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	b29b      	uxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200001c4 	.word	0x200001c4

080011cc <actGetBatteryVoltage>:

float actGetBatteryVoltage()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	return (adcValues[ADC_BATTERY] * 3.3f) / 4095;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <actGetBatteryVoltage+0x30>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	ee07 3a90 	vmov	s15, r3
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001200 <actGetBatteryVoltage+0x34>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001204 <actGetBatteryVoltage+0x38>
 80011e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	200001c4 	.word	0x200001c4
 8001200:	40533333 	.word	0x40533333
 8001204:	457ff000 	.word	0x457ff000

08001208 <actGetBatteryCurrent>:

uint32_t actGetBatteryCurrent()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
	return 5000 * adcValues[ADC_EXTERNAL_CURRENT] / 4095;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <actGetBatteryCurrent+0x28>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	fb03 f202 	mul.w	r2, r3, r2
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <actGetBatteryCurrent+0x2c>)
 800121a:	fba3 1302 	umull	r1, r3, r3, r2
 800121e:	1ad2      	subs	r2, r2, r3
 8001220:	0852      	lsrs	r2, r2, #1
 8001222:	4413      	add	r3, r2
 8001224:	0adb      	lsrs	r3, r3, #11
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	200001c4 	.word	0x200001c4
 8001234:	00100101 	.word	0x00100101

08001238 <gy86Detect>:
// sync this with AccelSensors enum from board.h
static const char* hw_Names[] = { "MPU9250", "AK8963", "BMP280" };


bool gy86Detect(sensorSet_t *p_sensor_set, void* p_param)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	PifGy86Config config;

    (void)p_param;

    // Set acc_1G. Modified once by mpu6050CheckRevision for old (hopefully nonexistent outside of clones) parts
    p_sensor_set->acc.acc_1G = 512 * 8;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

    // 16.4 dps/lsb scalefactor for all Invensense devices
    p_sensor_set->gyro.scale = (4.0f / 16.4f) * (M_PI / 180.0f) * 0.000001f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <gy86Detect+0x108>)
 8001250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    memset(&config, 0, sizeof(PifGy86Config));
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2214      	movs	r2, #20
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f021 ffc3 	bl	80231e8 <memset>

    config.disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8001262:	2301      	movs	r3, #1
 8001264:	733b      	strb	r3, [r7, #12]

    config.mpu60x0_clksel = MPU60X0_CLKSEL_PLL_ZGYRO;
 8001266:	2303      	movs	r3, #3
 8001268:	73bb      	strb	r3, [r7, #14]
    // default lpf is 42Hz, 255 is special case of nolpf
    if (p_sensor_set->gyro.lpf == 255)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d102      	bne.n	800127a <gy86Detect+0x42>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A260HZ_G256HZ;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e029      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 188)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001280:	2bbb      	cmp	r3, #187	; 0xbb
 8001282:	d902      	bls.n	800128a <gy86Detect+0x52>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A184HZ_G188HZ;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e021      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 98)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001290:	2b61      	cmp	r3, #97	; 0x61
 8001292:	d902      	bls.n	800129a <gy86Detect+0x62>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A94HZ_G98HZ;
 8001294:	2302      	movs	r3, #2
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e019      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 42)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012a0:	2b29      	cmp	r3, #41	; 0x29
 80012a2:	d902      	bls.n	80012aa <gy86Detect+0x72>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A44HZ_G42HZ;
 80012a4:	2303      	movs	r3, #3
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e011      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 20)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012b0:	2b13      	cmp	r3, #19
 80012b2:	d902      	bls.n	80012ba <gy86Detect+0x82>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A21HZ_G20HZ;
 80012b4:	2304      	movs	r3, #4
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e009      	b.n	80012ce <gy86Detect+0x96>
    else if (p_sensor_set->gyro.lpf >= 10)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d902      	bls.n	80012ca <gy86Detect+0x92>
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A10HZ_G10HZ;
 80012c4:	2305      	movs	r3, #5
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e001      	b.n	80012ce <gy86Detect+0x96>
    else
        config.mpu60x0_dlpf_cfg = MPU60X0_DLPF_CFG_A5HZ_G5HZ;
 80012ca:	2306      	movs	r3, #6
 80012cc:	73fb      	strb	r3, [r7, #15]
    config.mpu60x0_fs_sel = MPU60X0_FS_SEL_2000DPS;
 80012ce:	2303      	movs	r3, #3
 80012d0:	743b      	strb	r3, [r7, #16]
    config.mpu60x0_afs_sel = MPU60X0_AFS_SEL_8G;
 80012d2:	2302      	movs	r3, #2
 80012d4:	737b      	strb	r3, [r7, #13]
    config.mpu60x0_i2c_mst_clk = MPU60X0_I2C_MST_CLK_400KHZ;
 80012d6:	230d      	movs	r3, #13
 80012d8:	747b      	strb	r3, [r7, #17]

    config.hmc5883_gain = HMC5883_GAIN_1_3GA;
 80012da:	2301      	movs	r3, #1
 80012dc:	74fb      	strb	r3, [r7, #19]
    config.hmc5883_samples = HMC5883_SAMPLES_8;
 80012de:	2303      	movs	r3, #3
 80012e0:	757b      	strb	r3, [r7, #21]
    config.hmc5883_data_rate = HMC5883_DATARATE_75HZ;
 80012e2:	2306      	movs	r3, #6
 80012e4:	74bb      	strb	r3, [r7, #18]
    config.hmc5883_mode = HMC5883_MODE_CONTINOUS;
 80012e6:	2300      	movs	r3, #0
 80012e8:	753b      	strb	r3, [r7, #20]

#ifdef BARO
    config.ms5611_osr = MS5611_OSR_4096;
 80012ea:	2308      	movs	r3, #8
 80012ec:	75bb      	strb	r3, [r7, #22]
    config.ms5611_read_period = 25;												// 25ms
 80012ee:	2319      	movs	r3, #25
 80012f0:	833b      	strh	r3, [r7, #24]
    config.ms5611_evt_read = p_sensor_set->baro.evt_read;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012f8:	61fb      	str	r3, [r7, #28]
#endif

    // initialize the device
    if (!mpu6050Init(p_sensor_set, &config)) return false;
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f821 	bl	8001348 <mpu6050Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <gy86Detect+0xd8>
 800130c:	2300      	movs	r3, #0
 800130e:	e013      	b.n	8001338 <gy86Detect+0x100>

    p_sensor_set->gyro.hardware = hw_Names[0];
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <gy86Detect+0x10c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	679a      	str	r2, [r3, #120]	; 0x78
    p_sensor_set->acc.hardware = hw_Names[0];
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <gy86Detect+0x10c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    p_sensor_set->mag.hardware = hw_Names[1];
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <gy86Detect+0x10c>)
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    p_sensor_set->baro.hardware = hw_Names[2];
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <gy86Detect+0x10c>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    return true;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	31924418 	.word	0x31924418
 8001344:	20000000 	.word	0x20000000

08001348 <mpu6050Init>:

static BOOL mpu6050Init(sensorSet_t *p_sensor_set, PifGy86Config* p_config)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    if (!pifGy86_Init(&s_gy86, PIF_ID_AUTO, &g_i2c_port, &p_sensor_set->imu_sensor, p_config)) return FALSE;
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <mpu6050Init+0x6c>)
 800135c:	2100      	movs	r1, #0
 800135e:	4816      	ldr	r0, [pc, #88]	; (80013b8 <mpu6050Init+0x70>)
 8001360:	f017 fd48 	bl	8018df4 <pifGy86_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <mpu6050Init+0x26>
 800136a:	2300      	movs	r3, #0
 800136c:	e01d      	b.n	80013aa <mpu6050Init+0x62>
    s_gy86._mpu6050.gyro_scale = 4;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <mpu6050Init+0x70>)
 8001370:	2204      	movs	r2, #4
 8001372:	711a      	strb	r2, [r3, #4]
    s_gy86._mpu6050.temp_scale = 100;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <mpu6050Init+0x70>)
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	719a      	strb	r2, [r3, #6]

    p_sensor_set->acc.init = mpuAccInit;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <mpu6050Init+0x74>)
 800137e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    p_sensor_set->acc.read = mpuAccRead;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <mpu6050Init+0x78>)
 8001386:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    p_sensor_set->gyro.init = mpuGyroInit;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <mpu6050Init+0x7c>)
 800138e:	67da      	str	r2, [r3, #124]	; 0x7c
    p_sensor_set->gyro.read = mpuGyroRead;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <mpu6050Init+0x80>)
 8001394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    p_sensor_set->mag.init = hmc5883lInit;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <mpu6050Init+0x84>)
 800139c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    p_sensor_set->mag.read = hmc5883lRead;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <mpu6050Init+0x88>)
 80013a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    return TRUE;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200014b4 	.word	0x200014b4
 80013b8:	200001d4 	.word	0x200001d4
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013f7 	.word	0x080013f7
 80013c4:	0800143f 	.word	0x0800143f
 80013c8:	08001461 	.word	0x08001461
 80013cc:	080014a9 	.word	0x080014a9
 80013d0:	080017f9 	.word	0x080017f9

080013d4 <mpuAccInit>:

static BOOL mpuAccInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetAccelAlign(&p_sensor_set->imu_sensor, align);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f018 fcf5 	bl	8019dd6 <pifImuSensor_SetAccelAlign>
    return TRUE;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <mpuAccRead>:

static BOOL mpuAccRead(sensorSet_t *p_sensor_set, int16_t *accData)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
	int16_t data[3];

    if (!pifImuSensor_ReadAccel2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f018 fcf7 	bl	8019dfc <pifImuSensor_ReadAccel2>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <mpuAccRead+0x22>
 8001414:	2300      	movs	r3, #0
 8001416:	e00e      	b.n	8001436 <mpuAccRead+0x40>
    accData[0] = data[0];
 8001418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	801a      	strh	r2, [r3, #0]
    accData[1] = data[1];
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001428:	801a      	strh	r2, [r3, #0]
    accData[2] = data[2];
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001432:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <mpuGyroInit>:

static BOOL mpuGyroInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	70fb      	strb	r3, [r7, #3]
    pifImuSensor_SetGyroAlign(&p_sensor_set->imu_sensor, align);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f018 fc87 	bl	8019d64 <pifImuSensor_SetGyroAlign>
    return TRUE;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <mpuGyroRead>:

static BOOL mpuGyroRead(sensorSet_t *p_sensor_set, int16_t *gyroData)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	if (!pifImuSensor_ReadGyro2(&p_sensor_set->imu_sensor, data)) return FALSE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f018 fc88 	bl	8019d88 <pifImuSensor_ReadGyro2>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <mpuGyroRead+0x22>
 800147e:	2300      	movs	r3, #0
 8001480:	e00e      	b.n	80014a0 <mpuGyroRead+0x40>
	gyroData[0] = data[0];
 8001482:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	801a      	strh	r2, [r3, #0]
	gyroData[1] = data[1];
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3302      	adds	r3, #2
 800148e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001492:	801a      	strh	r2, [r3, #0]
	gyroData[2] = data[2];
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3304      	adds	r3, #4
 8001498:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800149c:	801a      	strh	r2, [r3, #0]
	return TRUE;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <hmc5883lInit>:

static BOOL hmc5883lInit(sensorSet_t *p_sensor_set, PifImuSensorAlign align)
{
 80014a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014ac:	b08e      	sub	sp, #56	; 0x38
 80014ae:	af04      	add	r7, sp, #16
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
    int16_t magADC[3];
    int i;
    int32_t xyz_total[3] = { 0, 0, 0 }; // 32 bit totals so they won't overflow.
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
    bool bret = true;           // Error indicator
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    PifHmc5883ConfigA config_a;

    pifImuSensor_SetMagAlign(&p_sensor_set->imu_sensor, align);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f018 fcbc 	bl	8019e4c <pifImuSensor_SetMagAlign>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, FALSE)) return FALSE;
 80014d4:	4ba4      	ldr	r3, [pc, #656]	; (8001768 <hmc5883lInit+0x2c0>)
 80014d6:	68d8      	ldr	r0, [r3, #12]
 80014d8:	2300      	movs	r3, #0
 80014da:	f240 5201 	movw	r2, #1281	; 0x501
 80014de:	216a      	movs	r1, #106	; 0x6a
 80014e0:	f011 f89c 	bl	801261c <pifI2cDevice_WriteRegBit8>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <hmc5883lInit+0x46>
 80014ea:	2300      	movs	r3, #0
 80014ec:	e17b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, TRUE)) return FALSE;
 80014ee:	4b9e      	ldr	r3, [pc, #632]	; (8001768 <hmc5883lInit+0x2c0>)
 80014f0:	68d8      	ldr	r0, [r3, #12]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f240 1201 	movw	r2, #257	; 0x101
 80014f8:	2137      	movs	r1, #55	; 0x37
 80014fa:	f011 f88f 	bl	801261c <pifI2cDevice_WriteRegBit8>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <hmc5883lInit+0x60>
 8001504:	2300      	movs	r3, #0
 8001506:	e16e      	b.n	80017e6 <hmc5883lInit+0x33e>

    config_a.byte = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	733b      	strb	r3, [r7, #12]
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_POS_BIAS;
 800150c:	7b3b      	ldrb	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f362 0301 	bfi	r3, r2, #0, #2
 8001514:	733b      	strb	r3, [r7, #12]
    config_a.bit.data_rate = HMC5883_DATARATE_15HZ;
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	2204      	movs	r2, #4
 800151a:	f362 0384 	bfi	r3, r2, #2, #3
 800151e:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to pos bias
 8001520:	4b91      	ldr	r3, [pc, #580]	; (8001768 <hmc5883lInit+0x2c0>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	7b3a      	ldrb	r2, [r7, #12]
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f011 f861 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <hmc5883lInit+0x90>
 8001534:	2300      	movs	r3, #0
 8001536:	e156      	b.n	80017e6 <hmc5883lInit+0x33e>
    // Note that the  very first measurement after a gain change maintains the same gain as the previous setting.
    // The new gain setting is effective from the second measurement and on.
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_2_5GA)) return FALSE; // Set the Gain to 2.5Ga (7:5->011)
 8001538:	2103      	movs	r1, #3
 800153a:	488c      	ldr	r0, [pc, #560]	; (800176c <hmc5883lInit+0x2c4>)
 800153c:	f018 f8e2 	bl	8019704 <pifHmc5883_SetGain>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <hmc5883lInit+0xa2>
 8001546:	2300      	movs	r3, #0
 8001548:	e14d      	b.n	80017e6 <hmc5883lInit+0x33e>
    pifTaskManager_YieldMs(100);
 800154a:	2064      	movs	r0, #100	; 0x64
 800154c:	f013 fb84 	bl	8014c58 <pifTaskManager_YieldMs>
    pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4885      	ldr	r0, [pc, #532]	; (800176c <hmc5883lInit+0x2c4>)
 8001558:	f018 f8f3 	bl	8019742 <pifHmc5883_ReadMag>

    for (i = 0; i < 10; i++) {  // Collect 10 samples
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
 8001560:	e03d      	b.n	80015de <hmc5883lInit+0x136>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 8001562:	4b81      	ldr	r3, [pc, #516]	; (8001768 <hmc5883lInit+0x2c0>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f011 f840 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <hmc5883lInit+0xd2>
 8001576:	2300      	movs	r3, #0
 8001578:	e135      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f013 fb6c 	bl	8014c58 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);       // Get the raw values in case the scales have already been changed.
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4879      	ldr	r0, [pc, #484]	; (800176c <hmc5883lInit+0x2c4>)
 8001588:	f018 f8db 	bl	8019742 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged rather than taking the max.
        xyz_total[X] += magADC[X];
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        xyz_total[Y] += magADC[Y];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        xyz_total[Z] += magADC[Z];
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015a6:	4413      	add	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 80015aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015b2:	4293      	cmp	r3, r2
 80015b4:	bfa8      	it	ge
 80015b6:	4613      	movge	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015be:	4293      	cmp	r3, r2
 80015c0:	bfa8      	it	ge
 80015c2:	4613      	movge	r3, r2
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 80015ca:	dc03      	bgt.n	80015d4 <hmc5883lInit+0x12c>
            bret = false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 80015d2:	e007      	b.n	80015e4 <hmc5883lInit+0x13c>
        }
        actLed1Toggle();
 80015d4:	f000 fd92 	bl	80020fc <actLed1Toggle>
    for (i = 0; i < 10; i++) {  // Collect 10 samples
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	ddbe      	ble.n	8001562 <hmc5883lInit+0xba>
    }

    // Apply the negative bias. (Same gain)
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NEG_BIAS;
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f362 0301 	bfi	r3, r2, #0, #2
 80015ec:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;   // Reg A DOR = 0x010 + MS1, MS0 set to negative bias.
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <hmc5883lInit+0x2c0>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	7b3a      	ldrb	r2, [r7, #12]
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f010 fffa 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <hmc5883lInit+0x15e>
 8001602:	2300      	movs	r3, #0
 8001604:	e0ef      	b.n	80017e6 <hmc5883lInit+0x33e>
    for (i = 0; i < 10; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	e03d      	b.n	8001688 <hmc5883lInit+0x1e0>
        if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_SINGLE)) return FALSE;
 800160c:	4b56      	ldr	r3, [pc, #344]	; (8001768 <hmc5883lInit+0x2c0>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2201      	movs	r2, #1
 8001612:	2102      	movs	r1, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f010 ffeb 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <hmc5883lInit+0x17c>
 8001620:	2300      	movs	r3, #0
 8001622:	e0e0      	b.n	80017e6 <hmc5883lInit+0x33e>
        pifTaskManager_YieldMs(50);
 8001624:	2032      	movs	r0, #50	; 0x32
 8001626:	f013 fb17 	bl	8014c58 <pifTaskManager_YieldMs>
        pifHmc5883_ReadMag(&s_gy86._hmc5883, magADC);               // Get the raw values in case the scales have already been changed.
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	484e      	ldr	r0, [pc, #312]	; (800176c <hmc5883lInit+0x2c4>)
 8001632:	f018 f886 	bl	8019742 <pifHmc5883_ReadMag>

        // Since the measurements are noisy, they should be averaged.
        xyz_total[X] -= magADC[X];
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800163c:	1a9b      	subs	r3, r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        xyz_total[Y] -= magADC[Y];
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	617b      	str	r3, [r7, #20]
        xyz_total[Z] -= magADC[Z];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

        // Detect saturation.
        if (-4096 >= min(magADC[X], min(magADC[Y], magADC[Z]))) {
 8001654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001658:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800165c:	4293      	cmp	r3, r2
 800165e:	bfa8      	it	ge
 8001660:	4613      	movge	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001668:	4293      	cmp	r3, r2
 800166a:	bfa8      	it	ge
 800166c:	4613      	movge	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001674:	dc03      	bgt.n	800167e <hmc5883lInit+0x1d6>
            bret = false;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            break;              // Breaks out of the for loop.  No sense in continuing if we saturated.
 800167c:	e007      	b.n	800168e <hmc5883lInit+0x1e6>
        }
        actLed1Toggle();
 800167e:	f000 fd3d 	bl	80020fc <actLed1Toggle>
    for (i = 0; i < 10; i++) {
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3301      	adds	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	2b09      	cmp	r3, #9
 800168c:	ddbe      	ble.n	800160c <hmc5883lInit+0x164>
    }

    s_gy86._hmc5883.scale[X] = fabsf(660.0f * HMC58X3_X_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[X]);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001770 <hmc5883lInit+0x2c8>
 800169c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a0:	eef0 7ae7 	vabs.f32	s15, s15
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <hmc5883lInit+0x2c0>)
 80016a6:	edc3 7a05 	vstr	s15, [r3, #20]
    s_gy86._hmc5883.scale[Y] = fabsf(660.0f * HMC58X3_Y_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Y]);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001770 <hmc5883lInit+0x2c8>
 80016b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016bc:	eef0 7ae7 	vabs.f32	s15, s15
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <hmc5883lInit+0x2c0>)
 80016c2:	edc3 7a06 	vstr	s15, [r3, #24]
    s_gy86._hmc5883.scale[Z] = fabsf(660.0f * HMC58X3_Z_SELF_TEST_GAUSS * 2.0f * 10.0f / xyz_total[Z]);
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001774 <hmc5883lInit+0x2cc>
 80016d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d8:	eef0 7ae7 	vabs.f32	s15, s15
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <hmc5883lInit+0x2c0>)
 80016de:	edc3 7a07 	vstr	s15, [r3, #28]

    // leave test mode
    config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 80016e2:	7b3b      	ldrb	r3, [r7, #12]
 80016e4:	f36f 0301 	bfc	r3, #0, #2
 80016e8:	733b      	strb	r3, [r7, #12]
    config_a.bit.samples = HMC5883_SAMPLES_8;
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f0:	733b      	strb	r3, [r7, #12]
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) return FALSE;		// Configuration Register A  -- 0 11 100 00  num samples: 8 ; output rate: 15Hz ; normal measurement mode
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <hmc5883lInit+0x2c0>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	7b3a      	ldrb	r2, [r7, #12]
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f010 ff78 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <hmc5883lInit+0x262>
 8001706:	2300      	movs	r3, #0
 8001708:	e06d      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifHmc5883_SetGain(&s_gy86._hmc5883, HMC5883_GAIN_1_3GA)) return FALSE;                               		// Configuration Register B  -- 001 00000    configuration gain 1.3Ga
 800170a:	2101      	movs	r1, #1
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <hmc5883lInit+0x2c4>)
 800170e:	f017 fff9 	bl	8019704 <pifHmc5883_SetGain>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <hmc5883lInit+0x274>
 8001718:	2300      	movs	r3, #0
 800171a:	e064      	b.n	80017e6 <hmc5883lInit+0x33e>
    if (!pifI2cDevice_WriteRegByte(s_gy86._hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_CONTINOUS)) return FALSE;	// Mode register             -- 000000 00    continuous Conversion Mode
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <hmc5883lInit+0x2c0>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4618      	mov	r0, r3
 8001726:	f010 ff63 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <hmc5883lInit+0x28c>
 8001730:	2300      	movs	r3, #0
 8001732:	e058      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) return FALSE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <hmc5883lInit+0x2c0>)
 8001736:	68d8      	ldr	r0, [r3, #12]
 8001738:	2300      	movs	r3, #0
 800173a:	f240 1201 	movw	r2, #257	; 0x101
 800173e:	2137      	movs	r1, #55	; 0x37
 8001740:	f010 ff6c 	bl	801261c <pifI2cDevice_WriteRegBit8>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <hmc5883lInit+0x2a6>
 800174a:	2300      	movs	r3, #0
 800174c:	e04b      	b.n	80017e6 <hmc5883lInit+0x33e>

    if (!pifI2cDevice_WriteRegBit8(s_gy86._mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) return FALSE;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <hmc5883lInit+0x2c0>)
 8001750:	68d8      	ldr	r0, [r3, #12]
 8001752:	2301      	movs	r3, #1
 8001754:	f240 5201 	movw	r2, #1281	; 0x501
 8001758:	216a      	movs	r1, #106	; 0x6a
 800175a:	f010 ff5f 	bl	801261c <pifI2cDevice_WriteRegBit8>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d109      	bne.n	8001778 <hmc5883lInit+0x2d0>
 8001764:	2300      	movs	r3, #0
 8001766:	e03e      	b.n	80017e6 <hmc5883lInit+0x33e>
 8001768:	200001d4 	.word	0x200001d4
 800176c:	200001e8 	.word	0x200001e8
 8001770:	466f4000 	.word	0x466f4000
 8001774:	465ec001 	.word	0x465ec001

    if (!bret) {                // Something went wrong so get a best guess
 8001778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <hmc5883lInit+0x2f6>
    	s_gy86._hmc5883.scale[X] = 1.0f;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <hmc5883lInit+0x348>)
 8001788:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800178c:	615a      	str	r2, [r3, #20]
    	s_gy86._hmc5883.scale[Y] = 1.0f;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <hmc5883lInit+0x348>)
 8001790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001794:	619a      	str	r2, [r3, #24]
    	s_gy86._hmc5883.scale[Z] = 1.0f;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <hmc5883lInit+0x348>)
 8001798:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800179c:	61da      	str	r2, [r3, #28]
    }

    s_gy86._ms5611._p_task->pause = FALSE;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <hmc5883lInit+0x348>)
 80017a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]

    pifLog_Printf(LT_INFO, "Mag scale: %f %f %f", (double)s_gy86._hmc5883.scale[X], (double)s_gy86._hmc5883.scale[Y], (double)s_gy86._hmc5883.scale[Z]);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <hmc5883lInit+0x348>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fe80 	bl	80004b0 <__aeabi_f2d>
 80017b0:	4680      	mov	r8, r0
 80017b2:	4689      	mov	r9, r1
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <hmc5883lInit+0x348>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe79 	bl	80004b0 <__aeabi_f2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <hmc5883lInit+0x348>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe72 	bl	80004b0 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d4:	e9cd 4500 	strd	r4, r5, [sp]
 80017d8:	4642      	mov	r2, r8
 80017da:	464b      	mov	r3, r9
 80017dc:	4905      	ldr	r1, [pc, #20]	; (80017f4 <hmc5883lInit+0x34c>)
 80017de:	2002      	movs	r0, #2
 80017e0:	f011 fec8 	bl	8013574 <pifLog_Printf>
    return TRUE;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017f0:	200001d4 	.word	0x200001d4
 80017f4:	08025fb0 	.word	0x08025fb0

080017f8 <hmc5883lRead>:

static BOOL hmc5883lRead(sensorSet_t *p_sensor_set, int16_t *magData)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	int16_t data[3];

	// During calibration, magGain is 1.0, so the read returns normal non-calibrated values.
    // After calibration is done, magGain is set to calculated gain values.
	if (!pifImuSensor_ReadMag2(&p_sensor_set->imu_sensor, data)) return FALSE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f018 fb31 	bl	8019e72 <pifImuSensor_ReadMag2>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <hmc5883lRead+0x22>
 8001816:	2300      	movs	r3, #0
 8001818:	e00e      	b.n	8001838 <hmc5883lRead+0x40>
	magData[0] = data[0];
 800181a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	801a      	strh	r2, [r3, #0]
	magData[1] = data[1];
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3302      	adds	r3, #2
 8001826:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800182a:	801a      	strh	r2, [r3, #0]
	magData[2] = data[2];
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	3304      	adds	r3, #4
 8001830:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001834:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_actHcSr04Trigger>:

static sonarDistanceFuncPtr funcSonarDistance;


static void _actHcSr04Trigger(SWITCH state)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SONAR_TRIGGER_GPIO_Port, SONAR_TRIGGER_Pin, state);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <_actHcSr04Trigger+0x24>)
 8001852:	f01b fea1 	bl	801d598 <HAL_GPIO_WritePin>
    s_echo_state = 0;
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <_actHcSr04Trigger+0x28>)
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40020800 	.word	0x40020800
 8001868:	20000258 	.word	0x20000258

0800186c <hcsr04Echo>:

void hcsr04Echo()
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	s_echo_state ^= 1;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <hcsr04Echo+0x24>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <hcsr04Echo+0x24>)
 800187c:	701a      	strb	r2, [r3, #0]
	pifHcSr04_sigReceiveEcho(&s_hcsr04, s_echo_state);
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <hcsr04Echo+0x24>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <hcsr04Echo+0x28>)
 8001886:	f017 fe09 	bl	801949c <pifHcSr04_sigReceiveEcho>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000258 	.word	0x20000258
 8001894:	20000238 	.word	0x20000238

08001898 <_evtHcSr04Distance>:

static void _evtHcSr04Distance(int32_t distance)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
    float temp = (*funcSonarDistance)(distance);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <_evtHcSr04Distance+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	ed87 0a03 	vstr	s0, [r7, #12]
    static float pretemp = 0;

    if (temp != pretemp) {
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d007      	beq.n	80018d0 <_evtHcSr04Distance+0x38>
        pifHcSr04_SetTemperature(&s_hcsr04, temp);
 80018c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <_evtHcSr04Distance+0x48>)
 80018c6:	f017 fdc1 	bl	801944c <pifHcSr04_SetTemperature>
#ifdef __PIF_DEBUG__
        pifLog_Printf(LT_INFO, "Temp=%f", temp);
#endif
        pretemp = temp;
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <_evtHcSr04Distance+0x44>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6013      	str	r3, [r2, #0]
    }
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000025c 	.word	0x2000025c
 80018dc:	20000260 	.word	0x20000260
 80018e0:	20000238 	.word	0x20000238

080018e4 <hcsr04Init>:

BOOL hcsr04Init(uint16_t period, sonarDistanceFuncPtr func)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
	if (!pifHcSr04_Init(&s_hcsr04, PIF_ID_AUTO)) return FALSE;
 80018f0:	2100      	movs	r1, #0
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <hcsr04Init+0x50>)
 80018f4:	f017 fd1e 	bl	8019334 <pifHcSr04_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <hcsr04Init+0x1e>
 80018fe:	2300      	movs	r3, #0
 8001900:	e013      	b.n	800192a <hcsr04Init+0x46>
	s_hcsr04.act_trigger = _actHcSr04Trigger;
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <hcsr04Init+0x50>)
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <hcsr04Init+0x54>)
 8001906:	601a      	str	r2, [r3, #0]
	s_hcsr04.evt_read = _evtHcSr04Distance;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <hcsr04Init+0x50>)
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <hcsr04Init+0x58>)
 800190c:	605a      	str	r2, [r3, #4]
	if (!pifHcSr04_StartTrigger(&s_hcsr04, period)) return FALSE;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	4619      	mov	r1, r3
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <hcsr04Init+0x50>)
 8001914:	f017 fd76 	bl	8019404 <pifHcSr04_StartTrigger>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <hcsr04Init+0x3e>
 800191e:	2300      	movs	r3, #0
 8001920:	e003      	b.n	800192a <hcsr04Init+0x46>

	funcSonarDistance = func;
 8001922:	4a07      	ldr	r2, [pc, #28]	; (8001940 <hcsr04Init+0x5c>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6013      	str	r3, [r2, #0]
    return TRUE;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000238 	.word	0x20000238
 8001938:	08001841 	.word	0x08001841
 800193c:	08001899 	.word	0x08001899
 8001940:	2000025c 	.word	0x2000025c

08001944 <actI2cRead>:
#endif

#ifdef USE_I2C_DMA

PifI2cReturn actI2cRead(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	4613      	mov	r3, r2
 8001954:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <actI2cRead+0x4c>
		return (HAL_I2C_Mem_Read_DMA(&hi2c1, (addr << 1) | 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	b21b      	sxth	r3, r3
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	b21b      	sxth	r3, r3
 8001968:	b299      	uxth	r1, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	b29a      	uxth	r2, r3
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	b298      	uxth	r0, r3
 8001972:	8b3b      	ldrh	r3, [r7, #24]
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4603      	mov	r3, r0
 800197c:	480f      	ldr	r0, [pc, #60]	; (80019bc <actI2cRead+0x78>)
 800197e:	f01c fb45 	bl	801e00c <HAL_I2C_Mem_Read_DMA>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <actI2cRead+0x48>
 8001988:	2300      	movs	r3, #0
 800198a:	e013      	b.n	80019b4 <actI2cRead+0x70>
 800198c:	2302      	movs	r3, #2
 800198e:	e011      	b.n	80019b4 <actI2cRead+0x70>
	}
	else {
		return (HAL_I2C_Master_Receive_DMA(&hi2c1, (addr << 1) | 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b21b      	sxth	r3, r3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	b21b      	sxth	r3, r3
 800199c:	b299      	uxth	r1, r3
 800199e:	8b3b      	ldrh	r3, [r7, #24]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <actI2cRead+0x78>)
 80019a4:	f01c f89e 	bl	801dae4 <HAL_I2C_Master_Receive_DMA>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <actI2cRead+0x6e>
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <actI2cRead+0x70>
 80019b2:	2302      	movs	r3, #2
	}
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000520 	.word	0x20000520

080019c0 <actI2cWrite>:

PifI2cReturn actI2cWrite(uint8_t addr, uint32_t iaddr, uint8_t isize, uint8_t* p_data, uint16_t size)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	4613      	mov	r3, r2
 80019d0:	73bb      	strb	r3, [r7, #14]
	if (isize) {
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d016      	beq.n	8001a06 <actI2cWrite+0x46>
		return (HAL_I2C_Mem_Write_DMA(&hi2c1, addr << 1, iaddr, isize, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	b299      	uxth	r1, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	b298      	uxth	r0, r3
 80019e8:	8b3b      	ldrh	r3, [r7, #24]
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4603      	mov	r3, r0
 80019f2:	480e      	ldr	r0, [pc, #56]	; (8001a2c <actI2cWrite+0x6c>)
 80019f4:	f01c f9a6 	bl	801dd44 <HAL_I2C_Mem_Write_DMA>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <actI2cWrite+0x42>
 80019fe:	2300      	movs	r3, #0
 8001a00:	e010      	b.n	8001a24 <actI2cWrite+0x64>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <actI2cWrite+0x64>
	}
	else {
		return (HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, p_data, size) == HAL_OK) ? IR_WAIT : IR_ERROR;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b299      	uxth	r1, r3
 8001a0e:	8b3b      	ldrh	r3, [r7, #24]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <actI2cWrite+0x6c>)
 8001a14:	f01b ff36 	bl	801d884 <HAL_I2C_Master_Transmit_DMA>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <actI2cWrite+0x62>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <actI2cWrite+0x64>
 8001a22:	2302      	movs	r3, #2
	}
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000520 	.word	0x20000520

08001a30 <HAL_I2C_MemRxCpltCallback>:
#endif

#if defined(USE_I2C_INTERRUPT) || defined(USE_I2C_DMA)

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d103      	bne.n	8001a4a <HAL_I2C_MemRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a42:	2101      	movs	r1, #1
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001a46:	f010 fe4b 	bl	80126e0 <pifI2cPort_sigEndTransfer>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005400 	.word	0x40005400
 8001a58:	200014b4 	.word	0x200014b4

08001a5c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d103      	bne.n	8001a76 <HAL_I2C_MasterRxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8001a72:	f010 fe35 	bl	80126e0 <pifI2cPort_sigEndTransfer>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40005400 	.word	0x40005400
 8001a84:	200014b4 	.word	0x200014b4

08001a88 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_I2C_MemTxCpltCallback+0x24>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d103      	bne.n	8001aa2 <HAL_I2C_MemTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <HAL_I2C_MemTxCpltCallback+0x28>)
 8001a9e:	f010 fe1f 	bl	80126e0 <pifI2cPort_sigEndTransfer>
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40005400 	.word	0x40005400
 8001ab0:	200014b4 	.word	0x200014b4

08001ab4 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d103      	bne.n	8001ace <HAL_I2C_MasterTxCpltCallback+0x1a>
		pifI2cPort_sigEndTransfer(&g_i2c_port, TRUE);
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4804      	ldr	r0, [pc, #16]	; (8001adc <HAL_I2C_MasterTxCpltCallback+0x28>)
 8001aca:	f010 fe09 	bl	80126e0 <pifI2cPort_sigEndTransfer>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40005400 	.word	0x40005400
 8001adc:	200014b4 	.word	0x200014b4

08001ae0 <i2cInit>:

#endif

BOOL i2cInit()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
    if (!pifI2cPort_Init(&g_i2c_port, PIF_ID_AUTO, 5, EEPROM_PAGE_SIZE)) return FALSE;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <i2cInit+0x2c>)
 8001aec:	f010 fb5e 	bl	80121ac <pifI2cPort_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <i2cInit+0x1a>
 8001af6:	2300      	movs	r3, #0
 8001af8:	e006      	b.n	8001b08 <i2cInit+0x28>
    g_i2c_port.act_read = actI2cRead;
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <i2cInit+0x2c>)
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <i2cInit+0x30>)
 8001afe:	605a      	str	r2, [r3, #4]
    g_i2c_port.act_write = actI2cWrite;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <i2cInit+0x2c>)
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <i2cInit+0x34>)
 8001b04:	609a      	str	r2, [r3, #8]
    return TRUE;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200014b4 	.word	0x200014b4
 8001b10:	08001945 	.word	0x08001945
 8001b14:	080019c1 	.word	0x080019c1

08001b18 <failsafeCheck>:

#define PWM_TIMER_MHZ 1
#define PWM_TIMER_8_MHZ 8

static void failsafeCheck(uint8_t channel, uint16_t pulse)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	80bb      	strh	r3, [r7, #4]
    static uint8_t goodPulses;

    if (channel < 4 && pulse > failsafeThreshold)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d811      	bhi.n	8001b52 <failsafeCheck+0x3a>
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <failsafeCheck+0x78>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90c      	bls.n	8001b52 <failsafeCheck+0x3a>
        goodPulses |= (1 << channel);       // if signal is valid - mark channel as OK
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <failsafeCheck+0x7c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b25b      	sxtb	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <failsafeCheck+0x7c>)
 8001b50:	701a      	strb	r2, [r3, #0]
    if (goodPulses == 0x0F) {               // If first four chanells have good pulses, clear FailSafe counter
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <failsafeCheck+0x7c>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d114      	bne.n	8001b84 <failsafeCheck+0x6c>
        goodPulses = 0;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <failsafeCheck+0x7c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
        if (failsafeCnt > 20)
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <failsafeCheck+0x80>)
 8001b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b66:	2b14      	cmp	r3, #20
 8001b68:	dd09      	ble.n	8001b7e <failsafeCheck+0x66>
            failsafeCnt -= 20;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <failsafeCheck+0x80>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b14      	subs	r3, #20
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <failsafeCheck+0x80>)
 8001b7a:	801a      	strh	r2, [r3, #0]
        else
            failsafeCnt = 0;
    }
}
 8001b7c:	e002      	b.n	8001b84 <failsafeCheck+0x6c>
            failsafeCnt = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <failsafeCheck+0x80>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000369 	.word	0x20000369
 8001b98:	200016e2 	.word	0x200016e2

08001b9c <pwmReadRc>:

void pwmReadRc()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint16_t value = pifRcPpm_sigTick(&s_rc.ppm, (*pif_act_timer1us)());
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <pwmReadRc+0x3c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <pwmReadRc+0x40>)
 8001bae:	f016 fb28 	bl	8018202 <pifRcPpm_sigTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
    if (value) {
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d008      	beq.n	8001bce <pwmReadRc+0x32>
        failsafeCheck(s_rc.ppm._channel, value);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <pwmReadRc+0x40>)
 8001bbe:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ffa5 	bl	8001b18 <failsafeCheck>
    }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20001d6c 	.word	0x20001d6c
 8001bdc:	20000264 	.word	0x20000264

08001be0 <_evtRcReceive>:

static void _evtRcReceive(PifRc* p_owner, uint16_t* p_channel, PifIssuerP p_issuer)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
    PifTask* p_task = (PifTask*)p_issuer;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	613b      	str	r3, [r7, #16]
    int i;

	for (i = 0; i < p_owner->_channel_count; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00b      	b.n	8001c0e <_evtRcReceive+0x2e>
		captures[i] = p_channel[i];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	8819      	ldrh	r1, [r3, #0]
 8001c00:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <_evtRcReceive+0x48>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < p_owner->_channel_count; i++) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	461a      	mov	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4293      	cmp	r3, r2
 8001c18:	dbed      	blt.n	8001bf6 <_evtRcReceive+0x16>
	}
    pifTask_SetTrigger(p_task);
 8001c1a:	6938      	ldr	r0, [r7, #16]
 8001c1c:	f012 fc78 	bl	8014510 <pifTask_SetTrigger>
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200002f0 	.word	0x200002f0

08001c2c <pwmWriteStandard>:

static void pwmWriteStandard(uint8_t index, uint16_t value)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	71fb      	strb	r3, [r7, #7]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80bb      	strh	r3, [r7, #4]
	switch (motors[index]->port) {
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <pwmWriteStandard+0x8c>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d830      	bhi.n	8001cac <pwmWriteStandard+0x80>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <pwmWriteStandard+0x24>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c85 	.word	0x08001c85
 8001c54:	08001cad 	.word	0x08001cad
 8001c58:	08001cad 	.word	0x08001cad
 8001c5c:	08001cad 	.word	0x08001cad
 8001c60:	08001c8f 	.word	0x08001c8f
 8001c64:	08001cad 	.word	0x08001cad
 8001c68:	08001cad 	.word	0x08001cad
 8001c6c:	08001cad 	.word	0x08001cad
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	08001cad 	.word	0x08001cad
 8001c78:	08001cad 	.word	0x08001cad
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001ca3 	.word	0x08001ca3
	case TIM_CHANNEL_1:	htim3.Instance->CCR1 = value; break;
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	88ba      	ldrh	r2, [r7, #4]
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8c:	e00e      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_2:	htim3.Instance->CCR2 = value; break;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	88ba      	ldrh	r2, [r7, #4]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
 8001c96:	e009      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_3:	htim3.Instance->CCR3 = value; break;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <pwmWriteStandard+0x90>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	88ba      	ldrh	r2, [r7, #4]
 8001c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ca0:	e004      	b.n	8001cac <pwmWriteStandard+0x80>
	case TIM_CHANNEL_4:	htim3.Instance->CCR4 = value; break;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <pwmWriteStandard+0x90>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	88ba      	ldrh	r2, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8001caa:	bf00      	nop
	}
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000310 	.word	0x20000310
 8001cbc:	2000067c 	.word	0x2000067c

08001cc0 <pwmInit>:

bool pwmInit(drv_pwm_config_t *init)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    int i = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    const hardwareMaps_t *setup;
    uint16_t period;
    pwmPortData_t *p;

    // to avoid importing cfg/mcfg
    failsafeThreshold = init->failsafeThreshold;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8a5a      	ldrh	r2, [r3, #18]
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <pwmInit+0x244>)
 8001cd2:	801a      	strh	r2, [r3, #0]
    // pwm filtering on input
    pwmFilter = init->pwmFilter;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	79da      	ldrb	r2, [r3, #7]
 8001cd8:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <pwmInit+0x248>)
 8001cda:	701a      	strb	r2, [r3, #0]

    syncPWM = init->syncPWM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7d1a      	ldrb	r2, [r3, #20]
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <pwmInit+0x24c>)
 8001ce2:	701a      	strb	r2, [r3, #0]

    // this is pretty hacky shit, but it will do for now. array of 4 config maps, [ multiPWM multiPPM airPWM airPPM ]
    if (init->airplane)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	799b      	ldrb	r3, [r3, #6]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <pwmInit+0x30>
        i = 2; // switch to air hardware config
 8001cec:	2302      	movs	r3, #2
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
    if (init->usePPM)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <pwmInit+0x3e>
        i++; // next index is for PPM
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24

    setup = hardwareMaps[i];
 8001cfe:	4a84      	ldr	r2, [pc, #528]	; (8001f10 <pwmInit+0x250>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_PORTS; i++) {
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e0ae      	b.n	8001e6c <pwmInit+0x1ac>
        uint8_t pwm = setup[i].pwm;
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	75fb      	strb	r3, [r7, #23]
        uint8_t type = setup[i].type;
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (pwm == 0xFF) // terminator
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	f000 809f 	beq.w	8001e76 <pwmInit+0x1b6>
            break;

        // hacks to allow current functionality
        if ((type & (TYPE_IP | TYPE_IW)) && !init->enableInput)
 8001d38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <pwmInit+0x98>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <pwmInit+0x98>
        	type = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if (type & TYPE_IP) {
 8001d58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <pwmInit+0xb6>
            p = &pwmPorts[pwm];
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4a6a      	ldr	r2, [pc, #424]	; (8001f14 <pwmInit+0x254>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
            numInputs = 8;
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <pwmInit+0x258>)
 8001d70:	2208      	movs	r2, #8
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e077      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_IW) {
 8001d76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d171      	bne.n	8001e66 <pwmInit+0x1a6>
				attachInterrupt(setup[i].port, _isrPulseWidth8, CHANGE);
				break;
			}
			numInputs++;
*/
        } else if (type & TYPE_M) {
 8001d82:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04e      	beq.n	8001e2c <pwmInit+0x16c>
            uint32_t hz, mhz;

            if (init->motorPwmRate > 500 || init->fastPWM)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	895b      	ldrh	r3, [r3, #10]
 8001d92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d96:	d803      	bhi.n	8001da0 <pwmInit+0xe0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7d5b      	ldrb	r3, [r3, #21]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <pwmInit+0xe6>
                mhz = PWM_TIMER_8_MHZ;
 8001da0:	2308      	movs	r3, #8
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e001      	b.n	8001daa <pwmInit+0xea>
            else
                mhz = PWM_TIMER_MHZ;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]

            hz = mhz * 1000000;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <pwmInit+0x25c>)
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	613b      	str	r3, [r7, #16]

            if (init->fastPWM)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7d5b      	ldrb	r3, [r3, #21]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <pwmInit+0x10a>
                period = hz / 4000;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <pwmInit+0x260>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dc8:	e006      	b.n	8001dd8 <pwmInit+0x118>
            else
                period = hz / init->motorPwmRate;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	895b      	ldrh	r3, [r3, #10]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dd6:	847b      	strh	r3, [r7, #34]	; 0x22

            pwmPorts[pwm].period = period;
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	494e      	ldr	r1, [pc, #312]	; (8001f14 <pwmInit+0x254>)
 8001ddc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001dde:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
            pwmPorts[pwm].port = setup[i].port;
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	441a      	add	r2, r3
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	7891      	ldrb	r1, [r2, #2]
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <pwmInit+0x254>)
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	460a      	mov	r2, r1
 8001dfa:	70da      	strb	r2, [r3, #3]
            HAL_TIM_PWM_Start(&htim3, pwmPorts[pwm].port);
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <pwmInit+0x254>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	78db      	ldrb	r3, [r3, #3]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4846      	ldr	r0, [pc, #280]	; (8001f24 <pwmInit+0x264>)
 8001e0a:	f01f f85d 	bl	8020ec8 <HAL_TIM_PWM_Start>
            motors[numMotors++] = &pwmPorts[pwm];
 8001e0e:	7dfa      	ldrb	r2, [r7, #23]
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <pwmInit+0x268>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	b2c8      	uxtb	r0, r1
 8001e18:	4943      	ldr	r1, [pc, #268]	; (8001f28 <pwmInit+0x268>)
 8001e1a:	7008      	strb	r0, [r1, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	0093      	lsls	r3, r2, #2
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <pwmInit+0x254>)
 8001e22:	4413      	add	r3, r2
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <pwmInit+0x26c>)
 8001e26:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001e2a:	e01c      	b.n	8001e66 <pwmInit+0x1a6>
        } else if (type & TYPE_S) {
 8001e2c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da18      	bge.n	8001e66 <pwmInit+0x1a6>
        	pwmPorts[pwm].period = 1000000 / init->servoPwmRate;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	899b      	ldrh	r3, [r3, #12]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b38      	ldr	r3, [pc, #224]	; (8001f1c <pwmInit+0x25c>)
 8001e3c:	fb93 f2f2 	sdiv	r2, r3, r2
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	b291      	uxth	r1, r2
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <pwmInit+0x254>)
 8001e46:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
            servos[numServos++] = &pwmPorts[pwm];
 8001e4a:	7dfa      	ldrb	r2, [r7, #23]
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <pwmInit+0x270>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	1c59      	adds	r1, r3, #1
 8001e52:	b2c8      	uxtb	r0, r1
 8001e54:	4936      	ldr	r1, [pc, #216]	; (8001f30 <pwmInit+0x270>)
 8001e56:	7008      	strb	r0, [r1, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	0093      	lsls	r3, r2, #2
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <pwmInit+0x254>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <pwmInit+0x274>)
 8001e62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (i = 0; i < MAX_PORTS; i++) {
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	3301      	adds	r3, #1
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	2b0d      	cmp	r3, #13
 8001e70:	f77f af4d 	ble.w	8001d0e <pwmInit+0x4e>
 8001e74:	e000      	b.n	8001e78 <pwmInit+0x1b8>
            break;
 8001e76:	bf00      	nop
        }
    }

    if (init->enableInput) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d035      	beq.n	8001eec <pwmInit+0x22c>
		if (init->usePPM) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d019      	beq.n	8001ebc <pwmInit+0x1fc>
			if (pifRcPpm_Init(&s_rc.ppm, PIF_ID_AUTO, numInputs, 2700)) {
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <pwmInit+0x258>)
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	f640 238c 	movw	r3, #2700	; 0xa8c
 8001e90:	2100      	movs	r1, #0
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <pwmInit+0x278>)
 8001e94:	f016 f942 	bl	801811c <pifRcPpm_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d026      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPpm_SetValidRange(&s_rc.ppm, PULSE_MIN, PULSE_MAX);
 8001e9e:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ea2:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ea6:	4824      	ldr	r0, [pc, #144]	; (8001f38 <pwmInit+0x278>)
 8001ea8:	f016 f98a 	bl	80181c0 <pifRcPpm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.ppm.parent, _evtRcReceive, g_task_compute_rc);
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <pwmInit+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4923      	ldr	r1, [pc, #140]	; (8001f40 <pwmInit+0x280>)
 8001eb4:	4820      	ldr	r0, [pc, #128]	; (8001f38 <pwmInit+0x278>)
 8001eb6:	f015 fdf5 	bl	8017aa4 <pifRc_AttachEvtReceive>
 8001eba:	e017      	b.n	8001eec <pwmInit+0x22c>
			}
		}
		else {
			if (pifRcPwm_Init(&s_rc.pwm, PIF_ID_AUTO, numInputs)) {
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <pwmInit+0x258>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	481c      	ldr	r0, [pc, #112]	; (8001f38 <pwmInit+0x278>)
 8001ec6:	f016 f9e9 	bl	801829c <pifRcPwm_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <pwmInit+0x22c>
				pifRcPwm_SetValidRange(&s_rc.pwm, PULSE_MIN, PULSE_MAX);
 8001ed0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001ed4:	f240 21ee 	movw	r1, #750	; 0x2ee
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <pwmInit+0x278>)
 8001eda:	f016 fa59 	bl	8018390 <pifRcPwm_SetValidRange>
				pifRc_AttachEvtReceive(&s_rc.pwm.parent, _evtRcReceive, g_task_compute_rc);
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <pwmInit+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4916      	ldr	r1, [pc, #88]	; (8001f40 <pwmInit+0x280>)
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <pwmInit+0x278>)
 8001ee8:	f015 fddc 	bl	8017aa4 <pifRc_AttachEvtReceive>
			}
		}
    }

    // determine motor writer function
    pwmWritePtr = pwmWriteStandard;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <pwmInit+0x284>)
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <pwmInit+0x288>)
 8001ef0:	601a      	str	r2, [r3, #0]

    // set return values in init struct
    init->numServos = numServos;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <pwmInit+0x270>)
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	759a      	strb	r2, [r3, #22]

    return false;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000367 	.word	0x20000367
 8001f0c:	20000368 	.word	0x20000368
 8001f10:	08027c60 	.word	0x08027c60
 8001f14:	200002b8 	.word	0x200002b8
 8001f18:	20000366 	.word	0x20000366
 8001f1c:	000f4240 	.word	0x000f4240
 8001f20:	10624dd3 	.word	0x10624dd3
 8001f24:	2000067c 	.word	0x2000067c
 8001f28:	20000364 	.word	0x20000364
 8001f2c:	20000310 	.word	0x20000310
 8001f30:	20000365 	.word	0x20000365
 8001f34:	20000340 	.word	0x20000340
 8001f38:	20000264 	.word	0x20000264
 8001f3c:	2000150c 	.word	0x2000150c
 8001f40:	08001be1 	.word	0x08001be1
 8001f44:	20000360 	.word	0x20000360
 8001f48:	08001c2d 	.word	0x08001c2d

08001f4c <actPwmWriteMotor>:

void actPwmWriteMotor(uint8_t index, uint16_t value)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80bb      	strh	r3, [r7, #4]
    if (index < numMotors)
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <actPwmWriteMotor+0x30>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d205      	bcs.n	8001f72 <actPwmWriteMotor+0x26>
        pwmWritePtr(index, value);
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <actPwmWriteMotor+0x34>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	88b9      	ldrh	r1, [r7, #4]
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4798      	blx	r3
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000364 	.word	0x20000364
 8001f80:	20000360 	.word	0x20000360

08001f84 <actPwmWriteServo>:

void actPwmWriteServo(uint8_t index, uint16_t value)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	80bb      	strh	r3, [r7, #4]
//    if (index < numServos)
//    	analogWrite(servos[index]->port, value);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <actPwmRead>:

uint16_t actPwmRead(uint8_t channel)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    return captures[channel];
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <actPwmRead+0x20>)
 8001fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200002f0 	.word	0x200002f0

08001fc4 <systemInit>:
	PifStorageVar s_storage;
#endif


void systemInit(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#ifdef BUZZER
    actBuzzerAction(PIF_ID_BUZZER, OFF);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001fce:	f000 f8ab 	bl	8002128 <actBuzzerAction>
#endif
    actLed0State(OFF);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f850 	bl	8002078 <actLed0State>
    actLed1State(OFF);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f000 f879 	bl	80020d0 <actLed1State>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <failureMode>:

void failureMode(uint8_t mode)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
#ifdef __PIF_DEBUG__
    pifLog_SendAndExit();
#endif
    actLed1State(OFF);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f86f 	bl	80020d0 <actLed1State>
    actLed0State(ON);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 f840 	bl	8002078 <actLed0State>
    while (1) {
        actLed1Toggle();
 8001ff8:	f000 f880 	bl	80020fc <actLed1Toggle>
        actLed0Toggle();
 8001ffc:	f000 f852 	bl	80020a4 <actLed0Toggle>
        pif_Delay1ms(475 * mode - 2);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	0052      	lsls	r2, r2, #1
 8002008:	441a      	add	r2, r3
 800200a:	0152      	lsls	r2, r2, #5
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	461a      	mov	r2, r3
 8002010:	0091      	lsls	r1, r2, #2
 8002012:	461a      	mov	r2, r3
 8002014:	460b      	mov	r3, r1
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b02      	subs	r3, #2
 800201c:	b29b      	uxth	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f00f f946 	bl	80112b0 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 8002024:	2101      	movs	r1, #1
 8002026:	f44f 7098 	mov.w	r0, #304	; 0x130
 800202a:	f000 f87d 	bl	8002128 <actBuzzerAction>
        pif_Delay1ms(25);
 800202e:	2019      	movs	r0, #25
 8002030:	f00f f93e 	bl	80112b0 <pif_Delay1ms>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002034:	2100      	movs	r1, #0
 8002036:	f44f 7098 	mov.w	r0, #304	; 0x130
 800203a:	f000 f875 	bl	8002128 <actBuzzerAction>
        actLed1Toggle();
 800203e:	e7db      	b.n	8001ff8 <failureMode+0x16>

08002040 <systemReset>:
    }
}

void systemReset(bool toBootloader)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	pifLog_Printf(LT_INFO, "System Rebooting %d...", toBootloader);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	461a      	mov	r2, r3
 800204e:	4907      	ldr	r1, [pc, #28]	; (800206c <systemReset+0x2c>)
 8002050:	2002      	movs	r0, #2
 8002052:	f011 fa8f 	bl	8013574 <pifLog_Printf>
	pif_Delay1ms(2000);
 8002056:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800205a:	f00f f929 	bl	80112b0 <pif_Delay1ms>
//	__DSB;
	SCB->AIRCR = ((0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk);//software reset
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <systemReset+0x30>)
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <systemReset+0x34>)
 8002062:	60da      	str	r2, [r3, #12]
	//RSTC->RSTC_CR = RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
	//NVIC_SystemReset();
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	08025fc4 	.word	0x08025fc4
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	05fa0004 	.word	0x05fa0004

08002078 <actLed0State>:

static BOOL len0_state = OFF;

void actLed0State(BOOL state)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
#ifdef LED0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, state);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	461a      	mov	r2, r3
 8002086:	2110      	movs	r1, #16
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <actLed0State+0x24>)
 800208a:	f01b fa85 	bl	801d598 <HAL_GPIO_WritePin>
    len0_state = state;
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <actLed0State+0x28>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40020800 	.word	0x40020800
 80020a0:	200003b4 	.word	0x200003b4

080020a4 <actLed0Toggle>:

void actLed0Toggle()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
#ifdef LED0
	len0_state ^= 1;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <actLed0Toggle+0x24>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <actLed0Toggle+0x24>)
 80020b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, len0_state);
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <actLed0Toggle+0x24>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	2110      	movs	r1, #16
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <actLed0Toggle+0x28>)
 80020c0:	f01b fa6a 	bl	801d598 <HAL_GPIO_WritePin>
#endif
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200003b4 	.word	0x200003b4
 80020cc:	40020800 	.word	0x40020800

080020d0 <actLed1State>:

static BOOL len1_state = OFF;

void actLed1State(BOOL state)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
#ifdef LED1
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	461a      	mov	r2, r3
 80020de:	2104      	movs	r1, #4
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <actLed1State+0x24>)
 80020e2:	f01b fa59 	bl	801d598 <HAL_GPIO_WritePin>
    len1_state = state;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <actLed1State+0x28>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	7013      	strb	r3, [r2, #0]
#else
    (void)state;
#endif
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40020400 	.word	0x40020400
 80020f8:	200003b5 	.word	0x200003b5

080020fc <actLed1Toggle>:

void actLed1Toggle()
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
#ifdef LED1
	len1_state ^= 1;
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <actLed1Toggle+0x24>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <actLed1Toggle+0x24>)
 800210c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, len1_state);
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <actLed1Toggle+0x24>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	2104      	movs	r1, #4
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <actLed1Toggle+0x28>)
 8002118:	f01b fa3e 	bl	801d598 <HAL_GPIO_WritePin>
#endif
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200003b5 	.word	0x200003b5
 8002124:	40020400 	.word	0x40020400

08002128 <actBuzzerAction>:

void actBuzzerAction(PifId id, BOOL action)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	460a      	mov	r2, r1
 8002132:	80fb      	strh	r3, [r7, #6]
 8002134:	4613      	mov	r3, r2
 8002136:	717b      	strb	r3, [r7, #5]
	(void)id;

#ifdef BUZZER
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, action);
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	461a      	mov	r2, r3
 800213c:	2120      	movs	r1, #32
 800213e:	4803      	ldr	r0, [pc, #12]	; (800214c <actBuzzerAction+0x24>)
 8002140:	f01b fa2a 	bl	801d598 <HAL_GPIO_WritePin>
#else
    (void)action;
#endif
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40020800 	.word	0x40020800

08002150 <actInvState>:

void actInvState(BOOL state)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
#ifdef INVERTER
	HAL_GPIO_WritePin(INVERTER_GPIO_Port, INVERTER_Pin, state);
#else
    (void)state;
#endif
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	80fb      	strh	r3, [r7, #6]
	extern void hcsr04Echo();

    switch (GPIO_Pin) {
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_EXTI_Callback+0x1c>
 8002176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800217a:	d105      	bne.n	8002188 <HAL_GPIO_EXTI_Callback+0x22>
    case RC_PPM_Pin:
    	pwmReadRc();
 800217c:	f7ff fd0e 	bl	8001b9c <pwmReadRc>
		break;
 8002180:	e002      	b.n	8002188 <HAL_GPIO_EXTI_Callback+0x22>

    case SONAR_ECHO_Pin:
    	hcsr04Echo();
 8002182:	f7ff fb73 	bl	800186c <hcsr04Echo>
    	break;
 8002186:	bf00      	nop
    }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <storageInit>:
}

#endif

PifStorage* storageInit()
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af02      	add	r7, sp, #8
	if (!pifStorageFix_Init(&s_storage, PIF_ID_AUTO)) return NULL;
	if (!pifStorageFix_AttachActStorage(&s_storage, actStorageRead, actStorageWrite)) goto fail;
	if (!pifStorageFix_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME)) goto fail;
#endif
#ifdef STORAGE_EEPROM
	if (!pifStorageVar_Init(&s_storage, PIF_ID_AUTO)) return NULL;
 8002196:	2100      	movs	r1, #0
 8002198:	4822      	ldr	r0, [pc, #136]	; (8002224 <storageInit+0x94>)
 800219a:	f019 f901 	bl	801b3a0 <pifStorageVar_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <storageInit+0x18>
 80021a4:	2300      	movs	r3, #0
 80021a6:	e039      	b.n	800221c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 80021a8:	230a      	movs	r3, #10
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	2250      	movs	r2, #80	; 0x50
 80021b0:	491d      	ldr	r1, [pc, #116]	; (8002228 <storageInit+0x98>)
 80021b2:	481c      	ldr	r0, [pc, #112]	; (8002224 <storageInit+0x94>)
 80021b4:	f019 fa3c 	bl	801b630 <pifStorageVar_AttachI2c>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d027      	beq.n	800220e <storageInit+0x7e>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 80021be:	2308      	movs	r3, #8
 80021c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	4817      	ldr	r0, [pc, #92]	; (8002224 <storageInit+0x94>)
 80021c8:	f019 f960 	bl	801b48c <pifStorageVar_SetMedia>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01f      	beq.n	8002212 <storageInit+0x82>
	if (!pifStorageVar_IsFormat(&s_storage.parent)) {
 80021d2:	4814      	ldr	r0, [pc, #80]	; (8002224 <storageInit+0x94>)
 80021d4:	f019 fa45 	bl	801b662 <pifStorageVar_IsFormat>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <storageInit+0x7a>
		pifLog_Printf(LT_INFO, "Storage Init : EC=%d", pif_error);
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <storageInit+0x9c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4912      	ldr	r1, [pc, #72]	; (8002230 <storageInit+0xa0>)
 80021e6:	2002      	movs	r0, #2
 80021e8:	f011 f9c4 	bl	8013574 <pifLog_Printf>
		if (!pifStorage_Format(&s_storage.parent)) {
 80021ec:	480d      	ldr	r0, [pc, #52]	; (8002224 <storageInit+0x94>)
 80021ee:	f018 fff4 	bl	801b1da <pifStorage_Format>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <storageInit+0x72>
			pifLog_Printf(LT_INFO, "Storage format failed");
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <storageInit+0xa4>)
 80021fa:	2002      	movs	r0, #2
 80021fc:	f011 f9ba 	bl	8013574 <pifLog_Printf>
			goto fail;
 8002200:	e008      	b.n	8002214 <storageInit+0x84>
		}
		else {
			pifLog_Printf(LT_INFO, "Storage format");
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <storageInit+0xa8>)
 8002204:	2002      	movs	r0, #2
 8002206:	f011 f9b5 	bl	8013574 <pifLog_Printf>
		}
	}
#endif
	return &s_storage.parent;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <storageInit+0x94>)
 800220c:	e006      	b.n	800221c <storageInit+0x8c>
	if (!pifStorageVar_AttachI2c(&s_storage, &g_i2c_port, ATMEL_I2C_ADDRESS, EEPROM_I_ADDR_SIZE, 10)) goto fail;	// 10ms
 800220e:	bf00      	nop
 8002210:	e000      	b.n	8002214 <storageInit+0x84>
	if (!pifStorageVar_SetMedia(&s_storage, STORAGE_SECTOR_SIZE, STORAGE_VOLUME, 8)) goto fail;
 8002212:	bf00      	nop
fail:
#ifdef STORAGE_FLASH
	pifStorageFix_Clear(&s_storage);
#endif
#ifdef STORAGE_EEPROM
	pifStorageVar_Clear(&s_storage);
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <storageInit+0x94>)
 8002216:	f019 f90f 	bl	801b438 <pifStorageVar_Clear>
#endif
	return NULL;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000036c 	.word	0x2000036c
 8002228:	200014b4 	.word	0x200014b4
 800222c:	20001d48 	.word	0x20001d48
 8002230:	08025fdc 	.word	0x08025fdc
 8002234:	08025ff4 	.word	0x08025ff4
 8002238:	0802600c 	.word	0x0802600c

0800223c <actUartSetBaudRate>:
#endif
static uartPort_t uartPort[3];


static BOOL actUartSetBaudRate(PifComm* p_comm, uint32_t baudrate)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8a1b      	ldrh	r3, [r3, #16]
 800224a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800224e:	019b      	lsls	r3, r3, #6
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <actUartSetBaudRate+0x5c>)
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

	if (p_uart->p_huart->Init.BaudRate == baudrate) return TRUE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d101      	bne.n	8002266 <actUartSetBaudRate+0x2a>
 8002262:	2301      	movs	r3, #1
 8002264:	e013      	b.n	800228e <actUartSetBaudRate+0x52>

	HAL_UART_DeInit(p_uart->p_huart);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	4618      	mov	r0, r3
 800226c:	f01f fe55 	bl	8021f1a <HAL_UART_DeInit>
	p_uart->p_huart->Init.BaudRate = baudrate;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(p_uart->p_huart) != HAL_OK) {
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	4618      	mov	r0, r3
 800227e:	f01f fdff 	bl	8021e80 <HAL_UART_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <actUartSetBaudRate+0x50>
		return FALSE;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <actUartSetBaudRate+0x52>
	}
	return TRUE;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003b8 	.word	0x200003b8

0800229c <actUartStartTransfer>:

static BOOL actUartStartTransfer(PifComm* p_comm)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8a1b      	ldrh	r3, [r3, #16]
 80022a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <actUartStartTransfer+0x5c>)
 80022b0:	4413      	add	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

	p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2208      	movs	r2, #8
 80022b8:	879a      	strh	r2, [r3, #60]	; 0x3c
	state = pifComm_StartGetTxData(p_comm, &p_data, &p_uart->tx_frame_size);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00f feaa 	bl	8012020 <pifComm_StartGetTxData>
 80022cc:	4603      	mov	r3, r0
 80022ce:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_DATA) {
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <actUartStartTransfer+0x52>
		HAL_UART_Transmit_IT(p_uart->p_huart, p_data, p_uart->tx_frame_size);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022de:	68f9      	ldr	r1, [r7, #12]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022e4:	461a      	mov	r2, r3
 80022e6:	f01f fe47 	bl	8021f78 <HAL_UART_Transmit_IT>
		return TRUE;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <actUartStartTransfer+0x54>
	}
	return FALSE;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	200003b8 	.word	0x200003b8

080022fc <uartOpen>:
}

#endif

serialPort_t *uartOpen(int port, uint32_t baudRate, portMode_t mode, uint8_t period)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	460b      	mov	r3, r1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	4613      	mov	r3, r2
 8002310:	71bb      	strb	r3, [r7, #6]
    uartPort_t *s = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t rx_size = 16;
 8002316:	2310      	movs	r3, #16
 8002318:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t tmp;
	const char* names[] = { "Comm-1", "Comm-2", "Comm-3" };
 800231a:	4a4b      	ldr	r2, [pc, #300]	; (8002448 <uartOpen+0x14c>)
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	ca07      	ldmia	r2, {r0, r1, r2}
 8002322:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (port == UART_PORT_1) {
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <uartOpen+0x3c>
        s = &uartPort[0];
 800232c:	4b47      	ldr	r3, [pc, #284]	; (800244c <uartOpen+0x150>)
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart1;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	4a47      	ldr	r2, [pc, #284]	; (8002450 <uartOpen+0x154>)
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
 8002336:	e013      	b.n	8002360 <uartOpen+0x64>
    }
#ifndef __PIF_DEBUG__
    else if (port == UART_PORT_2) {
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d105      	bne.n	800234a <uartOpen+0x4e>
        s = &uartPort[1];
 800233e:	4b45      	ldr	r3, [pc, #276]	; (8002454 <uartOpen+0x158>)
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart2;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	4a44      	ldr	r2, [pc, #272]	; (8002458 <uartOpen+0x15c>)
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
 8002348:	e00a      	b.n	8002360 <uartOpen+0x64>
    }
#endif
    else if (port == UART_PORT_3) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d105      	bne.n	800235c <uartOpen+0x60>
        s = &uartPort[2];
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <uartOpen+0x160>)
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
        s->p_huart = &huart6;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	4a42      	ldr	r2, [pc, #264]	; (8002460 <uartOpen+0x164>)
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
 800235a:	e001      	b.n	8002360 <uartOpen+0x64>
    }
    else return NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	e06f      	b.n	8002440 <uartOpen+0x144>

    tmp = period * 115200 / 10000;
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <uartOpen+0x168>)
 800236c:	fb82 1203 	smull	r1, r2, r2, r3
 8002370:	1312      	asrs	r2, r2, #12
 8002372:	17db      	asrs	r3, r3, #31
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	843b      	strh	r3, [r7, #32]
    while (tmp >= rx_size) rx_size <<= 1;
 8002378:	e002      	b.n	8002380 <uartOpen+0x84>
 800237a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002380:	8c3a      	ldrh	r2, [r7, #32]
 8002382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002384:	429a      	cmp	r2, r3
 8002386:	d2f8      	bcs.n	800237a <uartOpen+0x7e>
	s->init = TRUE;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (!pifComm_Init(&s->port.comm, PIF_ID_UART(port - 1))) return FALSE;
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	b29b      	uxth	r3, r3
 8002398:	33ff      	adds	r3, #255	; 0xff
 800239a:	b29b      	uxth	r3, r3
 800239c:	4619      	mov	r1, r3
 800239e:	4610      	mov	r0, r2
 80023a0:	f00f fd28 	bl	8011df4 <pifComm_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <uartOpen+0xb2>
 80023aa:	2300      	movs	r3, #0
 80023ac:	e048      	b.n	8002440 <uartOpen+0x144>
	if (!pifComm_AttachTask(&s->port.comm, TM_PERIOD_MS, period, TRUE, names[port - 1])) return FALSE;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1d18      	adds	r0, r3, #4
 80023b2:	79bb      	ldrb	r3, [r7, #6]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	3328      	adds	r3, #40	; 0x28
 80023be:	443b      	add	r3, r7
 80023c0:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	2102      	movs	r1, #2
 80023ca:	f00f febd 	bl	8012148 <pifComm_AttachTask>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <uartOpen+0xdc>
 80023d4:	2300      	movs	r3, #0
 80023d6:	e033      	b.n	8002440 <uartOpen+0x144>
	if (!pifComm_AllocRxBuffer(&s->port.comm, rx_size, rx_size / 2)) return FALSE;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	1d18      	adds	r0, r3, #4
 80023dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023e6:	4619      	mov	r1, r3
 80023e8:	f00f fd54 	bl	8011e94 <pifComm_AllocRxBuffer>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <uartOpen+0xfa>
 80023f2:	2300      	movs	r3, #0
 80023f4:	e024      	b.n	8002440 <uartOpen+0x144>
	if (!pifComm_AllocTxBuffer(&s->port.comm, 64)) return FALSE;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	3304      	adds	r3, #4
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00f fd8d 	bl	8011f1c <pifComm_AllocTxBuffer>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <uartOpen+0x110>
 8002408:	2300      	movs	r3, #0
 800240a:	e019      	b.n	8002440 <uartOpen+0x144>
	s->port.comm.act_set_baudrate = actUartSetBaudRate;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <uartOpen+0x16c>)
 8002410:	605a      	str	r2, [r3, #4]
	s->port.comm.act_start_transfer = actUartStartTransfer;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <uartOpen+0x170>)
 8002416:	611a      	str	r2, [r3, #16]

    // callback for IRQ-based RX ONLY
    if (!serialSetBaudRate(&s->port, baudRate)) {
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f8c7 	bl	80025b0 <serialSetBaudRate>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <uartOpen+0x13a>
    	pifComm_Clear(&s->port.comm);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	3304      	adds	r3, #4
 800242c:	4618      	mov	r0, r3
 800242e:	f00f fd0b 	bl	8011e48 <pifComm_Clear>
    	return FALSE;
 8002432:	2300      	movs	r3, #0
 8002434:	e004      	b.n	8002440 <uartOpen+0x144>
    }

	s->init = FALSE;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    return (serialPort_t *)s;
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002440:	4618      	mov	r0, r3
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	08026034 	.word	0x08026034
 800244c:	200003b8 	.word	0x200003b8
 8002450:	200006c4 	.word	0x200006c4
 8002454:	200003f8 	.word	0x200003f8
 8002458:	20000708 	.word	0x20000708
 800245c:	20000438 	.word	0x20000438
 8002460:	2000074c 	.word	0x2000074c
 8002464:	68db8bad 	.word	0x68db8bad
 8002468:	0800223d 	.word	0x0800223d
 800246c:	0800229d 	.word	0x0800229d

08002470 <HAL_UART_TxCpltCallback>:

// Handlers

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	uint8_t* p_data;
	uint8_t state;
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a24      	ldr	r2, [pc, #144]	; (8002510 <HAL_UART_TxCpltCallback+0xa0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d102      	bne.n	8002488 <HAL_UART_TxCpltCallback+0x18>
		p_uart = &uartPort[0];
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_UART_TxCpltCallback+0xa4>)
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e00e      	b.n	80024a6 <HAL_UART_TxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <HAL_UART_TxCpltCallback+0xa8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d102      	bne.n	8002498 <HAL_UART_TxCpltCallback+0x28>
				HAL_UART_Transmit_IT(huart, p_data, s_usLogTx);
			}
		}
		return;
#else
		p_uart = &uartPort[1];
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_UART_TxCpltCallback+0xac>)
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e006      	b.n	80024a6 <HAL_UART_TxCpltCallback+0x36>
#endif
	}
	else if (huart->Instance == USART6) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_UART_TxCpltCallback+0xb0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d132      	bne.n	8002508 <HAL_UART_TxCpltCallback+0x98>
		p_uart = &uartPort[2];
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_UART_TxCpltCallback+0xb4>)
 80024a4:	617b      	str	r3, [r7, #20]
	}
	else return;

	state = pifComm_EndGetTxData(&p_uart->port.comm, p_uart->tx_frame_size);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1d1a      	adds	r2, r3, #4
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f00f fded 	bl	8012090 <pifComm_EndGetTxData>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]
	if (state & PIF_COMM_SEND_DATA_STATE_EMPTY) {
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_UART_TxCpltCallback+0x60>
		pifComm_FinishTransfer(&p_uart->port.comm);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3304      	adds	r3, #4
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00f fdfa 	bl	80120c2 <pifComm_FinishTransfer>
 80024ce:	e01c      	b.n	800250a <HAL_UART_TxCpltCallback+0x9a>
	}
	else {
		p_uart->tx_frame_size = UART_TX_FRAME_SIZE;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2208      	movs	r2, #8
 80024d4:	879a      	strh	r2, [r3, #60]	; 0x3c
		state = pifComm_StartGetTxData(&p_uart->port.comm, &p_data, &p_uart->tx_frame_size);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1d18      	adds	r0, r3, #4
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	4619      	mov	r1, r3
 80024e6:	f00f fd9b 	bl	8012020 <pifComm_StartGetTxData>
 80024ea:	4603      	mov	r3, r0
 80024ec:	74fb      	strb	r3, [r7, #19]
		if (state & 1) {
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_UART_TxCpltCallback+0x9a>
			HAL_UART_Transmit_IT(huart, p_data, p_uart->tx_frame_size);
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80024fe:	461a      	mov	r2, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f01f fd39 	bl	8021f78 <HAL_UART_Transmit_IT>
 8002506:	e000      	b.n	800250a <HAL_UART_TxCpltCallback+0x9a>
	else return;
 8002508:	bf00      	nop
		}
	}
}
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40011000 	.word	0x40011000
 8002514:	200003b8 	.word	0x200003b8
 8002518:	40004400 	.word	0x40004400
 800251c:	200003f8 	.word	0x200003f8
 8002520:	40011400 	.word	0x40011400
 8002524:	20000438 	.word	0x20000438

08002528 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart;

	if (huart->Instance == USART1) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_UART_RxCpltCallback+0x70>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d102      	bne.n	8002540 <HAL_UART_RxCpltCallback+0x18>
		p_uart = &uartPort[0];
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_RxCpltCallback+0x74>)
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e00e      	b.n	800255e <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART2) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_UART_RxCpltCallback+0x78>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d102      	bne.n	8002550 <HAL_UART_RxCpltCallback+0x28>
		p_uart = &uartPort[1];
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <HAL_UART_RxCpltCallback+0x7c>)
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e006      	b.n	800255e <HAL_UART_RxCpltCallback+0x36>
	}
	else if (huart->Instance == USART6) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_UART_RxCpltCallback+0x80>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d117      	bne.n	800258a <HAL_UART_RxCpltCallback+0x62>
		p_uart = &uartPort[2];
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <HAL_UART_RxCpltCallback+0x84>)
 800255c:	60fb      	str	r3, [r7, #12]
	}
	else return;

	if (p_uart->init) return;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <HAL_UART_RxCpltCallback+0x66>

	pifComm_PutRxByte(&p_uart->port.comm, p_uart->rx_frame);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f00f fd26 	bl	8011fc6 <pifComm_PutRxByte>
	HAL_UART_Receive_IT(huart, &p_uart->rx_frame, 1);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	333e      	adds	r3, #62	; 0x3e
 800257e:	2201      	movs	r2, #1
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f01f fd3d 	bl	8022002 <HAL_UART_Receive_IT>
 8002588:	e002      	b.n	8002590 <HAL_UART_RxCpltCallback+0x68>
	else return;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <HAL_UART_RxCpltCallback+0x68>
	if (p_uart->init) return;
 800258e:	bf00      	nop
}
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40011000 	.word	0x40011000
 800259c:	200003b8 	.word	0x200003b8
 80025a0:	40004400 	.word	0x40004400
 80025a4:	200003f8 	.word	0x200003f8
 80025a8:	40011400 	.word	0x40011400
 80025ac:	20000438 	.word	0x20000438

080025b0 <serialSetBaudRate>:

BOOL serialSetBaudRate(serialPort_t* instance, uint32_t baudRate)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
   	return (*instance->comm.act_set_baudrate)(&instance->comm, baudRate);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	3204      	adds	r2, #4
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4610      	mov	r0, r2
 80025c6:	4798      	blx	r3
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <serialStartReceiveFunc>:

BOOL serialStartReceiveFunc(PifComm* p_comm)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8a1b      	ldrh	r3, [r3, #16]
 80025e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <serialStartReceiveFunc+0x3c>)
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

	if (HAL_UART_Receive_IT(p_uart->p_huart, &p_uart->rx_frame, 1) != HAL_OK) return FALSE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	333e      	adds	r3, #62	; 0x3e
 80025f4:	2201      	movs	r2, #1
 80025f6:	4619      	mov	r1, r3
 80025f8:	f01f fd03 	bl	8022002 <HAL_UART_Receive_IT>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <serialStartReceiveFunc+0x32>
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <serialStartReceiveFunc+0x34>
	return TRUE;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200003b8 	.word	0x200003b8

08002614 <serialStopReceiveFunc>:

BOOL serialStopReceiveFunc(PifComm* p_comm)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uartPort_t* p_uart = &uartPort[PIF_ID_UART_2_IDX(p_comm->_id)];
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8a1b      	ldrh	r3, [r3, #16]
 8002620:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	4a06      	ldr	r2, [pc, #24]	; (8002640 <serialStopReceiveFunc+0x2c>)
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

	HAL_UART_Abort_IT(p_uart->p_huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	4618      	mov	r0, r3
 8002632:	f01f fd17 	bl	8022064 <HAL_UART_Abort_IT>
	return TRUE;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200003b8 	.word	0x200003b8

08002644 <micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t micros()
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <micros+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20000634 	.word	0x20000634

0800265c <featureDefault>:

static void featureDefault(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
    featureSet(FEATURE_VBAT);
 8002660:	2002      	movs	r0, #2
 8002662:	f004 fc4b 	bl	8006efc <featureSet>
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af02      	add	r7, sp, #8
#else
	#define FAIL { goto fail; }
#endif
    drv_pwm_config_t pwm_params;
    drv_adc_config_t adc_params;
    bool sensorsOK = false;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002678:	f019 fb52 	bl	801bd20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267c:	f000 fb1a 	bl	8002cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002680:	f000 fdd2 	bl	8003228 <MX_GPIO_Init>
  MX_DMA_Init();
 8002684:	f000 fd92 	bl	80031ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002688:	f000 fd3c 	bl	8003104 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800268c:	f000 fbf8 	bl	8002e80 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002690:	f000 fc70 	bl	8002f74 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002694:	f000 fd0c 	bl	80030b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002698:	f000 fd5e 	bl	8003158 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800269c:	f000 fb74 	bl	8002d88 <MX_ADC1_Init>
  MX_TIM2_Init();
 80026a0:	f000 fc1c 	bl	8002edc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80026a4:	2100      	movs	r1, #0
 80026a6:	48be      	ldr	r0, [pc, #760]	; (80029a0 <main+0x334>)
 80026a8:	f01e fcbe 	bl	8021028 <HAL_TIM_IC_Start_IT>

    pif_Init(micros);
 80026ac:	48bd      	ldr	r0, [pc, #756]	; (80029a4 <main+0x338>)
 80026ae:	f00e fd31 	bl	8011114 <pif_Init>

    if (!pifTaskManager_Init(20)) FAIL;
 80026b2:	2014      	movs	r0, #20
 80026b4:	f011 ff8c 	bl	80145d0 <pifTaskManager_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 82ab 	beq.w	8002c16 <main+0x5aa>
    pif_act_task_signal = actTaskSignal;

    logOpen();
#endif

    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 80026c0:	2303      	movs	r3, #3
 80026c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c6:	2100      	movs	r1, #0
 80026c8:	48b7      	ldr	r0, [pc, #732]	; (80029a8 <main+0x33c>)
 80026ca:	f012 fbad 	bl	8014e28 <pifTimerManager_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 82a2 	beq.w	8002c1a <main+0x5ae>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Start Baseflight: %d\n", sizeof(master_t));
#endif

    if (!buzzerInit()) FAIL;
 80026d6:	f001 fc0d 	bl	8003ef4 <buzzerInit>
 80026da:	4603      	mov	r3, r0
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 829b 	bne.w	8002c1e <main+0x5b2>

    // make sure (at compile time) that config struct doesn't overflow allocated flash pages
    ct_assert(sizeof(mcfg) < STORAGE_VOLUME);

    g_featureDefault = featureDefault;
 80026e8:	4bb0      	ldr	r3, [pc, #704]	; (80029ac <main+0x340>)
 80026ea:	4ab1      	ldr	r2, [pc, #708]	; (80029b0 <main+0x344>)
 80026ec:	601a      	str	r2, [r3, #0]

    if (!i2cInit()) FAIL;
 80026ee:	f7ff f9f7 	bl	8001ae0 <i2cInit>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8294 	beq.w	8002c22 <main+0x5b6>

    if (!initEEPROM(storageInit())) FAIL;
 80026fa:	f7ff fd49 	bl	8002190 <storageInit>
 80026fe:	4603      	mov	r3, r0
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fe43 	bl	800638c <initEEPROM>
 8002706:	4603      	mov	r3, r0
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 8289 	bne.w	8002c26 <main+0x5ba>
    if (!checkFirstTime(false)) FAIL;
 8002714:	2000      	movs	r0, #0
 8002716:	f004 f87b 	bl	8006810 <checkFirstTime>
 800271a:	4603      	mov	r3, r0
 800271c:	f083 0301 	eor.w	r3, r3, #1
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8281 	bne.w	8002c2a <main+0x5be>
    readEEPROM();
 8002728:	f003 fedc 	bl	80064e4 <readEEPROM>

    systemInit();
 800272c:	f7ff fc4a 	bl	8001fc4 <systemInit>

    // sleep for 100ms
    pif_Delay1ms(100);
 8002730:	2064      	movs	r0, #100	; 0x64
 8002732:	f00e fdbd 	bl	80112b0 <pif_Delay1ms>

    activateConfig();
 8002736:	f003 ff1f 	bl	8006578 <activateConfig>

    // configure rssi ADC
    if (mcfg.rssi_adc_channel > 0 && (mcfg.rssi_adc_channel == 1 || mcfg.rssi_adc_channel == 9 || mcfg.rssi_adc_channel == 5) && mcfg.rssi_adc_channel != mcfg.power_adc_channel)
 800273a:	4b9e      	ldr	r3, [pc, #632]	; (80029b4 <main+0x348>)
 800273c:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <main+0x110>
 8002744:	4b9b      	ldr	r3, [pc, #620]	; (80029b4 <main+0x348>)
 8002746:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800274a:	2b01      	cmp	r3, #1
 800274c:	d009      	beq.n	8002762 <main+0xf6>
 800274e:	4b99      	ldr	r3, [pc, #612]	; (80029b4 <main+0x348>)
 8002750:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002754:	2b09      	cmp	r3, #9
 8002756:	d004      	beq.n	8002762 <main+0xf6>
 8002758:	4b96      	ldr	r3, [pc, #600]	; (80029b4 <main+0x348>)
 800275a:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800275e:	2b05      	cmp	r3, #5
 8002760:	d10c      	bne.n	800277c <main+0x110>
 8002762:	4b94      	ldr	r3, [pc, #592]	; (80029b4 <main+0x348>)
 8002764:	f893 21a4 	ldrb.w	r2, [r3, #420]	; 0x1a4
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <main+0x348>)
 800276a:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800276e:	429a      	cmp	r2, r3
 8002770:	d004      	beq.n	800277c <main+0x110>
        adc_params.rssiAdcChannel = mcfg.rssi_adc_channel;
 8002772:	4b90      	ldr	r3, [pc, #576]	; (80029b4 <main+0x348>)
 8002774:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8002778:	717b      	strb	r3, [r7, #5]
 800277a:	e005      	b.n	8002788 <main+0x11c>
    else {
        adc_params.rssiAdcChannel = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	717b      	strb	r3, [r7, #5]
        mcfg.rssi_adc_channel = 0;
 8002780:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <main+0x348>)
 8002782:	2200      	movs	r2, #0
 8002784:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
    }

    adcInit(&adc_params);
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fcfa 	bl	8001184 <adcInit>
    // Check battery type/voltage
    if (feature(FEATURE_VBAT))
 8002790:	2002      	movs	r0, #2
 8002792:	f004 fb9d 	bl	8006ed0 <feature>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <main+0x134>
        batteryInit();
 800279c:	f00b ff46 	bl	800e62c <batteryInit>
    initBoardAlignment();
 80027a0:	f001 fa4e 	bl	8003c40 <initBoardAlignment>

    // drop out any sensors that don't seem to work, init all the others. halt if gyro is dead.
    sensorsOK = sensorsAutodetect(gyro_detect, acc_detect, baro_detect, mag_detect);
 80027a4:	4b84      	ldr	r3, [pc, #528]	; (80029b8 <main+0x34c>)
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	4b84      	ldr	r3, [pc, #528]	; (80029bc <main+0x350>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <main+0x354>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4884      	ldr	r0, [pc, #528]	; (80029c4 <main+0x358>)
 80027b2:	f00b fdd9 	bl	800e368 <sensorsAutodetect>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Sensor: %lxh(%d)", sensorsMask(), sensorsOK);
#endif

    // if gyro was not detected due to whatever reason, we give up now.
    if (!sensorsOK)
 80027bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <main+0x164>
        failureMode(3);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f7ff fc09 	bl	8001fe2 <failureMode>

    actLed1State(ON);
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7ff fc7d 	bl	80020d0 <actLed1State>
    actLed0State(OFF);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff fc4e 	bl	8002078 <actLed0State>
    for (i = 0; i < 10; i++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027e2:	e018      	b.n	8002816 <main+0x1aa>
        actLed1Toggle();
 80027e4:	f7ff fc8a 	bl	80020fc <actLed1Toggle>
        actLed0Toggle();
 80027e8:	f7ff fc5c 	bl	80020a4 <actLed0Toggle>
        pifTaskManager_YieldMs(25);
 80027ec:	2019      	movs	r0, #25
 80027ee:	f012 fa33 	bl	8014c58 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, ON);
 80027f2:	2101      	movs	r1, #1
 80027f4:	f44f 7098 	mov.w	r0, #304	; 0x130
 80027f8:	f7ff fc96 	bl	8002128 <actBuzzerAction>
        pifTaskManager_YieldMs(25);
 80027fc:	2019      	movs	r0, #25
 80027fe:	f012 fa2b 	bl	8014c58 <pifTaskManager_YieldMs>
        actBuzzerAction(PIF_ID_BUZZER, OFF);
 8002802:	2100      	movs	r1, #0
 8002804:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002808:	f7ff fc8e 	bl	8002128 <actBuzzerAction>
    for (i = 0; i < 10; i++) {
 800280c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002810:	3301      	adds	r3, #1
 8002812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800281a:	2b09      	cmp	r3, #9
 800281c:	d9e2      	bls.n	80027e4 <main+0x178>
    }
    actLed0State(OFF);
 800281e:	2000      	movs	r0, #0
 8002820:	f7ff fc2a 	bl	8002078 <actLed0State>
    actLed1State(OFF);
 8002824:	2000      	movs	r0, #0
 8002826:	f7ff fc53 	bl	80020d0 <actLed1State>

    imuInit(); // Mag is initialized inside imuInit
 800282a:	f006 ff71 	bl	8009710 <imuInit>
    mixerInit(); // this will set core.useServo var depending on mixer type
 800282e:	f008 fa41 	bl	800acb4 <mixerInit>

#ifdef __PIF_DEBUG__
    pifLog_Printf(LT_INFO, "Serial: %lu", mcfg.serial_baudrate);
#endif
    serialInit(UART_PORT_1, mcfg.serial_baudrate, UART_PORT_NONE);
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <main+0x348>)
 8002834:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	2001      	movs	r0, #1
 800283e:	f00c fcf9 	bl	800f234 <serialInit>

    g_task_compute_rc = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskComputeRc, NULL, FALSE);
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	4a5f      	ldr	r2, [pc, #380]	; (80029c8 <main+0x35c>)
 800284a:	2100      	movs	r1, #0
 800284c:	2007      	movs	r0, #7
 800284e:	f011 fee5 	bl	801461c <pifTaskManager_Add>
 8002852:	4603      	mov	r3, r0
 8002854:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <main+0x360>)
 8002856:	6013      	str	r3, [r2, #0]
    if (!g_task_compute_rc) FAIL;
 8002858:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <main+0x360>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 81e6 	beq.w	8002c2e <main+0x5c2>
    g_task_compute_rc->name = "RC";
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <main+0x360>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <main+0x364>)
 8002868:	601a      	str	r2, [r3, #0]

    // when using airplane/wing mixer, servo/motor outputs are remapped
    if (mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800286a:	4b52      	ldr	r3, [pc, #328]	; (80029b4 <main+0x348>)
 800286c:	795b      	ldrb	r3, [r3, #5]
 800286e:	2b0e      	cmp	r3, #14
 8002870:	d007      	beq.n	8002882 <main+0x216>
 8002872:	4b50      	ldr	r3, [pc, #320]	; (80029b4 <main+0x348>)
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d003      	beq.n	8002882 <main+0x216>
 800287a:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <main+0x348>)
 800287c:	795b      	ldrb	r3, [r3, #5]
 800287e:	2b18      	cmp	r3, #24
 8002880:	d102      	bne.n	8002888 <main+0x21c>
        pwm_params.airplane = true;
 8002882:	2301      	movs	r3, #1
 8002884:	73bb      	strb	r3, [r7, #14]
 8002886:	e001      	b.n	800288c <main+0x220>
    else
        pwm_params.airplane = false;
 8002888:	2300      	movs	r3, #0
 800288a:	73bb      	strb	r3, [r7, #14]
    pwm_params.useUART = feature(FEATURE_GPS) || feature(FEATURE_SERIALRX); // spektrum/sbus support uses UART too
 800288c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002890:	f004 fb1e 	bl	8006ed0 <feature>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <main+0x23a>
 800289a:	2008      	movs	r0, #8
 800289c:	f004 fb18 	bl	8006ed0 <feature>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <main+0x23e>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <main+0x240>
 80028aa:	2300      	movs	r3, #0
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	72bb      	strb	r3, [r7, #10]
    pwm_params.useSoftSerial = false;
 80028b4:	2300      	movs	r3, #0
 80028b6:	72fb      	strb	r3, [r7, #11]
    pwm_params.usePPM = feature(FEATURE_PPM);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f004 fb09 	bl	8006ed0 <feature>
 80028be:	4603      	mov	r3, r0
 80028c0:	727b      	strb	r3, [r7, #9]
    pwm_params.enableInput = !feature(FEATURE_SERIALRX); // disable inputs if using spektrum
 80028c2:	2008      	movs	r0, #8
 80028c4:	f004 fb04 	bl	8006ed0 <feature>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	723b      	strb	r3, [r7, #8]
    pwm_params.useServos = core.useServo;
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <main+0x368>)
 80028e4:	7d5b      	ldrb	r3, [r3, #21]
 80028e6:	733b      	strb	r3, [r7, #12]
    pwm_params.extraServos = cfg.gimbal_flags & GIMBAL_FORWARDAUX;
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <main+0x36c>)
 80028ea:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	737b      	strb	r3, [r7, #13]
    pwm_params.motorPwmRate = mcfg.motor_pwm_rate;
 80028fe:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <main+0x348>)
 8002900:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8002904:	827b      	strh	r3, [r7, #18]
    pwm_params.servoPwmRate = mcfg.servo_pwm_rate;
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <main+0x348>)
 8002908:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 800290c:	82bb      	strh	r3, [r7, #20]
    pwm_params.pwmFilter = mcfg.pwm_filter;
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <main+0x348>)
 8002910:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
 8002914:	73fb      	strb	r3, [r7, #15]
    pwm_params.idlePulse = PULSE_1MS; // standard PWM for brushless ESC (default, overridden below)
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	82fb      	strh	r3, [r7, #22]
    if (feature(FEATURE_3D))
 800291c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002920:	f004 fad6 	bl	8006ed0 <feature>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <main+0x2c6>
        pwm_params.idlePulse = mcfg.neutral3d;
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <main+0x348>)
 800292c:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 8002930:	82fb      	strh	r3, [r7, #22]
    if (pwm_params.motorPwmRate > 500)
 8002932:	8a7b      	ldrh	r3, [r7, #18]
 8002934:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002938:	d901      	bls.n	800293e <main+0x2d2>
        pwm_params.idlePulse = 0; // brushed motors
 800293a:	2300      	movs	r3, #0
 800293c:	82fb      	strh	r3, [r7, #22]
    pwm_params.syncPWM = feature(FEATURE_SYNCPWM);
 800293e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002942:	f004 fac5 	bl	8006ed0 <feature>
 8002946:	4603      	mov	r3, r0
 8002948:	773b      	strb	r3, [r7, #28]
    pwm_params.fastPWM = feature(FEATURE_FASTPWM);
 800294a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800294e:	f004 fabf 	bl	8006ed0 <feature>
 8002952:	4603      	mov	r3, r0
 8002954:	777b      	strb	r3, [r7, #29]
    pwm_params.servoCenterPulse = mcfg.midrc;
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <main+0x348>)
 8002958:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800295c:	833b      	strh	r3, [r7, #24]
    pwm_params.failsafeThreshold = cfg.failsafe_detect_threshold;
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <main+0x36c>)
 8002960:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8002964:	837b      	strh	r3, [r7, #26]
    switch (mcfg.power_adc_channel) {
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <main+0x348>)
 8002968:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <main+0x30a>
 8002970:	2b09      	cmp	r3, #9
 8002972:	d003      	beq.n	800297c <main+0x310>
 8002974:	e005      	b.n	8002982 <main+0x316>
        case 1:
            pwm_params.adcChannel = PWM2;
 8002976:	2301      	movs	r3, #1
 8002978:	743b      	strb	r3, [r7, #16]
            break;
 800297a:	e005      	b.n	8002988 <main+0x31c>
        case 9:
            pwm_params.adcChannel = PWM8;
 800297c:	2307      	movs	r3, #7
 800297e:	743b      	strb	r3, [r7, #16]
            break;
 8002980:	e002      	b.n	8002988 <main+0x31c>
        default:
            pwm_params.adcChannel = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	743b      	strb	r3, [r7, #16]
            break;
 8002986:	bf00      	nop
    }

    pwmInit(&pwm_params);
 8002988:	f107 0308 	add.w	r3, r7, #8
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f997 	bl	8001cc0 <pwmInit>
    core.numServos = pwm_params.numServos;
 8002992:	7fba      	ldrb	r2, [r7, #30]
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <main+0x368>)
 8002996:	759a      	strb	r2, [r3, #22]

    // configure PWM/CPPM read function and max number of channels. spektrum or sbus below will override both of these, if enabled
    for (i = 0; i < RC_CHANS; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800299e:	e029      	b.n	80029f4 <main+0x388>
 80029a0:	20000634 	.word	0x20000634
 80029a4:	08002645 	.word	0x08002645
 80029a8:	200014e4 	.word	0x200014e4
 80029ac:	20001698 	.word	0x20001698
 80029b0:	0800265d 	.word	0x0800265d
 80029b4:	20000848 	.word	0x20000848
 80029b8:	200007a8 	.word	0x200007a8
 80029bc:	200007ac 	.word	0x200007ac
 80029c0:	200007b0 	.word	0x200007b0
 80029c4:	20000010 	.word	0x20000010
 80029c8:	0800cf9d 	.word	0x0800cf9d
 80029cc:	2000150c 	.word	0x2000150c
 80029d0:	08026040 	.word	0x08026040
 80029d4:	20000790 	.word	0x20000790
 80029d8:	20000db4 	.word	0x20000db4
        rcData[i] = 1502;
 80029dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e0:	4a9c      	ldr	r2, [pc, #624]	; (8002c54 <main+0x5e8>)
 80029e2:	f240 51de 	movw	r1, #1502	; 0x5de
 80029e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < RC_CHANS; i++)
 80029ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ee:	3301      	adds	r3, #1
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	2b11      	cmp	r3, #17
 80029fa:	d9ef      	bls.n	80029dc <main+0x370>
    rcReadRawFunc = pwmReadRawRC;
 80029fc:	4b96      	ldr	r3, [pc, #600]	; (8002c58 <main+0x5ec>)
 80029fe:	4a97      	ldr	r2, [pc, #604]	; (8002c5c <main+0x5f0>)
 8002a00:	601a      	str	r2, [r3, #0]

    if (feature(FEATURE_SERIALRX)) {
 8002a02:	2008      	movs	r0, #8
 8002a04:	f004 fa64 	bl	8006ed0 <feature>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d02f      	beq.n	8002a6e <main+0x402>
        switch (mcfg.serialrx_type) {
 8002a0e:	4b94      	ldr	r3, [pc, #592]	; (8002c60 <main+0x5f4>)
 8002a10:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d82b      	bhi.n	8002a70 <main+0x404>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <main+0x3b4>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a39 	.word	0x08002a39
 8002a24:	08002a39 	.word	0x08002a39
 8002a28:	08002a43 	.word	0x08002a43
 8002a2c:	08002a53 	.word	0x08002a53
 8002a30:	08002a5d 	.word	0x08002a5d
 8002a34:	08002a65 	.word	0x08002a65
            case SERIALRX_SPEKTRUM1024:
            case SERIALRX_SPEKTRUM2048:
                spektrumInit(UART_PORT_2, &rcReadRawFunc);
 8002a38:	4987      	ldr	r1, [pc, #540]	; (8002c58 <main+0x5ec>)
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f00e fa62 	bl	8010f04 <spektrumInit>
                break;
 8002a40:	e016      	b.n	8002a70 <main+0x404>
            case SERIALRX_SBUS:
                // Configure hardware inverter on PB2. If not available, this has no effect.
                actInvState(ON);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fb84 	bl	8002150 <actInvState>
                sbusInit(UART_PORT_2, &rcReadRawFunc);
 8002a48:	4983      	ldr	r1, [pc, #524]	; (8002c58 <main+0x5ec>)
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f00b fc2e 	bl	800e2ac <sbusInit>
                break;
 8002a50:	e00e      	b.n	8002a70 <main+0x404>
            case SERIALRX_SUMD:
                sumdInit(UART_PORT_2, &rcReadRawFunc);
 8002a52:	4981      	ldr	r1, [pc, #516]	; (8002c58 <main+0x5ec>)
 8002a54:	2002      	movs	r0, #2
 8002a56:	f00e fb15 	bl	8011084 <sumdInit>
                break;
 8002a5a:	e009      	b.n	8002a70 <main+0x404>
            case SERIALRX_MSP:
                mspInit(&rcReadRawFunc);
 8002a5c:	487e      	ldr	r0, [pc, #504]	; (8002c58 <main+0x5ec>)
 8002a5e:	f00b fbc1 	bl	800e1e4 <mspInit>
                break;
 8002a62:	e005      	b.n	8002a70 <main+0x404>
            case SERIALRX_IBUS:
                ibusInit(UART_PORT_2, &rcReadRawFunc);
 8002a64:	497c      	ldr	r1, [pc, #496]	; (8002c58 <main+0x5ec>)
 8002a66:	2002      	movs	r0, #2
 8002a68:	f006 fdf4 	bl	8009654 <ibusInit>
                break;
 8002a6c:	e000      	b.n	8002a70 <main+0x404>
        }
    }
 8002a6e:	bf00      	nop

    // Optional GPS - available in both PPM, PWM and serialRX input mode, in PWM input, reduces number of available channels by 2.
    // gpsInit will return if FEATURE_GPS is not enabled.
    if (feature(FEATURE_GPS)) {
 8002a70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a74:	f004 fa2c 	bl	8006ed0 <feature>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <main+0x422>
        gpsInit(UART_PORT_3, mcfg.gps_baudrate);
 8002a7e:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <main+0x5f4>)
 8002a80:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4619      	mov	r1, r3
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f005 f977 	bl	8007d7c <gpsInit>
    }

#ifdef SONAR
    // sonar stuff only works with PPM
    if (feature(FEATURE_SONAR)) {
 8002a8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a92:	f004 fa1d 	bl	8006ed0 <feature>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <main+0x438>
//      Sonar_init(hcsr04Init, SF_NONE);
//      Sonar_init(hcsr04Init, SF_AVERAGE);
        Sonar_init(hcsr04Init, SF_NOISE_CANCEL);
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	4871      	ldr	r0, [pc, #452]	; (8002c64 <main+0x5f8>)
 8002aa0:	f00c fb38 	bl	800f114 <Sonar_init>
    }
#endif

    core.numAuxChannels = constrain((mcfg.rc_channel_count - 4), 4, 8);
 8002aa4:	4b6e      	ldr	r3, [pc, #440]	; (8002c60 <main+0x5f4>)
 8002aa6:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	2208      	movs	r2, #8
 8002aae:	2104      	movs	r1, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f8a9 	bl	8003c08 <constrain>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b6b      	ldr	r3, [pc, #428]	; (8002c68 <main+0x5fc>)
 8002abc:	751a      	strb	r2, [r3, #20]
#ifdef TELEMETRY
    if (feature(FEATURE_TELEMETRY))
        initTelemetry();
#endif

    if (mcfg.mixerConfiguration == MULTITYPE_GIMBAL)
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <main+0x5f4>)
 8002ac0:	795b      	ldrb	r3, [r3, #5]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d103      	bne.n	8002ace <main+0x462>
        calibratingA = CALIBRATING_ACC_CYCLES;
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <main+0x600>)
 8002ac8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002acc:	801a      	strh	r2, [r3, #0]
    calibratingG = CALIBRATING_GYRO_CYCLES;
 8002ace:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <main+0x604>)
 8002ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad4:	801a      	strh	r2, [r3, #0]
    calibratingB = CALIBRATING_BARO_CYCLES;             // 10 seconds init_delay + 200 * 25 ms = 15 seconds before ground pressure settles
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <main+0x608>)
 8002ad8:	22c8      	movs	r2, #200	; 0xc8
 8002ada:	801a      	strh	r2, [r3, #0]
    f.SMALL_ANGLE = 1;
 8002adc:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <main+0x60c>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	735a      	strb	r2, [r3, #13]

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 1, taskLoop, NULL, TRUE);         								// 1ms
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <main+0x610>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	2002      	movs	r0, #2
 8002aee:	f011 fd95 	bl	801461c <pifTaskManager_Add>
 8002af2:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 809b 	beq.w	8002c32 <main+0x5c6>
    p_task->name = "Loop";
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <main+0x614>)
 8002b00:	601a      	str	r2, [r3, #0]

    if (mcfg.looptime) {
 8002b02:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <main+0x5f4>)
 8002b04:	899b      	ldrh	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <main+0x4b8>
    	g_task_compute_imu = pifTaskManager_Add(TM_PERIOD_US, mcfg.looptime, taskComputeImu, NULL, TRUE);
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <main+0x5f4>)
 8002b0c:	8999      	ldrh	r1, [r3, #12]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	4a5b      	ldr	r2, [pc, #364]	; (8002c84 <main+0x618>)
 8002b16:	2003      	movs	r0, #3
 8002b18:	f011 fd80 	bl	801461c <pifTaskManager_Add>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <main+0x61c>)
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00a      	b.n	8002b3a <main+0x4ce>
    }
    else {
    	g_task_compute_imu = pifTaskManager_Add(TM_ALWAYS, 0, taskComputeImu, NULL, TRUE);
 8002b24:	2301      	movs	r3, #1
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <main+0x618>)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f011 fd74 	bl	801461c <pifTaskManager_Add>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4a54      	ldr	r2, [pc, #336]	; (8002c88 <main+0x61c>)
 8002b38:	6013      	str	r3, [r2, #0]
    }
    if (!g_task_compute_imu) FAIL;
 8002b3a:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <main+0x61c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d079      	beq.n	8002c36 <main+0x5ca>
    g_task_compute_imu->name = "IMU";
 8002b42:	4b51      	ldr	r3, [pc, #324]	; (8002c88 <main+0x61c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <main+0x620>)
 8002b48:	601a      	str	r2, [r3, #0]
    g_task_compute_imu->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002b4a:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <main+0x61c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	715a      	strb	r2, [r3, #5]

#ifdef MAG
    if (sensors(SENSOR_MAG)) {
 8002b52:	2008      	movs	r0, #8
 8002b54:	f004 f974 	bl	8006e40 <sensors>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <main+0x528>
        sensor_set.mag.p_task = pifTaskManager_Add(TM_PERIOD_MS, 100, taskMagGetAdc, NULL, TRUE);             // 100ms
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <main+0x624>)
 8002b66:	2164      	movs	r1, #100	; 0x64
 8002b68:	2002      	movs	r0, #2
 8002b6a:	f011 fd57 	bl	801461c <pifTaskManager_Add>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a48      	ldr	r2, [pc, #288]	; (8002c94 <main+0x628>)
 8002b72:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        if (!sensor_set.mag.p_task) FAIL;
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <main+0x628>)
 8002b78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05c      	beq.n	8002c3a <main+0x5ce>
        sensor_set.mag.p_task->name = "Mag";
 8002b80:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <main+0x628>)
 8002b82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b86:	4a44      	ldr	r2, [pc, #272]	; (8002c98 <main+0x62c>)
 8002b88:	601a      	str	r2, [r3, #0]
        sensor_set.mag.p_task->disallow_yield_id = DISALLOW_YIELD_ID_I2C;
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <main+0x628>)
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	2201      	movs	r2, #1
 8002b92:	715a      	strb	r2, [r3, #5]
    }
#endif

#ifdef BARO
    if (sensors(SENSOR_BARO)) {
 8002b94:	2004      	movs	r0, #4
 8002b96:	f004 f953 	bl	8006e40 <sensors>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <main+0x560>
        sensor_set.baro.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGetEstimatedAltitude, NULL, FALSE);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <main+0x630>)
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2007      	movs	r0, #7
 8002bac:	f011 fd36 	bl	801461c <pifTaskManager_Add>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <main+0x628>)
 8002bb4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        if (!sensor_set.baro.p_task) FAIL;
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <main+0x628>)
 8002bba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03d      	beq.n	8002c3e <main+0x5d2>
        sensor_set.baro.p_task->name = "Baro";
 8002bc2:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <main+0x628>)
 8002bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bc8:	4a35      	ldr	r2, [pc, #212]	; (8002ca0 <main+0x634>)
 8002bca:	601a      	str	r2, [r3, #0]
    }
#endif

#ifdef GPS
    g_task_gps = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, taskGpsNewData, NULL, FALSE);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	4a34      	ldr	r2, [pc, #208]	; (8002ca4 <main+0x638>)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	2007      	movs	r0, #7
 8002bd8:	f011 fd20 	bl	801461c <pifTaskManager_Add>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4a32      	ldr	r2, [pc, #200]	; (8002ca8 <main+0x63c>)
 8002be0:	6013      	str	r3, [r2, #0]
    if (!g_task_gps) FAIL;
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <main+0x63c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02b      	beq.n	8002c42 <main+0x5d6>
    g_task_gps->name = "GPS";
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <main+0x63c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	; (8002cac <main+0x640>)
 8002bf0:	601a      	str	r2, [r3, #0]
#endif

    p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, taskLedState, NULL, TRUE);									// 50ms
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <main+0x644>)
 8002bfa:	2132      	movs	r1, #50	; 0x32
 8002bfc:	2002      	movs	r0, #2
 8002bfe:	f011 fd0d 	bl	801461c <pifTaskManager_Add>
 8002c02:	6238      	str	r0, [r7, #32]
    if (!p_task) FAIL;
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01d      	beq.n	8002c46 <main+0x5da>
    p_task->name = "Loop";
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <main+0x614>)
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pifTaskManager_Loop();
 8002c10:	f011 fda4 	bl	801475c <pifTaskManager_Loop>
 8002c14:	e7fc      	b.n	8002c10 <main+0x5a4>
    if (!pifTaskManager_Init(20)) FAIL;
 8002c16:	bf00      	nop
 8002c18:	e016      	b.n	8002c48 <main+0x5dc>
    if (!pifTimerManager_Init(&g_timer_1ms, PIF_ID_AUTO, 1000, 3)) FAIL;		        // 1000us
 8002c1a:	bf00      	nop
 8002c1c:	e014      	b.n	8002c48 <main+0x5dc>
    if (!buzzerInit()) FAIL;
 8002c1e:	bf00      	nop
 8002c20:	e012      	b.n	8002c48 <main+0x5dc>
    if (!i2cInit()) FAIL;
 8002c22:	bf00      	nop
 8002c24:	e010      	b.n	8002c48 <main+0x5dc>
    if (!initEEPROM(storageInit())) FAIL;
 8002c26:	bf00      	nop
 8002c28:	e00e      	b.n	8002c48 <main+0x5dc>
    if (!checkFirstTime(false)) FAIL;
 8002c2a:	bf00      	nop
 8002c2c:	e00c      	b.n	8002c48 <main+0x5dc>
    if (!g_task_compute_rc) FAIL;
 8002c2e:	bf00      	nop
 8002c30:	e00a      	b.n	8002c48 <main+0x5dc>
    if (!p_task) FAIL;
 8002c32:	bf00      	nop
 8002c34:	e008      	b.n	8002c48 <main+0x5dc>
    if (!g_task_compute_imu) FAIL;
 8002c36:	bf00      	nop
 8002c38:	e006      	b.n	8002c48 <main+0x5dc>
        if (!sensor_set.mag.p_task) FAIL;
 8002c3a:	bf00      	nop
 8002c3c:	e004      	b.n	8002c48 <main+0x5dc>
        if (!sensor_set.baro.p_task) FAIL;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <main+0x5dc>
    if (!g_task_gps) FAIL;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <main+0x5dc>
    if (!p_task) FAIL;
 8002c46:	bf00      	nop
fail:
#ifdef __PIF_DEBUG__
	pifLog_Printf(LT_ERROR, "Error=%Xh Line=%u", pif_error, line);
	pifLog_SendAndExit();
#endif
  return -1;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
  /* USER CODE END 3 */
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200016e8 	.word	0x200016e8
 8002c58:	20001740 	.word	0x20001740
 8002c5c:	0800c775 	.word	0x0800c775
 8002c60:	20000848 	.word	0x20000848
 8002c64:	080018e5 	.word	0x080018e5
 8002c68:	20000790 	.word	0x20000790
 8002c6c:	200019e0 	.word	0x200019e0
 8002c70:	200019e4 	.word	0x200019e4
 8002c74:	200019e2 	.word	0x200019e2
 8002c78:	200016b0 	.word	0x200016b0
 8002c7c:	0800db6d 	.word	0x0800db6d
 8002c80:	08026044 	.word	0x08026044
 8002c84:	0800dbd5 	.word	0x0800dbd5
 8002c88:	20001508 	.word	0x20001508
 8002c8c:	0802604c 	.word	0x0802604c
 8002c90:	0800ee85 	.word	0x0800ee85
 8002c94:	20000060 	.word	0x20000060
 8002c98:	08026050 	.word	0x08026050
 8002c9c:	0800a551 	.word	0x0800a551
 8002ca0:	08026054 	.word	0x08026054
 8002ca4:	080085f5 	.word	0x080085f5
 8002ca8:	20001510 	.word	0x20001510
 8002cac:	0802605c 	.word	0x0802605c
 8002cb0:	0800c4b9 	.word	0x0800c4b9

08002cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b094      	sub	sp, #80	; 0x50
 8002cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2230      	movs	r2, #48	; 0x30
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f020 fa90 	bl	80231e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <SystemClock_Config+0xcc>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <SystemClock_Config+0xcc>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <SystemClock_Config+0xcc>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <SystemClock_Config+0xd0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <SystemClock_Config+0xd0>)
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <SystemClock_Config+0xd0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 13;
 8002d18:	230d      	movs	r3, #13
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d20:	2300      	movs	r3, #0
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d24:	2310      	movs	r3, #16
 8002d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d32:	2304      	movs	r3, #4
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d36:	f107 0320 	add.w	r3, r7, #32
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f01d fb84 	bl	8020448 <HAL_RCC_OscConfig>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d46:	f000 fb31 	bl	80033ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2102      	movs	r1, #2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f01d fde6 	bl	8020938 <HAL_RCC_ClockConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d72:	f000 fb1b 	bl	80033ac <Error_Handler>
  }
}
 8002d76:	bf00      	nop
 8002d78:	3750      	adds	r7, #80	; 0x50
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000

08002d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d9a:	4b36      	ldr	r3, [pc, #216]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002d9c:	4a36      	ldr	r2, [pc, #216]	; (8002e78 <MX_ADC1_Init+0xf0>)
 8002d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002da0:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dc2:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dca:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <MX_ADC1_Init+0xf4>)
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002de8:	4822      	ldr	r0, [pc, #136]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002dea:	f019 f80b 	bl	801be04 <HAL_ADC_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002df4:	f000 fada 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002df8:	2306      	movs	r3, #6
 8002dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002e00:	2302      	movs	r3, #2
 8002e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e04:	463b      	mov	r3, r7
 8002e06:	4619      	mov	r1, r3
 8002e08:	481a      	ldr	r0, [pc, #104]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e0a:	f019 f94d 	bl	801c0a8 <HAL_ADC_ConfigChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002e14:	f000 faca 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e18:	2309      	movs	r3, #9
 8002e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e20:	463b      	mov	r3, r7
 8002e22:	4619      	mov	r1, r3
 8002e24:	4813      	ldr	r0, [pc, #76]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e26:	f019 f93f 	bl	801c0a8 <HAL_ADC_ConfigChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002e30:	f000 fabc 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e34:	2307      	movs	r3, #7
 8002e36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e42:	f019 f931 	bl	801c0a8 <HAL_ADC_ConfigChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002e4c:	f000 faae 	bl	80033ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e50:	230c      	movs	r3, #12
 8002e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002e54:	2304      	movs	r3, #4
 8002e56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e58:	463b      	mov	r3, r7
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_ADC1_Init+0xec>)
 8002e5e:	f019 f923 	bl	801c0a8 <HAL_ADC_ConfigChannel>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002e68:	f000 faa0 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000478 	.word	0x20000478
 8002e78:	40012000 	.word	0x40012000
 8002e7c:	0f000001 	.word	0x0f000001

08002e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <MX_I2C1_Init+0x54>)
 8002e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e8c:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <MX_I2C1_Init+0x58>)
 8002e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e96:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_I2C1_Init+0x50>)
 8002ebe:	f01a fb9d 	bl	801d5fc <HAL_I2C_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ec8:	f000 fa70 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000520 	.word	0x20000520
 8002ed4:	40005400 	.word	0x40005400
 8002ed8:	00061a80 	.word	0x00061a80

08002edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f02:	2253      	movs	r2, #83	; 0x53
 8002f04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f22:	f01d ff29 	bl	8020d78 <HAL_TIM_Base_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f2c:	f000 fa3e 	bl	80033ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f3e:	f01e fb57 	bl	80215f0 <HAL_TIM_ConfigClockSource>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f48:	f000 fa30 	bl	80033ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f54:	463b      	mov	r3, r7
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM2_Init+0x94>)
 8002f5a:	f01e ff0f 	bl	8021d7c <HAL_TIMEx_MasterConfigSynchronization>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f64:	f000 fa22 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000634 	.word	0x20000634

08002f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	; 0x38
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f88:	f107 0320 	add.w	r3, r7, #32
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
 8002fa0:	615a      	str	r2, [r3, #20]
 8002fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fa6:	4a41      	ldr	r2, [pc, #260]	; (80030ac <MX_TIM3_Init+0x138>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fac:	2253      	movs	r2, #83	; 0x53
 8002fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8002fb6:	4b3c      	ldr	r3, [pc, #240]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fb8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fca:	4837      	ldr	r0, [pc, #220]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fcc:	f01d fed4 	bl	8020d78 <HAL_TIM_Base_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002fd6:	f000 f9e9 	bl	80033ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4830      	ldr	r0, [pc, #192]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002fe8:	f01e fb02 	bl	80215f0 <HAL_TIM_ConfigClockSource>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002ff2:	f000 f9db 	bl	80033ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ff6:	482c      	ldr	r0, [pc, #176]	; (80030a8 <MX_TIM3_Init+0x134>)
 8002ff8:	f01d ff0d 	bl	8020e16 <HAL_TIM_PWM_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003002:	f000 f9d3 	bl	80033ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800300e:	f107 0320 	add.w	r3, r7, #32
 8003012:	4619      	mov	r1, r3
 8003014:	4824      	ldr	r0, [pc, #144]	; (80030a8 <MX_TIM3_Init+0x134>)
 8003016:	f01e feb1 	bl	8021d7c <HAL_TIMEx_MasterConfigSynchronization>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003020:	f000 f9c4 	bl	80033ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003024:	2360      	movs	r3, #96	; 0x60
 8003026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8003028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	4619      	mov	r1, r3
 800303c:	481a      	ldr	r0, [pc, #104]	; (80030a8 <MX_TIM3_Init+0x134>)
 800303e:	f01e fa15 	bl	802146c <HAL_TIM_PWM_ConfigChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003048:	f000 f9b0 	bl	80033ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2204      	movs	r2, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4815      	ldr	r0, [pc, #84]	; (80030a8 <MX_TIM3_Init+0x134>)
 8003054:	f01e fa0a 	bl	802146c <HAL_TIM_PWM_ConfigChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800305e:	f000 f9a5 	bl	80033ac <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	2208      	movs	r2, #8
 800306a:	4619      	mov	r1, r3
 800306c:	480e      	ldr	r0, [pc, #56]	; (80030a8 <MX_TIM3_Init+0x134>)
 800306e:	f01e f9fd 	bl	802146c <HAL_TIM_PWM_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003078:	f000 f998 	bl	80033ac <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 800307c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003080:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	220c      	movs	r2, #12
 8003086:	4619      	mov	r1, r3
 8003088:	4807      	ldr	r0, [pc, #28]	; (80030a8 <MX_TIM3_Init+0x134>)
 800308a:	f01e f9ef 	bl	802146c <HAL_TIM_PWM_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8003094:	f000 f98a 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003098:	4803      	ldr	r0, [pc, #12]	; (80030a8 <MX_TIM3_Init+0x134>)
 800309a:	f000 fb5d 	bl	8003758 <HAL_TIM_MspPostInit>

}
 800309e:	bf00      	nop
 80030a0:	3738      	adds	r7, #56	; 0x38
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000067c 	.word	0x2000067c
 80030ac:	40000400 	.word	0x40000400

080030b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <MX_USART1_UART_Init+0x50>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <MX_USART1_UART_Init+0x4c>)
 80030e8:	f01e feca 	bl	8021e80 <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030f2:	f000 f95b 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200006c4 	.word	0x200006c4
 8003100:	40011000 	.word	0x40011000

08003104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <MX_USART2_UART_Init+0x50>)
 800310c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <MX_USART2_UART_Init+0x4c>)
 800313c:	f01e fea0 	bl	8021e80 <HAL_UART_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003146:	f000 f931 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000708 	.word	0x20000708
 8003154:	40004400 	.word	0x40004400

08003158 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <MX_USART6_UART_Init+0x50>)
 8003160:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003164:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003168:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_USART6_UART_Init+0x4c>)
 8003190:	f01e fe76 	bl	8021e80 <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800319a:	f000 f907 	bl	80033ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000074c 	.word	0x2000074c
 80031a8:	40011400 	.word	0x40011400

080031ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <MX_DMA_Init+0x78>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <MX_DMA_Init+0x78>)
 80031bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <MX_DMA_Init+0x78>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <MX_DMA_Init+0x78>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a13      	ldr	r2, [pc, #76]	; (8003224 <MX_DMA_Init+0x78>)
 80031d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_DMA_Init+0x78>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	200b      	movs	r0, #11
 80031f0:	f019 fb09 	bl	801c806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80031f4:	200b      	movs	r0, #11
 80031f6:	f019 fb22 	bl	801c83e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	200c      	movs	r0, #12
 8003200:	f019 fb01 	bl	801c806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003204:	200c      	movs	r0, #12
 8003206:	f019 fb1a 	bl	801c83e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	2038      	movs	r0, #56	; 0x38
 8003210:	f019 faf9 	bl	801c806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003214:	2038      	movs	r0, #56	; 0x38
 8003216:	f019 fb12 	bl	801c83e <HAL_NVIC_EnableIRQ>

}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	4b56      	ldr	r3, [pc, #344]	; (800339c <MX_GPIO_Init+0x174>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a55      	ldr	r2, [pc, #340]	; (800339c <MX_GPIO_Init+0x174>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6313      	str	r3, [r2, #48]	; 0x30
 800324e:	4b53      	ldr	r3, [pc, #332]	; (800339c <MX_GPIO_Init+0x174>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b4f      	ldr	r3, [pc, #316]	; (800339c <MX_GPIO_Init+0x174>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a4e      	ldr	r2, [pc, #312]	; (800339c <MX_GPIO_Init+0x174>)
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b4c      	ldr	r3, [pc, #304]	; (800339c <MX_GPIO_Init+0x174>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <MX_GPIO_Init+0x174>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <MX_GPIO_Init+0x174>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <MX_GPIO_Init+0x174>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	4b41      	ldr	r3, [pc, #260]	; (800339c <MX_GPIO_Init+0x174>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a40      	ldr	r2, [pc, #256]	; (800339c <MX_GPIO_Init+0x174>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <MX_GPIO_Init+0x174>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2131      	movs	r1, #49	; 0x31
 80032b2:	483b      	ldr	r0, [pc, #236]	; (80033a0 <MX_GPIO_Init+0x178>)
 80032b4:	f01a f970 	bl	801d598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2120      	movs	r1, #32
 80032bc:	4839      	ldr	r0, [pc, #228]	; (80033a4 <MX_GPIO_Init+0x17c>)
 80032be:	f01a f96b 	bl	801d598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2104      	movs	r1, #4
 80032c6:	4838      	ldr	r0, [pc, #224]	; (80033a8 <MX_GPIO_Init+0x180>)
 80032c8:	f01a f966 	bl	801d598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4619      	mov	r1, r3
 80032e2:	482f      	ldr	r0, [pc, #188]	; (80033a0 <MX_GPIO_Init+0x178>)
 80032e4:	f019 fef0 	bl	801d0c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SONAR_TRIGGER_Pin LD1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SONAR_TRIGGER_Pin|LD1_Pin|BUZZER_Pin;
 80032e8:	2331      	movs	r3, #49	; 0x31
 80032ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2300      	movs	r3, #0
 80032f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	4828      	ldr	r0, [pc, #160]	; (80033a0 <MX_GPIO_Init+0x178>)
 8003300:	f019 fee2 	bl	801d0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONAR_ECHO_Pin */
  GPIO_InitStruct.Pin = SONAR_ECHO_Pin;
 8003304:	2302      	movs	r3, #2
 8003306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003308:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800330c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SONAR_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4821      	ldr	r0, [pc, #132]	; (80033a0 <MX_GPIO_Init+0x178>)
 800331a:	f019 fed5 	bl	801d0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800331e:	2320      	movs	r3, #32
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4619      	mov	r1, r3
 8003334:	481b      	ldr	r0, [pc, #108]	; (80033a4 <MX_GPIO_Init+0x17c>)
 8003336:	f019 fec7 	bl	801d0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800333a:	2304      	movs	r3, #4
 800333c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333e:	2301      	movs	r3, #1
 8003340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4815      	ldr	r0, [pc, #84]	; (80033a8 <MX_GPIO_Init+0x180>)
 8003352:	f019 feb9 	bl	801d0c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RC_PPM_Pin */
  GPIO_InitStruct.Pin = RC_PPM_Pin;
 8003356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800335a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800335c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RC_PPM_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	480c      	ldr	r0, [pc, #48]	; (80033a0 <MX_GPIO_Init+0x178>)
 800336e:	f019 feab 	bl	801d0c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	2007      	movs	r0, #7
 8003378:	f019 fa45 	bl	801c806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800337c:	2007      	movs	r0, #7
 800337e:	f019 fa5e 	bl	801c83e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	2028      	movs	r0, #40	; 0x28
 8003388:	f019 fa3d 	bl	801c806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800338c:	2028      	movs	r0, #40	; 0x28
 800338e:	f019 fa56 	bl	801c83e <HAL_NVIC_EnableIRQ>

}
 8003392:	bf00      	nop
 8003394:	3728      	adds	r7, #40	; 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40020000 	.word	0x40020000
 80033a8:	40020400 	.word	0x40020400

080033ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b0:	b672      	cpsid	i
}
 80033b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <Error_Handler+0x8>
	...

080033b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_MspInit+0x4c>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <HAL_MspInit+0x4c>)
 80033c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_MspInit+0x4c>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_MspInit+0x4c>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_MspInit+0x4c>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_MspInit+0x4c>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033f6:	2007      	movs	r0, #7
 80033f8:	f019 f9fa 	bl	801c7f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800

08003408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a49      	ldr	r2, [pc, #292]	; (800354c <HAL_ADC_MspInit+0x144>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f040 808c 	bne.w	8003544 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343a:	6453      	str	r3, [r2, #68]	; 0x44
 800343c:	4b44      	ldr	r3, [pc, #272]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	4a3f      	ldr	r2, [pc, #252]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6313      	str	r3, [r2, #48]	; 0x30
 8003458:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	4b39      	ldr	r3, [pc, #228]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a31      	ldr	r2, [pc, #196]	; (8003550 <HAL_ADC_MspInit+0x148>)
 800348a:	f043 0302 	orr.w	r3, r3, #2
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_ADC_MspInit+0x148>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RSSI_Pin;
 800349c:	2304      	movs	r3, #4
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a0:	2303      	movs	r3, #3
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4829      	ldr	r0, [pc, #164]	; (8003554 <HAL_ADC_MspInit+0x14c>)
 80034b0:	f019 fe0a 	bl	801d0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_IN_Pin|CURRENT_IN_Pin;
 80034b4:	23c0      	movs	r3, #192	; 0xc0
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	4619      	mov	r1, r3
 80034c6:	4824      	ldr	r0, [pc, #144]	; (8003558 <HAL_ADC_MspInit+0x150>)
 80034c8:	f019 fdfe 	bl	801d0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EXTERNAL_PAD_Pin;
 80034cc:	2302      	movs	r3, #2
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d0:	2303      	movs	r3, #3
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXTERNAL_PAD_GPIO_Port, &GPIO_InitStruct);
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	4619      	mov	r1, r3
 80034de:	481f      	ldr	r0, [pc, #124]	; (800355c <HAL_ADC_MspInit+0x154>)
 80034e0:	f019 fdf2 	bl	801d0c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034e6:	4a1f      	ldr	r2, [pc, #124]	; (8003564 <HAL_ADC_MspInit+0x15c>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034f0:	4b1b      	ldr	r3, [pc, #108]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_ADC_MspInit+0x158>)
 80034fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003502:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003506:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800350a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800350e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003512:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800351a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800351e:	2200      	movs	r2, #0
 8003520:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003528:	480d      	ldr	r0, [pc, #52]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800352a:	f019 f9b1 	bl	801c890 <HAL_DMA_Init>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003534:	f7ff ff3a 	bl	80033ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_ADC_MspInit+0x158>)
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_ADC_MspInit+0x158>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003544:	bf00      	nop
 8003546:	3730      	adds	r7, #48	; 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40012000 	.word	0x40012000
 8003550:	40023800 	.word	0x40023800
 8003554:	40020800 	.word	0x40020800
 8003558:	40020000 	.word	0x40020000
 800355c:	40020400 	.word	0x40020400
 8003560:	200004c0 	.word	0x200004c0
 8003564:	40026410 	.word	0x40026410

08003568 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a4f      	ldr	r2, [pc, #316]	; (80036c4 <HAL_I2C_MspInit+0x15c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f040 8097 	bne.w	80036ba <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4a4c      	ldr	r2, [pc, #304]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	6313      	str	r3, [r2, #48]	; 0x30
 800359c:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ac:	2312      	movs	r3, #18
 80035ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b4:	2303      	movs	r3, #3
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035b8:	2304      	movs	r3, #4
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4842      	ldr	r0, [pc, #264]	; (80036cc <HAL_I2C_MspInit+0x164>)
 80035c4:	f019 fd80 	bl	801d0c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4a3d      	ldr	r2, [pc, #244]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 80035d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d6:	6413      	str	r3, [r2, #64]	; 0x40
 80035d8:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_I2C_MspInit+0x160>)
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_I2C_MspInit+0x16c>)
 80035e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80035ea:	4b39      	ldr	r3, [pc, #228]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003604:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003606:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800360c:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003612:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003614:	2200      	movs	r2, #0
 8003616:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800361e:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003620:	2200      	movs	r2, #0
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003624:	482a      	ldr	r0, [pc, #168]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003626:	f019 f933 	bl	801c890 <HAL_DMA_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003630:	f7ff febc 	bl	80033ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
 800363a:	4a25      	ldr	r2, [pc, #148]	; (80036d0 <HAL_I2C_MspInit+0x168>)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <HAL_I2C_MspInit+0x174>)
 8003644:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003648:	2200      	movs	r2, #0
 800364a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800365a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800366e:	2200      	movs	r2, #0
 8003670:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003674:	2200      	movs	r2, #0
 8003676:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800367e:	4816      	ldr	r0, [pc, #88]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003680:	f019 f906 	bl	801c890 <HAL_DMA_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800368a:	f7ff fe8f 	bl	80033ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003692:	635a      	str	r2, [r3, #52]	; 0x34
 8003694:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_I2C_MspInit+0x170>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	201f      	movs	r0, #31
 80036a0:	f019 f8b1 	bl	801c806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036a4:	201f      	movs	r0, #31
 80036a6:	f019 f8ca 	bl	801c83e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2020      	movs	r0, #32
 80036b0:	f019 f8a9 	bl	801c806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80036b4:	2020      	movs	r0, #32
 80036b6:	f019 f8c2 	bl	801c83e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036ba:	bf00      	nop
 80036bc:	3728      	adds	r7, #40	; 0x28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40005400 	.word	0x40005400
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020400 	.word	0x40020400
 80036d0:	20000574 	.word	0x20000574
 80036d4:	40026010 	.word	0x40026010
 80036d8:	200005d4 	.word	0x200005d4
 80036dc:	40026028 	.word	0x40026028

080036e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d10e      	bne.n	8003710 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800370e:	e01a      	b.n	8003746 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0f      	ldr	r2, [pc, #60]	; (8003754 <HAL_TIM_Base_MspInit+0x74>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d115      	bne.n	8003746 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_TIM_Base_MspInit+0x70>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	201d      	movs	r0, #29
 800373c:	f019 f863 	bl	801c806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003740:	201d      	movs	r0, #29
 8003742:	f019 f87c 	bl	801c83e <HAL_NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40000400 	.word	0x40000400

08003758 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_TIM_MspPostInit+0xa4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d13c      	bne.n	80037f4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6313      	str	r3, [r2, #48]	; 0x30
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_TIM_MspPostInit+0xa8>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037c2:	2302      	movs	r3, #2
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	480d      	ldr	r0, [pc, #52]	; (8003804 <HAL_TIM_MspPostInit+0xac>)
 80037ce:	f019 fc7b 	bl	801d0c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80037d2:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80037d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037e4:	2302      	movs	r3, #2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <HAL_TIM_MspPostInit+0xb0>)
 80037f0:	f019 fc6a 	bl	801d0c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037f4:	bf00      	nop
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40000400 	.word	0x40000400
 8003800:	40023800 	.word	0x40023800
 8003804:	40020400 	.word	0x40020400
 8003808:	40020800 	.word	0x40020800

0800380c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08e      	sub	sp, #56	; 0x38
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_UART_MspInit+0x180>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d135      	bne.n	800389a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	4b57      	ldr	r3, [pc, #348]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003838:	f043 0310 	orr.w	r3, r3, #16
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b54      	ldr	r3, [pc, #336]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a4f      	ldr	r2, [pc, #316]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_UART_MspInit+0x184>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003866:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386c:	2302      	movs	r3, #2
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003878:	2307      	movs	r3, #7
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003880:	4619      	mov	r1, r3
 8003882:	4844      	ldr	r0, [pc, #272]	; (8003994 <HAL_UART_MspInit+0x188>)
 8003884:	f019 fc20 	bl	801d0c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003888:	2200      	movs	r2, #0
 800388a:	2100      	movs	r1, #0
 800388c:	2025      	movs	r0, #37	; 0x25
 800388e:	f018 ffba 	bl	801c806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003892:	2025      	movs	r0, #37	; 0x25
 8003894:	f018 ffd3 	bl	801c83e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003898:	e073      	b.n	8003982 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a3e      	ldr	r2, [pc, #248]	; (8003998 <HAL_UART_MspInit+0x18c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d134      	bne.n	800390e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	4a38      	ldr	r2, [pc, #224]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b2:	6413      	str	r3, [r2, #64]	; 0x40
 80038b4:	4b36      	ldr	r3, [pc, #216]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	4a31      	ldr	r2, [pc, #196]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6313      	str	r3, [r2, #48]	; 0x30
 80038d0:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_UART_MspInit+0x184>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038dc:	230c      	movs	r3, #12
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	2302      	movs	r3, #2
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038ec:	2307      	movs	r3, #7
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f4:	4619      	mov	r1, r3
 80038f6:	4827      	ldr	r0, [pc, #156]	; (8003994 <HAL_UART_MspInit+0x188>)
 80038f8:	f019 fbe6 	bl	801d0c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038fc:	2200      	movs	r2, #0
 80038fe:	2100      	movs	r1, #0
 8003900:	2026      	movs	r0, #38	; 0x26
 8003902:	f018 ff80 	bl	801c806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003906:	2026      	movs	r0, #38	; 0x26
 8003908:	f018 ff99 	bl	801c83e <HAL_NVIC_EnableIRQ>
}
 800390c:	e039      	b.n	8003982 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a22      	ldr	r2, [pc, #136]	; (800399c <HAL_UART_MspInit+0x190>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d134      	bne.n	8003982 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_UART_MspInit+0x184>)
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	6453      	str	r3, [r2, #68]	; 0x44
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_UART_MspInit+0x184>)
 800392a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <HAL_UART_MspInit+0x184>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_UART_MspInit+0x184>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_UART_MspInit+0x184>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003950:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003962:	2308      	movs	r3, #8
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396a:	4619      	mov	r1, r3
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <HAL_UART_MspInit+0x188>)
 800396e:	f019 fbab 	bl	801d0c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003972:	2200      	movs	r2, #0
 8003974:	2100      	movs	r1, #0
 8003976:	2047      	movs	r0, #71	; 0x47
 8003978:	f018 ff45 	bl	801c806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800397c:	2047      	movs	r0, #71	; 0x47
 800397e:	f018 ff5e 	bl	801c83e <HAL_NVIC_EnableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3738      	adds	r7, #56	; 0x38
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40011000 	.word	0x40011000
 8003990:	40023800 	.word	0x40023800
 8003994:	40020000 	.word	0x40020000
 8003998:	40004400 	.word	0x40004400
 800399c:	40011400 	.word	0x40011400

080039a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_UART_MspDeInit+0x84>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10e      	bne.n	80039d0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039c2:	481a      	ldr	r0, [pc, #104]	; (8003a2c <HAL_UART_MspDeInit+0x8c>)
 80039c4:	f019 fd04 	bl	801d3d0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80039c8:	2025      	movs	r0, #37	; 0x25
 80039ca:	f018 ff46 	bl	801c85a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80039ce:	e025      	b.n	8003a1c <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_UART_MspDeInit+0x90>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 80039e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 80039e6:	210c      	movs	r1, #12
 80039e8:	4810      	ldr	r0, [pc, #64]	; (8003a2c <HAL_UART_MspDeInit+0x8c>)
 80039ea:	f019 fcf1 	bl	801d3d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80039ee:	2026      	movs	r0, #38	; 0x26
 80039f0:	f018 ff33 	bl	801c85a <HAL_NVIC_DisableIRQ>
}
 80039f4:	e012      	b.n	8003a1c <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART6)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <HAL_UART_MspDeInit+0x94>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10d      	bne.n	8003a1c <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART6_CLK_DISABLE();
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <HAL_UART_MspDeInit+0x88>)
 8003a06:	f023 0320 	bic.w	r3, r3, #32
 8003a0a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8003a0c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a10:	4806      	ldr	r0, [pc, #24]	; (8003a2c <HAL_UART_MspDeInit+0x8c>)
 8003a12:	f019 fcdd 	bl	801d3d0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003a16:	2047      	movs	r0, #71	; 0x47
 8003a18:	f018 ff1f 	bl	801c85a <HAL_NVIC_DisableIRQ>
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40004400 	.word	0x40004400
 8003a34:	40011400 	.word	0x40011400

08003a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <NMI_Handler+0x4>

08003a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a42:	e7fe      	b.n	8003a42 <HardFault_Handler+0x4>

08003a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <MemManage_Handler+0x4>

08003a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a4e:	e7fe      	b.n	8003a4e <BusFault_Handler+0x4>

08003a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <UsageFault_Handler+0x4>

08003a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  pif_sigTimer1ms();
 8003a84:	f00d fb5e 	bl	8011144 <pif_sigTimer1ms>
  pifTimerManager_sigTick(&g_timer_1ms);
 8003a88:	4803      	ldr	r0, [pc, #12]	; (8003a98 <SysTick_Handler+0x18>)
 8003a8a:	f011 face 	bl	801502a <pifTimerManager_sigTick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a8e:	f018 f999 	bl	801bdc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200014e4 	.word	0x200014e4

08003a9c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SONAR_ECHO_Pin);
 8003aa0:	2002      	movs	r0, #2
 8003aa2:	f019 fd93 	bl	801d5cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <DMA1_Stream0_IRQHandler+0x10>)
 8003ab2:	f019 f885 	bl	801cbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000574 	.word	0x20000574

08003ac0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ac6:	f019 f87b 	bl	801cbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200005d4 	.word	0x200005d4

08003ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM3_IRQHandler+0x10>)
 8003ada:	f01d fbbf 	bl	802125c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000067c 	.word	0x2000067c

08003ae8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <I2C1_EV_IRQHandler+0x10>)
 8003aee:	f01a fc21 	bl	801e334 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000520 	.word	0x20000520

08003afc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <I2C1_ER_IRQHandler+0x10>)
 8003b02:	f01a fd88 	bl	801e616 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000520 	.word	0x20000520

08003b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <USART1_IRQHandler+0x10>)
 8003b16:	f01e fbb9 	bl	802228c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200006c4 	.word	0x200006c4

08003b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <USART2_IRQHandler+0x10>)
 8003b2a:	f01e fbaf 	bl	802228c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000708 	.word	0x20000708

08003b38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RC_PPM_Pin);
 8003b3c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b40:	f019 fd44 	bl	801d5cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003b44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b48:	f019 fd40 	bl	801d5cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA2_Stream0_IRQHandler+0x10>)
 8003b56:	f019 f833 	bl	801cbc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200004c0 	.word	0x200004c0

08003b64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <USART6_IRQHandler+0x10>)
 8003b6a:	f01e fb8f 	bl	802228c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000074c 	.word	0x2000074c

08003b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <_sbrk+0x5c>)
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <_sbrk+0x60>)
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <_sbrk+0x64>)
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <_sbrk+0x68>)
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <_sbrk+0x64>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d207      	bcs.n	8003bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba8:	f01f fad6 	bl	8023158 <__errno>
 8003bac:	4603      	mov	r3, r0
 8003bae:	220c      	movs	r2, #12
 8003bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	e009      	b.n	8003bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <_sbrk+0x64>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <_sbrk+0x64>)
 8003bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bca:	68fb      	ldr	r3, [r7, #12]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20020000 	.word	0x20020000
 8003bd8:	00000400 	.word	0x00000400
 8003bdc:	200007b4 	.word	0x200007b4
 8003be0:	20001f00 	.word	0x20001f00

08003be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <SystemInit+0x20>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <SystemInit+0x20>)
 8003bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <constrain>:

static bool standardBoardAlignment = true;     // board orientation correction
static float boardRotation[3][3];              // matrix

int constrain(int amt, int low, int high)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	da01      	bge.n	8003c20 <constrain+0x18>
        return low;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	e006      	b.n	8003c2e <constrain+0x26>
    else if (amt > high)
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dd01      	ble.n	8003c2c <constrain+0x24>
        return high;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	e000      	b.n	8003c2e <constrain+0x26>
    else
        return amt;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	0000      	movs	r0, r0
 8003c3c:	0000      	movs	r0, r0
	...

08003c40 <initBoardAlignment>:

void initBoardAlignment(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	; 0x38
 8003c44:	af00      	add	r7, sp, #0
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!mcfg.board_align_roll && !mcfg.board_align_pitch && !mcfg.board_align_yaw)
 8003c46:	4b8a      	ldr	r3, [pc, #552]	; (8003e70 <initBoardAlignment+0x230>)
 8003c48:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <initBoardAlignment+0x26>
 8003c50:	4b87      	ldr	r3, [pc, #540]	; (8003e70 <initBoardAlignment+0x230>)
 8003c52:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <initBoardAlignment+0x26>
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <initBoardAlignment+0x230>)
 8003c5c:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80fd 	beq.w	8003e60 <initBoardAlignment+0x220>
        return;

    standardBoardAlignment = false;
 8003c66:	4b83      	ldr	r3, [pc, #524]	; (8003e74 <initBoardAlignment+0x234>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]

    // deg2rad
    roll = mcfg.board_align_roll * M_PI / 180.0f;
 8003c6c:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <initBoardAlignment+0x230>)
 8003c6e:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fc0a 	bl	800048c <__aeabi_i2d>
 8003c78:	a37b      	add	r3, pc, #492	; (adr r3, 8003e68 <initBoardAlignment+0x228>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f7fc fc6f 	bl	8000560 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <initBoardAlignment+0x238>)
 8003c90:	f7fc fd90 	bl	80007b4 <__aeabi_ddiv>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc ff42 	bl	8000b24 <__aeabi_d2f>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
    pitch = mcfg.board_align_pitch * M_PI / 180.0f;
 8003ca4:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <initBoardAlignment+0x230>)
 8003ca6:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fbee 	bl	800048c <__aeabi_i2d>
 8003cb0:	a36d      	add	r3, pc, #436	; (adr r3, 8003e68 <initBoardAlignment+0x228>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fc53 	bl	8000560 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <initBoardAlignment+0x238>)
 8003cc8:	f7fc fd74 	bl	80007b4 <__aeabi_ddiv>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f7fc ff26 	bl	8000b24 <__aeabi_d2f>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
    yaw = mcfg.board_align_yaw * M_PI / 180.0f;
 8003cdc:	4b64      	ldr	r3, [pc, #400]	; (8003e70 <initBoardAlignment+0x230>)
 8003cde:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fbd2 	bl	800048c <__aeabi_i2d>
 8003ce8:	a35f      	add	r3, pc, #380	; (adr r3, 8003e68 <initBoardAlignment+0x228>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fc37 	bl	8000560 <__aeabi_dmul>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	4b5e      	ldr	r3, [pc, #376]	; (8003e78 <initBoardAlignment+0x238>)
 8003d00:	f7fc fd58 	bl	80007b4 <__aeabi_ddiv>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc ff0a 	bl	8000b24 <__aeabi_d2f>
 8003d10:	4603      	mov	r3, r0
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c

    cosx = cosf(roll);
 8003d14:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003d18:	f01f fd46 	bl	80237a8 <cosf>
 8003d1c:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinx = sinf(roll);
 8003d20:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003d24:	f01f fdc4 	bl	80238b0 <sinf>
 8003d28:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    cosy = cosf(pitch);
 8003d2c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003d30:	f01f fd3a 	bl	80237a8 <cosf>
 8003d34:	ed87 0a08 	vstr	s0, [r7, #32]
    siny = sinf(pitch);
 8003d38:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8003d3c:	f01f fdb8 	bl	80238b0 <sinf>
 8003d40:	ed87 0a07 	vstr	s0, [r7, #28]
    cosz = cosf(yaw);
 8003d44:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003d48:	f01f fd2e 	bl	80237a8 <cosf>
 8003d4c:	ed87 0a06 	vstr	s0, [r7, #24]
    sinz = sinf(yaw);
 8003d50:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003d54:	f01f fdac 	bl	80238b0 <sinf>
 8003d58:	ed87 0a05 	vstr	s0, [r7, #20]

    coszcosx = cosz * cosx;
 8003d5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d68:	edc7 7a04 	vstr	s15, [r7, #16]
    coszcosy = cosz * cosy;
 8003d6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003d70:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzcosx = sinz * cosx;
 8003d7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d88:	edc7 7a02 	vstr	s15, [r7, #8]
    coszsinx = sinx * cosz;
 8003d8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	edc7 7a01 	vstr	s15, [r7, #4]
    sinzsinx = sinx * sinz;
 8003d9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da8:	edc7 7a00 	vstr	s15, [r7]

    // define rotation matrix
    boardRotation[0][0] = coszcosy;
 8003dac:	4a33      	ldr	r2, [pc, #204]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6013      	str	r3, [r2, #0]
    boardRotation[0][1] = -cosy * sinz;
 8003db2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003db6:	eeb1 7a67 	vneg.f32	s14, s15
 8003dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dc4:	edc3 7a01 	vstr	s15, [r3, #4]
    boardRotation[0][2] = siny;
 8003dc8:	4a2c      	ldr	r2, [pc, #176]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	6093      	str	r3, [r2, #8]

    boardRotation[1][0] = sinzcosx + (coszsinx * siny);
 8003dce:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <initBoardAlignment+0x23c>)
 8003de4:	edc3 7a03 	vstr	s15, [r3, #12]
    boardRotation[1][1] = coszcosx - (sinzsinx * siny);
 8003de8:	ed97 7a00 	vldr	s14, [r7]
 8003dec:	edd7 7a07 	vldr	s15, [r7, #28]
 8003df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfc:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <initBoardAlignment+0x23c>)
 8003dfe:	edc3 7a04 	vstr	s15, [r3, #16]
    boardRotation[1][2] = -sinx * cosy;
 8003e02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e06:	eeb1 7a67 	vneg.f32	s14, s15
 8003e0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e14:	edc3 7a05 	vstr	s15, [r3, #20]

    boardRotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8003e18:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e24:	ed97 7a00 	vldr	s14, [r7]
 8003e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e2e:	edc3 7a06 	vstr	s15, [r3, #24]
    boardRotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8003e32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e36:	edd7 7a07 	vldr	s15, [r7, #28]
 8003e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e48:	edc3 7a07 	vstr	s15, [r3, #28]
    boardRotation[2][2] = cosy * cosx;
 8003e4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <initBoardAlignment+0x23c>)
 8003e5a:	edc3 7a08 	vstr	s15, [r3, #32]
 8003e5e:	e000      	b.n	8003e62 <initBoardAlignment+0x222>
        return;
 8003e60:	bf00      	nop
}
 8003e62:	3738      	adds	r7, #56	; 0x38
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	54442d18 	.word	0x54442d18
 8003e6c:	400921fb 	.word	0x400921fb
 8003e70:	20000848 	.word	0x20000848
 8003e74:	20000024 	.word	0x20000024
 8003e78:	40668000 	.word	0x40668000
 8003e7c:	200007b8 	.word	0x200007b8

08003e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e86:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e88:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e8c:	e002      	b.n	8003e94 <LoopCopyDataInit>

08003e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e92:	3304      	adds	r3, #4

08003e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e98:	d3f9      	bcc.n	8003e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e9c:	4c0b      	ldr	r4, [pc, #44]	; (8003ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea0:	e001      	b.n	8003ea6 <LoopFillZerobss>

08003ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea4:	3204      	adds	r2, #4

08003ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea8:	d3fb      	bcc.n	8003ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003eaa:	f7ff fe9b 	bl	8003be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eae:	f01f f959 	bl	8023164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eb2:	f7fe fbdb 	bl	800266c <main>
  bx  lr    
 8003eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003ec4:	08029ad0 	.word	0x08029ad0
  ldr r2, =_sbss
 8003ec8:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8003ecc:	20001f00 	.word	0x20001f00

08003ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed0:	e7fe      	b.n	8003ed0 <ADC_IRQHandler>
	...

08003ed4 <_evtBuzzerFinish>:
static uint8_t readyBeepDone = 0;

PifBuzzer s_buzzer;

static void _evtBuzzerFinish(PifId id)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
	(void)id;

    buzzerMode = BUZZER_STOPPED;
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <_evtBuzzerFinish+0x1c>)
 8003ee0:	220d      	movs	r2, #13
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	20000025 	.word	0x20000025

08003ef4 <buzzerInit>:

bool buzzerInit()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
    if (!pifBuzzer_Init(&s_buzzer, PIF_ID_BUZZER, actBuzzerAction)) return false;
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <buzzerInit+0x28>)
 8003efa:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <buzzerInit+0x2c>)
 8003f00:	f016 ffcc 	bl	801ae9c <pifBuzzer_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <buzzerInit+0x1a>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e003      	b.n	8003f16 <buzzerInit+0x22>
    s_buzzer.evt_finish = _evtBuzzerFinish;
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <buzzerInit+0x2c>)
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <buzzerInit+0x30>)
 8003f12:	601a      	str	r2, [r3, #0]
    return true;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08002129 	.word	0x08002129
 8003f20:	200007f4 	.word	0x200007f4
 8003f24:	08003ed5 	.word	0x08003ed5

08003f28 <buzzer>:

/* Buzzer -function is used to activate/deactive buzzer.
 * Parameter defines the used sequence.
 */
void buzzer(uint8_t mode)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
#ifdef GPS
    uint8_t i = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
#endif

    // Just return if same or higher priority sound is active.
    if (buzzerMode <= mode)
 8003f36:	4b62      	ldr	r3, [pc, #392]	; (80040c0 <buzzer+0x198>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	79fa      	ldrb	r2, [r7, #7]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	f080 80b7 	bcs.w	80040b0 <buzzer+0x188>
        return;

    switch (mode) {
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	f200 80b5 	bhi.w	80040b4 <buzzer+0x18c>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <buzzer+0x28>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08004003 	.word	0x08004003
 8003f58:	08003ff3 	.word	0x08003ff3
 8003f5c:	08003fe3 	.word	0x08003fe3
 8003f60:	08004013 	.word	0x08004013
 8003f64:	08003fb3 	.word	0x08003fb3
 8003f68:	08003fb3 	.word	0x08003fb3
 8003f6c:	08004023 	.word	0x08004023
 8003f70:	08004033 	.word	0x08004033
 8003f74:	08004013 	.word	0x08004013
 8003f78:	08003fc3 	.word	0x08003fc3
 8003f7c:	08003fd3 	.word	0x08003fd3
 8003f80:	08003f93 	.word	0x08003f93
        case BUZZER_STOP:
            buzzerMode = BUZZER_STOPPED;
 8003f84:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <buzzer+0x198>)
 8003f86:	220d      	movs	r2, #13
 8003f88:	701a      	strb	r2, [r3, #0]
            pifBuzzer_Stop(&s_buzzer);
 8003f8a:	484e      	ldr	r0, [pc, #312]	; (80040c4 <buzzer+0x19c>)
 8003f8c:	f016 fff2 	bl	801af74 <pifBuzzer_Stop>
            break;
 8003f90:	e093      	b.n	80040ba <buzzer+0x192>
        case BUZZER_READY_BEEP:
            if (readyBeepDone)
 8003f92:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <buzzer+0x1a0>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 808e 	bne.w	80040b8 <buzzer+0x190>
                return;
            pifBuzzer_Start(&s_buzzer, buzz_readyBeep);
 8003f9c:	494b      	ldr	r1, [pc, #300]	; (80040cc <buzzer+0x1a4>)
 8003f9e:	4849      	ldr	r0, [pc, #292]	; (80040c4 <buzzer+0x19c>)
 8003fa0:	f016 ffc6 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fa4:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <buzzer+0x198>)
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	7013      	strb	r3, [r2, #0]
            readyBeepDone = 1;
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <buzzer+0x1a0>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
            break;
 8003fb0:	e083      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ARMING:
        case BUZZER_DISARMING:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeepFast);
 8003fb2:	4947      	ldr	r1, [pc, #284]	; (80040d0 <buzzer+0x1a8>)
 8003fb4:	4843      	ldr	r0, [pc, #268]	; (80040c4 <buzzer+0x19c>)
 8003fb6:	f016 ffbb 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fba:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <buzzer+0x198>)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	7013      	strb	r3, [r2, #0]
            break;
 8003fc0:	e07b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION:
            pifBuzzer_Start(&s_buzzer, buzz_2shortBeeps);
 8003fc2:	4944      	ldr	r1, [pc, #272]	; (80040d4 <buzzer+0x1ac>)
 8003fc4:	483f      	ldr	r0, [pc, #252]	; (80040c4 <buzzer+0x19c>)
 8003fc6:	f016 ffb3 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fca:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <buzzer+0x198>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	7013      	strb	r3, [r2, #0]
            break;
 8003fd0:	e073      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ACC_CALIBRATION_FAIL:
            pifBuzzer_Start(&s_buzzer, buzz_3shortBeeps);
 8003fd2:	4941      	ldr	r1, [pc, #260]	; (80040d8 <buzzer+0x1b0>)
 8003fd4:	483b      	ldr	r0, [pc, #236]	; (80040c4 <buzzer+0x19c>)
 8003fd6:	f016 ffab 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fda:	4a39      	ldr	r2, [pc, #228]	; (80040c0 <buzzer+0x198>)
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	7013      	strb	r3, [r2, #0]
            break;
 8003fe0:	e06b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_TX_LOST_ARMED:
            pifBuzzer_Start(&s_buzzer, buzz_sos);
 8003fe2:	493e      	ldr	r1, [pc, #248]	; (80040dc <buzzer+0x1b4>)
 8003fe4:	4837      	ldr	r0, [pc, #220]	; (80040c4 <buzzer+0x19c>)
 8003fe6:	f016 ffa3 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 8003fea:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <buzzer+0x198>)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	7013      	strb	r3, [r2, #0]
            break;
 8003ff0:	e063      	b.n	80040ba <buzzer+0x192>
        case BUZZER_BAT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_longBeep);
 8003ff2:	493b      	ldr	r1, [pc, #236]	; (80040e0 <buzzer+0x1b8>)
 8003ff4:	4833      	ldr	r0, [pc, #204]	; (80040c4 <buzzer+0x19c>)
 8003ff6:	f016 ff9b 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 8003ffa:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <buzzer+0x198>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	7013      	strb	r3, [r2, #0]
            break;
 8004000:	e05b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_BAT_CRIT_LOW:
            pifBuzzer_Start(&s_buzzer, buzz_BatteryBeep);
 8004002:	4938      	ldr	r1, [pc, #224]	; (80040e4 <buzzer+0x1bc>)
 8004004:	482f      	ldr	r0, [pc, #188]	; (80040c4 <buzzer+0x19c>)
 8004006:	f016 ff93 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 800400a:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <buzzer+0x198>)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	7013      	strb	r3, [r2, #0]
            break;
 8004010:	e053      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ARMED:
        case BUZZER_TX_LOST:
            pifBuzzer_Start(&s_buzzer, buzz_mediumBeep);
 8004012:	4935      	ldr	r1, [pc, #212]	; (80040e8 <buzzer+0x1c0>)
 8004014:	482b      	ldr	r0, [pc, #172]	; (80040c4 <buzzer+0x19c>)
 8004016:	f016 ff8b 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <buzzer+0x198>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	7013      	strb	r3, [r2, #0]
            break;
 8004020:	e04b      	b.n	80040ba <buzzer+0x192>
        case BUZZER_ARMING_GPS_FIX:
            pifBuzzer_Start(&s_buzzer, buzz_armed);
 8004022:	4932      	ldr	r1, [pc, #200]	; (80040ec <buzzer+0x1c4>)
 8004024:	4827      	ldr	r0, [pc, #156]	; (80040c4 <buzzer+0x19c>)
 8004026:	f016 ff83 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 800402a:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <buzzer+0x198>)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	7013      	strb	r3, [r2, #0]
            break;
 8004030:	e043      	b.n	80040ba <buzzer+0x192>
        case BUZZER_TX_SET:
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5) {
 8004032:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004036:	f002 ff4b 	bl	8006ed0 <feature>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02f      	beq.n	80040a0 <buzzer+0x178>
 8004040:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <buzzer+0x1c8>)
 8004042:	7adb      	ldrb	r3, [r3, #11]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02b      	beq.n	80040a0 <buzzer+0x178>
 8004048:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <buzzer+0x1cc>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d927      	bls.n	80040a0 <buzzer+0x178>
                do {
                    buzz_countSats[i] = 5;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <buzzer+0x1d0>)
 8004054:	2105      	movs	r1, #5
 8004056:	54d1      	strb	r1, [r2, r3]
                    buzz_countSats[i + 1] = 15;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	3301      	adds	r3, #1
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <buzzer+0x1d0>)
 800405e:	210f      	movs	r1, #15
 8004060:	54d1      	strb	r1, [r2, r3]
                    i += 2;
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3302      	adds	r3, #2
 8004066:	73fb      	strb	r3, [r7, #15]
                } while (i < 20 && GPS_numSat > i / 2);
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b13      	cmp	r3, #19
 800406c:	d806      	bhi.n	800407c <buzzer+0x154>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <buzzer+0x1cc>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d3e9      	bcc.n	8004050 <buzzer+0x128>
                buzz_countSats[i + 1] = 100;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	3301      	adds	r3, #1
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <buzzer+0x1d0>)
 8004082:	2164      	movs	r1, #100	; 0x64
 8004084:	54d1      	strb	r1, [r2, r3]
                buzz_countSats[i + 2] = 0xF0;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	3302      	adds	r3, #2
 800408a:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <buzzer+0x1d0>)
 800408c:	21f0      	movs	r1, #240	; 0xf0
 800408e:	54d1      	strb	r1, [r2, r3]
                pifBuzzer_Start(&s_buzzer, buzz_countSats);
 8004090:	4919      	ldr	r1, [pc, #100]	; (80040f8 <buzzer+0x1d0>)
 8004092:	480c      	ldr	r0, [pc, #48]	; (80040c4 <buzzer+0x19c>)
 8004094:	f016 ff4c 	bl	801af30 <pifBuzzer_Start>
                buzzerMode = mode;
 8004098:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <buzzer+0x198>)
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	7013      	strb	r3, [r2, #0]
                break;
 800409e:	e00c      	b.n	80040ba <buzzer+0x192>
            }
#endif
            pifBuzzer_Start(&s_buzzer, buzz_shortBeep);
 80040a0:	4916      	ldr	r1, [pc, #88]	; (80040fc <buzzer+0x1d4>)
 80040a2:	4808      	ldr	r0, [pc, #32]	; (80040c4 <buzzer+0x19c>)
 80040a4:	f016 ff44 	bl	801af30 <pifBuzzer_Start>
            buzzerMode = mode;
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <buzzer+0x198>)
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	7013      	strb	r3, [r2, #0]
            break;
 80040ae:	e004      	b.n	80040ba <buzzer+0x192>
        return;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <buzzer+0x192>

        default:
            return;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <buzzer+0x192>
                return;
 80040b8:	bf00      	nop
    }
}
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000025 	.word	0x20000025
 80040c4:	200007f4 	.word	0x200007f4
 80040c8:	200007f2 	.word	0x200007f2
 80040cc:	08027ccc 	.word	0x08027ccc
 80040d0:	08027ca0 	.word	0x08027ca0
 80040d4:	08027cdc 	.word	0x08027cdc
 80040d8:	08027ce4 	.word	0x08027ce4
 80040dc:	08027cac 	.word	0x08027cac
 80040e0:	08027ca8 	.word	0x08027ca8
 80040e4:	08027c9c 	.word	0x08027c9c
 80040e8:	08027ca4 	.word	0x08027ca4
 80040ec:	08027cc0 	.word	0x08027cc0
 80040f0:	200016b0 	.word	0x200016b0
 80040f4:	20001794 	.word	0x20001794
 80040f8:	200007dc 	.word	0x200007dc
 80040fc:	08027c98 	.word	0x08027c98

08004100 <buzzerUpdate>:

/* buzzerUpdate -function is used in loop. It will update buzzer state
 * when the time is correct.
 */
void buzzerUpdate(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
    // If beeper option from AUX switch has been selected
    if (rcOptions[BOXBEEPERON]) {
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <buzzerUpdate+0x20>)
 8004106:	7b5b      	ldrb	r3, [r3, #13]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d006      	beq.n	800411a <buzzerUpdate+0x1a>
        if (buzzerMode > BUZZER_TX_SET)
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <buzzerUpdate+0x24>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d902      	bls.n	800411a <buzzerUpdate+0x1a>
            buzzer(BUZZER_TX_SET);
 8004114:	2008      	movs	r0, #8
 8004116:	f7ff ff07 	bl	8003f28 <buzzer>
    }
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20001750 	.word	0x20001750
 8004124:	20000025 	.word	0x20000025

08004128 <i2a>:
**           range errors on the radix default it to base10
** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
*/

static char *i2a(unsigned i, char *a, unsigned r)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
    if (i / r > 0)
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	d309      	bcc.n	8004150 <i2a+0x28>
        a = i2a(i / r, a, r);
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ffed 	bl	8004128 <i2a>
 800414e:	60b8      	str	r0, [r7, #8]
    *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % r];
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	fbb3 f2f2 	udiv	r2, r3, r2
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	fb01 f202 	mul.w	r2, r1, r2
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <i2a+0x4c>)
 8004162:	5cd2      	ldrb	r2, [r2, r3]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	701a      	strb	r2, [r3, #0]
    return a + 1;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3301      	adds	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	08026d54 	.word	0x08026d54

08004178 <itoa>:

char *itoa(int i, char *a, int r)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
    if ((r < 2) || (r > 36))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	dd02      	ble.n	8004190 <itoa+0x18>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b24      	cmp	r3, #36	; 0x24
 800418e:	dd01      	ble.n	8004194 <itoa+0x1c>
        r = 10;
 8004190:	230a      	movs	r3, #10
 8004192:	607b      	str	r3, [r7, #4]
    if (i < 0) {
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da0e      	bge.n	80041b8 <itoa+0x40>
        *a = '-';
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	222d      	movs	r2, #45	; 0x2d
 800419e:	701a      	strb	r2, [r3, #0]
        *i2a(-(unsigned)i, a + 1, r) = 0;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4258      	negs	r0, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	3301      	adds	r3, #1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7ff ffbc 	bl	8004128 <i2a>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e008      	b.n	80041ca <itoa+0x52>
    } else
        *i2a(i, a, r) = 0;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ffb2 	bl	8004128 <i2a>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
    return a;
 80041ca:	68bb      	ldr	r3, [r7, #8]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_atof>:
// 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
//
#define white_space(c) ((c) == ' ' || (c) == '\t')
#define valid_digit(c) ((c) >= '0' && (c) <= '9')
static float _atof(const char *p)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    int frac = 0;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
    float sign, value, scale;

    // Skip leading white space, if any.
    while (white_space(*p)) {
 80041e0:	e002      	b.n	80041e8 <_atof+0x14>
        p += 1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3301      	adds	r3, #1
 80041e6:	607b      	str	r3, [r7, #4]
    while (white_space(*p)) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d0f8      	beq.n	80041e2 <_atof+0xe>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b09      	cmp	r3, #9
 80041f6:	d0f4      	beq.n	80041e2 <_atof+0xe>
    }

    // Get sign, if any.
    sign = 1.0f;
 80041f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041fc:	61bb      	str	r3, [r7, #24]
    if (*p == '-') {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b2d      	cmp	r3, #45	; 0x2d
 8004204:	d105      	bne.n	8004212 <_atof+0x3e>
        sign = -1.0f;
 8004206:	4b6a      	ldr	r3, [pc, #424]	; (80043b0 <_atof+0x1dc>)
 8004208:	61bb      	str	r3, [r7, #24]
        p += 1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3301      	adds	r3, #1
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	e006      	b.n	8004220 <_atof+0x4c>

    } else if (*p == '+') {
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b2b      	cmp	r3, #43	; 0x2b
 8004218:	d102      	bne.n	8004220 <_atof+0x4c>
        p += 1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3301      	adds	r3, #1
 800421e:	607b      	str	r3, [r7, #4]
    }

    // Get digits before decimal point or exponent, if any.
    value = 0.0f;
 8004220:	f04f 0300 	mov.w	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
    while (valid_digit(*p)) {
 8004226:	e013      	b.n	8004250 <_atof+0x7c>
        value = value * 10.0f + (*p - '0');
 8004228:	edd7 7a05 	vldr	s15, [r7, #20]
 800422c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004230:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	3b30      	subs	r3, #48	; 0x30
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004246:	edc7 7a05 	vstr	s15, [r7, #20]
        p += 1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3301      	adds	r3, #1
 800424e:	607b      	str	r3, [r7, #4]
    while (valid_digit(*p)) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b2f      	cmp	r3, #47	; 0x2f
 8004256:	d903      	bls.n	8004260 <_atof+0x8c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b39      	cmp	r3, #57	; 0x39
 800425e:	d9e3      	bls.n	8004228 <_atof+0x54>
    }

    // Get digits after decimal point, if any.
    if (*p == '.') {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b2e      	cmp	r3, #46	; 0x2e
 8004266:	d129      	bne.n	80042bc <_atof+0xe8>
        float pow10 = 10.0f;
 8004268:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <_atof+0x1e0>)
 800426a:	60fb      	str	r3, [r7, #12]
        p += 1;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3301      	adds	r3, #1
 8004270:	607b      	str	r3, [r7, #4]

        while (valid_digit(*p)) {
 8004272:	e01b      	b.n	80042ac <_atof+0xd8>
            value += (*p - '0') / pow10;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3b30      	subs	r3, #48	; 0x30
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004282:	ed97 7a03 	vldr	s14, [r7, #12]
 8004286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800428a:	ed97 7a05 	vldr	s14, [r7, #20]
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	edc7 7a05 	vstr	s15, [r7, #20]
            pow10 *= 10.0f;
 8004296:	edd7 7a03 	vldr	s15, [r7, #12]
 800429a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800429e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042a2:	edc7 7a03 	vstr	s15, [r7, #12]
            p += 1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3301      	adds	r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b2f      	cmp	r3, #47	; 0x2f
 80042b2:	d903      	bls.n	80042bc <_atof+0xe8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b39      	cmp	r3, #57	; 0x39
 80042ba:	d9db      	bls.n	8004274 <_atof+0xa0>
        }
    }

    // Handle exponent, if any.
    scale = 1.0f;
 80042bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80042c0:	613b      	str	r3, [r7, #16]
    if ((*p == 'e') || (*p == 'E')) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b65      	cmp	r3, #101	; 0x65
 80042c8:	d003      	beq.n	80042d2 <_atof+0xfe>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b45      	cmp	r3, #69	; 0x45
 80042d0:	d153      	bne.n	800437a <_atof+0x1a6>
        unsigned int expon;
        p += 1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3301      	adds	r3, #1
 80042d6:	607b      	str	r3, [r7, #4]

        // Get sign of exponent, if any.
        frac = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
        if (*p == '-') {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b2d      	cmp	r3, #45	; 0x2d
 80042e2:	d105      	bne.n	80042f0 <_atof+0x11c>
            frac = 1;
 80042e4:	2301      	movs	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
            p += 1;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e006      	b.n	80042fe <_atof+0x12a>

        } else if (*p == '+') {
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b2b      	cmp	r3, #43	; 0x2b
 80042f6:	d102      	bne.n	80042fe <_atof+0x12a>
            p += 1;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3301      	adds	r3, #1
 80042fc:	607b      	str	r3, [r7, #4]
        }

        // Get digits of exponent, if any.
        expon = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
        while (valid_digit(*p)) {
 8004302:	e00d      	b.n	8004320 <_atof+0x14c>
            expon = expon * 10 + (*p - '0');
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4413      	add	r3, r2
 8004316:	3b30      	subs	r3, #48	; 0x30
 8004318:	60bb      	str	r3, [r7, #8]
            p += 1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3301      	adds	r3, #1
 800431e:	607b      	str	r3, [r7, #4]
        while (valid_digit(*p)) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b2f      	cmp	r3, #47	; 0x2f
 8004326:	d903      	bls.n	8004330 <_atof+0x15c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b39      	cmp	r3, #57	; 0x39
 800432e:	d9e9      	bls.n	8004304 <_atof+0x130>
        }
        if (expon > 308)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004336:	d90e      	bls.n	8004356 <_atof+0x182>
            expon = 308;
 8004338:	f44f 739a 	mov.w	r3, #308	; 0x134
 800433c:	60bb      	str	r3, [r7, #8]

        // Calculate scaling factor.
        // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
        while (expon >=  8) {
 800433e:	e00a      	b.n	8004356 <_atof+0x182>
            scale *= 1E8f;
 8004340:	edd7 7a04 	vldr	s15, [r7, #16]
 8004344:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80043b8 <_atof+0x1e4>
 8004348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800434c:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  8;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	3b08      	subs	r3, #8
 8004354:	60bb      	str	r3, [r7, #8]
        while (expon >=  8) {
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b07      	cmp	r3, #7
 800435a:	d8f1      	bhi.n	8004340 <_atof+0x16c>
        }
        while (expon >   0) {
 800435c:	e00a      	b.n	8004374 <_atof+0x1a0>
            scale *= 10.0f;
 800435e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004362:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800436a:	edc7 7a04 	vstr	s15, [r7, #16]
            expon -=  1;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3b01      	subs	r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
        while (expon >   0) {
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f1      	bne.n	800435e <_atof+0x18a>
        }
    }

    // Return signed and scaled floating point result.
    return sign * (frac ? (value / scale) : (value * scale));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <_atof+0x1ba>
 8004380:	edd7 6a05 	vldr	s13, [r7, #20]
 8004384:	ed97 7a04 	vldr	s14, [r7, #16]
 8004388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438c:	e005      	b.n	800439a <_atof+0x1c6>
 800438e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004392:	edd7 7a04 	vldr	s15, [r7, #16]
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	ed97 7a06 	vldr	s14, [r7, #24]
 800439e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80043a2:	eeb0 0a67 	vmov.f32	s0, s15
 80043a6:	3724      	adds	r7, #36	; 0x24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	bf800000 	.word	0xbf800000
 80043b4:	41200000 	.word	0x41200000
 80043b8:	4cbebc20 	.word	0x4cbebc20

080043bc <ftoa>:

///////////////////////////////////////////////////////////////////////////////
// FTOA
///////////////////////////////////////////////////////////////////////////////
static char *ftoa(float x, char *floatString)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80043c6:	6038      	str	r0, [r7, #0]
    int32_t value;
    char intString1[12];
    char intString2[12] = { 0, };
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
    char *decimalPoint = ".";
 80043d6:	4b54      	ldr	r3, [pc, #336]	; (8004528 <ftoa+0x16c>)
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t dpLocation;

    if (x > 0)                  // Rounding for x.xxx display format
 80043da:	edd7 7a01 	vldr	s15, [r7, #4]
 80043de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	dd08      	ble.n	80043fa <ftoa+0x3e>
        x += 0.0005f;
 80043e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80043ec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800452c <ftoa+0x170>
 80043f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80043f8:	e007      	b.n	800440a <ftoa+0x4e>
    else
        x -= 0.0005f;
 80043fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80043fe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800452c <ftoa+0x170>
 8004402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004406:	edc7 7a01 	vstr	s15, [r7, #4]

    value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 800440a:	edd7 7a01 	vldr	s15, [r7, #4]
 800440e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004530 <ftoa+0x174>
 8004412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441a:	ee17 3a90 	vmov	r3, s15
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28

    itoa(abs(value), intString1, 10);   // Create string from abs of integer value
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	425b      	neglt	r3, r3
 8004428:	f107 0118 	add.w	r1, r7, #24
 800442c:	220a      	movs	r2, #10
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fea2 	bl	8004178 <itoa>

    if (value >= 0)
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	db02      	blt.n	8004440 <ftoa+0x84>
        intString2[0] = ' ';    // Positive number, add a pad space
 800443a:	2320      	movs	r3, #32
 800443c:	733b      	strb	r3, [r7, #12]
 800443e:	e001      	b.n	8004444 <ftoa+0x88>
    else
        intString2[0] = '-';    // Negative number, add a negative sign
 8004440:	232d      	movs	r3, #45	; 0x2d
 8004442:	733b      	strb	r3, [r7, #12]

    if (strlen(intString1) == 1) {
 8004444:	f107 0318 	add.w	r3, r7, #24
 8004448:	4618      	mov	r0, r3
 800444a:	f7fb fec5 	bl	80001d8 <strlen>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10e      	bne.n	8004472 <ftoa+0xb6>
        intString2[1] = '0';
 8004454:	2330      	movs	r3, #48	; 0x30
 8004456:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004458:	2330      	movs	r3, #48	; 0x30
 800445a:	73bb      	strb	r3, [r7, #14]
        intString2[3] = '0';
 800445c:	2330      	movs	r3, #48	; 0x30
 800445e:	73fb      	strb	r3, [r7, #15]
        strcat(intString2, intString1);
 8004460:	f107 0218 	add.w	r2, r7, #24
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f01e ffe4 	bl	8023438 <strcat>
 8004470:	e02f      	b.n	80044d2 <ftoa+0x116>
    } else if (strlen(intString1) == 2) {
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	4618      	mov	r0, r3
 8004478:	f7fb feae 	bl	80001d8 <strlen>
 800447c:	4603      	mov	r3, r0
 800447e:	2b02      	cmp	r3, #2
 8004480:	d10c      	bne.n	800449c <ftoa+0xe0>
        intString2[1] = '0';
 8004482:	2330      	movs	r3, #48	; 0x30
 8004484:	737b      	strb	r3, [r7, #13]
        intString2[2] = '0';
 8004486:	2330      	movs	r3, #48	; 0x30
 8004488:	73bb      	strb	r3, [r7, #14]
        strcat(intString2, intString1);
 800448a:	f107 0218 	add.w	r2, r7, #24
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f01e ffcf 	bl	8023438 <strcat>
 800449a:	e01a      	b.n	80044d2 <ftoa+0x116>
    } else if (strlen(intString1) == 3) {
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fb fe99 	bl	80001d8 <strlen>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d10a      	bne.n	80044c2 <ftoa+0x106>
        intString2[1] = '0';
 80044ac:	2330      	movs	r3, #48	; 0x30
 80044ae:	737b      	strb	r3, [r7, #13]
        strcat(intString2, intString1);
 80044b0:	f107 0218 	add.w	r2, r7, #24
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f01e ffbc 	bl	8023438 <strcat>
 80044c0:	e007      	b.n	80044d2 <ftoa+0x116>
    } else {
        strcat(intString2, intString1);
 80044c2:	f107 0218 	add.w	r2, r7, #24
 80044c6:	f107 030c 	add.w	r3, r7, #12
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f01e ffb3 	bl	8023438 <strcat>
    }

    dpLocation = strlen(intString2) - 3;
 80044d2:	f107 030c 	add.w	r3, r7, #12
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fb fe7e 	bl	80001d8 <strlen>
 80044dc:	4603      	mov	r3, r0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3b03      	subs	r3, #3
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    strncpy(floatString, intString2, dpLocation);
 80044e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	4619      	mov	r1, r3
 80044f0:	6838      	ldr	r0, [r7, #0]
 80044f2:	f01e ffe7 	bl	80234c4 <strncpy>
    floatString[dpLocation] = '\0';
 80044f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
    strcat(floatString, decimalPoint);
 8004502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004504:	6838      	ldr	r0, [r7, #0]
 8004506:	f01e ff97 	bl	8023438 <strcat>
    strcat(floatString, intString2 + dpLocation);
 800450a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800450e:	f107 020c 	add.w	r2, r7, #12
 8004512:	4413      	add	r3, r2
 8004514:	4619      	mov	r1, r3
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f01e ff8e 	bl	8023438 <strcat>

    return floatString;
 800451c:	683b      	ldr	r3, [r7, #0]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3730      	adds	r7, #48	; 0x30
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	08026d7c 	.word	0x08026d7c
 800452c:	3a03126f 	.word	0x3a03126f
 8004530:	447a0000 	.word	0x447a0000

08004534 <cliAux>:

static int cliAux(int argc, char *argv[])
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
    int i, val = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d114      	bne.n	8004572 <cliAux+0x3e>
        // print out aux channel settings
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e00d      	b.n	800456a <cliAux+0x36>
            pifLog_Printf(LT_NONE, "aux %u %u\r\n", i, cfg.activate[i]);
 800454e:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <cliAux+0x90>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3312      	adds	r3, #18
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	491a      	ldr	r1, [pc, #104]	; (80045c8 <cliAux+0x94>)
 800455e:	2000      	movs	r0, #0
 8004560:	f00f f808 	bl	8013574 <pifLog_Printf>
        for (i = 0; i < CHECKBOXITEMS; i++)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b18      	cmp	r3, #24
 800456e:	ddee      	ble.n	800454e <cliAux+0x1a>
 8004570:	e023      	b.n	80045ba <cliAux+0x86>
    } else if (argc > 1) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b01      	cmp	r3, #1
 8004576:	dd1d      	ble.n	80045b4 <cliAux+0x80>
        i = atoi(argv[0]);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f01e fddf 	bl	8023140 <atoi>
 8004582:	60f8      	str	r0, [r7, #12]
        if (i < CHECKBOXITEMS) {
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b18      	cmp	r3, #24
 8004588:	dc0e      	bgt.n	80045a8 <cliAux+0x74>
            val = atoi(argv[1]);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f01e fdd5 	bl	8023140 <atoi>
 8004596:	60b8      	str	r0, [r7, #8]
            cfg.activate[i] = val;
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	490a      	ldr	r1, [pc, #40]	; (80045c4 <cliAux+0x90>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3312      	adds	r3, #18
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	605a      	str	r2, [r3, #4]
 80045a6:	e008      	b.n	80045ba <cliAux+0x86>
        } else {
            pifLog_Printf(LT_NONE, "Invalid Feature index: must be < %u\r\n", CHECKBOXITEMS);
 80045a8:	2219      	movs	r2, #25
 80045aa:	4908      	ldr	r1, [pc, #32]	; (80045cc <cliAux+0x98>)
 80045ac:	2000      	movs	r0, #0
 80045ae:	f00e ffe1 	bl	8013574 <pifLog_Printf>
 80045b2:	e002      	b.n	80045ba <cliAux+0x86>
        }
    } else {
    	return PIF_LOG_CMD_TOO_FEW_ARGS;
 80045b4:	f06f 0302 	mvn.w	r3, #2
 80045b8:	e000      	b.n	80045bc <cliAux+0x88>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000db4 	.word	0x20000db4
 80045c8:	08026d80 	.word	0x08026d80
 80045cc:	08026d8c 	.word	0x08026d8c

080045d0 <cliCMix>:

static int cliCMix(int argc, char *argv[])
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
    int i, check = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
    int num_motors = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
    char buf[16];
    float mixsum[3];

    if (argc == 0) {
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f040 80d8 	bne.w	800479a <cliCMix+0x1ca>
        pifLog_Print(LT_NONE, "Custom mixer: \r\nMotor\tThr\tRoll\tPitch\tYaw\r\n");
 80045ea:	4999      	ldr	r1, [pc, #612]	; (8004850 <cliCMix+0x280>)
 80045ec:	2000      	movs	r0, #0
 80045ee:	f00e ff33 	bl	8013458 <pifLog_Print>
        for (i = 0; i < MAX_MOTORS; i++) {
 80045f2:	2300      	movs	r3, #0
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f6:	e069      	b.n	80046cc <cliCMix+0xfc>
            if (mcfg.customMixer[i].throttle == 0.0f)
 80045f8:	4a96      	ldr	r2, [pc, #600]	; (8004854 <cliCMix+0x284>)
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	3301      	adds	r3, #1
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4413      	add	r3, r2
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	eef5 7a40 	vcmp.f32	s15, #0.0
 800460a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460e:	d061      	beq.n	80046d4 <cliCMix+0x104>
                break;
            num_motors++;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	3301      	adds	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	3301      	adds	r3, #1
 800461a:	461a      	mov	r2, r3
 800461c:	498e      	ldr	r1, [pc, #568]	; (8004858 <cliCMix+0x288>)
 800461e:	2000      	movs	r0, #0
 8004620:	f00e ffa8 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].throttle, buf));
 8004624:	4a8b      	ldr	r2, [pc, #556]	; (8004854 <cliCMix+0x284>)
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	3301      	adds	r3, #1
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	4618      	mov	r0, r3
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	f7ff febe 	bl	80043bc <ftoa>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	4985      	ldr	r1, [pc, #532]	; (800485c <cliCMix+0x28c>)
 8004646:	2000      	movs	r0, #0
 8004648:	f00e ff94 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].roll, buf));
 800464c:	4a81      	ldr	r2, [pc, #516]	; (8004854 <cliCMix+0x284>)
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	3301      	adds	r3, #1
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	4413      	add	r3, r2
 8004656:	3304      	adds	r3, #4
 8004658:	edd3 7a00 	vldr	s15, [r3]
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	4618      	mov	r0, r3
 8004662:	eeb0 0a67 	vmov.f32	s0, s15
 8004666:	f7ff fea9 	bl	80043bc <ftoa>
 800466a:	4603      	mov	r3, r0
 800466c:	461a      	mov	r2, r3
 800466e:	497b      	ldr	r1, [pc, #492]	; (800485c <cliCMix+0x28c>)
 8004670:	2000      	movs	r0, #0
 8004672:	f00e ff7f 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\t", ftoa(mcfg.customMixer[i].pitch, buf));
 8004676:	4a77      	ldr	r2, [pc, #476]	; (8004854 <cliCMix+0x284>)
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	4413      	add	r3, r2
 800467e:	3318      	adds	r3, #24
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	4618      	mov	r0, r3
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	f7ff fe95 	bl	80043bc <ftoa>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	4971      	ldr	r1, [pc, #452]	; (800485c <cliCMix+0x28c>)
 8004698:	2000      	movs	r0, #0
 800469a:	f00e ff6b 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(mcfg.customMixer[i].yaw, buf));
 800469e:	4a6d      	ldr	r2, [pc, #436]	; (8004854 <cliCMix+0x284>)
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4413      	add	r3, r2
 80046a6:	331c      	adds	r3, #28
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	f107 0314 	add.w	r3, r7, #20
 80046b0:	4618      	mov	r0, r3
 80046b2:	eeb0 0a67 	vmov.f32	s0, s15
 80046b6:	f7ff fe81 	bl	80043bc <ftoa>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	4968      	ldr	r1, [pc, #416]	; (8004860 <cliCMix+0x290>)
 80046c0:	2000      	movs	r0, #0
 80046c2:	f00e ff57 	bl	8013574 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	3301      	adds	r3, #1
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	2b0b      	cmp	r3, #11
 80046d0:	dd92      	ble.n	80045f8 <cliCMix+0x28>
 80046d2:	e000      	b.n	80046d6 <cliCMix+0x106>
                break;
 80046d4:	bf00      	nop
        }
        mixsum[0] = mixsum[1] = mixsum[2] = 0.0f;
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60bb      	str	r3, [r7, #8]
        for (i = 0; i < num_motors; i++) {
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e8:	e02a      	b.n	8004740 <cliCMix+0x170>
            mixsum[0] += mcfg.customMixer[i].roll;
 80046ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80046ee:	4a59      	ldr	r2, [pc, #356]	; (8004854 <cliCMix+0x284>)
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	3301      	adds	r3, #1
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	4413      	add	r3, r2
 80046f8:	3304      	adds	r3, #4
 80046fa:	edd3 7a00 	vldr	s15, [r3]
 80046fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004702:	edc7 7a02 	vstr	s15, [r7, #8]
            mixsum[1] += mcfg.customMixer[i].pitch;
 8004706:	ed97 7a03 	vldr	s14, [r7, #12]
 800470a:	4a52      	ldr	r2, [pc, #328]	; (8004854 <cliCMix+0x284>)
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	4413      	add	r3, r2
 8004712:	3318      	adds	r3, #24
 8004714:	edd3 7a00 	vldr	s15, [r3]
 8004718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471c:	edc7 7a03 	vstr	s15, [r7, #12]
            mixsum[2] += mcfg.customMixer[i].yaw;
 8004720:	ed97 7a04 	vldr	s14, [r7, #16]
 8004724:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <cliCMix+0x284>)
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	4413      	add	r3, r2
 800472c:	331c      	adds	r3, #28
 800472e:	edd3 7a00 	vldr	s15, [r3]
 8004732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004736:	edc7 7a04 	vstr	s15, [r7, #16]
        for (i = 0; i < num_motors; i++) {
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	3301      	adds	r3, #1
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	429a      	cmp	r2, r3
 8004746:	dbd0      	blt.n	80046ea <cliCMix+0x11a>
        }
        pifLog_Print(LT_NONE, "Sanity check:\t");
 8004748:	4946      	ldr	r1, [pc, #280]	; (8004864 <cliCMix+0x294>)
 800474a:	2000      	movs	r0, #0
 800474c:	f00e fe84 	bl	8013458 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	e019      	b.n	800478a <cliCMix+0x1ba>
            pifLog_Print(LT_NONE, fabsf(mixsum[i]) > 0.01f ? "NG\t" : "OK\t");
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	3330      	adds	r3, #48	; 0x30
 800475c:	443b      	add	r3, r7
 800475e:	3b28      	subs	r3, #40	; 0x28
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	eef0 7ae7 	vabs.f32	s15, s15
 8004768:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004868 <cliCMix+0x298>
 800476c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	dd01      	ble.n	800477a <cliCMix+0x1aa>
 8004776:	4b3d      	ldr	r3, [pc, #244]	; (800486c <cliCMix+0x29c>)
 8004778:	e000      	b.n	800477c <cliCMix+0x1ac>
 800477a:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <cliCMix+0x2a0>)
 800477c:	4619      	mov	r1, r3
 800477e:	2000      	movs	r0, #0
 8004780:	f00e fe6a 	bl	8013458 <pifLog_Print>
        for (i = 0; i < 3; i++)
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	3301      	adds	r3, #1
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b02      	cmp	r3, #2
 800478e:	dde2      	ble.n	8004756 <cliCMix+0x186>
        pifLog_Print(LT_NONE, "\r\n");
 8004790:	4938      	ldr	r1, [pc, #224]	; (8004874 <cliCMix+0x2a4>)
 8004792:	2000      	movs	r0, #0
 8004794:	f00e fe60 	bl	8013458 <pifLog_Print>
 8004798:	e0eb      	b.n	8004972 <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4936      	ldr	r1, [pc, #216]	; (8004878 <cliCMix+0x2a8>)
 80047a0:	4618      	mov	r0, r3
 80047a2:	f01e fe2f 	bl	8023404 <strcasecmp>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d111      	bne.n	80047d0 <cliCMix+0x200>
        // erase custom mixer
        for (i = 0; i < MAX_MOTORS; i++)
 80047ac:	2300      	movs	r3, #0
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b0:	e00a      	b.n	80047c8 <cliCMix+0x1f8>
            mcfg.customMixer[i].throttle = 0.0f;
 80047b2:	4a28      	ldr	r2, [pc, #160]	; (8004854 <cliCMix+0x284>)
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	3301      	adds	r3, #1
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4413      	add	r3, r2
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++)
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	3301      	adds	r3, #1
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ca:	2b0b      	cmp	r3, #11
 80047cc:	ddf1      	ble.n	80047b2 <cliCMix+0x1e2>
 80047ce:	e0d0      	b.n	8004972 <cliCMix+0x3a2>
    } else if (strcasecmp(argv[0], "load") == 0) {
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4929      	ldr	r1, [pc, #164]	; (800487c <cliCMix+0x2ac>)
 80047d6:	4618      	mov	r0, r3
 80047d8:	f01e fe14 	bl	8023404 <strcasecmp>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d154      	bne.n	800488c <cliCMix+0x2bc>
        if (argc > 1) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	dd2f      	ble.n	8004848 <cliCMix+0x278>
            for (i = 0; ; i++) {
 80047e8:	2300      	movs	r3, #0
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <cliCMix+0x2b0>)
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <cliCMix+0x232>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 80047f8:	4922      	ldr	r1, [pc, #136]	; (8004884 <cliCMix+0x2b4>)
 80047fa:	2000      	movs	r0, #0
 80047fc:	f00e fe2c 	bl	8013458 <pifLog_Print>
                    break;
 8004800:	e0b7      	b.n	8004972 <cliCMix+0x3a2>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	491d      	ldr	r1, [pc, #116]	; (8004880 <cliCMix+0x2b0>)
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f01e fdf6 	bl	8023404 <strcasecmp>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d110      	bne.n	8004840 <cliCMix+0x270>
                    mixerLoadMix(i);
 800481e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004820:	f006 fc16 	bl	800b050 <mixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <cliCMix+0x2b0>)
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	461a      	mov	r2, r3
 800482e:	4916      	ldr	r1, [pc, #88]	; (8004888 <cliCMix+0x2b8>)
 8004830:	2000      	movs	r0, #0
 8004832:	f00e fe9f 	bl	8013574 <pifLog_Printf>
                    cliCMix(1, NULL);
 8004836:	2100      	movs	r1, #0
 8004838:	2001      	movs	r0, #1
 800483a:	f7ff fec9 	bl	80045d0 <cliCMix>
                    break;
 800483e:	e098      	b.n	8004972 <cliCMix+0x3a2>
            for (i = 0; ; i++) {
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	3301      	adds	r3, #1
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (mixerNames[i] == NULL) {
 8004846:	e7d1      	b.n	80047ec <cliCMix+0x21c>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004848:	f06f 0302 	mvn.w	r3, #2
 800484c:	e092      	b.n	8004974 <cliCMix+0x3a4>
 800484e:	bf00      	nop
 8004850:	08026db4 	.word	0x08026db4
 8004854:	20000848 	.word	0x20000848
 8004858:	08026de0 	.word	0x08026de0
 800485c:	08026de8 	.word	0x08026de8
 8004860:	08026dec 	.word	0x08026dec
 8004864:	08026df4 	.word	0x08026df4
 8004868:	3c23d70a 	.word	0x3c23d70a
 800486c:	08026e04 	.word	0x08026e04
 8004870:	08026e08 	.word	0x08026e08
 8004874:	08026e0c 	.word	0x08026e0c
 8004878:	08026e10 	.word	0x08026e10
 800487c:	08026e18 	.word	0x08026e18
 8004880:	08027cec 	.word	0x08027cec
 8004884:	08026e20 	.word	0x08026e20
 8004888:	08026e38 	.word	0x08026e38
        }
    } else {
        i = atoi(argv[0]); // get motor number
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f01e fc55 	bl	8023140 <atoi>
 8004896:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (--i < MAX_MOTORS) {
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	3b01      	subs	r3, #1
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b0b      	cmp	r3, #11
 80048a2:	dc61      	bgt.n	8004968 <cliCMix+0x398>
            if (argc > 1) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	dd11      	ble.n	80048ce <cliCMix+0x2fe>
                mcfg.customMixer[i].throttle = _atof(argv[1]);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	3304      	adds	r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fc8f 	bl	80041d4 <_atof>
 80048b6:	eef0 7a40 	vmov.f32	s15, s0
 80048ba:	4a30      	ldr	r2, [pc, #192]	; (800497c <cliCMix+0x3ac>)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	3301      	adds	r3, #1
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	4413      	add	r3, r2
 80048c4:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	3301      	adds	r3, #1
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 2) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	dd12      	ble.n	80048fa <cliCMix+0x32a>
                mcfg.customMixer[i].roll = _atof(argv[2]);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fc7a 	bl	80041d4 <_atof>
 80048e0:	eef0 7a40 	vmov.f32	s15, s0
 80048e4:	4a25      	ldr	r2, [pc, #148]	; (800497c <cliCMix+0x3ac>)
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	3301      	adds	r3, #1
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	4413      	add	r3, r2
 80048ee:	3304      	adds	r3, #4
 80048f0:	edc3 7a00 	vstr	s15, [r3]
                check++;
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	3301      	adds	r3, #1
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 3) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	dd11      	ble.n	8004924 <cliCMix+0x354>
                mcfg.customMixer[i].pitch = _atof(argv[3]);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	330c      	adds	r3, #12
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fc64 	bl	80041d4 <_atof>
 800490c:	eef0 7a40 	vmov.f32	s15, s0
 8004910:	4a1a      	ldr	r2, [pc, #104]	; (800497c <cliCMix+0x3ac>)
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	4413      	add	r3, r2
 8004918:	3318      	adds	r3, #24
 800491a:	edc3 7a00 	vstr	s15, [r3]
                check++;
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	3301      	adds	r3, #1
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (argc > 4) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b04      	cmp	r3, #4
 8004928:	dd11      	ble.n	800494e <cliCMix+0x37e>
                mcfg.customMixer[i].yaw = _atof(argv[4]);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	3310      	adds	r3, #16
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fc4f 	bl	80041d4 <_atof>
 8004936:	eef0 7a40 	vmov.f32	s15, s0
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <cliCMix+0x3ac>)
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	4413      	add	r3, r2
 8004942:	331c      	adds	r3, #28
 8004944:	edc3 7a00 	vstr	s15, [r3]
                check++;
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	3301      	adds	r3, #1
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            if (check != 4) {
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	2b04      	cmp	r3, #4
 8004952:	d004      	beq.n	800495e <cliCMix+0x38e>
                pifLog_Print(LT_NONE, "Wrong number of arguments, needs idx thr roll pitch yaw\r\n");
 8004954:	490a      	ldr	r1, [pc, #40]	; (8004980 <cliCMix+0x3b0>)
 8004956:	2000      	movs	r0, #0
 8004958:	f00e fd7e 	bl	8013458 <pifLog_Print>
 800495c:	e009      	b.n	8004972 <cliCMix+0x3a2>
            } else {
                cliCMix(1, NULL);
 800495e:	2100      	movs	r1, #0
 8004960:	2001      	movs	r0, #1
 8004962:	f7ff fe35 	bl	80045d0 <cliCMix>
 8004966:	e004      	b.n	8004972 <cliCMix+0x3a2>
            }
        } else {
            pifLog_Printf(LT_NONE, "Motor number must be between 1 and %d\r\n", MAX_MOTORS);
 8004968:	220c      	movs	r2, #12
 800496a:	4906      	ldr	r1, [pc, #24]	; (8004984 <cliCMix+0x3b4>)
 800496c:	2000      	movs	r0, #0
 800496e:	f00e fe01 	bl	8013574 <pifLog_Printf>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3730      	adds	r7, #48	; 0x30
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000848 	.word	0x20000848
 8004980:	08026e4c 	.word	0x08026e4c
 8004984:	08026e88 	.word	0x08026e88

08004988 <cliServo>:

static int cliServo(int argc, char *argv[])
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	; 0x30
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 8004992:	4aa0      	ldr	r2, [pc, #640]	; (8004c14 <cliServo+0x28c>)
 8004994:	f107 0320 	add.w	r3, r7, #32
 8004998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800499c:	e883 0003 	stmia.w	r3, {r0, r1}

    if (argc == 0) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d15c      	bne.n	8004a60 <cliServo+0xd8>
        pifLog_Print(LT_NONE, "servo servo_number\tmin\tmiddle\tmax\trate\r\n");
 80049a6:	499c      	ldr	r1, [pc, #624]	; (8004c18 <cliServo+0x290>)
 80049a8:	2000      	movs	r0, #0
 80049aa:	f00e fd55 	bl	8013458 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 80049ae:	2300      	movs	r3, #0
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b2:	e049      	b.n	8004a48 <cliServo+0xc0>
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	3301      	adds	r3, #1
 80049b8:	461a      	mov	r2, r3
 80049ba:	4998      	ldr	r1, [pc, #608]	; (8004c1c <cliServo+0x294>)
 80049bc:	2000      	movs	r0, #0
 80049be:	f00e fdd9 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].min);
 80049c2:	4997      	ldr	r1, [pc, #604]	; (8004c20 <cliServo+0x298>)
 80049c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	440b      	add	r3, r1
 80049d0:	33b8      	adds	r3, #184	; 0xb8
 80049d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d6:	461a      	mov	r2, r3
 80049d8:	4992      	ldr	r1, [pc, #584]	; (8004c24 <cliServo+0x29c>)
 80049da:	2000      	movs	r0, #0
 80049dc:	f00e fdca 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].middle);
 80049e0:	498f      	ldr	r1, [pc, #572]	; (8004c20 <cliServo+0x298>)
 80049e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	440b      	add	r3, r1
 80049ee:	33bc      	adds	r3, #188	; 0xbc
 80049f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f4:	461a      	mov	r2, r3
 80049f6:	498b      	ldr	r1, [pc, #556]	; (8004c24 <cliServo+0x29c>)
 80049f8:	2000      	movs	r0, #0
 80049fa:	f00e fdbb 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].max);
 80049fe:	4988      	ldr	r1, [pc, #544]	; (8004c20 <cliServo+0x298>)
 8004a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	440b      	add	r3, r1
 8004a0c:	33ba      	adds	r3, #186	; 0xba
 8004a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a12:	461a      	mov	r2, r3
 8004a14:	4983      	ldr	r1, [pc, #524]	; (8004c24 <cliServo+0x29c>)
 8004a16:	2000      	movs	r0, #0
 8004a18:	f00e fdac 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", cfg.servoConf[i].rate);
 8004a1c:	4980      	ldr	r1, [pc, #512]	; (8004c20 <cliServo+0x298>)
 8004a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	440b      	add	r3, r1
 8004a2a:	33be      	adds	r3, #190	; 0xbe
 8004a2c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a30:	461a      	mov	r2, r3
 8004a32:	497c      	ldr	r1, [pc, #496]	; (8004c24 <cliServo+0x29c>)
 8004a34:	2000      	movs	r0, #0
 8004a36:	f00e fd9d 	bl	8013574 <pifLog_Printf>
            pifLog_Print(LT_NONE, "\r\n");
 8004a3a:	497b      	ldr	r1, [pc, #492]	; (8004c28 <cliServo+0x2a0>)
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f00e fd0b 	bl	8013458 <pifLog_Print>
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	3301      	adds	r3, #1
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b07      	cmp	r3, #7
 8004a4c:	ddb2      	ble.n	80049b4 <cliServo+0x2c>
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004a4e:	4976      	ldr	r1, [pc, #472]	; (8004c28 <cliServo+0x2a0>)
 8004a50:	2000      	movs	r0, #0
 8004a52:	f00e fd01 	bl	8013458 <pifLog_Print>
        pifLog_Print(LT_NONE, "Reset servos: servo reset\r\n");
 8004a56:	4975      	ldr	r1, [pc, #468]	; (8004c2c <cliServo+0x2a4>)
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f00e fcfd 	bl	8013458 <pifLog_Print>
 8004a5e:	e0d4      	b.n	8004c0a <cliServo+0x282>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4972      	ldr	r1, [pc, #456]	; (8004c30 <cliServo+0x2a8>)
 8004a66:	4618      	mov	r0, r3
 8004a68:	f01e fccc 	bl	8023404 <strcasecmp>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d13a      	bne.n	8004ae8 <cliServo+0x160>
        // erase servo config
        for (i = 0; i < MAX_SERVOS; i++) {
 8004a72:	2300      	movs	r3, #0
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a76:	e033      	b.n	8004ae0 <cliServo+0x158>
            cfg.servoConf[i].min = 1020;
 8004a78:	4969      	ldr	r1, [pc, #420]	; (8004c20 <cliServo+0x298>)
 8004a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	440b      	add	r3, r1
 8004a86:	33b8      	adds	r3, #184	; 0xb8
 8004a88:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8004a8c:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = 2000;
 8004a8e:	4964      	ldr	r1, [pc, #400]	; (8004c20 <cliServo+0x298>)
 8004a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	440b      	add	r3, r1
 8004a9c:	33ba      	adds	r3, #186	; 0xba
 8004a9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004aa2:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = 1500;
 8004aa4:	495e      	ldr	r1, [pc, #376]	; (8004c20 <cliServo+0x298>)
 8004aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	440b      	add	r3, r1
 8004ab2:	33bc      	adds	r3, #188	; 0xbc
 8004ab4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004ab8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = servoRates[i];
 8004aba:	f107 0220 	add.w	r2, r7, #32
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f993 0000 	ldrsb.w	r0, [r3]
 8004ac6:	4956      	ldr	r1, [pc, #344]	; (8004c20 <cliServo+0x298>)
 8004ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	440b      	add	r3, r1
 8004ad4:	33be      	adds	r3, #190	; 0xbe
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	3301      	adds	r3, #1
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b07      	cmp	r3, #7
 8004ae4:	ddc8      	ble.n	8004a78 <cliServo+0xf0>
 8004ae6:	e090      	b.n	8004c0a <cliServo+0x282>
        }
    } else {
        enum {SERVO = 0, MIN, MIDDLE, MAX, RATE, ARGS_COUNT};
        int args[ARGS_COUNT], check = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28

        while (check < argc && check < ARGS_COUNT) {
 8004aec:	e011      	b.n	8004b12 <cliServo+0x18a>
            args[check] = atoi(argv[check]);
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f01e fb21 	bl	8023140 <atoi>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3330      	adds	r3, #48	; 0x30
 8004b06:	443b      	add	r3, r7
 8004b08:	f843 2c24 	str.w	r2, [r3, #-36]
            check++;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	3301      	adds	r3, #1
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
        while (check < argc && check < ARGS_COUNT) {
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	da02      	bge.n	8004b20 <cliServo+0x198>
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	dde6      	ble.n	8004aee <cliServo+0x166>
        }

        if (check != ARGS_COUNT) {
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	d005      	beq.n	8004b32 <cliServo+0x1aa>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs servo_number min middle max rate\r\n");
 8004b26:	4943      	ldr	r1, [pc, #268]	; (8004c34 <cliServo+0x2ac>)
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f00e fc95 	bl	8013458 <pifLog_Print>
        	return PIF_LOG_CMD_NO_ERROR;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e06c      	b.n	8004c0c <cliServo+0x284>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dd60      	ble.n	8004bfa <cliServo+0x272>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	dc5d      	bgt.n	8004bfa <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004b3e:	693b      	ldr	r3, [r7, #16]
        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS &&
 8004b40:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b44:	db59      	blt.n	8004bfa <cliServo+0x272>
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f640 0234 	movw	r2, #2100	; 0x834
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	dc54      	bgt.n	8004bfa <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004b50:	69bb      	ldr	r3, [r7, #24]
            args[MIN] >= 900 && args[MIN] <= 2100 &&
 8004b52:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b56:	db50      	blt.n	8004bfa <cliServo+0x272>
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f640 0234 	movw	r2, #2100	; 0x834
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	dc4b      	bgt.n	8004bfa <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b62:	697b      	ldr	r3, [r7, #20]
            args[MAX] >= 900 && args[MAX] <= 2100 &&
 8004b64:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b68:	db47      	blt.n	8004bfa <cliServo+0x272>
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f640 0234 	movw	r2, #2100	; 0x834
 8004b70:	4293      	cmp	r3, r2
 8004b72:	dc42      	bgt.n	8004bfa <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b74:	69fb      	ldr	r3, [r7, #28]
            args[MIDDLE] >= 900 && args[MIDDLE] <= 2100 &&
 8004b76:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004b7a:	db3e      	blt.n	8004bfa <cliServo+0x272>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	dc3b      	bgt.n	8004bfa <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	697b      	ldr	r3, [r7, #20]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 8004b86:	429a      	cmp	r2, r3
 8004b88:	dc37      	bgt.n	8004bfa <cliServo+0x272>
            args[MIN] <= args[MIDDLE] && args[MIDDLE] <= args[MAX]) {
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	dc33      	bgt.n	8004bfa <cliServo+0x272>
            args[SERVO]--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
            cfg.servoConf[args[SERVO]].min = args[MIN];
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	b218      	sxth	r0, r3
 8004b9e:	4920      	ldr	r1, [pc, #128]	; (8004c20 <cliServo+0x298>)
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	440b      	add	r3, r1
 8004baa:	33b8      	adds	r3, #184	; 0xb8
 8004bac:	4602      	mov	r2, r0
 8004bae:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].max = args[MAX];
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	b218      	sxth	r0, r3
 8004bb6:	491a      	ldr	r1, [pc, #104]	; (8004c20 <cliServo+0x298>)
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	440b      	add	r3, r1
 8004bc2:	33ba      	adds	r3, #186	; 0xba
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].middle = args[MIDDLE];
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	b218      	sxth	r0, r3
 8004bce:	4914      	ldr	r1, [pc, #80]	; (8004c20 <cliServo+0x298>)
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	440b      	add	r3, r1
 8004bda:	33bc      	adds	r3, #188	; 0xbc
 8004bdc:	4602      	mov	r2, r0
 8004bde:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[args[SERVO]].rate = args[RATE];
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	b258      	sxtb	r0, r3
 8004be6:	490e      	ldr	r1, [pc, #56]	; (8004c20 <cliServo+0x298>)
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	440b      	add	r3, r1
 8004bf2:	33be      	adds	r3, #190	; 0xbe
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e003      	b.n	8004c02 <cliServo+0x27a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments, range for min, max and middle [900,2100], min <= middle <= max, range for rate [-100,100]\r\n");
 8004bfa:	490f      	ldr	r1, [pc, #60]	; (8004c38 <cliServo+0x2b0>)
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f00e fc2b 	bl	8013458 <pifLog_Print>
        cliServo(1, NULL);
 8004c02:	2100      	movs	r1, #0
 8004c04:	2001      	movs	r0, #1
 8004c06:	f7ff febf 	bl	8004988 <cliServo>
    }
	return PIF_LOG_CMD_NO_ERROR;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3730      	adds	r7, #48	; 0x30
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	08026fc4 	.word	0x08026fc4
 8004c18:	08026eb0 	.word	0x08026eb0
 8004c1c:	08026de0 	.word	0x08026de0
 8004c20:	20000db4 	.word	0x20000db4
 8004c24:	08026edc 	.word	0x08026edc
 8004c28:	08026e0c 	.word	0x08026e0c
 8004c2c:	08026ee0 	.word	0x08026ee0
 8004c30:	08026e10 	.word	0x08026e10
 8004c34:	08026efc 	.word	0x08026efc
 8004c38:	08026f48 	.word	0x08026f48

08004c3c <cliServoMix>:

static int cliServoMix(int argc, char *argv[])
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b090      	sub	sp, #64	; 0x40
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
    int i;
    int args[8], check = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	63bb      	str	r3, [r7, #56]	; 0x38

    if (argc == 0) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f040 808a 	bne.w	8004d66 <cliServoMix+0x12a>
        pifLog_Print(LT_NONE, "Custom servo mixer: \r\nchange mixer: smix rule\ttarget_channel\tinput_channel\trate\tspeed\t\tmin\tmax\tbox\r\n");
 8004c52:	49aa      	ldr	r1, [pc, #680]	; (8004efc <cliServoMix+0x2c0>)
 8004c54:	2000      	movs	r0, #0
 8004c56:	f00e fbff 	bl	8013458 <pifLog_Print>
        pifLog_Print(LT_NONE, "reset mixer: smix reset\r\nload mixer: smix load\r\nchange direction of channel: smix direction\r\n");
 8004c5a:	49a9      	ldr	r1, [pc, #676]	; (8004f00 <cliServoMix+0x2c4>)
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f00e fbfb 	bl	8013458 <pifLog_Print>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	e074      	b.n	8004d52 <cliServoMix+0x116>
            if (mcfg.customServoMixer[i].rate == 0)
 8004c68:	49a6      	ldr	r1, [pc, #664]	; (8004f04 <cliServoMix+0x2c8>)
 8004c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	440b      	add	r3, r1
 8004c74:	33d2      	adds	r3, #210	; 0xd2
 8004c76:	f993 3000 	ldrsb.w	r3, [r3]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d06d      	beq.n	8004d5a <cliServoMix+0x11e>
                break;
            pifLog_Printf(LT_NONE, "#%d:\t", i + 1);
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	3301      	adds	r3, #1
 8004c82:	461a      	mov	r2, r3
 8004c84:	49a0      	ldr	r1, [pc, #640]	; (8004f08 <cliServoMix+0x2cc>)
 8004c86:	2000      	movs	r0, #0
 8004c88:	f00e fc74 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].targetChannel + 1);
 8004c8c:	499d      	ldr	r1, [pc, #628]	; (8004f04 <cliServoMix+0x2c8>)
 8004c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	440b      	add	r3, r1
 8004c98:	33d0      	adds	r3, #208	; 0xd0
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	499a      	ldr	r1, [pc, #616]	; (8004f0c <cliServoMix+0x2d0>)
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f00e fc66 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].fromChannel + 1);
 8004ca8:	4996      	ldr	r1, [pc, #600]	; (8004f04 <cliServoMix+0x2c8>)
 8004caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	33d1      	adds	r3, #209	; 0xd1
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4993      	ldr	r1, [pc, #588]	; (8004f0c <cliServoMix+0x2d0>)
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f00e fc58 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].rate);
 8004cc4:	498f      	ldr	r1, [pc, #572]	; (8004f04 <cliServoMix+0x2c8>)
 8004cc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	33d2      	adds	r3, #210	; 0xd2
 8004cd2:	f993 3000 	ldrsb.w	r3, [r3]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	498c      	ldr	r1, [pc, #560]	; (8004f0c <cliServoMix+0x2d0>)
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f00e fc4a 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].speed);
 8004ce0:	4988      	ldr	r1, [pc, #544]	; (8004f04 <cliServoMix+0x2c8>)
 8004ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	440b      	add	r3, r1
 8004cec:	33d3      	adds	r3, #211	; 0xd3
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4986      	ldr	r1, [pc, #536]	; (8004f0c <cliServoMix+0x2d0>)
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f00e fc3d 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].min);
 8004cfa:	4982      	ldr	r1, [pc, #520]	; (8004f04 <cliServoMix+0x2c8>)
 8004cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	440b      	add	r3, r1
 8004d06:	33d4      	adds	r3, #212	; 0xd4
 8004d08:	f993 3000 	ldrsb.w	r3, [r3]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	497f      	ldr	r1, [pc, #508]	; (8004f0c <cliServoMix+0x2d0>)
 8004d10:	2000      	movs	r0, #0
 8004d12:	f00e fc2f 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\t", mcfg.customServoMixer[i].max);
 8004d16:	497b      	ldr	r1, [pc, #492]	; (8004f04 <cliServoMix+0x2c8>)
 8004d18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	440b      	add	r3, r1
 8004d22:	33d5      	adds	r3, #213	; 0xd5
 8004d24:	f993 3000 	ldrsb.w	r3, [r3]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4978      	ldr	r1, [pc, #480]	; (8004f0c <cliServoMix+0x2d0>)
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f00e fc21 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 8004d32:	4974      	ldr	r1, [pc, #464]	; (8004f04 <cliServoMix+0x2c8>)
 8004d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	33d6      	adds	r3, #214	; 0xd6
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	4972      	ldr	r1, [pc, #456]	; (8004f10 <cliServoMix+0x2d4>)
 8004d46:	2000      	movs	r0, #0
 8004d48:	f00e fc14 	bl	8013574 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 8004d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4e:	3301      	adds	r3, #1
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	dd87      	ble.n	8004c68 <cliServoMix+0x2c>
 8004d58:	e000      	b.n	8004d5c <cliServoMix+0x120>
                break;
 8004d5a:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8004d5c:	496d      	ldr	r1, [pc, #436]	; (8004f14 <cliServoMix+0x2d8>)
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f00e fb7a 	bl	8013458 <pifLog_Print>
 8004d64:	e235      	b.n	80051d2 <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "reset") == 0) {
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	496b      	ldr	r1, [pc, #428]	; (8004f18 <cliServoMix+0x2dc>)
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f01e fb49 	bl	8023404 <strcasecmp>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d118      	bne.n	8004daa <cliServoMix+0x16e>
        // erase custom mixer
        memset(mcfg.customServoMixer, 0, sizeof(mcfg.customServoMixer));
 8004d78:	2270      	movs	r2, #112	; 0x70
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4867      	ldr	r0, [pc, #412]	; (8004f1c <cliServoMix+0x2e0>)
 8004d7e:	f01e fa33 	bl	80231e8 <memset>
        for (i = 0; i < MAX_SERVOS; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d86:	e00c      	b.n	8004da2 <cliServoMix+0x166>
            cfg.servoConf[i].direction = 0;
 8004d88:	4965      	ldr	r1, [pc, #404]	; (8004f20 <cliServoMix+0x2e4>)
 8004d8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	440b      	add	r3, r1
 8004d96:	33c0      	adds	r3, #192	; 0xc0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++)
 8004d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9e:	3301      	adds	r3, #1
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	2b07      	cmp	r3, #7
 8004da6:	ddef      	ble.n	8004d88 <cliServoMix+0x14c>
 8004da8:	e213      	b.n	80051d2 <cliServoMix+0x596>
    } else if (strcasecmp(argv[0], "load") == 0) {
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	495d      	ldr	r1, [pc, #372]	; (8004f24 <cliServoMix+0x2e8>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f01e fb27 	bl	8023404 <strcasecmp>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d135      	bne.n	8004e28 <cliServoMix+0x1ec>
        if (argc > 1) {
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	dd2f      	ble.n	8004e22 <cliServoMix+0x1e6>
            for (i = 0; ; i++) {
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004dc6:	4a58      	ldr	r2, [pc, #352]	; (8004f28 <cliServoMix+0x2ec>)
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <cliServoMix+0x1a0>
                    pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8004dd2:	4956      	ldr	r1, [pc, #344]	; (8004f2c <cliServoMix+0x2f0>)
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f00e fb3f 	bl	8013458 <pifLog_Print>
                    break;
 8004dda:	e1fa      	b.n	80051d2 <cliServoMix+0x596>
                }
                if (strcasecmp(argv[1], mixerNames[i]) == 0) {
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	3304      	adds	r3, #4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4951      	ldr	r1, [pc, #324]	; (8004f28 <cliServoMix+0x2ec>)
 8004de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f01e fb09 	bl	8023404 <strcasecmp>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d110      	bne.n	8004e1a <cliServoMix+0x1de>
                    servoMixerLoadMix(i);
 8004df8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004dfa:	f006 f8b1 	bl	800af60 <servoMixerLoadMix>
                    pifLog_Printf(LT_NONE, "Loaded %s mix...\r\n", mixerNames[i]);
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <cliServoMix+0x2ec>)
 8004e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e06:	461a      	mov	r2, r3
 8004e08:	4949      	ldr	r1, [pc, #292]	; (8004f30 <cliServoMix+0x2f4>)
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f00e fbb2 	bl	8013574 <pifLog_Printf>
                    cliServoMix(1, NULL);
 8004e10:	2100      	movs	r1, #0
 8004e12:	2001      	movs	r0, #1
 8004e14:	f7ff ff12 	bl	8004c3c <cliServoMix>
                    break;
 8004e18:	e1db      	b.n	80051d2 <cliServoMix+0x596>
            for (i = 0; ; i++) {
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (mixerNames[i] == NULL) {
 8004e20:	e7d1      	b.n	8004dc6 <cliServoMix+0x18a>
                }
            }
        }
        else {
        	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8004e22:	f06f 0302 	mvn.w	r3, #2
 8004e26:	e1d5      	b.n	80051d4 <cliServoMix+0x598>
        }
    } else if (strcasecmp(argv[0], "direction") == 0) {
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4941      	ldr	r1, [pc, #260]	; (8004f34 <cliServoMix+0x2f8>)
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f01e fae8 	bl	8023404 <strcasecmp>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 8126 	bne.w	8005088 <cliServoMix+0x44c>
        enum {SERVO = 0, INPUT_, DIRECTION, ARGS_COUNT};
        int servoIndex, channel;
        char* smix_dir[2] = { "smix", "direction" };
 8004e3c:	4a3e      	ldr	r2, [pc, #248]	; (8004f38 <cliServoMix+0x2fc>)
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e46:	e883 0003 	stmia.w	r3, {r0, r1}

        if (argc == 1) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	f040 8095 	bne.w	8004f7c <cliServoMix+0x340>
            pifLog_Print(LT_NONE, "change the direction a servo reacts to a input channel: \r\nservo input -1|1\r\n");
 8004e52:	493a      	ldr	r1, [pc, #232]	; (8004f3c <cliServoMix+0x300>)
 8004e54:	2000      	movs	r0, #0
 8004e56:	f00e faff 	bl	8013458 <pifLog_Print>
            pifLog_Print(LT_NONE, "s");
 8004e5a:	4939      	ldr	r1, [pc, #228]	; (8004f40 <cliServoMix+0x304>)
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f00e fafb 	bl	8013458 <pifLog_Print>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e62:	2300      	movs	r3, #0
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30
 8004e66:	e009      	b.n	8004e7c <cliServoMix+0x240>
                pifLog_Printf(LT_NONE, "\ti%d", channel + 1);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4935      	ldr	r1, [pc, #212]	; (8004f44 <cliServoMix+0x308>)
 8004e70:	2000      	movs	r0, #0
 8004e72:	f00e fb7f 	bl	8013574 <pifLog_Printf>
            for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	3301      	adds	r3, #1
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	2b0b      	cmp	r3, #11
 8004e80:	ddf2      	ble.n	8004e68 <cliServoMix+0x22c>
            pifLog_Print(LT_NONE, "\r\n");
 8004e82:	4924      	ldr	r1, [pc, #144]	; (8004f14 <cliServoMix+0x2d8>)
 8004e84:	2000      	movs	r0, #0
 8004e86:	f00e fae7 	bl	8013458 <pifLog_Print>

            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8e:	e02f      	b.n	8004ef0 <cliServoMix+0x2b4>
                pifLog_Printf(LT_NONE, "%d", servoIndex + 1);
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	3301      	adds	r3, #1
 8004e94:	461a      	mov	r2, r3
 8004e96:	492c      	ldr	r1, [pc, #176]	; (8004f48 <cliServoMix+0x30c>)
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f00e fb6b 	bl	8013574 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea2:	e01b      	b.n	8004edc <cliServoMix+0x2a0>
                    pifLog_Printf(LT_NONE, "\t%s  ", (cfg.servoConf[servoIndex].direction & (1 << channel)) ? "r" : "n");
 8004ea4:	491e      	ldr	r1, [pc, #120]	; (8004f20 <cliServoMix+0x2e4>)
 8004ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	440b      	add	r3, r1
 8004eb2:	33c0      	adds	r3, #192	; 0xc0
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	fa42 f303 	asr.w	r3, r2, r3
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <cliServoMix+0x28e>
 8004ec6:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <cliServoMix+0x310>)
 8004ec8:	e000      	b.n	8004ecc <cliServoMix+0x290>
 8004eca:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <cliServoMix+0x314>)
 8004ecc:	461a      	mov	r2, r3
 8004ece:	4921      	ldr	r1, [pc, #132]	; (8004f54 <cliServoMix+0x318>)
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f00e fb4f 	bl	8013574 <pifLog_Printf>
                for (channel = 0; channel < INPUT_ITEMS; channel++)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	3301      	adds	r3, #1
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	2b0b      	cmp	r3, #11
 8004ee0:	dde0      	ble.n	8004ea4 <cliServoMix+0x268>
                pifLog_Print(LT_NONE, "\r\n");
 8004ee2:	490c      	ldr	r1, [pc, #48]	; (8004f14 <cliServoMix+0x2d8>)
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f00e fab7 	bl	8013458 <pifLog_Print>
            for (servoIndex = 0; servoIndex < MAX_SERVOS; servoIndex++) {
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	3301      	adds	r3, #1
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	2b07      	cmp	r3, #7
 8004ef4:	ddcc      	ble.n	8004e90 <cliServoMix+0x254>
            }
            return PIF_LOG_CMD_NO_ERROR;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e16c      	b.n	80051d4 <cliServoMix+0x598>
 8004efa:	bf00      	nop
 8004efc:	08026fcc 	.word	0x08026fcc
 8004f00:	08027034 	.word	0x08027034
 8004f04:	20000848 	.word	0x20000848
 8004f08:	08026de0 	.word	0x08026de0
 8004f0c:	08026edc 	.word	0x08026edc
 8004f10:	08027094 	.word	0x08027094
 8004f14:	08026e0c 	.word	0x08026e0c
 8004f18:	08026e10 	.word	0x08026e10
 8004f1c:	20000918 	.word	0x20000918
 8004f20:	20000db4 	.word	0x20000db4
 8004f24:	08026e18 	.word	0x08026e18
 8004f28:	08027cec 	.word	0x08027cec
 8004f2c:	08026e20 	.word	0x08026e20
 8004f30:	08026e38 	.word	0x08026e38
 8004f34:	08026068 	.word	0x08026068
 8004f38:	080271d0 	.word	0x080271d0
 8004f3c:	0802709c 	.word	0x0802709c
 8004f40:	080270ec 	.word	0x080270ec
 8004f44:	080270f0 	.word	0x080270f0
 8004f48:	080270f8 	.word	0x080270f8
 8004f4c:	080270fc 	.word	0x080270fc
 8004f50:	08027100 	.word	0x08027100
 8004f54:	08027104 	.word	0x08027104
        }

        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	4413      	add	r3, r2
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f01e f8ec 	bl	8023140 <atoi>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	3340      	adds	r3, #64	; 0x40
 8004f70:	443b      	add	r3, r7
 8004f72:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	3301      	adds	r3, #1
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8004f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	da02      	bge.n	8004f8a <cliServoMix+0x34e>
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	dde6      	ble.n	8004f58 <cliServoMix+0x31c>
        }

        if (check != ARGS_COUNT) {
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d005      	beq.n	8004f9c <cliServoMix+0x360>
            pifLog_Print(LT_NONE, "Wrong number of arguments, needs servo input direction\r\n");
 8004f90:	4992      	ldr	r1, [pc, #584]	; (80051dc <cliServoMix+0x5a0>)
 8004f92:	2000      	movs	r0, #0
 8004f94:	f00e fa60 	bl	8013458 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e11b      	b.n	80051d4 <cliServoMix+0x598>
        }

        if (args[SERVO] >= 1 && args[SERVO] <= MAX_SERVOS && args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS && (args[DIRECTION] == -1 || args[DIRECTION] == 1)) {
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	dd55      	ble.n	800504e <cliServoMix+0x412>
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	dc52      	bgt.n	800504e <cliServoMix+0x412>
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	dd4f      	ble.n	800504e <cliServoMix+0x412>
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	dc4c      	bgt.n	800504e <cliServoMix+0x412>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d002      	beq.n	8004fc2 <cliServoMix+0x386>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d145      	bne.n	800504e <cliServoMix+0x412>
            args[SERVO] -= 1;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
            args[INPUT_] -= 1;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
            if (args[DIRECTION] == -1)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d11c      	bne.n	8005010 <cliServoMix+0x3d4>
                cfg.servoConf[args[SERVO]].direction |= 1 << args[INPUT_];
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4981      	ldr	r1, [pc, #516]	; (80051e0 <cliServoMix+0x5a4>)
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	440b      	add	r3, r1
 8004fe4:	33c0      	adds	r3, #192	; 0xc0
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2101      	movs	r1, #1
 8004fee:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	b298      	uxth	r0, r3
 8004ffc:	4978      	ldr	r1, [pc, #480]	; (80051e0 <cliServoMix+0x5a4>)
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	440b      	add	r3, r1
 8005008:	33c0      	adds	r3, #192	; 0xc0
 800500a:	4602      	mov	r2, r0
 800500c:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 800500e:	e022      	b.n	8005056 <cliServoMix+0x41a>
            else
                cfg.servoConf[args[SERVO]].direction &= ~(1 << args[INPUT_]);
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4973      	ldr	r1, [pc, #460]	; (80051e0 <cliServoMix+0x5a4>)
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	440b      	add	r3, r1
 800501e:	33c0      	adds	r3, #192	; 0xc0
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b21a      	sxth	r2, r3
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	b21b      	sxth	r3, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	b21b      	sxth	r3, r3
 8005032:	4013      	ands	r3, r2
 8005034:	b21b      	sxth	r3, r3
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	b298      	uxth	r0, r3
 800503a:	4969      	ldr	r1, [pc, #420]	; (80051e0 <cliServoMix+0x5a4>)
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	440b      	add	r3, r1
 8005046:	33c0      	adds	r3, #192	; 0xc0
 8005048:	4602      	mov	r2, r0
 800504a:	801a      	strh	r2, [r3, #0]
            if (args[DIRECTION] == -1)
 800504c:	e003      	b.n	8005056 <cliServoMix+0x41a>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 800504e:	4965      	ldr	r1, [pc, #404]	; (80051e4 <cliServoMix+0x5a8>)
 8005050:	2000      	movs	r0, #0
 8005052:	f00e fa01 	bl	8013458 <pifLog_Print>

        cliServoMix(2, smix_dir);
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4619      	mov	r1, r3
 800505c:	2002      	movs	r0, #2
 800505e:	f7ff fded 	bl	8004c3c <cliServoMix>
 8005062:	e0b6      	b.n	80051d2 <cliServoMix+0x596>
    } else {
        enum {RULE = 0, TARGET, INPUT_, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
        while (check < argc && check < ARGS_COUNT) {
            args[check] = atoi(argv[check]);
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	4413      	add	r3, r2
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f01e f866 	bl	8023140 <atoi>
 8005074:	4602      	mov	r2, r0
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	3340      	adds	r3, #64	; 0x40
 800507c:	443b      	add	r3, r7
 800507e:	f843 2c30 	str.w	r2, [r3, #-48]
            check++;
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	3301      	adds	r3, #1
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
        while (check < argc && check < ARGS_COUNT) {
 8005088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	da02      	bge.n	8005096 <cliServoMix+0x45a>
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b07      	cmp	r3, #7
 8005094:	dde6      	ble.n	8005064 <cliServoMix+0x428>
        }

        if (check != ARGS_COUNT) {
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b08      	cmp	r3, #8
 800509a:	d005      	beq.n	80050a8 <cliServoMix+0x46c>
            pifLog_Print(LT_NONE, "ERR: Wrong number of arguments, needs rule target_channel input_channel rate speed min max box\r\n");
 800509c:	4952      	ldr	r1, [pc, #328]	; (80051e8 <cliServoMix+0x5ac>)
 800509e:	2000      	movs	r0, #0
 80050a0:	f00e f9da 	bl	8013458 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e095      	b.n	80051d4 <cliServoMix+0x598>
        }

        i = args[RULE] - 1;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80050ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f2c0 808a 	blt.w	80051ca <cliServoMix+0x58e>
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	2b0f      	cmp	r3, #15
 80050ba:	f300 8086 	bgt.w	80051ca <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80050be:	697b      	ldr	r3, [r7, #20]
        if (i >= 0 && i < MAX_SERVO_RULES &&
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f340 8082 	ble.w	80051ca <cliServoMix+0x58e>
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	dc7e      	bgt.n	80051ca <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80050cc:	69bb      	ldr	r3, [r7, #24]
            args[TARGET] > 0 && args[TARGET] <= MAX_SERVOS &&
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	dd7b      	ble.n	80051ca <cliServoMix+0x58e>
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	dc78      	bgt.n	80051ca <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80050d8:	69fb      	ldr	r3, [r7, #28]
            args[INPUT_] >= 1 && args[INPUT_] <= INPUT_ITEMS &&
 80050da:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80050de:	db74      	blt.n	80051ca <cliServoMix+0x58e>
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	dc71      	bgt.n	80051ca <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80050e6:	6a3b      	ldr	r3, [r7, #32]
            args[RATE] >= -100 && args[RATE] <= 100 &&
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	db6e      	blt.n	80051ca <cliServoMix+0x58e>
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	2bff      	cmp	r3, #255	; 0xff
 80050f0:	dc6b      	bgt.n	80051ca <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	db68      	blt.n	80051ca <cliServoMix+0x58e>
            args[MIN] >= 0 && args[MIN] <= 100 &&
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	dc65      	bgt.n	80051ca <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
            args[MIN] >= 0 && args[MIN] <= 100 &&
 8005100:	2b00      	cmp	r3, #0
 8005102:	db62      	blt.n	80051ca <cliServoMix+0x58e>
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	dc5f      	bgt.n	80051ca <cliServoMix+0x58e>
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	429a      	cmp	r2, r3
 8005110:	da5b      	bge.n	80051ca <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
            args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 8005114:	2b00      	cmp	r3, #0
 8005116:	db58      	blt.n	80051ca <cliServoMix+0x58e>
            args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	2b03      	cmp	r3, #3
 800511c:	dc55      	bgt.n	80051ca <cliServoMix+0x58e>
            mcfg.customServoMixer[i].targetChannel = args[TARGET] - 1;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b2d8      	uxtb	r0, r3
 8005126:	4931      	ldr	r1, [pc, #196]	; (80051ec <cliServoMix+0x5b0>)
 8005128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	440b      	add	r3, r1
 8005132:	33d0      	adds	r3, #208	; 0xd0
 8005134:	4602      	mov	r2, r0
 8005136:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = args[INPUT_] - 1;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b2d8      	uxtb	r0, r3
 8005140:	492a      	ldr	r1, [pc, #168]	; (80051ec <cliServoMix+0x5b0>)
 8005142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	440b      	add	r3, r1
 800514c:	33d1      	adds	r3, #209	; 0xd1
 800514e:	4602      	mov	r2, r0
 8005150:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = args[RATE];
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	b258      	sxtb	r0, r3
 8005156:	4925      	ldr	r1, [pc, #148]	; (80051ec <cliServoMix+0x5b0>)
 8005158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	440b      	add	r3, r1
 8005162:	33d2      	adds	r3, #210	; 0xd2
 8005164:	4602      	mov	r2, r0
 8005166:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = args[SPEED];
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	b2d8      	uxtb	r0, r3
 800516c:	491f      	ldr	r1, [pc, #124]	; (80051ec <cliServoMix+0x5b0>)
 800516e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	440b      	add	r3, r1
 8005178:	33d3      	adds	r3, #211	; 0xd3
 800517a:	4602      	mov	r2, r0
 800517c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = args[MIN];
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	b258      	sxtb	r0, r3
 8005182:	491a      	ldr	r1, [pc, #104]	; (80051ec <cliServoMix+0x5b0>)
 8005184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	440b      	add	r3, r1
 800518e:	33d4      	adds	r3, #212	; 0xd4
 8005190:	4602      	mov	r2, r0
 8005192:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = args[MAX];
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	b258      	sxtb	r0, r3
 8005198:	4914      	ldr	r1, [pc, #80]	; (80051ec <cliServoMix+0x5b0>)
 800519a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	440b      	add	r3, r1
 80051a4:	33d5      	adds	r3, #213	; 0xd5
 80051a6:	4602      	mov	r2, r0
 80051a8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = args[BOX];
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	b2d8      	uxtb	r0, r3
 80051ae:	490f      	ldr	r1, [pc, #60]	; (80051ec <cliServoMix+0x5b0>)
 80051b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	440b      	add	r3, r1
 80051ba:	33d6      	adds	r3, #214	; 0xd6
 80051bc:	4602      	mov	r2, r0
 80051be:	701a      	strb	r2, [r3, #0]
            cliServoMix(1, NULL);
 80051c0:	2100      	movs	r1, #0
 80051c2:	2001      	movs	r0, #1
 80051c4:	f7ff fd3a 	bl	8004c3c <cliServoMix>
 80051c8:	e003      	b.n	80051d2 <cliServoMix+0x596>
        } else
            pifLog_Print(LT_NONE, "ERR: Wrong range for arguments\r\n");
 80051ca:	4906      	ldr	r1, [pc, #24]	; (80051e4 <cliServoMix+0x5a8>)
 80051cc:	2000      	movs	r0, #0
 80051ce:	f00e f943 	bl	8013458 <pifLog_Print>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3740      	adds	r7, #64	; 0x40
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	0802710c 	.word	0x0802710c
 80051e0:	20000db4 	.word	0x20000db4
 80051e4:	08027148 	.word	0x08027148
 80051e8:	0802716c 	.word	0x0802716c
 80051ec:	20000848 	.word	0x20000848

080051f0 <cliDefaults>:

static int cliDefaults(int argc, char *argv[])
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Resetting to defaults...\r\n");
 80051fa:	490b      	ldr	r1, [pc, #44]	; (8005228 <cliDefaults+0x38>)
 80051fc:	2000      	movs	r0, #0
 80051fe:	f00e f92b 	bl	8013458 <pifLog_Print>
    checkFirstTime(true);
 8005202:	2001      	movs	r0, #1
 8005204:	f001 fb04 	bl	8006810 <checkFirstTime>
    pifLog_Print(LT_NONE, "Rebooting...");
 8005208:	4908      	ldr	r1, [pc, #32]	; (800522c <cliDefaults+0x3c>)
 800520a:	2000      	movs	r0, #0
 800520c:	f00e f924 	bl	8013458 <pifLog_Print>
    pif_Delay1ms(10);
 8005210:	200a      	movs	r0, #10
 8005212:	f00c f84d 	bl	80112b0 <pif_Delay1ms>
    systemReset(false);
 8005216:	2000      	movs	r0, #0
 8005218:	f7fc ff12 	bl	8002040 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	080271d8 	.word	0x080271d8
 800522c:	080271f4 	.word	0x080271f4

08005230 <cliDump>:

static int cliDump(int argc, char *argv[])
{
 8005230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005232:	b093      	sub	sp, #76	; 0x4c
 8005234:	af04      	add	r7, sp, #16
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
    char buf[16];
    float thr, roll, pitch, yaw;
    uint32_t mask;
    const clivalue_t *setval;

    cliVersion(1, NULL);
 800523a:	2100      	movs	r1, #0
 800523c:	2001      	movs	r0, #1
 800523e:	f001 f85d 	bl	80062fc <cliVersion>
    pifLog_Print(LT_NONE, "Current Config: Copy everything below here...\r\n");
 8005242:	49bc      	ldr	r1, [pc, #752]	; (8005534 <cliDump+0x304>)
 8005244:	2000      	movs	r0, #0
 8005246:	f00e f907 	bl	8013458 <pifLog_Print>

    // print out aux switches
    cliAux(1, NULL);
 800524a:	2100      	movs	r1, #0
 800524c:	2001      	movs	r0, #1
 800524e:	f7ff f971 	bl	8004534 <cliAux>

    // print out current motor mix
    pifLog_Printf(LT_NONE, "mixer %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005252:	4bb9      	ldr	r3, [pc, #740]	; (8005538 <cliDump+0x308>)
 8005254:	795b      	ldrb	r3, [r3, #5]
 8005256:	3b01      	subs	r3, #1
 8005258:	4ab8      	ldr	r2, [pc, #736]	; (800553c <cliDump+0x30c>)
 800525a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525e:	461a      	mov	r2, r3
 8005260:	49b7      	ldr	r1, [pc, #732]	; (8005540 <cliDump+0x310>)
 8005262:	2000      	movs	r0, #0
 8005264:	f00e f986 	bl	8013574 <pifLog_Printf>

    // print custom mix if exists
    if (mcfg.customMixer[0].throttle != 0.0f) {
 8005268:	4bb3      	ldr	r3, [pc, #716]	; (8005538 <cliDump+0x308>)
 800526a:	edd3 7a04 	vldr	s15, [r3, #16]
 800526e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005276:	f000 80a4 	beq.w	80053c2 <cliDump+0x192>
        for (i = 0; i < MAX_MOTORS; i++) {
 800527a:	2300      	movs	r3, #0
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
 800527e:	e093      	b.n	80053a8 <cliDump+0x178>
            if (mcfg.customMixer[i].throttle == 0.0f)
 8005280:	4aad      	ldr	r2, [pc, #692]	; (8005538 <cliDump+0x308>)
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	3301      	adds	r3, #1
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	4413      	add	r3, r2
 800528a:	edd3 7a00 	vldr	s15, [r3]
 800528e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	f000 808c 	beq.w	80053b2 <cliDump+0x182>
                break;
            thr = mcfg.customMixer[i].throttle;
 800529a:	4aa7      	ldr	r2, [pc, #668]	; (8005538 <cliDump+0x308>)
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	3301      	adds	r3, #1
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	4413      	add	r3, r2
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            roll = mcfg.customMixer[i].roll;
 80052a8:	4aa3      	ldr	r2, [pc, #652]	; (8005538 <cliDump+0x308>)
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	3301      	adds	r3, #1
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
            pitch = mcfg.customMixer[i].pitch;
 80052b8:	4a9f      	ldr	r2, [pc, #636]	; (8005538 <cliDump+0x308>)
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	4413      	add	r3, r2
 80052c0:	3318      	adds	r3, #24
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
            yaw = mcfg.customMixer[i].yaw;
 80052c6:	4a9c      	ldr	r2, [pc, #624]	; (8005538 <cliDump+0x308>)
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	4413      	add	r3, r2
 80052ce:	331c      	adds	r3, #28
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	623b      	str	r3, [r7, #32]
            pifLog_Printf(LT_NONE, "cmix %d", i + 1);
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	3301      	adds	r3, #1
 80052d8:	461a      	mov	r2, r3
 80052da:	499a      	ldr	r1, [pc, #616]	; (8005544 <cliDump+0x314>)
 80052dc:	2000      	movs	r0, #0
 80052de:	f00e f949 	bl	8013574 <pifLog_Printf>
            if (thr < 0)
 80052e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80052e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	d503      	bpl.n	80052f8 <cliDump+0xc8>
                pifLog_Print(LT_NONE, " ");
 80052f0:	4995      	ldr	r1, [pc, #596]	; (8005548 <cliDump+0x318>)
 80052f2:	2000      	movs	r0, #0
 80052f4:	f00e f8b0 	bl	8013458 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(thr, buf));
 80052f8:	f107 0308 	add.w	r3, r7, #8
 80052fc:	4618      	mov	r0, r3
 80052fe:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8005302:	f7ff f85b 	bl	80043bc <ftoa>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	4990      	ldr	r1, [pc, #576]	; (800554c <cliDump+0x31c>)
 800530c:	2000      	movs	r0, #0
 800530e:	f00e f931 	bl	8013574 <pifLog_Printf>
            if (roll < 0)
 8005312:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	d503      	bpl.n	8005328 <cliDump+0xf8>
                pifLog_Print(LT_NONE, " ");
 8005320:	4989      	ldr	r1, [pc, #548]	; (8005548 <cliDump+0x318>)
 8005322:	2000      	movs	r0, #0
 8005324:	f00e f898 	bl	8013458 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(roll, buf));
 8005328:	f107 0308 	add.w	r3, r7, #8
 800532c:	4618      	mov	r0, r3
 800532e:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8005332:	f7ff f843 	bl	80043bc <ftoa>
 8005336:	4603      	mov	r3, r0
 8005338:	461a      	mov	r2, r3
 800533a:	4984      	ldr	r1, [pc, #528]	; (800554c <cliDump+0x31c>)
 800533c:	2000      	movs	r0, #0
 800533e:	f00e f919 	bl	8013574 <pifLog_Printf>
            if (pitch < 0)
 8005342:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800534a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534e:	d503      	bpl.n	8005358 <cliDump+0x128>
                pifLog_Print(LT_NONE, " ");
 8005350:	497d      	ldr	r1, [pc, #500]	; (8005548 <cliDump+0x318>)
 8005352:	2000      	movs	r0, #0
 8005354:	f00e f880 	bl	8013458 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s", ftoa(pitch, buf));
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4618      	mov	r0, r3
 800535e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8005362:	f7ff f82b 	bl	80043bc <ftoa>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4978      	ldr	r1, [pc, #480]	; (800554c <cliDump+0x31c>)
 800536c:	2000      	movs	r0, #0
 800536e:	f00e f901 	bl	8013574 <pifLog_Printf>
            if (yaw < 0)
 8005372:	edd7 7a08 	vldr	s15, [r7, #32]
 8005376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800537a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537e:	d503      	bpl.n	8005388 <cliDump+0x158>
                pifLog_Print(LT_NONE, " ");
 8005380:	4971      	ldr	r1, [pc, #452]	; (8005548 <cliDump+0x318>)
 8005382:	2000      	movs	r0, #0
 8005384:	f00e f868 	bl	8013458 <pifLog_Print>
            pifLog_Printf(LT_NONE, "%s\r\n", ftoa(yaw, buf));
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	4618      	mov	r0, r3
 800538e:	ed97 0a08 	vldr	s0, [r7, #32]
 8005392:	f7ff f813 	bl	80043bc <ftoa>
 8005396:	4603      	mov	r3, r0
 8005398:	461a      	mov	r2, r3
 800539a:	496d      	ldr	r1, [pc, #436]	; (8005550 <cliDump+0x320>)
 800539c:	2000      	movs	r0, #0
 800539e:	f00e f8e9 	bl	8013574 <pifLog_Printf>
        for (i = 0; i < MAX_MOTORS; i++) {
 80053a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a4:	3301      	adds	r3, #1
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	2b0b      	cmp	r3, #11
 80053ac:	f67f af68 	bls.w	8005280 <cliDump+0x50>
 80053b0:	e000      	b.n	80053b4 <cliDump+0x184>
                break;
 80053b2:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "cmix %d 0 0 0 0\r\n", i + 1);
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	3301      	adds	r3, #1
 80053b8:	461a      	mov	r2, r3
 80053ba:	4966      	ldr	r1, [pc, #408]	; (8005554 <cliDump+0x324>)
 80053bc:	2000      	movs	r0, #0
 80053be:	f00e f8d9 	bl	8013574 <pifLog_Printf>
    }

    // print custom servo mixer if exists
    if (mcfg.customServoMixer[0].rate != 0) {
 80053c2:	4b5d      	ldr	r3, [pc, #372]	; (8005538 <cliDump+0x308>)
 80053c4:	f993 30d2 	ldrsb.w	r3, [r3, #210]	; 0xd2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8084 	beq.w	80054d6 <cliDump+0x2a6>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
 80053d2:	e074      	b.n	80054be <cliDump+0x28e>
            if (mcfg.customServoMixer[i].rate == 0)
 80053d4:	4958      	ldr	r1, [pc, #352]	; (8005538 <cliDump+0x308>)
 80053d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	440b      	add	r3, r1
 80053e0:	33d2      	adds	r3, #210	; 0xd2
 80053e2:	f993 3000 	ldrsb.w	r3, [r3]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d06d      	beq.n	80054c6 <cliDump+0x296>
                break;
            pifLog_Printf(LT_NONE, "smix %d ", i + 1);
 80053ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ec:	3301      	adds	r3, #1
 80053ee:	461a      	mov	r2, r3
 80053f0:	4959      	ldr	r1, [pc, #356]	; (8005558 <cliDump+0x328>)
 80053f2:	2000      	movs	r0, #0
 80053f4:	f00e f8be 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].targetChannel + 1);
 80053f8:	494f      	ldr	r1, [pc, #316]	; (8005538 <cliDump+0x308>)
 80053fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	440b      	add	r3, r1
 8005404:	33d0      	adds	r3, #208	; 0xd0
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	461a      	mov	r2, r3
 800540c:	4953      	ldr	r1, [pc, #332]	; (800555c <cliDump+0x32c>)
 800540e:	2000      	movs	r0, #0
 8005410:	f00e f8b0 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].fromChannel + 1);
 8005414:	4948      	ldr	r1, [pc, #288]	; (8005538 <cliDump+0x308>)
 8005416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005418:	4613      	mov	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	440b      	add	r3, r1
 8005420:	33d1      	adds	r3, #209	; 0xd1
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	461a      	mov	r2, r3
 8005428:	494c      	ldr	r1, [pc, #304]	; (800555c <cliDump+0x32c>)
 800542a:	2000      	movs	r0, #0
 800542c:	f00e f8a2 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].rate);
 8005430:	4941      	ldr	r1, [pc, #260]	; (8005538 <cliDump+0x308>)
 8005432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	440b      	add	r3, r1
 800543c:	33d2      	adds	r3, #210	; 0xd2
 800543e:	f993 3000 	ldrsb.w	r3, [r3]
 8005442:	461a      	mov	r2, r3
 8005444:	4945      	ldr	r1, [pc, #276]	; (800555c <cliDump+0x32c>)
 8005446:	2000      	movs	r0, #0
 8005448:	f00e f894 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].speed);
 800544c:	493a      	ldr	r1, [pc, #232]	; (8005538 <cliDump+0x308>)
 800544e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	440b      	add	r3, r1
 8005458:	33d3      	adds	r3, #211	; 0xd3
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	493f      	ldr	r1, [pc, #252]	; (800555c <cliDump+0x32c>)
 8005460:	2000      	movs	r0, #0
 8005462:	f00e f887 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].min);
 8005466:	4934      	ldr	r1, [pc, #208]	; (8005538 <cliDump+0x308>)
 8005468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	440b      	add	r3, r1
 8005472:	33d4      	adds	r3, #212	; 0xd4
 8005474:	f993 3000 	ldrsb.w	r3, [r3]
 8005478:	461a      	mov	r2, r3
 800547a:	4938      	ldr	r1, [pc, #224]	; (800555c <cliDump+0x32c>)
 800547c:	2000      	movs	r0, #0
 800547e:	f00e f879 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d ", mcfg.customServoMixer[i].max);
 8005482:	492d      	ldr	r1, [pc, #180]	; (8005538 <cliDump+0x308>)
 8005484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	440b      	add	r3, r1
 800548e:	33d5      	adds	r3, #213	; 0xd5
 8005490:	f993 3000 	ldrsb.w	r3, [r3]
 8005494:	461a      	mov	r2, r3
 8005496:	4931      	ldr	r1, [pc, #196]	; (800555c <cliDump+0x32c>)
 8005498:	2000      	movs	r0, #0
 800549a:	f00e f86b 	bl	8013574 <pifLog_Printf>
            pifLog_Printf(LT_NONE, "%d\r\n", mcfg.customServoMixer[i].box);
 800549e:	4926      	ldr	r1, [pc, #152]	; (8005538 <cliDump+0x308>)
 80054a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a2:	4613      	mov	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	440b      	add	r3, r1
 80054aa:	33d6      	adds	r3, #214	; 0xd6
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	492b      	ldr	r1, [pc, #172]	; (8005560 <cliDump+0x330>)
 80054b2:	2000      	movs	r0, #0
 80054b4:	f00e f85e 	bl	8013574 <pifLog_Printf>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	3301      	adds	r3, #1
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2b0f      	cmp	r3, #15
 80054c2:	d987      	bls.n	80053d4 <cliDump+0x1a4>
 80054c4:	e000      	b.n	80054c8 <cliDump+0x298>
                break;
 80054c6:	bf00      	nop
        }
        pifLog_Printf(LT_NONE, "smix %d 0 0 0 0\r\n", i + 1);
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	3301      	adds	r3, #1
 80054cc:	461a      	mov	r2, r3
 80054ce:	4925      	ldr	r1, [pc, #148]	; (8005564 <cliDump+0x334>)
 80054d0:	2000      	movs	r0, #0
 80054d2:	f00e f84f 	bl	8013574 <pifLog_Printf>
    }

    // print servo directions
    for (i = 0; i < MAX_SERVOS; i++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	637b      	str	r3, [r7, #52]	; 0x34
 80054da:	e024      	b.n	8005526 <cliDump+0x2f6>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 80054dc:	2300      	movs	r3, #0
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
 80054e0:	e01b      	b.n	800551a <cliDump+0x2ea>
            if (cfg.servoConf[i].direction & (1 << channel))
 80054e2:	4921      	ldr	r1, [pc, #132]	; (8005568 <cliDump+0x338>)
 80054e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	440b      	add	r3, r1
 80054f0:	33c0      	adds	r3, #192	; 0xc0
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	fa42 f303 	asr.w	r3, r2, r3
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <cliDump+0x2e4>
                pifLog_Printf(LT_NONE, "smix direction %d %d -1\r\n", i + 1 , channel + 1);
 8005504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	3301      	adds	r3, #1
 800550c:	4917      	ldr	r1, [pc, #92]	; (800556c <cliDump+0x33c>)
 800550e:	2000      	movs	r0, #0
 8005510:	f00e f830 	bl	8013574 <pifLog_Printf>
        for (channel = 0; channel < INPUT_ITEMS; channel++)
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	3301      	adds	r3, #1
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2b0b      	cmp	r3, #11
 800551e:	d9e0      	bls.n	80054e2 <cliDump+0x2b2>
    for (i = 0; i < MAX_SERVOS; i++)
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	3301      	adds	r3, #1
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	2b07      	cmp	r3, #7
 800552a:	d9d7      	bls.n	80054dc <cliDump+0x2ac>

    // print servo config
    for (i = 0; i < MAX_SERVOS; i++)
 800552c:	2300      	movs	r3, #0
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
 8005530:	e057      	b.n	80055e2 <cliDump+0x3b2>
 8005532:	bf00      	nop
 8005534:	08027204 	.word	0x08027204
 8005538:	20000848 	.word	0x20000848
 800553c:	08027cec 	.word	0x08027cec
 8005540:	08027234 	.word	0x08027234
 8005544:	08027240 	.word	0x08027240
 8005548:	08027248 	.word	0x08027248
 800554c:	0802724c 	.word	0x0802724c
 8005550:	08026dec 	.word	0x08026dec
 8005554:	08027250 	.word	0x08027250
 8005558:	08027264 	.word	0x08027264
 800555c:	08027270 	.word	0x08027270
 8005560:	08027094 	.word	0x08027094
 8005564:	08027274 	.word	0x08027274
 8005568:	20000db4 	.word	0x20000db4
 800556c:	08027288 	.word	0x08027288
        pifLog_Printf(LT_NONE, "servo %d %d %d %d %d\r\n", i + 1, cfg.servoConf[i].min, cfg.servoConf[i].middle, cfg.servoConf[i].max, cfg.servoConf[i].rate);
 8005570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	4863      	ldr	r0, [pc, #396]	; (8005704 <cliDump+0x4d4>)
 8005576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4403      	add	r3, r0
 8005582:	33b8      	adds	r3, #184	; 0xb8
 8005584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005588:	461e      	mov	r6, r3
 800558a:	485e      	ldr	r0, [pc, #376]	; (8005704 <cliDump+0x4d4>)
 800558c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4403      	add	r3, r0
 8005598:	33bc      	adds	r3, #188	; 0xbc
 800559a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800559e:	461c      	mov	r4, r3
 80055a0:	4858      	ldr	r0, [pc, #352]	; (8005704 <cliDump+0x4d4>)
 80055a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	4403      	add	r3, r0
 80055ae:	33ba      	adds	r3, #186	; 0xba
 80055b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055b4:	461d      	mov	r5, r3
 80055b6:	4853      	ldr	r0, [pc, #332]	; (8005704 <cliDump+0x4d4>)
 80055b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4403      	add	r3, r0
 80055c4:	33be      	adds	r3, #190	; 0xbe
 80055c6:	f993 3000 	ldrsb.w	r3, [r3]
 80055ca:	9302      	str	r3, [sp, #8]
 80055cc:	9501      	str	r5, [sp, #4]
 80055ce:	9400      	str	r4, [sp, #0]
 80055d0:	4633      	mov	r3, r6
 80055d2:	460a      	mov	r2, r1
 80055d4:	494c      	ldr	r1, [pc, #304]	; (8005708 <cliDump+0x4d8>)
 80055d6:	2000      	movs	r0, #0
 80055d8:	f00d ffcc 	bl	8013574 <pifLog_Printf>
    for (i = 0; i < MAX_SERVOS; i++)
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	3301      	adds	r3, #1
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	2b07      	cmp	r3, #7
 80055e6:	d9c3      	bls.n	8005570 <cliDump+0x340>

    // print enabled features
    mask = featureMask();
 80055e8:	f001 fcba 	bl	8006f60 <featureMask>
 80055ec:	61f8      	str	r0, [r7, #28]
    for (i = 0; ; i++) { // disable all feature first
 80055ee:	2300      	movs	r3, #0
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 80055f2:	4a46      	ldr	r2, [pc, #280]	; (800570c <cliDump+0x4dc>)
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <cliDump+0x3e8>
            break;
        pifLog_Printf(LT_NONE, "feature -%s\r\n", featureNames[i]);
 80055fe:	4a43      	ldr	r2, [pc, #268]	; (800570c <cliDump+0x4dc>)
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005606:	461a      	mov	r2, r3
 8005608:	4941      	ldr	r1, [pc, #260]	; (8005710 <cliDump+0x4e0>)
 800560a:	2000      	movs	r0, #0
 800560c:	f00d ffb2 	bl	8013574 <pifLog_Printf>
    for (i = 0; ; i++) { // disable all feature first
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	3301      	adds	r3, #1
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005616:	e7ec      	b.n	80055f2 <cliDump+0x3c2>
            break;
 8005618:	bf00      	nop
    }
    for (i = 0; ; i++) {  // reenable what we want.
 800561a:	2300      	movs	r3, #0
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 800561e:	4a3b      	ldr	r2, [pc, #236]	; (800570c <cliDump+0x4dc>)
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d015      	beq.n	8005656 <cliDump+0x426>
            break;
        if (mask & (1 << i))
 800562a:	2201      	movs	r2, #1
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	461a      	mov	r2, r3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <cliDump+0x41e>
            pifLog_Printf(LT_NONE, "feature %s\r\n", featureNames[i]);
 800563c:	4a33      	ldr	r2, [pc, #204]	; (800570c <cliDump+0x4dc>)
 800563e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	461a      	mov	r2, r3
 8005646:	4933      	ldr	r1, [pc, #204]	; (8005714 <cliDump+0x4e4>)
 8005648:	2000      	movs	r0, #0
 800564a:	f00d ff93 	bl	8013574 <pifLog_Printf>
    for (i = 0; ; i++) {  // reenable what we want.
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005650:	3301      	adds	r3, #1
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
        if (featureNames[i] == NULL)
 8005654:	e7e3      	b.n	800561e <cliDump+0x3ee>
            break;
 8005656:	bf00      	nop
    }

    // print RC MAPPING
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005658:	2300      	movs	r3, #0
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
 800565c:	e012      	b.n	8005684 <cliDump+0x454>
        buf[mcfg.rcmap[i]] = rcChannelLetters[i];
 800565e:	4a2e      	ldr	r2, [pc, #184]	; (8005718 <cliDump+0x4e8>)
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	4413      	add	r3, r2
 8005664:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4a2b      	ldr	r2, [pc, #172]	; (800571c <cliDump+0x4ec>)
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	4413      	add	r3, r2
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8005678:	443b      	add	r3, r7
 800567a:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	3301      	adds	r3, #1
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <cliDump+0x4e8>)
 8005686:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800568a:	461a      	mov	r2, r3
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568e:	4293      	cmp	r3, r2
 8005690:	d3e5      	bcc.n	800565e <cliDump+0x42e>
    buf[i] = '\0';
 8005692:	f107 0208 	add.w	r2, r7, #8
 8005696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005698:	4413      	add	r3, r2
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "map %s\r\n", buf);
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	461a      	mov	r2, r3
 80056a4:	491e      	ldr	r1, [pc, #120]	; (8005720 <cliDump+0x4f0>)
 80056a6:	2000      	movs	r0, #0
 80056a8:	f00d ff64 	bl	8013574 <pifLog_Printf>

    // print settings
    for (i = 0; i < VALUE_COUNT; i++) {
 80056ac:	2300      	movs	r3, #0
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
 80056b0:	e01f      	b.n	80056f2 <cliDump+0x4c2>
        setval = &valueTable[i];
 80056b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <cliDump+0x4f4>)
 80056be:	4413      	add	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        pifLog_Printf(LT_NONE, "set %s = ", valueTable[i].name);
 80056c2:	4918      	ldr	r1, [pc, #96]	; (8005724 <cliDump+0x4f4>)
 80056c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	4914      	ldr	r1, [pc, #80]	; (8005728 <cliDump+0x4f8>)
 80056d6:	2000      	movs	r0, #0
 80056d8:	f00d ff4c 	bl	8013574 <pifLog_Printf>
        cliPrintVar(setval, 0);
 80056dc:	2100      	movs	r1, #0
 80056de:	69b8      	ldr	r0, [r7, #24]
 80056e0:	f000 fb4a 	bl	8005d78 <cliPrintVar>
        pifLog_Print(LT_NONE, "\r\n");
 80056e4:	4911      	ldr	r1, [pc, #68]	; (800572c <cliDump+0x4fc>)
 80056e6:	2000      	movs	r0, #0
 80056e8:	f00d feb6 	bl	8013458 <pifLog_Print>
    for (i = 0; i < VALUE_COUNT; i++) {
 80056ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ee:	3301      	adds	r3, #1
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	2b8e      	cmp	r3, #142	; 0x8e
 80056f6:	d9dc      	bls.n	80056b2 <cliDump+0x482>
    }
	return PIF_LOG_CMD_NO_ERROR;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	373c      	adds	r7, #60	; 0x3c
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005702:	bf00      	nop
 8005704:	20000db4 	.word	0x20000db4
 8005708:	080272a4 	.word	0x080272a4
 800570c:	08027d50 	.word	0x08027d50
 8005710:	080272bc 	.word	0x080272bc
 8005714:	080272cc 	.word	0x080272cc
 8005718:	20000848 	.word	0x20000848
 800571c:	08028a48 	.word	0x08028a48
 8005720:	080272dc 	.word	0x080272dc
 8005724:	08027f1c 	.word	0x08027f1c
 8005728:	080272e8 	.word	0x080272e8
 800572c:	08026e0c 	.word	0x08026e0c

08005730 <cliExit>:

static int cliExit(int argc, char *argv[])
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
    pifLog_Print(LT_NONE, "\r\nLeaving CLI mode...\r\n");
 800573a:	490c      	ldr	r1, [pc, #48]	; (800576c <cliExit+0x3c>)
 800573c:	2000      	movs	r0, #0
 800573e:	f00d fe8b 	bl	8013458 <pifLog_Print>
    *cliBuffer = '\0';
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <cliExit+0x40>)
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
    bufferIndex = 0;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <cliExit+0x44>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
    cliMode = 0;
 800574e:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <cliExit+0x48>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
    // incase some idiot leaves a motor running during motortest, clear it here
    mixerResetMotors();
 8005754:	f005 fbda 	bl	800af0c <mixerResetMotors>
    // save and reboot... I think this makes the most sense
    cliSave(argc, argv);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 faec 	bl	8005d38 <cliSave>
	return PIF_LOG_CMD_NO_ERROR;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	080272f4 	.word	0x080272f4
 8005770:	20000814 	.word	0x20000814
 8005774:	20000844 	.word	0x20000844
 8005778:	20000810 	.word	0x20000810

0800577c <cliFeature>:

static int cliFeature(int argc, char *argv[])
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t mask;

    mask = featureMask();
 8005786:	f001 fbeb 	bl	8006f60 <featureMask>
 800578a:	60f8      	str	r0, [r7, #12]

    if (argc == 0) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d127      	bne.n	80057e2 <cliFeature+0x66>
        pifLog_Print(LT_NONE, "Enabled features: ");
 8005792:	4950      	ldr	r1, [pc, #320]	; (80058d4 <cliFeature+0x158>)
 8005794:	2000      	movs	r0, #0
 8005796:	f00d fe5f 	bl	8013458 <pifLog_Print>
        for (i = 0; ; i++) {
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 800579e:	4a4e      	ldr	r2, [pc, #312]	; (80058d8 <cliFeature+0x15c>)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d015      	beq.n	80057d6 <cliFeature+0x5a>
                break;
            if (mask & (1 << i))
 80057aa:	2201      	movs	r2, #1
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <cliFeature+0x52>
                pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 80057bc:	4a46      	ldr	r2, [pc, #280]	; (80058d8 <cliFeature+0x15c>)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4945      	ldr	r1, [pc, #276]	; (80058dc <cliFeature+0x160>)
 80057c8:	2000      	movs	r0, #0
 80057ca:	f00d fed3 	bl	8013574 <pifLog_Printf>
        for (i = 0; ; i++) {
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3301      	adds	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 80057d4:	e7e3      	b.n	800579e <cliFeature+0x22>
                break;
 80057d6:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 80057d8:	4941      	ldr	r1, [pc, #260]	; (80058e0 <cliFeature+0x164>)
 80057da:	2000      	movs	r0, #0
 80057dc:	f00d fe3c 	bl	8013458 <pifLog_Print>
 80057e0:	e073      	b.n	80058ca <cliFeature+0x14e>
    } else if (strcasecmp(argv[0], "list") == 0) {
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	493f      	ldr	r1, [pc, #252]	; (80058e4 <cliFeature+0x168>)
 80057e8:	4618      	mov	r0, r3
 80057ea:	f01d fe0b 	bl	8023404 <strcasecmp>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11e      	bne.n	8005832 <cliFeature+0xb6>
        pifLog_Print(LT_NONE, "Available features: ");
 80057f4:	493c      	ldr	r1, [pc, #240]	; (80058e8 <cliFeature+0x16c>)
 80057f6:	2000      	movs	r0, #0
 80057f8:	f00d fe2e 	bl	8013458 <pifLog_Print>
        for (i = 0; ; i++) {
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <cliFeature+0x15c>)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00c      	beq.n	8005826 <cliFeature+0xaa>
                break;
            pifLog_Printf(LT_NONE, "%s ", featureNames[i]);
 800580c:	4a32      	ldr	r2, [pc, #200]	; (80058d8 <cliFeature+0x15c>)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	461a      	mov	r2, r3
 8005816:	4931      	ldr	r1, [pc, #196]	; (80058dc <cliFeature+0x160>)
 8005818:	2000      	movs	r0, #0
 800581a:	f00d feab 	bl	8013574 <pifLog_Printf>
        for (i = 0; ; i++) {
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	3301      	adds	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL)
 8005824:	e7ec      	b.n	8005800 <cliFeature+0x84>
                break;
 8005826:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005828:	492d      	ldr	r1, [pc, #180]	; (80058e0 <cliFeature+0x164>)
 800582a:	2000      	movs	r0, #0
 800582c:	f00d fe14 	bl	8013458 <pifLog_Print>
 8005830:	e04b      	b.n	80058ca <cliFeature+0x14e>
    } else {
        bool remove = false;
 8005832:	2300      	movs	r3, #0
 8005834:	74fb      	strb	r3, [r7, #19]
        if (argv[0][0] == '-') {
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b2d      	cmp	r3, #45	; 0x2d
 800583e:	d101      	bne.n	8005844 <cliFeature+0xc8>
            // remove feature
            remove = true;
 8005840:	2301      	movs	r3, #1
 8005842:	74fb      	strb	r3, [r7, #19]
        }

        for (i = 0; ; i++) {
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 8005848:	4a23      	ldr	r2, [pc, #140]	; (80058d8 <cliFeature+0x15c>)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <cliFeature+0xe2>
                pifLog_Print(LT_NONE, "Invalid feature name...\r\n");
 8005854:	4925      	ldr	r1, [pc, #148]	; (80058ec <cliFeature+0x170>)
 8005856:	2000      	movs	r0, #0
 8005858:	f00d fdfe 	bl	8013458 <pifLog_Print>
                break;
 800585c:	e035      	b.n	80058ca <cliFeature+0x14e>
            }
            if (strcasecmp(argv[0] + 1, featureNames[i]) == 0) {
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	491c      	ldr	r1, [pc, #112]	; (80058d8 <cliFeature+0x15c>)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800586c:	4619      	mov	r1, r3
 800586e:	4610      	mov	r0, r2
 8005870:	f01d fdc8 	bl	8023404 <strcasecmp>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d123      	bne.n	80058c2 <cliFeature+0x146>
                if (remove) {
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <cliFeature+0x11c>
                    featureClear(1 << i);
 8005880:	2201      	movs	r2, #1
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	4618      	mov	r0, r3
 800588a:	f001 fb49 	bl	8006f20 <featureClear>
                    pifLog_Print(LT_NONE, "Disabled ");
 800588e:	4918      	ldr	r1, [pc, #96]	; (80058f0 <cliFeature+0x174>)
 8005890:	2000      	movs	r0, #0
 8005892:	f00d fde1 	bl	8013458 <pifLog_Print>
 8005896:	e00a      	b.n	80058ae <cliFeature+0x132>
                } else {
                    featureSet(1 << i);
 8005898:	2201      	movs	r2, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fb2b 	bl	8006efc <featureSet>
                    pifLog_Print(LT_NONE, "Enabled ");
 80058a6:	4913      	ldr	r1, [pc, #76]	; (80058f4 <cliFeature+0x178>)
 80058a8:	2000      	movs	r0, #0
 80058aa:	f00d fdd5 	bl	8013458 <pifLog_Print>
                }
                pifLog_Printf(LT_NONE, "%s\r\n", featureNames[i]);
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <cliFeature+0x15c>)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b6:	461a      	mov	r2, r3
 80058b8:	490f      	ldr	r1, [pc, #60]	; (80058f8 <cliFeature+0x17c>)
 80058ba:	2000      	movs	r0, #0
 80058bc:	f00d fe5a 	bl	8013574 <pifLog_Printf>
                break;
 80058c0:	e003      	b.n	80058ca <cliFeature+0x14e>
        for (i = 0; ; i++) {
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	3301      	adds	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
            if (featureNames[i] == NULL) {
 80058c8:	e7be      	b.n	8005848 <cliFeature+0xcc>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	0802730c 	.word	0x0802730c
 80058d8:	08027d50 	.word	0x08027d50
 80058dc:	08027320 	.word	0x08027320
 80058e0:	08026e0c 	.word	0x08026e0c
 80058e4:	08027324 	.word	0x08027324
 80058e8:	0802732c 	.word	0x0802732c
 80058ec:	08027344 	.word	0x08027344
 80058f0:	08027360 	.word	0x08027360
 80058f4:	0802736c 	.word	0x0802736c
 80058f8:	08026dec 	.word	0x08026dec

080058fc <cliGpsPassthrough>:

#ifdef GPS
static int cliGpsPassthrough(int argc, char *argv[])
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;

    switch (gpsSetPassthrough()) {
 8005906:	f003 f9b5 	bl	8008c74 <gpsSetPassthrough>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <cliGpsPassthrough+0x1a>
 8005910:	2b01      	cmp	r3, #1
 8005912:	d005      	beq.n	8005920 <cliGpsPassthrough+0x24>
 8005914:	e009      	b.n	800592a <cliGpsPassthrough+0x2e>
    case 0:
        pifLog_Print(LT_NONE, "Disabling GPS passthrough...\r\n");
 8005916:	490a      	ldr	r1, [pc, #40]	; (8005940 <cliGpsPassthrough+0x44>)
 8005918:	2000      	movs	r0, #0
 800591a:	f00d fd9d 	bl	8013458 <pifLog_Print>
        break;
 800591e:	e009      	b.n	8005934 <cliGpsPassthrough+0x38>

    case 1:
        pifLog_Print(LT_NONE, "Enabling GPS passthrough...\r\n");
 8005920:	4908      	ldr	r1, [pc, #32]	; (8005944 <cliGpsPassthrough+0x48>)
 8005922:	2000      	movs	r0, #0
 8005924:	f00d fd98 	bl	8013458 <pifLog_Print>
        break;
 8005928:	e004      	b.n	8005934 <cliGpsPassthrough+0x38>

    default:
        pifLog_Print(LT_NONE, "Error: Enable and plug in GPS first\r\n");
 800592a:	4907      	ldr	r1, [pc, #28]	; (8005948 <cliGpsPassthrough+0x4c>)
 800592c:	2000      	movs	r0, #0
 800592e:	f00d fd93 	bl	8013458 <pifLog_Print>
        break;
 8005932:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08027378 	.word	0x08027378
 8005944:	08027398 	.word	0x08027398
 8005948:	080273b8 	.word	0x080273b8

0800594c <cliMap>:
#endif

static int cliMap(int argc, char *argv[])
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
    uint32_t len;
    uint32_t i;
    char out[9];

    if (argc < 1) return PIF_LOG_CMD_TOO_FEW_ARGS;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	dc02      	bgt.n	8005962 <cliMap+0x16>
 800595c:	f06f 0302 	mvn.w	r3, #2
 8005960:	e096      	b.n	8005a90 <cliMap+0x144>

    len = strlen(argv[0]);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fc36 	bl	80001d8 <strlen>
 800596c:	61b8      	str	r0, [r7, #24]

    if (len == mcfg.rc_channel_count) {
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <cliMap+0x14c>)
 8005970:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005974:	461a      	mov	r2, r3
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	4293      	cmp	r3, r2
 800597a:	d15a      	bne.n	8005a32 <cliMap+0xe6>
        // uppercase it
        for (i = 0; i < mcfg.rc_channel_count; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e01b      	b.n	80059ba <cliMap+0x6e>
            argv[0][i] = toupper((unsigned char)argv[0][i]);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	75fb      	strb	r3, [r7, #23]
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	3301      	adds	r3, #1
 8005992:	4a42      	ldr	r2, [pc, #264]	; (8005a9c <cliMap+0x150>)
 8005994:	4413      	add	r3, r2
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d102      	bne.n	80059a6 <cliMap+0x5a>
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	3b20      	subs	r3, #32
 80059a4:	e000      	b.n	80059a8 <cliMap+0x5c>
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	6811      	ldr	r1, [r2, #0]
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	7013      	strb	r3, [r2, #0]
        for (i = 0; i < mcfg.rc_channel_count; i++)
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <cliMap+0x14c>)
 80059bc:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 80059c0:	461a      	mov	r2, r3
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d3dc      	bcc.n	8005982 <cliMap+0x36>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 80059c8:	2300      	movs	r3, #0
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e025      	b.n	8005a1a <cliMap+0xce>
            if (strchr(rcChannelLetters, argv[0][i]) && !strchr(argv[0] + i + 1, argv[0][i]))
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	4831      	ldr	r0, [pc, #196]	; (8005aa0 <cliMap+0x154>)
 80059dc:	f01d fd3b 	bl	8023456 <strchr>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d013      	beq.n	8005a0e <cliMap+0xc2>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3301      	adds	r3, #1
 80059ee:	18d0      	adds	r0, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	4619      	mov	r1, r3
 80059fc:	f01d fd2b 	bl	8023456 <strchr>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <cliMap+0xc2>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	e005      	b.n	8005a1a <cliMap+0xce>
                continue;
            pifLog_Print(LT_NONE, "Must be any order of AETR1234\r\n");
 8005a0e:	4925      	ldr	r1, [pc, #148]	; (8005aa4 <cliMap+0x158>)
 8005a10:	2000      	movs	r0, #0
 8005a12:	f00d fd21 	bl	8013458 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e03a      	b.n	8005a90 <cliMap+0x144>
        for (i = 0; i < mcfg.rc_channel_count; i++) {
 8005a1a:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <cliMap+0x14c>)
 8005a1c:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a20:	461a      	mov	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d3d2      	bcc.n	80059ce <cliMap+0x82>
        }
        parseRcChannels(argv[0]);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fcc3 	bl	80063b8 <parseRcChannels>
    }
    pifLog_Print(LT_NONE, "Current assignment: ");
 8005a32:	491d      	ldr	r1, [pc, #116]	; (8005aa8 <cliMap+0x15c>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	f00d fd0f 	bl	8013458 <pifLog_Print>
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e012      	b.n	8005a66 <cliMap+0x11a>
        out[mcfg.rcmap[i]] = rcChannelLetters[i];
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <cliMap+0x14c>)
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <cliMap+0x154>)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	f101 0320 	add.w	r3, r1, #32
 8005a5a:	443b      	add	r3, r7
 8005a5c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i = 0; i < mcfg.rc_channel_count; i++)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3301      	adds	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <cliMap+0x14c>)
 8005a68:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d3e5      	bcc.n	8005a40 <cliMap+0xf4>
    out[i] = '\0';
 8005a74:	f107 020c 	add.w	r2, r7, #12
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
    pifLog_Printf(LT_NONE, "%s\r\n", out);
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	461a      	mov	r2, r3
 8005a86:	4909      	ldr	r1, [pc, #36]	; (8005aac <cliMap+0x160>)
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f00d fd73 	bl	8013574 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3720      	adds	r7, #32
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000848 	.word	0x20000848
 8005a9c:	080293b8 	.word	0x080293b8
 8005aa0:	08028a48 	.word	0x08028a48
 8005aa4:	080273e0 	.word	0x080273e0
 8005aa8:	08027400 	.word	0x08027400
 8005aac:	08026dec 	.word	0x08026dec

08005ab0 <cliMixer>:

static int cliMixer(int argc, char *argv[])
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10c      	bne.n	8005ada <cliMixer+0x2a>
        pifLog_Printf(LT_NONE, "Current mixer: %s\r\n", mixerNames[mcfg.mixerConfiguration - 1]);
 8005ac0:	4b46      	ldr	r3, [pc, #280]	; (8005bdc <cliMixer+0x12c>)
 8005ac2:	795b      	ldrb	r3, [r3, #5]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4a46      	ldr	r2, [pc, #280]	; (8005be0 <cliMixer+0x130>)
 8005ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005acc:	461a      	mov	r2, r3
 8005ace:	4945      	ldr	r1, [pc, #276]	; (8005be4 <cliMixer+0x134>)
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f00d fd4f 	bl	8013574 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e07b      	b.n	8005bd2 <cliMixer+0x122>
    } else if (strcasecmp(argv[0], "list") == 0) {
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4942      	ldr	r1, [pc, #264]	; (8005be8 <cliMixer+0x138>)
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f01d fc8f 	bl	8023404 <strcasecmp>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11f      	bne.n	8005b2c <cliMixer+0x7c>
        pifLog_Print(LT_NONE, "Available mixers: ");
 8005aec:	493f      	ldr	r1, [pc, #252]	; (8005bec <cliMixer+0x13c>)
 8005aee:	2000      	movs	r0, #0
 8005af0:	f00d fcb2 	bl	8013458 <pifLog_Print>
        for (i = 0; ; i++) {
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005af8:	4a39      	ldr	r2, [pc, #228]	; (8005be0 <cliMixer+0x130>)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <cliMixer+0x6e>
                break;
            pifLog_Printf(LT_NONE, "%s ", mixerNames[i]);
 8005b04:	4a36      	ldr	r2, [pc, #216]	; (8005be0 <cliMixer+0x130>)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4938      	ldr	r1, [pc, #224]	; (8005bf0 <cliMixer+0x140>)
 8005b10:	2000      	movs	r0, #0
 8005b12:	f00d fd2f 	bl	8013574 <pifLog_Printf>
        for (i = 0; ; i++) {
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	60fb      	str	r3, [r7, #12]
            if (mixerNames[i] == NULL)
 8005b1c:	e7ec      	b.n	8005af8 <cliMixer+0x48>
                break;
 8005b1e:	bf00      	nop
        }
        pifLog_Print(LT_NONE, "\r\n");
 8005b20:	4934      	ldr	r1, [pc, #208]	; (8005bf4 <cliMixer+0x144>)
 8005b22:	2000      	movs	r0, #0
 8005b24:	f00d fc98 	bl	8013458 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e052      	b.n	8005bd2 <cliMixer+0x122>
    }

    for (i = 0; ; i++) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005b30:	4a2b      	ldr	r2, [pc, #172]	; (8005be0 <cliMixer+0x130>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <cliMixer+0x98>
            pifLog_Print(LT_NONE, "Invalid mixer type...\r\n");
 8005b3c:	492e      	ldr	r1, [pc, #184]	; (8005bf8 <cliMixer+0x148>)
 8005b3e:	2000      	movs	r0, #0
 8005b40:	f00d fc8a 	bl	8013458 <pifLog_Print>
            return PIF_LOG_CMD_NO_ERROR;
 8005b44:	2300      	movs	r3, #0
 8005b46:	e044      	b.n	8005bd2 <cliMixer+0x122>
        }
        if (strcasecmp(argv[0], mixerNames[i]) == 0) {
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4924      	ldr	r1, [pc, #144]	; (8005be0 <cliMixer+0x130>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f01d fc54 	bl	8023404 <strcasecmp>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d131      	bne.n	8005bc6 <cliMixer+0x116>
            mcfg.mixerConfiguration = i + 1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <cliMixer+0x12c>)
 8005b6c:	715a      	strb	r2, [r3, #5]
            pifLog_Printf(LT_NONE, "Mixer set to %s\r\n", mixerNames[i]);
 8005b6e:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <cliMixer+0x130>)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b76:	461a      	mov	r2, r3
 8005b78:	4920      	ldr	r1, [pc, #128]	; (8005bfc <cliMixer+0x14c>)
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f00d fcfa 	bl	8013574 <pifLog_Printf>

            // Presets for planes. Not functional with current reset
            // Really Ugly Hack
            if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE) {
 8005b80:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <cliMixer+0x12c>)
 8005b82:	795b      	ldrb	r3, [r3, #5]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d003      	beq.n	8005b90 <cliMixer+0xe0>
 8005b88:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <cliMixer+0x12c>)
 8005b8a:	795b      	ldrb	r3, [r3, #5]
 8005b8c:	2b0e      	cmp	r3, #14
 8005b8e:	d11e      	bne.n	8005bce <cliMixer+0x11e>
                cfg.dynThrPID = 90;
 8005b90:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <cliMixer+0x150>)
 8005b92:	225a      	movs	r2, #90	; 0x5a
 8005b94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
                cfg.rcExpo8 = 0;
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <cliMixer+0x150>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2020 	strb.w	r2, [r3, #32]
                cfg.P8[PIDALT] = 30;
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <cliMixer+0x150>)
 8005ba2:	221e      	movs	r2, #30
 8005ba4:	711a      	strb	r2, [r3, #4]
                cfg.I8[PIDALT] = 20;
 8005ba6:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <cliMixer+0x150>)
 8005ba8:	2214      	movs	r2, #20
 8005baa:	739a      	strb	r2, [r3, #14]
                cfg.D8[PIDALT] = 45;
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <cliMixer+0x150>)
 8005bae:	222d      	movs	r2, #45	; 0x2d
 8005bb0:	761a      	strb	r2, [r3, #24]
                cfg.P8[PIDNAVR] = 30;
 8005bb2:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <cliMixer+0x150>)
 8005bb4:	221e      	movs	r2, #30
 8005bb6:	71da      	strb	r2, [r3, #7]
                cfg.I8[PIDNAVR] = 20;
 8005bb8:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <cliMixer+0x150>)
 8005bba:	2214      	movs	r2, #20
 8005bbc:	745a      	strb	r2, [r3, #17]
                cfg.D8[PIDNAVR] = 45;
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <cliMixer+0x150>)
 8005bc0:	222d      	movs	r2, #45	; 0x2d
 8005bc2:	76da      	strb	r2, [r3, #27]
            }
            break;
 8005bc4:	e003      	b.n	8005bce <cliMixer+0x11e>
    for (i = 0; ; i++) {
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
        if (mixerNames[i] == NULL) {
 8005bcc:	e7b0      	b.n	8005b30 <cliMixer+0x80>
            break;
 8005bce:	bf00      	nop
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000848 	.word	0x20000848
 8005be0:	08027cec 	.word	0x08027cec
 8005be4:	08027418 	.word	0x08027418
 8005be8:	08027324 	.word	0x08027324
 8005bec:	0802742c 	.word	0x0802742c
 8005bf0:	08027320 	.word	0x08027320
 8005bf4:	08026e0c 	.word	0x08026e0c
 8005bf8:	08026e20 	.word	0x08026e20
 8005bfc:	08027440 	.word	0x08027440
 8005c00:	20000db4 	.word	0x20000db4

08005c04 <cliMotor>:

static int cliMotor(int argc, char *argv[])
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
    int motor_index = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
    int motor_value = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]

    if (argc == 0) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d105      	bne.n	8005c28 <cliMotor+0x24>
        pifLog_Print(LT_NONE, "Usage:\r\nmotor index [value] - show [or set] motor value\r\n");
 8005c1c:	4926      	ldr	r1, [pc, #152]	; (8005cb8 <cliMotor+0xb4>)
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f00d fc1a 	bl	8013458 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e042      	b.n	8005cae <cliMotor+0xaa>
    }

    if (argc < 2) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	dc0a      	bgt.n	8005c44 <cliMotor+0x40>
        pifLog_Printf(LT_NONE, "Motor %d is set at %d\r\n", motor_index, motor_disarmed[motor_index]);
 8005c2e:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <cliMotor+0xb8>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4921      	ldr	r1, [pc, #132]	; (8005cc0 <cliMotor+0xbc>)
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f00d fc9a 	bl	8013574 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e034      	b.n	8005cae <cliMotor+0xaa>
    }

    motor_index = atoi(argv[0]);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f01d fa79 	bl	8023140 <atoi>
 8005c4e:	60f8      	str	r0, [r7, #12]
    motor_value = atoi(argv[1]);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	3304      	adds	r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f01d fa72 	bl	8023140 <atoi>
 8005c5c:	60b8      	str	r0, [r7, #8]

    if (motor_index < 0 || motor_index >= MAX_MOTORS) {
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	db02      	blt.n	8005c6a <cliMotor+0x66>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b0b      	cmp	r3, #11
 8005c68:	dd06      	ble.n	8005c78 <cliMotor+0x74>
        pifLog_Printf(LT_NONE, "No such motor, use a number [0, %d]\r\n", MAX_MOTORS);
 8005c6a:	220c      	movs	r2, #12
 8005c6c:	4915      	ldr	r1, [pc, #84]	; (8005cc4 <cliMotor+0xc0>)
 8005c6e:	2000      	movs	r0, #0
 8005c70:	f00d fc80 	bl	8013574 <pifLog_Printf>
        return PIF_LOG_CMD_NO_ERROR;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e01a      	b.n	8005cae <cliMotor+0xaa>
    }

    if (motor_value < 1000 || motor_value > 2000) {
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c7e:	db03      	blt.n	8005c88 <cliMotor+0x84>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c86:	dd05      	ble.n	8005c94 <cliMotor+0x90>
        pifLog_Print(LT_NONE, "Invalid motor value, 1000..2000\r\n");
 8005c88:	490f      	ldr	r1, [pc, #60]	; (8005cc8 <cliMotor+0xc4>)
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f00d fbe4 	bl	8013458 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e00c      	b.n	8005cae <cliMotor+0xaa>
    }

    pifLog_Printf(LT_NONE, "Setting motor %d to %d\r\n", motor_index, motor_value);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	490c      	ldr	r1, [pc, #48]	; (8005ccc <cliMotor+0xc8>)
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f00d fc6a 	bl	8013574 <pifLog_Printf>
    motor_disarmed[motor_index] = motor_value;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	b219      	sxth	r1, r3
 8005ca4:	4a05      	ldr	r2, [pc, #20]	; (8005cbc <cliMotor+0xb8>)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	return PIF_LOG_CMD_NO_ERROR;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08027454 	.word	0x08027454
 8005cbc:	20001530 	.word	0x20001530
 8005cc0:	08027490 	.word	0x08027490
 8005cc4:	080274a8 	.word	0x080274a8
 8005cc8:	080274d0 	.word	0x080274d0
 8005ccc:	080274f4 	.word	0x080274f4

08005cd0 <cliProfile>:

static int cliProfile(int argc, char *argv[])
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
    int i;

    if (argc == 0) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <cliProfile+0x22>
        pifLog_Printf(LT_NONE, "Current profile: %d\r\n", mcfg.current_profile);
 8005ce0:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <cliProfile+0x60>)
 8005ce2:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4912      	ldr	r1, [pc, #72]	; (8005d34 <cliProfile+0x64>)
 8005cea:	2000      	movs	r0, #0
 8005cec:	f00d fc42 	bl	8013574 <pifLog_Printf>
 8005cf0:	e018      	b.n	8005d24 <cliProfile+0x54>
    } else {
        i = atoi(argv[0]);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f01d fa22 	bl	8023140 <atoi>
 8005cfc:	60f8      	str	r0, [r7, #12]
        if (i >= 0 && i <= 2) {
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	db0f      	blt.n	8005d24 <cliProfile+0x54>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	dc0c      	bgt.n	8005d24 <cliProfile+0x54>
            mcfg.current_profile = i;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <cliProfile+0x60>)
 8005d10:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            writeEEPROM(0, false);
 8005d14:	2100      	movs	r1, #0
 8005d16:	2000      	movs	r0, #0
 8005d18:	f000 fcf8 	bl	800670c <writeEEPROM>
            cliProfile(1, NULL);
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	2001      	movs	r0, #1
 8005d20:	f7ff ffd6 	bl	8005cd0 <cliProfile>
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000848 	.word	0x20000848
 8005d34:	08027510 	.word	0x08027510

08005d38 <cliSave>:

static int cliSave(int argc, char *argv[])
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Print(LT_NONE, "Saving...");
 8005d42:	490b      	ldr	r1, [pc, #44]	; (8005d70 <cliSave+0x38>)
 8005d44:	2000      	movs	r0, #0
 8005d46:	f00d fb87 	bl	8013458 <pifLog_Print>
    writeEEPROM(0, true);
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	f000 fcdd 	bl	800670c <writeEEPROM>
    pifLog_Print(LT_NONE, "\r\nRebooting...");
 8005d52:	4908      	ldr	r1, [pc, #32]	; (8005d74 <cliSave+0x3c>)
 8005d54:	2000      	movs	r0, #0
 8005d56:	f00d fb7f 	bl	8013458 <pifLog_Print>
    pif_Delay1ms(10);
 8005d5a:	200a      	movs	r0, #10
 8005d5c:	f00b faa8 	bl	80112b0 <pif_Delay1ms>
    systemReset(false);
 8005d60:	2000      	movs	r0, #0
 8005d62:	f7fc f96d 	bl	8002040 <systemReset>
	return PIF_LOG_CMD_NO_ERROR;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	08027528 	.word	0x08027528
 8005d74:	08027534 	.word	0x08027534

08005d78 <cliPrintVar>:

static void cliPrintVar(const clivalue_t *var, uint32_t full)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
    int32_t value = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
    char buf[8];

    switch (var->type) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d864      	bhi.n	8005e58 <cliPrintVar+0xe0>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <cliPrintVar+0x1c>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dad 	.word	0x08005dad
 8005d98:	08005db7 	.word	0x08005db7
 8005d9c:	08005dc3 	.word	0x08005dc3
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	08005dd9 	.word	0x08005dd9
 8005da8:	08005de3 	.word	0x08005de3
        case VAR_UINT8:
            value = *(uint8_t *)var->ptr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	617b      	str	r3, [r7, #20]
            break;
 8005db4:	e050      	b.n	8005e58 <cliPrintVar+0xe0>

        case VAR_INT8:
            value = *(int8_t *)var->ptr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f993 3000 	ldrsb.w	r3, [r3]
 8005dbe:	617b      	str	r3, [r7, #20]
            break;
 8005dc0:	e04a      	b.n	8005e58 <cliPrintVar+0xe0>

        case VAR_UINT16:
            value = *(uint16_t *)var->ptr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	617b      	str	r3, [r7, #20]
            break;
 8005dca:	e045      	b.n	8005e58 <cliPrintVar+0xe0>

        case VAR_INT16:
            value = *(int16_t *)var->ptr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dd4:	617b      	str	r3, [r7, #20]
            break;
 8005dd6:	e03f      	b.n	8005e58 <cliPrintVar+0xe0>

        case VAR_UINT32:
            value = *(uint32_t *)var->ptr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]
            break;
 8005de0:	e03a      	b.n	8005e58 <cliPrintVar+0xe0>

        case VAR_FLOAT:
            pifLog_Printf(LT_NONE, "%s", ftoa(*(float *)var->ptr, buf));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	edd3 7a00 	vldr	s15, [r3]
 8005dea:	f107 030c 	add.w	r3, r7, #12
 8005dee:	4618      	mov	r0, r3
 8005df0:	eeb0 0a67 	vmov.f32	s0, s15
 8005df4:	f7fe fae2 	bl	80043bc <ftoa>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4921      	ldr	r1, [pc, #132]	; (8005e84 <cliPrintVar+0x10c>)
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f00d fbb8 	bl	8013574 <pifLog_Printf>
            if (full) {
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d037      	beq.n	8005e7a <cliPrintVar+0x102>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->min, buf));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e16:	f107 030c 	add.w	r3, r7, #12
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8005e20:	f7fe facc 	bl	80043bc <ftoa>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	4917      	ldr	r1, [pc, #92]	; (8005e88 <cliPrintVar+0x110>)
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f00d fba2 	bl	8013574 <pifLog_Printf>
                pifLog_Printf(LT_NONE, " %s", ftoa((float)var->max, buf));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	ee07 3a90 	vmov	s15, r3
 8005e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	4618      	mov	r0, r3
 8005e42:	eeb0 0a67 	vmov.f32	s0, s15
 8005e46:	f7fe fab9 	bl	80043bc <ftoa>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	490e      	ldr	r1, [pc, #56]	; (8005e88 <cliPrintVar+0x110>)
 8005e50:	2000      	movs	r0, #0
 8005e52:	f00d fb8f 	bl	8013574 <pifLog_Printf>
 8005e56:	e011      	b.n	8005e7c <cliPrintVar+0x104>
            }
            return; // return from case for float only
    }
    pifLog_Printf(LT_NONE, "%d", value);
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	490c      	ldr	r1, [pc, #48]	; (8005e8c <cliPrintVar+0x114>)
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f00d fb89 	bl	8013574 <pifLog_Printf>
    if (full)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <cliPrintVar+0x104>
        pifLog_Printf(LT_NONE, " %d %d", var->min, var->max);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	4907      	ldr	r1, [pc, #28]	; (8005e90 <cliPrintVar+0x118>)
 8005e72:	2000      	movs	r0, #0
 8005e74:	f00d fb7e 	bl	8013574 <pifLog_Printf>
 8005e78:	e000      	b.n	8005e7c <cliPrintVar+0x104>
            return; // return from case for float only
 8005e7a:	bf00      	nop
}
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0802724c 	.word	0x0802724c
 8005e88:	08027544 	.word	0x08027544
 8005e8c:	080270f8 	.word	0x080270f8
 8005e90:	08027548 	.word	0x08027548

08005e94 <cliSetVar>:

static void cliSetVar(const clivalue_t *var, const int_float_value_t value)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
    switch (var->type) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	791b      	ldrb	r3, [r3, #4]
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d824      	bhi.n	8005ef0 <cliSetVar+0x5c>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <cliSetVar+0x18>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ec5 	.word	0x08005ec5
 8005eb0:	08005ec5 	.word	0x08005ec5
 8005eb4:	08005ed1 	.word	0x08005ed1
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005ee7 	.word	0x08005ee7
        case VAR_UINT8:
        case VAR_INT8:
            *(char *)var->ptr = (char)value.int_value;
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]
            break;
 8005ece:	e00f      	b.n	8005ef0 <cliSetVar+0x5c>

        case VAR_UINT16:
        case VAR_INT16:
            *(short *)var->ptr = (short)value.int_value;
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	b212      	sxth	r2, r2
 8005ed8:	801a      	strh	r2, [r3, #0]
            break;
 8005eda:	e009      	b.n	8005ef0 <cliSetVar+0x5c>

        case VAR_UINT32:
            *(int *)var->ptr = (int)value.int_value;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	601a      	str	r2, [r3, #0]
            break;
 8005ee4:	e004      	b.n	8005ef0 <cliSetVar+0x5c>

        case VAR_FLOAT:
            *(float *)var->ptr = (float)value.float_value;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	601a      	str	r2, [r3, #0]
            break;
 8005eee:	bf00      	nop
    }
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <cliSet>:

static int cliSet(int argc, char *argv[])
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
    uint32_t i;
    const clivalue_t *val;
    char *eqptr = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
    int32_t value = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
    float valuef = 0;
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]

    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <cliSet+0x2e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d135      	bne.n	8005f8c <cliSet+0x90>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b2a      	cmp	r3, #42	; 0x2a
 8005f28:	d130      	bne.n	8005f8c <cliSet+0x90>
        pifLog_Print(LT_NONE, "Current settings: \r\n");
 8005f2a:	4987      	ldr	r1, [pc, #540]	; (8006148 <cliSet+0x24c>)
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f00d fa93 	bl	8013458 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	e025      	b.n	8005f84 <cliSet+0x88>
            val = &valueTable[i];
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4a82      	ldr	r2, [pc, #520]	; (800614c <cliSet+0x250>)
 8005f44:	4413      	add	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
            pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8005f48:	4980      	ldr	r1, [pc, #512]	; (800614c <cliSet+0x250>)
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	497d      	ldr	r1, [pc, #500]	; (8006150 <cliSet+0x254>)
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f00d fb09 	bl	8013574 <pifLog_Printf>
            cliPrintVar(val, strlen(argv[0])); // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa f936 	bl	80001d8 <strlen>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff ff01 	bl	8005d78 <cliPrintVar>
            pifLog_Print(LT_NONE, "\r\n");
 8005f76:	4977      	ldr	r1, [pc, #476]	; (8006154 <cliSet+0x258>)
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f00d fa6d 	bl	8013458 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b8e      	cmp	r3, #142	; 0x8e
 8005f88:	d9d6      	bls.n	8005f38 <cliSet+0x3c>
    if (argc == 0 || (argc == 1 && argv[0][0] == '*')) {
 8005f8a:	e0d7      	b.n	800613c <cliSet+0x240>
        }
    } else if ((eqptr = strstr(argv[0], "=")) != NULL) {
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	213d      	movs	r1, #61	; 0x3d
 8005f92:	4618      	mov	r0, r3
 8005f94:	f01d fa5f 	bl	8023456 <strchr>
 8005f98:	61b8      	str	r0, [r7, #24]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8096 	beq.w	80060ce <cliSet+0x1d2>
        // has equal, set var
        eqptr++;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61bb      	str	r3, [r7, #24]
        value = atoi(eqptr);
 8005fa8:	69b8      	ldr	r0, [r7, #24]
 8005faa:	f01d f8c9 	bl	8023140 <atoi>
 8005fae:	6178      	str	r0, [r7, #20]
        valuef = _atof(eqptr);
 8005fb0:	69b8      	ldr	r0, [r7, #24]
 8005fb2:	f7fe f90f 	bl	80041d4 <_atof>
 8005fb6:	ed87 0a04 	vstr	s0, [r7, #16]
        for (i = 0; i < VALUE_COUNT; i++) {
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	e07c      	b.n	80060ba <cliSet+0x1be>
            val = &valueTable[i];
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4a60      	ldr	r2, [pc, #384]	; (800614c <cliSet+0x250>)
 8005fcc:	4413      	add	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
            if (strncasecmp(argv[0], valueTable[i].name, strlen(valueTable[i].name)) == 0) {
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681c      	ldr	r4, [r3, #0]
 8005fd4:	495d      	ldr	r1, [pc, #372]	; (800614c <cliSet+0x250>)
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	681d      	ldr	r5, [r3, #0]
 8005fe4:	4959      	ldr	r1, [pc, #356]	; (800614c <cliSet+0x250>)
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa f8ef 	bl	80001d8 <strlen>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4629      	mov	r1, r5
 8006000:	4620      	mov	r0, r4
 8006002:	f01d fa3d 	bl	8023480 <strncasecmp>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d153      	bne.n	80060b4 <cliSet+0x1b8>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 800600c:	494f      	ldr	r1, [pc, #316]	; (800614c <cliSet+0x250>)
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	330c      	adds	r3, #12
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006026:	ed97 7a04 	vldr	s14, [r7, #16]
 800602a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800602e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006032:	db39      	blt.n	80060a8 <cliSet+0x1ac>
 8006034:	4945      	ldr	r1, [pc, #276]	; (800614c <cliSet+0x250>)
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	3310      	adds	r3, #16
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800604e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605a:	d825      	bhi.n	80060a8 <cliSet+0x1ac>
                    int_float_value_t tmp;
                    if (valueTable[i].type == VAR_FLOAT)
 800605c:	493b      	ldr	r1, [pc, #236]	; (800614c <cliSet+0x250>)
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	3304      	adds	r3, #4
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b05      	cmp	r3, #5
 8006070:	d102      	bne.n	8006078 <cliSet+0x17c>
                        tmp.float_value = valuef;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	e001      	b.n	800607c <cliSet+0x180>
                    else
                        tmp.int_value = value;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	60bb      	str	r3, [r7, #8]
                    cliSetVar(val, tmp);
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff ff08 	bl	8005e94 <cliSetVar>
                    pifLog_Printf(LT_NONE, "%s set to ", valueTable[i].name);
 8006084:	4931      	ldr	r1, [pc, #196]	; (800614c <cliSet+0x250>)
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	4930      	ldr	r1, [pc, #192]	; (8006158 <cliSet+0x25c>)
 8006098:	2000      	movs	r0, #0
 800609a:	f00d fa6b 	bl	8013574 <pifLog_Printf>
                    cliPrintVar(val, 0);
 800609e:	2100      	movs	r1, #0
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff fe69 	bl	8005d78 <cliPrintVar>
                if (valuef >= valueTable[i].min && valuef <= valueTable[i].max) { // here we compare the float value since... it should work, RIGHT?
 80060a6:	e003      	b.n	80060b0 <cliSet+0x1b4>
                } else {
                    pifLog_Print(LT_NONE, "ERR: Value assignment out of range\r\n");
 80060a8:	492c      	ldr	r1, [pc, #176]	; (800615c <cliSet+0x260>)
 80060aa:	2000      	movs	r0, #0
 80060ac:	f00d f9d4 	bl	8013458 <pifLog_Print>
                }
                return PIF_LOG_CMD_NO_ERROR;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e044      	b.n	800613e <cliSet+0x242>
        for (i = 0; i < VALUE_COUNT; i++) {
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b8e      	cmp	r3, #142	; 0x8e
 80060be:	f67f af7f 	bls.w	8005fc0 <cliSet+0xc4>
            }
        }
        pifLog_Print(LT_NONE, "ERR: Unknown variable name\r\n");
 80060c2:	4927      	ldr	r1, [pc, #156]	; (8006160 <cliSet+0x264>)
 80060c4:	2000      	movs	r0, #0
 80060c6:	f00d f9c7 	bl	8013458 <pifLog_Print>
        return PIF_LOG_CMD_NO_ERROR;
 80060ca:	2300      	movs	r3, #0
 80060cc:	e037      	b.n	800613e <cliSet+0x242>
    } else {
        // no equals, check for matching variables.
        for (i = 0; i < VALUE_COUNT; i++) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e030      	b.n	8006136 <cliSet+0x23a>
            if (strstr(valueTable[i].name, argv[0])) {
 80060d4:	491d      	ldr	r1, [pc, #116]	; (800614c <cliSet+0x250>)
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f01d f9fd 	bl	80234ea <strstr>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01c      	beq.n	8006130 <cliSet+0x234>
                val = &valueTable[i];
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4a12      	ldr	r2, [pc, #72]	; (800614c <cliSet+0x250>)
 8006102:	4413      	add	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
                pifLog_Printf(LT_NONE, "%s = ", valueTable[i].name);
 8006106:	4911      	ldr	r1, [pc, #68]	; (800614c <cliSet+0x250>)
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	490d      	ldr	r1, [pc, #52]	; (8006150 <cliSet+0x254>)
 800611a:	2000      	movs	r0, #0
 800611c:	f00d fa2a 	bl	8013574 <pifLog_Printf>
                cliPrintVar(val, 0);
 8006120:	2100      	movs	r1, #0
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff fe28 	bl	8005d78 <cliPrintVar>
                pifLog_Print(LT_NONE, "\r\n");
 8006128:	490a      	ldr	r1, [pc, #40]	; (8006154 <cliSet+0x258>)
 800612a:	2000      	movs	r0, #0
 800612c:	f00d f994 	bl	8013458 <pifLog_Print>
        for (i = 0; i < VALUE_COUNT; i++) {
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	2b8e      	cmp	r3, #142	; 0x8e
 800613a:	d9cb      	bls.n	80060d4 <cliSet+0x1d8>
            }
        }
    }
	return PIF_LOG_CMD_NO_ERROR;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bdb0      	pop	{r4, r5, r7, pc}
 8006146:	bf00      	nop
 8006148:	08027550 	.word	0x08027550
 800614c:	08027f1c 	.word	0x08027f1c
 8006150:	08027568 	.word	0x08027568
 8006154:	08026e0c 	.word	0x08026e0c
 8006158:	08027570 	.word	0x08027570
 800615c:	0802757c 	.word	0x0802757c
 8006160:	080275a4 	.word	0x080275a4

08006164 <cliStatus>:

static int cliStatus(int argc, char *argv[])
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af02      	add	r7, sp, #8
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    uint8_t i;
    uint32_t mask;

    pifLog_Printf(LT_NONE, "System Uptime: %ld seconds, Voltage: %d * 0.1V (%dS battery)\r\n",
 800616e:	4b4d      	ldr	r3, [pc, #308]	; (80062a4 <cliStatus+0x140>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a4d      	ldr	r2, [pc, #308]	; (80062a8 <cliStatus+0x144>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	099a      	lsrs	r2, r3, #6
 800617a:	4b4c      	ldr	r3, [pc, #304]	; (80062ac <cliStatus+0x148>)
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	4b4b      	ldr	r3, [pc, #300]	; (80062b0 <cliStatus+0x14c>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	460b      	mov	r3, r1
 8006188:	494a      	ldr	r1, [pc, #296]	; (80062b4 <cliStatus+0x150>)
 800618a:	2000      	movs	r0, #0
 800618c:	f00d f9f2 	bl	8013574 <pifLog_Printf>
           pif_cumulative_timer1ms / 1000, vbat, batteryCellCount);
    mask = sensorsMask();
 8006190:	f000 fe92 	bl	8006eb8 <sensorsMask>
 8006194:	60b8      	str	r0, [r7, #8]

    pifLog_Printf(LT_NONE, "Hardware: %s @ %ldMHz, detected sensors: ", g_board_name, (g_core_clock / 1000000));
 8006196:	4b48      	ldr	r3, [pc, #288]	; (80062b8 <cliStatus+0x154>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a48      	ldr	r2, [pc, #288]	; (80062bc <cliStatus+0x158>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	0c9b      	lsrs	r3, r3, #18
 80061a2:	4a47      	ldr	r2, [pc, #284]	; (80062c0 <cliStatus+0x15c>)
 80061a4:	4947      	ldr	r1, [pc, #284]	; (80062c4 <cliStatus+0x160>)
 80061a6:	2000      	movs	r0, #0
 80061a8:	f00d f9e4 	bl	8013574 <pifLog_Printf>
    for (i = 0; ; i++) {
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4a45      	ldr	r2, [pc, #276]	; (80062c8 <cliStatus+0x164>)
 80061b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d015      	beq.n	80061e8 <cliStatus+0x84>
            break;
        if (mask & (1 << i))
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2201      	movs	r2, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d008      	beq.n	80061e0 <cliStatus+0x7c>
            pifLog_Printf(LT_NONE, "%s ", sensorNames[i]);
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	4a3d      	ldr	r2, [pc, #244]	; (80062c8 <cliStatus+0x164>)
 80061d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d6:	461a      	mov	r2, r3
 80061d8:	493c      	ldr	r1, [pc, #240]	; (80062cc <cliStatus+0x168>)
 80061da:	2000      	movs	r0, #0
 80061dc:	f00d f9ca 	bl	8013574 <pifLog_Printf>
    for (i = 0; ; i++) {
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
 80061e2:	3301      	adds	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
        if (sensorNames[i] == NULL)
 80061e6:	e7e3      	b.n	80061b0 <cliStatus+0x4c>
            break;
 80061e8:	bf00      	nop
    }
    pifLog_Print(LT_NONE, "\r\n");
 80061ea:	4939      	ldr	r1, [pc, #228]	; (80062d0 <cliStatus+0x16c>)
 80061ec:	2000      	movs	r0, #0
 80061ee:	f00d f933 	bl	8013458 <pifLog_Print>
    if (sensors(SENSOR_GYRO))
 80061f2:	2001      	movs	r0, #1
 80061f4:	f000 fe24 	bl	8006e40 <sensors>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d006      	beq.n	800620c <cliStatus+0xa8>
        pifLog_Printf(LT_NONE, "GYRO_HW: %s ", sensor_set.gyro.hardware);
 80061fe:	4b35      	ldr	r3, [pc, #212]	; (80062d4 <cliStatus+0x170>)
 8006200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006202:	461a      	mov	r2, r3
 8006204:	4934      	ldr	r1, [pc, #208]	; (80062d8 <cliStatus+0x174>)
 8006206:	2000      	movs	r0, #0
 8006208:	f00d f9b4 	bl	8013574 <pifLog_Printf>
    if (sensors(SENSOR_ACC))
 800620c:	2002      	movs	r0, #2
 800620e:	f000 fe17 	bl	8006e40 <sensors>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <cliStatus+0xc4>
        pifLog_Printf(LT_NONE, "ACC_HW: %s ", sensor_set.acc.hardware);
 8006218:	4b2e      	ldr	r3, [pc, #184]	; (80062d4 <cliStatus+0x170>)
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	461a      	mov	r2, r3
 8006220:	492e      	ldr	r1, [pc, #184]	; (80062dc <cliStatus+0x178>)
 8006222:	2000      	movs	r0, #0
 8006224:	f00d f9a6 	bl	8013574 <pifLog_Printf>
    if (sensors(SENSOR_MAG))
 8006228:	2008      	movs	r0, #8
 800622a:	f000 fe09 	bl	8006e40 <sensors>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <cliStatus+0xe0>
        pifLog_Printf(LT_NONE, ", MAG_HW: %s ", sensor_set.mag.hardware);
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <cliStatus+0x170>)
 8006236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800623a:	461a      	mov	r2, r3
 800623c:	4928      	ldr	r1, [pc, #160]	; (80062e0 <cliStatus+0x17c>)
 800623e:	2000      	movs	r0, #0
 8006240:	f00d f998 	bl	8013574 <pifLog_Printf>
    if (sensors(SENSOR_BARO))
 8006244:	2004      	movs	r0, #4
 8006246:	f000 fdfb 	bl	8006e40 <sensors>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <cliStatus+0xfc>
        pifLog_Printf(LT_NONE, ", BARO_HW: %s ", sensor_set.baro.hardware);
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <cliStatus+0x170>)
 8006252:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006256:	461a      	mov	r2, r3
 8006258:	4922      	ldr	r1, [pc, #136]	; (80062e4 <cliStatus+0x180>)
 800625a:	2000      	movs	r0, #0
 800625c:	f00d f98a 	bl	8013574 <pifLog_Printf>
    pifLog_Print(LT_NONE, "\r\n");
 8006260:	491b      	ldr	r1, [pc, #108]	; (80062d0 <cliStatus+0x16c>)
 8006262:	2000      	movs	r0, #0
 8006264:	f00d f8f8 	bl	8013458 <pifLog_Print>

    pifLog_Printf(LT_NONE, "Cycle Time: %d, I2C Errors: %d, config size: %d\r\n", cycleTime, g_i2c_port.error_count, sizeof(master_t));
 8006268:	4b1f      	ldr	r3, [pc, #124]	; (80062e8 <cliStatus+0x184>)
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	4b1f      	ldr	r3, [pc, #124]	; (80062ec <cliStatus+0x188>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	4619      	mov	r1, r3
 8006274:	f240 536c 	movw	r3, #1388	; 0x56c
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	460b      	mov	r3, r1
 800627c:	491c      	ldr	r1, [pc, #112]	; (80062f0 <cliStatus+0x18c>)
 800627e:	2000      	movs	r0, #0
 8006280:	f00d f978 	bl	8013574 <pifLog_Printf>

   	pifLog_Printf(LT_NONE, "PIF Timer 1ms count=%d\n", pifTimerManager_Count(&g_timer_1ms));
 8006284:	481b      	ldr	r0, [pc, #108]	; (80062f4 <cliStatus+0x190>)
 8006286:	f00e fe6c 	bl	8014f62 <pifTimerManager_Count>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	491a      	ldr	r1, [pc, #104]	; (80062f8 <cliStatus+0x194>)
 8006290:	2000      	movs	r0, #0
 8006292:	f00d f96f 	bl	8013574 <pifLog_Printf>

    cliStatusCallback();
 8006296:	f000 f871 	bl	800637c <cliStatusCallback>

	return PIF_LOG_CMD_NO_ERROR;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20001d60 	.word	0x20001d60
 80062a8:	10624dd3 	.word	0x10624dd3
 80062ac:	200016d4 	.word	0x200016d4
 80062b0:	20000054 	.word	0x20000054
 80062b4:	080275c4 	.word	0x080275c4
 80062b8:	200016a0 	.word	0x200016a0
 80062bc:	431bde83 	.word	0x431bde83
 80062c0:	08027c70 	.word	0x08027c70
 80062c4:	08027604 	.word	0x08027604
 80062c8:	08027d9c 	.word	0x08027d9c
 80062cc:	08027320 	.word	0x08027320
 80062d0:	08026e0c 	.word	0x08026e0c
 80062d4:	20000060 	.word	0x20000060
 80062d8:	08027630 	.word	0x08027630
 80062dc:	08027640 	.word	0x08027640
 80062e0:	0802764c 	.word	0x0802764c
 80062e4:	0802765c 	.word	0x0802765c
 80062e8:	200016d0 	.word	0x200016d0
 80062ec:	200014b4 	.word	0x200014b4
 80062f0:	0802766c 	.word	0x0802766c
 80062f4:	200014e4 	.word	0x200014e4
 80062f8:	080276a0 	.word	0x080276a0

080062fc <cliVersion>:

static int cliVersion(int argc, char *argv[])
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
    (void)argc;
    (void)argv;
    pifLog_Printf(LT_NONE, "Afro32 CLI version 2.3 " __DATE__ " / " __TIME__);
 8006306:	4904      	ldr	r1, [pc, #16]	; (8006318 <cliVersion+0x1c>)
 8006308:	2000      	movs	r0, #0
 800630a:	f00d f933 	bl	8013574 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	080276b8 	.word	0x080276b8

0800631c <cliInit>:

BOOL cliInit(PifComm* p_comm)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
    if (!cliMode) {
 8006324:	4b11      	ldr	r3, [pc, #68]	; (800636c <cliInit+0x50>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d119      	bne.n	8006360 <cliInit+0x44>
        cliMode = 1;
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <cliInit+0x50>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]

#ifndef __PIF_NO_LOG__
        pifLog_DetachComm();
#else
        pifLog_Init();
 8006332:	f00d f833 	bl	801339c <pifLog_Init>
#endif
        if (!pifLog_AttachComm(p_comm)) return FALSE;
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f00d f9aa 	bl	8013690 <pifLog_AttachComm>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <cliInit+0x2a>
 8006342:	2300      	movs	r3, #0
 8006344:	e00d      	b.n	8006362 <cliInit+0x46>
        if (!pifLog_UseCommand(c_psCmdTable, "\r\n# ")) return FALSE;
 8006346:	490a      	ldr	r1, [pc, #40]	; (8006370 <cliInit+0x54>)
 8006348:	480a      	ldr	r0, [pc, #40]	; (8006374 <cliInit+0x58>)
 800634a:	f00d f851 	bl	80133f0 <pifLog_UseCommand>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <cliInit+0x3c>
 8006354:	2300      	movs	r3, #0
 8006356:	e004      	b.n	8006362 <cliInit+0x46>
        pifLog_Print(LT_NONE, "\r\nEntering CLI Mode, type 'exit' to return, or 'help'\r\n");
 8006358:	4907      	ldr	r1, [pc, #28]	; (8006378 <cliInit+0x5c>)
 800635a:	2000      	movs	r0, #0
 800635c:	f00d f87c 	bl	8013458 <pifLog_Print>
    }
    return TRUE;
 8006360:	2301      	movs	r3, #1
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000810 	.word	0x20000810
 8006370:	080276e8 	.word	0x080276e8
 8006374:	08027dbc 	.word	0x08027dbc
 8006378:	080276f0 	.word	0x080276f0

0800637c <cliStatusCallback>:

PIF_WEAK void cliStatusCallback()
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0

}
 8006380:	bf00      	nop
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <initEEPROM>:
static void resetConf(void);

static PifStorage* p_storage;

bool initEEPROM(PifStorage* p_sto)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
	if (p_sto) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <initEEPROM+0x18>
		p_storage = p_sto;
 800639a:	4a06      	ldr	r2, [pc, #24]	; (80063b4 <initEEPROM+0x28>)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6013      	str	r3, [r2, #0]
		return TRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <initEEPROM+0x1a>
	}
	return FALSE;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000ef0 	.word	0x20000ef0

080063b8 <parseRcChannels>:

void parseRcChannels(const char *input)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
    const char *c, *s;

    for (c = input; *c; c++) {
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e018      	b.n	80063f8 <parseRcChannels+0x40>
        s = strchr(rcChannelLetters, *c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	4619      	mov	r1, r3
 80063cc:	480f      	ldr	r0, [pc, #60]	; (800640c <parseRcChannels+0x54>)
 80063ce:	f01d f842 	bl	8023456 <strchr>
 80063d2:	60b8      	str	r0, [r7, #8]
        if (s)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <parseRcChannels+0x3a>
            mcfg.rcmap[s - rcChannelLetters] = c - input;
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1ad1      	subs	r1, r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	4a0a      	ldr	r2, [pc, #40]	; (800640c <parseRcChannels+0x54>)
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	b2c9      	uxtb	r1, r1
 80063e8:	4a09      	ldr	r2, [pc, #36]	; (8006410 <parseRcChannels+0x58>)
 80063ea:	4413      	add	r3, r2
 80063ec:	460a      	mov	r2, r1
 80063ee:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
    for (c = input; *c; c++) {
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e2      	bne.n	80063c6 <parseRcChannels+0xe>
    }
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	08028a48 	.word	0x08028a48
 8006410:	20000848 	.word	0x20000848

08006414 <validEEPROM>:

static uint8_t validEEPROM(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
    master_t *temp = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
    const uint8_t *p;
    uint8_t chk = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	72fb      	strb	r3, [r7, #11]
	PifStorageDataInfoP p_data_info;

    temp = malloc(sizeof(master_t));
 8006422:	f240 506c 	movw	r0, #1388	; 0x56c
 8006426:	f01c fec1 	bl	80231ac <malloc>
 800642a:	4603      	mov	r3, r0
 800642c:	607b      	str	r3, [r7, #4]
    if (!temp) return 0;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <validEEPROM+0x24>
 8006434:	2300      	movs	r3, #0
 8006436:	e04e      	b.n	80064d6 <validEEPROM+0xc2>

    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006438:	4b29      	ldr	r3, [pc, #164]	; (80064e0 <validEEPROM+0xcc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	214c      	movs	r1, #76	; 0x4c
 800643e:	4618      	mov	r0, r3
 8006440:	f014 feeb 	bl	801b21a <pifStorage_Open>
 8006444:	6038      	str	r0, [r7, #0]
    if (!p_data_info) goto fail;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d037      	beq.n	80064bc <validEEPROM+0xa8>

    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 800644c:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <validEEPROM+0xcc>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	f240 536c 	movw	r3, #1388	; 0x56c
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	6879      	ldr	r1, [r7, #4]
 8006458:	f014 fef0 	bl	801b23c <pifStorage_Read>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d02e      	beq.n	80064c0 <validEEPROM+0xac>

    // check version number
    if (EEPROM_CONF_VERSION != temp->version)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	224c      	movs	r2, #76	; 0x4c
 8006468:	4293      	cmp	r3, r2
 800646a:	d12b      	bne.n	80064c4 <validEEPROM+0xb0>
        goto fail;

    // check size and magic numbers
    if (temp->size != sizeof(master_t) || temp->magic_be != 0xBE || temp->magic_ef != 0xEF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	885b      	ldrh	r3, [r3, #2]
 8006470:	f240 526c 	movw	r2, #1388	; 0x56c
 8006474:	4293      	cmp	r3, r2
 8006476:	d127      	bne.n	80064c8 <validEEPROM+0xb4>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	791b      	ldrb	r3, [r3, #4]
 800647c:	2bbe      	cmp	r3, #190	; 0xbe
 800647e:	d123      	bne.n	80064c8 <validEEPROM+0xb4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 356a 	ldrb.w	r3, [r3, #1386]	; 0x56a
 8006486:	2bef      	cmp	r3, #239	; 0xef
 8006488:	d11e      	bne.n	80064c8 <validEEPROM+0xb4>
        goto fail;

    // verify integrity of temporary copy
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e007      	b.n	80064a0 <validEEPROM+0x8c>
        chk ^= *p;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	7afb      	ldrb	r3, [r7, #11]
 8006496:	4053      	eors	r3, r2
 8006498:	72fb      	strb	r3, [r7, #11]
    for (p = (const uint8_t *)temp; p < ((const uint8_t *)temp + sizeof(master_t)); p++)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f203 536c 	addw	r3, r3, #1388	; 0x56c
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d3f1      	bcc.n	8006490 <validEEPROM+0x7c>

    // checksum failed
    if (chk != 0)
 80064ac:	7afb      	ldrb	r3, [r7, #11]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10c      	bne.n	80064cc <validEEPROM+0xb8>
        goto fail;

    free(temp);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f01c fe82 	bl	80231bc <free>

    // looks good, let's roll!
    return 1;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e00c      	b.n	80064d6 <validEEPROM+0xc2>
    if (!p_data_info) goto fail;
 80064bc:	bf00      	nop
 80064be:	e006      	b.n	80064ce <validEEPROM+0xba>
    if (!pifStorage_Read(p_storage, (uint8_t*)temp, p_data_info, sizeof(master_t))) goto fail;
 80064c0:	bf00      	nop
 80064c2:	e004      	b.n	80064ce <validEEPROM+0xba>
        goto fail;
 80064c4:	bf00      	nop
 80064c6:	e002      	b.n	80064ce <validEEPROM+0xba>
        goto fail;
 80064c8:	bf00      	nop
 80064ca:	e000      	b.n	80064ce <validEEPROM+0xba>
        goto fail;
 80064cc:	bf00      	nop

fail:
    free(temp);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f01c fe74 	bl	80231bc <free>
    return 0;    
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000ef0 	.word	0x20000ef0

080064e4 <readEEPROM>:

void readEEPROM(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
	PifStorageDataInfoP p_data_info;

    // Sanity check
    if (!validEEPROM()) goto fail;
 80064ea:	f7ff ff93 	bl	8006414 <validEEPROM>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d030      	beq.n	8006556 <readEEPROM+0x72>

    // Read flash
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 80064f4:	4b1d      	ldr	r3, [pc, #116]	; (800656c <readEEPROM+0x88>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	214c      	movs	r1, #76	; 0x4c
 80064fa:	4618      	mov	r0, r3
 80064fc:	f014 fe8d 	bl	801b21a <pifStorage_Open>
 8006500:	6078      	str	r0, [r7, #4]
    if (!p_data_info) goto fail;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d028      	beq.n	800655a <readEEPROM+0x76>

    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 8006508:	4b18      	ldr	r3, [pc, #96]	; (800656c <readEEPROM+0x88>)
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	f240 536c 	movw	r3, #1388	; 0x56c
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4917      	ldr	r1, [pc, #92]	; (8006570 <readEEPROM+0x8c>)
 8006514:	f014 fe92 	bl	801b23c <pifStorage_Read>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01f      	beq.n	800655e <readEEPROM+0x7a>

    // Copy current profile
    if (mcfg.current_profile > 2) // sanity check
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <readEEPROM+0x8c>)
 8006520:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006524:	2b02      	cmp	r3, #2
 8006526:	d903      	bls.n	8006530 <readEEPROM+0x4c>
        mcfg.current_profile = 0;
 8006528:	4b11      	ldr	r3, [pc, #68]	; (8006570 <readEEPROM+0x8c>)
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    memcpy(&cfg, &mcfg.profile[mcfg.current_profile], sizeof(config_t));
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <readEEPROM+0x8c>)
 8006532:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006536:	461a      	mov	r2, r3
 8006538:	f44f 739c 	mov.w	r3, #312	; 0x138
 800653c:	fb02 f303 	mul.w	r3, r2, r3
 8006540:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <readEEPROM+0x8c>)
 8006546:	4413      	add	r3, r2
 8006548:	f44f 729c 	mov.w	r2, #312	; 0x138
 800654c:	4619      	mov	r1, r3
 800654e:	4809      	ldr	r0, [pc, #36]	; (8006574 <readEEPROM+0x90>)
 8006550:	f01c fe3c 	bl	80231cc <memcpy>
    return;
 8006554:	e007      	b.n	8006566 <readEEPROM+0x82>
    if (!validEEPROM()) goto fail;
 8006556:	bf00      	nop
 8006558:	e002      	b.n	8006560 <readEEPROM+0x7c>
    if (!p_data_info) goto fail;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <readEEPROM+0x7c>
    if (!pifStorage_Read(p_storage, (uint8_t*)&mcfg, p_data_info, sizeof(master_t))) goto fail;
 800655e:	bf00      	nop

fail:    
    failureMode(10);
 8006560:	200a      	movs	r0, #10
 8006562:	f7fb fd3e 	bl	8001fe2 <failureMode>
}
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000ef0 	.word	0x20000ef0
 8006570:	20000848 	.word	0x20000848
 8006574:	20000db4 	.word	0x20000db4

08006578 <activateConfig>:

void activateConfig(void)
{
 8006578:	b5b0      	push	{r4, r5, r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 800657e:	2300      	movs	r3, #0
 8006580:	71fb      	strb	r3, [r7, #7]
 8006582:	e021      	b.n	80065c8 <activateConfig+0x50>
        lookupPitchRollRC[i] = (2500 + cfg.rcExpo8 * (i * i - 25)) * i * (int32_t)cfg.rcRate8 / 2500;
 8006584:	4b56      	ldr	r3, [pc, #344]	; (80066e0 <activateConfig+0x168>)
 8006586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800658a:	4619      	mov	r1, r3
 800658c:	79fb      	ldrb	r3, [r7, #7]
 800658e:	79fa      	ldrb	r2, [r7, #7]
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	3b19      	subs	r3, #25
 8006596:	fb01 f303 	mul.w	r3, r1, r3
 800659a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	fb02 f303 	mul.w	r3, r2, r3
 80065a4:	4a4e      	ldr	r2, [pc, #312]	; (80066e0 <activateConfig+0x168>)
 80065a6:	7fd2      	ldrb	r2, [r2, #31]
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	4a4d      	ldr	r2, [pc, #308]	; (80066e4 <activateConfig+0x16c>)
 80065ae:	fb82 1203 	smull	r1, r2, r2, r3
 80065b2:	1292      	asrs	r2, r2, #10
 80065b4:	17db      	asrs	r3, r3, #31
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	b211      	sxth	r1, r2
 80065bc:	4a4a      	ldr	r2, [pc, #296]	; (80066e8 <activateConfig+0x170>)
 80065be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < PITCH_LOOKUP_LENGTH; i++)
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	3301      	adds	r3, #1
 80065c6:	71fb      	strb	r3, [r7, #7]
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d9da      	bls.n	8006584 <activateConfig+0xc>

    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80065ce:	2300      	movs	r3, #0
 80065d0:	71fb      	strb	r3, [r7, #7]
 80065d2:	e076      	b.n	80066c2 <activateConfig+0x14a>
        int16_t tmp = 10 * i - cfg.thrMid8;
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	0092      	lsls	r2, r2, #2
 80065dc:	4413      	add	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	4b3f      	ldr	r3, [pc, #252]	; (80066e0 <activateConfig+0x168>)
 80065e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	80bb      	strh	r3, [r7, #4]
        uint8_t y = 1;
 80065f0:	2301      	movs	r3, #1
 80065f2:	71bb      	strb	r3, [r7, #6]
        if (tmp > 0)
 80065f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	dd05      	ble.n	8006608 <activateConfig+0x90>
            y = 100 - cfg.thrMid8;
 80065fc:	4b38      	ldr	r3, [pc, #224]	; (80066e0 <activateConfig+0x168>)
 80065fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006602:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8006606:	71bb      	strb	r3, [r7, #6]
        if (tmp < 0)
 8006608:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	da03      	bge.n	8006618 <activateConfig+0xa0>
            y = cfg.thrMid8;
 8006610:	4b33      	ldr	r3, [pc, #204]	; (80066e0 <activateConfig+0x168>)
 8006612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006616:	71bb      	strb	r3, [r7, #6]
        lookupThrottleRC[i] = 10 * cfg.thrMid8 + tmp * (100 - cfg.thrExpo8 + (int32_t)cfg.thrExpo8 * (tmp * tmp) / (y * y)) / 10;
 8006618:	4b31      	ldr	r3, [pc, #196]	; (80066e0 <activateConfig+0x168>)
 800661a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800661e:	b29b      	uxth	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	0092      	lsls	r2, r2, #2
 8006624:	4413      	add	r3, r2
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800662e:	492c      	ldr	r1, [pc, #176]	; (80066e0 <activateConfig+0x168>)
 8006630:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8006634:	f1c1 0064 	rsb	r0, r1, #100	; 0x64
 8006638:	4929      	ldr	r1, [pc, #164]	; (80066e0 <activateConfig+0x168>)
 800663a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 800663e:	460d      	mov	r5, r1
 8006640:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006644:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006648:	fb04 f101 	mul.w	r1, r4, r1
 800664c:	fb01 f405 	mul.w	r4, r1, r5
 8006650:	79b9      	ldrb	r1, [r7, #6]
 8006652:	79bd      	ldrb	r5, [r7, #6]
 8006654:	fb05 f101 	mul.w	r1, r5, r1
 8006658:	fb94 f1f1 	sdiv	r1, r4, r1
 800665c:	4401      	add	r1, r0
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4922      	ldr	r1, [pc, #136]	; (80066ec <activateConfig+0x174>)
 8006664:	fb81 0103 	smull	r0, r1, r1, r3
 8006668:	1089      	asrs	r1, r1, #2
 800666a:	17db      	asrs	r3, r3, #31
 800666c:	1acb      	subs	r3, r1, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	4413      	add	r3, r2
 8006672:	b29a      	uxth	r2, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	b211      	sxth	r1, r2
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <activateConfig+0x178>)
 800667a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        lookupThrottleRC[i] = mcfg.minthrottle + (int32_t)(mcfg.maxthrottle - mcfg.minthrottle) * lookupThrottleRC[i] / 1000; // [MINTHROTTLE;MAXTHROTTLE]
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <activateConfig+0x17c>)
 8006680:	f8b3 2140 	ldrh.w	r2, [r3, #320]	; 0x140
 8006684:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <activateConfig+0x17c>)
 8006686:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800668a:	4619      	mov	r1, r3
 800668c:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <activateConfig+0x17c>)
 800668e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 8006692:	1acb      	subs	r3, r1, r3
 8006694:	79f9      	ldrb	r1, [r7, #7]
 8006696:	4816      	ldr	r0, [pc, #88]	; (80066f0 <activateConfig+0x178>)
 8006698:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	4915      	ldr	r1, [pc, #84]	; (80066f8 <activateConfig+0x180>)
 80066a2:	fb81 0103 	smull	r0, r1, r1, r3
 80066a6:	1189      	asrs	r1, r1, #6
 80066a8:	17db      	asrs	r3, r3, #31
 80066aa:	1acb      	subs	r3, r1, r3
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	b211      	sxth	r1, r2
 80066b6:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <activateConfig+0x178>)
 80066b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	3301      	adds	r3, #1
 80066c0:	71fb      	strb	r3, [r7, #7]
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	2b0b      	cmp	r3, #11
 80066c6:	d985      	bls.n	80065d4 <activateConfig+0x5c>
    }

    setPIDController(cfg.pidController);
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <activateConfig+0x168>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f006 fc49 	bl	800cf64 <setPIDController>
#ifdef GPS
    gpsSetPIDs();
 80066d2:	f002 fa0b 	bl	8008aec <gpsSetPIDs>
#endif
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bdb0      	pop	{r4, r5, r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000db4 	.word	0x20000db4
 80066e4:	68db8bad 	.word	0x68db8bad
 80066e8:	20001714 	.word	0x20001714
 80066ec:	66666667 	.word	0x66666667
 80066f0:	20001724 	.word	0x20001724
 80066f4:	20000848 	.word	0x20000848
 80066f8:	10624dd3 	.word	0x10624dd3

080066fc <loadAndActivateConfig>:

void loadAndActivateConfig(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
    readEEPROM();
 8006700:	f7ff fef0 	bl	80064e4 <readEEPROM>
    activateConfig();
 8006704:	f7ff ff38 	bl	8006578 <activateConfig>
}
 8006708:	bf00      	nop
 800670a:	bd80      	pop	{r7, pc}

0800670c <writeEEPROM>:

void writeEEPROM(uint8_t b, uint8_t updateProfile)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	460a      	mov	r2, r1
 8006716:	71fb      	strb	r3, [r7, #7]
 8006718:	4613      	mov	r3, r2
 800671a:	71bb      	strb	r3, [r7, #6]
    bool status = false;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]
    uint8_t chk = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	75bb      	strb	r3, [r7, #22]
    const uint8_t *p;
	PifStorageDataInfoP p_data_info;

    // prepare checksum/version constants
    mcfg.version = EEPROM_CONF_VERSION;
 8006724:	224c      	movs	r2, #76	; 0x4c
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <writeEEPROM+0xf4>)
 8006728:	701a      	strb	r2, [r3, #0]
    mcfg.size = sizeof(master_t);
 800672a:	4b35      	ldr	r3, [pc, #212]	; (8006800 <writeEEPROM+0xf4>)
 800672c:	f240 526c 	movw	r2, #1388	; 0x56c
 8006730:	805a      	strh	r2, [r3, #2]
    mcfg.magic_be = 0xBE;
 8006732:	4b33      	ldr	r3, [pc, #204]	; (8006800 <writeEEPROM+0xf4>)
 8006734:	22be      	movs	r2, #190	; 0xbe
 8006736:	711a      	strb	r2, [r3, #4]
    mcfg.magic_ef = 0xEF;
 8006738:	4b31      	ldr	r3, [pc, #196]	; (8006800 <writeEEPROM+0xf4>)
 800673a:	22ef      	movs	r2, #239	; 0xef
 800673c:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
    mcfg.chk = 0;
 8006740:	4b2f      	ldr	r3, [pc, #188]	; (8006800 <writeEEPROM+0xf4>)
 8006742:	2200      	movs	r2, #0
 8006744:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b

    // when updateProfile = true, we copy contents of cfg to global configuration. when false, only profile number is updated, and then that profile is loaded on readEEPROM()
    if (updateProfile) {
 8006748:	79bb      	ldrb	r3, [r7, #6]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d011      	beq.n	8006772 <writeEEPROM+0x66>
        // copy current in-memory profile to stored configuration
        memcpy(&mcfg.profile[mcfg.current_profile], &cfg, sizeof(config_t));
 800674e:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <writeEEPROM+0xf4>)
 8006750:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 8006754:	461a      	mov	r2, r3
 8006756:	f44f 739c 	mov.w	r3, #312	; 0x138
 800675a:	fb02 f303 	mul.w	r3, r2, r3
 800675e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006762:	4a27      	ldr	r2, [pc, #156]	; (8006800 <writeEEPROM+0xf4>)
 8006764:	4413      	add	r3, r2
 8006766:	f44f 729c 	mov.w	r2, #312	; 0x138
 800676a:	4926      	ldr	r1, [pc, #152]	; (8006804 <writeEEPROM+0xf8>)
 800676c:	4618      	mov	r0, r3
 800676e:	f01c fd2d 	bl	80231cc <memcpy>
    }

    // recalculate checksum before writing
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <writeEEPROM+0xf4>)
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	e007      	b.n	8006788 <writeEEPROM+0x7c>
        chk ^= *p;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	7dbb      	ldrb	r3, [r7, #22]
 800677e:	4053      	eors	r3, r2
 8006780:	75bb      	strb	r3, [r7, #22]
    for (p = (const uint8_t *)&mcfg; p < ((const uint8_t *)&mcfg + sizeof(master_t)); p++)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	3301      	adds	r3, #1
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <writeEEPROM+0xfc>)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4293      	cmp	r3, r2
 800678e:	d3f3      	bcc.n	8006778 <writeEEPROM+0x6c>
    mcfg.chk = chk;
 8006790:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <writeEEPROM+0xf4>)
 8006792:	7dbb      	ldrb	r3, [r7, #22]
 8006794:	f882 356b 	strb.w	r3, [r2, #1387]	; 0x56b

    // write it
    p_data_info = pifStorage_Open(p_storage, STORAGE_ID);
 8006798:	4b1c      	ldr	r3, [pc, #112]	; (800680c <writeEEPROM+0x100>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	214c      	movs	r1, #76	; 0x4c
 800679e:	4618      	mov	r0, r3
 80067a0:	f014 fd3b 	bl	801b21a <pifStorage_Open>
 80067a4:	60f8      	str	r0, [r7, #12]
    if (p_data_info) {
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <writeEEPROM+0xba>
        if (pifStorage_Write(p_storage, p_data_info, (uint8_t*)&mcfg, sizeof(master_t))) status = true;
 80067ac:	4b17      	ldr	r3, [pc, #92]	; (800680c <writeEEPROM+0x100>)
 80067ae:	6818      	ldr	r0, [r3, #0]
 80067b0:	f240 536c 	movw	r3, #1388	; 0x56c
 80067b4:	4a12      	ldr	r2, [pc, #72]	; (8006800 <writeEEPROM+0xf4>)
 80067b6:	68f9      	ldr	r1, [r7, #12]
 80067b8:	f014 fd53 	bl	801b262 <pifStorage_Write>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <writeEEPROM+0xba>
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
    }

    // Flash write failed - just die now
    if (!status || !validEEPROM()) {
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	f083 0301 	eor.w	r3, r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <writeEEPROM+0xd0>
 80067d2:	f7ff fe1f 	bl	8006414 <validEEPROM>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <writeEEPROM+0xd6>
        failureMode(10);
 80067dc:	200a      	movs	r0, #10
 80067de:	f7fb fc00 	bl	8001fe2 <failureMode>
    }

    // re-read written data
    loadAndActivateConfig();
 80067e2:	f7ff ff8b 	bl	80066fc <loadAndActivateConfig>
    if (b)
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <writeEEPROM+0xea>
        blinkLED(15, 20, 1);
 80067ec:	2201      	movs	r2, #1
 80067ee:	2114      	movs	r1, #20
 80067f0:	200f      	movs	r0, #15
 80067f2:	f005 fb81 	bl	800bef8 <blinkLED>
}
 80067f6:	bf00      	nop
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000848 	.word	0x20000848
 8006804:	20000db4 	.word	0x20000db4
 8006808:	20000db4 	.word	0x20000db4
 800680c:	20000ef0 	.word	0x20000ef0

08006810 <checkFirstTime>:

bool checkFirstTime(bool reset)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
    bool alloc = true;
 800681a:	2301      	movs	r3, #1
 800681c:	73fb      	strb	r3, [r7, #15]

	if (!pifStorage_IsFormat(p_storage)) {
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <checkFirstTime+0xa0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f014 fccc 	bl	801b1c0 <pifStorage_IsFormat>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10c      	bne.n	8006848 <checkFirstTime+0x38>
		if (!pifStorage_Format(p_storage)) return false;
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <checkFirstTime+0xa0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f014 fcd1 	bl	801b1da <pifStorage_Format>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <checkFirstTime+0x32>
 800683e:	2300      	movs	r3, #0
 8006840:	e032      	b.n	80068a8 <checkFirstTime+0x98>
        alloc = false;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]
 8006846:	e00b      	b.n	8006860 <checkFirstTime+0x50>
	}
    else {
        alloc = pifStorage_Open(p_storage, STORAGE_ID) != NULL;
 8006848:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <checkFirstTime+0xa0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	214c      	movs	r1, #76	; 0x4c
 800684e:	4618      	mov	r0, r3
 8006850:	f014 fce3 	bl	801b21a <pifStorage_Open>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf14      	ite	ne
 800685a:	2301      	movne	r3, #1
 800685c:	2300      	moveq	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
    }
    if (!alloc) {
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	f083 0301 	eor.w	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <checkFirstTime+0x7a>
		if (!pifStorage_Create(p_storage, STORAGE_ID, sizeof(master_t))) return false;
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <checkFirstTime+0xa0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f240 526c 	movw	r2, #1388	; 0x56c
 8006874:	214c      	movs	r1, #76	; 0x4c
 8006876:	4618      	mov	r0, r3
 8006878:	f014 fcbc 	bl	801b1f4 <pifStorage_Create>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <checkFirstTime+0x76>
 8006882:	2300      	movs	r3, #0
 8006884:	e010      	b.n	80068a8 <checkFirstTime+0x98>
        reset = true;
 8006886:	2301      	movs	r3, #1
 8006888:	71fb      	strb	r3, [r7, #7]
    }
    // check the EEPROM integrity before resetting values
    if (!validEEPROM() || reset) {
 800688a:	f7ff fdc3 	bl	8006414 <validEEPROM>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <checkFirstTime+0x8a>
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <checkFirstTime+0x96>
        resetConf();
 800689a:	f000 f80b 	bl	80068b4 <resetConf>
        // no need to memcpy profile again, we just did it in resetConf() above
        writeEEPROM(0, false);
 800689e:	2100      	movs	r1, #0
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7ff ff33 	bl	800670c <writeEEPROM>
    }
    return true;
 80068a6:	2301      	movs	r3, #1
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000ef0 	.word	0x20000ef0

080068b4 <resetConf>:

// Default settings
static void resetConf(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
    int i;
    int8_t servoRates[8] = { 30, 30, 100, 100, 100, 100, 100, 100 };
 80068ba:	4ac7      	ldr	r2, [pc, #796]	; (8006bd8 <resetConf+0x324>)
 80068bc:	1d3b      	adds	r3, r7, #4
 80068be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068c2:	e883 0003 	stmia.w	r3, {r0, r1}

    // Clear all configuration
    memset(&mcfg, 0, sizeof(master_t));
 80068c6:	f240 526c 	movw	r2, #1388	; 0x56c
 80068ca:	2100      	movs	r1, #0
 80068cc:	48c3      	ldr	r0, [pc, #780]	; (8006bdc <resetConf+0x328>)
 80068ce:	f01c fc8b 	bl	80231e8 <memset>
    memset(&cfg, 0, sizeof(config_t));
 80068d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80068d6:	2100      	movs	r1, #0
 80068d8:	48c1      	ldr	r0, [pc, #772]	; (8006be0 <resetConf+0x32c>)
 80068da:	f01c fc85 	bl	80231e8 <memset>

    mcfg.version = EEPROM_CONF_VERSION;
 80068de:	224c      	movs	r2, #76	; 0x4c
 80068e0:	4bbe      	ldr	r3, [pc, #760]	; (8006bdc <resetConf+0x328>)
 80068e2:	701a      	strb	r2, [r3, #0]
    mcfg.mixerConfiguration = MULTITYPE_QUADX;
 80068e4:	4bbd      	ldr	r3, [pc, #756]	; (8006bdc <resetConf+0x328>)
 80068e6:	2203      	movs	r2, #3
 80068e8:	715a      	strb	r2, [r3, #5]
    featureClearAll();
 80068ea:	f000 fb2d 	bl	8006f48 <featureClearAll>
    if (g_featureDefault) (*g_featureDefault)();
 80068ee:	4bbd      	ldr	r3, [pc, #756]	; (8006be4 <resetConf+0x330>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <resetConf+0x48>
 80068f6:	4bbb      	ldr	r3, [pc, #748]	; (8006be4 <resetConf+0x330>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4798      	blx	r3

    // global settings
    mcfg.current_profile = 0;       // default profile
 80068fc:	4bb7      	ldr	r3, [pc, #732]	; (8006bdc <resetConf+0x328>)
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
    mcfg.gyro_cmpf_factor = 600;    // default MWC
 8006904:	4bb5      	ldr	r3, [pc, #724]	; (8006bdc <resetConf+0x328>)
 8006906:	f44f 7216 	mov.w	r2, #600	; 0x258
 800690a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    mcfg.gyro_cmpfm_factor = 250;   // default MWC
 800690e:	4bb3      	ldr	r3, [pc, #716]	; (8006bdc <resetConf+0x328>)
 8006910:	22fa      	movs	r2, #250	; 0xfa
 8006912:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    mcfg.gyro_lpf = 42;             // supported by all gyro drivers now. In case of ST gyro, will default to 32Hz instead
 8006916:	4bb1      	ldr	r3, [pc, #708]	; (8006bdc <resetConf+0x328>)
 8006918:	222a      	movs	r2, #42	; 0x2a
 800691a:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    mcfg.accZero[0] = 0;
 800691e:	4baf      	ldr	r3, [pc, #700]	; (8006bdc <resetConf+0x328>)
 8006920:	2200      	movs	r2, #0
 8006922:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
    mcfg.accZero[1] = 0;
 8006926:	4bad      	ldr	r3, [pc, #692]	; (8006bdc <resetConf+0x328>)
 8006928:	2200      	movs	r2, #0
 800692a:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    mcfg.accZero[2] = 0;
 800692e:	4bab      	ldr	r3, [pc, #684]	; (8006bdc <resetConf+0x328>)
 8006930:	2200      	movs	r2, #0
 8006932:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    mcfg.gyro_align = IMUS_ALIGN_DEFAULT;
 8006936:	4ba9      	ldr	r3, [pc, #676]	; (8006bdc <resetConf+0x328>)
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
    mcfg.acc_align = IMUS_ALIGN_DEFAULT;
 800693e:	4ba7      	ldr	r3, [pc, #668]	; (8006bdc <resetConf+0x328>)
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
    mcfg.mag_align = IMUS_ALIGN_DEFAULT;
 8006946:	4ba5      	ldr	r3, [pc, #660]	; (8006bdc <resetConf+0x328>)
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    mcfg.board_align_roll = 0;
 800694e:	4ba3      	ldr	r3, [pc, #652]	; (8006bdc <resetConf+0x328>)
 8006950:	2200      	movs	r2, #0
 8006952:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    mcfg.board_align_pitch = 0;
 8006956:	4ba1      	ldr	r3, [pc, #644]	; (8006bdc <resetConf+0x328>)
 8006958:	2200      	movs	r2, #0
 800695a:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    mcfg.board_align_yaw = 0;
 800695e:	4b9f      	ldr	r3, [pc, #636]	; (8006bdc <resetConf+0x328>)
 8006960:	2200      	movs	r2, #0
 8006962:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    mcfg.acc_hardware = 0;               // default/autodetect
 8006966:	4b9d      	ldr	r3, [pc, #628]	; (8006bdc <resetConf+0x328>)
 8006968:	2200      	movs	r2, #0
 800696a:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
    mcfg.mag_hardware = 0;
 800696e:	4b9b      	ldr	r3, [pc, #620]	; (8006bdc <resetConf+0x328>)
 8006970:	2200      	movs	r2, #0
 8006972:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
    mcfg.max_angle_inclination = 500;    // 50 degrees
 8006976:	4b99      	ldr	r3, [pc, #612]	; (8006bdc <resetConf+0x328>)
 8006978:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800697c:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    mcfg.yaw_control_direction = 1;
 8006980:	4b96      	ldr	r3, [pc, #600]	; (8006bdc <resetConf+0x328>)
 8006982:	2201      	movs	r2, #1
 8006984:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
    mcfg.moron_threshold = 32;
 8006988:	4b94      	ldr	r3, [pc, #592]	; (8006bdc <resetConf+0x328>)
 800698a:	2220      	movs	r2, #32
 800698c:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
    mcfg.currentscale = 400; // for Allegro ACS758LCB-100U (40mV/A)
 8006990:	4b92      	ldr	r3, [pc, #584]	; (8006bdc <resetConf+0x328>)
 8006992:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006996:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    mcfg.vbatscale = 110;
 800699a:	4b90      	ldr	r3, [pc, #576]	; (8006bdc <resetConf+0x328>)
 800699c:	226e      	movs	r2, #110	; 0x6e
 800699e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
    mcfg.vbatmaxcellvoltage = 43;
 80069a2:	4b8e      	ldr	r3, [pc, #568]	; (8006bdc <resetConf+0x328>)
 80069a4:	222b      	movs	r2, #43	; 0x2b
 80069a6:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
    mcfg.vbatmincellvoltage = 33;
 80069aa:	4b8c      	ldr	r3, [pc, #560]	; (8006bdc <resetConf+0x328>)
 80069ac:	2221      	movs	r2, #33	; 0x21
 80069ae:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
    mcfg.vbatwarningcellvoltage = 35;
 80069b2:	4b8a      	ldr	r3, [pc, #552]	; (8006bdc <resetConf+0x328>)
 80069b4:	2223      	movs	r2, #35	; 0x23
 80069b6:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    mcfg.power_adc_channel = 0;
 80069ba:	4b88      	ldr	r3, [pc, #544]	; (8006bdc <resetConf+0x328>)
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    mcfg.serialrx_type = 0;
 80069c2:	4b86      	ldr	r3, [pc, #536]	; (8006bdc <resetConf+0x328>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
    mcfg.spektrum_sat_bind = 0;
 80069ca:	4b84      	ldr	r3, [pc, #528]	; (8006bdc <resetConf+0x328>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    mcfg.telemetry_provider = TELEMETRY_PROVIDER_FRSKY;
 80069d2:	4b82      	ldr	r3, [pc, #520]	; (8006bdc <resetConf+0x328>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
    mcfg.telemetry_port = TELEMETRY_PORT_UART;
 80069da:	4b80      	ldr	r3, [pc, #512]	; (8006bdc <resetConf+0x328>)
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
    mcfg.telemetry_switch = 0;
 80069e2:	4b7e      	ldr	r3, [pc, #504]	; (8006bdc <resetConf+0x328>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
    mcfg.midrc = 1500;
 80069ea:	4b7c      	ldr	r3, [pc, #496]	; (8006bdc <resetConf+0x328>)
 80069ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80069f0:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    mcfg.mincheck = 1100;
 80069f4:	4b79      	ldr	r3, [pc, #484]	; (8006bdc <resetConf+0x328>)
 80069f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80069fa:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    mcfg.maxcheck = 1900;
 80069fe:	4b77      	ldr	r3, [pc, #476]	; (8006bdc <resetConf+0x328>)
 8006a00:	f240 726c 	movw	r2, #1900	; 0x76c
 8006a04:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    mcfg.retarded_arm = 0;       // disable arm/disarm on roll left/right
 8006a08:	4b74      	ldr	r3, [pc, #464]	; (8006bdc <resetConf+0x328>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
    mcfg.disarm_kill_switch = 1; // AUX disarm independently of throttle value
 8006a10:	4b72      	ldr	r3, [pc, #456]	; (8006bdc <resetConf+0x328>)
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
    mcfg.fw_althold_dir = 1;
 8006a18:	4b70      	ldr	r3, [pc, #448]	; (8006bdc <resetConf+0x328>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    // Motor/ESC/Servo
    mcfg.minthrottle = 1150;
 8006a20:	4b6e      	ldr	r3, [pc, #440]	; (8006bdc <resetConf+0x328>)
 8006a22:	f240 427e 	movw	r2, #1150	; 0x47e
 8006a26:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    mcfg.maxthrottle = 1850;
 8006a2a:	4b6c      	ldr	r3, [pc, #432]	; (8006bdc <resetConf+0x328>)
 8006a2c:	f240 723a 	movw	r2, #1850	; 0x73a
 8006a30:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    mcfg.mincommand = 1000;
 8006a34:	4b69      	ldr	r3, [pc, #420]	; (8006bdc <resetConf+0x328>)
 8006a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a3a:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    mcfg.deadband3d_low = 1406;
 8006a3e:	4b67      	ldr	r3, [pc, #412]	; (8006bdc <resetConf+0x328>)
 8006a40:	f240 527e 	movw	r2, #1406	; 0x57e
 8006a44:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    mcfg.deadband3d_high = 1514;
 8006a48:	4b64      	ldr	r3, [pc, #400]	; (8006bdc <resetConf+0x328>)
 8006a4a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006a4e:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    mcfg.neutral3d = 1460;
 8006a52:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <resetConf+0x328>)
 8006a54:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8006a58:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    mcfg.deadband3d_throttle = 50;
 8006a5c:	4b5f      	ldr	r3, [pc, #380]	; (8006bdc <resetConf+0x328>)
 8006a5e:	2232      	movs	r2, #50	; 0x32
 8006a60:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    mcfg.motor_pwm_rate = MOTOR_PWM_RATE;
 8006a64:	4b5d      	ldr	r3, [pc, #372]	; (8006bdc <resetConf+0x328>)
 8006a66:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a6a:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    mcfg.servo_pwm_rate = 50;
 8006a6e:	4b5b      	ldr	r3, [pc, #364]	; (8006bdc <resetConf+0x328>)
 8006a70:	2232      	movs	r2, #50	; 0x32
 8006a72:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    // safety features
    mcfg.auto_disarm_board = 5; // auto disarm after 5 sec if motors not started or disarmed
 8006a76:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <resetConf+0x328>)
 8006a78:	2205      	movs	r2, #5
 8006a7a:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
    // gps/nav stuff
    mcfg.gps_type = GPS_NMEA;
 8006a7e:	4b57      	ldr	r3, [pc, #348]	; (8006bdc <resetConf+0x328>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
    mcfg.gps_baudrate = GPS_BAUD_115200;
 8006a86:	4b55      	ldr	r3, [pc, #340]	; (8006bdc <resetConf+0x328>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    // serial (USART1) baudrate
    mcfg.serial_baudrate = 115200;
 8006a8e:	4b53      	ldr	r3, [pc, #332]	; (8006bdc <resetConf+0x328>)
 8006a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a94:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    mcfg.softserial_baudrate = 9600;
 8006a98:	4b50      	ldr	r3, [pc, #320]	; (8006bdc <resetConf+0x328>)
 8006a9a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a9e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    mcfg.softserial_1_inverted = 0;
 8006aa2:	4b4e      	ldr	r3, [pc, #312]	; (8006bdc <resetConf+0x328>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
    mcfg.softserial_2_inverted = 0;
 8006aaa:	4b4c      	ldr	r3, [pc, #304]	; (8006bdc <resetConf+0x328>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
    mcfg.looptime = 3500;
 8006ab2:	4b4a      	ldr	r3, [pc, #296]	; (8006bdc <resetConf+0x328>)
 8006ab4:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006ab8:	819a      	strh	r2, [r3, #12]
    mcfg.emf_avoidance = 0;
 8006aba:	4b48      	ldr	r3, [pc, #288]	; (8006bdc <resetConf+0x328>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	739a      	strb	r2, [r3, #14]
    mcfg.rssi_aux_channel = 0;
 8006ac0:	4b46      	ldr	r3, [pc, #280]	; (8006bdc <resetConf+0x328>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    mcfg.rssi_aux_max = 1000;
 8006ac8:	4b44      	ldr	r3, [pc, #272]	; (8006bdc <resetConf+0x328>)
 8006aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ace:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    mcfg.rssi_adc_max = 4095;
 8006ad2:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <resetConf+0x328>)
 8006ad4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006ad8:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    mcfg.rc_channel_count = 8;
 8006adc:	4b3f      	ldr	r3, [pc, #252]	; (8006bdc <resetConf+0x328>)
 8006ade:	2208      	movs	r2, #8
 8006ae0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa

    cfg.pidController = 0;
 8006ae4:	4b3e      	ldr	r3, [pc, #248]	; (8006be0 <resetConf+0x32c>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
    cfg.P8[ROLL] = 40;
 8006aea:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <resetConf+0x32c>)
 8006aec:	2228      	movs	r2, #40	; 0x28
 8006aee:	705a      	strb	r2, [r3, #1]
    cfg.I8[ROLL] = 30;
 8006af0:	4b3b      	ldr	r3, [pc, #236]	; (8006be0 <resetConf+0x32c>)
 8006af2:	221e      	movs	r2, #30
 8006af4:	72da      	strb	r2, [r3, #11]
    cfg.D8[ROLL] = 23;
 8006af6:	4b3a      	ldr	r3, [pc, #232]	; (8006be0 <resetConf+0x32c>)
 8006af8:	2217      	movs	r2, #23
 8006afa:	755a      	strb	r2, [r3, #21]
    cfg.P8[PITCH] = 40;
 8006afc:	4b38      	ldr	r3, [pc, #224]	; (8006be0 <resetConf+0x32c>)
 8006afe:	2228      	movs	r2, #40	; 0x28
 8006b00:	709a      	strb	r2, [r3, #2]
    cfg.I8[PITCH] = 30;
 8006b02:	4b37      	ldr	r3, [pc, #220]	; (8006be0 <resetConf+0x32c>)
 8006b04:	221e      	movs	r2, #30
 8006b06:	731a      	strb	r2, [r3, #12]
    cfg.D8[PITCH] = 23;
 8006b08:	4b35      	ldr	r3, [pc, #212]	; (8006be0 <resetConf+0x32c>)
 8006b0a:	2217      	movs	r2, #23
 8006b0c:	759a      	strb	r2, [r3, #22]
    cfg.P8[YAW] = 85;
 8006b0e:	4b34      	ldr	r3, [pc, #208]	; (8006be0 <resetConf+0x32c>)
 8006b10:	2255      	movs	r2, #85	; 0x55
 8006b12:	70da      	strb	r2, [r3, #3]
    cfg.I8[YAW] = 45;
 8006b14:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <resetConf+0x32c>)
 8006b16:	222d      	movs	r2, #45	; 0x2d
 8006b18:	735a      	strb	r2, [r3, #13]
    cfg.D8[YAW] = 0;
 8006b1a:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <resetConf+0x32c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	75da      	strb	r2, [r3, #23]
    cfg.P8[PIDALT] = 50;
 8006b20:	4b2f      	ldr	r3, [pc, #188]	; (8006be0 <resetConf+0x32c>)
 8006b22:	2232      	movs	r2, #50	; 0x32
 8006b24:	711a      	strb	r2, [r3, #4]
    cfg.I8[PIDALT] = 0;
 8006b26:	4b2e      	ldr	r3, [pc, #184]	; (8006be0 <resetConf+0x32c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	739a      	strb	r2, [r3, #14]
    cfg.D8[PIDALT] = 0;
 8006b2c:	4b2c      	ldr	r3, [pc, #176]	; (8006be0 <resetConf+0x32c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	761a      	strb	r2, [r3, #24]
    cfg.P8[PIDPOS] = 11; // POSHOLD_P * 100;
 8006b32:	4b2b      	ldr	r3, [pc, #172]	; (8006be0 <resetConf+0x32c>)
 8006b34:	220b      	movs	r2, #11
 8006b36:	715a      	strb	r2, [r3, #5]
    cfg.I8[PIDPOS] = 0; // POSHOLD_I * 100;
 8006b38:	4b29      	ldr	r3, [pc, #164]	; (8006be0 <resetConf+0x32c>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	73da      	strb	r2, [r3, #15]
    cfg.D8[PIDPOS] = 0;
 8006b3e:	4b28      	ldr	r3, [pc, #160]	; (8006be0 <resetConf+0x32c>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	765a      	strb	r2, [r3, #25]
    cfg.P8[PIDPOSR] = 20; // POSHOLD_RATE_P * 10;
 8006b44:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <resetConf+0x32c>)
 8006b46:	2214      	movs	r2, #20
 8006b48:	719a      	strb	r2, [r3, #6]
    cfg.I8[PIDPOSR] = 8; // POSHOLD_RATE_I * 100;
 8006b4a:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <resetConf+0x32c>)
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	741a      	strb	r2, [r3, #16]
    cfg.D8[PIDPOSR] = 45; // POSHOLD_RATE_D * 1000;
 8006b50:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <resetConf+0x32c>)
 8006b52:	222d      	movs	r2, #45	; 0x2d
 8006b54:	769a      	strb	r2, [r3, #26]
    cfg.P8[PIDNAVR] = 14; // NAV_P * 10;
 8006b56:	4b22      	ldr	r3, [pc, #136]	; (8006be0 <resetConf+0x32c>)
 8006b58:	220e      	movs	r2, #14
 8006b5a:	71da      	strb	r2, [r3, #7]
    cfg.I8[PIDNAVR] = 20; // NAV_I * 100;
 8006b5c:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <resetConf+0x32c>)
 8006b5e:	2214      	movs	r2, #20
 8006b60:	745a      	strb	r2, [r3, #17]
    cfg.D8[PIDNAVR] = 80; // NAV_D * 1000;
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <resetConf+0x32c>)
 8006b64:	2250      	movs	r2, #80	; 0x50
 8006b66:	76da      	strb	r2, [r3, #27]
    cfg.P8[PIDLEVEL] = 90;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <resetConf+0x32c>)
 8006b6a:	225a      	movs	r2, #90	; 0x5a
 8006b6c:	721a      	strb	r2, [r3, #8]
    cfg.I8[PIDLEVEL] = 10;
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <resetConf+0x32c>)
 8006b70:	220a      	movs	r2, #10
 8006b72:	749a      	strb	r2, [r3, #18]
    cfg.D8[PIDLEVEL] = 100;
 8006b74:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <resetConf+0x32c>)
 8006b76:	2264      	movs	r2, #100	; 0x64
 8006b78:	771a      	strb	r2, [r3, #28]
    cfg.P8[PIDMAG] = 40;
 8006b7a:	4b19      	ldr	r3, [pc, #100]	; (8006be0 <resetConf+0x32c>)
 8006b7c:	2228      	movs	r2, #40	; 0x28
 8006b7e:	725a      	strb	r2, [r3, #9]
    cfg.P8[PIDVEL] = 120;
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <resetConf+0x32c>)
 8006b82:	2278      	movs	r2, #120	; 0x78
 8006b84:	729a      	strb	r2, [r3, #10]
    cfg.I8[PIDVEL] = 45;
 8006b86:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <resetConf+0x32c>)
 8006b88:	222d      	movs	r2, #45	; 0x2d
 8006b8a:	751a      	strb	r2, [r3, #20]
    cfg.D8[PIDVEL] = 1;
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <resetConf+0x32c>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	779a      	strb	r2, [r3, #30]
    cfg.rcRate8 = 90;
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <resetConf+0x32c>)
 8006b94:	225a      	movs	r2, #90	; 0x5a
 8006b96:	77da      	strb	r2, [r3, #31]
    cfg.rcExpo8 = 65;
 8006b98:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <resetConf+0x32c>)
 8006b9a:	2241      	movs	r2, #65	; 0x41
 8006b9c:	f883 2020 	strb.w	r2, [r3, #32]
    cfg.yawRate = 0;
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <resetConf+0x32c>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    cfg.dynThrPID = 0;
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <resetConf+0x32c>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    cfg.tpa_breakpoint = 1500;
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <resetConf+0x32c>)
 8006bb2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    cfg.thrMid8 = 50;
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <resetConf+0x32c>)
 8006bba:	2232      	movs	r2, #50	; 0x32
 8006bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    cfg.thrExpo8 = 0;
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <resetConf+0x32c>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    // for (i = 0; i < CHECKBOXITEMS; i++)
    //     cfg.activate[i] = 0;
    cfg.angleTrim[0] = 0;
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <resetConf+0x32c>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    cfg.angleTrim[1] = 0;
 8006bce:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <resetConf+0x32c>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006bd4:	e008      	b.n	8006be8 <resetConf+0x334>
 8006bd6:	bf00      	nop
 8006bd8:	0802773c 	.word	0x0802773c
 8006bdc:	20000848 	.word	0x20000848
 8006be0:	20000db4 	.word	0x20000db4
 8006be4:	20001698 	.word	0x20001698
    cfg.locked_in = 0;
 8006be8:	4b8e      	ldr	r3, [pc, #568]	; (8006e24 <resetConf+0x570>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cfg.mag_declination = 0;    // For example, -6deg 37min, = -637 Japan, format is [sign]dddmm (degreesminutes) default is zero.
 8006bf0:	4b8c      	ldr	r3, [pc, #560]	; (8006e24 <resetConf+0x570>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    cfg.acc_lpf_factor = 4;
 8006bf6:	4b8b      	ldr	r3, [pc, #556]	; (8006e24 <resetConf+0x570>)
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    cfg.accz_deadband = 40;
 8006bfe:	4b89      	ldr	r3, [pc, #548]	; (8006e24 <resetConf+0x570>)
 8006c00:	2228      	movs	r2, #40	; 0x28
 8006c02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    cfg.accxy_deadband = 40;
 8006c06:	4b87      	ldr	r3, [pc, #540]	; (8006e24 <resetConf+0x570>)
 8006c08:	2228      	movs	r2, #40	; 0x28
 8006c0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    cfg.baro_tab_size = 21;
 8006c0e:	4b85      	ldr	r3, [pc, #532]	; (8006e24 <resetConf+0x570>)
 8006c10:	2215      	movs	r2, #21
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    cfg.baro_noise_lpf = 0.6f;
 8006c16:	4b83      	ldr	r3, [pc, #524]	; (8006e24 <resetConf+0x570>)
 8006c18:	4a83      	ldr	r2, [pc, #524]	; (8006e28 <resetConf+0x574>)
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
    cfg.baro_cf_vel = 0.985f;
 8006c1c:	4b81      	ldr	r3, [pc, #516]	; (8006e24 <resetConf+0x570>)
 8006c1e:	4a83      	ldr	r2, [pc, #524]	; (8006e2c <resetConf+0x578>)
 8006c20:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg.baro_cf_alt = 0.965f;
 8006c22:	4b80      	ldr	r3, [pc, #512]	; (8006e24 <resetConf+0x570>)
 8006c24:	4a82      	ldr	r2, [pc, #520]	; (8006e30 <resetConf+0x57c>)
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40
    cfg.accz_lpf_cutoff = 5.0f;
 8006c28:	4b7e      	ldr	r3, [pc, #504]	; (8006e24 <resetConf+0x570>)
 8006c2a:	4a82      	ldr	r2, [pc, #520]	; (8006e34 <resetConf+0x580>)
 8006c2c:	645a      	str	r2, [r3, #68]	; 0x44
    cfg.acc_unarmedcal = 1;
 8006c2e:	4b7d      	ldr	r3, [pc, #500]	; (8006e24 <resetConf+0x570>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    cfg.small_angle = 25;
 8006c36:	4b7b      	ldr	r3, [pc, #492]	; (8006e24 <resetConf+0x570>)
 8006c38:	2219      	movs	r2, #25
 8006c3a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    // Radio
    parseRcChannels( "AETR123456789LMNOP" );    //18 channels max
 8006c3e:	487e      	ldr	r0, [pc, #504]	; (8006e38 <resetConf+0x584>)
 8006c40:	f7ff fbba 	bl	80063b8 <parseRcChannels>
    cfg.deadband = 0;
 8006c44:	4b77      	ldr	r3, [pc, #476]	; (8006e24 <resetConf+0x570>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    cfg.yawdeadband = 0;
 8006c4c:	4b75      	ldr	r3, [pc, #468]	; (8006e24 <resetConf+0x570>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    cfg.alt_hold_throttle_neutral = 40;
 8006c54:	4b73      	ldr	r3, [pc, #460]	; (8006e24 <resetConf+0x570>)
 8006c56:	2228      	movs	r2, #40	; 0x28
 8006c58:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    cfg.alt_hold_fast_change = 1;
 8006c5c:	4b71      	ldr	r3, [pc, #452]	; (8006e24 <resetConf+0x570>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
    cfg.throttle_correction_value = 0;      // could 10 with althold or 40 for fpv
 8006c64:	4b6f      	ldr	r3, [pc, #444]	; (8006e24 <resetConf+0x570>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    cfg.throttle_correction_angle = 800;    // could be 80.0 deg with atlhold or 45.0 for fpv
 8006c6c:	4b6d      	ldr	r3, [pc, #436]	; (8006e24 <resetConf+0x570>)
 8006c6e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006c72:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

    // Failsafe Variables
    cfg.failsafe_delay = 10;                // 1sec
 8006c76:	4b6b      	ldr	r3, [pc, #428]	; (8006e24 <resetConf+0x570>)
 8006c78:	220a      	movs	r2, #10
 8006c7a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
    cfg.failsafe_off_delay = 200;           // 20sec
 8006c7e:	4b69      	ldr	r3, [pc, #420]	; (8006e24 <resetConf+0x570>)
 8006c80:	22c8      	movs	r2, #200	; 0xc8
 8006c82:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    cfg.failsafe_throttle = 1200;           // decent default which should always be below hover throttle for people.
 8006c86:	4b67      	ldr	r3, [pc, #412]	; (8006e24 <resetConf+0x570>)
 8006c88:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006c8c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    cfg.failsafe_detect_threshold = 985;    // any of first 4 channels below this value will trigger failsafe
 8006c90:	4b64      	ldr	r3, [pc, #400]	; (8006e24 <resetConf+0x570>)
 8006c92:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006c96:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    // servos
    for (i = 0; i < 8; i++) {
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e032      	b.n	8006d06 <resetConf+0x452>
        cfg.servoConf[i].min = 1020;
 8006ca0:	4960      	ldr	r1, [pc, #384]	; (8006e24 <resetConf+0x570>)
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	440b      	add	r3, r1
 8006cae:	33b8      	adds	r3, #184	; 0xb8
 8006cb0:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8006cb4:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].max = 2000;
 8006cb6:	495b      	ldr	r1, [pc, #364]	; (8006e24 <resetConf+0x570>)
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	440b      	add	r3, r1
 8006cc4:	33ba      	adds	r3, #186	; 0xba
 8006cc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006cca:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].middle = 1500;
 8006ccc:	4955      	ldr	r1, [pc, #340]	; (8006e24 <resetConf+0x570>)
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	440b      	add	r3, r1
 8006cda:	33bc      	adds	r3, #188	; 0xbc
 8006cdc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ce0:	801a      	strh	r2, [r3, #0]
        cfg.servoConf[i].rate = servoRates[i];
 8006ce2:	1d3a      	adds	r2, r7, #4
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f993 0000 	ldrsb.w	r0, [r3]
 8006cec:	494d      	ldr	r1, [pc, #308]	; (8006e24 <resetConf+0x570>)
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	440b      	add	r3, r1
 8006cfa:	33be      	adds	r3, #190	; 0xbe
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++) {
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b07      	cmp	r3, #7
 8006d0a:	ddc9      	ble.n	8006ca0 <resetConf+0x3ec>
    }

    cfg.yaw_direction = 1;
 8006d0c:	4b45      	ldr	r3, [pc, #276]	; (8006e24 <resetConf+0x570>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    cfg.tri_unarmed_servo = 1;
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <resetConf+0x570>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f

    // gimbal
    cfg.gimbal_flags = GIMBAL_NORMAL;
 8006d1c:	4b41      	ldr	r3, [pc, #260]	; (8006e24 <resetConf+0x570>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // gps/nav stuff
    cfg.gps_wp_radius = 200;
 8006d24:	4b3f      	ldr	r3, [pc, #252]	; (8006e24 <resetConf+0x570>)
 8006d26:	22c8      	movs	r2, #200	; 0xc8
 8006d28:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    cfg.gps_lpf = 20;
 8006d2c:	4b3d      	ldr	r3, [pc, #244]	; (8006e24 <resetConf+0x570>)
 8006d2e:	2214      	movs	r2, #20
 8006d30:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
    cfg.nav_slew_rate = 30;
 8006d34:	4b3b      	ldr	r3, [pc, #236]	; (8006e24 <resetConf+0x570>)
 8006d36:	221e      	movs	r2, #30
 8006d38:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    cfg.nav_controls_heading = 1;
 8006d3c:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <resetConf+0x570>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
    cfg.nav_speed_min = 100;
 8006d44:	4b37      	ldr	r3, [pc, #220]	; (8006e24 <resetConf+0x570>)
 8006d46:	2264      	movs	r2, #100	; 0x64
 8006d48:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    cfg.nav_speed_max = 300;
 8006d4c:	4b35      	ldr	r3, [pc, #212]	; (8006e24 <resetConf+0x570>)
 8006d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d52:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    cfg.ap_mode = 40;
 8006d56:	4b33      	ldr	r3, [pc, #204]	; (8006e24 <resetConf+0x570>)
 8006d58:	2228      	movs	r2, #40	; 0x28
 8006d5a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    // fw stuff
    cfg.fw_gps_maxcorr = 20;
 8006d5e:	4b31      	ldr	r3, [pc, #196]	; (8006e24 <resetConf+0x570>)
 8006d60:	2214      	movs	r2, #20
 8006d62:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    cfg.fw_gps_rudder = 15;
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <resetConf+0x570>)
 8006d68:	220f      	movs	r2, #15
 8006d6a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    cfg.fw_gps_maxclimb = 15;
 8006d6e:	4b2d      	ldr	r3, [pc, #180]	; (8006e24 <resetConf+0x570>)
 8006d70:	220f      	movs	r2, #15
 8006d72:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cfg.fw_gps_maxdive = 15;
 8006d76:	4b2b      	ldr	r3, [pc, #172]	; (8006e24 <resetConf+0x570>)
 8006d78:	220f      	movs	r2, #15
 8006d7a:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    cfg.fw_climb_throttle = 1900;
 8006d7e:	4b29      	ldr	r3, [pc, #164]	; (8006e24 <resetConf+0x570>)
 8006d80:	f240 726c 	movw	r2, #1900	; 0x76c
 8006d84:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    cfg.fw_cruise_throttle = 1500;
 8006d88:	4b26      	ldr	r3, [pc, #152]	; (8006e24 <resetConf+0x570>)
 8006d8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d8e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    cfg.fw_idle_throttle = 1300;
 8006d92:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <resetConf+0x570>)
 8006d94:	f240 5214 	movw	r2, #1300	; 0x514
 8006d98:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    cfg.fw_scaler_throttle = 8;
 8006d9c:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <resetConf+0x570>)
 8006d9e:	2208      	movs	r2, #8
 8006da0:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    cfg.fw_roll_comp = 100;
 8006da4:	4b1f      	ldr	r3, [pc, #124]	; (8006e24 <resetConf+0x570>)
 8006da6:	2264      	movs	r2, #100	; 0x64
 8006da8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    cfg.fw_cruise_distance = 500;
 8006dac:	4b1d      	ldr	r3, [pc, #116]	; (8006e24 <resetConf+0x570>)
 8006dae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006db2:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    cfg.fw_rth_alt = 50;
 8006db6:	4b1b      	ldr	r3, [pc, #108]	; (8006e24 <resetConf+0x570>)
 8006db8:	2232      	movs	r2, #50	; 0x32
 8006dba:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    // control stuff
    mcfg.reboot_character = 'R';
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <resetConf+0x588>)
 8006dc0:	2252      	movs	r2, #82	; 0x52
 8006dc2:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569

    // custom mixer. clear by defaults.
    for (i = 0; i < MAX_MOTORS; i++)
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e00a      	b.n	8006de2 <resetConf+0x52e>
        mcfg.customMixer[i].throttle = 0.0f;
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <resetConf+0x588>)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f04f 0200 	mov.w	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b0b      	cmp	r3, #11
 8006de6:	ddf1      	ble.n	8006dcc <resetConf+0x518>

    // copy default config into all 3 profiles
    for (i = 0; i < 3; i++)
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e011      	b.n	8006e12 <resetConf+0x55e>
        memcpy(&mcfg.profile[i], &cfg, sizeof(config_t));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
 8006df8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8006dfc:	4a0f      	ldr	r2, [pc, #60]	; (8006e3c <resetConf+0x588>)
 8006dfe:	4413      	add	r3, r2
 8006e00:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e04:	4907      	ldr	r1, [pc, #28]	; (8006e24 <resetConf+0x570>)
 8006e06:	4618      	mov	r0, r3
 8006e08:	f01c f9e0 	bl	80231cc <memcpy>
    for (i = 0; i < 3; i++)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	ddea      	ble.n	8006dee <resetConf+0x53a>
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000db4 	.word	0x20000db4
 8006e28:	3f19999a 	.word	0x3f19999a
 8006e2c:	3f7c28f6 	.word	0x3f7c28f6
 8006e30:	3f770a3d 	.word	0x3f770a3d
 8006e34:	40a00000 	.word	0x40a00000
 8006e38:	08027728 	.word	0x08027728
 8006e3c:	20000848 	.word	0x20000848

08006e40 <sensors>:

bool sensors(uint32_t mask)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
    return (enabledSensors & mask) != 0;
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <sensors+0x28>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000eec 	.word	0x20000eec

08006e6c <sensorsSet>:

void sensorsSet(uint32_t mask)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
    enabledSensors |= mask;
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <sensorsSet+0x20>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	4a03      	ldr	r2, [pc, #12]	; (8006e8c <sensorsSet+0x20>)
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000eec 	.word	0x20000eec

08006e90 <sensorsClear>:

void sensorsClear(uint32_t mask)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
    enabledSensors &= ~(mask);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <sensorsClear+0x24>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <sensorsClear+0x24>)
 8006ea4:	6013      	str	r3, [r2, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000eec 	.word	0x20000eec

08006eb8 <sensorsMask>:

uint32_t sensorsMask(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
    return enabledSensors;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <sensorsMask+0x14>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20000eec 	.word	0x20000eec

08006ed0 <feature>:

bool feature(uint32_t mask)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
    return (mcfg.enabledFeatures & mask) != 0;
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <feature+0x28>)
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	20000848 	.word	0x20000848

08006efc <featureSet>:

void featureSet(uint32_t mask)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures |= mask;
 8006f04:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <featureSet+0x20>)
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <featureSet+0x20>)
 8006f0e:	6093      	str	r3, [r2, #8]
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	20000848 	.word	0x20000848

08006f20 <featureClear>:

void featureClear(uint32_t mask)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
    mcfg.enabledFeatures &= ~(mask);
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <featureClear+0x24>)
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	4013      	ands	r3, r2
 8006f32:	4a04      	ldr	r2, [pc, #16]	; (8006f44 <featureClear+0x24>)
 8006f34:	6093      	str	r3, [r2, #8]
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000848 	.word	0x20000848

08006f48 <featureClearAll>:

void featureClearAll()
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
    mcfg.enabledFeatures = 0;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <featureClearAll+0x14>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	20000848 	.word	0x20000848

08006f60 <featureMask>:

uint32_t featureMask(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
    return mcfg.enabledFeatures;
 8006f64:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <featureMask+0x14>)
 8006f66:	689b      	ldr	r3, [r3, #8]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000848 	.word	0x20000848

08006f78 <fw_nav_reset>:
static int16_t speedBoost;
static int16_t altHist[GPS_UPD_HZ + 1];     // shift register
static int16_t navDif[GPS_UPD_HZ + 1];      // shift register

void fw_nav_reset(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
    uint8_t i;

    navErrorI = 0;
 8006f7e:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <fw_nav_reset+0x5c>)
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    altErrorI = 0;
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <fw_nav_reset+0x60>)
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
    lastAltDiff = 0;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <fw_nav_reset+0x64>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	801a      	strh	r2, [r3, #0]
    lastnavDiff = 0;
 8006f94:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <fw_nav_reset+0x68>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	801a      	strh	r2, [r3, #0]
    speedBoost = 0;
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <fw_nav_reset+0x6c>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	71fb      	strb	r3, [r7, #7]
 8006fa4:	e00c      	b.n	8006fc0 <fw_nav_reset+0x48>
        altHist[i] = 0;
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	4a0f      	ldr	r2, [pc, #60]	; (8006fe8 <fw_nav_reset+0x70>)
 8006faa:	2100      	movs	r1, #0
 8006fac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navDif[i] = 0;
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	4a0e      	ldr	r2, [pc, #56]	; (8006fec <fw_nav_reset+0x74>)
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < GPS_UPD_HZ; i++) {
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	71fb      	strb	r3, [r7, #7]
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d9ef      	bls.n	8006fa6 <fw_nav_reset+0x2e>
    }
}
 8006fc6:	bf00      	nop
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000ef4 	.word	0x20000ef4
 8006fd8:	20000ef8 	.word	0x20000ef8
 8006fdc:	20000efc 	.word	0x20000efc
 8006fe0:	20000efe 	.word	0x20000efe
 8006fe4:	20000f00 	.word	0x20000f00
 8006fe8:	20000f04 	.word	0x20000f04
 8006fec:	20000f10 	.word	0x20000f10

08006ff0 <fw_FlyTo>:

void fw_FlyTo(void) // PatrikE CruiseMode version
{
 8006ff0:	b5b0      	push	{r4, r5, r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
    float wp_lat_diff, wp_lon_diff, scaler;
    int32_t holdHeading = GPS_ground_course / 10;
 8006ff6:	4b48      	ldr	r3, [pc, #288]	; (8007118 <fw_FlyTo+0x128>)
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	4a48      	ldr	r2, [pc, #288]	; (800711c <fw_FlyTo+0x12c>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	08db      	lsrs	r3, r3, #3
 8007002:	b29b      	uxth	r3, r3
 8007004:	60fb      	str	r3, [r7, #12]
    if (holdHeading > 180)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2bb4      	cmp	r3, #180	; 0xb4
 800700a:	dd03      	ble.n	8007014 <fw_FlyTo+0x24>
        holdHeading -= 360;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007012:	60fb      	str	r3, [r7, #12]
    scaler = (GEO_SKALEFACT / GPS_scaleLonDown) * cfg.fw_cruise_distance;
 8007014:	4b42      	ldr	r3, [pc, #264]	; (8007120 <fw_FlyTo+0x130>)
 8007016:	edd3 7a00 	vldr	s15, [r3]
 800701a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8007124 <fw_FlyTo+0x134>
 800701e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007022:	4b41      	ldr	r3, [pc, #260]	; (8007128 <fw_FlyTo+0x138>)
 8007024:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007034:	edc7 7a02 	vstr	s15, [r7, #8]
    wp_lat_diff = cos(holdHeading * 0.0174532925f);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007042:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800712c <fw_FlyTo+0x13c>
 8007046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800704a:	ee17 0a90 	vmov	r0, s15
 800704e:	f7f9 fa2f 	bl	80004b0 <__aeabi_f2d>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	ec43 2b10 	vmov	d0, r2, r3
 800705a:	f01c faf9 	bl	8023650 <cos>
 800705e:	ec53 2b10 	vmov	r2, r3, d0
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	f7f9 fd5d 	bl	8000b24 <__aeabi_d2f>
 800706a:	4603      	mov	r3, r0
 800706c:	607b      	str	r3, [r7, #4]
    wp_lon_diff = sin(holdHeading * 0.0174532925f) * GPS_scaleLonDown;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007078:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800712c <fw_FlyTo+0x13c>
 800707c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007080:	ee17 0a90 	vmov	r0, s15
 8007084:	f7f9 fa14 	bl	80004b0 <__aeabi_f2d>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	ec43 2b10 	vmov	d0, r2, r3
 8007090:	f01c fb32 	bl	80236f8 <sin>
 8007094:	ec55 4b10 	vmov	r4, r5, d0
 8007098:	4b21      	ldr	r3, [pc, #132]	; (8007120 <fw_FlyTo+0x130>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f7f9 fa07 	bl	80004b0 <__aeabi_f2d>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 fa59 	bl	8000560 <__aeabi_dmul>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	f7f9 fd35 	bl	8000b24 <__aeabi_d2f>
 80070ba:	4603      	mov	r3, r0
 80070bc:	603b      	str	r3, [r7, #0]
    GPS_WP[LAT] += wp_lat_diff * scaler;
 80070be:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <fw_FlyTo+0x140>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80070ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80070d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070de:	ee17 2a90 	vmov	r2, s15
 80070e2:	4b13      	ldr	r3, [pc, #76]	; (8007130 <fw_FlyTo+0x140>)
 80070e4:	601a      	str	r2, [r3, #0]
    GPS_WP[LON] += wp_lon_diff * scaler;
 80070e6:	4b12      	ldr	r3, [pc, #72]	; (8007130 <fw_FlyTo+0x140>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070f2:	edd7 6a00 	vldr	s13, [r7]
 80070f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80070fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007106:	ee17 2a90 	vmov	r2, s15
 800710a:	4b09      	ldr	r3, [pc, #36]	; (8007130 <fw_FlyTo+0x140>)
 800710c:	605a      	str	r2, [r3, #4]
}
 800710e:	bf00      	nop
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bdb0      	pop	{r4, r5, r7, pc}
 8007116:	bf00      	nop
 8007118:	200017a6 	.word	0x200017a6
 800711c:	cccccccd 	.word	0xcccccccd
 8007120:	20000028 	.word	0x20000028
 8007124:	42b3a9fc 	.word	0x42b3a9fc
 8007128:	20000db4 	.word	0x20000db4
 800712c:	3c8efa35 	.word	0x3c8efa35
 8007130:	2000129c 	.word	0x2000129c

08007134 <fw_nav>:

void fw_nav(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af00      	add	r7, sp, #0
    int16_t GPS_Heading = GPS_ground_course;    // Store current bearing
 800713a:	4b56      	ldr	r3, [pc, #344]	; (8007294 <fw_nav+0x160>)
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	843b      	strh	r3, [r7, #32]
    int16_t Current_Heading;                    // Store current bearing
    int16_t altDiff = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	83fb      	strh	r3, [r7, #30]
    uint8_t RTH_Alt = cfg.fw_rth_alt;           // Min Altitude to keep during RTH. (Max 200m)
 8007144:	4b54      	ldr	r3, [pc, #336]	; (8007298 <fw_nav+0x164>)
 8007146:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800714a:	777b      	strb	r3, [r7, #29]
    int16_t delta[2] = { 0, 0 };                // D-Term
 800714c:	2300      	movs	r3, #0
 800714e:	80bb      	strh	r3, [r7, #4]
 8007150:	2300      	movs	r3, #0
 8007152:	80fb      	strh	r3, [r7, #6]
    static int16_t NAV_deltaSum, ALT_deltaSum, GPS_FwTarget, GPS_AltErr, NAV_Thro;
    int16_t TX_Thro = rcData[THROTTLE];         // Read and store Throttle pos.
 8007154:	4b51      	ldr	r3, [pc, #324]	; (800729c <fw_nav+0x168>)
 8007156:	88db      	ldrh	r3, [r3, #6]
 8007158:	837b      	strh	r3, [r7, #26]
    // Nav timer
    static uint32_t gpsTimer = 0;
    static uint16_t gpsFreq = 1000 / GPS_UPD_HZ;    // 5HZ 200ms DT

    // Calculated Altitude over home in meters
    int16_t currAlt = GPS_altitude - GPS_home[ALT];         // GPS
 800715a:	4b51      	ldr	r3, [pc, #324]	; (80072a0 <fw_nav+0x16c>)
 800715c:	881a      	ldrh	r2, [r3, #0]
 800715e:	4b51      	ldr	r3, [pc, #324]	; (80072a4 <fw_nav+0x170>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	b29b      	uxth	r3, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	833b      	strh	r3, [r7, #24]
    int16_t navTargetAlt = GPS_hold[ALT] - GPS_home[ALT];   // Diff from homeAlt.
 800716a:	4b4f      	ldr	r3, [pc, #316]	; (80072a8 <fw_nav+0x174>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	b29a      	uxth	r2, r3
 8007170:	4b4c      	ldr	r3, [pc, #304]	; (80072a4 <fw_nav+0x170>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	b29b      	uxth	r3, r3
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	b29b      	uxth	r3, r3
 800717a:	82fb      	strh	r3, [r7, #22]

    // Handles ReSetting RTH alt if rth is enabled to low!
    if (f.CLIMBOUT_FW && currAlt < RTH_Alt)
 800717c:	4b4b      	ldr	r3, [pc, #300]	; (80072ac <fw_nav+0x178>)
 800717e:	7cdb      	ldrb	r3, [r3, #19]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <fw_nav+0x66>
 8007184:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007188:	7f7b      	ldrb	r3, [r7, #29]
 800718a:	429a      	cmp	r2, r3
 800718c:	da05      	bge.n	800719a <fw_nav+0x66>
        GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;
 800718e:	4b45      	ldr	r3, [pc, #276]	; (80072a4 <fw_nav+0x170>)
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	7f7b      	ldrb	r3, [r7, #29]
 8007194:	4413      	add	r3, r2
 8007196:	4a44      	ldr	r2, [pc, #272]	; (80072a8 <fw_nav+0x174>)
 8007198:	6093      	str	r3, [r2, #8]

    // Wrap GPS_Heading 1800
    GPS_Heading = wrap_18000(GPS_Heading * 10) / 10;
 800719a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4618      	mov	r0, r3
 80071a8:	f002 f9c8 	bl	800953c <wrap_18000>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4a40      	ldr	r2, [pc, #256]	; (80072b0 <fw_nav+0x17c>)
 80071b0:	fb82 1203 	smull	r1, r2, r2, r3
 80071b4:	1092      	asrs	r2, r2, #2
 80071b6:	17db      	asrs	r3, r3, #31
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	843b      	strh	r3, [r7, #32]

    // Only use MAG if Mag and GPS_Heading aligns
    if (sensors(SENSOR_MAG)) {
 80071bc:	2008      	movs	r0, #8
 80071be:	f7ff fe3f 	bl	8006e40 <sensors>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d024      	beq.n	8007212 <fw_nav+0xde>
        if (abs(heading - (GPS_Heading / 10)) > 10 && GPS_speed > 200)
 80071c8:	4b3a      	ldr	r3, [pc, #232]	; (80072b4 <fw_nav+0x180>)
 80071ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ce:	4619      	mov	r1, r3
 80071d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80071d4:	4a36      	ldr	r2, [pc, #216]	; (80072b0 <fw_nav+0x17c>)
 80071d6:	fb82 0203 	smull	r0, r2, r2, r3
 80071da:	1092      	asrs	r2, r2, #2
 80071dc:	17db      	asrs	r3, r3, #31
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	1acb      	subs	r3, r1, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfb8      	it	lt
 80071e8:	425b      	neglt	r3, r3
 80071ea:	2b0a      	cmp	r3, #10
 80071ec:	dd0d      	ble.n	800720a <fw_nav+0xd6>
 80071ee:	4b32      	ldr	r3, [pc, #200]	; (80072b8 <fw_nav+0x184>)
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	2bc8      	cmp	r3, #200	; 0xc8
 80071f4:	d909      	bls.n	800720a <fw_nav+0xd6>
            Current_Heading = GPS_Heading / 10;
 80071f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80071fa:	4a2d      	ldr	r2, [pc, #180]	; (80072b0 <fw_nav+0x17c>)
 80071fc:	fb82 1203 	smull	r1, r2, r2, r3
 8007200:	1092      	asrs	r2, r2, #2
 8007202:	17db      	asrs	r3, r3, #31
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007208:	e00c      	b.n	8007224 <fw_nav+0xf0>
        else
            Current_Heading = heading;
 800720a:	4b2a      	ldr	r3, [pc, #168]	; (80072b4 <fw_nav+0x180>)
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007210:	e008      	b.n	8007224 <fw_nav+0xf0>
    } else
        Current_Heading = GPS_Heading / 10;
 8007212:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007216:	4a26      	ldr	r2, [pc, #152]	; (80072b0 <fw_nav+0x17c>)
 8007218:	fb82 1203 	smull	r1, r2, r2, r3
 800721c:	1092      	asrs	r2, r2, #2
 800721e:	17db      	asrs	r3, r3, #31
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	84fb      	strh	r3, [r7, #38]	; 0x26

    // Calculate Navigation errors
    GPS_FwTarget = nav_bearing / 100;
 8007224:	4b25      	ldr	r3, [pc, #148]	; (80072bc <fw_nav+0x188>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a25      	ldr	r2, [pc, #148]	; (80072c0 <fw_nav+0x18c>)
 800722a:	fb82 1203 	smull	r1, r2, r2, r3
 800722e:	1152      	asrs	r2, r2, #5
 8007230:	17db      	asrs	r3, r3, #31
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	b21a      	sxth	r2, r3
 8007236:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <fw_nav+0x190>)
 8007238:	801a      	strh	r2, [r3, #0]
    navDiff = GPS_FwTarget - Current_Heading;   // Navigation Error
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <fw_nav+0x190>)
 800723c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007240:	b29a      	uxth	r2, r3
 8007242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	b29b      	uxth	r3, r3
 8007248:	84bb      	strh	r3, [r7, #36]	; 0x24
    GPS_AltErr = currAlt - navTargetAlt;        // Altitude error Negative means you're to low
 800724a:	8b3a      	ldrh	r2, [r7, #24]
 800724c:	8afb      	ldrh	r3, [r7, #22]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	b29b      	uxth	r3, r3
 8007252:	b21a      	sxth	r2, r3
 8007254:	4b1c      	ldr	r3, [pc, #112]	; (80072c8 <fw_nav+0x194>)
 8007256:	801a      	strh	r2, [r3, #0]

    // Start of NavTimer
    if (pif_cumulative_timer1ms - gpsTimer >= gpsFreq) {
 8007258:	4b1c      	ldr	r3, [pc, #112]	; (80072cc <fw_nav+0x198>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b1c      	ldr	r3, [pc, #112]	; (80072d0 <fw_nav+0x19c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <fw_nav+0x1a0>)
 8007264:	8812      	ldrh	r2, [r2, #0]
 8007266:	4293      	cmp	r3, r2
 8007268:	f0c0 83e9 	bcc.w	8007a3e <fw_nav+0x90a>
        gpsTimer = pif_cumulative_timer1ms;
 800726c:	4b17      	ldr	r3, [pc, #92]	; (80072cc <fw_nav+0x198>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <fw_nav+0x19c>)
 8007272:	6013      	str	r3, [r2, #0]

        // Throttle control
        // Deadpan for throttle at correct Alt.
        if (abs(GPS_AltErr) < 1) // Just cruise along in deadpan.
 8007274:	4b14      	ldr	r3, [pc, #80]	; (80072c8 <fw_nav+0x194>)
 8007276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800727a:	2b00      	cmp	r3, #0
 800727c:	bfb8      	it	lt
 800727e:	425b      	neglt	r3, r3
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d12a      	bne.n	80072dc <fw_nav+0x1a8>
            NAV_Thro = cfg.fw_cruise_throttle;
 8007286:	4b04      	ldr	r3, [pc, #16]	; (8007298 <fw_nav+0x164>)
 8007288:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800728c:	b21a      	sxth	r2, r3
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <fw_nav+0x1a4>)
 8007290:	801a      	strh	r2, [r3, #0]
 8007292:	e03f      	b.n	8007314 <fw_nav+0x1e0>
 8007294:	200017a6 	.word	0x200017a6
 8007298:	20000db4 	.word	0x20000db4
 800729c:	200016e8 	.word	0x200016e8
 80072a0:	2000179a 	.word	0x2000179a
 80072a4:	2000177c 	.word	0x2000177c
 80072a8:	20001788 	.word	0x20001788
 80072ac:	200016b0 	.word	0x200016b0
 80072b0:	66666667 	.word	0x66666667
 80072b4:	200019e6 	.word	0x200019e6
 80072b8:	2000179c 	.word	0x2000179c
 80072bc:	20001304 	.word	0x20001304
 80072c0:	51eb851f 	.word	0x51eb851f
 80072c4:	20000f1c 	.word	0x20000f1c
 80072c8:	20000f1e 	.word	0x20000f1e
 80072cc:	20001d60 	.word	0x20001d60
 80072d0:	20000f20 	.word	0x20000f20
 80072d4:	20000026 	.word	0x20000026
 80072d8:	20000f24 	.word	0x20000f24
        else
            // Add AltitudeError  and scale up with a factor to throttle
            NAV_Thro = constrain(cfg.fw_cruise_throttle - (GPS_AltErr * cfg.fw_scaler_throttle), cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 80072dc:	4b99      	ldr	r3, [pc, #612]	; (8007544 <fw_nav+0x410>)
 80072de:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 80072e2:	461a      	mov	r2, r3
 80072e4:	4b98      	ldr	r3, [pc, #608]	; (8007548 <fw_nav+0x414>)
 80072e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072ea:	4619      	mov	r1, r3
 80072ec:	4b95      	ldr	r3, [pc, #596]	; (8007544 <fw_nav+0x410>)
 80072ee:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	4a92      	ldr	r2, [pc, #584]	; (8007544 <fw_nav+0x410>)
 80072fa:	f8b2 212e 	ldrh.w	r2, [r2, #302]	; 0x12e
 80072fe:	4611      	mov	r1, r2
 8007300:	4a90      	ldr	r2, [pc, #576]	; (8007544 <fw_nav+0x410>)
 8007302:	f8b2 212a 	ldrh.w	r2, [r2, #298]	; 0x12a
 8007306:	4618      	mov	r0, r3
 8007308:	f7fc fc7e 	bl	8003c08 <constrain>
 800730c:	4603      	mov	r3, r0
 800730e:	b21a      	sxth	r2, r3
 8007310:	4b8e      	ldr	r3, [pc, #568]	; (800754c <fw_nav+0x418>)
 8007312:	801a      	strh	r2, [r3, #0]

        // Reset Climbout Flag when Alt have been reached
        if (f.CLIMBOUT_FW && GPS_AltErr >= 0)
 8007314:	4b8e      	ldr	r3, [pc, #568]	; (8007550 <fw_nav+0x41c>)
 8007316:	7cdb      	ldrb	r3, [r3, #19]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <fw_nav+0x1f8>
 800731c:	4b8a      	ldr	r3, [pc, #552]	; (8007548 <fw_nav+0x414>)
 800731e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007322:	2b00      	cmp	r3, #0
 8007324:	db02      	blt.n	800732c <fw_nav+0x1f8>
            f.CLIMBOUT_FW = 0;
 8007326:	4b8a      	ldr	r3, [pc, #552]	; (8007550 <fw_nav+0x41c>)
 8007328:	2200      	movs	r2, #0
 800732a:	74da      	strb	r2, [r3, #19]

        // Climb out before RTH
        if (f.GPS_HOME_MODE) {
 800732c:	4b88      	ldr	r3, [pc, #544]	; (8007550 <fw_nav+0x41c>)
 800732e:	79db      	ldrb	r3, [r3, #7]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02c      	beq.n	800738e <fw_nav+0x25a>
            if (f.CLIMBOUT_FW) {
 8007334:	4b86      	ldr	r3, [pc, #536]	; (8007550 <fw_nav+0x41c>)
 8007336:	7cdb      	ldrb	r3, [r3, #19]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d019      	beq.n	8007370 <fw_nav+0x23c>
                GPS_AltErr = -(cfg.fw_gps_maxclimb * 10);  // Max climbAngle
 800733c:	4b81      	ldr	r3, [pc, #516]	; (8007544 <fw_nav+0x410>)
 800733e:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	0352      	lsls	r2, r2, #13
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	0092      	lsls	r2, r2, #2
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	b29b      	uxth	r3, r3
 8007352:	b21a      	sxth	r2, r3
 8007354:	4b7c      	ldr	r3, [pc, #496]	; (8007548 <fw_nav+0x414>)
 8007356:	801a      	strh	r2, [r3, #0]
                NAV_Thro = cfg.fw_climb_throttle;          // Max Allowed Throttle
 8007358:	4b7a      	ldr	r3, [pc, #488]	; (8007544 <fw_nav+0x410>)
 800735a:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 800735e:	b21a      	sxth	r2, r3
 8007360:	4b7a      	ldr	r3, [pc, #488]	; (800754c <fw_nav+0x418>)
 8007362:	801a      	strh	r2, [r3, #0]
                if (currAlt < SAFE_NAV_ALT)
 8007364:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007368:	2b18      	cmp	r3, #24
 800736a:	dc01      	bgt.n	8007370 <fw_nav+0x23c>
                    navDiff = 0;                        // Force climb with Level Wings below safe Alt
 800736c:	2300      	movs	r3, #0
 800736e:	84bb      	strh	r3, [r7, #36]	; 0x24
            }

            if ((GPS_distanceToHome < SAFE_DECSCEND_ZONE) && currAlt > RTH_Alt)
 8007370:	4b78      	ldr	r3, [pc, #480]	; (8007554 <fw_nav+0x420>)
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b31      	cmp	r3, #49	; 0x31
 8007376:	d80a      	bhi.n	800738e <fw_nav+0x25a>
 8007378:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800737c:	7f7b      	ldrb	r3, [r7, #29]
 800737e:	429a      	cmp	r2, r3
 8007380:	dd05      	ble.n	800738e <fw_nav+0x25a>
                GPS_hold[ALT] = GPS_home[ALT] + RTH_Alt;    // Start descend to correct RTH Alt.
 8007382:	4b75      	ldr	r3, [pc, #468]	; (8007558 <fw_nav+0x424>)
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	7f7b      	ldrb	r3, [r7, #29]
 8007388:	4413      	add	r3, r2
 800738a:	4a74      	ldr	r2, [pc, #464]	; (800755c <fw_nav+0x428>)
 800738c:	6093      	str	r3, [r2, #8]
        }

        // Always DISARM when Home is within 10 meters if FC is in failsafe.
        if (f.FW_FAILSAFE_RTH_ENABLE && (GPS_distanceToHome < 10)) {
 800738e:	4b70      	ldr	r3, [pc, #448]	; (8007550 <fw_nav+0x41c>)
 8007390:	7c9b      	ldrb	r3, [r3, #18]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00e      	beq.n	80073b4 <fw_nav+0x280>
 8007396:	4b6f      	ldr	r3, [pc, #444]	; (8007554 <fw_nav+0x420>)
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	2b09      	cmp	r3, #9
 800739c:	d80a      	bhi.n	80073b4 <fw_nav+0x280>
            f.ARMED = 0;
 800739e:	4b6c      	ldr	r3, [pc, #432]	; (8007550 <fw_nav+0x41c>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	705a      	strb	r2, [r3, #1]
            f.CLIMBOUT_FW = 0;                  // Abort Climbout
 80073a4:	4b6a      	ldr	r3, [pc, #424]	; (8007550 <fw_nav+0x41c>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	74da      	strb	r2, [r3, #19]
            GPS_hold[ALT] = GPS_home[ALT] + 5;  // Come down
 80073aa:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <fw_nav+0x424>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	3305      	adds	r3, #5
 80073b0:	4a6a      	ldr	r2, [pc, #424]	; (800755c <fw_nav+0x428>)
 80073b2:	6093      	str	r3, [r2, #8]
        }

        // Filtering of navDiff around home to stop nervous servos
        if (GPS_distanceToHome < 10)
 80073b4:	4b67      	ldr	r3, [pc, #412]	; (8007554 <fw_nav+0x420>)
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	2b09      	cmp	r3, #9
 80073ba:	d80e      	bhi.n	80073da <fw_nav+0x2a6>
            navDiff *= 0.1f;
 80073bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073c8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8007560 <fw_nav+0x42c>
 80073cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80073d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073d4:	ee17 3a90 	vmov	r3, s15
 80073d8:	84bb      	strh	r3, [r7, #36]	; 0x24

        // Wrap Heading 180
        navDiff = wrap_18000(navDiff * 100) / 100;
 80073da:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80073de:	2264      	movs	r2, #100	; 0x64
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	4618      	mov	r0, r3
 80073e6:	f002 f8a9 	bl	800953c <wrap_18000>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4a5d      	ldr	r2, [pc, #372]	; (8007564 <fw_nav+0x430>)
 80073ee:	fb82 1203 	smull	r1, r2, r2, r3
 80073f2:	1152      	asrs	r2, r2, #5
 80073f4:	17db      	asrs	r3, r3, #31
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (abs(navDiff) > 170)
 80073fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb8      	it	lt
 8007402:	425b      	neglt	r3, r3
 8007404:	b29b      	uxth	r3, r3
 8007406:	2baa      	cmp	r3, #170	; 0xaa
 8007408:	d901      	bls.n	800740e <fw_nav+0x2da>
            navDiff = 175;      // Forced turn.
 800740a:	23af      	movs	r3, #175	; 0xaf
 800740c:	84bb      	strh	r3, [r7, #36]	; 0x24

        // PID for Navigating planes.
        navDT = (float) (pif_cumulative_timer1ms - nav_loopT) / 1000;
 800740e:	4b56      	ldr	r3, [pc, #344]	; (8007568 <fw_nav+0x434>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b56      	ldr	r3, [pc, #344]	; (800756c <fw_nav+0x438>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007420:	eddf 6a53 	vldr	s13, [pc, #332]	; 8007570 <fw_nav+0x43c>
 8007424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007428:	edc7 7a04 	vstr	s15, [r7, #16]
        nav_loopT = pif_cumulative_timer1ms;
 800742c:	4b4e      	ldr	r3, [pc, #312]	; (8007568 <fw_nav+0x434>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a4e      	ldr	r2, [pc, #312]	; (800756c <fw_nav+0x438>)
 8007432:	6013      	str	r3, [r2, #0]

        // Altitude PID
        if (abs(GPS_AltErr) <= 3)
 8007434:	4b44      	ldr	r3, [pc, #272]	; (8007548 <fw_nav+0x414>)
 8007436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfb8      	it	lt
 800743e:	425b      	neglt	r3, r3
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b03      	cmp	r3, #3
 8007444:	d809      	bhi.n	800745a <fw_nav+0x326>
            altErrorI *= navDT; // Remove I-Term in deadspan
 8007446:	4b4b      	ldr	r3, [pc, #300]	; (8007574 <fw_nav+0x440>)
 8007448:	ed93 7a00 	vldr	s14, [r3]
 800744c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007454:	4b47      	ldr	r3, [pc, #284]	; (8007574 <fw_nav+0x440>)
 8007456:	edc3 7a00 	vstr	s15, [r3]

        GPS_AltErr *= 10;
 800745a:	4b3b      	ldr	r3, [pc, #236]	; (8007548 <fw_nav+0x414>)
 800745c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007460:	b29b      	uxth	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	0092      	lsls	r2, r2, #2
 8007466:	4413      	add	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	b29b      	uxth	r3, r3
 800746c:	b21a      	sxth	r2, r3
 800746e:	4b36      	ldr	r3, [pc, #216]	; (8007548 <fw_nav+0x414>)
 8007470:	801a      	strh	r2, [r3, #0]
        altErrorI += (GPS_AltErr * altPID_PARAM.kI) * navDT;    // Acumulate I from PIDPOSR
 8007472:	4b35      	ldr	r3, [pc, #212]	; (8007548 <fw_nav+0x414>)
 8007474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007480:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <fw_nav+0x444>)
 8007482:	edd3 7a01 	vldr	s15, [r3, #4]
 8007486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800748a:	edd7 7a04 	vldr	s15, [r7, #16]
 800748e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007492:	4b38      	ldr	r3, [pc, #224]	; (8007574 <fw_nav+0x440>)
 8007494:	edd3 7a00 	vldr	s15, [r3]
 8007498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800749c:	4b35      	ldr	r3, [pc, #212]	; (8007574 <fw_nav+0x440>)
 800749e:	edc3 7a00 	vstr	s15, [r3]
        altErrorI = constrain(altErrorI, -500, 500);            // limits I term influence
 80074a2:	4b34      	ldr	r3, [pc, #208]	; (8007574 <fw_nav+0x440>)
 80074a4:	edd3 7a00 	vldr	s15, [r3]
 80074a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80074b0:	4932      	ldr	r1, [pc, #200]	; (800757c <fw_nav+0x448>)
 80074b2:	ee17 0a90 	vmov	r0, s15
 80074b6:	f7fc fba7 	bl	8003c08 <constrain>
 80074ba:	ee07 0a90 	vmov	s15, r0
 80074be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074c2:	4b2c      	ldr	r3, [pc, #176]	; (8007574 <fw_nav+0x440>)
 80074c4:	edc3 7a00 	vstr	s15, [r3]

        delta[0] = (GPS_AltErr - lastAltDiff);
 80074c8:	4b1f      	ldr	r3, [pc, #124]	; (8007548 <fw_nav+0x414>)
 80074ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	4b2b      	ldr	r3, [pc, #172]	; (8007580 <fw_nav+0x44c>)
 80074d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	b29b      	uxth	r3, r3
 80074dc:	b21b      	sxth	r3, r3
 80074de:	80bb      	strh	r3, [r7, #4]
        lastAltDiff = GPS_AltErr;
 80074e0:	4b19      	ldr	r3, [pc, #100]	; (8007548 <fw_nav+0x414>)
 80074e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80074e6:	4b26      	ldr	r3, [pc, #152]	; (8007580 <fw_nav+0x44c>)
 80074e8:	801a      	strh	r2, [r3, #0]
        if (abs(delta[0]) > 100)
 80074ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfb8      	it	lt
 80074f2:	425b      	neglt	r3, r3
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b64      	cmp	r3, #100	; 0x64
 80074f8:	d901      	bls.n	80074fe <fw_nav+0x3ca>
            delta[0] = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	80bb      	strh	r3, [r7, #4]

        for (i = 0; i < GPS_UPD_HZ; i++)
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007504:	e00f      	b.n	8007526 <fw_nav+0x3f2>
            altHist[i] = altHist[i + 1];
 8007506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007510:	491c      	ldr	r1, [pc, #112]	; (8007584 <fw_nav+0x450>)
 8007512:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8007516:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <fw_nav+0x450>)
 8007518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800751c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007520:	3301      	adds	r3, #1
 8007522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800752a:	2b04      	cmp	r3, #4
 800752c:	d9eb      	bls.n	8007506 <fw_nav+0x3d2>

        altHist[GPS_UPD_HZ - 1] = delta[0];
 800752e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <fw_nav+0x450>)
 8007534:	811a      	strh	r2, [r3, #8]

        // Store 1 sec history for D-term in shift register
        ALT_deltaSum = 0;       // Sum History
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <fw_nav+0x454>)
 8007538:	2200      	movs	r2, #0
 800753a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800753c:	2300      	movs	r3, #0
 800753e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007542:	e037      	b.n	80075b4 <fw_nav+0x480>
 8007544:	20000db4 	.word	0x20000db4
 8007548:	20000f1e 	.word	0x20000f1e
 800754c:	20000f24 	.word	0x20000f24
 8007550:	200016b0 	.word	0x200016b0
 8007554:	20001796 	.word	0x20001796
 8007558:	2000177c 	.word	0x2000177c
 800755c:	20001788 	.word	0x20001788
 8007560:	3dcccccd 	.word	0x3dcccccd
 8007564:	51eb851f 	.word	0x51eb851f
 8007568:	20001d60 	.word	0x20001d60
 800756c:	20000f28 	.word	0x20000f28
 8007570:	447a0000 	.word	0x447a0000
 8007574:	20000ef8 	.word	0x20000ef8
 8007578:	20001200 	.word	0x20001200
 800757c:	fffffe0c 	.word	0xfffffe0c
 8007580:	20000efc 	.word	0x20000efc
 8007584:	20000f04 	.word	0x20000f04
 8007588:	20000f2c 	.word	0x20000f2c
            ALT_deltaSum += altHist[i];
 800758c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007590:	4a64      	ldr	r2, [pc, #400]	; (8007724 <fw_nav+0x5f0>)
 8007592:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8007596:	b29a      	uxth	r2, r3
 8007598:	4b63      	ldr	r3, [pc, #396]	; (8007728 <fw_nav+0x5f4>)
 800759a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	4413      	add	r3, r2
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	b21a      	sxth	r2, r3
 80075a6:	4b60      	ldr	r3, [pc, #384]	; (8007728 <fw_nav+0x5f4>)
 80075a8:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80075aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ae:	3301      	adds	r3, #1
 80075b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d9e7      	bls.n	800758c <fw_nav+0x458>

        ALT_deltaSum = (ALT_deltaSum * altPID_PARAM.kD) / navDT;
 80075bc:	4b5a      	ldr	r3, [pc, #360]	; (8007728 <fw_nav+0x5f4>)
 80075be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ca:	4b58      	ldr	r3, [pc, #352]	; (800772c <fw_nav+0x5f8>)
 80075cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80075d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80075d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80075d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075e0:	ee17 3a90 	vmov	r3, s15
 80075e4:	b21a      	sxth	r2, r3
 80075e6:	4b50      	ldr	r3, [pc, #320]	; (8007728 <fw_nav+0x5f4>)
 80075e8:	801a      	strh	r2, [r3, #0]
        altDiff = GPS_AltErr * altPID_PARAM.kP; // Add P in Elevator compensation.
 80075ea:	4b51      	ldr	r3, [pc, #324]	; (8007730 <fw_nav+0x5fc>)
 80075ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075f8:	4b4c      	ldr	r3, [pc, #304]	; (800772c <fw_nav+0x5f8>)
 80075fa:	edd3 7a00 	vldr	s15, [r3]
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007606:	ee17 3a90 	vmov	r3, s15
 800760a:	83fb      	strh	r3, [r7, #30]
        altDiff += (altErrorI); // Add I
 800760c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007610:	ee07 3a90 	vmov	s15, r3
 8007614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007618:	4b46      	ldr	r3, [pc, #280]	; (8007734 <fw_nav+0x600>)
 800761a:	edd3 7a00 	vldr	s15, [r3]
 800761e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007626:	ee17 3a90 	vmov	r3, s15
 800762a:	83fb      	strh	r3, [r7, #30]

        // Start of NavPID
        if (abs(navDiff) <= 3)
 800762c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfb8      	it	lt
 8007634:	425b      	neglt	r3, r3
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b03      	cmp	r3, #3
 800763a:	d809      	bhi.n	8007650 <fw_nav+0x51c>
            navErrorI *= navDT; // Remove I-Term in deadspan
 800763c:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <fw_nav+0x604>)
 800763e:	ed93 7a00 	vldr	s14, [r3]
 8007642:	edd7 7a04 	vldr	s15, [r7, #16]
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	4b3b      	ldr	r3, [pc, #236]	; (8007738 <fw_nav+0x604>)
 800764c:	edc3 7a00 	vstr	s15, [r3]

        navDiff *= 10;
 8007650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007652:	461a      	mov	r2, r3
 8007654:	0092      	lsls	r2, r2, #2
 8007656:	4413      	add	r3, r2
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	b29b      	uxth	r3, r3
 800765c:	84bb      	strh	r3, [r7, #36]	; 0x24

        navErrorI += (navDiff * navPID_PARAM.kI) * navDT;
 800765e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800766a:	4b34      	ldr	r3, [pc, #208]	; (800773c <fw_nav+0x608>)
 800766c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007670:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007674:	edd7 7a04 	vldr	s15, [r7, #16]
 8007678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800767c:	4b2e      	ldr	r3, [pc, #184]	; (8007738 <fw_nav+0x604>)
 800767e:	edd3 7a00 	vldr	s15, [r3]
 8007682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007686:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <fw_nav+0x604>)
 8007688:	edc3 7a00 	vstr	s15, [r3]
        navErrorI = constrain(navErrorI, -500, 500);
 800768c:	4b2a      	ldr	r3, [pc, #168]	; (8007738 <fw_nav+0x604>)
 800768e:	edd3 7a00 	vldr	s15, [r3]
 8007692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007696:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800769a:	4929      	ldr	r1, [pc, #164]	; (8007740 <fw_nav+0x60c>)
 800769c:	ee17 0a90 	vmov	r0, s15
 80076a0:	f7fc fab2 	bl	8003c08 <constrain>
 80076a4:	ee07 0a90 	vmov	s15, r0
 80076a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ac:	4b22      	ldr	r3, [pc, #136]	; (8007738 <fw_nav+0x604>)
 80076ae:	edc3 7a00 	vstr	s15, [r3]

        delta[1] = (navDiff - lastnavDiff);
 80076b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076b4:	4b23      	ldr	r3, [pc, #140]	; (8007744 <fw_nav+0x610>)
 80076b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	b29b      	uxth	r3, r3
 80076c0:	b21b      	sxth	r3, r3
 80076c2:	80fb      	strh	r3, [r7, #6]
        lastnavDiff = navDiff;
 80076c4:	4a1f      	ldr	r2, [pc, #124]	; (8007744 <fw_nav+0x610>)
 80076c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076c8:	8013      	strh	r3, [r2, #0]

        if (abs(delta[1]) > 100)
 80076ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bfb8      	it	lt
 80076d2:	425b      	neglt	r3, r3
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b64      	cmp	r3, #100	; 0x64
 80076d8:	d901      	bls.n	80076de <fw_nav+0x5aa>
            delta[1] = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	80fb      	strh	r3, [r7, #6]

        // Store 1 sec history for D-term in shift register
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e4:	e00f      	b.n	8007706 <fw_nav+0x5d2>
            navDif[i] = navDif[i + 1];
 80076e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076f0:	4915      	ldr	r1, [pc, #84]	; (8007748 <fw_nav+0x614>)
 80076f2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80076f6:	4a14      	ldr	r2, [pc, #80]	; (8007748 <fw_nav+0x614>)
 80076f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < GPS_UPD_HZ; i++)
 80076fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007700:	3301      	adds	r3, #1
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800770a:	2b04      	cmp	r3, #4
 800770c:	d9eb      	bls.n	80076e6 <fw_nav+0x5b2>

        navDif[GPS_UPD_HZ - 1] = delta[1];
 800770e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007712:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <fw_nav+0x614>)
 8007714:	811a      	strh	r2, [r3, #8]

        NAV_deltaSum = 0;       // Sum History
 8007716:	4b0d      	ldr	r3, [pc, #52]	; (800774c <fw_nav+0x618>)
 8007718:	2200      	movs	r2, #0
 800771a:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007722:	e029      	b.n	8007778 <fw_nav+0x644>
 8007724:	20000f04 	.word	0x20000f04
 8007728:	20000f2c 	.word	0x20000f2c
 800772c:	20001200 	.word	0x20001200
 8007730:	20000f1e 	.word	0x20000f1e
 8007734:	20000ef8 	.word	0x20000ef8
 8007738:	20000ef4 	.word	0x20000ef4
 800773c:	200011f0 	.word	0x200011f0
 8007740:	fffffe0c 	.word	0xfffffe0c
 8007744:	20000efe 	.word	0x20000efe
 8007748:	20000f10 	.word	0x20000f10
 800774c:	20000f2e 	.word	0x20000f2e
            NAV_deltaSum += navDif[i];
 8007750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007754:	4abc      	ldr	r2, [pc, #752]	; (8007a48 <fw_nav+0x914>)
 8007756:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800775a:	b29a      	uxth	r2, r3
 800775c:	4bbb      	ldr	r3, [pc, #748]	; (8007a4c <fw_nav+0x918>)
 800775e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007762:	b29b      	uxth	r3, r3
 8007764:	4413      	add	r3, r2
 8007766:	b29b      	uxth	r3, r3
 8007768:	b21a      	sxth	r2, r3
 800776a:	4bb8      	ldr	r3, [pc, #736]	; (8007a4c <fw_nav+0x918>)
 800776c:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < GPS_UPD_HZ; i++)
 800776e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007772:	3301      	adds	r3, #1
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800777c:	2b04      	cmp	r3, #4
 800777e:	d9e7      	bls.n	8007750 <fw_nav+0x61c>

        NAV_deltaSum = (NAV_deltaSum * navPID_PARAM.kD) / navDT;    // Add D
 8007780:	4bb2      	ldr	r3, [pc, #712]	; (8007a4c <fw_nav+0x918>)
 8007782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800778e:	4bb0      	ldr	r3, [pc, #704]	; (8007a50 <fw_nav+0x91c>)
 8007790:	edd3 7a02 	vldr	s15, [r3, #8]
 8007794:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007798:	ed97 7a04 	vldr	s14, [r7, #16]
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077a4:	ee17 3a90 	vmov	r3, s15
 80077a8:	b21a      	sxth	r2, r3
 80077aa:	4ba8      	ldr	r3, [pc, #672]	; (8007a4c <fw_nav+0x918>)
 80077ac:	801a      	strh	r2, [r3, #0]

        navDiff *= navPID_PARAM.kP;                                 // Add P
 80077ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077ba:	4ba5      	ldr	r3, [pc, #660]	; (8007a50 <fw_nav+0x91c>)
 80077bc:	edd3 7a00 	vldr	s15, [r3]
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077c8:	ee17 3a90 	vmov	r3, s15
 80077cc:	84bb      	strh	r3, [r7, #36]	; 0x24
        navDiff += navErrorI;                                       // Add I
 80077ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077da:	4b9e      	ldr	r3, [pc, #632]	; (8007a54 <fw_nav+0x920>)
 80077dc:	edd3 7a00 	vldr	s15, [r3]
 80077e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077e8:	ee17 3a90 	vmov	r3, s15
 80077ec:	84bb      	strh	r3, [r7, #36]	; 0x24
        // End of NavPID

        // Limit outputs
        GPS_angle[PITCH] = constrain(altDiff / 10, -cfg.fw_gps_maxclimb * 10, cfg.fw_gps_maxdive * 10) + ALT_deltaSum;
 80077ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80077f2:	4a99      	ldr	r2, [pc, #612]	; (8007a58 <fw_nav+0x924>)
 80077f4:	fb82 1203 	smull	r1, r2, r2, r3
 80077f8:	1092      	asrs	r2, r2, #2
 80077fa:	17db      	asrs	r3, r3, #31
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	b21b      	sxth	r3, r3
 8007800:	4618      	mov	r0, r3
 8007802:	4b96      	ldr	r3, [pc, #600]	; (8007a5c <fw_nav+0x928>)
 8007804:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 8007808:	461a      	mov	r2, r3
 800780a:	f06f 0309 	mvn.w	r3, #9
 800780e:	fb03 f102 	mul.w	r1, r3, r2
 8007812:	4b92      	ldr	r3, [pc, #584]	; (8007a5c <fw_nav+0x928>)
 8007814:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 8007818:	461a      	mov	r2, r3
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	461a      	mov	r2, r3
 8007824:	f7fc f9f0 	bl	8003c08 <constrain>
 8007828:	4603      	mov	r3, r0
 800782a:	b29a      	uxth	r2, r3
 800782c:	4b8c      	ldr	r3, [pc, #560]	; (8007a60 <fw_nav+0x92c>)
 800782e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007832:	b29b      	uxth	r3, r3
 8007834:	4413      	add	r3, r2
 8007836:	b29b      	uxth	r3, r3
 8007838:	b21a      	sxth	r2, r3
 800783a:	4b8a      	ldr	r3, [pc, #552]	; (8007a64 <fw_nav+0x930>)
 800783c:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = constrain(navDiff / 10, -cfg.fw_gps_maxcorr * 10, cfg.fw_gps_maxcorr * 10) + NAV_deltaSum;
 800783e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007842:	4a85      	ldr	r2, [pc, #532]	; (8007a58 <fw_nav+0x924>)
 8007844:	fb82 1203 	smull	r1, r2, r2, r3
 8007848:	1092      	asrs	r2, r2, #2
 800784a:	17db      	asrs	r3, r3, #31
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	b21b      	sxth	r3, r3
 8007850:	4618      	mov	r0, r3
 8007852:	4b82      	ldr	r3, [pc, #520]	; (8007a5c <fw_nav+0x928>)
 8007854:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007858:	461a      	mov	r2, r3
 800785a:	f06f 0309 	mvn.w	r3, #9
 800785e:	fb03 f102 	mul.w	r1, r3, r2
 8007862:	4b7e      	ldr	r3, [pc, #504]	; (8007a5c <fw_nav+0x928>)
 8007864:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 8007868:	461a      	mov	r2, r3
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	461a      	mov	r2, r3
 8007874:	f7fc f9c8 	bl	8003c08 <constrain>
 8007878:	4603      	mov	r3, r0
 800787a:	b29a      	uxth	r2, r3
 800787c:	4b73      	ldr	r3, [pc, #460]	; (8007a4c <fw_nav+0x918>)
 800787e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007882:	b29b      	uxth	r3, r3
 8007884:	4413      	add	r3, r2
 8007886:	b29b      	uxth	r3, r3
 8007888:	b21a      	sxth	r2, r3
 800788a:	4b76      	ldr	r3, [pc, #472]	; (8007a64 <fw_nav+0x930>)
 800788c:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = constrain(navDiff / 10, -cfg.fw_gps_rudder * 10, cfg.fw_gps_rudder * 10) + NAV_deltaSum;
 800788e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007892:	4a71      	ldr	r2, [pc, #452]	; (8007a58 <fw_nav+0x924>)
 8007894:	fb82 1203 	smull	r1, r2, r2, r3
 8007898:	1092      	asrs	r2, r2, #2
 800789a:	17db      	asrs	r3, r3, #31
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	b21b      	sxth	r3, r3
 80078a0:	4618      	mov	r0, r3
 80078a2:	4b6e      	ldr	r3, [pc, #440]	; (8007a5c <fw_nav+0x928>)
 80078a4:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80078a8:	461a      	mov	r2, r3
 80078aa:	f06f 0309 	mvn.w	r3, #9
 80078ae:	fb03 f102 	mul.w	r1, r3, r2
 80078b2:	4b6a      	ldr	r3, [pc, #424]	; (8007a5c <fw_nav+0x928>)
 80078b4:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 80078b8:	461a      	mov	r2, r3
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	461a      	mov	r2, r3
 80078c4:	f7fc f9a0 	bl	8003c08 <constrain>
 80078c8:	4603      	mov	r3, r0
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	4b5f      	ldr	r3, [pc, #380]	; (8007a4c <fw_nav+0x918>)
 80078ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	b21a      	sxth	r2, r3
 80078da:	4b62      	ldr	r3, [pc, #392]	; (8007a64 <fw_nav+0x930>)
 80078dc:	809a      	strh	r2, [r3, #4]

        // Elevator compensation depending on behaviour.
        // Prevent stall with Disarmed motor
        if (f.MOTORS_STOPPED)
 80078de:	4b62      	ldr	r3, [pc, #392]	; (8007a68 <fw_nav+0x934>)
 80078e0:	7c5b      	ldrb	r3, [r3, #17]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d016      	beq.n	8007914 <fw_nav+0x7e0>
            GPS_angle[PITCH] = constrain(GPS_angle[PITCH], -cfg.fw_glide_angle, cfg.fw_gps_maxdive * 10);
 80078e6:	4b5f      	ldr	r3, [pc, #380]	; (8007a64 <fw_nav+0x930>)
 80078e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078ec:	4618      	mov	r0, r3
 80078ee:	4b5b      	ldr	r3, [pc, #364]	; (8007a5c <fw_nav+0x928>)
 80078f0:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80078f4:	4259      	negs	r1, r3
 80078f6:	4b59      	ldr	r3, [pc, #356]	; (8007a5c <fw_nav+0x928>)
 80078f8:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 80078fc:	461a      	mov	r2, r3
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	461a      	mov	r2, r3
 8007908:	f7fc f97e 	bl	8003c08 <constrain>
 800790c:	4603      	mov	r3, r0
 800790e:	b21a      	sxth	r2, r3
 8007910:	4b54      	ldr	r3, [pc, #336]	; (8007a64 <fw_nav+0x930>)
 8007912:	805a      	strh	r2, [r3, #2]

        // Add elevator compared with rollAngle
        if (!f.CLIMBOUT_FW)
 8007914:	4b54      	ldr	r3, [pc, #336]	; (8007a68 <fw_nav+0x934>)
 8007916:	7cdb      	ldrb	r3, [r3, #19]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11b      	bne.n	8007954 <fw_nav+0x820>
            GPS_angle[PITCH] -= (abs(angle[ROLL]) * (cfg.fw_roll_comp / 100));
 800791c:	4b51      	ldr	r3, [pc, #324]	; (8007a64 <fw_nav+0x930>)
 800791e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007922:	b29a      	uxth	r2, r3
 8007924:	4b51      	ldr	r3, [pc, #324]	; (8007a6c <fw_nav+0x938>)
 8007926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfb8      	it	lt
 800792e:	425b      	neglt	r3, r3
 8007930:	b299      	uxth	r1, r3
 8007932:	4b4a      	ldr	r3, [pc, #296]	; (8007a5c <fw_nav+0x928>)
 8007934:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8007938:	484d      	ldr	r0, [pc, #308]	; (8007a70 <fw_nav+0x93c>)
 800793a:	fba0 0303 	umull	r0, r3, r0, r3
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	b2db      	uxtb	r3, r3
 8007942:	b29b      	uxth	r3, r3
 8007944:	fb11 f303 	smulbb	r3, r1, r3
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	b29b      	uxth	r3, r3
 800794e:	b21a      	sxth	r2, r3
 8007950:	4b44      	ldr	r3, [pc, #272]	; (8007a64 <fw_nav+0x930>)
 8007952:	805a      	strh	r2, [r3, #2]

        // Throttle compensation depending on behaviour.
        // Compensate throttle with pitch Angle
        NAV_Thro -= constrain(angle[PITCH] * PITCH_COMP, 0, 450);
 8007954:	4b45      	ldr	r3, [pc, #276]	; (8007a6c <fw_nav+0x938>)
 8007956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007962:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800796a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800796e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8007972:	2100      	movs	r1, #0
 8007974:	ee17 0a90 	vmov	r0, s15
 8007978:	f7fc f946 	bl	8003c08 <constrain>
 800797c:	4601      	mov	r1, r0
 800797e:	4b3d      	ldr	r3, [pc, #244]	; (8007a74 <fw_nav+0x940>)
 8007980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007984:	b29a      	uxth	r2, r3
 8007986:	b28b      	uxth	r3, r1
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	b29b      	uxth	r3, r3
 800798c:	b21a      	sxth	r2, r3
 800798e:	4b39      	ldr	r3, [pc, #228]	; (8007a74 <fw_nav+0x940>)
 8007990:	801a      	strh	r2, [r3, #0]

        // Force the Plane move forward in headwind with speedBoost
        groundSpeed = GPS_speed;
 8007992:	4b39      	ldr	r3, [pc, #228]	; (8007a78 <fw_nav+0x944>)
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	81fb      	strh	r3, [r7, #14]
        spDiff = (GPS_MINSPEED - groundSpeed) * I_TERM;
 8007998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800799c:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 80079a0:	ee07 3a90 	vmov	s15, r3
 80079a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007a7c <fw_nav+0x948>
 80079ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b4:	ee17 3a90 	vmov	r3, s15
 80079b8:	60bb      	str	r3, [r7, #8]

        if (GPS_speed < GPS_MINSPEED - 50 || GPS_speed > GPS_MINSPEED + 50)
 80079ba:	4b2f      	ldr	r3, [pc, #188]	; (8007a78 <fw_nav+0x944>)
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80079c2:	d305      	bcc.n	80079d0 <fw_nav+0x89c>
 80079c4:	4b2c      	ldr	r3, [pc, #176]	; (8007a78 <fw_nav+0x944>)
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	f240 2226 	movw	r2, #550	; 0x226
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d90a      	bls.n	80079e6 <fw_nav+0x8b2>
            speedBoost += spDiff;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	4b2a      	ldr	r3, [pc, #168]	; (8007a80 <fw_nav+0x94c>)
 80079d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	4413      	add	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	b21a      	sxth	r2, r3
 80079e2:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <fw_nav+0x94c>)
 80079e4:	801a      	strh	r2, [r3, #0]

        speedBoost = constrain(speedBoost, 0, 500);
 80079e6:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <fw_nav+0x94c>)
 80079e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc f908 	bl	8003c08 <constrain>
 80079f8:	4603      	mov	r3, r0
 80079fa:	b21a      	sxth	r2, r3
 80079fc:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <fw_nav+0x94c>)
 80079fe:	801a      	strh	r2, [r3, #0]
        NAV_Thro += speedBoost;
 8007a00:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <fw_nav+0x940>)
 8007a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	4b1d      	ldr	r3, [pc, #116]	; (8007a80 <fw_nav+0x94c>)
 8007a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	4413      	add	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	b21a      	sxth	r2, r3
 8007a16:	4b17      	ldr	r3, [pc, #92]	; (8007a74 <fw_nav+0x940>)
 8007a18:	801a      	strh	r2, [r3, #0]

        // constrain throttle to Max climb.
        NAV_Thro = constrain(NAV_Thro, cfg.fw_idle_throttle, cfg.fw_climb_throttle);
 8007a1a:	4b16      	ldr	r3, [pc, #88]	; (8007a74 <fw_nav+0x940>)
 8007a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a20:	4618      	mov	r0, r3
 8007a22:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <fw_nav+0x928>)
 8007a24:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <fw_nav+0x928>)
 8007a2c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8007a30:	461a      	mov	r2, r3
 8007a32:	f7fc f8e9 	bl	8003c08 <constrain>
 8007a36:	4603      	mov	r3, r0
 8007a38:	b21a      	sxth	r2, r3
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <fw_nav+0x940>)
 8007a3c:	801a      	strh	r2, [r3, #0]
    }
    // End of NavTimer

    // PassThru for throttle In AcroMode
    if ((!f.ANGLE_MODE && !f.HORIZON_MODE) || (f.PASSTHRU_MODE && !f.FW_FAILSAFE_RTH_ENABLE)) {
 8007a3e:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <fw_nav+0x934>)
 8007a40:	78db      	ldrb	r3, [r3, #3]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d122      	bne.n	8007a8c <fw_nav+0x958>
 8007a46:	e01d      	b.n	8007a84 <fw_nav+0x950>
 8007a48:	20000f10 	.word	0x20000f10
 8007a4c:	20000f2e 	.word	0x20000f2e
 8007a50:	200011f0 	.word	0x200011f0
 8007a54:	20000ef4 	.word	0x20000ef4
 8007a58:	66666667 	.word	0x66666667
 8007a5c:	20000db4 	.word	0x20000db4
 8007a60:	20000f2c 	.word	0x20000f2c
 8007a64:	200017a0 	.word	0x200017a0
 8007a68:	200016b0 	.word	0x200016b0
 8007a6c:	20001458 	.word	0x20001458
 8007a70:	51eb851f 	.word	0x51eb851f
 8007a74:	20000f24 	.word	0x20000f24
 8007a78:	2000179c 	.word	0x2000179c
 8007a7c:	3dcccccd 	.word	0x3dcccccd
 8007a80:	20000f00 	.word	0x20000f00
 8007a84:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <fw_nav+0x9ac>)
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <fw_nav+0x968>
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <fw_nav+0x9ac>)
 8007a8e:	7a9b      	ldrb	r3, [r3, #10]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00f      	beq.n	8007ab4 <fw_nav+0x980>
 8007a94:	4b12      	ldr	r3, [pc, #72]	; (8007ae0 <fw_nav+0x9ac>)
 8007a96:	7c9b      	ldrb	r3, [r3, #18]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <fw_nav+0x980>
        NAV_Thro = TX_Thro;
 8007a9c:	4a11      	ldr	r2, [pc, #68]	; (8007ae4 <fw_nav+0x9b0>)
 8007a9e:	8b7b      	ldrh	r3, [r7, #26]
 8007aa0:	8013      	strh	r3, [r2, #0]
        GPS_angle[PITCH] = 0;
 8007aa2:	4b11      	ldr	r3, [pc, #68]	; (8007ae8 <fw_nav+0x9b4>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	805a      	strh	r2, [r3, #2]
        GPS_angle[ROLL] = 0;
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <fw_nav+0x9b4>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	801a      	strh	r2, [r3, #0]
        GPS_angle[YAW] = 0;
 8007aae:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <fw_nav+0x9b4>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	809a      	strh	r2, [r3, #4]
    }
    rcCommand[THROTTLE] = NAV_Thro;
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <fw_nav+0x9b0>)
 8007ab6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007aba:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <fw_nav+0x9b8>)
 8007abc:	80da      	strh	r2, [r3, #6]
    rcCommand[YAW] += GPS_angle[YAW];
 8007abe:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <fw_nav+0x9b8>)
 8007ac0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <fw_nav+0x9b4>)
 8007ac8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	4413      	add	r3, r2
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	b21a      	sxth	r2, r3
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <fw_nav+0x9b8>)
 8007ad6:	809a      	strh	r2, [r3, #4]
}
 8007ad8:	bf00      	nop
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	200016b0 	.word	0x200016b0
 8007ae4:	20000f24 	.word	0x20000f24
 8007ae8:	200017a0 	.word	0x200017a0
 8007aec:	2000170c 	.word	0x2000170c

08007af0 <gpsSetState>:
static gpsData_t gpsData;
static PifGpsUblox gps_ublox;


static void gpsSetState(uint8_t state)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]
    gpsData.state = state;
 8007afa:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <gpsSetState+0x38>)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	7013      	strb	r3, [r2, #0]
    gpsData.state_position = 0;
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <gpsSetState+0x38>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	611a      	str	r2, [r3, #16]
    gpsData.state_ts = pif_cumulative_timer1ms;
 8007b06:	4b09      	ldr	r3, [pc, #36]	; (8007b2c <gpsSetState+0x3c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a07      	ldr	r2, [pc, #28]	; (8007b28 <gpsSetState+0x38>)
 8007b0c:	6153      	str	r3, [r2, #20]
    gpsData.step = 0;
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <gpsSetState+0x38>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	60da      	str	r2, [r3, #12]
    gpsData.receive = FALSE;
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <gpsSetState+0x38>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	761a      	strb	r2, [r3, #24]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000f30 	.word	0x20000f30
 8007b2c:	20001d60 	.word	0x20001d60

08007b30 <_evtGpsUbloxCfgResult>:

static void _evtGpsUbloxCfgResult(PifGpsUblox* p_owner, BOOL result)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
	(void)p_owner;

	gpsData.cfg_result = result ? GUCR_ACK : GUCR_NAK;
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <_evtGpsUbloxCfgResult+0x16>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <_evtGpsUbloxCfgResult+0x18>
 8007b46:	2302      	movs	r3, #2
 8007b48:	4a03      	ldr	r2, [pc, #12]	; (8007b58 <_evtGpsUbloxCfgResult+0x28>)
 8007b4a:	61d3      	str	r3, [r2, #28]
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000f30 	.word	0x20000f30
 8007b5c:	00000000 	.word	0x00000000

08007b60 <_evtGpsReceive>:

static void _evtGpsReceive(PifGps *p_owner)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
    f.GPS_FIX = p_owner->_fix;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	4b5c      	ldr	r3, [pc, #368]	; (8007ce8 <_evtGpsReceive+0x188>)
 8007b78:	72da      	strb	r2, [r3, #11]
    if (f.GPS_FIX) {
 8007b7a:	4b5b      	ldr	r3, [pc, #364]	; (8007ce8 <_evtGpsReceive+0x188>)
 8007b7c:	7adb      	ldrb	r3, [r3, #11]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d049      	beq.n	8007c16 <_evtGpsReceive+0xb6>
        GPS_coord[LAT] = p_owner->_coord_deg[PIF_GPS_LAT] * 10000000UL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007b88:	a355      	add	r3, pc, #340	; (adr r3, 8007ce0 <_evtGpsReceive+0x180>)
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f7f8 fce7 	bl	8000560 <__aeabi_dmul>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f7f8 ff7b 	bl	8000a94 <__aeabi_d2iz>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4a52      	ldr	r2, [pc, #328]	; (8007cec <_evtGpsReceive+0x18c>)
 8007ba2:	6013      	str	r3, [r2, #0]
        GPS_coord[LON] = p_owner->_coord_deg[PIF_GPS_LON] * 10000000UL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007baa:	a34d      	add	r3, pc, #308	; (adr r3, 8007ce0 <_evtGpsReceive+0x180>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fcd6 	bl	8000560 <__aeabi_dmul>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4619      	mov	r1, r3
 8007bbc:	f7f8 ff6a 	bl	8000a94 <__aeabi_d2iz>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4a4a      	ldr	r2, [pc, #296]	; (8007cec <_evtGpsReceive+0x18c>)
 8007bc4:	6053      	str	r3, [r2, #4]
        GPS_numSat = p_owner->_num_sat;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8007bcc:	4b48      	ldr	r3, [pc, #288]	; (8007cf0 <_evtGpsReceive+0x190>)
 8007bce:	701a      	strb	r2, [r3, #0]
        GPS_altitude = p_owner->_altitude;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7f8 ff83 	bl	8000ae4 <__aeabi_d2uiz>
 8007bde:	4603      	mov	r3, r0
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	4b44      	ldr	r3, [pc, #272]	; (8007cf4 <_evtGpsReceive+0x194>)
 8007be4:	801a      	strh	r2, [r3, #0]
        if (!sensors(SENSOR_BARO) && f.FIXED_WING)
 8007be6:	2004      	movs	r0, #4
 8007be8:	f7ff f92a 	bl	8006e40 <sensors>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f083 0301 	eor.w	r3, r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00e      	beq.n	8007c16 <_evtGpsReceive+0xb6>
 8007bf8:	4b3b      	ldr	r3, [pc, #236]	; (8007ce8 <_evtGpsReceive+0x188>)
 8007bfa:	7c1b      	ldrb	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <_evtGpsReceive+0xb6>
            EstAlt = (GPS_altitude - GPS_home[ALT]) * 100;    // Use values Based on GPS
 8007c00:	4b3c      	ldr	r3, [pc, #240]	; (8007cf4 <_evtGpsReceive+0x194>)
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	4b3c      	ldr	r3, [pc, #240]	; (8007cf8 <_evtGpsReceive+0x198>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	2264      	movs	r2, #100	; 0x64
 8007c0e:	fb02 f303 	mul.w	r3, r2, r3
 8007c12:	4a3a      	ldr	r2, [pc, #232]	; (8007cfc <_evtGpsReceive+0x19c>)
 8007c14:	6013      	str	r3, [r2, #0]
    }

    GPS_speed = (uint16_t)(p_owner->_ground_speed / 10);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	4b37      	ldr	r3, [pc, #220]	; (8007d00 <_evtGpsReceive+0x1a0>)
 8007c22:	f7f8 fdc7 	bl	80007b4 <__aeabi_ddiv>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f7f8 ff59 	bl	8000ae4 <__aeabi_d2uiz>
 8007c32:	4603      	mov	r3, r0
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	4b33      	ldr	r3, [pc, #204]	; (8007d04 <_evtGpsReceive+0x1a4>)
 8007c38:	801a      	strh	r2, [r3, #0]
    GPS_ground_course = (uint16_t)(p_owner->_ground_course * 10);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	4b2e      	ldr	r3, [pc, #184]	; (8007d00 <_evtGpsReceive+0x1a0>)
 8007c46:	f7f8 fc8b 	bl	8000560 <__aeabi_dmul>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4610      	mov	r0, r2
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7f8 ff47 	bl	8000ae4 <__aeabi_d2uiz>
 8007c56:	4603      	mov	r3, r0
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	4b2b      	ldr	r3, [pc, #172]	; (8007d08 <_evtGpsReceive+0x1a8>)
 8007c5c:	801a      	strh	r2, [r3, #0]
    if (!sensors(SENSOR_MAG) && GPS_speed > 100) {
 8007c5e:	2008      	movs	r0, #8
 8007c60:	f7ff f8ee 	bl	8006e40 <sensors>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f083 0301 	eor.w	r3, r3, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d021      	beq.n	8007cb4 <_evtGpsReceive+0x154>
 8007c70:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <_evtGpsReceive+0x1a4>)
 8007c72:	881b      	ldrh	r3, [r3, #0]
 8007c74:	2b64      	cmp	r3, #100	; 0x64
 8007c76:	d91d      	bls.n	8007cb4 <_evtGpsReceive+0x154>
        GPS_ground_course = wrap_18000(GPS_ground_course * 10) / 10;
 8007c78:	4b23      	ldr	r3, [pc, #140]	; (8007d08 <_evtGpsReceive+0x1a8>)
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 fc58 	bl	800953c <wrap_18000>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4a1f      	ldr	r2, [pc, #124]	; (8007d0c <_evtGpsReceive+0x1ac>)
 8007c90:	fb82 1203 	smull	r1, r2, r2, r3
 8007c94:	1092      	asrs	r2, r2, #2
 8007c96:	17db      	asrs	r3, r3, #31
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	4b1a      	ldr	r3, [pc, #104]	; (8007d08 <_evtGpsReceive+0x1a8>)
 8007c9e:	801a      	strh	r2, [r3, #0]
        heading = GPS_ground_course / 10;    // Use values Based on GPS if we are moving.
 8007ca0:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <_evtGpsReceive+0x1a8>)
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <_evtGpsReceive+0x1b0>)
 8007ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	b21a      	sxth	r2, r3
 8007cb0:	4b18      	ldr	r3, [pc, #96]	; (8007d14 <_evtGpsReceive+0x1b4>)
 8007cb2:	801a      	strh	r2, [r3, #0]
    }

    GPS_HorizontalAcc = p_owner->_horizontal_acc;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <_evtGpsReceive+0x1b8>)
 8007cba:	6013      	str	r3, [r2, #0]
    GPS_VerticalAcc = p_owner->_vertical_acc;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc0:	4a16      	ldr	r2, [pc, #88]	; (8007d1c <_evtGpsReceive+0x1bc>)
 8007cc2:	6013      	str	r3, [r2, #0]

    pifTask_SetTrigger(g_task_gps);
 8007cc4:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <_evtGpsReceive+0x1c0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f00c fc21 	bl	8014510 <pifTask_SetTrigger>
    gpsData.receive = TRUE;
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <_evtGpsReceive+0x1c4>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	761a      	strb	r2, [r3, #24]
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	00000000 	.word	0x00000000
 8007ce4:	416312d0 	.word	0x416312d0
 8007ce8:	200016b0 	.word	0x200016b0
 8007cec:	20001774 	.word	0x20001774
 8007cf0:	20001794 	.word	0x20001794
 8007cf4:	2000179a 	.word	0x2000179a
 8007cf8:	2000177c 	.word	0x2000177c
 8007cfc:	2000141c 	.word	0x2000141c
 8007d00:	40240000 	.word	0x40240000
 8007d04:	2000179c 	.word	0x2000179c
 8007d08:	200017a6 	.word	0x200017a6
 8007d0c:	66666667 	.word	0x66666667
 8007d10:	cccccccd 	.word	0xcccccccd
 8007d14:	200019e6 	.word	0x200019e6
 8007d18:	20001844 	.word	0x20001844
 8007d1c:	20001848 	.word	0x20001848
 8007d20:	20001510 	.word	0x20001510
 8007d24:	20000f30 	.word	0x20000f30

08007d28 <_evtGpsTimeout>:

static void _evtGpsTimeout(PifGps *p_owner)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
    (void)p_owner;

    // remove GPS from capability
    if (mcfg.gps_type != GPS_NMEA || gpsInitData[gpsData.baudrateIndex].baudrate != 9600) {
 8007d30:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <_evtGpsTimeout+0x44>)
 8007d32:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d108      	bne.n	8007d4c <_evtGpsTimeout+0x24>
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <_evtGpsTimeout+0x48>)
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	4a0d      	ldr	r2, [pc, #52]	; (8007d74 <_evtGpsTimeout+0x4c>)
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	4413      	add	r3, r2
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007d4a:	d005      	beq.n	8007d58 <_evtGpsTimeout+0x30>
        serialStopReceiveFunc(&core.gpsport->comm);
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <_evtGpsTimeout+0x50>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fa fc5e 	bl	8002614 <serialStopReceiveFunc>
    }
    sensorsClear(SENSOR_GPS);
 8007d58:	2020      	movs	r0, #32
 8007d5a:	f7ff f899 	bl	8006e90 <sensorsClear>
    gpsSetState(GPS_LOSTCOMMS);
 8007d5e:	2006      	movs	r0, #6
 8007d60:	f7ff fec6 	bl	8007af0 <gpsSetState>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_INFO, "GPS: Timeout");
#endif
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000848 	.word	0x20000848
 8007d70:	20000f30 	.word	0x20000f30
 8007d74:	08028a5c 	.word	0x08028a5c
 8007d78:	20000790 	.word	0x20000790

08007d7c <gpsInit>:

void gpsInit(uint8_t port, uint8_t baudrateIndex)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	460a      	mov	r2, r1
 8007d86:	71fb      	strb	r3, [r7, #7]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	71bb      	strb	r3, [r7, #6]
    // init gpsData structure. if we're not actually enabled, don't bother doing anything else
    gpsSetState(GPS_UNKNOWN);
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f7ff feaf 	bl	8007af0 <gpsSetState>

    gpsData.baudrateIndex = baudrateIndex;
 8007d92:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <gpsInit+0x9c>)
 8007d94:	79bb      	ldrb	r3, [r7, #6]
 8007d96:	7053      	strb	r3, [r2, #1]
    gpsData.lastMessage = pif_cumulative_timer1ms;
 8007d98:	4b20      	ldr	r3, [pc, #128]	; (8007e1c <gpsInit+0xa0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <gpsInit+0x9c>)
 8007d9e:	6093      	str	r3, [r2, #8]
    gpsData.errors = 0;
 8007da0:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <gpsInit+0x9c>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	605a      	str	r2, [r3, #4]

    gpsSetPIDs();
 8007da6:	f000 fea1 	bl	8008aec <gpsSetPIDs>
    // Open GPS UART, no callback - buffer will be read out in gpsThread()
    core.gpsport = uartOpen(port, 9600, MODE_RXTX, 5);    // signal GPS "thread" to initialize when it gets to it, 5ms
 8007daa:	79f8      	ldrb	r0, [r7, #7]
 8007dac:	2305      	movs	r3, #5
 8007dae:	2203      	movs	r2, #3
 8007db0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8007db4:	f7fa faa2 	bl	80022fc <uartOpen>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4a19      	ldr	r2, [pc, #100]	; (8007e20 <gpsInit+0xa4>)
 8007dbc:	6093      	str	r3, [r2, #8]
    if (!core.gpsport) goto fail;
 8007dbe:	4b18      	ldr	r3, [pc, #96]	; (8007e20 <gpsInit+0xa4>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01d      	beq.n	8007e02 <gpsInit+0x86>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4816      	ldr	r0, [pc, #88]	; (8007e24 <gpsInit+0xa8>)
 8007dca:	f00f f927 	bl	801701c <pifGpsUblox_Init>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d018      	beq.n	8007e06 <gpsInit+0x8a>
    pifGpsUblox_AttachComm(&gps_ublox, &core.gpsport->comm);
 8007dd4:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <gpsInit+0xa4>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4811      	ldr	r0, [pc, #68]	; (8007e24 <gpsInit+0xa8>)
 8007dde:	f00f f96b 	bl	80170b8 <pifGpsUblox_AttachComm>
    gps_ublox._gps.evt_receive = _evtGpsReceive;
 8007de2:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <gpsInit+0xa8>)
 8007de4:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <gpsInit+0xac>)
 8007de6:	615a      	str	r2, [r3, #20]

    // signal GPS "thread" to initialize when it gets to it
    gpsSetState(GPS_INITIALIZING);
 8007de8:	2001      	movs	r0, #1
 8007dea:	f7ff fe81 	bl	8007af0 <gpsSetState>

    // copy ubx sbas config string to use
    if (mcfg.gps_ubx_sbas >= SBAS_LAST)
 8007dee:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <gpsInit+0xb0>)
 8007df0:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	dd0b      	ble.n	8007e10 <gpsInit+0x94>
        mcfg.gps_ubx_sbas = SBAS_AUTO;
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <gpsInit+0xb0>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad

    return;
 8007e00:	e006      	b.n	8007e10 <gpsInit+0x94>
    if (!core.gpsport) goto fail;
 8007e02:	bf00      	nop
 8007e04:	e000      	b.n	8007e08 <gpsInit+0x8c>
    if (!pifGpsUblox_Init(&gps_ublox, PIF_ID_AUTO)) goto fail;
 8007e06:	bf00      	nop

fail:    
    sensorsClear(SENSOR_GPS);
 8007e08:	2020      	movs	r0, #32
 8007e0a:	f7ff f841 	bl	8006e90 <sensorsClear>
 8007e0e:	e000      	b.n	8007e12 <gpsInit+0x96>
    return;
 8007e10:	bf00      	nop
}
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20000f30 	.word	0x20000f30
 8007e1c:	20001d60 	.word	0x20001d60
 8007e20:	20000790 	.word	0x20000790
 8007e24:	20000f50 	.word	0x20000f50
 8007e28:	08007b61 	.word	0x08007b61
 8007e2c:	20000848 	.word	0x20000848

08007e30 <gpsInitNmea>:

static void gpsInitNmea(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
    gps_ublox._gps.evt_nmea_msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8007e34:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <gpsInitNmea+0x24>)
 8007e36:	2203      	movs	r2, #3
 8007e38:	741a      	strb	r2, [r3, #16]
    pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <gpsInitNmea+0x28>)
 8007e3c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007e40:	4906      	ldr	r1, [pc, #24]	; (8007e5c <gpsInitNmea+0x2c>)
 8007e42:	4807      	ldr	r0, [pc, #28]	; (8007e60 <gpsInitNmea+0x30>)
 8007e44:	f00d fe86 	bl	8015b54 <pifGps_SetTimeout>
    gpsSetState(GPS_RECEIVINGDATA);
 8007e48:	2005      	movs	r0, #5
 8007e4a:	f7ff fe51 	bl	8007af0 <gpsSetState>
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000f50 	.word	0x20000f50
 8007e58:	08007d29 	.word	0x08007d29
 8007e5c:	200014e4 	.word	0x200014e4
 8007e60:	20000f60 	.word	0x20000f60

08007e64 <gpsInitUblox>:

static void gpsInitUblox(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af02      	add	r7, sp, #8
	static uint8_t cfg_msg_size = 0;
    uint8_t i;
    int line = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	607b      	str	r3, [r7, #4]

	// GPS_CONFIGURATION, push some ublox config strings
	if (gpsData.step >= 20) {
 8007e6e:	4b93      	ldr	r3, [pc, #588]	; (80080bc <gpsInitUblox+0x258>)
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b13      	cmp	r3, #19
 8007e74:	dd2e      	ble.n	8007ed4 <gpsInitUblox+0x70>
		if (gpsData.cfg_result == GUCR_ACK) {
 8007e76:	4b91      	ldr	r3, [pc, #580]	; (80080bc <gpsInitUblox+0x258>)
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d112      	bne.n	8007ea4 <gpsInitUblox+0x40>
	  		gpsData.step = (gpsData.step - 20) + 1;
 8007e7e:	4b8f      	ldr	r3, [pc, #572]	; (80080bc <gpsInitUblox+0x258>)
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	3b13      	subs	r3, #19
 8007e84:	4a8d      	ldr	r2, [pc, #564]	; (80080bc <gpsInitUblox+0x258>)
 8007e86:	60d3      	str	r3, [r2, #12]
			if (gpsData.step == cfg_msg_size) gpsData.step = 15;
 8007e88:	4b8c      	ldr	r3, [pc, #560]	; (80080bc <gpsInitUblox+0x258>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	4a8c      	ldr	r2, [pc, #560]	; (80080c0 <gpsInitUblox+0x25c>)
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d102      	bne.n	8007e9a <gpsInitUblox+0x36>
 8007e94:	4b89      	ldr	r3, [pc, #548]	; (80080bc <gpsInitUblox+0x258>)
 8007e96:	220f      	movs	r2, #15
 8007e98:	60da      	str	r2, [r3, #12]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007e9a:	4b8a      	ldr	r3, [pc, #552]	; (80080c4 <gpsInitUblox+0x260>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a87      	ldr	r2, [pc, #540]	; (80080bc <gpsInitUblox+0x258>)
 8007ea0:	6153      	str	r3, [r2, #20]
 8007ea2:	e100      	b.n	80080a6 <gpsInitUblox+0x242>
		}
		else if (gpsData.cfg_result == GUCR_NAK) {
 8007ea4:	4b85      	ldr	r3, [pc, #532]	; (80080bc <gpsInitUblox+0x258>)
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d105      	bne.n	8007eb8 <gpsInitUblox+0x54>
			pif_error = E_RECEIVE_NACK;
 8007eac:	4b86      	ldr	r3, [pc, #536]	; (80080c8 <gpsInitUblox+0x264>)
 8007eae:	2210      	movs	r2, #16
 8007eb0:	701a      	strb	r2, [r3, #0]
			line = __LINE__;
 8007eb2:	23f8      	movs	r3, #248	; 0xf8
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	e0f6      	b.n	80080a6 <gpsInitUblox+0x242>
		}
		else {
			if (pif_cumulative_timer1ms - gpsData.state_ts >= 200) {
 8007eb8:	4b82      	ldr	r3, [pc, #520]	; (80080c4 <gpsInitUblox+0x260>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	4b7f      	ldr	r3, [pc, #508]	; (80080bc <gpsInitUblox+0x258>)
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2bc7      	cmp	r3, #199	; 0xc7
 8007ec4:	f240 80ef 	bls.w	80080a6 <gpsInitUblox+0x242>
				pif_error = E_TIMEOUT;
 8007ec8:	4b7f      	ldr	r3, [pc, #508]	; (80080c8 <gpsInitUblox+0x264>)
 8007eca:	2207      	movs	r2, #7
 8007ecc:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007ece:	23fd      	movs	r3, #253	; 0xfd
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	e0e8      	b.n	80080a6 <gpsInitUblox+0x242>
			}
		}
	}
	else {
		if (cfg_msg_size == 0) {
 8007ed4:	4b7a      	ldr	r3, [pc, #488]	; (80080c0 <gpsInitUblox+0x25c>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <gpsInitUblox+0x8c>
			cfg_msg_size = sizeof(kCfgMsg) / sizeof(kCfgMsg[0]);
 8007edc:	4b78      	ldr	r3, [pc, #480]	; (80080c0 <gpsInitUblox+0x25c>)
 8007ede:	220b      	movs	r2, #11
 8007ee0:	701a      	strb	r2, [r3, #0]
			gps_ublox.evt_ubx_cfg_result = _evtGpsUbloxCfgResult;
 8007ee2:	4b7a      	ldr	r3, [pc, #488]	; (80080cc <gpsInitUblox+0x268>)
 8007ee4:	4a7a      	ldr	r2, [pc, #488]	; (80080d0 <gpsInitUblox+0x26c>)
 8007ee6:	601a      	str	r2, [r3, #0]
			gpsData.state_ts = pif_cumulative_timer1ms;
 8007ee8:	4b76      	ldr	r3, [pc, #472]	; (80080c4 <gpsInitUblox+0x260>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a73      	ldr	r2, [pc, #460]	; (80080bc <gpsInitUblox+0x258>)
 8007eee:	6153      	str	r3, [r2, #20]
		}
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 8007ef0:	4b74      	ldr	r3, [pc, #464]	; (80080c4 <gpsInitUblox+0x260>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b71      	ldr	r3, [pc, #452]	; (80080bc <gpsInitUblox+0x258>)
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	f240 80da 	bls.w	80080b4 <gpsInitUblox+0x250>
		if (gpsData.step < cfg_msg_size) {
 8007f00:	4b6e      	ldr	r3, [pc, #440]	; (80080bc <gpsInitUblox+0x258>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	4a6e      	ldr	r2, [pc, #440]	; (80080c0 <gpsInitUblox+0x25c>)
 8007f06:	7812      	ldrb	r2, [r2, #0]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	da26      	bge.n	8007f5a <gpsInitUblox+0xf6>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_MSG, sizeof(kCfgMsg[gpsData.step]), (uint8_t*)kCfgMsg[gpsData.step], FALSE)) {
 8007f0c:	4b6b      	ldr	r3, [pc, #428]	; (80080bc <gpsInitUblox+0x258>)
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	4613      	mov	r3, r2
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	4413      	add	r3, r2
 8007f16:	4a6f      	ldr	r2, [pc, #444]	; (80080d4 <gpsInitUblox+0x270>)
 8007f18:	4413      	add	r3, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	9201      	str	r2, [sp, #4]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2303      	movs	r3, #3
 8007f22:	2201      	movs	r2, #1
 8007f24:	2106      	movs	r1, #6
 8007f26:	4869      	ldr	r0, [pc, #420]	; (80080cc <gpsInitUblox+0x268>)
 8007f28:	f00f f914 	bl	8017154 <pifGpsUblox_SendUbxMsg>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <gpsInitUblox+0xe8>
                gpsData.cfg_result = GUCR_NONE;
 8007f32:	4b62      	ldr	r3, [pc, #392]	; (80080bc <gpsInitUblox+0x258>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8007f38:	4b60      	ldr	r3, [pc, #384]	; (80080bc <gpsInitUblox+0x258>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	4a5f      	ldr	r2, [pc, #380]	; (80080bc <gpsInitUblox+0x258>)
 8007f40:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007f42:	4b60      	ldr	r3, [pc, #384]	; (80080c4 <gpsInitUblox+0x260>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a5d      	ldr	r2, [pc, #372]	; (80080bc <gpsInitUblox+0x258>)
 8007f48:	6153      	str	r3, [r2, #20]
 8007f4a:	e0ac      	b.n	80080a6 <gpsInitUblox+0x242>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8007f4c:	4b5e      	ldr	r3, [pc, #376]	; (80080c8 <gpsInitUblox+0x264>)
 8007f4e:	220a      	movs	r2, #10
 8007f50:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007f52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e0a5      	b.n	80080a6 <gpsInitUblox+0x242>
			}
		}
		else if (gpsData.step == 15) {
 8007f5a:	4b58      	ldr	r3, [pc, #352]	; (80080bc <gpsInitUblox+0x258>)
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d120      	bne.n	8007fa4 <gpsInitUblox+0x140>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_RATE, sizeof(kCfgRate), (uint8_t*)kCfgRate, FALSE)) {
 8007f62:	2300      	movs	r3, #0
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	4b5c      	ldr	r3, [pc, #368]	; (80080d8 <gpsInitUblox+0x274>)
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	2306      	movs	r3, #6
 8007f6c:	2208      	movs	r2, #8
 8007f6e:	2106      	movs	r1, #6
 8007f70:	4856      	ldr	r0, [pc, #344]	; (80080cc <gpsInitUblox+0x268>)
 8007f72:	f00f f8ef 	bl	8017154 <pifGpsUblox_SendUbxMsg>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00c      	beq.n	8007f96 <gpsInitUblox+0x132>
                gpsData.cfg_result = GUCR_NONE;
 8007f7c:	4b4f      	ldr	r3, [pc, #316]	; (80080bc <gpsInitUblox+0x258>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8007f82:	4b4e      	ldr	r3, [pc, #312]	; (80080bc <gpsInitUblox+0x258>)
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	3314      	adds	r3, #20
 8007f88:	4a4c      	ldr	r2, [pc, #304]	; (80080bc <gpsInitUblox+0x258>)
 8007f8a:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007f8c:	4b4d      	ldr	r3, [pc, #308]	; (80080c4 <gpsInitUblox+0x260>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a4a      	ldr	r2, [pc, #296]	; (80080bc <gpsInitUblox+0x258>)
 8007f92:	6153      	str	r3, [r2, #20]
 8007f94:	e087      	b.n	80080a6 <gpsInitUblox+0x242>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8007f96:	4b4c      	ldr	r3, [pc, #304]	; (80080c8 <gpsInitUblox+0x264>)
 8007f98:	220a      	movs	r2, #10
 8007f9a:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007f9c:	f240 131b 	movw	r3, #283	; 0x11b
 8007fa0:	607b      	str	r3, [r7, #4]
 8007fa2:	e080      	b.n	80080a6 <gpsInitUblox+0x242>
			}
		}
		else if (gpsData.step == 16) {
 8007fa4:	4b45      	ldr	r3, [pc, #276]	; (80080bc <gpsInitUblox+0x258>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b10      	cmp	r3, #16
 8007faa:	d120      	bne.n	8007fee <gpsInitUblox+0x18a>
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_NAV5, sizeof(kCfgNav5), (uint8_t*)kCfgNav5, FALSE)) {
 8007fac:	2300      	movs	r3, #0
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	4b4a      	ldr	r3, [pc, #296]	; (80080dc <gpsInitUblox+0x278>)
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	2324      	movs	r3, #36	; 0x24
 8007fb6:	2224      	movs	r2, #36	; 0x24
 8007fb8:	2106      	movs	r1, #6
 8007fba:	4844      	ldr	r0, [pc, #272]	; (80080cc <gpsInitUblox+0x268>)
 8007fbc:	f00f f8ca 	bl	8017154 <pifGpsUblox_SendUbxMsg>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00c      	beq.n	8007fe0 <gpsInitUblox+0x17c>
                gpsData.cfg_result = GUCR_NONE;
 8007fc6:	4b3d      	ldr	r3, [pc, #244]	; (80080bc <gpsInitUblox+0x258>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8007fcc:	4b3b      	ldr	r3, [pc, #236]	; (80080bc <gpsInitUblox+0x258>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	3314      	adds	r3, #20
 8007fd2:	4a3a      	ldr	r2, [pc, #232]	; (80080bc <gpsInitUblox+0x258>)
 8007fd4:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 8007fd6:	4b3b      	ldr	r3, [pc, #236]	; (80080c4 <gpsInitUblox+0x260>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a38      	ldr	r2, [pc, #224]	; (80080bc <gpsInitUblox+0x258>)
 8007fdc:	6153      	str	r3, [r2, #20]
 8007fde:	e062      	b.n	80080a6 <gpsInitUblox+0x242>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8007fe0:	4b39      	ldr	r3, [pc, #228]	; (80080c8 <gpsInitUblox+0x264>)
 8007fe2:	220a      	movs	r2, #10
 8007fe4:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 8007fe6:	f44f 7393 	mov.w	r3, #294	; 0x126
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	e05b      	b.n	80080a6 <gpsInitUblox+0x242>
			}
		}
		else if (gpsData.step == 17) {
 8007fee:	4b33      	ldr	r3, [pc, #204]	; (80080bc <gpsInitUblox+0x258>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b11      	cmp	r3, #17
 8007ff4:	d12f      	bne.n	8008056 <gpsInitUblox+0x1f2>
			i = mcfg.gps_ubx_sbas > SBAS_DISABLED ? mcfg.gps_ubx_sbas : SBAS_LAST;
 8007ff6:	4b3a      	ldr	r3, [pc, #232]	; (80080e0 <gpsInitUblox+0x27c>)
 8007ff8:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	db04      	blt.n	800800a <gpsInitUblox+0x1a6>
 8008000:	4b37      	ldr	r3, [pc, #220]	; (80080e0 <gpsInitUblox+0x27c>)
 8008002:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8008006:	b2db      	uxtb	r3, r3
 8008008:	e000      	b.n	800800c <gpsInitUblox+0x1a8>
 800800a:	2305      	movs	r3, #5
 800800c:	70fb      	strb	r3, [r7, #3]
			if (pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_CFG, GUMI_CFG_SBAS, sizeof(kCfgSbas[i]), (uint8_t*)kCfgSbas[i], FALSE)) {
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4a34      	ldr	r2, [pc, #208]	; (80080e4 <gpsInitUblox+0x280>)
 8008014:	4413      	add	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	9201      	str	r2, [sp, #4]
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	2308      	movs	r3, #8
 800801e:	2216      	movs	r2, #22
 8008020:	2106      	movs	r1, #6
 8008022:	482a      	ldr	r0, [pc, #168]	; (80080cc <gpsInitUblox+0x268>)
 8008024:	f00f f896 	bl	8017154 <pifGpsUblox_SendUbxMsg>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00c      	beq.n	8008048 <gpsInitUblox+0x1e4>
                gpsData.cfg_result = GUCR_NONE;
 800802e:	4b23      	ldr	r3, [pc, #140]	; (80080bc <gpsInitUblox+0x258>)
 8008030:	2200      	movs	r2, #0
 8008032:	61da      	str	r2, [r3, #28]
				gpsData.step += 20;
 8008034:	4b21      	ldr	r3, [pc, #132]	; (80080bc <gpsInitUblox+0x258>)
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	3314      	adds	r3, #20
 800803a:	4a20      	ldr	r2, [pc, #128]	; (80080bc <gpsInitUblox+0x258>)
 800803c:	60d3      	str	r3, [r2, #12]
				gpsData.state_ts = pif_cumulative_timer1ms;
 800803e:	4b21      	ldr	r3, [pc, #132]	; (80080c4 <gpsInitUblox+0x260>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <gpsInitUblox+0x258>)
 8008044:	6153      	str	r3, [r2, #20]
 8008046:	e02e      	b.n	80080a6 <gpsInitUblox+0x242>
			}
			else {
				pif_error = E_TRANSFER_FAILED;
 8008048:	4b1f      	ldr	r3, [pc, #124]	; (80080c8 <gpsInitUblox+0x264>)
 800804a:	220a      	movs	r2, #10
 800804c:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 800804e:	f44f 7399 	mov.w	r3, #306	; 0x132
 8008052:	607b      	str	r3, [r7, #4]
 8008054:	e027      	b.n	80080a6 <gpsInitUblox+0x242>
			}
		}
		else if (gpsData.step == 18) {
 8008056:	4b19      	ldr	r3, [pc, #100]	; (80080bc <gpsInitUblox+0x258>)
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b12      	cmp	r3, #18
 800805c:	d123      	bne.n	80080a6 <gpsInitUblox+0x242>
			if (pif_cumulative_timer1ms - gpsData.state_ts < 10000) {
 800805e:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <gpsInitUblox+0x260>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b16      	ldr	r3, [pc, #88]	; (80080bc <gpsInitUblox+0x258>)
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	f242 720f 	movw	r2, #9999	; 0x270f
 800806c:	4293      	cmp	r3, r2
 800806e:	d814      	bhi.n	800809a <gpsInitUblox+0x236>
				if (gpsData.receive) {
 8008070:	4b12      	ldr	r3, [pc, #72]	; (80080bc <gpsInitUblox+0x258>)
 8008072:	7e1b      	ldrb	r3, [r3, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d016      	beq.n	80080a6 <gpsInitUblox+0x242>
					// ublox should be init'd, time to try receiving some junk
					serialStartReceiveFunc(&core.gpsport->comm);
 8008078:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <gpsInitUblox+0x284>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	3304      	adds	r3, #4
 800807e:	4618      	mov	r0, r3
 8008080:	f7fa faa8 	bl	80025d4 <serialStartReceiveFunc>
					pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, GPS_TIMEOUT, _evtGpsTimeout);
 8008084:	4b19      	ldr	r3, [pc, #100]	; (80080ec <gpsInitUblox+0x288>)
 8008086:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800808a:	4919      	ldr	r1, [pc, #100]	; (80080f0 <gpsInitUblox+0x28c>)
 800808c:	4819      	ldr	r0, [pc, #100]	; (80080f4 <gpsInitUblox+0x290>)
 800808e:	f00d fd61 	bl	8015b54 <pifGps_SetTimeout>
					gpsSetState(GPS_RECEIVINGDATA);
 8008092:	2005      	movs	r0, #5
 8008094:	f7ff fd2c 	bl	8007af0 <gpsSetState>
 8008098:	e005      	b.n	80080a6 <gpsInitUblox+0x242>
				}
			}
			else {
				pif_error = E_TIMEOUT;
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <gpsInitUblox+0x264>)
 800809c:	2207      	movs	r2, #7
 800809e:	701a      	strb	r2, [r3, #0]
				line = __LINE__;
 80080a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80080a4:	607b      	str	r3, [r7, #4]
			}
		}
	}

	if (line) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <gpsInitUblox+0x252>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "GPS(%u) CS:%u S:%u E:%u", line, cfg_msg_size, gpsData.step, pif_error);
#endif
		_evtGpsTimeout(&gps_ublox._gps);
 80080ac:	4811      	ldr	r0, [pc, #68]	; (80080f4 <gpsInitUblox+0x290>)
 80080ae:	f7ff fe3b 	bl	8007d28 <_evtGpsTimeout>
 80080b2:	e000      	b.n	80080b6 <gpsInitUblox+0x252>
		if (pif_cumulative_timer1ms - gpsData.state_ts < 5) return;
 80080b4:	bf00      	nop
	}
}
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000f30 	.word	0x20000f30
 80080c0:	2000130a 	.word	0x2000130a
 80080c4:	20001d60 	.word	0x20001d60
 80080c8:	20001d48 	.word	0x20001d48
 80080cc:	20000f50 	.word	0x20000f50
 80080d0:	08007b31 	.word	0x08007b31
 80080d4:	08028a84 	.word	0x08028a84
 80080d8:	08028aa8 	.word	0x08028aa8
 80080dc:	08028ab0 	.word	0x08028ab0
 80080e0:	20000848 	.word	0x20000848
 80080e4:	08028ad4 	.word	0x08028ad4
 80080e8:	20000790 	.word	0x20000790
 80080ec:	08007d29 	.word	0x08007d29
 80080f0:	200014e4 	.word	0x200014e4
 80080f4:	20000f60 	.word	0x20000f60

080080f8 <gpsInitHardware>:

static void gpsInitHardware(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
    switch (mcfg.gps_type) {
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <gpsInitHardware+0x34>)
 80080fe:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008102:	2b03      	cmp	r3, #3
 8008104:	dc0d      	bgt.n	8008122 <gpsInitHardware+0x2a>
 8008106:	2b02      	cmp	r3, #2
 8008108:	da0a      	bge.n	8008120 <gpsInitHardware+0x28>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <gpsInitHardware+0x1c>
 800810e:	2b01      	cmp	r3, #1
 8008110:	d003      	beq.n	800811a <gpsInitHardware+0x22>
 8008112:	e006      	b.n	8008122 <gpsInitHardware+0x2a>
        case GPS_NMEA:
            gpsInitNmea();
 8008114:	f7ff fe8c 	bl	8007e30 <gpsInitNmea>
            break;
 8008118:	e003      	b.n	8008122 <gpsInitHardware+0x2a>

        case GPS_UBLOX:
            gpsInitUblox();
 800811a:	f7ff fea3 	bl	8007e64 <gpsInitUblox>
            break;
 800811e:	e000      	b.n	8008122 <gpsInitHardware+0x2a>

        case GPS_MTK_NMEA:
        case GPS_MTK_BINARY:
            // TODO. need to find my old piece of shit MTK GPS.
            break;
 8008120:	bf00      	nop
    }

    // clear error counter
    gpsData.errors = 0;
 8008122:	4b03      	ldr	r3, [pc, #12]	; (8008130 <gpsInitHardware+0x38>)
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]
}
 8008128:	bf00      	nop
 800812a:	bd80      	pop	{r7, pc}
 800812c:	20000848 	.word	0x20000848
 8008130:	20000f30 	.word	0x20000f30

08008134 <gpsThread>:

void gpsThread(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af02      	add	r7, sp, #8
    uint32_t m;

    switch (gpsData.state) {
 800813a:	4b65      	ldr	r3, [pc, #404]	; (80082d0 <gpsThread+0x19c>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b06      	cmp	r3, #6
 8008140:	f200 80c2 	bhi.w	80082c8 <gpsThread+0x194>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <gpsThread+0x18>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	080082c9 	.word	0x080082c9
 8008150:	08008169 	.word	0x08008169
 8008154:	080081c3 	.word	0x080081c3
 8008158:	08008219 	.word	0x08008219
 800815c:	08008257 	.word	0x08008257
 8008160:	080082c9 	.word	0x080082c9
 8008164:	0800825d 	.word	0x0800825d
        case GPS_UNKNOWN:
            break;

        case GPS_INITIALIZING:
            m = pif_cumulative_timer1ms;
 8008168:	4b5a      	ldr	r3, [pc, #360]	; (80082d4 <gpsThread+0x1a0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < (gpsData.state_position ? GPS_BAUD_DELAY : 3000))
 800816e:	4b58      	ldr	r3, [pc, #352]	; (80082d0 <gpsThread+0x19c>)
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	4a56      	ldr	r2, [pc, #344]	; (80082d0 <gpsThread+0x19c>)
 8008178:	6912      	ldr	r2, [r2, #16]
 800817a:	2a00      	cmp	r2, #0
 800817c:	d001      	beq.n	8008182 <gpsThread+0x4e>
 800817e:	22c8      	movs	r2, #200	; 0xc8
 8008180:	e001      	b.n	8008186 <gpsThread+0x52>
 8008182:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008186:	429a      	cmp	r2, r3
 8008188:	f200 8099 	bhi.w	80082be <gpsThread+0x18a>
                return;

            if (gpsData.state_position < GPS_INIT_ENTRIES) {
 800818c:	4b50      	ldr	r3, [pc, #320]	; (80082d0 <gpsThread+0x19c>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b04      	cmp	r3, #4
 8008192:	dc12      	bgt.n	80081ba <gpsThread+0x86>
                // try different speed to INIT
                serialSetBaudRate(core.gpsport, gpsInitData[gpsData.state_position].baudrate);
 8008194:	4b50      	ldr	r3, [pc, #320]	; (80082d8 <gpsThread+0x1a4>)
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	4b4d      	ldr	r3, [pc, #308]	; (80082d0 <gpsThread+0x19c>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	494f      	ldr	r1, [pc, #316]	; (80082dc <gpsThread+0x1a8>)
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	440b      	add	r3, r1
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fa fa02 	bl	80025b0 <serialSetBaudRate>
                gpsData.state = GPS_SENDBAUD;
 80081ac:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <gpsThread+0x19c>)
 80081ae:	2202      	movs	r2, #2
 80081b0:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 80081b2:	4a47      	ldr	r2, [pc, #284]	; (80082d0 <gpsThread+0x19c>)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6153      	str	r3, [r2, #20]
            else
            {
                // we're now (hopefully) at the correct rate, next state will switch to it
                gpsSetState(GPS_SETBAUD);
            }
            break;
 80081b8:	e086      	b.n	80082c8 <gpsThread+0x194>
                gpsSetState(GPS_SETBAUD);
 80081ba:	2003      	movs	r0, #3
 80081bc:	f7ff fc98 	bl	8007af0 <gpsSetState>
            break;
 80081c0:	e082      	b.n	80082c8 <gpsThread+0x194>

        case GPS_SENDBAUD:
            m = pif_cumulative_timer1ms;
 80081c2:	4b44      	ldr	r3, [pc, #272]	; (80082d4 <gpsThread+0x1a0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < 200)
 80081c8:	4b41      	ldr	r3, [pc, #260]	; (80082d0 <gpsThread+0x19c>)
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2bc7      	cmp	r3, #199	; 0xc7
 80081d2:	d976      	bls.n	80082c2 <gpsThread+0x18e>
                return;

            // but print our FIXED init string for the baudrate we want to be at
            if (pifGpsUblox_SetPubxConfig(&gps_ublox, 1, 0x07, 0x03, gpsInitData[gpsData.baudrateIndex].baudrate, FALSE)) {
 80081d4:	4b3e      	ldr	r3, [pc, #248]	; (80082d0 <gpsThread+0x19c>)
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	4a40      	ldr	r2, [pc, #256]	; (80082dc <gpsThread+0x1a8>)
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	4413      	add	r3, r2
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	9201      	str	r2, [sp, #4]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2303      	movs	r3, #3
 80081e8:	2207      	movs	r2, #7
 80081ea:	2101      	movs	r1, #1
 80081ec:	483c      	ldr	r0, [pc, #240]	; (80082e0 <gpsThread+0x1ac>)
 80081ee:	f00e ff7b 	bl	80170e8 <pifGpsUblox_SetPubxConfig>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <gpsThread+0xdc>
                gpsData.state_position++;
 80081f8:	4b35      	ldr	r3, [pc, #212]	; (80082d0 <gpsThread+0x19c>)
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	3301      	adds	r3, #1
 80081fe:	4a34      	ldr	r2, [pc, #208]	; (80082d0 <gpsThread+0x19c>)
 8008200:	6113      	str	r3, [r2, #16]
                gpsData.state = GPS_INITIALIZING;
 8008202:	4b33      	ldr	r3, [pc, #204]	; (80082d0 <gpsThread+0x19c>)
 8008204:	2201      	movs	r2, #1
 8008206:	701a      	strb	r2, [r3, #0]
                gpsData.state_ts = m;
 8008208:	4a31      	ldr	r2, [pc, #196]	; (80082d0 <gpsThread+0x19c>)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6153      	str	r3, [r2, #20]
            }
            else {
        		gpsSetState(GPS_INITIALIZING);
            }
            break;
 800820e:	e05b      	b.n	80082c8 <gpsThread+0x194>
        		gpsSetState(GPS_INITIALIZING);
 8008210:	2001      	movs	r0, #1
 8008212:	f7ff fc6d 	bl	8007af0 <gpsSetState>
            break;
 8008216:	e057      	b.n	80082c8 <gpsThread+0x194>

        case GPS_SETBAUD:
            m = pif_cumulative_timer1ms;
 8008218:	4b2e      	ldr	r3, [pc, #184]	; (80082d4 <gpsThread+0x1a0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	607b      	str	r3, [r7, #4]
            if (m - gpsData.state_ts < GPS_BAUD_DELAY)
 800821e:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <gpsThread+0x19c>)
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2bc7      	cmp	r3, #199	; 0xc7
 8008228:	d94d      	bls.n	80082c6 <gpsThread+0x192>
                return;

            serialSetBaudRate(core.gpsport, gpsInitData[gpsData.baudrateIndex].baudrate);
 800822a:	4b2b      	ldr	r3, [pc, #172]	; (80082d8 <gpsThread+0x1a4>)
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <gpsThread+0x19c>)
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	492a      	ldr	r1, [pc, #168]	; (80082dc <gpsThread+0x1a8>)
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	440b      	add	r3, r1
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7fa f9b7 	bl	80025b0 <serialSetBaudRate>
        	serialStartReceiveFunc(&core.gpsport->comm);
 8008242:	4b25      	ldr	r3, [pc, #148]	; (80082d8 <gpsThread+0x1a4>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	3304      	adds	r3, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f7fa f9c3 	bl	80025d4 <serialStartReceiveFunc>
            gpsSetState(GPS_CONFIGURATION);
 800824e:	2004      	movs	r0, #4
 8008250:	f7ff fc4e 	bl	8007af0 <gpsSetState>
            break;
 8008254:	e038      	b.n	80082c8 <gpsThread+0x194>

        case GPS_CONFIGURATION:
            gpsInitHardware();
 8008256:	f7ff ff4f 	bl	80080f8 <gpsInitHardware>
            break;
 800825a:	e035      	b.n	80082c8 <gpsThread+0x194>

        case GPS_LOSTCOMMS:
            pifGps_SetTimeout(&gps_ublox._gps, &g_timer_1ms, 0, NULL);
 800825c:	2300      	movs	r3, #0
 800825e:	2200      	movs	r2, #0
 8008260:	4920      	ldr	r1, [pc, #128]	; (80082e4 <gpsThread+0x1b0>)
 8008262:	4821      	ldr	r0, [pc, #132]	; (80082e8 <gpsThread+0x1b4>)
 8008264:	f00d fc76 	bl	8015b54 <pifGps_SetTimeout>
            gpsData.errors++;
 8008268:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <gpsThread+0x19c>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	3301      	adds	r3, #1
 800826e:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <gpsThread+0x19c>)
 8008270:	6053      	str	r3, [r2, #4]
            // try another rate (Only if autobauding is enabled)
            if (mcfg.gps_autobaud) {
 8008272:	4b1e      	ldr	r3, [pc, #120]	; (80082ec <gpsThread+0x1b8>)
 8008274:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8008278:	2b00      	cmp	r3, #0
 800827a:	d012      	beq.n	80082a2 <gpsThread+0x16e>
                gpsData.baudrateIndex++;
 800827c:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <gpsThread+0x19c>)
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	3301      	adds	r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	4b12      	ldr	r3, [pc, #72]	; (80082d0 <gpsThread+0x19c>)
 8008286:	705a      	strb	r2, [r3, #1]
                gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 8008288:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <gpsThread+0x19c>)
 800828a:	785a      	ldrb	r2, [r3, #1]
 800828c:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <gpsThread+0x1bc>)
 800828e:	fba3 1302 	umull	r1, r3, r3, r2
 8008292:	0899      	lsrs	r1, r3, #2
 8008294:	460b      	mov	r3, r1
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	b2da      	uxtb	r2, r3
 800829e:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <gpsThread+0x19c>)
 80082a0:	705a      	strb	r2, [r3, #1]
            }
            gpsData.lastMessage = pif_cumulative_timer1ms;
 80082a2:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <gpsThread+0x1a0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a0a      	ldr	r2, [pc, #40]	; (80082d0 <gpsThread+0x19c>)
 80082a8:	6093      	str	r3, [r2, #8]
            // TODO - move some / all of these into gpsData
            GPS_numSat = 0;
 80082aa:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <gpsThread+0x1c0>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	701a      	strb	r2, [r3, #0]
            f.GPS_FIX = 0;
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <gpsThread+0x1c4>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	72da      	strb	r2, [r3, #11]
            gpsSetState(GPS_INITIALIZING);
 80082b6:	2001      	movs	r0, #1
 80082b8:	f7ff fc1a 	bl	8007af0 <gpsSetState>
            break;
 80082bc:	e004      	b.n	80082c8 <gpsThread+0x194>
                return;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <gpsThread+0x194>
                return;
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <gpsThread+0x194>
                return;
 80082c6:	bf00      	nop

        case GPS_RECEIVINGDATA:
            break;
    }
}
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000f30 	.word	0x20000f30
 80082d4:	20001d60 	.word	0x20001d60
 80082d8:	20000790 	.word	0x20000790
 80082dc:	08028a5c 	.word	0x08028a5c
 80082e0:	20000f50 	.word	0x20000f50
 80082e4:	200014e4 	.word	0x200014e4
 80082e8:	20000f60 	.word	0x20000f60
 80082ec:	20000848 	.word	0x20000848
 80082f0:	cccccccd 	.word	0xcccccccd
 80082f4:	20001794 	.word	0x20001794
 80082f8:	200016b0 	.word	0x200016b0

080082fc <gpsPollSvinfo>:

// gpsPollSvinfo-function. Used for polling UBX-NAV-SVINFO (0x01 0x30) information from GPS.
void gpsPollSvinfo(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af02      	add	r7, sp, #8
    // If selected GPS isn't UBLOX then we don't poll UBX messages.
    if (mcfg.gps_type != GPS_UBLOX)
 8008302:	4b2b      	ldr	r3, [pc, #172]	; (80083b0 <gpsPollSvinfo+0xb4>)
 8008304:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008308:	2b01      	cmp	r3, #1
 800830a:	d14d      	bne.n	80083a8 <gpsPollSvinfo+0xac>
        return;

    GPS_numCh = gps_ublox._num_ch;
 800830c:	4b29      	ldr	r3, [pc, #164]	; (80083b4 <gpsPollSvinfo+0xb8>)
 800830e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8008312:	4b29      	ldr	r3, [pc, #164]	; (80083b8 <gpsPollSvinfo+0xbc>)
 8008314:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 8008316:	2300      	movs	r3, #0
 8008318:	607b      	str	r3, [r7, #4]
 800831a:	e02a      	b.n	8008372 <gpsPollSvinfo+0x76>
        GPS_svinfo_chn[i] = gps_ublox._svinfo_chn[i];
 800831c:	4a25      	ldr	r2, [pc, #148]	; (80083b4 <gpsPollSvinfo+0xb8>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	3379      	adds	r3, #121	; 0x79
 8008324:	7819      	ldrb	r1, [r3, #0]
 8008326:	4a25      	ldr	r2, [pc, #148]	; (80083bc <gpsPollSvinfo+0xc0>)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	460a      	mov	r2, r1
 800832e:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_svid[i] = gps_ublox._svinfo_svid[i];
 8008330:	4a20      	ldr	r2, [pc, #128]	; (80083b4 <gpsPollSvinfo+0xb8>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4413      	add	r3, r2
 8008336:	3389      	adds	r3, #137	; 0x89
 8008338:	7819      	ldrb	r1, [r3, #0]
 800833a:	4a21      	ldr	r2, [pc, #132]	; (80083c0 <gpsPollSvinfo+0xc4>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4413      	add	r3, r2
 8008340:	460a      	mov	r2, r1
 8008342:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_quality[i] = gps_ublox._svinfo_quality[i];
 8008344:	4a1b      	ldr	r2, [pc, #108]	; (80083b4 <gpsPollSvinfo+0xb8>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	3399      	adds	r3, #153	; 0x99
 800834c:	7819      	ldrb	r1, [r3, #0]
 800834e:	4a1d      	ldr	r2, [pc, #116]	; (80083c4 <gpsPollSvinfo+0xc8>)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	460a      	mov	r2, r1
 8008356:	701a      	strb	r2, [r3, #0]
        GPS_svinfo_cno[i] = gps_ublox._svinfo_cno[i];
 8008358:	4a16      	ldr	r2, [pc, #88]	; (80083b4 <gpsPollSvinfo+0xb8>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	33a9      	adds	r3, #169	; 0xa9
 8008360:	7819      	ldrb	r1, [r3, #0]
 8008362:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <gpsPollSvinfo+0xcc>)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	460a      	mov	r2, r1
 800836a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < GPS_numCh; i++) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <gpsPollSvinfo+0xbc>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4293      	cmp	r3, r2
 800837c:	dbce      	blt.n	800831c <gpsPollSvinfo+0x20>
    }
    // Update GPS SVIFO update rate table.
    GPS_svinfo_rate[0] = gps_ublox._svinfo_rate[0];
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <gpsPollSvinfo+0xb8>)
 8008380:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008384:	4a11      	ldr	r2, [pc, #68]	; (80083cc <gpsPollSvinfo+0xd0>)
 8008386:	6013      	str	r3, [r2, #0]
    GPS_svinfo_rate[1] = gps_ublox._svinfo_rate[1];
 8008388:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <gpsPollSvinfo+0xb8>)
 800838a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800838e:	4a0f      	ldr	r2, [pc, #60]	; (80083cc <gpsPollSvinfo+0xd0>)
 8008390:	6053      	str	r3, [r2, #4]

    pifGpsUblox_SendUbxMsg(&gps_ublox, GUCI_NAV, GUMI_NAV_SVINFO, 0, NULL, FALSE);
 8008392:	2300      	movs	r3, #0
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	2300      	movs	r3, #0
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	2230      	movs	r2, #48	; 0x30
 800839e:	2101      	movs	r1, #1
 80083a0:	4804      	ldr	r0, [pc, #16]	; (80083b4 <gpsPollSvinfo+0xb8>)
 80083a2:	f00e fed7 	bl	8017154 <pifGpsUblox_SendUbxMsg>
 80083a6:	e000      	b.n	80083aa <gpsPollSvinfo+0xae>
        return;
 80083a8:	bf00      	nop
}
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000848 	.word	0x20000848
 80083b4:	20000f50 	.word	0x20000f50
 80083b8:	200017b1 	.word	0x200017b1
 80083bc:	200017b4 	.word	0x200017b4
 80083c0:	200017d4 	.word	0x200017d4
 80083c4:	200017f4 	.word	0x200017f4
 80083c8:	20001814 	.word	0x20001814
 80083cc:	2000183c 	.word	0x2000183c

080083d0 <get_P>:
static PID posholdPID[2];
static PID poshold_ratePID[2];
static PID navPID[2];

static int32_t get_P(int32_t error, PID_PARAM *pid)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
    return (float)error * pid->kP;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	edd3 7a00 	vldr	s15, [r3]
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f2:	ee17 3a90 	vmov	r3, s15
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <get_I>:

static int32_t get_I(int32_t error, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
 800840e:	603b      	str	r3, [r7, #0]
    pid->integrator += ((float)error * pid_param->kI) **dt;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	ed93 7a00 	vldr	s14, [r3]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	edd3 7a01 	vldr	s15, [r3, #4]
 8008426:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	edd3 7a00 	vldr	s15, [r3]
 8008430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	edc3 7a00 	vstr	s15, [r3]
    pid->integrator = constrain(pid->integrator, -pid_param->Imax, pid_param->Imax);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	edd3 7a00 	vldr	s15, [r3]
 8008444:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	edd3 7a03 	vldr	s15, [r3, #12]
 800844e:	eef1 7a67 	vneg.f32	s15, s15
 8008452:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	edd3 7a03 	vldr	s15, [r3, #12]
 800845c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008460:	ee17 2a90 	vmov	r2, s15
 8008464:	ee16 1a90 	vmov	r1, s13
 8008468:	ee17 0a10 	vmov	r0, s14
 800846c:	f7fb fbcc 	bl	8003c08 <constrain>
 8008470:	ee07 0a90 	vmov	s15, r0
 8008474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	edc3 7a00 	vstr	s15, [r3]
    return pid->integrator;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	edd3 7a00 	vldr	s15, [r3]
 8008484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008488:	ee17 3a90 	vmov	r3, s15
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	0000      	movs	r0, r0
	...

08008498 <get_D>:

static int32_t get_D(int32_t input, float *dt, PID *pid, PID_PARAM *pid_param)
{
 8008498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	60b9      	str	r1, [r7, #8]
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	603b      	str	r3, [r7, #0]
    pid->derivative = (input - pid->last_input) / *dt;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	ed93 7a00 	vldr	s14, [r3]
 80084be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	edc3 7a04 	vstr	s15, [r3, #16]
    // Low pass filter cut frequency for derivative calculation
    // Set to  "1 / ( 2 * PI * gps_lpf )"
#define PID_FILTER       (1.0f / (2.0f * M_PI * (float)cfg.gps_lpf))
    // discrete low pass filter, cuts out the
    // high frequency noise that can drive the controller crazy
    pid->derivative = pid->last_derivative + (*dt / (PID_FILTER + *dt)) * (pid->derivative - pid->last_derivative);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f7 ffef 	bl	80004b0 <__aeabi_f2d>
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f7 ffe8 	bl	80004b0 <__aeabi_f2d>
 80084e0:	4680      	mov	r8, r0
 80084e2:	4689      	mov	r9, r1
 80084e4:	4b36      	ldr	r3, [pc, #216]	; (80085c0 <get_D+0x128>)
 80084e6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80084ea:	ee07 3a90 	vmov	s15, r3
 80084ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f2:	ee17 0a90 	vmov	r0, s15
 80084f6:	f7f7 ffdb 	bl	80004b0 <__aeabi_f2d>
 80084fa:	a32f      	add	r3, pc, #188	; (adr r3, 80085b8 <get_D+0x120>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f7f8 f82e 	bl	8000560 <__aeabi_dmul>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	f04f 0000 	mov.w	r0, #0
 800850c:	492d      	ldr	r1, [pc, #180]	; (80085c4 <get_D+0x12c>)
 800850e:	f7f8 f951 	bl	80007b4 <__aeabi_ddiv>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4692      	mov	sl, r2
 8008518:	469b      	mov	fp, r3
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7f7 ffc6 	bl	80004b0 <__aeabi_f2d>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	4650      	mov	r0, sl
 800852a:	4659      	mov	r1, fp
 800852c:	f7f7 fe62 	bl	80001f4 <__adddf3>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4640      	mov	r0, r8
 8008536:	4649      	mov	r1, r9
 8008538:	f7f8 f93c 	bl	80007b4 <__aeabi_ddiv>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4690      	mov	r8, r2
 8008542:	4699      	mov	r9, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	ed93 7a04 	vldr	s14, [r3, #16]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008554:	ee17 0a90 	vmov	r0, s15
 8008558:	f7f7 ffaa 	bl	80004b0 <__aeabi_f2d>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	f7f7 fffc 	bl	8000560 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 fe40 	bl	80001f4 <__adddf3>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4610      	mov	r0, r2
 800857a:	4619      	mov	r1, r3
 800857c:	f7f8 fad2 	bl	8000b24 <__aeabi_d2f>
 8008580:	4602      	mov	r2, r0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]
    // update state
    pid->last_input = input;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	605a      	str	r2, [r3, #4]
    pid->last_derivative = pid->derivative;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	609a      	str	r2, [r3, #8]
    // add in derivative component
    return pid_param->kD * pid->derivative;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	ed93 7a02 	vldr	s14, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	edd3 7a04 	vldr	s15, [r3, #16]
 80085a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085a8:	ee17 3a90 	vmov	r3, s15
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085b6:	bf00      	nop
 80085b8:	54442d18 	.word	0x54442d18
 80085bc:	401921fb 	.word	0x401921fb
 80085c0:	20000db4 	.word	0x20000db4
 80085c4:	3ff00000 	.word	0x3ff00000

080085c8 <reset_PID>:

static void reset_PID(PID *pid)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    pid->integrator = 0;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f04f 0200 	mov.w	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
    pid->last_input = 0;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	605a      	str	r2, [r3, #4]
    pid->last_derivative = 0;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	609a      	str	r2, [r3, #8]
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
	...

080085f4 <taskGpsNewData>:
int32_t nav_bearing;
// saves the bearing at takeof (1deg = 1) used to rotate to takeoff direction when arrives at home
static int16_t nav_takeoff_bearing;

uint16_t taskGpsNewData(PifTask *p_task)
{
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b089      	sub	sp, #36	; 0x24
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	6078      	str	r0, [r7, #4]
    int16_t speed;

    (void)p_task;

        // new data received and parsed, we're in business
        gpsData.lastMessage = pif_cumulative_timer1ms;
 80085fc:	4b84      	ldr	r3, [pc, #528]	; (8008810 <taskGpsNewData+0x21c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a84      	ldr	r2, [pc, #528]	; (8008814 <taskGpsNewData+0x220>)
 8008602:	6093      	str	r3, [r2, #8]
        sensorsSet(SENSOR_GPS);
 8008604:	2020      	movs	r0, #32
 8008606:	f7fe fc31 	bl	8006e6c <sensorsSet>
        if (GPS_update == 1)
 800860a:	4b83      	ldr	r3, [pc, #524]	; (8008818 <taskGpsNewData+0x224>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d103      	bne.n	800861a <taskGpsNewData+0x26>
            GPS_update = 0;
 8008612:	4b81      	ldr	r3, [pc, #516]	; (8008818 <taskGpsNewData+0x224>)
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e002      	b.n	8008620 <taskGpsNewData+0x2c>
        else
            GPS_update = 1;
 800861a:	4b7f      	ldr	r3, [pc, #508]	; (8008818 <taskGpsNewData+0x224>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
        if (f.GPS_FIX && GPS_numSat >= 5) {
 8008620:	4b7e      	ldr	r3, [pc, #504]	; (800881c <taskGpsNewData+0x228>)
 8008622:	7adb      	ldrb	r3, [r3, #11]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 81ae 	beq.w	8008986 <taskGpsNewData+0x392>
 800862a:	4b7d      	ldr	r3, [pc, #500]	; (8008820 <taskGpsNewData+0x22c>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b04      	cmp	r3, #4
 8008630:	f240 81a9 	bls.w	8008986 <taskGpsNewData+0x392>
            if (!f.ARMED && !f.FIXED_WING)
 8008634:	4b79      	ldr	r3, [pc, #484]	; (800881c <taskGpsNewData+0x228>)
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d106      	bne.n	800864a <taskGpsNewData+0x56>
 800863c:	4b77      	ldr	r3, [pc, #476]	; (800881c <taskGpsNewData+0x228>)
 800863e:	7c1b      	ldrb	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <taskGpsNewData+0x56>
                f.GPS_FIX_HOME = 0;
 8008644:	4b75      	ldr	r3, [pc, #468]	; (800881c <taskGpsNewData+0x228>)
 8008646:	2200      	movs	r2, #0
 8008648:	731a      	strb	r2, [r3, #12]
            if (!f.GPS_FIX_HOME && f.ARMED)
 800864a:	4b74      	ldr	r3, [pc, #464]	; (800881c <taskGpsNewData+0x228>)
 800864c:	7b1b      	ldrb	r3, [r3, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d105      	bne.n	800865e <taskGpsNewData+0x6a>
 8008652:	4b72      	ldr	r3, [pc, #456]	; (800881c <taskGpsNewData+0x228>)
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <taskGpsNewData+0x6a>
                GPS_reset_home_position();
 800865a:	f000 f9c1 	bl	80089e0 <GPS_reset_home_position>
            // Apply moving average filter to GPS data
#if defined(GPS_FILTERING)
            GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 800865e:	4b71      	ldr	r3, [pc, #452]	; (8008824 <taskGpsNewData+0x230>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	4b70      	ldr	r3, [pc, #448]	; (8008828 <taskGpsNewData+0x234>)
 8008666:	fb83 1302 	smull	r1, r3, r3, r2
 800866a:	1059      	asrs	r1, r3, #1
 800866c:	17d3      	asrs	r3, r2, #31
 800866e:	1ac9      	subs	r1, r1, r3
 8008670:	460b      	mov	r3, r1
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	1ad1      	subs	r1, r2, r3
 8008678:	b2ca      	uxtb	r2, r1
 800867a:	4b6a      	ldr	r3, [pc, #424]	; (8008824 <taskGpsNewData+0x230>)
 800867c:	701a      	strb	r2, [r3, #0]
            for (axis = 0; axis < 2; axis++) {
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	e09f      	b.n	80087c4 <taskGpsNewData+0x1d0>
                GPS_read[axis] = GPS_coord[axis];               // latest unfiltered data is in GPS_latitude and GPS_longitude
 8008684:	4a69      	ldr	r2, [pc, #420]	; (800882c <taskGpsNewData+0x238>)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800868c:	4968      	ldr	r1, [pc, #416]	; (8008830 <taskGpsNewData+0x23c>)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to the int32_t
 8008694:	4a66      	ldr	r2, [pc, #408]	; (8008830 <taskGpsNewData+0x23c>)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800869c:	4a65      	ldr	r2, [pc, #404]	; (8008834 <taskGpsNewData+0x240>)
 800869e:	fb82 1203 	smull	r1, r2, r2, r3
 80086a2:	1592      	asrs	r2, r2, #22
 80086a4:	17db      	asrs	r3, r3, #31
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	4963      	ldr	r1, [pc, #396]	; (8008838 <taskGpsNewData+0x244>)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                // How close we are to a degree line ? its the first three digits from the fractions of degree
                // later we use it to Check if we are close to a degree line, if yes, disable averaging,
                fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 80086b0:	4a5f      	ldr	r2, [pc, #380]	; (8008830 <taskGpsNewData+0x23c>)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80086b8:	495f      	ldr	r1, [pc, #380]	; (8008838 <taskGpsNewData+0x244>)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80086c0:	495e      	ldr	r1, [pc, #376]	; (800883c <taskGpsNewData+0x248>)
 80086c2:	fb01 f303 	mul.w	r3, r1, r3
 80086c6:	4413      	add	r3, r2
 80086c8:	4a5d      	ldr	r2, [pc, #372]	; (8008840 <taskGpsNewData+0x24c>)
 80086ca:	fb82 1203 	smull	r1, r2, r2, r3
 80086ce:	1312      	asrs	r2, r2, #12
 80086d0:	17db      	asrs	r3, r3, #31
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	b299      	uxth	r1, r3
 80086d6:	4a5b      	ldr	r2, [pc, #364]	; (8008844 <taskGpsNewData+0x250>)
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

                GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 80086de:	4a5a      	ldr	r2, [pc, #360]	; (8008848 <taskGpsNewData+0x254>)
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086e6:	4b4f      	ldr	r3, [pc, #316]	; (8008824 <taskGpsNewData+0x230>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461c      	mov	r4, r3
 80086ec:	4857      	ldr	r0, [pc, #348]	; (800884c <taskGpsNewData+0x258>)
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	4423      	add	r3, r4
 80086f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80086fc:	1aca      	subs	r2, r1, r3
 80086fe:	4952      	ldr	r1, [pc, #328]	; (8008848 <taskGpsNewData+0x254>)
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 8008706:	4a4a      	ldr	r2, [pc, #296]	; (8008830 <taskGpsNewData+0x23c>)
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800870e:	494a      	ldr	r1, [pc, #296]	; (8008838 <taskGpsNewData+0x244>)
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008716:	4949      	ldr	r1, [pc, #292]	; (800883c <taskGpsNewData+0x248>)
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	4941      	ldr	r1, [pc, #260]	; (8008824 <taskGpsNewData+0x230>)
 800871e:	7809      	ldrb	r1, [r1, #0]
 8008720:	460c      	mov	r4, r1
 8008722:	18d1      	adds	r1, r2, r3
 8008724:	4849      	ldr	r0, [pc, #292]	; (800884c <taskGpsNewData+0x258>)
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	4423      	add	r3, r4
 8008730:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 8008734:	4a44      	ldr	r2, [pc, #272]	; (8008848 <taskGpsNewData+0x254>)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800873c:	4b39      	ldr	r3, [pc, #228]	; (8008824 <taskGpsNewData+0x230>)
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	461c      	mov	r4, r3
 8008742:	4842      	ldr	r0, [pc, #264]	; (800884c <taskGpsNewData+0x258>)
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	4423      	add	r3, r4
 800874e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008752:	18ca      	adds	r2, r1, r3
 8008754:	493c      	ldr	r1, [pc, #240]	; (8008848 <taskGpsNewData+0x254>)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 10000000);
 800875c:	4a3a      	ldr	r2, [pc, #232]	; (8008848 <taskGpsNewData+0x254>)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008764:	4a30      	ldr	r2, [pc, #192]	; (8008828 <taskGpsNewData+0x234>)
 8008766:	fb82 1203 	smull	r1, r2, r2, r3
 800876a:	1052      	asrs	r2, r2, #1
 800876c:	17db      	asrs	r3, r3, #31
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	4931      	ldr	r1, [pc, #196]	; (8008838 <taskGpsNewData+0x244>)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008778:	4935      	ldr	r1, [pc, #212]	; (8008850 <taskGpsNewData+0x25c>)
 800877a:	fb01 f303 	mul.w	r3, r1, r3
 800877e:	441a      	add	r2, r3
 8008780:	4934      	ldr	r1, [pc, #208]	; (8008854 <taskGpsNewData+0x260>)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mode...
 8008788:	4b33      	ldr	r3, [pc, #204]	; (8008858 <taskGpsNewData+0x264>)
 800878a:	f993 3000 	ldrsb.w	r3, [r3]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d115      	bne.n	80087be <taskGpsNewData+0x1ca>
                    if (fraction3[axis] > 1 && fraction3[axis] < 999)
 8008792:	4a2c      	ldr	r2, [pc, #176]	; (8008844 <taskGpsNewData+0x250>)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d90f      	bls.n	80087be <taskGpsNewData+0x1ca>
 800879e:	4a29      	ldr	r2, [pc, #164]	; (8008844 <taskGpsNewData+0x250>)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087a6:	f240 32e6 	movw	r2, #998	; 0x3e6
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d807      	bhi.n	80087be <taskGpsNewData+0x1ca>
                        GPS_coord[axis] = GPS_filtered[axis];
 80087ae:	4a29      	ldr	r2, [pc, #164]	; (8008854 <taskGpsNewData+0x260>)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80087b6:	491d      	ldr	r1, [pc, #116]	; (800882c <taskGpsNewData+0x238>)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (axis = 0; axis < 2; axis++) {
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	3301      	adds	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	f77f af5c 	ble.w	8008684 <taskGpsNewData+0x90>
                }
            }
#endif
            // dTnav calculation
            // Time for calculating x,y speed and navigation pids
            dTnav = (float)(pif_cumulative_timer1ms - nav_loopTimer) / 1000.0f;
 80087cc:	4b10      	ldr	r3, [pc, #64]	; (8008810 <taskGpsNewData+0x21c>)
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	4b22      	ldr	r3, [pc, #136]	; (800885c <taskGpsNewData+0x268>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087de:	eddf 6a20 	vldr	s13, [pc, #128]	; 8008860 <taskGpsNewData+0x26c>
 80087e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087e6:	4b1f      	ldr	r3, [pc, #124]	; (8008864 <taskGpsNewData+0x270>)
 80087e8:	edc3 7a00 	vstr	s15, [r3]
            nav_loopTimer = pif_cumulative_timer1ms;
 80087ec:	4b08      	ldr	r3, [pc, #32]	; (8008810 <taskGpsNewData+0x21c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1a      	ldr	r2, [pc, #104]	; (800885c <taskGpsNewData+0x268>)
 80087f2:	6013      	str	r3, [r2, #0]
            // prevent runup from bad GPS
            dTnav = min(dTnav, 1.0f);
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <taskGpsNewData+0x270>)
 80087f6:	edd3 7a00 	vldr	s15, [r3]
 80087fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008806:	d52f      	bpl.n	8008868 <taskGpsNewData+0x274>
 8008808:	4b16      	ldr	r3, [pc, #88]	; (8008864 <taskGpsNewData+0x270>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	e02e      	b.n	800886c <taskGpsNewData+0x278>
 800880e:	bf00      	nop
 8008810:	20001d60 	.word	0x20001d60
 8008814:	20000f30 	.word	0x20000f30
 8008818:	2000179e 	.word	0x2000179e
 800881c:	200016b0 	.word	0x200016b0
 8008820:	20001794 	.word	0x20001794
 8008824:	200012b6 	.word	0x200012b6
 8008828:	66666667 	.word	0x66666667
 800882c:	20001774 	.word	0x20001774
 8008830:	200012e8 	.word	0x200012e8
 8008834:	6b5fca6b 	.word	0x6b5fca6b
 8008838:	200012f8 	.word	0x200012f8
 800883c:	ff676980 	.word	0xff676980
 8008840:	68db8bad 	.word	0x68db8bad
 8008844:	20001300 	.word	0x20001300
 8008848:	200012e0 	.word	0x200012e0
 800884c:	200012b8 	.word	0x200012b8
 8008850:	00989680 	.word	0x00989680
 8008854:	200012f0 	.word	0x200012f0
 8008858:	200017b0 	.word	0x200017b0
 800885c:	2000130c 	.word	0x2000130c
 8008860:	447a0000 	.word	0x447a0000
 8008864:	20001288 	.word	0x20001288
 8008868:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800886c:	4a4a      	ldr	r2, [pc, #296]	; (8008998 <taskGpsNewData+0x3a4>)
 800886e:	6013      	str	r3, [r2, #0]

            // calculate distance and bearings for gui and other stuff continously - From home to copter
            GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_home[LAT], &GPS_home[LON], &dist, &dir);
 8008870:	f107 0308 	add.w	r3, r7, #8
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	f107 030c 	add.w	r3, r7, #12
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	4b47      	ldr	r3, [pc, #284]	; (800899c <taskGpsNewData+0x3a8>)
 800887e:	4a48      	ldr	r2, [pc, #288]	; (80089a0 <taskGpsNewData+0x3ac>)
 8008880:	4948      	ldr	r1, [pc, #288]	; (80089a4 <taskGpsNewData+0x3b0>)
 8008882:	4849      	ldr	r0, [pc, #292]	; (80089a8 <taskGpsNewData+0x3b4>)
 8008884:	f000 fad4 	bl	8008e30 <GPS_distance_cm_bearing>
            GPS_distanceToHome = dist / 100;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a48      	ldr	r2, [pc, #288]	; (80089ac <taskGpsNewData+0x3b8>)
 800888c:	fb82 1203 	smull	r1, r2, r2, r3
 8008890:	1152      	asrs	r2, r2, #5
 8008892:	17db      	asrs	r3, r3, #31
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	b29a      	uxth	r2, r3
 8008898:	4b45      	ldr	r3, [pc, #276]	; (80089b0 <taskGpsNewData+0x3bc>)
 800889a:	801a      	strh	r2, [r3, #0]
            GPS_directionToHome = dir / 100;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4a43      	ldr	r2, [pc, #268]	; (80089ac <taskGpsNewData+0x3b8>)
 80088a0:	fb82 1203 	smull	r1, r2, r2, r3
 80088a4:	1152      	asrs	r2, r2, #5
 80088a6:	17db      	asrs	r3, r3, #31
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	b21a      	sxth	r2, r3
 80088ac:	4b41      	ldr	r3, [pc, #260]	; (80089b4 <taskGpsNewData+0x3c0>)
 80088ae:	801a      	strh	r2, [r3, #0]

            if (!f.GPS_FIX_HOME) {      // If we don't have home set, do not display anything
 80088b0:	4b41      	ldr	r3, [pc, #260]	; (80089b8 <taskGpsNewData+0x3c4>)
 80088b2:	7b1b      	ldrb	r3, [r3, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d105      	bne.n	80088c4 <taskGpsNewData+0x2d0>
                GPS_distanceToHome = 0;
 80088b8:	4b3d      	ldr	r3, [pc, #244]	; (80089b0 <taskGpsNewData+0x3bc>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	801a      	strh	r2, [r3, #0]
                GPS_directionToHome = 0;
 80088be:	4b3d      	ldr	r3, [pc, #244]	; (80089b4 <taskGpsNewData+0x3c0>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	801a      	strh	r2, [r3, #0]
            }

            // calculate the current velocity based on gps coordinates continously to get a valid speed at the moment when we start navigating
            GPS_calc_velocity();
 80088c4:	f000 fb22 	bl	8008f0c <GPS_calc_velocity>

            if (f.GPS_HOLD_MODE || f.GPS_HOME_MODE) { // ok we are navigating
 80088c8:	4b3b      	ldr	r3, [pc, #236]	; (80089b8 <taskGpsNewData+0x3c4>)
 80088ca:	7a1b      	ldrb	r3, [r3, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <taskGpsNewData+0x2e4>
 80088d0:	4b39      	ldr	r3, [pc, #228]	; (80089b8 <taskGpsNewData+0x3c4>)
 80088d2:	79db      	ldrb	r3, [r3, #7]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d056      	beq.n	8008986 <taskGpsNewData+0x392>
                // do gps nav calculations here, these are common for nav and poshold
                GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 80088d8:	4b38      	ldr	r3, [pc, #224]	; (80089bc <taskGpsNewData+0x3c8>)
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	4b38      	ldr	r3, [pc, #224]	; (80089c0 <taskGpsNewData+0x3cc>)
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	4b38      	ldr	r3, [pc, #224]	; (80089c4 <taskGpsNewData+0x3d0>)
 80088e2:	4a39      	ldr	r2, [pc, #228]	; (80089c8 <taskGpsNewData+0x3d4>)
 80088e4:	492f      	ldr	r1, [pc, #188]	; (80089a4 <taskGpsNewData+0x3b0>)
 80088e6:	4830      	ldr	r0, [pc, #192]	; (80089a8 <taskGpsNewData+0x3b4>)
 80088e8:	f000 faa2 	bl	8008e30 <GPS_distance_cm_bearing>
                GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 80088ec:	4b2d      	ldr	r3, [pc, #180]	; (80089a4 <taskGpsNewData+0x3b0>)
 80088ee:	4a2e      	ldr	r2, [pc, #184]	; (80089a8 <taskGpsNewData+0x3b4>)
 80088f0:	4934      	ldr	r1, [pc, #208]	; (80089c4 <taskGpsNewData+0x3d0>)
 80088f2:	4835      	ldr	r0, [pc, #212]	; (80089c8 <taskGpsNewData+0x3d4>)
 80088f4:	f000 fb8c 	bl	8009010 <GPS_calc_location_error>

                if (f.FIXED_WING)
 80088f8:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <taskGpsNewData+0x3c4>)
 80088fa:	7c1b      	ldrb	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <taskGpsNewData+0x312>
                    nav_mode = NAV_MODE_WP; // Planes always navigate in Wp mode.
 8008900:	4b32      	ldr	r3, [pc, #200]	; (80089cc <taskGpsNewData+0x3d8>)
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]

                switch (nav_mode) {
 8008906:	4b31      	ldr	r3, [pc, #196]	; (80089cc <taskGpsNewData+0x3d8>)
 8008908:	f993 3000 	ldrsb.w	r3, [r3]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d002      	beq.n	8008916 <taskGpsNewData+0x322>
 8008910:	2b02      	cmp	r3, #2
 8008912:	d003      	beq.n	800891c <taskGpsNewData+0x328>
 8008914:	e03a      	b.n	800898c <taskGpsNewData+0x398>
                    case NAV_MODE_POSHOLD:
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_poshold();
 8008916:	f000 fba7 	bl	8009068 <GPS_calc_poshold>
                        break;
 800891a:	e037      	b.n	800898c <taskGpsNewData+0x398>

                    case NAV_MODE_WP:
                        speed = GPS_calc_desired_speed(cfg.nav_speed_max, NAV_SLOW_NAV);    // slow navigation
 800891c:	4b2c      	ldr	r3, [pc, #176]	; (80089d0 <taskGpsNewData+0x3dc>)
 800891e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8008922:	b21b      	sxth	r3, r3
 8008924:	2101      	movs	r1, #1
 8008926:	4618      	mov	r0, r3
 8008928:	f000 fdac 	bl	8009484 <GPS_calc_desired_speed>
 800892c:	4603      	mov	r3, r0
 800892e:	827b      	strh	r3, [r7, #18]
                        // use error as the desired rate towards the target
                        // Desired output is in nav_lat and nav_lon where 1deg inclination is 100
                        GPS_calc_nav_rate(speed);
 8008930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fc4f 	bl	80091d8 <GPS_calc_nav_rate>

                        // Tail control
                        if (cfg.nav_controls_heading) {
 800893a:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <taskGpsNewData+0x3dc>)
 800893c:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <taskGpsNewData+0x366>
                            if (NAV_TAIL_FIRST) {
                                magHold = wrap_18000(nav_bearing - 18000) / 100;
                            } else {
                                magHold = nav_bearing / 100;
 8008944:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <taskGpsNewData+0x3e0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a18      	ldr	r2, [pc, #96]	; (80089ac <taskGpsNewData+0x3b8>)
 800894a:	fb82 1203 	smull	r1, r2, r2, r3
 800894e:	1152      	asrs	r2, r2, #5
 8008950:	17db      	asrs	r3, r3, #31
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	b21a      	sxth	r2, r3
 8008956:	4b20      	ldr	r3, [pc, #128]	; (80089d8 <taskGpsNewData+0x3e4>)
 8008958:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        // Are we there yet ?(within x meters of the destination)
                        if ((wp_distance <= cfg.gps_wp_radius) || check_missed_wp()) {      // if yes switch to poshold mode
 800895a:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <taskGpsNewData+0x3dc>)
 800895c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8008960:	461a      	mov	r2, r3
 8008962:	4b17      	ldr	r3, [pc, #92]	; (80089c0 <taskGpsNewData+0x3cc>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	da04      	bge.n	8008974 <taskGpsNewData+0x380>
 800896a:	f000 fa41 	bl	8008df0 <check_missed_wp>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <taskGpsNewData+0x396>
                            nav_mode = NAV_MODE_POSHOLD;
 8008974:	4b15      	ldr	r3, [pc, #84]	; (80089cc <taskGpsNewData+0x3d8>)
 8008976:	2201      	movs	r2, #1
 8008978:	701a      	strb	r2, [r3, #0]
                            if (NAV_SET_TAKEOFF_HEADING) {
                                magHold = nav_takeoff_bearing;
 800897a:	4b18      	ldr	r3, [pc, #96]	; (80089dc <taskGpsNewData+0x3e8>)
 800897c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008980:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <taskGpsNewData+0x3e4>)
 8008982:	801a      	strh	r2, [r3, #0]
                            }
                        }
                        break;
 8008984:	e001      	b.n	800898a <taskGpsNewData+0x396>
                }
            }                   //end of gps calcs
 8008986:	bf00      	nop
 8008988:	e000      	b.n	800898c <taskGpsNewData+0x398>
                        break;
 800898a:	bf00      	nop
        }

    return 0;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	bd90      	pop	{r4, r7, pc}
 8008996:	bf00      	nop
 8008998:	20001288 	.word	0x20001288
 800899c:	20001780 	.word	0x20001780
 80089a0:	2000177c 	.word	0x2000177c
 80089a4:	20001778 	.word	0x20001778
 80089a8:	20001774 	.word	0x20001774
 80089ac:	51eb851f 	.word	0x51eb851f
 80089b0:	20001796 	.word	0x20001796
 80089b4:	20001798 	.word	0x20001798
 80089b8:	200016b0 	.word	0x200016b0
 80089bc:	200012a4 	.word	0x200012a4
 80089c0:	200012b0 	.word	0x200012b0
 80089c4:	200012a0 	.word	0x200012a0
 80089c8:	2000129c 	.word	0x2000129c
 80089cc:	200017b0 	.word	0x200017b0
 80089d0:	20000db4 	.word	0x20000db4
 80089d4:	20001304 	.word	0x20001304
 80089d8:	200019e8 	.word	0x200019e8
 80089dc:	20001308 	.word	0x20001308

080089e0 <GPS_reset_home_position>:

void GPS_reset_home_position(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
    if (f.GPS_FIX && GPS_numSat >= 5) {
 80089e4:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <GPS_reset_home_position+0x4c>)
 80089e6:	7adb      	ldrb	r3, [r3, #11]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01d      	beq.n	8008a28 <GPS_reset_home_position+0x48>
 80089ec:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <GPS_reset_home_position+0x50>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d919      	bls.n	8008a28 <GPS_reset_home_position+0x48>
        GPS_home[LAT] = GPS_coord[LAT];
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <GPS_reset_home_position+0x54>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a0f      	ldr	r2, [pc, #60]	; (8008a38 <GPS_reset_home_position+0x58>)
 80089fa:	6013      	str	r3, [r2, #0]
        GPS_home[LON] = GPS_coord[LON];
 80089fc:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <GPS_reset_home_position+0x54>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4a0d      	ldr	r2, [pc, #52]	; (8008a38 <GPS_reset_home_position+0x58>)
 8008a02:	6053      	str	r3, [r2, #4]
        GPS_calc_longitude_scaling(GPS_coord[LAT]); // need an initial value for distance and bearing calc
 8008a04:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <GPS_reset_home_position+0x54>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f969 	bl	8008ce0 <GPS_calc_longitude_scaling>
        nav_takeoff_bearing = heading;              // save takeoff heading
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <GPS_reset_home_position+0x5c>)
 8008a10:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <GPS_reset_home_position+0x60>)
 8008a16:	801a      	strh	r2, [r3, #0]
        //Set ground altitude
        GPS_home[ALT] = GPS_altitude;
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <GPS_reset_home_position+0x64>)
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <GPS_reset_home_position+0x58>)
 8008a20:	609a      	str	r2, [r3, #8]
        f.GPS_FIX_HOME = 1;
 8008a22:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <GPS_reset_home_position+0x4c>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	731a      	strb	r2, [r3, #12]
    }
}
 8008a28:	bf00      	nop
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	200016b0 	.word	0x200016b0
 8008a30:	20001794 	.word	0x20001794
 8008a34:	20001774 	.word	0x20001774
 8008a38:	2000177c 	.word	0x2000177c
 8008a3c:	200019e6 	.word	0x200019e6
 8008a40:	20001308 	.word	0x20001308
 8008a44:	2000179a 	.word	0x2000179a

08008a48 <GPS_reset_nav>:

// reset navigation (stop the navigation processor, and clear nav)
void GPS_reset_nav(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
    int i;

    for (i = 0; i < 2; i++) {
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
 8008a52:	e02f      	b.n	8008ab4 <GPS_reset_nav+0x6c>
        GPS_angle[i] = 0;
 8008a54:	4a1e      	ldr	r2, [pc, #120]	; (8008ad0 <GPS_reset_nav+0x88>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav_rated[i] = 0;
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <GPS_reset_nav+0x8c>)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2100      	movs	r1, #0
 8008a64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[i] = 0;
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <GPS_reset_nav+0x90>)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        reset_PID(&posholdPID[i]);
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4a17      	ldr	r2, [pc, #92]	; (8008adc <GPS_reset_nav+0x94>)
 8008a7e:	4413      	add	r3, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff fda1 	bl	80085c8 <reset_PID>
        reset_PID(&poshold_ratePID[i]);
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a13      	ldr	r2, [pc, #76]	; (8008ae0 <GPS_reset_nav+0x98>)
 8008a92:	4413      	add	r3, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fd97 	bl	80085c8 <reset_PID>
        reset_PID(&navPID[i]);
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4a0f      	ldr	r2, [pc, #60]	; (8008ae4 <GPS_reset_nav+0x9c>)
 8008aa6:	4413      	add	r3, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fd8d 	bl	80085c8 <reset_PID>
    for (i = 0; i < 2; i++) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	607b      	str	r3, [r7, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	ddcc      	ble.n	8008a54 <GPS_reset_nav+0xc>
    }

    if (f.FIXED_WING)
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <GPS_reset_nav+0xa0>)
 8008abc:	7c1b      	ldrb	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <GPS_reset_nav+0x7e>
        fw_nav_reset();
 8008ac2:	f7fe fa59 	bl	8006f78 <fw_nav_reset>

}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200017a0 	.word	0x200017a0
 8008ad4:	200017ac 	.word	0x200017ac
 8008ad8:	200017a8 	.word	0x200017a8
 8008adc:	20001210 	.word	0x20001210
 8008ae0:	20001238 	.word	0x20001238
 8008ae4:	20001260 	.word	0x20001260
 8008ae8:	200016b0 	.word	0x200016b0

08008aec <gpsSetPIDs>:

// Get the relevant P I D values and set the PID controllers
void gpsSetPIDs(void)
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
    posholdPID_PARAM.kP = (float)cfg.P8[PIDPOS] / 100.0f;
 8008af0:	4b50      	ldr	r3, [pc, #320]	; (8008c34 <gpsSetPIDs+0x148>)
 8008af2:	795b      	ldrb	r3, [r3, #5]
 8008af4:	ee07 3a90 	vmov	s15, r3
 8008af8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008afc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008c38 <gpsSetPIDs+0x14c>
 8008b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b04:	4b4d      	ldr	r3, [pc, #308]	; (8008c3c <gpsSetPIDs+0x150>)
 8008b06:	edc3 7a00 	vstr	s15, [r3]
    posholdPID_PARAM.kI = (float)cfg.I8[PIDPOS] / 100.0f;
 8008b0a:	4b4a      	ldr	r3, [pc, #296]	; (8008c34 <gpsSetPIDs+0x148>)
 8008b0c:	7bdb      	ldrb	r3, [r3, #15]
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b16:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c38 <gpsSetPIDs+0x14c>
 8008b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b1e:	4b47      	ldr	r3, [pc, #284]	; (8008c3c <gpsSetPIDs+0x150>)
 8008b20:	edc3 7a01 	vstr	s15, [r3, #4]
    posholdPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008b24:	4b45      	ldr	r3, [pc, #276]	; (8008c3c <gpsSetPIDs+0x150>)
 8008b26:	4a46      	ldr	r2, [pc, #280]	; (8008c40 <gpsSetPIDs+0x154>)
 8008b28:	60da      	str	r2, [r3, #12]

    poshold_ratePID_PARAM.kP = (float)cfg.P8[PIDPOSR] / 10.0f;
 8008b2a:	4b42      	ldr	r3, [pc, #264]	; (8008c34 <gpsSetPIDs+0x148>)
 8008b2c:	799b      	ldrb	r3, [r3, #6]
 8008b2e:	ee07 3a90 	vmov	s15, r3
 8008b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b3e:	4b41      	ldr	r3, [pc, #260]	; (8008c44 <gpsSetPIDs+0x158>)
 8008b40:	edc3 7a00 	vstr	s15, [r3]
    poshold_ratePID_PARAM.kI = (float)cfg.I8[PIDPOSR] / 100.0f;
 8008b44:	4b3b      	ldr	r3, [pc, #236]	; (8008c34 <gpsSetPIDs+0x148>)
 8008b46:	7c1b      	ldrb	r3, [r3, #16]
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b50:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008c38 <gpsSetPIDs+0x14c>
 8008b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b58:	4b3a      	ldr	r3, [pc, #232]	; (8008c44 <gpsSetPIDs+0x158>)
 8008b5a:	edc3 7a01 	vstr	s15, [r3, #4]
    poshold_ratePID_PARAM.kD = (float)cfg.D8[PIDPOSR] / 1000.0f;
 8008b5e:	4b35      	ldr	r3, [pc, #212]	; (8008c34 <gpsSetPIDs+0x148>)
 8008b60:	7e9b      	ldrb	r3, [r3, #26]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b6a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008c48 <gpsSetPIDs+0x15c>
 8008b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b72:	4b34      	ldr	r3, [pc, #208]	; (8008c44 <gpsSetPIDs+0x158>)
 8008b74:	edc3 7a02 	vstr	s15, [r3, #8]
    poshold_ratePID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008b78:	4b32      	ldr	r3, [pc, #200]	; (8008c44 <gpsSetPIDs+0x158>)
 8008b7a:	4a31      	ldr	r2, [pc, #196]	; (8008c40 <gpsSetPIDs+0x154>)
 8008b7c:	60da      	str	r2, [r3, #12]

    navPID_PARAM.kP = (float)cfg.P8[PIDNAVR] / 10.0f;
 8008b7e:	4b2d      	ldr	r3, [pc, #180]	; (8008c34 <gpsSetPIDs+0x148>)
 8008b80:	79db      	ldrb	r3, [r3, #7]
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b8a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b92:	4b2e      	ldr	r3, [pc, #184]	; (8008c4c <gpsSetPIDs+0x160>)
 8008b94:	edc3 7a00 	vstr	s15, [r3]
    navPID_PARAM.kI = (float)cfg.I8[PIDNAVR] / 100.0f;
 8008b98:	4b26      	ldr	r3, [pc, #152]	; (8008c34 <gpsSetPIDs+0x148>)
 8008b9a:	7c5b      	ldrb	r3, [r3, #17]
 8008b9c:	ee07 3a90 	vmov	s15, r3
 8008ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ba4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008c38 <gpsSetPIDs+0x14c>
 8008ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bac:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <gpsSetPIDs+0x160>)
 8008bae:	edc3 7a01 	vstr	s15, [r3, #4]
    navPID_PARAM.kD = (float)cfg.D8[PIDNAVR] / 1000.0f;
 8008bb2:	4b20      	ldr	r3, [pc, #128]	; (8008c34 <gpsSetPIDs+0x148>)
 8008bb4:	7edb      	ldrb	r3, [r3, #27]
 8008bb6:	ee07 3a90 	vmov	s15, r3
 8008bba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008c48 <gpsSetPIDs+0x15c>
 8008bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bc6:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <gpsSetPIDs+0x160>)
 8008bc8:	edc3 7a02 	vstr	s15, [r3, #8]
    navPID_PARAM.Imax = POSHOLD_RATE_IMAX * 100;
 8008bcc:	4b1f      	ldr	r3, [pc, #124]	; (8008c4c <gpsSetPIDs+0x160>)
 8008bce:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <gpsSetPIDs+0x154>)
 8008bd0:	60da      	str	r2, [r3, #12]

    if (f.FIXED_WING) {
 8008bd2:	4b1f      	ldr	r3, [pc, #124]	; (8008c50 <gpsSetPIDs+0x164>)
 8008bd4:	7c1b      	ldrb	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d026      	beq.n	8008c28 <gpsSetPIDs+0x13c>
        altPID_PARAM.kP   = (float)cfg.P8[PIDALT] / 10.0f;
 8008bda:	4b16      	ldr	r3, [pc, #88]	; (8008c34 <gpsSetPIDs+0x148>)
 8008bdc:	791b      	ldrb	r3, [r3, #4]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008be6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bee:	4b19      	ldr	r3, [pc, #100]	; (8008c54 <gpsSetPIDs+0x168>)
 8008bf0:	edc3 7a00 	vstr	s15, [r3]
        altPID_PARAM.kI   = (float)cfg.I8[PIDALT] / 100.0f;
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <gpsSetPIDs+0x148>)
 8008bf6:	7b9b      	ldrb	r3, [r3, #14]
 8008bf8:	ee07 3a90 	vmov	s15, r3
 8008bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c00:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008c38 <gpsSetPIDs+0x14c>
 8008c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c08:	4b12      	ldr	r3, [pc, #72]	; (8008c54 <gpsSetPIDs+0x168>)
 8008c0a:	edc3 7a01 	vstr	s15, [r3, #4]
        altPID_PARAM.kD   = (float)cfg.D8[PIDALT] / 1000.0f;
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <gpsSetPIDs+0x148>)
 8008c10:	7e1b      	ldrb	r3, [r3, #24]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c1a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008c48 <gpsSetPIDs+0x15c>
 8008c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c22:	4b0c      	ldr	r3, [pc, #48]	; (8008c54 <gpsSetPIDs+0x168>)
 8008c24:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 8008c28:	bf00      	nop
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	20000db4 	.word	0x20000db4
 8008c38:	42c80000 	.word	0x42c80000
 8008c3c:	200011d0 	.word	0x200011d0
 8008c40:	44fa0000 	.word	0x44fa0000
 8008c44:	200011e0 	.word	0x200011e0
 8008c48:	447a0000 	.word	0x447a0000
 8008c4c:	200011f0 	.word	0x200011f0
 8008c50:	200016b0 	.word	0x200016b0
 8008c54:	20001200 	.word	0x20001200

08008c58 <_EvtPrintFrame>:

static void _EvtPrintFrame(char* p_frame)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
    actLed0State(ON);
 8008c60:	2001      	movs	r0, #1
 8008c62:	f7f9 fa09 	bl	8002078 <actLed0State>
#ifndef __PIF_NO_LOG__
    pifLog_Print(LT_NONE, p_frame);
#else
    (void)p_frame;
#endif
    actLed0State(OFF);
 8008c66:	2000      	movs	r0, #0
 8008c68:	f7f9 fa06 	bl	8002078 <actLed0State>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <gpsSetPassthrough>:

int8_t gpsSetPassthrough(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
    static bool state = false;

    if (gpsData.state != GPS_RECEIVINGDATA)
 8008c78:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <gpsSetPassthrough+0x58>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b05      	cmp	r3, #5
 8008c7e:	d002      	beq.n	8008c86 <gpsSetPassthrough+0x12>
        return -1;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	e020      	b.n	8008cc8 <gpsSetPassthrough+0x54>

    actLed0State(OFF);
 8008c86:	2000      	movs	r0, #0
 8008c88:	f7f9 f9f6 	bl	8002078 <actLed0State>
    actLed1State(OFF);
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7f9 fa1f 	bl	80020d0 <actLed1State>

    if (mcfg.gps_type == GPS_NMEA) {
 8008c92:	4b0f      	ldr	r3, [pc, #60]	; (8008cd0 <gpsSetPassthrough+0x5c>)
 8008c94:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d113      	bne.n	8008cc4 <gpsSetPassthrough+0x50>
        if (state) {
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <gpsSetPassthrough+0x60>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <gpsSetPassthrough+0x40>
            gps_ublox._gps.evt_frame = NULL;
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <gpsSetPassthrough+0x64>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	619a      	str	r2, [r3, #24]
            state = false;
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <gpsSetPassthrough+0x60>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
            return 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	e009      	b.n	8008cc8 <gpsSetPassthrough+0x54>
        }
        else {
            gps_ublox._gps.evt_frame = _EvtPrintFrame;
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <gpsSetPassthrough+0x64>)
 8008cb6:	4a09      	ldr	r2, [pc, #36]	; (8008cdc <gpsSetPassthrough+0x68>)
 8008cb8:	619a      	str	r2, [r3, #24]
            state = true;
 8008cba:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <gpsSetPassthrough+0x60>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	701a      	strb	r2, [r3, #0]
            return 1;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e001      	b.n	8008cc8 <gpsSetPassthrough+0x54>
        }
    }
    return -1;
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000f30 	.word	0x20000f30
 8008cd0:	20000848 	.word	0x20000848
 8008cd4:	20001310 	.word	0x20001310
 8008cd8:	20000f50 	.word	0x20000f50
 8008cdc:	08008c59 	.word	0x08008c59

08008ce0 <GPS_calc_longitude_scaling>:
////////////////////////////////////////////////////////////////////////////////////
// this is used to offset the shrinking longitude as we go towards the poles
// It's ok to calculate this once per waypoint setting, since it changes a little within the reach of a multicopter
//
static void GPS_calc_longitude_scaling(int32_t lat)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
    float rads = (abs((float)lat) / 10000000.0f) * 0.0174532925f;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfa:	dd05      	ble.n	8008d08 <GPS_calc_longitude_scaling+0x28>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d06:	e006      	b.n	8008d16 <GPS_calc_longitude_scaling+0x36>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d12:	eef1 7a67 	vneg.f32	s15, s15
 8008d16:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8008d44 <GPS_calc_longitude_scaling+0x64>
 8008d1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008d1e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008d48 <GPS_calc_longitude_scaling+0x68>
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a03 	vstr	s15, [r7, #12]
    GPS_scaleLonDown = cosf(rads);
 8008d2a:	ed97 0a03 	vldr	s0, [r7, #12]
 8008d2e:	f01a fd3b 	bl	80237a8 <cosf>
 8008d32:	eef0 7a40 	vmov.f32	s15, s0
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <GPS_calc_longitude_scaling+0x6c>)
 8008d38:	edc3 7a00 	vstr	s15, [r3]
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	4b189680 	.word	0x4b189680
 8008d48:	3c8efa35 	.word	0x3c8efa35
 8008d4c:	20000028 	.word	0x20000028

08008d50 <GPS_set_next_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Sets the waypoint to navigate, reset neccessary variables and calculate initial values
//
void GPS_set_next_wp(int32_t *lat, int32_t *lon)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
    GPS_WP[LAT] = *lat;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a19      	ldr	r2, [pc, #100]	; (8008dc4 <GPS_set_next_wp+0x74>)
 8008d60:	6013      	str	r3, [r2, #0]
    GPS_WP[LON] = *lon;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a17      	ldr	r2, [pc, #92]	; (8008dc4 <GPS_set_next_wp+0x74>)
 8008d68:	6053      	str	r3, [r2, #4]

    GPS_calc_longitude_scaling(*lat);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff ffb6 	bl	8008ce0 <GPS_calc_longitude_scaling>
    if (f.CRUISE_MODE)
 8008d74:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <GPS_set_next_wp+0x78>)
 8008d76:	7d1b      	ldrb	r3, [r3, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <GPS_set_next_wp+0x30>
        fw_FlyTo();  // PatrikE CruiseMode version
 8008d7c:	f7fe f938 	bl	8006ff0 <fw_FlyTo>

    GPS_distance_cm_bearing(&GPS_coord[LAT], &GPS_coord[LON], &GPS_WP[LAT], &GPS_WP[LON], &wp_distance, &target_bearing);
 8008d80:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <GPS_set_next_wp+0x7c>)
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <GPS_set_next_wp+0x80>)
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <GPS_set_next_wp+0x84>)
 8008d8a:	4a0e      	ldr	r2, [pc, #56]	; (8008dc4 <GPS_set_next_wp+0x74>)
 8008d8c:	4912      	ldr	r1, [pc, #72]	; (8008dd8 <GPS_set_next_wp+0x88>)
 8008d8e:	4813      	ldr	r0, [pc, #76]	; (8008ddc <GPS_set_next_wp+0x8c>)
 8008d90:	f000 f84e 	bl	8008e30 <GPS_distance_cm_bearing>

    nav_bearing = target_bearing;
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <GPS_set_next_wp+0x7c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <GPS_set_next_wp+0x90>)
 8008d9a:	6013      	str	r3, [r2, #0]
    GPS_calc_location_error(&GPS_WP[LAT], &GPS_WP[LON], &GPS_coord[LAT], &GPS_coord[LON]);
 8008d9c:	4b0e      	ldr	r3, [pc, #56]	; (8008dd8 <GPS_set_next_wp+0x88>)
 8008d9e:	4a0f      	ldr	r2, [pc, #60]	; (8008ddc <GPS_set_next_wp+0x8c>)
 8008da0:	490c      	ldr	r1, [pc, #48]	; (8008dd4 <GPS_set_next_wp+0x84>)
 8008da2:	4808      	ldr	r0, [pc, #32]	; (8008dc4 <GPS_set_next_wp+0x74>)
 8008da4:	f000 f934 	bl	8009010 <GPS_calc_location_error>
    original_target_bearing = target_bearing;
 8008da8:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <GPS_set_next_wp+0x7c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a0d      	ldr	r2, [pc, #52]	; (8008de4 <GPS_set_next_wp+0x94>)
 8008dae:	6013      	str	r3, [r2, #0]
    waypoint_speed_gov = cfg.nav_speed_min;
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <GPS_set_next_wp+0x98>)
 8008db2:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8008db6:	b21a      	sxth	r2, r3
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <GPS_set_next_wp+0x9c>)
 8008dba:	801a      	strh	r2, [r3, #0]
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	2000129c 	.word	0x2000129c
 8008dc8:	200016b0 	.word	0x200016b0
 8008dcc:	200012a4 	.word	0x200012a4
 8008dd0:	200012b0 	.word	0x200012b0
 8008dd4:	200012a0 	.word	0x200012a0
 8008dd8:	20001778 	.word	0x20001778
 8008ddc:	20001774 	.word	0x20001774
 8008de0:	20001304 	.word	0x20001304
 8008de4:	200012a8 	.word	0x200012a8
 8008de8:	20000db4 	.word	0x20000db4
 8008dec:	200012b4 	.word	0x200012b4

08008df0 <check_missed_wp>:

////////////////////////////////////////////////////////////////////////////////////
// Check if we missed the destination somehow
//
static bool check_missed_wp(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
    int32_t temp;
    temp = target_bearing - original_target_bearing;
 8008df6:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <check_missed_wp+0x38>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <check_missed_wp+0x3c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	607b      	str	r3, [r7, #4]
    temp = wrap_18000(temp);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fb9a 	bl	800953c <wrap_18000>
 8008e08:	6078      	str	r0, [r7, #4]
    return (abs(temp) > 10000); // we passed the waypoint by 100 degrees
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfb8      	it	lt
 8008e10:	425b      	neglt	r3, r3
 8008e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e16:	4293      	cmp	r3, r2
 8008e18:	bfcc      	ite	gt
 8008e1a:	2301      	movgt	r3, #1
 8008e1c:	2300      	movle	r3, #0
 8008e1e:	b2db      	uxtb	r3, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200012a4 	.word	0x200012a4
 8008e2c:	200012a8 	.word	0x200012a8

08008e30 <GPS_distance_cm_bearing>:

////////////////////////////////////////////////////////////////////////////////////
// Get distance between two points in cm
// Get bearing from pos1 to pos2, returns an 1deg = 100 precision
static void GPS_distance_cm_bearing(int32_t *lat1, int32_t *lon1, int32_t *lat2, int32_t *lon2, int32_t *dist, int32_t *bearing)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
    float dLat = *lat2 - *lat1; // difference of latitude in 1/10 000 000 degrees
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e50:	edc7 7a05 	vstr	s15, [r7, #20]
    float dLon = (float)(*lon2 - *lon1) * GPS_scaleLonDown;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e66:	4b25      	ldr	r3, [pc, #148]	; (8008efc <GPS_distance_cm_bearing+0xcc>)
 8008e68:	edd3 7a00 	vldr	s15, [r3]
 8008e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e70:	edc7 7a04 	vstr	s15, [r7, #16]
    *dist = sqrtf(sq(dLat) + sq(dLon)) * 1.113195f;
 8008e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e88:	eeb0 0a67 	vmov.f32	s0, s15
 8008e8c:	f01a fddc 	bl	8023a48 <sqrtf>
 8008e90:	eef0 7a40 	vmov.f32	s15, s0
 8008e94:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008f00 <GPS_distance_cm_bearing+0xd0>
 8008e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ea0:	ee17 2a90 	vmov	r2, s15
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	601a      	str	r2, [r3, #0]

    *bearing = 9000.0f + atan2f(-dLat, dLon) * 5729.57795f;      // Convert the output radians to 100xdeg
 8008ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008eac:	eef1 7a67 	vneg.f32	s15, s15
 8008eb0:	edd7 0a04 	vldr	s1, [r7, #16]
 8008eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8008eb8:	f01a fd6c 	bl	8023994 <atan2f>
 8008ebc:	eef0 7a40 	vmov.f32	s15, s0
 8008ec0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008f04 <GPS_distance_cm_bearing+0xd4>
 8008ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ec8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8008f08 <GPS_distance_cm_bearing+0xd8>
 8008ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ed4:	ee17 2a90 	vmov	r2, s15
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	601a      	str	r2, [r3, #0]
    if (*bearing < 0)
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	da06      	bge.n	8008ef2 <GPS_distance_cm_bearing+0xc2>
        *bearing += 36000;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8008eec:	33a0      	adds	r3, #160	; 0xa0
 8008eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef0:	6013      	str	r3, [r2, #0]
}
 8008ef2:	bf00      	nop
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000028 	.word	0x20000028
 8008f00:	3f8e7d2c 	.word	0x3f8e7d2c
 8008f04:	45b30ca0 	.word	0x45b30ca0
 8008f08:	460ca000 	.word	0x460ca000

08008f0c <GPS_calc_velocity>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate our current speed vector from gps position data
//
static void GPS_calc_velocity(void)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
    static int32_t last[2] = { 0, 0 };
    static uint8_t init = 0;
    // y_GPS_speed positve = Up
    // x_GPS_speed positve = Right

    if (init) {
 8008f12:	4b38      	ldr	r3, [pc, #224]	; (8008ff4 <GPS_calc_velocity+0xe8>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d05b      	beq.n	8008fd2 <GPS_calc_velocity+0xc6>
        float tmp = 1.0f / dTnav;
 8008f1a:	4b37      	ldr	r3, [pc, #220]	; (8008ff8 <GPS_calc_velocity+0xec>)
 8008f1c:	ed93 7a00 	vldr	s14, [r3]
 8008f20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f28:	edc7 7a01 	vstr	s15, [r7, #4]
        actual_speed[GPS_X] = (float)(GPS_coord[LON] - last[LON]) * GPS_scaleLonDown * tmp;
 8008f2c:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <GPS_calc_velocity+0xf0>)
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b33      	ldr	r3, [pc, #204]	; (8009000 <GPS_calc_velocity+0xf4>)
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f3e:	4b31      	ldr	r3, [pc, #196]	; (8009004 <GPS_calc_velocity+0xf8>)
 8008f40:	edd3 7a00 	vldr	s15, [r3]
 8008f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f48:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f54:	ee17 3a90 	vmov	r3, s15
 8008f58:	b21a      	sxth	r2, r3
 8008f5a:	4b2b      	ldr	r3, [pc, #172]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008f5c:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (float)(GPS_coord[LAT] - last[LAT]) * tmp;
 8008f5e:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <GPS_calc_velocity+0xf0>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b27      	ldr	r3, [pc, #156]	; (8009000 <GPS_calc_velocity+0xf4>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	ee07 3a90 	vmov	s15, r3
 8008f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f7c:	ee17 3a90 	vmov	r3, s15
 8008f80:	b21a      	sxth	r2, r3
 8008f82:	4b21      	ldr	r3, [pc, #132]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008f84:	801a      	strh	r2, [r3, #0]

        actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 8008f86:	4b20      	ldr	r3, [pc, #128]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008f88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b1f      	ldr	r3, [pc, #124]	; (800900c <GPS_calc_velocity+0x100>)
 8008f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008f94:	4413      	add	r3, r2
 8008f96:	0fda      	lsrs	r2, r3, #31
 8008f98:	4413      	add	r3, r2
 8008f9a:	105b      	asrs	r3, r3, #1
 8008f9c:	b21a      	sxth	r2, r3
 8008f9e:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008fa0:	805a      	strh	r2, [r3, #2]
        actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 8008fa2:	4b19      	ldr	r3, [pc, #100]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4b18      	ldr	r3, [pc, #96]	; (800900c <GPS_calc_velocity+0x100>)
 8008fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	0fda      	lsrs	r2, r3, #31
 8008fb4:	4413      	add	r3, r2
 8008fb6:	105b      	asrs	r3, r3, #1
 8008fb8:	b21a      	sxth	r2, r3
 8008fba:	4b13      	ldr	r3, [pc, #76]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008fbc:	801a      	strh	r2, [r3, #0]

        speed_old[GPS_X] = actual_speed[GPS_X];
 8008fbe:	4b12      	ldr	r3, [pc, #72]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008fc0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008fc4:	4b11      	ldr	r3, [pc, #68]	; (800900c <GPS_calc_velocity+0x100>)
 8008fc6:	805a      	strh	r2, [r3, #2]
        speed_old[GPS_Y] = actual_speed[GPS_Y];
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <GPS_calc_velocity+0xfc>)
 8008fca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <GPS_calc_velocity+0x100>)
 8008fd0:	801a      	strh	r2, [r3, #0]
    }
    init = 1;
 8008fd2:	4b08      	ldr	r3, [pc, #32]	; (8008ff4 <GPS_calc_velocity+0xe8>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	701a      	strb	r2, [r3, #0]

    last[LON] = GPS_coord[LON];
 8008fd8:	4b08      	ldr	r3, [pc, #32]	; (8008ffc <GPS_calc_velocity+0xf0>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	4a08      	ldr	r2, [pc, #32]	; (8009000 <GPS_calc_velocity+0xf4>)
 8008fde:	6053      	str	r3, [r2, #4]
    last[LAT] = GPS_coord[LAT];
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <GPS_calc_velocity+0xf0>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a06      	ldr	r2, [pc, #24]	; (8009000 <GPS_calc_velocity+0xf4>)
 8008fe6:	6013      	str	r3, [r2, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	20001311 	.word	0x20001311
 8008ff8:	20001288 	.word	0x20001288
 8008ffc:	20001774 	.word	0x20001774
 8009000:	20001314 	.word	0x20001314
 8009004:	20000028 	.word	0x20000028
 8009008:	2000128c 	.word	0x2000128c
 800900c:	2000131c 	.word	0x2000131c

08009010 <GPS_calc_location_error>:
//      1800    = 19.80m = 60 feet
//      3000    = 33m
//      10000   = 111m
//
static void GPS_calc_location_error(int32_t *target_lat, int32_t *target_lng, int32_t *gps_lat, int32_t *gps_lng)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
    error[LON] = (float)(*target_lng - *gps_lng) * GPS_scaleLonDown;   // X Error
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	ee07 3a90 	vmov	s15, r3
 800902c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <GPS_calc_location_error+0x50>)
 8009032:	edd3 7a00 	vldr	s15, [r3]
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800903e:	ee17 2a90 	vmov	r2, s15
 8009042:	4b08      	ldr	r3, [pc, #32]	; (8009064 <GPS_calc_location_error+0x54>)
 8009044:	605a      	str	r2, [r3, #4]
    error[LAT] = *target_lat - *gps_lat;        // Y Error
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	4a04      	ldr	r2, [pc, #16]	; (8009064 <GPS_calc_location_error+0x54>)
 8009052:	6013      	str	r3, [r2, #0]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	20000028 	.word	0x20000028
 8009064:	20001294 	.word	0x20001294

08009068 <GPS_calc_poshold>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate nav_lat and nav_lon from the x and y error and the speed
//
static void GPS_calc_poshold(void)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
    int32_t d;
    int32_t target_speed;
    int axis;

    for (axis = 0; axis < 2; axis++) {
 800906e:	2300      	movs	r3, #0
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	e092      	b.n	800919a <GPS_calc_poshold+0x132>
        target_speed = get_P(error[axis], &posholdPID_PARAM);       // calculate desired speed from lon error
 8009074:	4a4d      	ldr	r2, [pc, #308]	; (80091ac <GPS_calc_poshold+0x144>)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800907c:	494c      	ldr	r1, [pc, #304]	; (80091b0 <GPS_calc_poshold+0x148>)
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff f9a6 	bl	80083d0 <get_P>
 8009084:	6078      	str	r0, [r7, #4]
        rate_error[axis] = target_speed - actual_speed[axis];       // calc the speed error
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	b29a      	uxth	r2, r3
 800908a:	494a      	ldr	r1, [pc, #296]	; (80091b4 <GPS_calc_poshold+0x14c>)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8009092:	b29b      	uxth	r3, r3
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	b29b      	uxth	r3, r3
 8009098:	b219      	sxth	r1, r3
 800909a:	4a47      	ldr	r2, [pc, #284]	; (80091b8 <GPS_calc_poshold+0x150>)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80090a2:	4a45      	ldr	r2, [pc, #276]	; (80091b8 <GPS_calc_poshold+0x150>)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80090aa:	4944      	ldr	r1, [pc, #272]	; (80091bc <GPS_calc_poshold+0x154>)
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff f98f 	bl	80083d0 <get_P>
 80090b2:	4603      	mov	r3, r0
 80090b4:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis] + error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80090b6:	4a40      	ldr	r2, [pc, #256]	; (80091b8 <GPS_calc_poshold+0x150>)
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80090be:	4619      	mov	r1, r3
 80090c0:	4a3a      	ldr	r2, [pc, #232]	; (80091ac <GPS_calc_poshold+0x144>)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c8:	18c8      	adds	r0, r1, r3
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4a3a      	ldr	r2, [pc, #232]	; (80091c0 <GPS_calc_poshold+0x158>)
 80090d6:	441a      	add	r2, r3
 80090d8:	4b38      	ldr	r3, [pc, #224]	; (80091bc <GPS_calc_poshold+0x154>)
 80090da:	493a      	ldr	r1, [pc, #232]	; (80091c4 <GPS_calc_poshold+0x15c>)
 80090dc:	f7ff f991 	bl	8008402 <get_I>
 80090e0:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &poshold_ratePID_PARAM) +
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	4423      	add	r3, r4
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	b219      	sxth	r1, r3
 80090ea:	4a37      	ldr	r2, [pc, #220]	; (80091c8 <GPS_calc_poshold+0x160>)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        d = get_D(error[axis], &dTnav, &poshold_ratePID[axis], &poshold_ratePID_PARAM);
 80090f2:	4a2e      	ldr	r2, [pc, #184]	; (80091ac <GPS_calc_poshold+0x144>)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a2e      	ldr	r2, [pc, #184]	; (80091c0 <GPS_calc_poshold+0x158>)
 8009106:	441a      	add	r2, r3
 8009108:	4b2c      	ldr	r3, [pc, #176]	; (80091bc <GPS_calc_poshold+0x154>)
 800910a:	492e      	ldr	r1, [pc, #184]	; (80091c4 <GPS_calc_poshold+0x15c>)
 800910c:	f7ff f9c4 	bl	8008498 <get_D>
 8009110:	60f8      	str	r0, [r7, #12]
        d = constrain(d, -2000, 2000);
 8009112:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009116:	492d      	ldr	r1, [pc, #180]	; (80091cc <GPS_calc_poshold+0x164>)
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7fa fd75 	bl	8003c08 <constrain>
 800911e:	60f8      	str	r0, [r7, #12]

        // get rid of noise
#if defined(GPS_LOW_SPEED_D_FILTER)
        if (abs(actual_speed[axis]) < 50)
 8009120:	4a24      	ldr	r2, [pc, #144]	; (80091b4 <GPS_calc_poshold+0x14c>)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfb8      	it	lt
 800912c:	425b      	neglt	r3, r3
 800912e:	b29b      	uxth	r3, r3
 8009130:	2b31      	cmp	r3, #49	; 0x31
 8009132:	d801      	bhi.n	8009138 <GPS_calc_poshold+0xd0>
            d = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]
#endif

        nav[axis] += d;
 8009138:	4a23      	ldr	r2, [pc, #140]	; (80091c8 <GPS_calc_poshold+0x160>)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009140:	b29a      	uxth	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	b29b      	uxth	r3, r3
 8009146:	4413      	add	r3, r2
 8009148:	b29b      	uxth	r3, r3
 800914a:	b219      	sxth	r1, r3
 800914c:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <GPS_calc_poshold+0x160>)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 8009154:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <GPS_calc_poshold+0x160>)
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800915c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009160:	491b      	ldr	r1, [pc, #108]	; (80091d0 <GPS_calc_poshold+0x168>)
 8009162:	4618      	mov	r0, r3
 8009164:	f7fa fd50 	bl	8003c08 <constrain>
 8009168:	4603      	mov	r3, r0
 800916a:	b219      	sxth	r1, r3
 800916c:	4a16      	ldr	r2, [pc, #88]	; (80091c8 <GPS_calc_poshold+0x160>)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        navPID[axis].integrator = poshold_ratePID[axis].integrator;
 8009174:	4912      	ldr	r1, [pc, #72]	; (80091c0 <GPS_calc_poshold+0x158>)
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	4813      	ldr	r0, [pc, #76]	; (80091d4 <GPS_calc_poshold+0x16c>)
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4403      	add	r3, r0
 8009192:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	3301      	adds	r3, #1
 8009198:	60bb      	str	r3, [r7, #8]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b01      	cmp	r3, #1
 800919e:	f77f af69 	ble.w	8009074 <GPS_calc_poshold+0xc>
    }
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd90      	pop	{r4, r7, pc}
 80091ac:	20001294 	.word	0x20001294
 80091b0:	200011d0 	.word	0x200011d0
 80091b4:	2000128c 	.word	0x2000128c
 80091b8:	20001290 	.word	0x20001290
 80091bc:	200011e0 	.word	0x200011e0
 80091c0:	20001238 	.word	0x20001238
 80091c4:	20001288 	.word	0x20001288
 80091c8:	200017a8 	.word	0x200017a8
 80091cc:	fffff830 	.word	0xfffff830
 80091d0:	fffff448 	.word	0xfffff448
 80091d4:	20001260 	.word	0x20001260

080091d8 <GPS_calc_nav_rate>:

////////////////////////////////////////////////////////////////////////////////////
// Calculate the desired nav_lat and nav_lon for distance flying such as RTH
//
static void GPS_calc_nav_rate(int max_speed)
{
 80091d8:	b590      	push	{r4, r7, lr}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
    float trig[2];
    float temp;
    int axis;

    // push us towards the original track
    GPS_update_crosstrack();
 80091e0:	f000 f8cc 	bl	800937c <GPS_update_crosstrack>

    // nav_bearing includes crosstrack
    temp = (9000l - nav_bearing) * RADX100;
 80091e4:	4b5a      	ldr	r3, [pc, #360]	; (8009350 <GPS_calc_nav_rate+0x178>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f5c3 530c 	rsb	r3, r3, #8960	; 0x2300
 80091ec:	3328      	adds	r3, #40	; 0x28
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091f6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8009354 <GPS_calc_nav_rate+0x17c>
 80091fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091fe:	edc7 7a04 	vstr	s15, [r7, #16]
    trig[GPS_X] = cosf(temp);
 8009202:	ed97 0a04 	vldr	s0, [r7, #16]
 8009206:	f01a facf 	bl	80237a8 <cosf>
 800920a:	eef0 7a40 	vmov.f32	s15, s0
 800920e:	edc7 7a03 	vstr	s15, [r7, #12]
    trig[GPS_Y] = sinf(temp);
 8009212:	ed97 0a04 	vldr	s0, [r7, #16]
 8009216:	f01a fb4b 	bl	80238b0 <sinf>
 800921a:	eef0 7a40 	vmov.f32	s15, s0
 800921e:	edc7 7a02 	vstr	s15, [r7, #8]

    for (axis = 0; axis < 2; axis++) {
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	e08a      	b.n	800933e <GPS_calc_nav_rate+0x166>
        rate_error[axis] = (trig[axis] * max_speed) - actual_speed[axis];
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	3318      	adds	r3, #24
 800922e:	443b      	add	r3, r7
 8009230:	3b10      	subs	r3, #16
 8009232:	ed93 7a00 	vldr	s14, [r3]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009244:	4a44      	ldr	r2, [pc, #272]	; (8009358 <GPS_calc_nav_rate+0x180>)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800925c:	ee17 3a90 	vmov	r3, s15
 8009260:	b219      	sxth	r1, r3
 8009262:	4a3e      	ldr	r2, [pc, #248]	; (800935c <GPS_calc_nav_rate+0x184>)
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        rate_error[axis] = constrain(rate_error[axis], -1000, 1000);
 800926a:	4a3c      	ldr	r2, [pc, #240]	; (800935c <GPS_calc_nav_rate+0x184>)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009276:	493a      	ldr	r1, [pc, #232]	; (8009360 <GPS_calc_nav_rate+0x188>)
 8009278:	4618      	mov	r0, r3
 800927a:	f7fa fcc5 	bl	8003c08 <constrain>
 800927e:	4603      	mov	r3, r0
 8009280:	b219      	sxth	r1, r3
 8009282:	4a36      	ldr	r2, [pc, #216]	; (800935c <GPS_calc_nav_rate+0x184>)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // P + I + D
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 800928a:	4a34      	ldr	r2, [pc, #208]	; (800935c <GPS_calc_nav_rate+0x184>)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009292:	4934      	ldr	r1, [pc, #208]	; (8009364 <GPS_calc_nav_rate+0x18c>)
 8009294:	4618      	mov	r0, r3
 8009296:	f7ff f89b 	bl	80083d0 <get_P>
 800929a:	4603      	mov	r3, r0
 800929c:	b29c      	uxth	r4, r3
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 800929e:	4a2f      	ldr	r2, [pc, #188]	; (800935c <GPS_calc_nav_rate+0x184>)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092a6:	4618      	mov	r0, r3
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4a2d      	ldr	r2, [pc, #180]	; (8009368 <GPS_calc_nav_rate+0x190>)
 80092b4:	441a      	add	r2, r3
 80092b6:	4b2b      	ldr	r3, [pc, #172]	; (8009364 <GPS_calc_nav_rate+0x18c>)
 80092b8:	492c      	ldr	r1, [pc, #176]	; (800936c <GPS_calc_nav_rate+0x194>)
 80092ba:	f7ff f8a2 	bl	8008402 <get_I>
 80092be:	4603      	mov	r3, r0
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	4423      	add	r3, r4
 80092c4:	b29c      	uxth	r4, r3
                    get_D(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM);
 80092c6:	4a25      	ldr	r2, [pc, #148]	; (800935c <GPS_calc_nav_rate+0x184>)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092ce:	4618      	mov	r0, r3
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4a23      	ldr	r2, [pc, #140]	; (8009368 <GPS_calc_nav_rate+0x190>)
 80092dc:	441a      	add	r2, r3
 80092de:	4b21      	ldr	r3, [pc, #132]	; (8009364 <GPS_calc_nav_rate+0x18c>)
 80092e0:	4922      	ldr	r1, [pc, #136]	; (800936c <GPS_calc_nav_rate+0x194>)
 80092e2:	f7ff f8d9 	bl	8008498 <get_D>
 80092e6:	4603      	mov	r3, r0
                    get_I(rate_error[axis], &dTnav, &navPID[axis], &navPID_PARAM) +
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	4423      	add	r3, r4
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	b219      	sxth	r1, r3
        nav[axis] = get_P(rate_error[axis], &navPID_PARAM) +
 80092f0:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <GPS_calc_nav_rate+0x198>)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        nav[axis] = constrain(nav[axis], -NAV_BANK_MAX, NAV_BANK_MAX);
 80092f8:	4a1d      	ldr	r2, [pc, #116]	; (8009370 <GPS_calc_nav_rate+0x198>)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009300:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009304:	491b      	ldr	r1, [pc, #108]	; (8009374 <GPS_calc_nav_rate+0x19c>)
 8009306:	4618      	mov	r0, r3
 8009308:	f7fa fc7e 	bl	8003c08 <constrain>
 800930c:	4603      	mov	r3, r0
 800930e:	b219      	sxth	r1, r3
 8009310:	4a17      	ldr	r2, [pc, #92]	; (8009370 <GPS_calc_nav_rate+0x198>)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        poshold_ratePID[axis].integrator = navPID[axis].integrator;
 8009318:	4913      	ldr	r1, [pc, #76]	; (8009368 <GPS_calc_nav_rate+0x190>)
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	440b      	add	r3, r1
 8009326:	6819      	ldr	r1, [r3, #0]
 8009328:	4813      	ldr	r0, [pc, #76]	; (8009378 <GPS_calc_nav_rate+0x1a0>)
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4403      	add	r3, r0
 8009336:	6019      	str	r1, [r3, #0]
    for (axis = 0; axis < 2; axis++) {
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	3301      	adds	r3, #1
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b01      	cmp	r3, #1
 8009342:	f77f af71 	ble.w	8009228 <GPS_calc_nav_rate+0x50>
    }
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	371c      	adds	r7, #28
 800934c:	46bd      	mov	sp, r7
 800934e:	bd90      	pop	{r4, r7, pc}
 8009350:	20001304 	.word	0x20001304
 8009354:	393702d3 	.word	0x393702d3
 8009358:	2000128c 	.word	0x2000128c
 800935c:	20001290 	.word	0x20001290
 8009360:	fffffc18 	.word	0xfffffc18
 8009364:	200011f0 	.word	0x200011f0
 8009368:	20001260 	.word	0x20001260
 800936c:	20001288 	.word	0x20001288
 8009370:	200017a8 	.word	0x200017a8
 8009374:	fffff448 	.word	0xfffff448
 8009378:	20001238 	.word	0x20001238

0800937c <GPS_update_crosstrack>:
////////////////////////////////////////////////////////////////////////////////////
// Calculating cross track error, this tries to keep the copter on a direct line
// when flying to a waypoint.
//
static void GPS_update_crosstrack(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
    if (abs(wrap_18000(target_bearing - original_target_bearing)) < 4500) {     // If we are too far off or too close we don't do track following
 8009382:	4b38      	ldr	r3, [pc, #224]	; (8009464 <GPS_update_crosstrack+0xe8>)
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b38      	ldr	r3, [pc, #224]	; (8009468 <GPS_update_crosstrack+0xec>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	4618      	mov	r0, r3
 800938e:	f000 f8d5 	bl	800953c <wrap_18000>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd10      	ble.n	80093ba <GPS_update_crosstrack+0x3e>
 8009398:	4b32      	ldr	r3, [pc, #200]	; (8009464 <GPS_update_crosstrack+0xe8>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	4b32      	ldr	r3, [pc, #200]	; (8009468 <GPS_update_crosstrack+0xec>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f8ca 	bl	800953c <wrap_18000>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f241 1293 	movw	r2, #4499	; 0x1193
 80093ae:	4293      	cmp	r3, r2
 80093b0:	bfd4      	ite	le
 80093b2:	2301      	movle	r3, #1
 80093b4:	2300      	movgt	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	e00e      	b.n	80093d8 <GPS_update_crosstrack+0x5c>
 80093ba:	4b2a      	ldr	r3, [pc, #168]	; (8009464 <GPS_update_crosstrack+0xe8>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b2a      	ldr	r3, [pc, #168]	; (8009468 <GPS_update_crosstrack+0xec>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 f8b9 	bl	800953c <wrap_18000>
 80093ca:	4603      	mov	r3, r0
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <GPS_update_crosstrack+0xf0>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	bfac      	ite	ge
 80093d2:	2301      	movge	r3, #1
 80093d4:	2300      	movlt	r3, #0
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d03b      	beq.n	8009454 <GPS_update_crosstrack+0xd8>
        float temp = (target_bearing - original_target_bearing) * RADX100;
 80093dc:	4b21      	ldr	r3, [pc, #132]	; (8009464 <GPS_update_crosstrack+0xe8>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	4b21      	ldr	r3, [pc, #132]	; (8009468 <GPS_update_crosstrack+0xec>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093ee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8009470 <GPS_update_crosstrack+0xf4>
 80093f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093f6:	edc7 7a01 	vstr	s15, [r7, #4]
        crosstrack_error = sinf(temp) * (wp_distance * CROSSTRACK_GAIN); // Meters we are off track line
 80093fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80093fe:	f01a fa57 	bl	80238b0 <sinf>
 8009402:	eeb0 7a40 	vmov.f32	s14, s0
 8009406:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <GPS_update_crosstrack+0xf8>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800941a:	ee17 3a90 	vmov	r3, s15
 800941e:	b21a      	sxth	r2, r3
 8009420:	4b15      	ldr	r3, [pc, #84]	; (8009478 <GPS_update_crosstrack+0xfc>)
 8009422:	801a      	strh	r2, [r3, #0]
        nav_bearing = target_bearing + constrain(crosstrack_error, -3000, 3000);
 8009424:	4b14      	ldr	r3, [pc, #80]	; (8009478 <GPS_update_crosstrack+0xfc>)
 8009426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800942a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800942e:	4913      	ldr	r1, [pc, #76]	; (800947c <GPS_update_crosstrack+0x100>)
 8009430:	4618      	mov	r0, r3
 8009432:	f7fa fbe9 	bl	8003c08 <constrain>
 8009436:	4602      	mov	r2, r0
 8009438:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <GPS_update_crosstrack+0xe8>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4413      	add	r3, r2
 800943e:	4a10      	ldr	r2, [pc, #64]	; (8009480 <GPS_update_crosstrack+0x104>)
 8009440:	6013      	str	r3, [r2, #0]
        nav_bearing = wrap_36000(nav_bearing);
 8009442:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <GPS_update_crosstrack+0x104>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f898 	bl	800957c <wrap_36000>
 800944c:	4603      	mov	r3, r0
 800944e:	4a0c      	ldr	r2, [pc, #48]	; (8009480 <GPS_update_crosstrack+0x104>)
 8009450:	6013      	str	r3, [r2, #0]
    } else {
        nav_bearing = target_bearing;
    }
}
 8009452:	e003      	b.n	800945c <GPS_update_crosstrack+0xe0>
        nav_bearing = target_bearing;
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <GPS_update_crosstrack+0xe8>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a09      	ldr	r2, [pc, #36]	; (8009480 <GPS_update_crosstrack+0x104>)
 800945a:	6013      	str	r3, [r2, #0]
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	200012a4 	.word	0x200012a4
 8009468:	200012a8 	.word	0x200012a8
 800946c:	ffffee6d 	.word	0xffffee6d
 8009470:	393702d3 	.word	0x393702d3
 8009474:	200012b0 	.word	0x200012b0
 8009478:	200012ac 	.word	0x200012ac
 800947c:	fffff448 	.word	0xfffff448
 8009480:	20001304 	.word	0x20001304

08009484 <GPS_calc_desired_speed>:
//                100  |  200     300     400cm/s
//                 |                                        +|+
//                 |< we should slow to 1.5 m/s as we hit the target
//
static int16_t GPS_calc_desired_speed(int16_t max_speed, bool _slow)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	460a      	mov	r2, r1
 800948e:	80fb      	strh	r3, [r7, #6]
 8009490:	4613      	mov	r3, r2
 8009492:	717b      	strb	r3, [r7, #5]
    // max_speed is default 400 or 4m/s
    if (_slow) {
 8009494:	797b      	ldrb	r3, [r7, #5]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00c      	beq.n	80094b4 <GPS_calc_desired_speed+0x30>
        max_speed = min(max_speed, wp_distance / 2);
 800949a:	4b23      	ldr	r3, [pc, #140]	; (8009528 <GPS_calc_desired_speed+0xa4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	0fda      	lsrs	r2, r3, #31
 80094a0:	4413      	add	r3, r2
 80094a2:	105b      	asrs	r3, r3, #1
 80094a4:	461a      	mov	r2, r3
 80094a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094aa:	4293      	cmp	r3, r2
 80094ac:	bfa8      	it	ge
 80094ae:	4613      	movge	r3, r2
 80094b0:	80fb      	strh	r3, [r7, #6]
 80094b2:	e011      	b.n	80094d8 <GPS_calc_desired_speed+0x54>
    } else {
        max_speed = min(max_speed, wp_distance);
 80094b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094b8:	4b1b      	ldr	r3, [pc, #108]	; (8009528 <GPS_calc_desired_speed+0xa4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4293      	cmp	r3, r2
 80094be:	bfa8      	it	ge
 80094c0:	4613      	movge	r3, r2
 80094c2:	80fb      	strh	r3, [r7, #6]
        max_speed = max(max_speed, cfg.nav_speed_min);      // go at least 100cm/s
 80094c4:	4b19      	ldr	r3, [pc, #100]	; (800952c <GPS_calc_desired_speed+0xa8>)
 80094c6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80094ca:	461a      	mov	r2, r3
 80094cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	bfb8      	it	lt
 80094d4:	4613      	movlt	r3, r2
 80094d6:	80fb      	strh	r3, [r7, #6]
    }

    // limit the ramp up of the speed
    // waypoint_speed_gov is reset to 0 at each new WP command
    if (max_speed > waypoint_speed_gov) {
 80094d8:	4b15      	ldr	r3, [pc, #84]	; (8009530 <GPS_calc_desired_speed+0xac>)
 80094da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80094de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	dd17      	ble.n	8009516 <GPS_calc_desired_speed+0x92>
        waypoint_speed_gov += (int)(100.0f * dTnav);    // increase at .5/ms
 80094e6:	4b13      	ldr	r3, [pc, #76]	; (8009534 <GPS_calc_desired_speed+0xb0>)
 80094e8:	edd3 7a00 	vldr	s15, [r3]
 80094ec:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8009538 <GPS_calc_desired_speed+0xb4>
 80094f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094f8:	ee17 3a90 	vmov	r3, s15
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <GPS_calc_desired_speed+0xac>)
 8009500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009504:	b29b      	uxth	r3, r3
 8009506:	4413      	add	r3, r2
 8009508:	b29b      	uxth	r3, r3
 800950a:	b21a      	sxth	r2, r3
 800950c:	4b08      	ldr	r3, [pc, #32]	; (8009530 <GPS_calc_desired_speed+0xac>)
 800950e:	801a      	strh	r2, [r3, #0]
        max_speed = waypoint_speed_gov;
 8009510:	4b07      	ldr	r3, [pc, #28]	; (8009530 <GPS_calc_desired_speed+0xac>)
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	80fb      	strh	r3, [r7, #6]
    }
    return max_speed;
 8009516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800951a:	4618      	mov	r0, r3
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	200012b0 	.word	0x200012b0
 800952c:	20000db4 	.word	0x20000db4
 8009530:	200012b4 	.word	0x200012b4
 8009534:	20001288 	.word	0x20001288
 8009538:	42c80000 	.word	0x42c80000

0800953c <wrap_18000>:

////////////////////////////////////////////////////////////////////////////////////
// Utilities
//
int32_t wrap_18000(int32_t err)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
    if (err > 18000)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f244 6250 	movw	r2, #18000	; 0x4650
 800954a:	4293      	cmp	r3, r2
 800954c:	dd04      	ble.n	8009558 <wrap_18000+0x1c>
        err -= 36000;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009554:	3ba0      	subs	r3, #160	; 0xa0
 8009556:	607b      	str	r3, [r7, #4]
    if (err < -18000)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a07      	ldr	r2, [pc, #28]	; (8009578 <wrap_18000+0x3c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	da04      	bge.n	800956a <wrap_18000+0x2e>
        err += 36000;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8009566:	33a0      	adds	r3, #160	; 0xa0
 8009568:	607b      	str	r3, [r7, #4]
    return err;
 800956a:	687b      	ldr	r3, [r7, #4]
}
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	ffffb9b0 	.word	0xffffb9b0

0800957c <wrap_36000>:

static int32_t wrap_36000(int32_t deg)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
    if (deg > 36000)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800958a:	4293      	cmp	r3, r2
 800958c:	dd04      	ble.n	8009598 <wrap_36000+0x1c>
        deg -= 36000;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f5a3 430c 	sub.w	r3, r3, #35840	; 0x8c00
 8009594:	3ba0      	subs	r3, #160	; 0xa0
 8009596:	607b      	str	r3, [r7, #4]
    if (deg < 0)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	da04      	bge.n	80095a8 <wrap_36000+0x2c>
        deg += 36000;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80095a4:	33a0      	adds	r3, #160	; 0xa0
 80095a6:	607b      	str	r3, [r7, #4]
    return deg;
 80095a8:	687b      	ldr	r3, [r7, #4]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
	...

080095b8 <ibusReadRawRC>:
static PifRcIbus s_ibus;
static uint16_t ibusChannelData[IBUS_MAX_CHANNEL];


static uint16_t ibusReadRawRC(uint8_t chan)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	71fb      	strb	r3, [r7, #7]
    return ibusChannelData[mcfg.rcmap[chan]];
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	4a06      	ldr	r2, [pc, #24]	; (80095e0 <ibusReadRawRC+0x28>)
 80095c6:	4413      	add	r3, r2
 80095c8:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 80095cc:	461a      	mov	r2, r3
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <ibusReadRawRC+0x2c>)
 80095d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20000848 	.word	0x20000848
 80095e4:	200013c0 	.word	0x200013c0

080095e8 <_evtIbusReceive>:

static void _evtIbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 80095f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80095f8:	f7fd fc6a 	bl	8006ed0 <feature>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <_evtIbusReceive+0x26>
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f00e fa60 	bl	8017ac8 <pifRc_CheckFailSafe>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d11a      	bne.n	8009644 <_evtIbusReceive+0x5c>

    failsafeCnt = 0; // clear FailSafe counter
 800960e:	4b0f      	ldr	r3, [pc, #60]	; (800964c <_evtIbusReceive+0x64>)
 8009610:	2200      	movs	r2, #0
 8009612:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
 8009618:	e00b      	b.n	8009632 <_evtIbusReceive+0x4a>
		ibusChannelData[i] = channel[i];
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	4413      	add	r3, r2
 8009622:	8819      	ldrh	r1, [r3, #0]
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <_evtIbusReceive+0x68>)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < IBUS_MAX_CHANNEL; i++) {
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	3301      	adds	r3, #1
 8009630:	617b      	str	r3, [r7, #20]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b07      	cmp	r3, #7
 8009636:	ddf0      	ble.n	800961a <_evtIbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 800963c:	6938      	ldr	r0, [r7, #16]
 800963e:	f00a ff67 	bl	8014510 <pifTask_SetTrigger>
 8009642:	e000      	b.n	8009646 <_evtIbusReceive+0x5e>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8009644:	bf00      	nop
}
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	200016e2 	.word	0x200016e2
 8009650:	200013c0 	.word	0x200013c0

08009654 <ibusInit>:

BOOL ibusInit(int uart, rcReadRawDataPtr *callback)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	e009      	b.n	8009678 <ibusInit+0x24>
        ibusChannelData[b] = mcfg.midrc;
 8009664:	4b22      	ldr	r3, [pc, #136]	; (80096f0 <ibusInit+0x9c>)
 8009666:	f8b3 1198 	ldrh.w	r1, [r3, #408]	; 0x198
 800966a:	4a22      	ldr	r2, [pc, #136]	; (80096f4 <ibusInit+0xa0>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (b = 0; b < IBUS_MAX_CHANNEL; b++)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b07      	cmp	r3, #7
 800967c:	ddf2      	ble.n	8009664 <ibusInit+0x10>

    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);	// 2ms
 800967e:	2302      	movs	r3, #2
 8009680:	2201      	movs	r2, #1
 8009682:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7f8 fe38 	bl	80022fc <uartOpen>
 800968c:	4603      	mov	r3, r0
 800968e:	4a1a      	ldr	r2, [pc, #104]	; (80096f8 <ibusInit+0xa4>)
 8009690:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8009692:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <ibusInit+0xa4>)
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <ibusInit+0x4a>
 800969a:	2300      	movs	r3, #0
 800969c:	e023      	b.n	80096e6 <ibusInit+0x92>

    if (!pifRcIbus_Init(&s_ibus, PIF_ID_AUTO)) return FALSE;
 800969e:	2100      	movs	r1, #0
 80096a0:	4816      	ldr	r0, [pc, #88]	; (80096fc <ibusInit+0xa8>)
 80096a2:	f00e fc2d 	bl	8017f00 <pifRcIbus_Init>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <ibusInit+0x5c>
 80096ac:	2300      	movs	r3, #0
 80096ae:	e01a      	b.n	80096e6 <ibusInit+0x92>
    pifRc_AttachEvtReceive(&s_ibus.parent, _evtIbusReceive, g_task_compute_rc);
 80096b0:	4b13      	ldr	r3, [pc, #76]	; (8009700 <ibusInit+0xac>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	461a      	mov	r2, r3
 80096b6:	4913      	ldr	r1, [pc, #76]	; (8009704 <ibusInit+0xb0>)
 80096b8:	4810      	ldr	r0, [pc, #64]	; (80096fc <ibusInit+0xa8>)
 80096ba:	f00e f9f3 	bl	8017aa4 <pifRc_AttachEvtReceive>
    pifRcIbus_AttachComm(&s_ibus, &core.rcvrport->comm);
 80096be:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <ibusInit+0xa4>)
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	3304      	adds	r3, #4
 80096c4:	4619      	mov	r1, r3
 80096c6:	480d      	ldr	r0, [pc, #52]	; (80096fc <ibusInit+0xa8>)
 80096c8:	f00e fc4a 	bl	8017f60 <pifRcIbus_AttachComm>

    if (callback)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <ibusInit+0x84>
        *callback = ibusReadRawRC;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	4a0c      	ldr	r2, [pc, #48]	; (8009708 <ibusInit+0xb4>)
 80096d6:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80096d8:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <ibusInit+0xa4>)
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	3304      	adds	r3, #4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7f8 ff78 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 80096e4:	2301      	movs	r3, #1
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000848 	.word	0x20000848
 80096f4:	200013c0 	.word	0x200013c0
 80096f8:	20000790 	.word	0x20000790
 80096fc:	20001320 	.word	0x20001320
 8009700:	2000150c 	.word	0x2000150c
 8009704:	080095e9 	.word	0x080095e9
 8009708:	080095b9 	.word	0x080095b9
 800970c:	00000000 	.word	0x00000000

08009710 <imuInit>:
float anglerad[2] = { 0.0f, 0.0f };    // absolute angle inclination in radians

static void getEstimatedAttitude(void);

void imuInit(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	ed2d 8b02 	vpush	{d8}
 8009716:	af00      	add	r7, sp, #0
    smallAngle = lrintf(sensor_set.acc.acc_1G * cosf(RAD * cfg.small_angle));
 8009718:	4b45      	ldr	r3, [pc, #276]	; (8009830 <imuInit+0x120>)
 800971a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009726:	4b43      	ldr	r3, [pc, #268]	; (8009834 <imuInit+0x124>)
 8009728:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800972c:	4618      	mov	r0, r3
 800972e:	f7f6 fead 	bl	800048c <__aeabi_i2d>
 8009732:	a339      	add	r3, pc, #228	; (adr r3, 8009818 <imuInit+0x108>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 ff12 	bl	8000560 <__aeabi_dmul>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4610      	mov	r0, r2
 8009742:	4619      	mov	r1, r3
 8009744:	f7f7 f9ee 	bl	8000b24 <__aeabi_d2f>
 8009748:	4603      	mov	r3, r0
 800974a:	ee00 3a10 	vmov	s0, r3
 800974e:	f01a f82b 	bl	80237a8 <cosf>
 8009752:	eef0 7a40 	vmov.f32	s15, s0
 8009756:	ee68 7a27 	vmul.f32	s15, s16, s15
 800975a:	eeb0 0a67 	vmov.f32	s0, s15
 800975e:	f01a f867 	bl	8023830 <lrintf>
 8009762:	4603      	mov	r3, r0
 8009764:	b21a      	sxth	r2, r3
 8009766:	4b34      	ldr	r3, [pc, #208]	; (8009838 <imuInit+0x128>)
 8009768:	801a      	strh	r2, [r3, #0]
    accVelScale = 9.80665f / sensor_set.acc.acc_1G / 10000.0f;
 800976a:	4b31      	ldr	r3, [pc, #196]	; (8009830 <imuInit+0x120>)
 800976c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009778:	eddf 6a30 	vldr	s13, [pc, #192]	; 800983c <imuInit+0x12c>
 800977c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009780:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009840 <imuInit+0x130>
 8009784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009788:	4b2e      	ldr	r3, [pc, #184]	; (8009844 <imuInit+0x134>)
 800978a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = (1800.0f / M_PI) * (900.0f / cfg.throttle_correction_angle);
 800978e:	4b29      	ldr	r3, [pc, #164]	; (8009834 <imuInit+0x124>)
 8009790:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8009794:	ee07 3a90 	vmov	s15, r3
 8009798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800979c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009848 <imuInit+0x138>
 80097a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80097a4:	ee16 0a90 	vmov	r0, s13
 80097a8:	f7f6 fe82 	bl	80004b0 <__aeabi_f2d>
 80097ac:	a31c      	add	r3, pc, #112	; (adr r3, 8009820 <imuInit+0x110>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 fed5 	bl	8000560 <__aeabi_dmul>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4610      	mov	r0, r2
 80097bc:	4619      	mov	r1, r3
 80097be:	f7f7 f9b1 	bl	8000b24 <__aeabi_d2f>
 80097c2:	4603      	mov	r3, r0
 80097c4:	4a21      	ldr	r2, [pc, #132]	; (800984c <imuInit+0x13c>)
 80097c6:	6013      	str	r3, [r2, #0]

    fc_acc = 0.5f / (M_PI * cfg.accz_lpf_cutoff); // calculate RC time constant used in the accZ lpf
 80097c8:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <imuInit+0x124>)
 80097ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f6 fe6f 	bl	80004b0 <__aeabi_f2d>
 80097d2:	a315      	add	r3, pc, #84	; (adr r3, 8009828 <imuInit+0x118>)
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f7f6 fec2 	bl	8000560 <__aeabi_dmul>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	f04f 0000 	mov.w	r0, #0
 80097e4:	491a      	ldr	r1, [pc, #104]	; (8009850 <imuInit+0x140>)
 80097e6:	f7f6 ffe5 	bl	80007b4 <__aeabi_ddiv>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	f7f7 f997 	bl	8000b24 <__aeabi_d2f>
 80097f6:	4603      	mov	r3, r0
 80097f8:	4a16      	ldr	r2, [pc, #88]	; (8009854 <imuInit+0x144>)
 80097fa:	6013      	str	r3, [r2, #0]

#ifdef MAG
    // if mag sensor is enabled, use it
    if (sensors(SENSOR_MAG))
 80097fc:	2008      	movs	r0, #8
 80097fe:	f7fd fb1f 	bl	8006e40 <sensors>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <imuInit+0xfc>
        Mag_init();
 8009808:	f005 fb20 	bl	800ee4c <Mag_init>
#endif
}
 800980c:	bf00      	nop
 800980e:	46bd      	mov	sp, r7
 8009810:	ecbd 8b02 	vpop	{d8}
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	a2529d39 	.word	0xa2529d39
 800981c:	3f91df46 	.word	0x3f91df46
 8009820:	907e593b 	.word	0x907e593b
 8009824:	4081e7a9 	.word	0x4081e7a9
 8009828:	54442d18 	.word	0x54442d18
 800982c:	400921fb 	.word	0x400921fb
 8009830:	20000060 	.word	0x20000060
 8009834:	20000db4 	.word	0x20000db4
 8009838:	20001404 	.word	0x20001404
 800983c:	411ce80a 	.word	0x411ce80a
 8009840:	461c4000 	.word	0x461c4000
 8009844:	2000143c 	.word	0x2000143c
 8009848:	44610000 	.word	0x44610000
 800984c:	20001440 	.word	0x20001440
 8009850:	3fe00000 	.word	0x3fe00000
 8009854:	20001444 	.word	0x20001444

08009858 <computeIMU>:

int computeIMU(int step)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    static int16_t gyroYawSmooth = 0;

	switch (step) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d02c      	beq.n	80098c0 <computeIMU+0x68>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b02      	cmp	r3, #2
 800986a:	dc2d      	bgt.n	80098c8 <computeIMU+0x70>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <computeIMU+0x22>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d01a      	beq.n	80098ae <computeIMU+0x56>
 8009878:	e026      	b.n	80098c8 <computeIMU+0x70>
	case 0:
		if (Gyro_getADC()) {
 800987a:	f005 fad1 	bl	800ee20 <Gyro_getADC>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d012      	beq.n	80098aa <computeIMU+0x52>
			if (sensors(SENSOR_ACC)) return 1;
 8009884:	2002      	movs	r0, #2
 8009886:	f7fd fadb 	bl	8006e40 <sensors>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <computeIMU+0x3c>
 8009890:	2301      	movs	r3, #1
 8009892:	e043      	b.n	800991c <computeIMU+0xc4>

			accADC[X] = 0;
 8009894:	4b23      	ldr	r3, [pc, #140]	; (8009924 <computeIMU+0xcc>)
 8009896:	2200      	movs	r2, #0
 8009898:	801a      	strh	r2, [r3, #0]
			accADC[Y] = 0;
 800989a:	4b22      	ldr	r3, [pc, #136]	; (8009924 <computeIMU+0xcc>)
 800989c:	2200      	movs	r2, #0
 800989e:	805a      	strh	r2, [r3, #2]
			accADC[Z] = 0;
 80098a0:	4b20      	ldr	r3, [pc, #128]	; (8009924 <computeIMU+0xcc>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	809a      	strh	r2, [r3, #4]
			return 3;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e038      	b.n	800991c <computeIMU+0xc4>
		}
		return step;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	e036      	b.n	800991c <computeIMU+0xc4>

	case 1:
		return ACC_getADC() ? 2 : step;
 80098ae:	f005 f8b9 	bl	800ea24 <ACC_getADC>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <computeIMU+0x64>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	e02f      	b.n	800991c <computeIMU+0xc4>
 80098bc:	2302      	movs	r3, #2
 80098be:	e02d      	b.n	800991c <computeIMU+0xc4>

	case 2:
		getEstimatedAttitude();
 80098c0:	f000 fbba 	bl	800a038 <getEstimatedAttitude>
		return 3;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e029      	b.n	800991c <computeIMU+0xc4>
	}

    if (mcfg.mixerConfiguration == MULTITYPE_TRI) {
 80098c8:	4b17      	ldr	r3, [pc, #92]	; (8009928 <computeIMU+0xd0>)
 80098ca:	795b      	ldrb	r3, [r3, #5]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d115      	bne.n	80098fc <computeIMU+0xa4>
        gyroData[YAW] = (gyroYawSmooth * 2 + gyroADC[YAW]) / 3;
 80098d0:	4b16      	ldr	r3, [pc, #88]	; (800992c <computeIMU+0xd4>)
 80098d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	4a15      	ldr	r2, [pc, #84]	; (8009930 <computeIMU+0xd8>)
 80098da:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80098de:	4413      	add	r3, r2
 80098e0:	4a14      	ldr	r2, [pc, #80]	; (8009934 <computeIMU+0xdc>)
 80098e2:	fb82 1203 	smull	r1, r2, r2, r3
 80098e6:	17db      	asrs	r3, r3, #31
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	b21a      	sxth	r2, r3
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <computeIMU+0xe0>)
 80098ee:	809a      	strh	r2, [r3, #4]
        gyroYawSmooth = gyroData[YAW];
 80098f0:	4b11      	ldr	r3, [pc, #68]	; (8009938 <computeIMU+0xe0>)
 80098f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80098f6:	4b0d      	ldr	r3, [pc, #52]	; (800992c <computeIMU+0xd4>)
 80098f8:	801a      	strh	r2, [r3, #0]
 80098fa:	e004      	b.n	8009906 <computeIMU+0xae>
    } else {
        gyroData[YAW] = gyroADC[YAW];
 80098fc:	4b0c      	ldr	r3, [pc, #48]	; (8009930 <computeIMU+0xd8>)
 80098fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009902:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <computeIMU+0xe0>)
 8009904:	809a      	strh	r2, [r3, #4]
    }
    gyroData[ROLL] = gyroADC[ROLL];
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <computeIMU+0xd8>)
 8009908:	f9b3 2000 	ldrsh.w	r2, [r3]
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <computeIMU+0xe0>)
 800990e:	801a      	strh	r2, [r3, #0]
    gyroData[PITCH] = gyroADC[PITCH];
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <computeIMU+0xd8>)
 8009912:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009916:	4b08      	ldr	r3, [pc, #32]	; (8009938 <computeIMU+0xe0>)
 8009918:	805a      	strh	r2, [r3, #2]
	return 4;
 800991a:	2304      	movs	r3, #4
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	200013d8 	.word	0x200013d8
 8009928:	20000848 	.word	0x20000848
 800992c:	20001470 	.word	0x20001470
 8009930:	200013d0 	.word	0x200013d0
 8009934:	55555556 	.word	0x55555556
 8009938:	20001448 	.word	0x20001448

0800993c <normalizeV>:

t_fp_vector EstG;

// Normalize a vector
void normalizeV(struct fp_vector *src, struct fp_vector *dest)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
    float length;

    length = sqrtf(src->X * src->X + src->Y * src->Y + src->Z * src->Z);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	ed93 7a00 	vldr	s14, [r3]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	edd3 7a00 	vldr	s15, [r3]
 8009952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	edd3 6a01 	vldr	s13, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	edd3 7a01 	vldr	s15, [r3, #4]
 8009962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	edd3 7a02 	vldr	s15, [r3, #8]
 8009976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800997a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800997e:	eeb0 0a67 	vmov.f32	s0, s15
 8009982:	f01a f861 	bl	8023a48 <sqrtf>
 8009986:	ed87 0a03 	vstr	s0, [r7, #12]
    if (length != 0) {
 800998a:	edd7 7a03 	vldr	s15, [r7, #12]
 800998e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009996:	d01d      	beq.n	80099d4 <normalizeV+0x98>
        dest->X = src->X / length;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	edd3 6a00 	vldr	s13, [r3]
 800999e:	ed97 7a03 	vldr	s14, [r7, #12]
 80099a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	edc3 7a00 	vstr	s15, [r3]
        dest->Y = src->Y / length;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80099b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80099b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	edc3 7a01 	vstr	s15, [r3, #4]
        dest->Z = src->Z / length;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80099c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80099ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	edc3 7a02 	vstr	s15, [r3, #8]
    }
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <rotateV>:

// Rotate Estimated vector(s) with small angle approximation, according to the gyro data
void rotateV(struct fp_vector *v, float *delta)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b098      	sub	sp, #96	; 0x60
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
    struct fp_vector v_tmp = *v;
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80099ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    // This does a  "proper" matrix rotation using gyro deltas without small-angle approximation
    float mat[3][3];
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cosf(delta[ROLL]);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	edd3 7a00 	vldr	s15, [r3]
 80099f8:	eeb0 0a67 	vmov.f32	s0, s15
 80099fc:	f019 fed4 	bl	80237a8 <cosf>
 8009a00:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
    sinx = sinf(delta[ROLL]);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	edd3 7a00 	vldr	s15, [r3]
 8009a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a0e:	f019 ff4f 	bl	80238b0 <sinf>
 8009a12:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    cosy = cosf(delta[PITCH]);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	edd3 7a00 	vldr	s15, [r3]
 8009a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8009a22:	f019 fec1 	bl	80237a8 <cosf>
 8009a26:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    siny = sinf(delta[PITCH]);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	edd3 7a00 	vldr	s15, [r3]
 8009a32:	eeb0 0a67 	vmov.f32	s0, s15
 8009a36:	f019 ff3b 	bl	80238b0 <sinf>
 8009a3a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    cosz = cosf(delta[YAW]);
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	3308      	adds	r3, #8
 8009a42:	edd3 7a00 	vldr	s15, [r3]
 8009a46:	eeb0 0a67 	vmov.f32	s0, s15
 8009a4a:	f019 fead 	bl	80237a8 <cosf>
 8009a4e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    sinz = sinf(delta[YAW]);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	3308      	adds	r3, #8
 8009a56:	edd3 7a00 	vldr	s15, [r3]
 8009a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5e:	f019 ff27 	bl	80238b0 <sinf>
 8009a62:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

    coszcosx = cosz * cosx;
 8009a66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a6a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a72:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    sinzcosx = sinz * cosx;
 8009a76:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a82:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    coszsinx = sinx * cosz;
 8009a86:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009a8a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    sinzsinx = sinx * sinz;
 8009a96:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009a9a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

    mat[0][0] = cosz * cosy;
 8009aa6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009aaa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a02 	vstr	s15, [r7, #8]
    mat[0][1] = -cosy * sinz;
 8009ab6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009aba:	eeb1 7a67 	vneg.f32	s14, s15
 8009abe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac6:	edc7 7a03 	vstr	s15, [r7, #12]
    mat[0][2] = siny;
 8009aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009acc:	613b      	str	r3, [r7, #16]
    mat[1][0] = sinzcosx + (coszsinx * siny);
 8009ace:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009ad2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ada:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ae2:	edc7 7a05 	vstr	s15, [r7, #20]
    mat[1][1] = coszcosx - (sinzsinx * siny);
 8009ae6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009aea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009afa:	edc7 7a06 	vstr	s15, [r7, #24]
    mat[1][2] = -sinx * cosy;
 8009afe:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009b02:	eeb1 7a67 	vneg.f32	s14, s15
 8009b06:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0e:	edc7 7a07 	vstr	s15, [r7, #28]
    mat[2][0] = (sinzsinx) - (coszcosx * siny);
 8009b12:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009b16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b26:	edc7 7a08 	vstr	s15, [r7, #32]
    mat[2][1] = (coszsinx) + (sinzcosx * siny);
 8009b2a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009b2e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b36:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    mat[2][2] = cosy * cosx;
 8009b42:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009b46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    v->X = v_tmp.X * mat[0][0] + v_tmp.Y * mat[1][0] + v_tmp.Z * mat[2][0];
 8009b52:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b5e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8009b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b6e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009b72:	edd7 7a08 	vldr	s15, [r7, #32]
 8009b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	edc3 7a00 	vstr	s15, [r3]
    v->Y = v_tmp.X * mat[0][1] + v_tmp.Y * mat[1][1] + v_tmp.Z * mat[2][1];
 8009b84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b90:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009b94:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ba0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	edc3 7a01 	vstr	s15, [r3, #4]
    v->Z = v_tmp.X * mat[0][2] + v_tmp.Y * mat[1][2] + v_tmp.Z * mat[2][2];
 8009bb6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009bba:	edd7 7a04 	vldr	s15, [r7, #16]
 8009bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009bc2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009bc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8009bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bd2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8009bd6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009be8:	bf00      	nop
 8009bea:	3760      	adds	r7, #96	; 0x60
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <applyDeadband>:

int32_t applyDeadband(int32_t value, int32_t deadband)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
    if (abs(value) < deadband) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bfb8      	it	lt
 8009c00:	425b      	neglt	r3, r3
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	dd02      	ble.n	8009c0e <applyDeadband+0x1e>
        value = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	e00e      	b.n	8009c2c <applyDeadband+0x3c>
    } else if (value > 0) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dd04      	ble.n	8009c1e <applyDeadband+0x2e>
        value -= deadband;
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	e006      	b.n	8009c2c <applyDeadband+0x3c>
    } else if (value < 0) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da03      	bge.n	8009c2c <applyDeadband+0x3c>
        value += deadband;
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	4413      	add	r3, r2
 8009c2a:	607b      	str	r3, [r7, #4]
    }
    return value;
 8009c2c:	687b      	ldr	r3, [r7, #4]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	0000      	movs	r0, r0
 8009c3c:	0000      	movs	r0, r0
	...

08009c40 <acc_calc>:

// rotate acc into Earth frame and calculate acceleration in it
void acc_calc(uint32_t deltaT)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
    static int32_t accZoffset = 0;
    static float accz_smooth = 0;
    float dT = 0;
 8009c48:	f04f 0300 	mov.w	r3, #0
 8009c4c:	627b      	str	r3, [r7, #36]	; 0x24
    float rpy[3];
    t_fp_vector accel_ned;

    // deltaT is measured in us ticks
    dT = (float)deltaT * 1e-6f;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c58:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009e60 <acc_calc+0x220>
 8009c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // the accel values have to be rotated into the earth frame
    rpy[0] = -(float)anglerad[ROLL];
 8009c64:	4b7f      	ldr	r3, [pc, #508]	; (8009e64 <acc_calc+0x224>)
 8009c66:	edd3 7a00 	vldr	s15, [r3]
 8009c6a:	eef1 7a67 	vneg.f32	s15, s15
 8009c6e:	edc7 7a06 	vstr	s15, [r7, #24]
    rpy[1] = -(float)anglerad[PITCH];
 8009c72:	4b7c      	ldr	r3, [pc, #496]	; (8009e64 <acc_calc+0x224>)
 8009c74:	edd3 7a01 	vldr	s15, [r3, #4]
 8009c78:	eef1 7a67 	vneg.f32	s15, s15
 8009c7c:	edc7 7a07 	vstr	s15, [r7, #28]
    rpy[2] = -(float)heading * RAD;
 8009c80:	4b79      	ldr	r3, [pc, #484]	; (8009e68 <acc_calc+0x228>)
 8009c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c8e:	eef1 7a67 	vneg.f32	s15, s15
 8009c92:	ee17 3a90 	vmov	r3, s15
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f6 fc0a 	bl	80004b0 <__aeabi_f2d>
 8009c9c:	a36e      	add	r3, pc, #440	; (adr r3, 8009e58 <acc_calc+0x218>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f7f6 fc5d 	bl	8000560 <__aeabi_dmul>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4610      	mov	r0, r2
 8009cac:	4619      	mov	r1, r3
 8009cae:	f7f6 ff39 	bl	8000b24 <__aeabi_d2f>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	623b      	str	r3, [r7, #32]

    accel_ned.V.X = accSmooth[0];
 8009cb6:	4b6d      	ldr	r3, [pc, #436]	; (8009e6c <acc_calc+0x22c>)
 8009cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cc4:	edc7 7a03 	vstr	s15, [r7, #12]
    accel_ned.V.Y = accSmooth[1];
 8009cc8:	4b68      	ldr	r3, [pc, #416]	; (8009e6c <acc_calc+0x22c>)
 8009cca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd6:	edc7 7a04 	vstr	s15, [r7, #16]
    accel_ned.V.Z = accSmooth[2];
 8009cda:	4b64      	ldr	r3, [pc, #400]	; (8009e6c <acc_calc+0x22c>)
 8009cdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce8:	edc7 7a05 	vstr	s15, [r7, #20]

    rotateV(&accel_ned.V, rpy);
 8009cec:	f107 0218 	add.w	r2, r7, #24
 8009cf0:	f107 030c 	add.w	r3, r7, #12
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff fe70 	bl	80099dc <rotateV>

    if (cfg.acc_unarmedcal == 1) {
 8009cfc:	4b5c      	ldr	r3, [pc, #368]	; (8009e70 <acc_calc+0x230>)
 8009cfe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d131      	bne.n	8009d6a <acc_calc+0x12a>
        if (!f.ARMED) {
 8009d06:	4b5b      	ldr	r3, [pc, #364]	; (8009e74 <acc_calc+0x234>)
 8009d08:	785b      	ldrb	r3, [r3, #1]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11c      	bne.n	8009d48 <acc_calc+0x108>
            accZoffset -= accZoffset / 64;
 8009d0e:	4b5a      	ldr	r3, [pc, #360]	; (8009e78 <acc_calc+0x238>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da00      	bge.n	8009d18 <acc_calc+0xd8>
 8009d16:	333f      	adds	r3, #63	; 0x3f
 8009d18:	119b      	asrs	r3, r3, #6
 8009d1a:	425b      	negs	r3, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4b56      	ldr	r3, [pc, #344]	; (8009e78 <acc_calc+0x238>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4413      	add	r3, r2
 8009d24:	4a54      	ldr	r2, [pc, #336]	; (8009e78 <acc_calc+0x238>)
 8009d26:	6013      	str	r3, [r2, #0]
            accZoffset += accel_ned.V.Z;
 8009d28:	4b53      	ldr	r3, [pc, #332]	; (8009e78 <acc_calc+0x238>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d40:	ee17 2a90 	vmov	r2, s15
 8009d44:	4b4c      	ldr	r3, [pc, #304]	; (8009e78 <acc_calc+0x238>)
 8009d46:	601a      	str	r2, [r3, #0]
        }
        accel_ned.V.Z -= accZoffset / 64;  // compensate for gravitation on z-axis
 8009d48:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d4c:	4b4a      	ldr	r3, [pc, #296]	; (8009e78 <acc_calc+0x238>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	da00      	bge.n	8009d56 <acc_calc+0x116>
 8009d54:	333f      	adds	r3, #63	; 0x3f
 8009d56:	119b      	asrs	r3, r3, #6
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d64:	edc7 7a05 	vstr	s15, [r7, #20]
 8009d68:	e00c      	b.n	8009d84 <acc_calc+0x144>
    } else
        accel_ned.V.Z -= sensor_set.acc.acc_1G;
 8009d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d6e:	4b43      	ldr	r3, [pc, #268]	; (8009e7c <acc_calc+0x23c>)
 8009d70:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d80:	edc7 7a05 	vstr	s15, [r7, #20]

    accz_smooth = accz_smooth + (dT / (fc_acc + dT)) * (accel_ned.V.Z - accz_smooth); // low pass filter
 8009d84:	4b3e      	ldr	r3, [pc, #248]	; (8009e80 <acc_calc+0x240>)
 8009d86:	ed93 7a00 	vldr	s14, [r3]
 8009d8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d92:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d9a:	edd7 6a05 	vldr	s13, [r7, #20]
 8009d9e:	4b39      	ldr	r3, [pc, #228]	; (8009e84 <acc_calc+0x244>)
 8009da0:	edd3 7a00 	vldr	s15, [r3]
 8009da4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dac:	4b35      	ldr	r3, [pc, #212]	; (8009e84 <acc_calc+0x244>)
 8009dae:	edd3 7a00 	vldr	s15, [r3]
 8009db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009db6:	4b33      	ldr	r3, [pc, #204]	; (8009e84 <acc_calc+0x244>)
 8009db8:	edc3 7a00 	vstr	s15, [r3]

    // apply Deadband to reduce integration drift and vibration influence and
    // sum up Values for later integration to get velocity and distance
    accSum[X] += applyDeadband(lrintf(accel_ned.V.X), cfg.accxy_deadband);
 8009dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8009dc4:	f019 fd34 	bl	8023830 <lrintf>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	4a29      	ldr	r2, [pc, #164]	; (8009e70 <acc_calc+0x230>)
 8009dcc:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff ff0c 	bl	8009bf0 <applyDeadband>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4b2b      	ldr	r3, [pc, #172]	; (8009e88 <acc_calc+0x248>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4413      	add	r3, r2
 8009de0:	4a29      	ldr	r2, [pc, #164]	; (8009e88 <acc_calc+0x248>)
 8009de2:	6013      	str	r3, [r2, #0]
    accSum[Y] += applyDeadband(lrintf(accel_ned.V.Y), cfg.accxy_deadband);
 8009de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8009de8:	eeb0 0a67 	vmov.f32	s0, s15
 8009dec:	f019 fd20 	bl	8023830 <lrintf>
 8009df0:	4603      	mov	r3, r0
 8009df2:	4a1f      	ldr	r2, [pc, #124]	; (8009e70 <acc_calc+0x230>)
 8009df4:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8009df8:	4611      	mov	r1, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fef8 	bl	8009bf0 <applyDeadband>
 8009e00:	4602      	mov	r2, r0
 8009e02:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <acc_calc+0x248>)
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	4413      	add	r3, r2
 8009e08:	4a1f      	ldr	r2, [pc, #124]	; (8009e88 <acc_calc+0x248>)
 8009e0a:	6053      	str	r3, [r2, #4]
    accSum[Z] += applyDeadband(lrintf(accz_smooth), cfg.accz_deadband);
 8009e0c:	4b1d      	ldr	r3, [pc, #116]	; (8009e84 <acc_calc+0x244>)
 8009e0e:	edd3 7a00 	vldr	s15, [r3]
 8009e12:	eeb0 0a67 	vmov.f32	s0, s15
 8009e16:	f019 fd0b 	bl	8023830 <lrintf>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4a14      	ldr	r2, [pc, #80]	; (8009e70 <acc_calc+0x230>)
 8009e1e:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff fee3 	bl	8009bf0 <applyDeadband>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4b16      	ldr	r3, [pc, #88]	; (8009e88 <acc_calc+0x248>)
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	4413      	add	r3, r2
 8009e32:	4a15      	ldr	r2, [pc, #84]	; (8009e88 <acc_calc+0x248>)
 8009e34:	6093      	str	r3, [r2, #8]

    accTimeSum += deltaT;
 8009e36:	4b15      	ldr	r3, [pc, #84]	; (8009e8c <acc_calc+0x24c>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	4a13      	ldr	r2, [pc, #76]	; (8009e8c <acc_calc+0x24c>)
 8009e40:	6013      	str	r3, [r2, #0]
    accSumCount++;
 8009e42:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <acc_calc+0x250>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a11      	ldr	r2, [pc, #68]	; (8009e90 <acc_calc+0x250>)
 8009e4a:	6013      	str	r3, [r2, #0]
}
 8009e4c:	bf00      	nop
 8009e4e:	3728      	adds	r7, #40	; 0x28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	f3af 8000 	nop.w
 8009e58:	a2529d39 	.word	0xa2529d39
 8009e5c:	3f91df46 	.word	0x3f91df46
 8009e60:	358637bd 	.word	0x358637bd
 8009e64:	2000145c 	.word	0x2000145c
 8009e68:	200019e6 	.word	0x200019e6
 8009e6c:	200013e0 	.word	0x200013e0
 8009e70:	20000db4 	.word	0x20000db4
 8009e74:	200016b0 	.word	0x200016b0
 8009e78:	20001474 	.word	0x20001474
 8009e7c:	20000060 	.word	0x20000060
 8009e80:	20001444 	.word	0x20001444
 8009e84:	20001478 	.word	0x20001478
 8009e88:	200013f0 	.word	0x200013f0
 8009e8c:	200013fc 	.word	0x200013fc
 8009e90:	20001400 	.word	0x20001400

08009e94 <accSum_reset>:

void accSum_reset(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
    accSum[0] = 0;
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <accSum_reset+0x2c>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
    accSum[1] = 0;
 8009e9e:	4b08      	ldr	r3, [pc, #32]	; (8009ec0 <accSum_reset+0x2c>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	605a      	str	r2, [r3, #4]
    accSum[2] = 0;
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <accSum_reset+0x2c>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	609a      	str	r2, [r3, #8]
    accSumCount = 0;
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <accSum_reset+0x30>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
    accTimeSum = 0;
 8009eb0:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <accSum_reset+0x34>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	200013f0 	.word	0x200013f0
 8009ec4:	20001400 	.word	0x20001400
 8009ec8:	200013fc 	.word	0x200013fc
 8009ecc:	00000000 	.word	0x00000000

08009ed0 <calculateHeading>:

// baseflight calculation by Luggi09 originates from arducopter
static int16_t calculateHeading(t_fp_vector *vec)
{
 8009ed0:	b5b0      	push	{r4, r5, r7, lr}
 8009ed2:	b08a      	sub	sp, #40	; 0x28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
    int16_t head;

    float cosineRoll = cosf(anglerad[ROLL]);
 8009ed8:	4b53      	ldr	r3, [pc, #332]	; (800a028 <calculateHeading+0x158>)
 8009eda:	edd3 7a00 	vldr	s15, [r3]
 8009ede:	eeb0 0a67 	vmov.f32	s0, s15
 8009ee2:	f019 fc61 	bl	80237a8 <cosf>
 8009ee6:	ed87 0a08 	vstr	s0, [r7, #32]
    float sineRoll = sinf(anglerad[ROLL]);
 8009eea:	4b4f      	ldr	r3, [pc, #316]	; (800a028 <calculateHeading+0x158>)
 8009eec:	edd3 7a00 	vldr	s15, [r3]
 8009ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ef4:	f019 fcdc 	bl	80238b0 <sinf>
 8009ef8:	ed87 0a07 	vstr	s0, [r7, #28]
    float cosinePitch = cosf(anglerad[PITCH]);
 8009efc:	4b4a      	ldr	r3, [pc, #296]	; (800a028 <calculateHeading+0x158>)
 8009efe:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f02:	eeb0 0a67 	vmov.f32	s0, s15
 8009f06:	f019 fc4f 	bl	80237a8 <cosf>
 8009f0a:	ed87 0a06 	vstr	s0, [r7, #24]
    float sinePitch = sinf(anglerad[PITCH]);
 8009f0e:	4b46      	ldr	r3, [pc, #280]	; (800a028 <calculateHeading+0x158>)
 8009f10:	edd3 7a01 	vldr	s15, [r3, #4]
 8009f14:	eeb0 0a67 	vmov.f32	s0, s15
 8009f18:	f019 fcca 	bl	80238b0 <sinf>
 8009f1c:	ed87 0a05 	vstr	s0, [r7, #20]
    float Xh = vec->A[X] * cosinePitch + vec->A[Y] * sineRoll * sinePitch + vec->A[Z] * sinePitch * cosineRoll;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	ed93 7a00 	vldr	s14, [r3]
 8009f26:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	edd3 6a01 	vldr	s13, [r3, #4]
 8009f34:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009f56:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f62:	edc7 7a04 	vstr	s15, [r7, #16]
    float Yh = vec->A[Y] * cosineRoll - vec->A[Z] * sineRoll;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8009f6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	edd3 6a02 	vldr	s13, [r3, #8]
 8009f7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f86:	edc7 7a03 	vstr	s15, [r7, #12]
    float hd = (atan2f(Yh, Xh) * 1800.0f / M_PI + sensor_set.mag.declination) / 10.0f;
 8009f8a:	edd7 0a04 	vldr	s1, [r7, #16]
 8009f8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8009f92:	f019 fcff 	bl	8023994 <atan2f>
 8009f96:	eef0 7a40 	vmov.f32	s15, s0
 8009f9a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800a02c <calculateHeading+0x15c>
 8009f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fa2:	ee17 0a90 	vmov	r0, s15
 8009fa6:	f7f6 fa83 	bl	80004b0 <__aeabi_f2d>
 8009faa:	a31d      	add	r3, pc, #116	; (adr r3, 800a020 <calculateHeading+0x150>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 fc00 	bl	80007b4 <__aeabi_ddiv>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4614      	mov	r4, r2
 8009fba:	461d      	mov	r5, r3
 8009fbc:	4b1c      	ldr	r3, [pc, #112]	; (800a030 <calculateHeading+0x160>)
 8009fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7f6 fa74 	bl	80004b0 <__aeabi_f2d>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 f910 	bl	80001f4 <__adddf3>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4619      	mov	r1, r3
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	4b14      	ldr	r3, [pc, #80]	; (800a034 <calculateHeading+0x164>)
 8009fe2:	f7f6 fbe7 	bl	80007b4 <__aeabi_ddiv>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4610      	mov	r0, r2
 8009fec:	4619      	mov	r1, r3
 8009fee:	f7f6 fd99 	bl	8000b24 <__aeabi_d2f>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	60bb      	str	r3, [r7, #8]
    head = lrintf(hd);
 8009ff6:	ed97 0a02 	vldr	s0, [r7, #8]
 8009ffa:	f019 fc19 	bl	8023830 <lrintf>
 8009ffe:	4603      	mov	r3, r0
 800a000:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (head < 0)
 800a002:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a006:	2b00      	cmp	r3, #0
 800a008:	da04      	bge.n	800a014 <calculateHeading+0x144>
        head += 360;
 800a00a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a00c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a010:	b29b      	uxth	r3, r3
 800a012:	84fb      	strh	r3, [r7, #38]	; 0x26

    return head;
 800a014:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3728      	adds	r7, #40	; 0x28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bdb0      	pop	{r4, r5, r7, pc}
 800a020:	54442d18 	.word	0x54442d18
 800a024:	400921fb 	.word	0x400921fb
 800a028:	2000145c 	.word	0x2000145c
 800a02c:	44e10000 	.word	0x44e10000
 800a030:	20000060 	.word	0x20000060
 800a034:	40240000 	.word	0x40240000

0800a038 <getEstimatedAttitude>:

static void getEstimatedAttitude(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	ed2d 8b02 	vpush	{d8}
 800a03e:	b08a      	sub	sp, #40	; 0x28
 800a040:	af00      	add	r7, sp, #0
    int32_t axis;
    int32_t accMag = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	623b      	str	r3, [r7, #32]
    static t_fp_vector EstM;
    static t_fp_vector EstN = { .A = { 1.0f, 0.0f, 0.0f } };
    static float accLPF[3];
    static uint32_t previousT = 0UL;
    uint32_t currentT = (*pif_act_timer1us)();
 800a046:	4bbe      	ldr	r3, [pc, #760]	; (800a340 <getEstimatedAttitude+0x308>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4798      	blx	r3
 800a04c:	61b8      	str	r0, [r7, #24]
    uint32_t deltaT;
    float scale, deltaGyroAngle[3];
    deltaT = currentT - previousT;
 800a04e:	4bbd      	ldr	r3, [pc, #756]	; (800a344 <getEstimatedAttitude+0x30c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	617b      	str	r3, [r7, #20]
    scale = deltaT * sensor_set.gyro.scale;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a062:	4bb9      	ldr	r3, [pc, #740]	; (800a348 <getEstimatedAttitude+0x310>)
 800a064:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800a068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06c:	edc7 7a04 	vstr	s15, [r7, #16]
    previousT = currentT;
 800a070:	4ab4      	ldr	r2, [pc, #720]	; (800a344 <getEstimatedAttitude+0x30c>)
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	6013      	str	r3, [r2, #0]

    // Initialization
    for (axis = 0; axis < 3; axis++) {
 800a076:	2300      	movs	r3, #0
 800a078:	627b      	str	r3, [r7, #36]	; 0x24
 800a07a:	e074      	b.n	800a166 <getEstimatedAttitude+0x12e>
        deltaGyroAngle[axis] = gyroADC[axis] * scale;
 800a07c:	4ab3      	ldr	r2, [pc, #716]	; (800a34c <getEstimatedAttitude+0x314>)
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a084:	ee07 3a90 	vmov	s15, r3
 800a088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a08c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	3328      	adds	r3, #40	; 0x28
 800a09a:	443b      	add	r3, r7
 800a09c:	3b28      	subs	r3, #40	; 0x28
 800a09e:	edc3 7a00 	vstr	s15, [r3]
        if (cfg.acc_lpf_factor > 0) {
 800a0a2:	4bab      	ldr	r3, [pc, #684]	; (800a350 <getEstimatedAttitude+0x318>)
 800a0a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d043      	beq.n	800a134 <getEstimatedAttitude+0xfc>
            accLPF[axis] = accLPF[axis] * (1.0f - (1.0f / cfg.acc_lpf_factor)) + accADC[axis] * (1.0f / cfg.acc_lpf_factor);
 800a0ac:	4aa9      	ldr	r2, [pc, #676]	; (800a354 <getEstimatedAttitude+0x31c>)
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	ed93 7a00 	vldr	s14, [r3]
 800a0b8:	4ba5      	ldr	r3, [pc, #660]	; (800a350 <getEstimatedAttitude+0x318>)
 800a0ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a0ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a0d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0da:	4a9f      	ldr	r2, [pc, #636]	; (800a358 <getEstimatedAttitude+0x320>)
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a0ea:	4b99      	ldr	r3, [pc, #612]	; (800a350 <getEstimatedAttitude+0x318>)
 800a0ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a0f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a0fc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800a100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a104:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a108:	4a92      	ldr	r2, [pc, #584]	; (800a354 <getEstimatedAttitude+0x31c>)
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	edc3 7a00 	vstr	s15, [r3]
            accSmooth[axis] = accLPF[axis];
 800a114:	4a8f      	ldr	r2, [pc, #572]	; (800a354 <getEstimatedAttitude+0x31c>)
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	edd3 7a00 	vldr	s15, [r3]
 800a120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a124:	ee17 3a90 	vmov	r3, s15
 800a128:	b219      	sxth	r1, r3
 800a12a:	4a8c      	ldr	r2, [pc, #560]	; (800a35c <getEstimatedAttitude+0x324>)
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a132:	e007      	b.n	800a144 <getEstimatedAttitude+0x10c>
        } else {
            accSmooth[axis] = accADC[axis];
 800a134:	4a88      	ldr	r2, [pc, #544]	; (800a358 <getEstimatedAttitude+0x320>)
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800a13c:	4a87      	ldr	r2, [pc, #540]	; (800a35c <getEstimatedAttitude+0x324>)
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        accMag += (int32_t)accSmooth[axis] * accSmooth[axis];
 800a144:	4a85      	ldr	r2, [pc, #532]	; (800a35c <getEstimatedAttitude+0x324>)
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a14c:	4619      	mov	r1, r3
 800a14e:	4a83      	ldr	r2, [pc, #524]	; (800a35c <getEstimatedAttitude+0x324>)
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a156:	fb01 f303 	mul.w	r3, r1, r3
 800a15a:	6a3a      	ldr	r2, [r7, #32]
 800a15c:	4413      	add	r3, r2
 800a15e:	623b      	str	r3, [r7, #32]
    for (axis = 0; axis < 3; axis++) {
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	3301      	adds	r3, #1
 800a164:	627b      	str	r3, [r7, #36]	; 0x24
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	2b02      	cmp	r3, #2
 800a16a:	dd87      	ble.n	800a07c <getEstimatedAttitude+0x44>
    }
    accMag = accMag * 100 / ((int32_t)sensor_set.acc.acc_1G * sensor_set.acc.acc_1G);
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	2264      	movs	r2, #100	; 0x64
 800a170:	fb03 f202 	mul.w	r2, r3, r2
 800a174:	4b74      	ldr	r3, [pc, #464]	; (800a348 <getEstimatedAttitude+0x310>)
 800a176:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a17a:	4619      	mov	r1, r3
 800a17c:	4b72      	ldr	r3, [pc, #456]	; (800a348 <getEstimatedAttitude+0x310>)
 800a17e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a182:	fb01 f303 	mul.w	r3, r1, r3
 800a186:	fb92 f3f3 	sdiv	r3, r2, r3
 800a18a:	623b      	str	r3, [r7, #32]

    rotateV(&EstG.V, deltaGyroAngle);
 800a18c:	463b      	mov	r3, r7
 800a18e:	4619      	mov	r1, r3
 800a190:	4873      	ldr	r0, [pc, #460]	; (800a360 <getEstimatedAttitude+0x328>)
 800a192:	f7ff fc23 	bl	80099dc <rotateV>

    // Apply complimentary filter (Gyro drift correction)
    // If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range => we neutralize the effect of accelerometers in the angle estimation.
    // To do that, we just skip filter, as EstV already rotated by Gyro
    if (72 < (uint16_t)accMag && (uint16_t)accMag < 133) {
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b48      	cmp	r3, #72	; 0x48
 800a19c:	d93c      	bls.n	800a218 <getEstimatedAttitude+0x1e0>
 800a19e:	6a3b      	ldr	r3, [r7, #32]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	2b84      	cmp	r3, #132	; 0x84
 800a1a4:	d838      	bhi.n	800a218 <getEstimatedAttitude+0x1e0>
        for (axis = 0; axis < 3; axis++)
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1aa:	e032      	b.n	800a212 <getEstimatedAttitude+0x1da>
            EstG.A[axis] = (EstG.A[axis] * (float)mcfg.gyro_cmpf_factor + accSmooth[axis]) * INV_GYR_CMPF_FACTOR;
 800a1ac:	4a6c      	ldr	r2, [pc, #432]	; (800a360 <getEstimatedAttitude+0x328>)
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	ed93 7a00 	vldr	s14, [r3]
 800a1b8:	4b6a      	ldr	r3, [pc, #424]	; (800a364 <getEstimatedAttitude+0x32c>)
 800a1ba:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1ca:	4a64      	ldr	r2, [pc, #400]	; (800a35c <getEstimatedAttitude+0x324>)
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1de:	4b61      	ldr	r3, [pc, #388]	; (800a364 <getEstimatedAttitude+0x32c>)
 800a1e0:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 800a1e4:	ee07 3a90 	vmov	s15, r3
 800a1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1f0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a1f4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a1fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a200:	4a57      	ldr	r2, [pc, #348]	; (800a360 <getEstimatedAttitude+0x328>)
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	3301      	adds	r3, #1
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	2b02      	cmp	r3, #2
 800a216:	ddc9      	ble.n	800a1ac <getEstimatedAttitude+0x174>
    }

    f.SMALL_ANGLE = (EstG.A[Z] > smallAngle);
 800a218:	4b51      	ldr	r3, [pc, #324]	; (800a360 <getEstimatedAttitude+0x328>)
 800a21a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a21e:	4b52      	ldr	r3, [pc, #328]	; (800a368 <getEstimatedAttitude+0x330>)
 800a220:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a22c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a234:	bfcc      	ite	gt
 800a236:	2301      	movgt	r3, #1
 800a238:	2300      	movle	r3, #0
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	461a      	mov	r2, r3
 800a23e:	4b4b      	ldr	r3, [pc, #300]	; (800a36c <getEstimatedAttitude+0x334>)
 800a240:	735a      	strb	r2, [r3, #13]

    // Attitude of the estimated vector
    anglerad[ROLL] = atan2f(EstG.V.Y, EstG.V.Z);
 800a242:	4b47      	ldr	r3, [pc, #284]	; (800a360 <getEstimatedAttitude+0x328>)
 800a244:	edd3 7a01 	vldr	s15, [r3, #4]
 800a248:	4b45      	ldr	r3, [pc, #276]	; (800a360 <getEstimatedAttitude+0x328>)
 800a24a:	ed93 7a02 	vldr	s14, [r3, #8]
 800a24e:	eef0 0a47 	vmov.f32	s1, s14
 800a252:	eeb0 0a67 	vmov.f32	s0, s15
 800a256:	f019 fb9d 	bl	8023994 <atan2f>
 800a25a:	eef0 7a40 	vmov.f32	s15, s0
 800a25e:	4b44      	ldr	r3, [pc, #272]	; (800a370 <getEstimatedAttitude+0x338>)
 800a260:	edc3 7a00 	vstr	s15, [r3]
    anglerad[PITCH] = atan2f(-EstG.V.X, sqrtf(EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z));
 800a264:	4b3e      	ldr	r3, [pc, #248]	; (800a360 <getEstimatedAttitude+0x328>)
 800a266:	edd3 7a00 	vldr	s15, [r3]
 800a26a:	eeb1 8a67 	vneg.f32	s16, s15
 800a26e:	4b3c      	ldr	r3, [pc, #240]	; (800a360 <getEstimatedAttitude+0x328>)
 800a270:	ed93 7a01 	vldr	s14, [r3, #4]
 800a274:	4b3a      	ldr	r3, [pc, #232]	; (800a360 <getEstimatedAttitude+0x328>)
 800a276:	edd3 7a01 	vldr	s15, [r3, #4]
 800a27a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a27e:	4b38      	ldr	r3, [pc, #224]	; (800a360 <getEstimatedAttitude+0x328>)
 800a280:	edd3 6a02 	vldr	s13, [r3, #8]
 800a284:	4b36      	ldr	r3, [pc, #216]	; (800a360 <getEstimatedAttitude+0x328>)
 800a286:	edd3 7a02 	vldr	s15, [r3, #8]
 800a28a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a28e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a292:	eeb0 0a67 	vmov.f32	s0, s15
 800a296:	f019 fbd7 	bl	8023a48 <sqrtf>
 800a29a:	eef0 7a40 	vmov.f32	s15, s0
 800a29e:	eef0 0a67 	vmov.f32	s1, s15
 800a2a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a2a6:	f019 fb75 	bl	8023994 <atan2f>
 800a2aa:	eef0 7a40 	vmov.f32	s15, s0
 800a2ae:	4b30      	ldr	r3, [pc, #192]	; (800a370 <getEstimatedAttitude+0x338>)
 800a2b0:	edc3 7a01 	vstr	s15, [r3, #4]
    angle[ROLL] = lrintf(anglerad[ROLL] * (1800.0f / M_PI));
 800a2b4:	4b2e      	ldr	r3, [pc, #184]	; (800a370 <getEstimatedAttitude+0x338>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7f6 f8f9 	bl	80004b0 <__aeabi_f2d>
 800a2be:	a31e      	add	r3, pc, #120	; (adr r3, 800a338 <getEstimatedAttitude+0x300>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	f7f6 f94c 	bl	8000560 <__aeabi_dmul>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f7f6 fc28 	bl	8000b24 <__aeabi_d2f>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	ee00 3a10 	vmov	s0, r3
 800a2da:	f019 faa9 	bl	8023830 <lrintf>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	b21a      	sxth	r2, r3
 800a2e2:	4b24      	ldr	r3, [pc, #144]	; (800a374 <getEstimatedAttitude+0x33c>)
 800a2e4:	801a      	strh	r2, [r3, #0]
    angle[PITCH] = lrintf(anglerad[PITCH] * (1800.0f / M_PI));
 800a2e6:	4b22      	ldr	r3, [pc, #136]	; (800a370 <getEstimatedAttitude+0x338>)
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7f6 f8e0 	bl	80004b0 <__aeabi_f2d>
 800a2f0:	a311      	add	r3, pc, #68	; (adr r3, 800a338 <getEstimatedAttitude+0x300>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	f7f6 f933 	bl	8000560 <__aeabi_dmul>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4610      	mov	r0, r2
 800a300:	4619      	mov	r1, r3
 800a302:	f7f6 fc0f 	bl	8000b24 <__aeabi_d2f>
 800a306:	4603      	mov	r3, r0
 800a308:	ee00 3a10 	vmov	s0, r3
 800a30c:	f019 fa90 	bl	8023830 <lrintf>
 800a310:	4603      	mov	r3, r0
 800a312:	b21a      	sxth	r2, r3
 800a314:	4b17      	ldr	r3, [pc, #92]	; (800a374 <getEstimatedAttitude+0x33c>)
 800a316:	805a      	strh	r2, [r3, #2]

    if (sensors(SENSOR_MAG)) {
 800a318:	2008      	movs	r0, #8
 800a31a:	f7fc fd91 	bl	8006e40 <sensors>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d069      	beq.n	800a3f8 <getEstimatedAttitude+0x3c0>
        rotateV(&EstM.V, deltaGyroAngle);
 800a324:	463b      	mov	r3, r7
 800a326:	4619      	mov	r1, r3
 800a328:	4813      	ldr	r0, [pc, #76]	; (800a378 <getEstimatedAttitude+0x340>)
 800a32a:	f7ff fb57 	bl	80099dc <rotateV>
        for (axis = 0; axis < 3; axis++)
 800a32e:	2300      	movs	r3, #0
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
 800a332:	e056      	b.n	800a3e2 <getEstimatedAttitude+0x3aa>
 800a334:	f3af 8000 	nop.w
 800a338:	907e593b 	.word	0x907e593b
 800a33c:	4081e7a9 	.word	0x4081e7a9
 800a340:	20001d6c 	.word	0x20001d6c
 800a344:	2000147c 	.word	0x2000147c
 800a348:	20000060 	.word	0x20000060
 800a34c:	200013d0 	.word	0x200013d0
 800a350:	20000db4 	.word	0x20000db4
 800a354:	20001480 	.word	0x20001480
 800a358:	200013d8 	.word	0x200013d8
 800a35c:	200013e0 	.word	0x200013e0
 800a360:	20001464 	.word	0x20001464
 800a364:	20000848 	.word	0x20000848
 800a368:	20001404 	.word	0x20001404
 800a36c:	200016b0 	.word	0x200016b0
 800a370:	2000145c 	.word	0x2000145c
 800a374:	20001458 	.word	0x20001458
 800a378:	2000148c 	.word	0x2000148c
            EstM.A[axis] = (EstM.A[axis] * (float)mcfg.gyro_cmpfm_factor + magADC[axis]) * INV_GYR_CMPFM_FACTOR;
 800a37c:	4a6a      	ldr	r2, [pc, #424]	; (800a528 <getEstimatedAttitude+0x4f0>)
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	ed93 7a00 	vldr	s14, [r3]
 800a388:	4b68      	ldr	r3, [pc, #416]	; (800a52c <getEstimatedAttitude+0x4f4>)
 800a38a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a38e:	ee07 3a90 	vmov	s15, r3
 800a392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a39a:	4a65      	ldr	r2, [pc, #404]	; (800a530 <getEstimatedAttitude+0x4f8>)
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3ae:	4b5f      	ldr	r3, [pc, #380]	; (800a52c <getEstimatedAttitude+0x4f4>)
 800a3b0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 800a3b4:	ee07 3a90 	vmov	s15, r3
 800a3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800a3c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a3c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d0:	4a55      	ldr	r2, [pc, #340]	; (800a528 <getEstimatedAttitude+0x4f0>)
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	edc3 7a00 	vstr	s15, [r3]
        for (axis = 0; axis < 3; axis++)
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	3301      	adds	r3, #1
 800a3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	ddc9      	ble.n	800a37c <getEstimatedAttitude+0x344>
        heading = calculateHeading(&EstM);
 800a3e8:	484f      	ldr	r0, [pc, #316]	; (800a528 <getEstimatedAttitude+0x4f0>)
 800a3ea:	f7ff fd71 	bl	8009ed0 <calculateHeading>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	4b50      	ldr	r3, [pc, #320]	; (800a534 <getEstimatedAttitude+0x4fc>)
 800a3f4:	801a      	strh	r2, [r3, #0]
 800a3f6:	e00f      	b.n	800a418 <getEstimatedAttitude+0x3e0>
    } else {
        rotateV(&EstN.V, deltaGyroAngle);
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	484e      	ldr	r0, [pc, #312]	; (800a538 <getEstimatedAttitude+0x500>)
 800a3fe:	f7ff faed 	bl	80099dc <rotateV>
        normalizeV(&EstN.V, &EstN.V);
 800a402:	494d      	ldr	r1, [pc, #308]	; (800a538 <getEstimatedAttitude+0x500>)
 800a404:	484c      	ldr	r0, [pc, #304]	; (800a538 <getEstimatedAttitude+0x500>)
 800a406:	f7ff fa99 	bl	800993c <normalizeV>
        heading = calculateHeading(&EstN);
 800a40a:	484b      	ldr	r0, [pc, #300]	; (800a538 <getEstimatedAttitude+0x500>)
 800a40c:	f7ff fd60 	bl	8009ed0 <calculateHeading>
 800a410:	4603      	mov	r3, r0
 800a412:	461a      	mov	r2, r3
 800a414:	4b47      	ldr	r3, [pc, #284]	; (800a534 <getEstimatedAttitude+0x4fc>)
 800a416:	801a      	strh	r2, [r3, #0]
    }

    acc_calc(deltaT); // rotate acc vector into earth frame
 800a418:	6978      	ldr	r0, [r7, #20]
 800a41a:	f7ff fc11 	bl	8009c40 <acc_calc>

    if (cfg.throttle_correction_value) {
 800a41e:	4b47      	ldr	r3, [pc, #284]	; (800a53c <getEstimatedAttitude+0x504>)
 800a420:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a424:	2b00      	cmp	r3, #0
 800a426:	d072      	beq.n	800a50e <getEstimatedAttitude+0x4d6>

        float cosZ = EstG.V.Z / sqrtf(EstG.V.X * EstG.V.X + EstG.V.Y * EstG.V.Y + EstG.V.Z * EstG.V.Z);
 800a428:	4b45      	ldr	r3, [pc, #276]	; (800a540 <getEstimatedAttitude+0x508>)
 800a42a:	ed93 8a02 	vldr	s16, [r3, #8]
 800a42e:	4b44      	ldr	r3, [pc, #272]	; (800a540 <getEstimatedAttitude+0x508>)
 800a430:	ed93 7a00 	vldr	s14, [r3]
 800a434:	4b42      	ldr	r3, [pc, #264]	; (800a540 <getEstimatedAttitude+0x508>)
 800a436:	edd3 7a00 	vldr	s15, [r3]
 800a43a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a43e:	4b40      	ldr	r3, [pc, #256]	; (800a540 <getEstimatedAttitude+0x508>)
 800a440:	edd3 6a01 	vldr	s13, [r3, #4]
 800a444:	4b3e      	ldr	r3, [pc, #248]	; (800a540 <getEstimatedAttitude+0x508>)
 800a446:	edd3 7a01 	vldr	s15, [r3, #4]
 800a44a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a44e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a452:	4b3b      	ldr	r3, [pc, #236]	; (800a540 <getEstimatedAttitude+0x508>)
 800a454:	edd3 6a02 	vldr	s13, [r3, #8]
 800a458:	4b39      	ldr	r3, [pc, #228]	; (800a540 <getEstimatedAttitude+0x508>)
 800a45a:	edd3 7a02 	vldr	s15, [r3, #8]
 800a45e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a462:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a466:	eeb0 0a67 	vmov.f32	s0, s15
 800a46a:	f019 faed 	bl	8023a48 <sqrtf>
 800a46e:	eeb0 7a40 	vmov.f32	s14, s0
 800a472:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a476:	edc7 7a03 	vstr	s15, [r7, #12]

        if (cosZ <= 0.015f) { // we are inverted, vertical or with a small angle < 0.86 deg
 800a47a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a47e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a544 <getEstimatedAttitude+0x50c>
 800a482:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a48a:	d803      	bhi.n	800a494 <getEstimatedAttitude+0x45c>
            throttleAngleCorrection = 0;
 800a48c:	4b2e      	ldr	r3, [pc, #184]	; (800a548 <getEstimatedAttitude+0x510>)
 800a48e:	2200      	movs	r2, #0
 800a490:	801a      	strh	r2, [r3, #0]
            if (deg > 900)
                deg = 900;
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
        }
    }
}
 800a492:	e03c      	b.n	800a50e <getEstimatedAttitude+0x4d6>
            int deg = lrintf(acosf(cosZ) * throttleAngleScale);
 800a494:	ed97 0a03 	vldr	s0, [r7, #12]
 800a498:	f019 fa50 	bl	802393c <acosf>
 800a49c:	eeb0 7a40 	vmov.f32	s14, s0
 800a4a0:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <getEstimatedAttitude+0x514>)
 800a4a2:	edd3 7a00 	vldr	s15, [r3]
 800a4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a4ae:	f019 f9bf 	bl	8023830 <lrintf>
 800a4b2:	61f8      	str	r0, [r7, #28]
            if (deg > 900)
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800a4ba:	dd02      	ble.n	800a4c2 <getEstimatedAttitude+0x48a>
                deg = 900;
 800a4bc:	f44f 7361 	mov.w	r3, #900	; 0x384
 800a4c0:	61fb      	str	r3, [r7, #28]
            throttleAngleCorrection = lrintf(cfg.throttle_correction_value * sinf(deg / (900.0f * M_PI / 2.0f)));
 800a4c2:	4b1e      	ldr	r3, [pc, #120]	; (800a53c <getEstimatedAttitude+0x504>)
 800a4c4:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800a4c8:	ee07 3a90 	vmov	s15, r3
 800a4cc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a4d0:	69f8      	ldr	r0, [r7, #28]
 800a4d2:	f7f5 ffdb 	bl	800048c <__aeabi_i2d>
 800a4d6:	a312      	add	r3, pc, #72	; (adr r3, 800a520 <getEstimatedAttitude+0x4e8>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f7f6 f96a 	bl	80007b4 <__aeabi_ddiv>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	f7f6 fb1c 	bl	8000b24 <__aeabi_d2f>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	ee00 3a10 	vmov	s0, r3
 800a4f2:	f019 f9dd 	bl	80238b0 <sinf>
 800a4f6:	eef0 7a40 	vmov.f32	s15, s0
 800a4fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 800a4fe:	eeb0 0a67 	vmov.f32	s0, s15
 800a502:	f019 f995 	bl	8023830 <lrintf>
 800a506:	4603      	mov	r3, r0
 800a508:	b21a      	sxth	r2, r3
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <getEstimatedAttitude+0x510>)
 800a50c:	801a      	strh	r2, [r3, #0]
}
 800a50e:	bf00      	nop
 800a510:	3728      	adds	r7, #40	; 0x28
 800a512:	46bd      	mov	sp, r7
 800a514:	ecbd 8b02 	vpop	{d8}
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	f3af 8000 	nop.w
 800a520:	e50feba2 	.word	0xe50feba2
 800a524:	409616dd 	.word	0x409616dd
 800a528:	2000148c 	.word	0x2000148c
 800a52c:	20000848 	.word	0x20000848
 800a530:	200013e8 	.word	0x200013e8
 800a534:	200019e6 	.word	0x200019e6
 800a538:	20000034 	.word	0x20000034
 800a53c:	20000db4 	.word	0x20000db4
 800a540:	20001464 	.word	0x20001464
 800a544:	3c75c28f 	.word	0x3c75c28f
 800a548:	20001438 	.word	0x20001438
 800a54c:	20001440 	.word	0x20001440

0800a550 <taskGetEstimatedAltitude>:

#ifdef BARO

uint16_t taskGetEstimatedAltitude(PifTask *p_task)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08e      	sub	sp, #56	; 0x38
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
    static uint32_t previousT;
    uint32_t currentT = (*pif_act_timer1us)();
 800a558:	4b7e      	ldr	r3, [pc, #504]	; (800a754 <taskGetEstimatedAltitude+0x204>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4798      	blx	r3
 800a55e:	6338      	str	r0, [r7, #48]	; 0x30
    static float vel = 0.0f;
    static float accAlt = 0.0f;
    static int32_t lastBaroAlt;
    static int32_t baroGroundAltitude = 0;
    static int32_t baroGroundPressure = 0;
    int16_t tiltAngle = max(abs(angle[ROLL]), abs(angle[PITCH]));
 800a560:	4b7d      	ldr	r3, [pc, #500]	; (800a758 <taskGetEstimatedAltitude+0x208>)
 800a562:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfb8      	it	lt
 800a56a:	425b      	neglt	r3, r3
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	4b7a      	ldr	r3, [pc, #488]	; (800a758 <taskGetEstimatedAltitude+0x208>)
 800a570:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a574:	2b00      	cmp	r3, #0
 800a576:	bfb8      	it	lt
 800a578:	425b      	neglt	r3, r3
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	4293      	cmp	r3, r2
 800a57e:	bf38      	it	cc
 800a580:	4613      	movcc	r3, r2
 800a582:	b29b      	uxth	r3, r3
 800a584:	85fb      	strh	r3, [r7, #46]	; 0x2e

    (void)p_task;

    baroState = 0;
 800a586:	4b75      	ldr	r3, [pc, #468]	; (800a75c <taskGetEstimatedAltitude+0x20c>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

    dTime = currentT - previousT;
 800a58c:	4b74      	ldr	r3, [pc, #464]	; (800a760 <taskGetEstimatedAltitude+0x210>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	62bb      	str	r3, [r7, #40]	; 0x28
    previousT = currentT;
 800a596:	4a72      	ldr	r2, [pc, #456]	; (800a760 <taskGetEstimatedAltitude+0x210>)
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	6013      	str	r3, [r2, #0]

    if (calibratingB > 0) {
 800a59c:	4b71      	ldr	r3, [pc, #452]	; (800a764 <taskGetEstimatedAltitude+0x214>)
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d04c      	beq.n	800a63e <taskGetEstimatedAltitude+0xee>
        baroGroundPressure -= baroGroundPressure / 8;
 800a5a4:	4b70      	ldr	r3, [pc, #448]	; (800a768 <taskGetEstimatedAltitude+0x218>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da00      	bge.n	800a5ae <taskGetEstimatedAltitude+0x5e>
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	10db      	asrs	r3, r3, #3
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4b6c      	ldr	r3, [pc, #432]	; (800a768 <taskGetEstimatedAltitude+0x218>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4a6b      	ldr	r2, [pc, #428]	; (800a768 <taskGetEstimatedAltitude+0x218>)
 800a5bc:	6013      	str	r3, [r2, #0]
        baroGroundPressure += baroPressureSum / (cfg.baro_tab_size - 1);
 800a5be:	4b6b      	ldr	r3, [pc, #428]	; (800a76c <taskGetEstimatedAltitude+0x21c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a6b      	ldr	r2, [pc, #428]	; (800a770 <taskGetEstimatedAltitude+0x220>)
 800a5c4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a5c8:	3a01      	subs	r2, #1
 800a5ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ce:	4a66      	ldr	r2, [pc, #408]	; (800a768 <taskGetEstimatedAltitude+0x218>)
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4b64      	ldr	r3, [pc, #400]	; (800a768 <taskGetEstimatedAltitude+0x218>)
 800a5d8:	601a      	str	r2, [r3, #0]
        baroGroundAltitude = (1.0f - powf((baroGroundPressure / 8) / 101325.0f, 0.190295f)) * 4433000.0f;
 800a5da:	4b63      	ldr	r3, [pc, #396]	; (800a768 <taskGetEstimatedAltitude+0x218>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	da00      	bge.n	800a5e4 <taskGetEstimatedAltitude+0x94>
 800a5e2:	3307      	adds	r3, #7
 800a5e4:	10db      	asrs	r3, r3, #3
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ee:	eddf 6a61 	vldr	s13, [pc, #388]	; 800a774 <taskGetEstimatedAltitude+0x224>
 800a5f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a5f6:	eddf 0a60 	vldr	s1, [pc, #384]	; 800a778 <taskGetEstimatedAltitude+0x228>
 800a5fa:	eeb0 0a47 	vmov.f32	s0, s14
 800a5fe:	f019 f9cb 	bl	8023998 <powf>
 800a602:	eef0 7a40 	vmov.f32	s15, s0
 800a606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a60a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a60e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800a77c <taskGetEstimatedAltitude+0x22c>
 800a612:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a61a:	ee17 2a90 	vmov	r2, s15
 800a61e:	4b58      	ldr	r3, [pc, #352]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a620:	601a      	str	r2, [r3, #0]

        vel = 0;
 800a622:	4b58      	ldr	r3, [pc, #352]	; (800a784 <taskGetEstimatedAltitude+0x234>)
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
        accAlt = 0;
 800a62a:	4b57      	ldr	r3, [pc, #348]	; (800a788 <taskGetEstimatedAltitude+0x238>)
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
        calibratingB--;
 800a632:	4b4c      	ldr	r3, [pc, #304]	; (800a764 <taskGetEstimatedAltitude+0x214>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	4b4a      	ldr	r3, [pc, #296]	; (800a764 <taskGetEstimatedAltitude+0x214>)
 800a63c:	801a      	strh	r2, [r3, #0]
#endif
    }

    // calculates height from ground via baro readings
    // see: https://github.com/diydrones/ardupilot/blob/master/libraries/AP_Baro/AP_Baro.cpp#L140
    BaroAlt_tmp = lrintf((1.0f - powf((float)(baroPressureSum / (cfg.baro_tab_size - 1)) / 101325.0f, 0.190295f)) * 4433000.0f); // in cm
 800a63e:	4b4b      	ldr	r3, [pc, #300]	; (800a76c <taskGetEstimatedAltitude+0x21c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a4b      	ldr	r2, [pc, #300]	; (800a770 <taskGetEstimatedAltitude+0x220>)
 800a644:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a648:	3a01      	subs	r2, #1
 800a64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a656:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a774 <taskGetEstimatedAltitude+0x224>
 800a65a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a65e:	eddf 0a46 	vldr	s1, [pc, #280]	; 800a778 <taskGetEstimatedAltitude+0x228>
 800a662:	eeb0 0a47 	vmov.f32	s0, s14
 800a666:	f019 f997 	bl	8023998 <powf>
 800a66a:	eef0 7a40 	vmov.f32	s15, s0
 800a66e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a672:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a676:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a77c <taskGetEstimatedAltitude+0x22c>
 800a67a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a67e:	eeb0 0a67 	vmov.f32	s0, s15
 800a682:	f019 f8d5 	bl	8023830 <lrintf>
 800a686:	6278      	str	r0, [r7, #36]	; 0x24
    BaroAlt_tmp -= baroGroundAltitude;
 800a688:	4b3d      	ldr	r3, [pc, #244]	; (800a780 <taskGetEstimatedAltitude+0x230>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	627b      	str	r3, [r7, #36]	; 0x24
    BaroAlt = lrintf((float)BaroAlt * cfg.baro_noise_lpf + (float)BaroAlt_tmp * (1.0f - cfg.baro_noise_lpf)); // additional LPF to reduce baro noise
 800a692:	4b3e      	ldr	r3, [pc, #248]	; (800a78c <taskGetEstimatedAltitude+0x23c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a69e:	4b34      	ldr	r3, [pc, #208]	; (800a770 <taskGetEstimatedAltitude+0x220>)
 800a6a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a6a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a6b2:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <taskGetEstimatedAltitude+0x220>)
 800a6b4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800a6b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a6bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a6c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a6cc:	f019 f8b0 	bl	8023830 <lrintf>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	4a2e      	ldr	r2, [pc, #184]	; (800a78c <taskGetEstimatedAltitude+0x23c>)
 800a6d4:	6013      	str	r3, [r2, #0]

    // calculate sonar altitude only if the sonar is facing downwards(<25deg)
    if (tiltAngle > 250 || sonarDistance == -1)
 800a6d6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a6da:	2bfa      	cmp	r3, #250	; 0xfa
 800a6dc:	dc04      	bgt.n	800a6e8 <taskGetEstimatedAltitude+0x198>
 800a6de:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <taskGetEstimatedAltitude+0x240>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d104      	bne.n	800a6f2 <taskGetEstimatedAltitude+0x1a2>
        sonarAlt = -1;
 800a6e8:	4b2a      	ldr	r3, [pc, #168]	; (800a794 <taskGetEstimatedAltitude+0x244>)
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ee:	601a      	str	r2, [r3, #0]
 800a6f0:	e01b      	b.n	800a72a <taskGetEstimatedAltitude+0x1da>
    else
        sonarAlt = sonarDistance * (900.0f - tiltAngle) / 900.0f;
 800a6f2:	4b27      	ldr	r3, [pc, #156]	; (800a790 <taskGetEstimatedAltitude+0x240>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6fe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a70a:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a798 <taskGetEstimatedAltitude+0x248>
 800a70e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a712:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a716:	eddf 6a20 	vldr	s13, [pc, #128]	; 800a798 <taskGetEstimatedAltitude+0x248>
 800a71a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a71e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a722:	ee17 2a90 	vmov	r2, s15
 800a726:	4b1b      	ldr	r3, [pc, #108]	; (800a794 <taskGetEstimatedAltitude+0x244>)
 800a728:	601a      	str	r2, [r3, #0]

    // do sonarAlt and baroAlt fusion
    if (sonarAlt > 0 && sonarAlt < 200) {
 800a72a:	4b1a      	ldr	r3, [pc, #104]	; (800a794 <taskGetEstimatedAltitude+0x244>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd36      	ble.n	800a7a0 <taskGetEstimatedAltitude+0x250>
 800a732:	4b18      	ldr	r3, [pc, #96]	; (800a794 <taskGetEstimatedAltitude+0x244>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2bc7      	cmp	r3, #199	; 0xc7
 800a738:	dc32      	bgt.n	800a7a0 <taskGetEstimatedAltitude+0x250>
        baroAlt_offset = BaroAlt - sonarAlt;
 800a73a:	4b14      	ldr	r3, [pc, #80]	; (800a78c <taskGetEstimatedAltitude+0x23c>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	4b15      	ldr	r3, [pc, #84]	; (800a794 <taskGetEstimatedAltitude+0x244>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	4a15      	ldr	r2, [pc, #84]	; (800a79c <taskGetEstimatedAltitude+0x24c>)
 800a746:	6013      	str	r3, [r2, #0]
        BaroAlt = sonarAlt;
 800a748:	4b12      	ldr	r3, [pc, #72]	; (800a794 <taskGetEstimatedAltitude+0x244>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a0f      	ldr	r2, [pc, #60]	; (800a78c <taskGetEstimatedAltitude+0x23c>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	e062      	b.n	800a818 <taskGetEstimatedAltitude+0x2c8>
 800a752:	bf00      	nop
 800a754:	20001d6c 	.word	0x20001d6c
 800a758:	20001458 	.word	0x20001458
 800a75c:	20001410 	.word	0x20001410
 800a760:	20001498 	.word	0x20001498
 800a764:	200019e2 	.word	0x200019e2
 800a768:	2000149c 	.word	0x2000149c
 800a76c:	20001408 	.word	0x20001408
 800a770:	20000db4 	.word	0x20000db4
 800a774:	47c5e680 	.word	0x47c5e680
 800a778:	3e42dcb1 	.word	0x3e42dcb1
 800a77c:	4a8748d0 	.word	0x4a8748d0
 800a780:	200014a0 	.word	0x200014a0
 800a784:	200014a4 	.word	0x200014a4
 800a788:	200014a8 	.word	0x200014a8
 800a78c:	2000140c 	.word	0x2000140c
 800a790:	2000002c 	.word	0x2000002c
 800a794:	20000030 	.word	0x20000030
 800a798:	44610000 	.word	0x44610000
 800a79c:	20001418 	.word	0x20001418
    } else {
        BaroAlt -= baroAlt_offset;
 800a7a0:	4ba0      	ldr	r3, [pc, #640]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	4ba0      	ldr	r3, [pc, #640]	; (800aa28 <taskGetEstimatedAltitude+0x4d8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	4a9e      	ldr	r2, [pc, #632]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a7ac:	6013      	str	r3, [r2, #0]
        if (sonarAlt > 0) {
 800a7ae:	4b9f      	ldr	r3, [pc, #636]	; (800aa2c <taskGetEstimatedAltitude+0x4dc>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dd30      	ble.n	800a818 <taskGetEstimatedAltitude+0x2c8>
            sonarTransition = (300 - sonarAlt) / 100.0f;
 800a7b6:	4b9d      	ldr	r3, [pc, #628]	; (800aa2c <taskGetEstimatedAltitude+0x4dc>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7c6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800aa30 <taskGetEstimatedAltitude+0x4e0>
 800a7ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7ce:	4b99      	ldr	r3, [pc, #612]	; (800aa34 <taskGetEstimatedAltitude+0x4e4>)
 800a7d0:	edc3 7a00 	vstr	s15, [r3]
            BaroAlt = sonarAlt * sonarTransition + BaroAlt * (1.0f - sonarTransition);
 800a7d4:	4b95      	ldr	r3, [pc, #596]	; (800aa2c <taskGetEstimatedAltitude+0x4dc>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	ee07 3a90 	vmov	s15, r3
 800a7dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7e0:	4b94      	ldr	r3, [pc, #592]	; (800aa34 <taskGetEstimatedAltitude+0x4e4>)
 800a7e2:	edd3 7a00 	vldr	s15, [r3]
 800a7e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7ea:	4b8e      	ldr	r3, [pc, #568]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a7f6:	4b8f      	ldr	r3, [pc, #572]	; (800aa34 <taskGetEstimatedAltitude+0x4e4>)
 800a7f8:	edd3 7a00 	vldr	s15, [r3]
 800a7fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a800:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a80c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a810:	ee17 2a90 	vmov	r2, s15
 800a814:	4b83      	ldr	r3, [pc, #524]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a816:	601a      	str	r2, [r3, #0]
        }
    }

    dt = accTimeSum * 1e-6f; // delta acc reading time in seconds
 800a818:	4b87      	ldr	r3, [pc, #540]	; (800aa38 <taskGetEstimatedAltitude+0x4e8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	ee07 3a90 	vmov	s15, r3
 800a820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a824:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800aa3c <taskGetEstimatedAltitude+0x4ec>
 800a828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a82c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integrator - velocity, cm/sec
    accZ_tmp = (float)accSum[2] / (float)accSumCount;
 800a830:	4b83      	ldr	r3, [pc, #524]	; (800aa40 <taskGetEstimatedAltitude+0x4f0>)
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	ee07 3a90 	vmov	s15, r3
 800a838:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a83c:	4b81      	ldr	r3, [pc, #516]	; (800aa44 <taskGetEstimatedAltitude+0x4f4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	ee07 3a90 	vmov	s15, r3
 800a844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a84c:	edc7 7a07 	vstr	s15, [r7, #28]
    vel_acc = accZ_tmp * accVelScale * (float)accTimeSum;
 800a850:	4b7d      	ldr	r3, [pc, #500]	; (800aa48 <taskGetEstimatedAltitude+0x4f8>)
 800a852:	ed93 7a00 	vldr	s14, [r3]
 800a856:	edd7 7a07 	vldr	s15, [r7, #28]
 800a85a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a85e:	4b76      	ldr	r3, [pc, #472]	; (800aa38 <taskGetEstimatedAltitude+0x4e8>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrator - Altitude in cm
    accAlt += (vel_acc * 0.5f) * dt + vel * dt;                                         // integrate velocity to get distance (x= a/2 * t^2)
 800a872:	edd7 7a06 	vldr	s15, [r7, #24]
 800a876:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a87a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a87e:	edd7 7a08 	vldr	s15, [r7, #32]
 800a882:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a886:	4b71      	ldr	r3, [pc, #452]	; (800aa4c <taskGetEstimatedAltitude+0x4fc>)
 800a888:	edd3 6a00 	vldr	s13, [r3]
 800a88c:	edd7 7a08 	vldr	s15, [r7, #32]
 800a890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a894:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a898:	4b6d      	ldr	r3, [pc, #436]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a89a:	edd3 7a00 	vldr	s15, [r3]
 800a89e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8a2:	4b6b      	ldr	r3, [pc, #428]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a8a4:	edc3 7a00 	vstr	s15, [r3]
    accAlt = accAlt * cfg.baro_cf_alt + (float)BaroAlt * (1.0f - cfg.baro_cf_alt);      // complementary filter for altitude estimation (baro & acc)
 800a8a8:	4b6a      	ldr	r3, [pc, #424]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800a8aa:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a8ae:	4b68      	ldr	r3, [pc, #416]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a8b0:	edd3 7a00 	vldr	s15, [r3]
 800a8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8b8:	4b5a      	ldr	r3, [pc, #360]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	ee07 3a90 	vmov	s15, r3
 800a8c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8c4:	4b63      	ldr	r3, [pc, #396]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800a8c6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800a8ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a8d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8da:	4b5d      	ldr	r3, [pc, #372]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a8dc:	edc3 7a00 	vstr	s15, [r3]

    // when the sonar is in his best range
    if (sonarAlt > 0 && sonarAlt < 200)
 800a8e0:	4b52      	ldr	r3, [pc, #328]	; (800aa2c <taskGetEstimatedAltitude+0x4dc>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dd08      	ble.n	800a8fa <taskGetEstimatedAltitude+0x3aa>
 800a8e8:	4b50      	ldr	r3, [pc, #320]	; (800aa2c <taskGetEstimatedAltitude+0x4dc>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2bc7      	cmp	r3, #199	; 0xc7
 800a8ee:	dc04      	bgt.n	800a8fa <taskGetEstimatedAltitude+0x3aa>
        EstAlt = BaroAlt;
 800a8f0:	4b4c      	ldr	r3, [pc, #304]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a58      	ldr	r2, [pc, #352]	; (800aa58 <taskGetEstimatedAltitude+0x508>)
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	e008      	b.n	800a90c <taskGetEstimatedAltitude+0x3bc>
    else
        EstAlt = accAlt;
 800a8fa:	4b55      	ldr	r3, [pc, #340]	; (800aa50 <taskGetEstimatedAltitude+0x500>)
 800a8fc:	edd3 7a00 	vldr	s15, [r3]
 800a900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a904:	ee17 2a90 	vmov	r2, s15
 800a908:	4b53      	ldr	r3, [pc, #332]	; (800aa58 <taskGetEstimatedAltitude+0x508>)
 800a90a:	601a      	str	r2, [r3, #0]

    vel += vel_acc;
 800a90c:	4b4f      	ldr	r3, [pc, #316]	; (800aa4c <taskGetEstimatedAltitude+0x4fc>)
 800a90e:	ed93 7a00 	vldr	s14, [r3]
 800a912:	edd7 7a06 	vldr	s15, [r7, #24]
 800a916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a91a:	4b4c      	ldr	r3, [pc, #304]	; (800aa4c <taskGetEstimatedAltitude+0x4fc>)
 800a91c:	edc3 7a00 	vstr	s15, [r3]
    debug[0] = accSum[2] / accSumCount; // acceleration
    debug[1] = vel;                     // velocity
    debug[2] = accAlt;                  // height
#endif

    accSum_reset();
 800a920:	f7ff fab8 	bl	8009e94 <accSum_reset>

    baroVel = (BaroAlt - lastBaroAlt) * 1000000.0f / dTime;
 800a924:	4b3f      	ldr	r3, [pc, #252]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	4b4c      	ldr	r3, [pc, #304]	; (800aa5c <taskGetEstimatedAltitude+0x50c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a936:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800aa60 <taskGetEstimatedAltitude+0x510>
 800a93a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	ee07 3a90 	vmov	s15, r3
 800a944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a94c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a950:	ee17 3a90 	vmov	r3, s15
 800a954:	617b      	str	r3, [r7, #20]
    lastBaroAlt = BaroAlt;
 800a956:	4b33      	ldr	r3, [pc, #204]	; (800aa24 <taskGetEstimatedAltitude+0x4d4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a40      	ldr	r2, [pc, #256]	; (800aa5c <taskGetEstimatedAltitude+0x50c>)
 800a95c:	6013      	str	r3, [r2, #0]

    baroVel = constrain(baroVel, -1500, 1500);    // constrain baro velocity +/- 1500cm/s
 800a95e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a962:	4940      	ldr	r1, [pc, #256]	; (800aa64 <taskGetEstimatedAltitude+0x514>)
 800a964:	6978      	ldr	r0, [r7, #20]
 800a966:	f7f9 f94f 	bl	8003c08 <constrain>
 800a96a:	6178      	str	r0, [r7, #20]
    baroVel = applyDeadband(baroVel, 10);         // to reduce noise near zero
 800a96c:	210a      	movs	r1, #10
 800a96e:	6978      	ldr	r0, [r7, #20]
 800a970:	f7ff f93e 	bl	8009bf0 <applyDeadband>
 800a974:	6178      	str	r0, [r7, #20]

    // apply Complimentary Filter to keep the calculated velocity based on baro velocity (i.e. near real velocity).
    // By using CF it's possible to correct the drift of integrated accZ (velocity) without loosing the phase, i.e without delay
    vel = vel * cfg.baro_cf_vel + baroVel * (1 - cfg.baro_cf_vel);
 800a976:	4b37      	ldr	r3, [pc, #220]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800a978:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800a97c:	4b33      	ldr	r3, [pc, #204]	; (800aa4c <taskGetEstimatedAltitude+0x4fc>)
 800a97e:	edd3 7a00 	vldr	s15, [r3]
 800a982:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a990:	4b30      	ldr	r3, [pc, #192]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800a992:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800a996:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a99a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a99e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9a6:	4b29      	ldr	r3, [pc, #164]	; (800aa4c <taskGetEstimatedAltitude+0x4fc>)
 800a9a8:	edc3 7a00 	vstr	s15, [r3]
    vel_tmp = lrintf(vel);
 800a9ac:	4b27      	ldr	r3, [pc, #156]	; (800aa4c <taskGetEstimatedAltitude+0x4fc>)
 800a9ae:	edd3 7a00 	vldr	s15, [r3]
 800a9b2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b6:	f018 ff3b 	bl	8023830 <lrintf>
 800a9ba:	6138      	str	r0, [r7, #16]

    // set vario
    vario = applyDeadband(vel_tmp, 5);
 800a9bc:	2105      	movs	r1, #5
 800a9be:	6938      	ldr	r0, [r7, #16]
 800a9c0:	f7ff f916 	bl	8009bf0 <applyDeadband>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	4a28      	ldr	r2, [pc, #160]	; (800aa68 <taskGetEstimatedAltitude+0x518>)
 800a9c8:	6013      	str	r3, [r2, #0]

    if (tiltAngle < 800) { // only calculate pid if the copters thrust is facing downwards(<80deg)
 800a9ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800a9ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a9d2:	f280 80b2 	bge.w	800ab3a <taskGetEstimatedAltitude+0x5ea>
        // Altitude P-Controller
        if (!velocityControl) {
 800a9d6:	4b25      	ldr	r3, [pc, #148]	; (800aa6c <taskGetEstimatedAltitude+0x51c>)
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d14e      	bne.n	800aa7c <taskGetEstimatedAltitude+0x52c>
            error = constrain(AltHold - EstAlt, -500, 500);
 800a9de:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <taskGetEstimatedAltitude+0x520>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4b1d      	ldr	r3, [pc, #116]	; (800aa58 <taskGetEstimatedAltitude+0x508>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a9ec:	4921      	ldr	r1, [pc, #132]	; (800aa74 <taskGetEstimatedAltitude+0x524>)
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7f9 f90a 	bl	8003c08 <constrain>
 800a9f4:	60f8      	str	r0, [r7, #12]
            error = applyDeadband(error, 10);       // remove small P parametr to reduce noise near zero position
 800a9f6:	210a      	movs	r1, #10
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff f8f9 	bl	8009bf0 <applyDeadband>
 800a9fe:	60f8      	str	r0, [r7, #12]
            setVel = constrain((cfg.P8[PIDALT] * error / 128), -300, +300); // limit velocity to +/- 3 m/s
 800aa00:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <taskGetEstimatedAltitude+0x504>)
 800aa02:	791b      	ldrb	r3, [r3, #4]
 800aa04:	461a      	mov	r2, r3
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	fb02 f303 	mul.w	r3, r2, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da00      	bge.n	800aa12 <taskGetEstimatedAltitude+0x4c2>
 800aa10:	337f      	adds	r3, #127	; 0x7f
 800aa12:	11db      	asrs	r3, r3, #7
 800aa14:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa18:	4917      	ldr	r1, [pc, #92]	; (800aa78 <taskGetEstimatedAltitude+0x528>)
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f9 f8f4 	bl	8003c08 <constrain>
 800aa20:	6378      	str	r0, [r7, #52]	; 0x34
 800aa22:	e02e      	b.n	800aa82 <taskGetEstimatedAltitude+0x532>
 800aa24:	2000140c 	.word	0x2000140c
 800aa28:	20001418 	.word	0x20001418
 800aa2c:	20000030 	.word	0x20000030
 800aa30:	42c80000 	.word	0x42c80000
 800aa34:	20001414 	.word	0x20001414
 800aa38:	200013fc 	.word	0x200013fc
 800aa3c:	358637bd 	.word	0x358637bd
 800aa40:	200013f0 	.word	0x200013f0
 800aa44:	20001400 	.word	0x20001400
 800aa48:	2000143c 	.word	0x2000143c
 800aa4c:	200014a4 	.word	0x200014a4
 800aa50:	200014a8 	.word	0x200014a8
 800aa54:	20000db4 	.word	0x20000db4
 800aa58:	2000141c 	.word	0x2000141c
 800aa5c:	200014ac 	.word	0x200014ac
 800aa60:	49742400 	.word	0x49742400
 800aa64:	fffffa24 	.word	0xfffffa24
 800aa68:	20001434 	.word	0x20001434
 800aa6c:	2000142c 	.word	0x2000142c
 800aa70:	20001424 	.word	0x20001424
 800aa74:	fffffe0c 	.word	0xfffffe0c
 800aa78:	fffffed4 	.word	0xfffffed4
        } else {
            setVel = setVelocity;
 800aa7c:	4b34      	ldr	r3, [pc, #208]	; (800ab50 <taskGetEstimatedAltitude+0x600>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // Velocity PID-Controller
        // P
        error = setVel - vel_tmp;
 800aa82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	60fb      	str	r3, [r7, #12]
        BaroPID = constrain((cfg.P8[PIDVEL] * error / 32), -300, +300);
 800aa8a:	4b32      	ldr	r3, [pc, #200]	; (800ab54 <taskGetEstimatedAltitude+0x604>)
 800aa8c:	7a9b      	ldrb	r3, [r3, #10]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	da00      	bge.n	800aa9c <taskGetEstimatedAltitude+0x54c>
 800aa9a:	331f      	adds	r3, #31
 800aa9c:	115b      	asrs	r3, r3, #5
 800aa9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aaa2:	492d      	ldr	r1, [pc, #180]	; (800ab58 <taskGetEstimatedAltitude+0x608>)
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7f9 f8af 	bl	8003c08 <constrain>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	4a2b      	ldr	r2, [pc, #172]	; (800ab5c <taskGetEstimatedAltitude+0x60c>)
 800aaae:	6013      	str	r3, [r2, #0]

        // I
        errorVelocityI += (cfg.I8[PIDVEL] * error);
 800aab0:	4b28      	ldr	r3, [pc, #160]	; (800ab54 <taskGetEstimatedAltitude+0x604>)
 800aab2:	7d1b      	ldrb	r3, [r3, #20]
 800aab4:	461a      	mov	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	fb03 f202 	mul.w	r2, r3, r2
 800aabc:	4b28      	ldr	r3, [pc, #160]	; (800ab60 <taskGetEstimatedAltitude+0x610>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4413      	add	r3, r2
 800aac2:	4a27      	ldr	r2, [pc, #156]	; (800ab60 <taskGetEstimatedAltitude+0x610>)
 800aac4:	6013      	str	r3, [r2, #0]
        errorVelocityI = constrain(errorVelocityI, -(8196 * 200), (8196 * 200));
 800aac6:	4b26      	ldr	r3, [pc, #152]	; (800ab60 <taskGetEstimatedAltitude+0x610>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a26      	ldr	r2, [pc, #152]	; (800ab64 <taskGetEstimatedAltitude+0x614>)
 800aacc:	4926      	ldr	r1, [pc, #152]	; (800ab68 <taskGetEstimatedAltitude+0x618>)
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f9 f89a 	bl	8003c08 <constrain>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4a22      	ldr	r2, [pc, #136]	; (800ab60 <taskGetEstimatedAltitude+0x610>)
 800aad8:	6013      	str	r3, [r2, #0]
        BaroPID += errorVelocityI / 8196;     // I in the range of +/-200
 800aada:	4b21      	ldr	r3, [pc, #132]	; (800ab60 <taskGetEstimatedAltitude+0x610>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a23      	ldr	r2, [pc, #140]	; (800ab6c <taskGetEstimatedAltitude+0x61c>)
 800aae0:	fb82 1203 	smull	r1, r2, r2, r3
 800aae4:	10d2      	asrs	r2, r2, #3
 800aae6:	17db      	asrs	r3, r3, #31
 800aae8:	1ad2      	subs	r2, r2, r3
 800aaea:	4b1c      	ldr	r3, [pc, #112]	; (800ab5c <taskGetEstimatedAltitude+0x60c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4413      	add	r3, r2
 800aaf0:	4a1a      	ldr	r2, [pc, #104]	; (800ab5c <taskGetEstimatedAltitude+0x60c>)
 800aaf2:	6013      	str	r3, [r2, #0]

        // D
        BaroPID -= constrain(cfg.D8[PIDVEL] * (accZ_tmp + accZ_old) / 512, -150, 150);
 800aaf4:	4b17      	ldr	r3, [pc, #92]	; (800ab54 <taskGetEstimatedAltitude+0x604>)
 800aaf6:	7f9b      	ldrb	r3, [r3, #30]
 800aaf8:	ee07 3a90 	vmov	s15, r3
 800aafc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ab00:	4b1b      	ldr	r3, [pc, #108]	; (800ab70 <taskGetEstimatedAltitude+0x620>)
 800ab02:	edd3 6a00 	vldr	s13, [r3]
 800ab06:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab12:	eddf 6a18 	vldr	s13, [pc, #96]	; 800ab74 <taskGetEstimatedAltitude+0x624>
 800ab16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ab1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab1e:	2296      	movs	r2, #150	; 0x96
 800ab20:	f06f 0195 	mvn.w	r1, #149	; 0x95
 800ab24:	ee17 0a90 	vmov	r0, s15
 800ab28:	f7f9 f86e 	bl	8003c08 <constrain>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <taskGetEstimatedAltitude+0x60c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	1a9b      	subs	r3, r3, r2
 800ab34:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <taskGetEstimatedAltitude+0x60c>)
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	e002      	b.n	800ab40 <taskGetEstimatedAltitude+0x5f0>

    } else {
        BaroPID = 0;
 800ab3a:	4b08      	ldr	r3, [pc, #32]	; (800ab5c <taskGetEstimatedAltitude+0x60c>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	601a      	str	r2, [r3, #0]
    }

    accZ_old = accZ_tmp;
 800ab40:	4a0b      	ldr	r2, [pc, #44]	; (800ab70 <taskGetEstimatedAltitude+0x620>)
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	6013      	str	r3, [r2, #0]

    return 1;
 800ab46:	2301      	movs	r3, #1
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3738      	adds	r7, #56	; 0x38
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	20001428 	.word	0x20001428
 800ab54:	20000db4 	.word	0x20000db4
 800ab58:	fffffed4 	.word	0xfffffed4
 800ab5c:	20001420 	.word	0x20001420
 800ab60:	20001430 	.word	0x20001430
 800ab64:	00190320 	.word	0x00190320
 800ab68:	ffe6fce0 	.word	0xffe6fce0
 800ab6c:	003ff801 	.word	0x003ff801
 800ab70:	200014b0 	.word	0x200014b0
 800ab74:	44000000 	.word	0x44000000

0800ab78 <servoMiddle>:
    { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
};


int16_t servoMiddle(int nr)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
    // Normally, servo.middle is a value between 1000..2000, but for the purposes of stupid, if it's less than
    // the number of RC channels, it means the center value is taken FROM that RC channel (by its index)
    if (cfg.servoConf[nr].middle < RC_CHANS && nr < MAX_SERVOS)
 800ab80:	4916      	ldr	r1, [pc, #88]	; (800abdc <servoMiddle+0x64>)
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	440b      	add	r3, r1
 800ab8e:	33bc      	adds	r3, #188	; 0xbc
 800ab90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab94:	2b11      	cmp	r3, #17
 800ab96:	dc11      	bgt.n	800abbc <servoMiddle+0x44>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b07      	cmp	r3, #7
 800ab9c:	dc0e      	bgt.n	800abbc <servoMiddle+0x44>
        return rcData[cfg.servoConf[nr].middle];
 800ab9e:	490f      	ldr	r1, [pc, #60]	; (800abdc <servoMiddle+0x64>)
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	440b      	add	r3, r1
 800abac:	33bc      	adds	r3, #188	; 0xbc
 800abae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abb2:	461a      	mov	r2, r3
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <servoMiddle+0x68>)
 800abb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800abba:	e009      	b.n	800abd0 <servoMiddle+0x58>
    else
        return cfg.servoConf[nr].middle;
 800abbc:	4907      	ldr	r1, [pc, #28]	; (800abdc <servoMiddle+0x64>)
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	440b      	add	r3, r1
 800abca:	33bc      	adds	r3, #188	; 0xbc
 800abcc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	20000db4 	.word	0x20000db4
 800abe0:	200016e8 	.word	0x200016e8

0800abe4 <servoDirection>:

int servoDirection(int nr, int lr)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
    // load the direction from the direction field of the servo
    if (cfg.servoConf[nr].direction & (1 << lr))
 800abee:	490d      	ldr	r1, [pc, #52]	; (800ac24 <servoDirection+0x40>)
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	4613      	mov	r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	440b      	add	r3, r1
 800abfc:	33c0      	adds	r3, #192	; 0xc0
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	fa42 f303 	asr.w	r3, r2, r3
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <servoDirection+0x32>
        return -1;
 800ac10:	f04f 33ff 	mov.w	r3, #4294967295
 800ac14:	e000      	b.n	800ac18 <servoDirection+0x34>
    else
        return 1;
 800ac16:	2301      	movs	r3, #1
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	20000db4 	.word	0x20000db4

0800ac28 <loadCustomServoMixer>:

void loadCustomServoMixer(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
    uint8_t i;

    // reset settings
    numberRules = 0;
 800ac2e:	4b1e      	ldr	r3, [pc, #120]	; (800aca8 <loadCustomServoMixer+0x80>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]
    memset(currentServoMixer, 0, sizeof(currentServoMixer));
 800ac34:	2270      	movs	r2, #112	; 0x70
 800ac36:	2100      	movs	r1, #0
 800ac38:	481c      	ldr	r0, [pc, #112]	; (800acac <loadCustomServoMixer+0x84>)
 800ac3a:	f018 fad5 	bl	80231e8 <memset>

    // load custom mixer into currentServoMixer
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ac3e:	2300      	movs	r3, #0
 800ac40:	71fb      	strb	r3, [r7, #7]
 800ac42:	e028      	b.n	800ac96 <loadCustomServoMixer+0x6e>
        // check if done
        if (mcfg.customServoMixer[i].rate == 0)
 800ac44:	79fa      	ldrb	r2, [r7, #7]
 800ac46:	491a      	ldr	r1, [pc, #104]	; (800acb0 <loadCustomServoMixer+0x88>)
 800ac48:	4613      	mov	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	1a9b      	subs	r3, r3, r2
 800ac4e:	440b      	add	r3, r1
 800ac50:	33d2      	adds	r3, #210	; 0xd2
 800ac52:	f993 3000 	ldrsb.w	r3, [r3]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d021      	beq.n	800ac9e <loadCustomServoMixer+0x76>
            break;
        currentServoMixer[i] = mcfg.customServoMixer[i];
 800ac5a:	79fa      	ldrb	r2, [r7, #7]
 800ac5c:	79f9      	ldrb	r1, [r7, #7]
 800ac5e:	4813      	ldr	r0, [pc, #76]	; (800acac <loadCustomServoMixer+0x84>)
 800ac60:	460b      	mov	r3, r1
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	1a5b      	subs	r3, r3, r1
 800ac66:	4418      	add	r0, r3
 800ac68:	4911      	ldr	r1, [pc, #68]	; (800acb0 <loadCustomServoMixer+0x88>)
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	00db      	lsls	r3, r3, #3
 800ac6e:	1a9b      	subs	r3, r3, r2
 800ac70:	440b      	add	r3, r1
 800ac72:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800ac76:	4603      	mov	r3, r0
 800ac78:	6811      	ldr	r1, [r2, #0]
 800ac7a:	6019      	str	r1, [r3, #0]
 800ac7c:	8891      	ldrh	r1, [r2, #4]
 800ac7e:	7992      	ldrb	r2, [r2, #6]
 800ac80:	8099      	strh	r1, [r3, #4]
 800ac82:	719a      	strb	r2, [r3, #6]
        numberRules++;
 800ac84:	4b08      	ldr	r3, [pc, #32]	; (800aca8 <loadCustomServoMixer+0x80>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <loadCustomServoMixer+0x80>)
 800ac8e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ac90:	79fb      	ldrb	r3, [r7, #7]
 800ac92:	3301      	adds	r3, #1
 800ac94:	71fb      	strb	r3, [r7, #7]
 800ac96:	79fb      	ldrb	r3, [r7, #7]
 800ac98:	2b0f      	cmp	r3, #15
 800ac9a:	d9d3      	bls.n	800ac44 <loadCustomServoMixer+0x1c>
    }
}
 800ac9c:	e000      	b.n	800aca0 <loadCustomServoMixer+0x78>
            break;
 800ac9e:	bf00      	nop
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20001515 	.word	0x20001515
 800acac:	20001608 	.word	0x20001608
 800acb0:	20000848 	.word	0x20000848

0800acb4 <mixerInit>:

void mixerInit(void)
{
 800acb4:	b590      	push	{r4, r7, lr}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
    int i;

    // enable servos for mixes that require them. note, this shifts motor counts.
    core.useServo = mixers[mcfg.mixerConfiguration].useServo;
 800acba:	4b8b      	ldr	r3, [pc, #556]	; (800aee8 <mixerInit+0x234>)
 800acbc:	795b      	ldrb	r3, [r3, #5]
 800acbe:	4a8b      	ldr	r2, [pc, #556]	; (800aeec <mixerInit+0x238>)
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	4413      	add	r3, r2
 800acc4:	785b      	ldrb	r3, [r3, #1]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bf14      	ite	ne
 800acca:	2301      	movne	r3, #1
 800accc:	2300      	moveq	r3, #0
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	4b87      	ldr	r3, [pc, #540]	; (800aef0 <mixerInit+0x23c>)
 800acd2:	755a      	strb	r2, [r3, #21]
    // if we want camstab/trig, that also enables servos, even if mixer doesn't
    if (feature(FEATURE_SERVO_TILT))
 800acd4:	2020      	movs	r0, #32
 800acd6:	f7fc f8fb 	bl	8006ed0 <feature>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <mixerInit+0x32>
        core.useServo = 1;
 800ace0:	4b83      	ldr	r3, [pc, #524]	; (800aef0 <mixerInit+0x23c>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	755a      	strb	r2, [r3, #21]

    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM) {
 800ace6:	4b80      	ldr	r3, [pc, #512]	; (800aee8 <mixerInit+0x234>)
 800ace8:	795b      	ldrb	r3, [r3, #5]
 800acea:	2b17      	cmp	r3, #23
 800acec:	d128      	bne.n	800ad40 <mixerInit+0x8c>
        // load custom mixer into currentMixer
        for (i = 0; i < MAX_MOTORS; i++) {
 800acee:	2300      	movs	r3, #0
 800acf0:	607b      	str	r3, [r7, #4]
 800acf2:	e021      	b.n	800ad38 <mixerInit+0x84>
            // check if done
            if (mcfg.customMixer[i].throttle == 0.0f)
 800acf4:	4a7c      	ldr	r2, [pc, #496]	; (800aee8 <mixerInit+0x234>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3301      	adds	r3, #1
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	4413      	add	r3, r2
 800acfe:	edd3 7a00 	vldr	s15, [r3]
 800ad02:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ad06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0a:	d048      	beq.n	800ad9e <mixerInit+0xea>
                break;
            currentMixer[i] = mcfg.customMixer[i];
 800ad0c:	4a79      	ldr	r2, [pc, #484]	; (800aef4 <mixerInit+0x240>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	18d1      	adds	r1, r2, r3
 800ad14:	4a74      	ldr	r2, [pc, #464]	; (800aee8 <mixerInit+0x234>)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	4413      	add	r3, r2
 800ad1e:	460c      	mov	r4, r1
 800ad20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            numberMotor++;
 800ad26:	4b74      	ldr	r3, [pc, #464]	; (800aef8 <mixerInit+0x244>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	4b72      	ldr	r3, [pc, #456]	; (800aef8 <mixerInit+0x244>)
 800ad30:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_MOTORS; i++) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3301      	adds	r3, #1
 800ad36:	607b      	str	r3, [r7, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b0b      	cmp	r3, #11
 800ad3c:	ddda      	ble.n	800acf4 <mixerInit+0x40>
 800ad3e:	e02f      	b.n	800ada0 <mixerInit+0xec>
        }
    } else {
        numberMotor = mixers[mcfg.mixerConfiguration].numberMotor;
 800ad40:	4b69      	ldr	r3, [pc, #420]	; (800aee8 <mixerInit+0x234>)
 800ad42:	795b      	ldrb	r3, [r3, #5]
 800ad44:	461a      	mov	r2, r3
 800ad46:	4b69      	ldr	r3, [pc, #420]	; (800aeec <mixerInit+0x238>)
 800ad48:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800ad4c:	4b6a      	ldr	r3, [pc, #424]	; (800aef8 <mixerInit+0x244>)
 800ad4e:	701a      	strb	r2, [r3, #0]
        // copy motor-based mixers
        if (mixers[mcfg.mixerConfiguration].motor) {
 800ad50:	4b65      	ldr	r3, [pc, #404]	; (800aee8 <mixerInit+0x234>)
 800ad52:	795b      	ldrb	r3, [r3, #5]
 800ad54:	4a65      	ldr	r2, [pc, #404]	; (800aeec <mixerInit+0x238>)
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	4413      	add	r3, r2
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01f      	beq.n	800ada0 <mixerInit+0xec>
            for (i = 0; i < numberMotor; i++)
 800ad60:	2300      	movs	r3, #0
 800ad62:	607b      	str	r3, [r7, #4]
 800ad64:	e014      	b.n	800ad90 <mixerInit+0xdc>
                currentMixer[i] = mixers[mcfg.mixerConfiguration].motor[i];
 800ad66:	4b60      	ldr	r3, [pc, #384]	; (800aee8 <mixerInit+0x234>)
 800ad68:	795b      	ldrb	r3, [r3, #5]
 800ad6a:	4a60      	ldr	r2, [pc, #384]	; (800aeec <mixerInit+0x238>)
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	4413      	add	r3, r2
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	011b      	lsls	r3, r3, #4
 800ad76:	18d1      	adds	r1, r2, r3
 800ad78:	4a5e      	ldr	r2, [pc, #376]	; (800aef4 <mixerInit+0x240>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	011b      	lsls	r3, r3, #4
 800ad7e:	4413      	add	r3, r2
 800ad80:	461c      	mov	r4, r3
 800ad82:	460b      	mov	r3, r1
 800ad84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (i = 0; i < numberMotor; i++)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	4b59      	ldr	r3, [pc, #356]	; (800aef8 <mixerInit+0x244>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	461a      	mov	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	dbe4      	blt.n	800ad66 <mixerInit+0xb2>
 800ad9c:	e000      	b.n	800ada0 <mixerInit+0xec>
                break;
 800ad9e:	bf00      	nop
        }
    }

    if (core.useServo) {
 800ada0:	4b53      	ldr	r3, [pc, #332]	; (800aef0 <mixerInit+0x23c>)
 800ada2:	7d5b      	ldrb	r3, [r3, #21]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d033      	beq.n	800ae10 <mixerInit+0x15c>
        numberRules = servoMixers[mcfg.mixerConfiguration].numberRules;
 800ada8:	4b4f      	ldr	r3, [pc, #316]	; (800aee8 <mixerInit+0x234>)
 800adaa:	795b      	ldrb	r3, [r3, #5]
 800adac:	461a      	mov	r2, r3
 800adae:	4b53      	ldr	r3, [pc, #332]	; (800aefc <mixerInit+0x248>)
 800adb0:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800adb4:	4b52      	ldr	r3, [pc, #328]	; (800af00 <mixerInit+0x24c>)
 800adb6:	701a      	strb	r2, [r3, #0]
        if (servoMixers[mcfg.mixerConfiguration].rule) {
 800adb8:	4b4b      	ldr	r3, [pc, #300]	; (800aee8 <mixerInit+0x234>)
 800adba:	795b      	ldrb	r3, [r3, #5]
 800adbc:	4a4f      	ldr	r2, [pc, #316]	; (800aefc <mixerInit+0x248>)
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	4413      	add	r3, r2
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d023      	beq.n	800ae10 <mixerInit+0x15c>
            for (i = 0; i < numberRules; i++)
 800adc8:	2300      	movs	r3, #0
 800adca:	607b      	str	r3, [r7, #4]
 800adcc:	e01a      	b.n	800ae04 <mixerInit+0x150>
                currentServoMixer[i] = servoMixers[mcfg.mixerConfiguration].rule[i];
 800adce:	4b46      	ldr	r3, [pc, #280]	; (800aee8 <mixerInit+0x234>)
 800add0:	795b      	ldrb	r3, [r3, #5]
 800add2:	4a4a      	ldr	r2, [pc, #296]	; (800aefc <mixerInit+0x248>)
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	4413      	add	r3, r2
 800add8:	6859      	ldr	r1, [r3, #4]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	1a9b      	subs	r3, r3, r2
 800ade2:	18c8      	adds	r0, r1, r3
 800ade4:	4947      	ldr	r1, [pc, #284]	; (800af04 <mixerInit+0x250>)
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	4613      	mov	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	1a9b      	subs	r3, r3, r2
 800adee:	440b      	add	r3, r1
 800adf0:	4602      	mov	r2, r0
 800adf2:	6811      	ldr	r1, [r2, #0]
 800adf4:	6019      	str	r1, [r3, #0]
 800adf6:	8891      	ldrh	r1, [r2, #4]
 800adf8:	7992      	ldrb	r2, [r2, #6]
 800adfa:	8099      	strh	r1, [r3, #4]
 800adfc:	719a      	strb	r2, [r3, #6]
            for (i = 0; i < numberRules; i++)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3301      	adds	r3, #1
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	4b3e      	ldr	r3, [pc, #248]	; (800af00 <mixerInit+0x24c>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	dbde      	blt.n	800adce <mixerInit+0x11a>
        }
    }

    // in 3D mode, mixer gain has to be halved
    if (feature(FEATURE_3D)) {
 800ae10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ae14:	f7fc f85c 	bl	8006ed0 <feature>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d045      	beq.n	800aeaa <mixerInit+0x1f6>
        if (numberMotor > 1) {
 800ae1e:	4b36      	ldr	r3, [pc, #216]	; (800aef8 <mixerInit+0x244>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d941      	bls.n	800aeaa <mixerInit+0x1f6>
            for (i = 0; i < numberMotor; i++) {
 800ae26:	2300      	movs	r3, #0
 800ae28:	607b      	str	r3, [r7, #4]
 800ae2a:	e038      	b.n	800ae9e <mixerInit+0x1ea>
                currentMixer[i].pitch *= 0.5f;
 800ae2c:	4a31      	ldr	r2, [pc, #196]	; (800aef4 <mixerInit+0x240>)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	4413      	add	r3, r2
 800ae34:	3308      	adds	r3, #8
 800ae36:	edd3 7a00 	vldr	s15, [r3]
 800ae3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ae3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae42:	4a2c      	ldr	r2, [pc, #176]	; (800aef4 <mixerInit+0x240>)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	4413      	add	r3, r2
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].roll *= 0.5f;
 800ae50:	4a28      	ldr	r2, [pc, #160]	; (800aef4 <mixerInit+0x240>)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	4413      	add	r3, r2
 800ae58:	3304      	adds	r3, #4
 800ae5a:	edd3 7a00 	vldr	s15, [r3]
 800ae5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ae62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae66:	4a23      	ldr	r2, [pc, #140]	; (800aef4 <mixerInit+0x240>)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	011b      	lsls	r3, r3, #4
 800ae6c:	4413      	add	r3, r2
 800ae6e:	3304      	adds	r3, #4
 800ae70:	edc3 7a00 	vstr	s15, [r3]
                currentMixer[i].yaw *= 0.5f;
 800ae74:	4a1f      	ldr	r2, [pc, #124]	; (800aef4 <mixerInit+0x240>)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	011b      	lsls	r3, r3, #4
 800ae7a:	4413      	add	r3, r2
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	edd3 7a00 	vldr	s15, [r3]
 800ae82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ae86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae8a:	4a1a      	ldr	r2, [pc, #104]	; (800aef4 <mixerInit+0x240>)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	4413      	add	r3, r2
 800ae92:	330c      	adds	r3, #12
 800ae94:	edc3 7a00 	vstr	s15, [r3]
            for (i = 0; i < numberMotor; i++) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	607b      	str	r3, [r7, #4]
 800ae9e:	4b16      	ldr	r3, [pc, #88]	; (800aef8 <mixerInit+0x244>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4293      	cmp	r3, r2
 800aea8:	dbc0      	blt.n	800ae2c <mixerInit+0x178>
            }
        }
    }

    // set flag that we're on something with wings
    if (mcfg.mixerConfiguration == MULTITYPE_FLYING_WING || mcfg.mixerConfiguration == MULTITYPE_AIRPLANE || mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800aeaa:	4b0f      	ldr	r3, [pc, #60]	; (800aee8 <mixerInit+0x234>)
 800aeac:	795b      	ldrb	r3, [r3, #5]
 800aeae:	2b08      	cmp	r3, #8
 800aeb0:	d007      	beq.n	800aec2 <mixerInit+0x20e>
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	; (800aee8 <mixerInit+0x234>)
 800aeb4:	795b      	ldrb	r3, [r3, #5]
 800aeb6:	2b0e      	cmp	r3, #14
 800aeb8:	d003      	beq.n	800aec2 <mixerInit+0x20e>
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <mixerInit+0x234>)
 800aebc:	795b      	ldrb	r3, [r3, #5]
 800aebe:	2b18      	cmp	r3, #24
 800aec0:	d109      	bne.n	800aed6 <mixerInit+0x222>
        f.FIXED_WING = 1;
 800aec2:	4b11      	ldr	r3, [pc, #68]	; (800af08 <mixerInit+0x254>)
 800aec4:	2201      	movs	r2, #1
 800aec6:	741a      	strb	r2, [r3, #16]

        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800aec8:	4b07      	ldr	r3, [pc, #28]	; (800aee8 <mixerInit+0x234>)
 800aeca:	795b      	ldrb	r3, [r3, #5]
 800aecc:	2b18      	cmp	r3, #24
 800aece:	d105      	bne.n	800aedc <mixerInit+0x228>
            loadCustomServoMixer();
 800aed0:	f7ff feaa 	bl	800ac28 <loadCustomServoMixer>
        if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE)
 800aed4:	e002      	b.n	800aedc <mixerInit+0x228>
    } else
        f.FIXED_WING = 0;
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <mixerInit+0x254>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	741a      	strb	r2, [r3, #16]

    mixerResetMotors();
 800aedc:	f000 f816 	bl	800af0c <mixerResetMotors>
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd90      	pop	{r4, r7, pc}
 800aee8:	20000848 	.word	0x20000848
 800aeec:	08028fd4 	.word	0x08028fd4
 800aef0:	20000790 	.word	0x20000790
 800aef4:	20001548 	.word	0x20001548
 800aef8:	20001514 	.word	0x20001514
 800aefc:	08029140 	.word	0x08029140
 800af00:	20001515 	.word	0x20001515
 800af04:	20001608 	.word	0x20001608
 800af08:	200016b0 	.word	0x200016b0

0800af0c <mixerResetMotors>:

void mixerResetMotors(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
    int i;
    // set disarmed motor values
    for (i = 0; i < MAX_MOTORS; i++)
 800af12:	2300      	movs	r3, #0
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	e016      	b.n	800af46 <mixerResetMotors+0x3a>
        motor_disarmed[i] = feature(FEATURE_3D) ? mcfg.neutral3d : mcfg.mincommand;
 800af18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800af1c:	f7fb ffd8 	bl	8006ed0 <feature>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d004      	beq.n	800af30 <mixerResetMotors+0x24>
 800af26:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <mixerResetMotors+0x4c>)
 800af28:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 800af2c:	b21b      	sxth	r3, r3
 800af2e:	e003      	b.n	800af38 <mixerResetMotors+0x2c>
 800af30:	4b09      	ldr	r3, [pc, #36]	; (800af58 <mixerResetMotors+0x4c>)
 800af32:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800af36:	b21b      	sxth	r3, r3
 800af38:	4908      	ldr	r1, [pc, #32]	; (800af5c <mixerResetMotors+0x50>)
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for (i = 0; i < MAX_MOTORS; i++)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3301      	adds	r3, #1
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b0b      	cmp	r3, #11
 800af4a:	dde5      	ble.n	800af18 <mixerResetMotors+0xc>
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	20000848 	.word	0x20000848
 800af5c:	20001530 	.word	0x20001530

0800af60 <servoMixerLoadMix>:

void servoMixerLoadMix(int index)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3301      	adds	r3, #1
 800af6c:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	e038      	b.n	800afe6 <servoMixerLoadMix+0x86>
        mcfg.customServoMixer[i].targetChannel = mcfg.customServoMixer[i].fromChannel = mcfg.customServoMixer[i].rate = mcfg.customServoMixer[i].box = 0;
 800af74:	4934      	ldr	r1, [pc, #208]	; (800b048 <servoMixerLoadMix+0xe8>)
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4613      	mov	r3, r2
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	1a9b      	subs	r3, r3, r2
 800af7e:	440b      	add	r3, r1
 800af80:	33d6      	adds	r3, #214	; 0xd6
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	4930      	ldr	r1, [pc, #192]	; (800b048 <servoMixerLoadMix+0xe8>)
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4613      	mov	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	1a9b      	subs	r3, r3, r2
 800af90:	440b      	add	r3, r1
 800af92:	33d2      	adds	r3, #210	; 0xd2
 800af94:	2200      	movs	r2, #0
 800af96:	701a      	strb	r2, [r3, #0]
 800af98:	492b      	ldr	r1, [pc, #172]	; (800b048 <servoMixerLoadMix+0xe8>)
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4613      	mov	r3, r2
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	440b      	add	r3, r1
 800afa4:	33d2      	adds	r3, #210	; 0xd2
 800afa6:	f993 3000 	ldrsb.w	r3, [r3]
 800afaa:	b2d8      	uxtb	r0, r3
 800afac:	4926      	ldr	r1, [pc, #152]	; (800b048 <servoMixerLoadMix+0xe8>)
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	4613      	mov	r3, r2
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	440b      	add	r3, r1
 800afb8:	33d1      	adds	r3, #209	; 0xd1
 800afba:	4602      	mov	r2, r0
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	4922      	ldr	r1, [pc, #136]	; (800b048 <servoMixerLoadMix+0xe8>)
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	4613      	mov	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	440b      	add	r3, r1
 800afca:	33d1      	adds	r3, #209	; 0xd1
 800afcc:	7818      	ldrb	r0, [r3, #0]
 800afce:	491e      	ldr	r1, [pc, #120]	; (800b048 <servoMixerLoadMix+0xe8>)
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4613      	mov	r3, r2
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	1a9b      	subs	r3, r3, r2
 800afd8:	440b      	add	r3, r1
 800afda:	33d0      	adds	r3, #208	; 0xd0
 800afdc:	4602      	mov	r2, r0
 800afde:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < MAX_SERVO_RULES; i++)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b0f      	cmp	r3, #15
 800afea:	ddc3      	ble.n	800af74 <servoMixerLoadMix+0x14>

    for (i = 0; i < servoMixers[index].numberRules; i++)
 800afec:	2300      	movs	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	e01a      	b.n	800b028 <servoMixerLoadMix+0xc8>
        mcfg.customServoMixer[i] = servoMixers[index].rule[i];
 800aff2:	4a16      	ldr	r2, [pc, #88]	; (800b04c <servoMixerLoadMix+0xec>)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4413      	add	r3, r2
 800affa:	6859      	ldr	r1, [r3, #4]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	4613      	mov	r3, r2
 800b000:	00db      	lsls	r3, r3, #3
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	18c8      	adds	r0, r1, r3
 800b006:	4910      	ldr	r1, [pc, #64]	; (800b048 <servoMixerLoadMix+0xe8>)
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4613      	mov	r3, r2
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	1a9b      	subs	r3, r3, r2
 800b010:	440b      	add	r3, r1
 800b012:	33d0      	adds	r3, #208	; 0xd0
 800b014:	4602      	mov	r2, r0
 800b016:	6811      	ldr	r1, [r2, #0]
 800b018:	6019      	str	r1, [r3, #0]
 800b01a:	8891      	ldrh	r1, [r2, #4]
 800b01c:	7992      	ldrb	r2, [r2, #6]
 800b01e:	8099      	strh	r1, [r3, #4]
 800b020:	719a      	strb	r2, [r3, #6]
    for (i = 0; i < servoMixers[index].numberRules; i++)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3301      	adds	r3, #1
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	4a08      	ldr	r2, [pc, #32]	; (800b04c <servoMixerLoadMix+0xec>)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b030:	461a      	mov	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4293      	cmp	r3, r2
 800b036:	dbdc      	blt.n	800aff2 <servoMixerLoadMix+0x92>
}
 800b038:	bf00      	nop
 800b03a:	bf00      	nop
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	20000848 	.word	0x20000848
 800b04c:	08029140 	.word	0x08029140

0800b050 <mixerLoadMix>:

void mixerLoadMix(int index)
{
 800b050:	b490      	push	{r4, r7}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
    int i;

    // we're 1-based
    index++;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3301      	adds	r3, #1
 800b05c:	607b      	str	r3, [r7, #4]
    // clear existing
    for (i = 0; i < MAX_MOTORS; i++)
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	e00a      	b.n	800b07a <mixerLoadMix+0x2a>
        mcfg.customMixer[i].throttle = 0.0f;
 800b064:	4a1c      	ldr	r2, [pc, #112]	; (800b0d8 <mixerLoadMix+0x88>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	3301      	adds	r3, #1
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	4413      	add	r3, r2
 800b06e:	f04f 0200 	mov.w	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MOTORS; i++)
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b0b      	cmp	r3, #11
 800b07e:	ddf1      	ble.n	800b064 <mixerLoadMix+0x14>

    // do we have anything here to begin with?
    if (mixers[index].motor != NULL) {
 800b080:	4a16      	ldr	r2, [pc, #88]	; (800b0dc <mixerLoadMix+0x8c>)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	4413      	add	r3, r2
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01f      	beq.n	800b0ce <mixerLoadMix+0x7e>
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e014      	b.n	800b0be <mixerLoadMix+0x6e>
            mcfg.customMixer[i] = mixers[index].motor[i];
 800b094:	4a11      	ldr	r2, [pc, #68]	; (800b0dc <mixerLoadMix+0x8c>)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	00db      	lsls	r3, r3, #3
 800b09a:	4413      	add	r3, r2
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	011b      	lsls	r3, r3, #4
 800b0a2:	18d1      	adds	r1, r2, r3
 800b0a4:	4a0c      	ldr	r2, [pc, #48]	; (800b0d8 <mixerLoadMix+0x88>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	4413      	add	r3, r2
 800b0ae:	461c      	mov	r4, r3
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b0b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (i = 0; i < mixers[index].numberMotor; i++)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	60fb      	str	r3, [r7, #12]
 800b0be:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <mixerLoadMix+0x8c>)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	dbe2      	blt.n	800b094 <mixerLoadMix+0x44>
    }
}
 800b0ce:	bf00      	nop
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bc90      	pop	{r4, r7}
 800b0d6:	4770      	bx	lr
 800b0d8:	20000848 	.word	0x20000848
 800b0dc:	08028fd4 	.word	0x08028fd4

0800b0e0 <writeServos>:

void writeServos(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
    if (!core.useServo)
 800b0e4:	4b95      	ldr	r3, [pc, #596]	; (800b33c <writeServos+0x25c>)
 800b0e6:	7d5b      	ldrb	r3, [r3, #21]
 800b0e8:	f083 0301 	eor.w	r3, r3, #1
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f040 811d 	bne.w	800b32e <writeServos+0x24e>
        return;

    switch (mcfg.mixerConfiguration) {
 800b0f4:	4b92      	ldr	r3, [pc, #584]	; (800b340 <writeServos+0x260>)
 800b0f6:	795b      	ldrb	r3, [r3, #5]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	2b17      	cmp	r3, #23
 800b0fc:	f200 8100 	bhi.w	800b300 <writeServos+0x220>
 800b100:	a201      	add	r2, pc, #4	; (adr r2, 800b108 <writeServos+0x28>)
 800b102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b106:	bf00      	nop
 800b108:	0800b18b 	.word	0x0800b18b
 800b10c:	0800b301 	.word	0x0800b301
 800b110:	0800b301 	.word	0x0800b301
 800b114:	0800b169 	.word	0x0800b169
 800b118:	0800b1cb 	.word	0x0800b1cb
 800b11c:	0800b301 	.word	0x0800b301
 800b120:	0800b301 	.word	0x0800b301
 800b124:	0800b20f 	.word	0x0800b20f
 800b128:	0800b301 	.word	0x0800b301
 800b12c:	0800b301 	.word	0x0800b301
 800b130:	0800b301 	.word	0x0800b301
 800b134:	0800b301 	.word	0x0800b301
 800b138:	0800b301 	.word	0x0800b301
 800b13c:	0800b231 	.word	0x0800b231
 800b140:	0800b301 	.word	0x0800b301
 800b144:	0800b301 	.word	0x0800b301
 800b148:	0800b301 	.word	0x0800b301
 800b14c:	0800b301 	.word	0x0800b301
 800b150:	0800b301 	.word	0x0800b301
 800b154:	0800b1ed 	.word	0x0800b1ed
 800b158:	0800b231 	.word	0x0800b231
 800b15c:	0800b301 	.word	0x0800b301
 800b160:	0800b301 	.word	0x0800b301
 800b164:	0800b273 	.word	0x0800b273
        case MULTITYPE_BI:
        	actPwmWriteServo(0, servo[4]);
 800b168:	4b76      	ldr	r3, [pc, #472]	; (800b344 <writeServos+0x264>)
 800b16a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	4619      	mov	r1, r3
 800b172:	2000      	movs	r0, #0
 800b174:	f7f6 ff06 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b178:	4b72      	ldr	r3, [pc, #456]	; (800b344 <writeServos+0x264>)
 800b17a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4619      	mov	r1, r3
 800b182:	2001      	movs	r0, #1
 800b184:	f7f6 fefe 	bl	8001f84 <actPwmWriteServo>
            break;
 800b188:	e0d6      	b.n	800b338 <writeServos+0x258>

        case MULTITYPE_TRI:
            if (cfg.tri_unarmed_servo) {
 800b18a:	4b6f      	ldr	r3, [pc, #444]	; (800b348 <writeServos+0x268>)
 800b18c:	f893 310f 	ldrb.w	r3, [r3, #271]	; 0x10f
 800b190:	2b00      	cmp	r3, #0
 800b192:	d008      	beq.n	800b1a6 <writeServos+0xc6>
                // if unarmed flag set, we always move servo
            	actPwmWriteServo(0, servo[5]);
 800b194:	4b6b      	ldr	r3, [pc, #428]	; (800b344 <writeServos+0x264>)
 800b196:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	4619      	mov	r1, r3
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f7f6 fef0 	bl	8001f84 <actPwmWriteServo>
                if (f.ARMED)
                	actPwmWriteServo(0, servo[5]);
                else
                	actPwmWriteServo(0, 0); // kill servo signal completely.
            }
            break;
 800b1a4:	e0c8      	b.n	800b338 <writeServos+0x258>
                if (f.ARMED)
 800b1a6:	4b69      	ldr	r3, [pc, #420]	; (800b34c <writeServos+0x26c>)
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d008      	beq.n	800b1c0 <writeServos+0xe0>
                	actPwmWriteServo(0, servo[5]);
 800b1ae:	4b65      	ldr	r3, [pc, #404]	; (800b344 <writeServos+0x264>)
 800b1b0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	f7f6 fee3 	bl	8001f84 <actPwmWriteServo>
            break;
 800b1be:	e0bb      	b.n	800b338 <writeServos+0x258>
                	actPwmWriteServo(0, 0); // kill servo signal completely.
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	f7f6 fede 	bl	8001f84 <actPwmWriteServo>
            break;
 800b1c8:	e0b6      	b.n	800b338 <writeServos+0x258>

        case MULTITYPE_GIMBAL:
        	actPwmWriteServo(0, servo[0]);
 800b1ca:	4b5e      	ldr	r3, [pc, #376]	; (800b344 <writeServos+0x264>)
 800b1cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f7f6 fed5 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[1]);
 800b1da:	4b5a      	ldr	r3, [pc, #360]	; (800b344 <writeServos+0x264>)
 800b1dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	f7f6 fecd 	bl	8001f84 <actPwmWriteServo>
            break;
 800b1ea:	e0a5      	b.n	800b338 <writeServos+0x258>

        case MULTITYPE_DUALCOPTER:
        	actPwmWriteServo(0, servo[4]);
 800b1ec:	4b55      	ldr	r3, [pc, #340]	; (800b344 <writeServos+0x264>)
 800b1ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	f7f6 fec4 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[5]);
 800b1fc:	4b51      	ldr	r3, [pc, #324]	; (800b344 <writeServos+0x264>)
 800b1fe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b202:	b29b      	uxth	r3, r3
 800b204:	4619      	mov	r1, r3
 800b206:	2001      	movs	r0, #1
 800b208:	f7f6 febc 	bl	8001f84 <actPwmWriteServo>
            break;
 800b20c:	e094      	b.n	800b338 <writeServos+0x258>

        case MULTITYPE_FLYING_WING:
        	actPwmWriteServo(0, servo[3]);
 800b20e:	4b4d      	ldr	r3, [pc, #308]	; (800b344 <writeServos+0x264>)
 800b210:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b214:	b29b      	uxth	r3, r3
 800b216:	4619      	mov	r1, r3
 800b218:	2000      	movs	r0, #0
 800b21a:	f7f6 feb3 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b21e:	4b49      	ldr	r3, [pc, #292]	; (800b344 <writeServos+0x264>)
 800b220:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b224:	b29b      	uxth	r3, r3
 800b226:	4619      	mov	r1, r3
 800b228:	2001      	movs	r0, #1
 800b22a:	f7f6 feab 	bl	8001f84 <actPwmWriteServo>
            break;
 800b22e:	e083      	b.n	800b338 <writeServos+0x258>

        case MULTITYPE_AIRPLANE:
        case MULTITYPE_SINGLECOPTER:
        	actPwmWriteServo(0, servo[3]);
 800b230:	4b44      	ldr	r3, [pc, #272]	; (800b344 <writeServos+0x264>)
 800b232:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b236:	b29b      	uxth	r3, r3
 800b238:	4619      	mov	r1, r3
 800b23a:	2000      	movs	r0, #0
 800b23c:	f7f6 fea2 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b240:	4b40      	ldr	r3, [pc, #256]	; (800b344 <writeServos+0x264>)
 800b242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b246:	b29b      	uxth	r3, r3
 800b248:	4619      	mov	r1, r3
 800b24a:	2001      	movs	r0, #1
 800b24c:	f7f6 fe9a 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b250:	4b3c      	ldr	r3, [pc, #240]	; (800b344 <writeServos+0x264>)
 800b252:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b256:	b29b      	uxth	r3, r3
 800b258:	4619      	mov	r1, r3
 800b25a:	2002      	movs	r0, #2
 800b25c:	f7f6 fe92 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b260:	4b38      	ldr	r3, [pc, #224]	; (800b344 <writeServos+0x264>)
 800b262:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b266:	b29b      	uxth	r3, r3
 800b268:	4619      	mov	r1, r3
 800b26a:	2003      	movs	r0, #3
 800b26c:	f7f6 fe8a 	bl	8001f84 <actPwmWriteServo>
            break;
 800b270:	e062      	b.n	800b338 <writeServos+0x258>

        case MULTITYPE_CUSTOM_PLANE:
        	actPwmWriteServo(0, servo[3]);
 800b272:	4b34      	ldr	r3, [pc, #208]	; (800b344 <writeServos+0x264>)
 800b274:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	4619      	mov	r1, r3
 800b27c:	2000      	movs	r0, #0
 800b27e:	f7f6 fe81 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(1, servo[4]);
 800b282:	4b30      	ldr	r3, [pc, #192]	; (800b344 <writeServos+0x264>)
 800b284:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	4619      	mov	r1, r3
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7f6 fe79 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(2, servo[5]);
 800b292:	4b2c      	ldr	r3, [pc, #176]	; (800b344 <writeServos+0x264>)
 800b294:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4619      	mov	r1, r3
 800b29c:	2002      	movs	r0, #2
 800b29e:	f7f6 fe71 	bl	8001f84 <actPwmWriteServo>
        	actPwmWriteServo(3, servo[6]);
 800b2a2:	4b28      	ldr	r3, [pc, #160]	; (800b344 <writeServos+0x264>)
 800b2a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	2003      	movs	r0, #3
 800b2ae:	f7f6 fe69 	bl	8001f84 <actPwmWriteServo>
            if (feature(FEATURE_PPM)) {
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	f7fb fe0c 	bl	8006ed0 <feature>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d039      	beq.n	800b332 <writeServos+0x252>
            	actPwmWriteServo(4, servo[0]);
 800b2be:	4b21      	ldr	r3, [pc, #132]	; (800b344 <writeServos+0x264>)
 800b2c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	2004      	movs	r0, #4
 800b2ca:	f7f6 fe5b 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(5, servo[1]);
 800b2ce:	4b1d      	ldr	r3, [pc, #116]	; (800b344 <writeServos+0x264>)
 800b2d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	2005      	movs	r0, #5
 800b2da:	f7f6 fe53 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(6, servo[2]);
 800b2de:	4b19      	ldr	r3, [pc, #100]	; (800b344 <writeServos+0x264>)
 800b2e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	2006      	movs	r0, #6
 800b2ea:	f7f6 fe4b 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(7, servo[7]);
 800b2ee:	4b15      	ldr	r3, [pc, #84]	; (800b344 <writeServos+0x264>)
 800b2f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	2007      	movs	r0, #7
 800b2fa:	f7f6 fe43 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b2fe:	e018      	b.n	800b332 <writeServos+0x252>

        default:
            // Two servos for SERVO_TILT, if enabled
            if (feature(FEATURE_SERVO_TILT)) {
 800b300:	2020      	movs	r0, #32
 800b302:	f7fb fde5 	bl	8006ed0 <feature>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d014      	beq.n	800b336 <writeServos+0x256>
            	actPwmWriteServo(0, servo[0]);
 800b30c:	4b0d      	ldr	r3, [pc, #52]	; (800b344 <writeServos+0x264>)
 800b30e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b312:	b29b      	uxth	r3, r3
 800b314:	4619      	mov	r1, r3
 800b316:	2000      	movs	r0, #0
 800b318:	f7f6 fe34 	bl	8001f84 <actPwmWriteServo>
            	actPwmWriteServo(1, servo[1]);
 800b31c:	4b09      	ldr	r3, [pc, #36]	; (800b344 <writeServos+0x264>)
 800b31e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b322:	b29b      	uxth	r3, r3
 800b324:	4619      	mov	r1, r3
 800b326:	2001      	movs	r0, #1
 800b328:	f7f6 fe2c 	bl	8001f84 <actPwmWriteServo>
            }
            break;
 800b32c:	e003      	b.n	800b336 <writeServos+0x256>
        return;
 800b32e:	bf00      	nop
 800b330:	e002      	b.n	800b338 <writeServos+0x258>
            break;
 800b332:	bf00      	nop
 800b334:	e000      	b.n	800b338 <writeServos+0x258>
            break;
 800b336:	bf00      	nop
    }
}
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	20000790 	.word	0x20000790
 800b340:	20000848 	.word	0x20000848
 800b344:	20000040 	.word	0x20000040
 800b348:	20000db4 	.word	0x20000db4
 800b34c:	200016b0 	.word	0x200016b0

0800b350 <writeMotors>:

void writeMotors(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < numberMotor; i++)
 800b356:	2300      	movs	r3, #0
 800b358:	71fb      	strb	r3, [r7, #7]
 800b35a:	e00c      	b.n	800b376 <writeMotors+0x26>
        actPwmWriteMotor(i, motor[i]);
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	4a0b      	ldr	r2, [pc, #44]	; (800b38c <writeMotors+0x3c>)
 800b360:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b364:	b29a      	uxth	r2, r3
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f6 fdee 	bl	8001f4c <actPwmWriteMotor>
    for (i = 0; i < numberMotor; i++)
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	3301      	adds	r3, #1
 800b374:	71fb      	strb	r3, [r7, #7]
 800b376:	4b06      	ldr	r3, [pc, #24]	; (800b390 <writeMotors+0x40>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	79fa      	ldrb	r2, [r7, #7]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d3ed      	bcc.n	800b35c <writeMotors+0xc>
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20001518 	.word	0x20001518
 800b390:	20001514 	.word	0x20001514

0800b394 <servoMixer>:
        motor[i] = mc;
    writeMotors();
}

static void servoMixer(void)
{
 800b394:	b590      	push	{r4, r7, lr}
 800b396:	b08b      	sub	sp, #44	; 0x2c
 800b398:	af00      	add	r7, sp, #0
    int16_t input[INPUT_ITEMS];
    static int16_t currentOutput[MAX_SERVO_RULES];
    uint8_t i;

    if (f.PASSTHRU_MODE) {
 800b39a:	4bae      	ldr	r3, [pc, #696]	; (800b654 <servoMixer+0x2c0>)
 800b39c:	7a9b      	ldrb	r3, [r3, #10]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00c      	beq.n	800b3bc <servoMixer+0x28>
        // Direct passthru from RX
        input[INPUT_ROLL] = rcCommand[ROLL];
 800b3a2:	4bad      	ldr	r3, [pc, #692]	; (800b658 <servoMixer+0x2c4>)
 800b3a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3a8:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = rcCommand[PITCH];
 800b3aa:	4bab      	ldr	r3, [pc, #684]	; (800b658 <servoMixer+0x2c4>)
 800b3ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3b0:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = rcCommand[YAW];
 800b3b2:	4ba9      	ldr	r3, [pc, #676]	; (800b658 <servoMixer+0x2c4>)
 800b3b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3b8:	813b      	strh	r3, [r7, #8]
 800b3ba:	e00b      	b.n	800b3d4 <servoMixer+0x40>
    } else {
        // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
        input[INPUT_ROLL] = axisPID[ROLL];
 800b3bc:	4ba7      	ldr	r3, [pc, #668]	; (800b65c <servoMixer+0x2c8>)
 800b3be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3c2:	80bb      	strh	r3, [r7, #4]
        input[INPUT_PITCH] = axisPID[PITCH];
 800b3c4:	4ba5      	ldr	r3, [pc, #660]	; (800b65c <servoMixer+0x2c8>)
 800b3c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b3ca:	80fb      	strh	r3, [r7, #6]
        input[INPUT_YAW] = axisPID[YAW];
 800b3cc:	4ba3      	ldr	r3, [pc, #652]	; (800b65c <servoMixer+0x2c8>)
 800b3ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3d2:	813b      	strh	r3, [r7, #8]
    }

    input[INPUT_THROTTLE] = motor[0];
 800b3d4:	4ba2      	ldr	r3, [pc, #648]	; (800b660 <servoMixer+0x2cc>)
 800b3d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b3da:	817b      	strh	r3, [r7, #10]
    // by subtracting the RC middle value from the RC input value, we get:
    // data - middle = input
    // 2000 - 1500 = +500
    // 1500 - 1500 = 0
    // 1000 - 1500 = -500
    input[INPUT_AUX1] = rcData[AUX1] - mcfg.midrc;
 800b3dc:	4ba1      	ldr	r3, [pc, #644]	; (800b664 <servoMixer+0x2d0>)
 800b3de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	4ba0      	ldr	r3, [pc, #640]	; (800b668 <servoMixer+0x2d4>)
 800b3e6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	b21b      	sxth	r3, r3
 800b3f0:	81bb      	strh	r3, [r7, #12]
    input[INPUT_AUX2] = rcData[AUX2] - mcfg.midrc;
 800b3f2:	4b9c      	ldr	r3, [pc, #624]	; (800b664 <servoMixer+0x2d0>)
 800b3f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	4b9b      	ldr	r3, [pc, #620]	; (800b668 <servoMixer+0x2d4>)
 800b3fc:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	b29b      	uxth	r3, r3
 800b404:	b21b      	sxth	r3, r3
 800b406:	81fb      	strh	r3, [r7, #14]
    input[INPUT_AUX3] = rcData[AUX3] - mcfg.midrc;
 800b408:	4b96      	ldr	r3, [pc, #600]	; (800b664 <servoMixer+0x2d0>)
 800b40a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b40e:	b29a      	uxth	r2, r3
 800b410:	4b95      	ldr	r3, [pc, #596]	; (800b668 <servoMixer+0x2d4>)
 800b412:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	b29b      	uxth	r3, r3
 800b41a:	b21b      	sxth	r3, r3
 800b41c:	823b      	strh	r3, [r7, #16]
    input[INPUT_AUX4] = rcData[AUX4] - mcfg.midrc;
 800b41e:	4b91      	ldr	r3, [pc, #580]	; (800b664 <servoMixer+0x2d0>)
 800b420:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b424:	b29a      	uxth	r2, r3
 800b426:	4b90      	ldr	r3, [pc, #576]	; (800b668 <servoMixer+0x2d4>)
 800b428:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	b29b      	uxth	r3, r3
 800b430:	b21b      	sxth	r3, r3
 800b432:	827b      	strh	r3, [r7, #18]
    input[INPUT_RC_ROLL] = rcData[ROLL] - mcfg.midrc;
 800b434:	4b8b      	ldr	r3, [pc, #556]	; (800b664 <servoMixer+0x2d0>)
 800b436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	4b8a      	ldr	r3, [pc, #552]	; (800b668 <servoMixer+0x2d4>)
 800b43e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	b29b      	uxth	r3, r3
 800b446:	b21b      	sxth	r3, r3
 800b448:	82bb      	strh	r3, [r7, #20]
    input[INPUT_RC_PITCH] = rcData[PITCH] - mcfg.midrc;
 800b44a:	4b86      	ldr	r3, [pc, #536]	; (800b664 <servoMixer+0x2d0>)
 800b44c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b450:	b29a      	uxth	r2, r3
 800b452:	4b85      	ldr	r3, [pc, #532]	; (800b668 <servoMixer+0x2d4>)
 800b454:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	b21b      	sxth	r3, r3
 800b45e:	82fb      	strh	r3, [r7, #22]
    input[INPUT_RC_YAW] = rcData[YAW] - mcfg.midrc;
 800b460:	4b80      	ldr	r3, [pc, #512]	; (800b664 <servoMixer+0x2d0>)
 800b462:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b466:	b29a      	uxth	r2, r3
 800b468:	4b7f      	ldr	r3, [pc, #508]	; (800b668 <servoMixer+0x2d4>)
 800b46a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	b29b      	uxth	r3, r3
 800b472:	b21b      	sxth	r3, r3
 800b474:	833b      	strh	r3, [r7, #24]
    input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - mcfg.midrc;
 800b476:	4b7b      	ldr	r3, [pc, #492]	; (800b664 <servoMixer+0x2d0>)
 800b478:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	4b7a      	ldr	r3, [pc, #488]	; (800b668 <servoMixer+0x2d4>)
 800b480:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	b29b      	uxth	r3, r3
 800b488:	b21b      	sxth	r3, r3
 800b48a:	837b      	strh	r3, [r7, #26]

    for (i = 0; i < MAX_SERVOS; i++)
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b492:	e00a      	b.n	800b4aa <servoMixer+0x116>
        servo[i] = 0;
 800b494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b498:	4a74      	ldr	r2, [pc, #464]	; (800b66c <servoMixer+0x2d8>)
 800b49a:	2100      	movs	r1, #0
 800b49c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800b4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ae:	2b07      	cmp	r3, #7
 800b4b0:	d9f0      	bls.n	800b494 <servoMixer+0x100>

    // mix servos according to rules
    for (i = 0; i < numberRules; i++) {
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4b8:	e15f      	b.n	800b77a <servoMixer+0x3e6>
        // consider rule if no box assigned or box is active
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b4ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4be:	496c      	ldr	r1, [pc, #432]	; (800b670 <servoMixer+0x2dc>)
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	1a9b      	subs	r3, r3, r2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	3306      	adds	r3, #6
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00e      	beq.n	800b4ee <servoMixer+0x15a>
 800b4d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4d4:	4966      	ldr	r1, [pc, #408]	; (800b670 <servoMixer+0x2dc>)
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	440b      	add	r3, r1
 800b4de:	3306      	adds	r3, #6
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	3314      	adds	r3, #20
 800b4e4:	4a63      	ldr	r2, [pc, #396]	; (800b674 <servoMixer+0x2e0>)
 800b4e6:	5cd3      	ldrb	r3, [r2, r3]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 813b 	beq.w	800b764 <servoMixer+0x3d0>
            uint8_t target = currentServoMixer[i].targetChannel;
 800b4ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4f2:	495f      	ldr	r1, [pc, #380]	; (800b670 <servoMixer+0x2dc>)
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            uint8_t from = currentServoMixer[i].fromChannel;
 800b502:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b506:	495a      	ldr	r1, [pc, #360]	; (800b670 <servoMixer+0x2dc>)
 800b508:	4613      	mov	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	440b      	add	r3, r1
 800b510:	3301      	adds	r3, #1
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint16_t servo_width = cfg.servoConf[target].max - cfg.servoConf[target].min;
 800b518:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b51c:	4956      	ldr	r1, [pc, #344]	; (800b678 <servoMixer+0x2e4>)
 800b51e:	4613      	mov	r3, r2
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4413      	add	r3, r2
 800b524:	005b      	lsls	r3, r3, #1
 800b526:	440b      	add	r3, r1
 800b528:	33ba      	adds	r3, #186	; 0xba
 800b52a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b52e:	b299      	uxth	r1, r3
 800b530:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b534:	4850      	ldr	r0, [pc, #320]	; (800b678 <servoMixer+0x2e4>)
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	4403      	add	r3, r0
 800b540:	33b8      	adds	r3, #184	; 0xb8
 800b542:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b546:	b29b      	uxth	r3, r3
 800b548:	1acb      	subs	r3, r1, r3
 800b54a:	847b      	strh	r3, [r7, #34]	; 0x22
            int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 800b54c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b550:	4947      	ldr	r1, [pc, #284]	; (800b670 <servoMixer+0x2dc>)
 800b552:	4613      	mov	r3, r2
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	440b      	add	r3, r1
 800b55a:	3304      	adds	r3, #4
 800b55c:	f993 3000 	ldrsb.w	r3, [r3]
 800b560:	461a      	mov	r2, r3
 800b562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b564:	fb02 f303 	mul.w	r3, r2, r3
 800b568:	4a44      	ldr	r2, [pc, #272]	; (800b67c <servoMixer+0x2e8>)
 800b56a:	fb82 1203 	smull	r1, r2, r2, r3
 800b56e:	1152      	asrs	r2, r2, #5
 800b570:	17db      	asrs	r3, r3, #31
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	b29a      	uxth	r2, r3
 800b576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b578:	085b      	lsrs	r3, r3, #1
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	b29b      	uxth	r3, r3
 800b580:	843b      	strh	r3, [r7, #32]
            int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 800b582:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b586:	493a      	ldr	r1, [pc, #232]	; (800b670 <servoMixer+0x2dc>)
 800b588:	4613      	mov	r3, r2
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	440b      	add	r3, r1
 800b590:	3305      	adds	r3, #5
 800b592:	f993 3000 	ldrsb.w	r3, [r3]
 800b596:	461a      	mov	r2, r3
 800b598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b59a:	fb02 f303 	mul.w	r3, r2, r3
 800b59e:	4a37      	ldr	r2, [pc, #220]	; (800b67c <servoMixer+0x2e8>)
 800b5a0:	fb82 1203 	smull	r1, r2, r2, r3
 800b5a4:	1152      	asrs	r2, r2, #5
 800b5a6:	17db      	asrs	r3, r3, #31
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5ae:	085b      	lsrs	r3, r3, #1
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	83fb      	strh	r3, [r7, #30]

            if (currentServoMixer[i].speed == 0)
 800b5b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5bc:	492c      	ldr	r1, [pc, #176]	; (800b670 <servoMixer+0x2dc>)
 800b5be:	4613      	mov	r3, r2
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	440b      	add	r3, r1
 800b5c6:	3303      	adds	r3, #3
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10c      	bne.n	800b5e8 <servoMixer+0x254>
                currentOutput[i] = input[from];
 800b5ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b5d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	3328      	adds	r3, #40	; 0x28
 800b5da:	443b      	add	r3, r7
 800b5dc:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800b5e0:	4b27      	ldr	r3, [pc, #156]	; (800b680 <servoMixer+0x2ec>)
 800b5e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800b5e6:	e082      	b.n	800b6ee <servoMixer+0x35a>
            else {
                if (currentOutput[i] < input[from])
 800b5e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5ec:	4a24      	ldr	r2, [pc, #144]	; (800b680 <servoMixer+0x2ec>)
 800b5ee:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b5f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	3328      	adds	r3, #40	; 0x28
 800b5fa:	443b      	add	r3, r7
 800b5fc:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b600:	429a      	cmp	r2, r3
 800b602:	da3f      	bge.n	800b684 <servoMixer+0x2f0>
                    currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, currentOutput[i], input[from]);
 800b604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b608:	4a1d      	ldr	r2, [pc, #116]	; (800b680 <servoMixer+0x2ec>)
 800b60a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b60e:	4618      	mov	r0, r3
 800b610:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b614:	4916      	ldr	r1, [pc, #88]	; (800b670 <servoMixer+0x2dc>)
 800b616:	4613      	mov	r3, r2
 800b618:	00db      	lsls	r3, r3, #3
 800b61a:	1a9b      	subs	r3, r3, r2
 800b61c:	440b      	add	r3, r1
 800b61e:	3303      	adds	r3, #3
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	4418      	add	r0, r3
 800b624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b628:	4a15      	ldr	r2, [pc, #84]	; (800b680 <servoMixer+0x2ec>)
 800b62a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b62e:	4619      	mov	r1, r3
 800b630:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b634:	005b      	lsls	r3, r3, #1
 800b636:	3328      	adds	r3, #40	; 0x28
 800b638:	443b      	add	r3, r7
 800b63a:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7f8 fae2 	bl	8003c08 <constrain>
 800b644:	4602      	mov	r2, r0
 800b646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b64a:	b211      	sxth	r1, r2
 800b64c:	4a0c      	ldr	r2, [pc, #48]	; (800b680 <servoMixer+0x2ec>)
 800b64e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b652:	e04c      	b.n	800b6ee <servoMixer+0x35a>
 800b654:	200016b0 	.word	0x200016b0
 800b658:	2000170c 	.word	0x2000170c
 800b65c:	2000176c 	.word	0x2000176c
 800b660:	20001518 	.word	0x20001518
 800b664:	200016e8 	.word	0x200016e8
 800b668:	20000848 	.word	0x20000848
 800b66c:	20000040 	.word	0x20000040
 800b670:	20001608 	.word	0x20001608
 800b674:	20001750 	.word	0x20001750
 800b678:	20000db4 	.word	0x20000db4
 800b67c:	51eb851f 	.word	0x51eb851f
 800b680:	20001678 	.word	0x20001678
                else if (currentOutput[i] > input[from])
 800b684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b688:	4a63      	ldr	r2, [pc, #396]	; (800b818 <servoMixer+0x484>)
 800b68a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800b68e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	3328      	adds	r3, #40	; 0x28
 800b696:	443b      	add	r3, r7
 800b698:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	dd26      	ble.n	800b6ee <servoMixer+0x35a>
                    currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, input[from], currentOutput[i]);
 800b6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a4:	4a5c      	ldr	r2, [pc, #368]	; (800b818 <servoMixer+0x484>)
 800b6a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6b0:	495a      	ldr	r1, [pc, #360]	; (800b81c <servoMixer+0x488>)
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	00db      	lsls	r3, r3, #3
 800b6b6:	1a9b      	subs	r3, r3, r2
 800b6b8:	440b      	add	r3, r1
 800b6ba:	3303      	adds	r3, #3
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	1ac0      	subs	r0, r0, r3
 800b6c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	3328      	adds	r3, #40	; 0x28
 800b6c8:	443b      	add	r3, r7
 800b6ca:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d4:	4a50      	ldr	r2, [pc, #320]	; (800b818 <servoMixer+0x484>)
 800b6d6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f7f8 fa94 	bl	8003c08 <constrain>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e6:	b211      	sxth	r1, r2
 800b6e8:	4a4b      	ldr	r2, [pc, #300]	; (800b818 <servoMixer+0x484>)
 800b6ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }

            servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * currentServoMixer[i].rate) / 100, min, max);
 800b6ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6f2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff fa73 	bl	800abe4 <servoDirection>
 800b6fe:	4604      	mov	r4, r0
 800b700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b704:	4a44      	ldr	r2, [pc, #272]	; (800b818 <servoMixer+0x484>)
 800b706:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b710:	4942      	ldr	r1, [pc, #264]	; (800b81c <servoMixer+0x488>)
 800b712:	4613      	mov	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	440b      	add	r3, r1
 800b71a:	3302      	adds	r3, #2
 800b71c:	f993 3000 	ldrsb.w	r3, [r3]
 800b720:	fb00 f303 	mul.w	r3, r0, r3
 800b724:	4a3e      	ldr	r2, [pc, #248]	; (800b820 <servoMixer+0x48c>)
 800b726:	fb82 1203 	smull	r1, r2, r2, r3
 800b72a:	1152      	asrs	r2, r2, #5
 800b72c:	17db      	asrs	r3, r3, #31
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800b734:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800b738:	4618      	mov	r0, r3
 800b73a:	f7f8 fa65 	bl	8003c08 <constrain>
 800b73e:	4603      	mov	r3, r0
 800b740:	fb03 f104 	mul.w	r1, r3, r4
 800b744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b748:	4a36      	ldr	r2, [pc, #216]	; (800b824 <servoMixer+0x490>)
 800b74a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b74e:	b29a      	uxth	r2, r3
 800b750:	b28b      	uxth	r3, r1
 800b752:	4413      	add	r3, r2
 800b754:	b29a      	uxth	r2, r3
 800b756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b75a:	b211      	sxth	r1, r2
 800b75c:	4a31      	ldr	r2, [pc, #196]	; (800b824 <servoMixer+0x490>)
 800b75e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        if (currentServoMixer[i].box == 0 || rcOptions[BOXSERVO1 + currentServoMixer[i].box - 1]) {
 800b762:	e005      	b.n	800b770 <servoMixer+0x3dc>
        } else
            currentOutput[i] = 0;
 800b764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b768:	4a2b      	ldr	r2, [pc, #172]	; (800b818 <servoMixer+0x484>)
 800b76a:	2100      	movs	r1, #0
 800b76c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < numberRules; i++) {
 800b770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b774:	3301      	adds	r3, #1
 800b776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b77a:	4b2b      	ldr	r3, [pc, #172]	; (800b828 <servoMixer+0x494>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b782:	429a      	cmp	r2, r3
 800b784:	f4ff ae99 	bcc.w	800b4ba <servoMixer+0x126>
    }

    // servo rates
    for (i = 0; i < MAX_SERVOS; i++) {
 800b788:	2300      	movs	r3, #0
 800b78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b78e:	e039      	b.n	800b804 <servoMixer+0x470>
        servo[i] = ((int32_t)cfg.servoConf[i].rate * servo[i]) / 100;
 800b790:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b794:	4925      	ldr	r1, [pc, #148]	; (800b82c <servoMixer+0x498>)
 800b796:	4613      	mov	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	005b      	lsls	r3, r3, #1
 800b79e:	440b      	add	r3, r1
 800b7a0:	33be      	adds	r3, #190	; 0xbe
 800b7a2:	f993 3000 	ldrsb.w	r3, [r3]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7ac:	4a1d      	ldr	r2, [pc, #116]	; (800b824 <servoMixer+0x490>)
 800b7ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7b2:	fb01 f303 	mul.w	r3, r1, r3
 800b7b6:	4a1a      	ldr	r2, [pc, #104]	; (800b820 <servoMixer+0x48c>)
 800b7b8:	fb82 1203 	smull	r1, r2, r2, r3
 800b7bc:	1152      	asrs	r2, r2, #5
 800b7be:	17db      	asrs	r3, r3, #31
 800b7c0:	1ad2      	subs	r2, r2, r3
 800b7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c6:	b211      	sxth	r1, r2
 800b7c8:	4a16      	ldr	r2, [pc, #88]	; (800b824 <servoMixer+0x490>)
 800b7ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        servo[i] += servoMiddle(i);
 800b7ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff f9d0 	bl	800ab78 <servoMiddle>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	4619      	mov	r1, r3
 800b7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e0:	4a10      	ldr	r2, [pc, #64]	; (800b824 <servoMixer+0x490>)
 800b7e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	b28b      	uxth	r3, r1
 800b7ea:	4413      	add	r3, r2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7f2:	b211      	sxth	r1, r2
 800b7f4:	4a0b      	ldr	r2, [pc, #44]	; (800b824 <servoMixer+0x490>)
 800b7f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++) {
 800b7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7fe:	3301      	adds	r3, #1
 800b800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b808:	2b07      	cmp	r3, #7
 800b80a:	d9c1      	bls.n	800b790 <servoMixer+0x3fc>
    }
}
 800b80c:	bf00      	nop
 800b80e:	bf00      	nop
 800b810:	372c      	adds	r7, #44	; 0x2c
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	20001678 	.word	0x20001678
 800b81c:	20001608 	.word	0x20001608
 800b820:	51eb851f 	.word	0x51eb851f
 800b824:	20000040 	.word	0x20000040
 800b828:	20001515 	.word	0x20001515
 800b82c:	20000db4 	.word	0x20000db4

0800b830 <mixTable>:

void mixTable(void)
{
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
    int16_t maxMotor;
    uint32_t i;

    if (numberMotor > 3) {
 800b836:	4b7e      	ldr	r3, [pc, #504]	; (800ba30 <mixTable+0x200>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d91d      	bls.n	800b87a <mixTable+0x4a>
        // prevent "yaw jump" during yaw correction
        axisPID[YAW] = constrain(axisPID[YAW], -100 - abs(rcCommand[YAW]), +100 + abs(rcCommand[YAW]));
 800b83e:	4b7d      	ldr	r3, [pc, #500]	; (800ba34 <mixTable+0x204>)
 800b840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b844:	4618      	mov	r0, r3
 800b846:	4b7c      	ldr	r3, [pc, #496]	; (800ba38 <mixTable+0x208>)
 800b848:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	bfb8      	it	lt
 800b850:	425b      	neglt	r3, r3
 800b852:	b29b      	uxth	r3, r3
 800b854:	461a      	mov	r2, r3
 800b856:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b85a:	1a9b      	subs	r3, r3, r2
 800b85c:	4a76      	ldr	r2, [pc, #472]	; (800ba38 <mixTable+0x208>)
 800b85e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b862:	2a00      	cmp	r2, #0
 800b864:	bfb8      	it	lt
 800b866:	4252      	neglt	r2, r2
 800b868:	b292      	uxth	r2, r2
 800b86a:	3264      	adds	r2, #100	; 0x64
 800b86c:	4619      	mov	r1, r3
 800b86e:	f7f8 f9cb 	bl	8003c08 <constrain>
 800b872:	4603      	mov	r3, r0
 800b874:	b21a      	sxth	r2, r3
 800b876:	4b6f      	ldr	r3, [pc, #444]	; (800ba34 <mixTable+0x204>)
 800b878:	809a      	strh	r2, [r3, #4]
    }

    // motors for non-servo mixes
    if (numberMotor > 1) {
 800b87a:	4b6d      	ldr	r3, [pc, #436]	; (800ba30 <mixTable+0x200>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	f240 809a 	bls.w	800b9b8 <mixTable+0x188>
        for (i = 0; i < numberMotor; i++) {
 800b884:	2300      	movs	r3, #0
 800b886:	60bb      	str	r3, [r7, #8]
 800b888:	e08f      	b.n	800b9aa <mixTable+0x17a>
            motor[i] = rcCommand[THROTTLE] * currentMixer[i].throttle + axisPID[PITCH] * currentMixer[i].pitch + axisPID[ROLL] * currentMixer[i].roll + -cfg.yaw_direction * axisPID[YAW] * currentMixer[i].yaw;
 800b88a:	4b6b      	ldr	r3, [pc, #428]	; (800ba38 <mixTable+0x208>)
 800b88c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b890:	ee07 3a90 	vmov	s15, r3
 800b894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b898:	4a68      	ldr	r2, [pc, #416]	; (800ba3c <mixTable+0x20c>)
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	4413      	add	r3, r2
 800b8a0:	edd3 7a00 	vldr	s15, [r3]
 800b8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8a8:	4b62      	ldr	r3, [pc, #392]	; (800ba34 <mixTable+0x204>)
 800b8aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b8b6:	4a61      	ldr	r2, [pc, #388]	; (800ba3c <mixTable+0x20c>)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	4413      	add	r3, r2
 800b8be:	3308      	adds	r3, #8
 800b8c0:	edd3 7a00 	vldr	s15, [r3]
 800b8c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8cc:	4b59      	ldr	r3, [pc, #356]	; (800ba34 <mixTable+0x204>)
 800b8ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8d2:	ee07 3a90 	vmov	s15, r3
 800b8d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b8da:	4a58      	ldr	r2, [pc, #352]	; (800ba3c <mixTable+0x20c>)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	011b      	lsls	r3, r3, #4
 800b8e0:	4413      	add	r3, r2
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	edd3 7a00 	vldr	s15, [r3]
 800b8e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8f0:	4b53      	ldr	r3, [pc, #332]	; (800ba40 <mixTable+0x210>)
 800b8f2:	f993 310e 	ldrsb.w	r3, [r3, #270]	; 0x10e
 800b8f6:	425b      	negs	r3, r3
 800b8f8:	4a4e      	ldr	r2, [pc, #312]	; (800ba34 <mixTable+0x204>)
 800b8fa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b8fe:	fb02 f303 	mul.w	r3, r2, r3
 800b902:	ee07 3a90 	vmov	s15, r3
 800b906:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b90a:	4a4c      	ldr	r2, [pc, #304]	; (800ba3c <mixTable+0x20c>)
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	011b      	lsls	r3, r3, #4
 800b910:	4413      	add	r3, r2
 800b912:	330c      	adds	r3, #12
 800b914:	edd3 7a00 	vldr	s15, [r3]
 800b918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b91c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b924:	ee17 3a90 	vmov	r3, s15
 800b928:	b219      	sxth	r1, r3
 800b92a:	4a46      	ldr	r2, [pc, #280]	; (800ba44 <mixTable+0x214>)
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (f.FIXED_WING) { // vector_thrust handeling
 800b932:	4b45      	ldr	r3, [pc, #276]	; (800ba48 <mixTable+0x218>)
 800b934:	7c1b      	ldrb	r3, [r3, #16]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d034      	beq.n	800b9a4 <mixTable+0x174>
                if (cfg.fw_vector_thrust) {
 800b93a:	4b41      	ldr	r3, [pc, #260]	; (800ba40 <mixTable+0x210>)
 800b93c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 800b940:	2b00      	cmp	r3, #0
 800b942:	d028      	beq.n	800b996 <mixTable+0x166>
                    if (f.PASSTHRU_MODE)
 800b944:	4b40      	ldr	r3, [pc, #256]	; (800ba48 <mixTable+0x218>)
 800b946:	7a9b      	ldrb	r3, [r3, #10]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d02b      	beq.n	800b9a4 <mixTable+0x174>
                        motor[i] = rcCommand[THROTTLE] - rcCommand[YAW] * (i - 0.5f);
 800b94c:	4b3a      	ldr	r3, [pc, #232]	; (800ba38 <mixTable+0x208>)
 800b94e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b95a:	4b37      	ldr	r3, [pc, #220]	; (800ba38 <mixTable+0x208>)
 800b95c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b960:	ee07 3a90 	vmov	s15, r3
 800b964:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	ee07 3a90 	vmov	s15, r3
 800b96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b972:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b976:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b97a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b97e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b986:	ee17 3a90 	vmov	r3, s15
 800b98a:	b219      	sxth	r1, r3
 800b98c:	4a2d      	ldr	r2, [pc, #180]	; (800ba44 <mixTable+0x214>)
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b994:	e006      	b.n	800b9a4 <mixTable+0x174>
                } else { // Override mixerVectorThrust
                    motor[i] = rcCommand[THROTTLE];
 800b996:	4b28      	ldr	r3, [pc, #160]	; (800ba38 <mixTable+0x208>)
 800b998:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800b99c:	4a29      	ldr	r2, [pc, #164]	; (800ba44 <mixTable+0x214>)
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < numberMotor; i++) {
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	60bb      	str	r3, [r7, #8]
 800b9aa:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <mixTable+0x200>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	f4ff af69 	bcc.w	800b88a <mixTable+0x5a>
            }
        }
    }

    // airplane / servo mixes
    switch (mcfg.mixerConfiguration) {
 800b9b8:	4b24      	ldr	r3, [pc, #144]	; (800ba4c <mixTable+0x21c>)
 800b9ba:	795b      	ldrb	r3, [r3, #5]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	2b17      	cmp	r3, #23
 800b9c0:	d87b      	bhi.n	800baba <mixTable+0x28a>
 800b9c2:	a201      	add	r2, pc, #4	; (adr r2, 800b9c8 <mixTable+0x198>)
 800b9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c8:	0800ba29 	.word	0x0800ba29
 800b9cc:	0800babb 	.word	0x0800babb
 800b9d0:	0800babb 	.word	0x0800babb
 800b9d4:	0800ba29 	.word	0x0800ba29
 800b9d8:	0800ba51 	.word	0x0800ba51
 800b9dc:	0800babb 	.word	0x0800babb
 800b9e0:	0800babb 	.word	0x0800babb
 800b9e4:	0800ba29 	.word	0x0800ba29
 800b9e8:	0800babb 	.word	0x0800babb
 800b9ec:	0800babb 	.word	0x0800babb
 800b9f0:	0800babb 	.word	0x0800babb
 800b9f4:	0800babb 	.word	0x0800babb
 800b9f8:	0800babb 	.word	0x0800babb
 800b9fc:	0800ba29 	.word	0x0800ba29
 800ba00:	0800babb 	.word	0x0800babb
 800ba04:	0800babb 	.word	0x0800babb
 800ba08:	0800babb 	.word	0x0800babb
 800ba0c:	0800babb 	.word	0x0800babb
 800ba10:	0800babb 	.word	0x0800babb
 800ba14:	0800ba29 	.word	0x0800ba29
 800ba18:	0800ba29 	.word	0x0800ba29
 800ba1c:	0800babb 	.word	0x0800babb
 800ba20:	0800babb 	.word	0x0800babb
 800ba24:	0800ba29 	.word	0x0800ba29
        case MULTITYPE_AIRPLANE:
        case MULTITYPE_BI:
        case MULTITYPE_TRI:
        case MULTITYPE_DUALCOPTER:
        case MULTITYPE_SINGLECOPTER:
            servoMixer();
 800ba28:	f7ff fcb4 	bl	800b394 <servoMixer>
            break;
 800ba2c:	e045      	b.n	800baba <mixTable+0x28a>
 800ba2e:	bf00      	nop
 800ba30:	20001514 	.word	0x20001514
 800ba34:	2000176c 	.word	0x2000176c
 800ba38:	2000170c 	.word	0x2000170c
 800ba3c:	20001548 	.word	0x20001548
 800ba40:	20000db4 	.word	0x20000db4
 800ba44:	20001518 	.word	0x20001518
 800ba48:	200016b0 	.word	0x200016b0
 800ba4c:	20000848 	.word	0x20000848
        case MULTITYPE_GIMBAL:
            servo[0] = (((int32_t)cfg.servoConf[0].rate * angle[PITCH]) / 50) + servoMiddle(0);
 800ba50:	4ba7      	ldr	r3, [pc, #668]	; (800bcf0 <mixTable+0x4c0>)
 800ba52:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800ba56:	461a      	mov	r2, r3
 800ba58:	4ba6      	ldr	r3, [pc, #664]	; (800bcf4 <mixTable+0x4c4>)
 800ba5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba5e:	fb02 f303 	mul.w	r3, r2, r3
 800ba62:	4aa5      	ldr	r2, [pc, #660]	; (800bcf8 <mixTable+0x4c8>)
 800ba64:	fb82 1203 	smull	r1, r2, r2, r3
 800ba68:	1112      	asrs	r2, r2, #4
 800ba6a:	17db      	asrs	r3, r3, #31
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	b29c      	uxth	r4, r3
 800ba70:	2000      	movs	r0, #0
 800ba72:	f7ff f881 	bl	800ab78 <servoMiddle>
 800ba76:	4603      	mov	r3, r0
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	4423      	add	r3, r4
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	b21a      	sxth	r2, r3
 800ba80:	4b9e      	ldr	r3, [pc, #632]	; (800bcfc <mixTable+0x4cc>)
 800ba82:	801a      	strh	r2, [r3, #0]
            servo[1] = (((int32_t)cfg.servoConf[1].rate * angle[ROLL]) / 50) + servoMiddle(1);
 800ba84:	4b9a      	ldr	r3, [pc, #616]	; (800bcf0 <mixTable+0x4c0>)
 800ba86:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4b99      	ldr	r3, [pc, #612]	; (800bcf4 <mixTable+0x4c4>)
 800ba8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba92:	fb02 f303 	mul.w	r3, r2, r3
 800ba96:	4a98      	ldr	r2, [pc, #608]	; (800bcf8 <mixTable+0x4c8>)
 800ba98:	fb82 1203 	smull	r1, r2, r2, r3
 800ba9c:	1112      	asrs	r2, r2, #4
 800ba9e:	17db      	asrs	r3, r3, #31
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	b29c      	uxth	r4, r3
 800baa4:	2001      	movs	r0, #1
 800baa6:	f7ff f867 	bl	800ab78 <servoMiddle>
 800baaa:	4603      	mov	r3, r0
 800baac:	b29b      	uxth	r3, r3
 800baae:	4423      	add	r3, r4
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	b21a      	sxth	r2, r3
 800bab4:	4b91      	ldr	r3, [pc, #580]	; (800bcfc <mixTable+0x4cc>)
 800bab6:	805a      	strh	r2, [r3, #2]
            break;
 800bab8:	bf00      	nop
    }

    // do camstab
    if (feature(FEATURE_SERVO_TILT)) {
 800baba:	2020      	movs	r0, #32
 800babc:	f7fb fa08 	bl	8006ed0 <feature>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80a3 	beq.w	800bc0e <mixTable+0x3de>
        // center at fixed position, or vary either pitch or roll by RC channel
        servo[0] = servoMiddle(0);
 800bac8:	2000      	movs	r0, #0
 800baca:	f7ff f855 	bl	800ab78 <servoMiddle>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	4b8a      	ldr	r3, [pc, #552]	; (800bcfc <mixTable+0x4cc>)
 800bad4:	801a      	strh	r2, [r3, #0]
        servo[1] = servoMiddle(1);
 800bad6:	2001      	movs	r0, #1
 800bad8:	f7ff f84e 	bl	800ab78 <servoMiddle>
 800badc:	4603      	mov	r3, r0
 800bade:	461a      	mov	r2, r3
 800bae0:	4b86      	ldr	r3, [pc, #536]	; (800bcfc <mixTable+0x4cc>)
 800bae2:	805a      	strh	r2, [r3, #2]

        if (rcOptions[BOXCAMSTAB]) {
 800bae4:	4b86      	ldr	r3, [pc, #536]	; (800bd00 <mixTable+0x4d0>)
 800bae6:	7a1b      	ldrb	r3, [r3, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 8090 	beq.w	800bc0e <mixTable+0x3de>
            if (cfg.gimbal_flags & GIMBAL_MIXTILT) {
 800baee:	4b80      	ldr	r3, [pc, #512]	; (800bcf0 <mixTable+0x4c0>)
 800baf0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d056      	beq.n	800bbaa <mixTable+0x37a>
                servo[0] -= (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 - (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bafc:	4b7f      	ldr	r3, [pc, #508]	; (800bcfc <mixTable+0x4cc>)
 800bafe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b7a      	ldr	r3, [pc, #488]	; (800bcf0 <mixTable+0x4c0>)
 800bb06:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb0a:	425b      	negs	r3, r3
 800bb0c:	4979      	ldr	r1, [pc, #484]	; (800bcf4 <mixTable+0x4c4>)
 800bb0e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bb12:	fb01 f303 	mul.w	r3, r1, r3
 800bb16:	4978      	ldr	r1, [pc, #480]	; (800bcf8 <mixTable+0x4c8>)
 800bb18:	fb81 0103 	smull	r0, r1, r1, r3
 800bb1c:	1109      	asrs	r1, r1, #4
 800bb1e:	17db      	asrs	r3, r3, #31
 800bb20:	1acb      	subs	r3, r1, r3
 800bb22:	b299      	uxth	r1, r3
 800bb24:	4b72      	ldr	r3, [pc, #456]	; (800bcf0 <mixTable+0x4c0>)
 800bb26:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	4b71      	ldr	r3, [pc, #452]	; (800bcf4 <mixTable+0x4c4>)
 800bb2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb32:	fb00 f303 	mul.w	r3, r0, r3
 800bb36:	4870      	ldr	r0, [pc, #448]	; (800bcf8 <mixTable+0x4c8>)
 800bb38:	fb80 4003 	smull	r4, r0, r0, r3
 800bb3c:	1100      	asrs	r0, r0, #4
 800bb3e:	17db      	asrs	r3, r3, #31
 800bb40:	1a1b      	subs	r3, r3, r0
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	440b      	add	r3, r1
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	b21a      	sxth	r2, r3
 800bb4e:	4b6b      	ldr	r3, [pc, #428]	; (800bcfc <mixTable+0x4cc>)
 800bb50:	801a      	strh	r2, [r3, #0]
                servo[1] += (-(int32_t)cfg.servoConf[0].rate) * angle[PITCH] / 50 + (int32_t)cfg.servoConf[1].rate * angle[ROLL] / 50;
 800bb52:	4b6a      	ldr	r3, [pc, #424]	; (800bcfc <mixTable+0x4cc>)
 800bb54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	4b65      	ldr	r3, [pc, #404]	; (800bcf0 <mixTable+0x4c0>)
 800bb5c:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bb60:	425b      	negs	r3, r3
 800bb62:	4964      	ldr	r1, [pc, #400]	; (800bcf4 <mixTable+0x4c4>)
 800bb64:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800bb68:	fb01 f303 	mul.w	r3, r1, r3
 800bb6c:	4962      	ldr	r1, [pc, #392]	; (800bcf8 <mixTable+0x4c8>)
 800bb6e:	fb81 0103 	smull	r0, r1, r1, r3
 800bb72:	1109      	asrs	r1, r1, #4
 800bb74:	17db      	asrs	r3, r3, #31
 800bb76:	1acb      	subs	r3, r1, r3
 800bb78:	b299      	uxth	r1, r3
 800bb7a:	4b5d      	ldr	r3, [pc, #372]	; (800bcf0 <mixTable+0x4c0>)
 800bb7c:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bb80:	4618      	mov	r0, r3
 800bb82:	4b5c      	ldr	r3, [pc, #368]	; (800bcf4 <mixTable+0x4c4>)
 800bb84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb88:	fb00 f303 	mul.w	r3, r0, r3
 800bb8c:	485a      	ldr	r0, [pc, #360]	; (800bcf8 <mixTable+0x4c8>)
 800bb8e:	fb80 4003 	smull	r4, r0, r0, r3
 800bb92:	1100      	asrs	r0, r0, #4
 800bb94:	17db      	asrs	r3, r3, #31
 800bb96:	1ac3      	subs	r3, r0, r3
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	440b      	add	r3, r1
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	4413      	add	r3, r2
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	b21a      	sxth	r2, r3
 800bba4:	4b55      	ldr	r3, [pc, #340]	; (800bcfc <mixTable+0x4cc>)
 800bba6:	805a      	strh	r2, [r3, #2]
 800bba8:	e031      	b.n	800bc0e <mixTable+0x3de>
            } else {
                servo[0] += (int32_t)cfg.servoConf[0].rate * angle[PITCH] / 50;
 800bbaa:	4b54      	ldr	r3, [pc, #336]	; (800bcfc <mixTable+0x4cc>)
 800bbac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	4b4f      	ldr	r3, [pc, #316]	; (800bcf0 <mixTable+0x4c0>)
 800bbb4:	f993 30be 	ldrsb.w	r3, [r3, #190]	; 0xbe
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4b4e      	ldr	r3, [pc, #312]	; (800bcf4 <mixTable+0x4c4>)
 800bbbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbc0:	fb01 f303 	mul.w	r3, r1, r3
 800bbc4:	494c      	ldr	r1, [pc, #304]	; (800bcf8 <mixTable+0x4c8>)
 800bbc6:	fb81 0103 	smull	r0, r1, r1, r3
 800bbca:	1109      	asrs	r1, r1, #4
 800bbcc:	17db      	asrs	r3, r3, #31
 800bbce:	1acb      	subs	r3, r1, r3
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	b21a      	sxth	r2, r3
 800bbd8:	4b48      	ldr	r3, [pc, #288]	; (800bcfc <mixTable+0x4cc>)
 800bbda:	801a      	strh	r2, [r3, #0]
                servo[1] += (int32_t)cfg.servoConf[1].rate * angle[ROLL]  / 50;
 800bbdc:	4b47      	ldr	r3, [pc, #284]	; (800bcfc <mixTable+0x4cc>)
 800bbde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	4b42      	ldr	r3, [pc, #264]	; (800bcf0 <mixTable+0x4c0>)
 800bbe6:	f993 30c8 	ldrsb.w	r3, [r3, #200]	; 0xc8
 800bbea:	4619      	mov	r1, r3
 800bbec:	4b41      	ldr	r3, [pc, #260]	; (800bcf4 <mixTable+0x4c4>)
 800bbee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbf2:	fb01 f303 	mul.w	r3, r1, r3
 800bbf6:	4940      	ldr	r1, [pc, #256]	; (800bcf8 <mixTable+0x4c8>)
 800bbf8:	fb81 0103 	smull	r0, r1, r1, r3
 800bbfc:	1109      	asrs	r1, r1, #4
 800bbfe:	17db      	asrs	r3, r3, #31
 800bc00:	1acb      	subs	r3, r1, r3
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	4413      	add	r3, r2
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	b21a      	sxth	r2, r3
 800bc0a:	4b3c      	ldr	r3, [pc, #240]	; (800bcfc <mixTable+0x4cc>)
 800bc0c:	805a      	strh	r2, [r3, #2]
            }
        }
    }

    // constrain servos
    for (i = 0; i < MAX_SERVOS; i++)
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60bb      	str	r3, [r7, #8]
 800bc12:	e026      	b.n	800bc62 <mixTable+0x432>
        servo[i] = constrain(servo[i], cfg.servoConf[i].min, cfg.servoConf[i].max); // limit the values
 800bc14:	4a39      	ldr	r2, [pc, #228]	; (800bcfc <mixTable+0x4cc>)
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	4934      	ldr	r1, [pc, #208]	; (800bcf0 <mixTable+0x4c0>)
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	440b      	add	r3, r1
 800bc2c:	33b8      	adds	r3, #184	; 0xb8
 800bc2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc32:	461c      	mov	r4, r3
 800bc34:	492e      	ldr	r1, [pc, #184]	; (800bcf0 <mixTable+0x4c0>)
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	440b      	add	r3, r1
 800bc42:	33ba      	adds	r3, #186	; 0xba
 800bc44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	f7f7 ffdc 	bl	8003c08 <constrain>
 800bc50:	4603      	mov	r3, r0
 800bc52:	b219      	sxth	r1, r3
 800bc54:	4a29      	ldr	r2, [pc, #164]	; (800bcfc <mixTable+0x4cc>)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < MAX_SERVOS; i++)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60bb      	str	r3, [r7, #8]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b07      	cmp	r3, #7
 800bc66:	d9d5      	bls.n	800bc14 <mixTable+0x3e4>

    // forward AUX1-4 to servo outputs (not constrained)
    if (cfg.gimbal_flags & GIMBAL_FORWARDAUX) {
 800bc68:	4b21      	ldr	r3, [pc, #132]	; (800bcf0 <mixTable+0x4c0>)
 800bc6a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800bc6e:	f003 0304 	and.w	r3, r3, #4
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01c      	beq.n	800bcb0 <mixTable+0x480>
        int offset = core.numServos - 4;
 800bc76:	4b23      	ldr	r3, [pc, #140]	; (800bd04 <mixTable+0x4d4>)
 800bc78:	7d9b      	ldrb	r3, [r3, #22]
 800bc7a:	3b04      	subs	r3, #4
 800bc7c:	607b      	str	r3, [r7, #4]
        // offset servos based off number already used in mixer types
        // airplane and servo_tilt together can't be used
        // calculate offset by taking 4 from core.numServos
        for (i = 0; i < 4; i++)
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60bb      	str	r3, [r7, #8]
 800bc82:	e012      	b.n	800bcaa <mixTable+0x47a>
        	actPwmWriteServo(i + offset, rcData[AUX1 + i]);
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	3304      	adds	r3, #4
 800bc94:	491c      	ldr	r1, [pc, #112]	; (800bd08 <mixTable+0x4d8>)
 800bc96:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	f7f6 f970 	bl	8001f84 <actPwmWriteServo>
        for (i = 0; i < 4; i++)
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	3301      	adds	r3, #1
 800bca8:	60bb      	str	r3, [r7, #8]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d9e9      	bls.n	800bc84 <mixTable+0x454>
    }

    maxMotor = motor[0];
 800bcb0:	4b16      	ldr	r3, [pc, #88]	; (800bd0c <mixTable+0x4dc>)
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	60bb      	str	r3, [r7, #8]
 800bcba:	e00f      	b.n	800bcdc <mixTable+0x4ac>
        if (motor[i] > maxMotor)
 800bcbc:	4a13      	ldr	r2, [pc, #76]	; (800bd0c <mixTable+0x4dc>)
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bcc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	da04      	bge.n	800bcd6 <mixTable+0x4a6>
            maxMotor = motor[i];
 800bccc:	4a0f      	ldr	r2, [pc, #60]	; (800bd0c <mixTable+0x4dc>)
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcd4:	81fb      	strh	r3, [r7, #14]
    for (i = 1; i < numberMotor; i++)
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	60bb      	str	r3, [r7, #8]
 800bcdc:	4b0c      	ldr	r3, [pc, #48]	; (800bd10 <mixTable+0x4e0>)
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	461a      	mov	r2, r3
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d3e9      	bcc.n	800bcbc <mixTable+0x48c>
    for (i = 0; i < numberMotor; i++) {
 800bce8:	2300      	movs	r3, #0
 800bcea:	60bb      	str	r3, [r7, #8]
 800bcec:	e0e8      	b.n	800bec0 <mixTable+0x690>
 800bcee:	bf00      	nop
 800bcf0:	20000db4 	.word	0x20000db4
 800bcf4:	20001458 	.word	0x20001458
 800bcf8:	51eb851f 	.word	0x51eb851f
 800bcfc:	20000040 	.word	0x20000040
 800bd00:	20001750 	.word	0x20001750
 800bd04:	20000790 	.word	0x20000790
 800bd08:	200016e8 	.word	0x200016e8
 800bd0c:	20001518 	.word	0x20001518
 800bd10:	20001514 	.word	0x20001514
        if (maxMotor > mcfg.maxthrottle && !f.FIXED_WING)     // this is a way to still have good gyro corrections if at least one motor reaches its max.
 800bd14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd18:	4a6f      	ldr	r2, [pc, #444]	; (800bed8 <mixTable+0x6a8>)
 800bd1a:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	dd15      	ble.n	800bd4e <mixTable+0x51e>
 800bd22:	4b6e      	ldr	r3, [pc, #440]	; (800bedc <mixTable+0x6ac>)
 800bd24:	7c1b      	ldrb	r3, [r3, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d111      	bne.n	800bd4e <mixTable+0x51e>
            motor[i] -= maxMotor - mcfg.maxthrottle;
 800bd2a:	4a6d      	ldr	r2, [pc, #436]	; (800bee0 <mixTable+0x6b0>)
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	4b68      	ldr	r3, [pc, #416]	; (800bed8 <mixTable+0x6a8>)
 800bd36:	f8b3 1142 	ldrh.w	r1, [r3, #322]	; 0x142
 800bd3a:	89fb      	ldrh	r3, [r7, #14]
 800bd3c:	1acb      	subs	r3, r1, r3
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	4413      	add	r3, r2
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	b219      	sxth	r1, r3
 800bd46:	4a66      	ldr	r2, [pc, #408]	; (800bee0 <mixTable+0x6b0>)
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        if (feature(FEATURE_3D)) {
 800bd4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bd52:	f7fb f8bd 	bl	8006ed0 <feature>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d060      	beq.n	800be1e <mixTable+0x5ee>
            if ((rcData[THROTTLE]) > mcfg.midrc) {
 800bd5c:	4b61      	ldr	r3, [pc, #388]	; (800bee4 <mixTable+0x6b4>)
 800bd5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bd62:	461a      	mov	r2, r3
 800bd64:	4b5c      	ldr	r3, [pc, #368]	; (800bed8 <mixTable+0x6a8>)
 800bd66:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	dd2b      	ble.n	800bdc6 <mixTable+0x596>
                motor[i] = constrain(motor[i], mcfg.deadband3d_high, mcfg.maxthrottle);
 800bd6e:	4a5c      	ldr	r2, [pc, #368]	; (800bee0 <mixTable+0x6b0>)
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bd76:	4618      	mov	r0, r3
 800bd78:	4b57      	ldr	r3, [pc, #348]	; (800bed8 <mixTable+0x6a8>)
 800bd7a:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4b55      	ldr	r3, [pc, #340]	; (800bed8 <mixTable+0x6a8>)
 800bd82:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800bd86:	461a      	mov	r2, r3
 800bd88:	f7f7 ff3e 	bl	8003c08 <constrain>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	b219      	sxth	r1, r3
 800bd90:	4a53      	ldr	r2, [pc, #332]	; (800bee0 <mixTable+0x6b0>)
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bd98:	4b4f      	ldr	r3, [pc, #316]	; (800bed8 <mixTable+0x6a8>)
 800bd9a:	795b      	ldrb	r3, [r3, #5]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d17d      	bne.n	800be9c <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].min, cfg.servoConf[5].max);
 800bda0:	4b51      	ldr	r3, [pc, #324]	; (800bee8 <mixTable+0x6b8>)
 800bda2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bda6:	4618      	mov	r0, r3
 800bda8:	4b50      	ldr	r3, [pc, #320]	; (800beec <mixTable+0x6bc>)
 800bdaa:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4b4e      	ldr	r3, [pc, #312]	; (800beec <mixTable+0x6bc>)
 800bdb2:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f7f7 ff26 	bl	8003c08 <constrain>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	b21a      	sxth	r2, r3
 800bdc0:	4b49      	ldr	r3, [pc, #292]	; (800bee8 <mixTable+0x6b8>)
 800bdc2:	815a      	strh	r2, [r3, #10]
 800bdc4:	e06a      	b.n	800be9c <mixTable+0x66c>
                }
            } else {
                motor[i] = constrain(motor[i], mcfg.mincommand, mcfg.deadband3d_low);
 800bdc6:	4a46      	ldr	r2, [pc, #280]	; (800bee0 <mixTable+0x6b0>)
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	4b41      	ldr	r3, [pc, #260]	; (800bed8 <mixTable+0x6a8>)
 800bdd2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4b3f      	ldr	r3, [pc, #252]	; (800bed8 <mixTable+0x6a8>)
 800bdda:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 800bdde:	461a      	mov	r2, r3
 800bde0:	f7f7 ff12 	bl	8003c08 <constrain>
 800bde4:	4603      	mov	r3, r0
 800bde6:	b219      	sxth	r1, r3
 800bde8:	4a3d      	ldr	r2, [pc, #244]	; (800bee0 <mixTable+0x6b0>)
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if ((mcfg.mixerConfiguration) == MULTITYPE_TRI) {
 800bdf0:	4b39      	ldr	r3, [pc, #228]	; (800bed8 <mixTable+0x6a8>)
 800bdf2:	795b      	ldrb	r3, [r3, #5]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d151      	bne.n	800be9c <mixTable+0x66c>
                    servo[5] = constrain(servo[5], cfg.servoConf[5].max, cfg.servoConf[5].min);
 800bdf8:	4b3b      	ldr	r3, [pc, #236]	; (800bee8 <mixTable+0x6b8>)
 800bdfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bdfe:	4618      	mov	r0, r3
 800be00:	4b3a      	ldr	r3, [pc, #232]	; (800beec <mixTable+0x6bc>)
 800be02:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800be06:	4619      	mov	r1, r3
 800be08:	4b38      	ldr	r3, [pc, #224]	; (800beec <mixTable+0x6bc>)
 800be0a:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800be0e:	461a      	mov	r2, r3
 800be10:	f7f7 fefa 	bl	8003c08 <constrain>
 800be14:	4603      	mov	r3, r0
 800be16:	b21a      	sxth	r2, r3
 800be18:	4b33      	ldr	r3, [pc, #204]	; (800bee8 <mixTable+0x6b8>)
 800be1a:	815a      	strh	r2, [r3, #10]
 800be1c:	e03e      	b.n	800be9c <mixTable+0x66c>
                }
            }
        } else {
            motor[i] = constrain(motor[i], mcfg.minthrottle, mcfg.maxthrottle);
 800be1e:	4a30      	ldr	r2, [pc, #192]	; (800bee0 <mixTable+0x6b0>)
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800be26:	4618      	mov	r0, r3
 800be28:	4b2b      	ldr	r3, [pc, #172]	; (800bed8 <mixTable+0x6a8>)
 800be2a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800be2e:	4619      	mov	r1, r3
 800be30:	4b29      	ldr	r3, [pc, #164]	; (800bed8 <mixTable+0x6a8>)
 800be32:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 800be36:	461a      	mov	r2, r3
 800be38:	f7f7 fee6 	bl	8003c08 <constrain>
 800be3c:	4603      	mov	r3, r0
 800be3e:	b219      	sxth	r1, r3
 800be40:	4a27      	ldr	r2, [pc, #156]	; (800bee0 <mixTable+0x6b0>)
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if ((rcData[THROTTLE]) < mcfg.mincheck) {
 800be48:	4b26      	ldr	r3, [pc, #152]	; (800bee4 <mixTable+0x6b4>)
 800be4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800be4e:	461a      	mov	r2, r3
 800be50:	4b21      	ldr	r3, [pc, #132]	; (800bed8 <mixTable+0x6a8>)
 800be52:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800be56:	429a      	cmp	r2, r3
 800be58:	da1d      	bge.n	800be96 <mixTable+0x666>
                if (!feature(FEATURE_MOTOR_STOP))
 800be5a:	2010      	movs	r0, #16
 800be5c:	f7fb f838 	bl	8006ed0 <feature>
 800be60:	4603      	mov	r3, r0
 800be62:	f083 0301 	eor.w	r3, r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d008      	beq.n	800be7e <mixTable+0x64e>
                    motor[i] = mcfg.minthrottle;
 800be6c:	4b1a      	ldr	r3, [pc, #104]	; (800bed8 <mixTable+0x6a8>)
 800be6e:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 800be72:	b219      	sxth	r1, r3
 800be74:	4a1a      	ldr	r2, [pc, #104]	; (800bee0 <mixTable+0x6b0>)
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800be7c:	e00e      	b.n	800be9c <mixTable+0x66c>
                else {
                    motor[i] = mcfg.mincommand;
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <mixTable+0x6a8>)
 800be80:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800be84:	b219      	sxth	r1, r3
 800be86:	4a16      	ldr	r2, [pc, #88]	; (800bee0 <mixTable+0x6b0>)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    f.MOTORS_STOPPED = 1;
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <mixTable+0x6ac>)
 800be90:	2201      	movs	r2, #1
 800be92:	745a      	strb	r2, [r3, #17]
 800be94:	e002      	b.n	800be9c <mixTable+0x66c>
                }
            } else {
                f.MOTORS_STOPPED = 0;
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <mixTable+0x6ac>)
 800be98:	2200      	movs	r2, #0
 800be9a:	745a      	strb	r2, [r3, #17]
            }
        }
        if (!f.ARMED) {
 800be9c:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <mixTable+0x6ac>)
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d10a      	bne.n	800beba <mixTable+0x68a>
            motor[i] = motor_disarmed[i];
 800bea4:	4a12      	ldr	r2, [pc, #72]	; (800bef0 <mixTable+0x6c0>)
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800beac:	4a0c      	ldr	r2, [pc, #48]	; (800bee0 <mixTable+0x6b0>)
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            f.MOTORS_STOPPED = 1;
 800beb4:	4b09      	ldr	r3, [pc, #36]	; (800bedc <mixTable+0x6ac>)
 800beb6:	2201      	movs	r2, #1
 800beb8:	745a      	strb	r2, [r3, #17]
    for (i = 0; i < numberMotor; i++) {
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60bb      	str	r3, [r7, #8]
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <mixTable+0x6c4>)
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	4293      	cmp	r3, r2
 800beca:	f4ff af23 	bcc.w	800bd14 <mixTable+0x4e4>
        }
    }
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd90      	pop	{r4, r7, pc}
 800bed8:	20000848 	.word	0x20000848
 800bedc:	200016b0 	.word	0x200016b0
 800bee0:	20001518 	.word	0x20001518
 800bee4:	200016e8 	.word	0x200016e8
 800bee8:	20000040 	.word	0x20000040
 800beec:	20000db4 	.word	0x20000db4
 800bef0:	20001530 	.word	0x20001530
 800bef4:	20001514 	.word	0x20001514

0800bef8 <blinkLED>:
// Time of automatic disarm when "Don't spin the motors when armed" is enabled.
static uint32_t disarmTime = 0;


void blinkLED(uint8_t num, uint8_t wait, uint8_t repeat)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
 800bf02:	460b      	mov	r3, r1
 800bf04:	71bb      	strb	r3, [r7, #6]
 800bf06:	4613      	mov	r3, r2
 800bf08:	717b      	strb	r3, [r7, #5]
    uint8_t i, r;

    for (r = 0; r < repeat; r++) {
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73bb      	strb	r3, [r7, #14]
 800bf0e:	e020      	b.n	800bf52 <blinkLED+0x5a>
        for (i = 0; i < num; i++) {
 800bf10:	2300      	movs	r3, #0
 800bf12:	73fb      	strb	r3, [r7, #15]
 800bf14:	e013      	b.n	800bf3e <blinkLED+0x46>
            actLed0Toggle();            // switch LEDPIN state
 800bf16:	f7f6 f8c5 	bl	80020a4 <actLed0Toggle>
            actBuzzerAction(PIF_ID_BUZZER, ON);
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bf20:	f7f6 f902 	bl	8002128 <actBuzzerAction>
            pif_Delay1ms(wait);
 800bf24:	79bb      	ldrb	r3, [r7, #6]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f005 f9c1 	bl	80112b0 <pif_Delay1ms>
            actBuzzerAction(PIF_ID_BUZZER, OFF);
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f44f 7098 	mov.w	r0, #304	; 0x130
 800bf34:	f7f6 f8f8 	bl	8002128 <actBuzzerAction>
        for (i = 0; i < num; i++) {
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	73fb      	strb	r3, [r7, #15]
 800bf3e:	7bfa      	ldrb	r2, [r7, #15]
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d3e7      	bcc.n	800bf16 <blinkLED+0x1e>
        }
        pif_Delay1ms(60);
 800bf46:	203c      	movs	r0, #60	; 0x3c
 800bf48:	f005 f9b2 	bl	80112b0 <pif_Delay1ms>
    for (r = 0; r < repeat; r++) {
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	73bb      	strb	r3, [r7, #14]
 800bf52:	7bba      	ldrb	r2, [r7, #14]
 800bf54:	797b      	ldrb	r3, [r7, #5]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d3da      	bcc.n	800bf10 <blinkLED+0x18>
    }
}
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	0000      	movs	r0, r0
	...

0800bf68 <annexCode>:

void annexCode(void)
{
 800bf68:	b590      	push	{r4, r7, lr}
 800bf6a:	b08b      	sub	sp, #44	; 0x2c
 800bf6c:	af00      	add	r7, sp, #0
    int32_t tmp, tmp2;
    int32_t axis, prop1, prop2;
    static uint16_t MaxBrkpoint = 300; // Max angle of APA

    if (!f.FIXED_WING) { // Baseflight original dynamic PID adjustemnt
 800bf6e:	4b98      	ldr	r3, [pc, #608]	; (800c1d0 <annexCode+0x268>)
 800bf70:	7c1b      	ldrb	r3, [r3, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d12e      	bne.n	800bfd4 <annexCode+0x6c>
        // PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800bf76:	4b97      	ldr	r3, [pc, #604]	; (800c1d4 <annexCode+0x26c>)
 800bf78:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	4b96      	ldr	r3, [pc, #600]	; (800c1d8 <annexCode+0x270>)
 800bf80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf82:	429a      	cmp	r2, r3
 800bf84:	da02      	bge.n	800bf8c <annexCode+0x24>
            prop2 = 100;
 800bf86:	2364      	movs	r3, #100	; 0x64
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	e07b      	b.n	800c084 <annexCode+0x11c>
        } else {
            if (rcData[THROTTLE] < 2000) {
 800bf8c:	4b91      	ldr	r3, [pc, #580]	; (800c1d4 <annexCode+0x26c>)
 800bf8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bf92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bf96:	da16      	bge.n	800bfc6 <annexCode+0x5e>
                prop2 = 100 - (uint16_t)cfg.dynThrPID * (rcData[THROTTLE] - cfg.tpa_breakpoint) / (2000 - cfg.tpa_breakpoint);
 800bf98:	4b8f      	ldr	r3, [pc, #572]	; (800c1d8 <annexCode+0x270>)
 800bf9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	4b8c      	ldr	r3, [pc, #560]	; (800c1d4 <annexCode+0x26c>)
 800bfa2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4b8b      	ldr	r3, [pc, #556]	; (800c1d8 <annexCode+0x270>)
 800bfaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfac:	1acb      	subs	r3, r1, r3
 800bfae:	fb03 f202 	mul.w	r2, r3, r2
 800bfb2:	4b89      	ldr	r3, [pc, #548]	; (800c1d8 <annexCode+0x270>)
 800bfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb6:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800bfba:	fb92 f3f3 	sdiv	r3, r2, r3
 800bfbe:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800bfc2:	61bb      	str	r3, [r7, #24]
 800bfc4:	e05e      	b.n	800c084 <annexCode+0x11c>
            } else {
                prop2 = 100 - cfg.dynThrPID;
 800bfc6:	4b84      	ldr	r3, [pc, #528]	; (800c1d8 <annexCode+0x270>)
 800bfc8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bfcc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800bfd0:	61bb      	str	r3, [r7, #24]
 800bfd2:	e057      	b.n	800c084 <annexCode+0x11c>
            }
        }
    } else {
        // Throttle & Angle combined PID Attenuation
        // Will dampen the PID's in High speeds dive on Fixed Wing Only
        prop2 = 128; // prop2 was 100, is 128 now
 800bfd4:	2380      	movs	r3, #128	; 0x80
 800bfd6:	61bb      	str	r3, [r7, #24]
        if (rcData[THROTTLE] < cfg.tpa_breakpoint) {
 800bfd8:	4b7e      	ldr	r3, [pc, #504]	; (800c1d4 <annexCode+0x26c>)
 800bfda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	4b7d      	ldr	r3, [pc, #500]	; (800c1d8 <annexCode+0x270>)
 800bfe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	da02      	bge.n	800bfee <annexCode+0x86>
            prop2 = 128; // Higher prop2 for Fixed wing Same as used in MWii
 800bfe8:	2380      	movs	r3, #128	; 0x80
 800bfea:	61bb      	str	r3, [r7, #24]
 800bfec:	e028      	b.n	800c040 <annexCode+0xd8>
        } else {
            if (rcCommand[THROTTLE] > cfg.dynThrPID) { // Using rcCommand() to include Tpa even in Gps modes.
 800bfee:	4b7b      	ldr	r3, [pc, #492]	; (800c1dc <annexCode+0x274>)
 800bff0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bff4:	461a      	mov	r2, r3
 800bff6:	4b78      	ldr	r3, [pc, #480]	; (800c1d8 <annexCode+0x270>)
 800bff8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bffc:	429a      	cmp	r2, r3
 800bffe:	dd1f      	ble.n	800c040 <annexCode+0xd8>
                if (rcCommand[THROTTLE] < 2000) {
 800c000:	4b76      	ldr	r3, [pc, #472]	; (800c1dc <annexCode+0x274>)
 800c002:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c006:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c00a:	da12      	bge.n	800c032 <annexCode+0xca>
                    prop2 -=  ((uint16_t)cfg.dynThrPID * (rcCommand[THROTTLE] - cfg.dynThrPID) >> 9);
 800c00c:	4b72      	ldr	r3, [pc, #456]	; (800c1d8 <annexCode+0x270>)
 800c00e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c012:	461a      	mov	r2, r3
 800c014:	4b71      	ldr	r3, [pc, #452]	; (800c1dc <annexCode+0x274>)
 800c016:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c01a:	4619      	mov	r1, r3
 800c01c:	4b6e      	ldr	r3, [pc, #440]	; (800c1d8 <annexCode+0x270>)
 800c01e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c022:	1acb      	subs	r3, r1, r3
 800c024:	fb02 f303 	mul.w	r3, r2, r3
 800c028:	125b      	asrs	r3, r3, #9
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	61bb      	str	r3, [r7, #24]
 800c030:	e006      	b.n	800c040 <annexCode+0xd8>
                } else {
                    prop2 -=  cfg.dynThrPID;
 800c032:	4b69      	ldr	r3, [pc, #420]	; (800c1d8 <annexCode+0x270>)
 800c034:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c038:	461a      	mov	r2, r3
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	1a9b      	subs	r3, r3, r2
 800c03e:	61bb      	str	r3, [r7, #24]
                }
            }
        }
        // APA dynamic PID adjustemnt, depending on Angle of attack
        if (angle[1] > 20)
 800c040:	4b67      	ldr	r3, [pc, #412]	; (800c1e0 <annexCode+0x278>)
 800c042:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c046:	2b14      	cmp	r3, #20
 800c048:	dd12      	ble.n	800c070 <annexCode+0x108>
            prop2 -= ((uint16_t)cfg.dynThrPID * (min(angle[1], MaxBrkpoint)) >> 8);
 800c04a:	4b63      	ldr	r3, [pc, #396]	; (800c1d8 <annexCode+0x270>)
 800c04c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c050:	461a      	mov	r2, r3
 800c052:	4b64      	ldr	r3, [pc, #400]	; (800c1e4 <annexCode+0x27c>)
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	4619      	mov	r1, r3
 800c058:	4b61      	ldr	r3, [pc, #388]	; (800c1e0 <annexCode+0x278>)
 800c05a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c05e:	428b      	cmp	r3, r1
 800c060:	bfa8      	it	ge
 800c062:	460b      	movge	r3, r1
 800c064:	fb02 f303 	mul.w	r3, r2, r3
 800c068:	121b      	asrs	r3, r3, #8
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	61bb      	str	r3, [r7, #24]
        prop2 = max((128 - cfg.dynThrPID), prop2);
 800c070:	4b59      	ldr	r3, [pc, #356]	; (800c1d8 <annexCode+0x270>)
 800c072:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c076:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	4293      	cmp	r3, r2
 800c07e:	bfb8      	it	lt
 800c080:	4613      	movlt	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
    }


    for (axis = 0; axis < 3; axis++) {
 800c084:	2300      	movs	r3, #0
 800c086:	623b      	str	r3, [r7, #32]
 800c088:	e131      	b.n	800c2ee <annexCode+0x386>
        tmp = min(abs(rcData[axis] - mcfg.midrc), 500);
 800c08a:	4a52      	ldr	r2, [pc, #328]	; (800c1d4 <annexCode+0x26c>)
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c092:	461a      	mov	r2, r3
 800c094:	4b54      	ldr	r3, [pc, #336]	; (800c1e8 <annexCode+0x280>)
 800c096:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800c0a0:	dd18      	ble.n	800c0d4 <annexCode+0x16c>
 800c0a2:	4a4c      	ldr	r2, [pc, #304]	; (800c1d4 <annexCode+0x26c>)
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	4b4e      	ldr	r3, [pc, #312]	; (800c1e8 <annexCode+0x280>)
 800c0ae:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c0b8:	da0c      	bge.n	800c0d4 <annexCode+0x16c>
 800c0ba:	4a46      	ldr	r2, [pc, #280]	; (800c1d4 <annexCode+0x26c>)
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	4b48      	ldr	r3, [pc, #288]	; (800c1e8 <annexCode+0x280>)
 800c0c6:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	bfb8      	it	lt
 800c0d0:	425b      	neglt	r3, r3
 800c0d2:	e001      	b.n	800c0d8 <annexCode+0x170>
 800c0d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
        if (axis != 2) {        // ROLL & PITCH
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d063      	beq.n	800c1a8 <annexCode+0x240>
            if (cfg.deadband) {
 800c0e0:	4b3d      	ldr	r3, [pc, #244]	; (800c1d8 <annexCode+0x270>)
 800c0e2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d010      	beq.n	800c10c <annexCode+0x1a4>
                if (tmp > cfg.deadband) {
 800c0ea:	4b3b      	ldr	r3, [pc, #236]	; (800c1d8 <annexCode+0x270>)
 800c0ec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	dd07      	ble.n	800c108 <annexCode+0x1a0>
                    tmp -= cfg.deadband;
 800c0f8:	4b37      	ldr	r3, [pc, #220]	; (800c1d8 <annexCode+0x270>)
 800c0fa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c0fe:	461a      	mov	r2, r3
 800c100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	627b      	str	r3, [r7, #36]	; 0x24
 800c106:	e001      	b.n	800c10c <annexCode+0x1a4>
                } else {
                    tmp = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }

            tmp2 = tmp / 100;
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	4a37      	ldr	r2, [pc, #220]	; (800c1ec <annexCode+0x284>)
 800c110:	fb82 1203 	smull	r1, r2, r2, r3
 800c114:	1152      	asrs	r2, r2, #5
 800c116:	17db      	asrs	r3, r3, #31
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	617b      	str	r3, [r7, #20]
            rcCommand[axis] = lookupPitchRollRC[tmp2] + (tmp - tmp2 * 100) * (lookupPitchRollRC[tmp2 + 1] - lookupPitchRollRC[tmp2]) / 100;
 800c11c:	4a34      	ldr	r2, [pc, #208]	; (800c1f0 <annexCode+0x288>)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c124:	b29a      	uxth	r2, r3
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c12c:	fb03 f101 	mul.w	r1, r3, r1
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	440b      	add	r3, r1
 800c134:	6979      	ldr	r1, [r7, #20]
 800c136:	3101      	adds	r1, #1
 800c138:	482d      	ldr	r0, [pc, #180]	; (800c1f0 <annexCode+0x288>)
 800c13a:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c13e:	460c      	mov	r4, r1
 800c140:	482b      	ldr	r0, [pc, #172]	; (800c1f0 <annexCode+0x288>)
 800c142:	6979      	ldr	r1, [r7, #20]
 800c144:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c148:	1a61      	subs	r1, r4, r1
 800c14a:	fb01 f303 	mul.w	r3, r1, r3
 800c14e:	4927      	ldr	r1, [pc, #156]	; (800c1ec <annexCode+0x284>)
 800c150:	fb81 0103 	smull	r0, r1, r1, r3
 800c154:	1149      	asrs	r1, r1, #5
 800c156:	17db      	asrs	r3, r3, #31
 800c158:	1acb      	subs	r3, r1, r3
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	4413      	add	r3, r2
 800c15e:	b29b      	uxth	r3, r3
 800c160:	b219      	sxth	r1, r3
 800c162:	4a1e      	ldr	r2, [pc, #120]	; (800c1dc <annexCode+0x274>)
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.rollPitchRate[axis] * tmp / 500;
 800c16a:	4a1b      	ldr	r2, [pc, #108]	; (800c1d8 <annexCode+0x270>)
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	4413      	add	r3, r2
 800c170:	3323      	adds	r3, #35	; 0x23
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	fb02 f303 	mul.w	r3, r2, r3
 800c17c:	4a1d      	ldr	r2, [pc, #116]	; (800c1f4 <annexCode+0x28c>)
 800c17e:	fb82 1203 	smull	r1, r2, r2, r3
 800c182:	1152      	asrs	r2, r2, #5
 800c184:	17db      	asrs	r3, r3, #31
 800c186:	1a9b      	subs	r3, r3, r2
 800c188:	3364      	adds	r3, #100	; 0x64
 800c18a:	61fb      	str	r3, [r7, #28]
            prop1 = (uint16_t)prop1 * prop2 / 100;
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	fb02 f303 	mul.w	r3, r2, r3
 800c198:	4a14      	ldr	r2, [pc, #80]	; (800c1ec <annexCode+0x284>)
 800c19a:	fb82 1203 	smull	r1, r2, r2, r3
 800c19e:	1152      	asrs	r2, r2, #5
 800c1a0:	17db      	asrs	r3, r3, #31
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	e04a      	b.n	800c23e <annexCode+0x2d6>
        } else {                // YAW
            if (cfg.yawdeadband) {
 800c1a8:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <annexCode+0x270>)
 800c1aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d024      	beq.n	800c1fc <annexCode+0x294>
                if (tmp > cfg.yawdeadband) {
 800c1b2:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <annexCode+0x270>)
 800c1b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	dd1b      	ble.n	800c1f8 <annexCode+0x290>
                    tmp -= cfg.yawdeadband;
 800c1c0:	4b05      	ldr	r3, [pc, #20]	; (800c1d8 <annexCode+0x270>)
 800c1c2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ca:	1a9b      	subs	r3, r3, r2
 800c1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c1ce:	e015      	b.n	800c1fc <annexCode+0x294>
 800c1d0:	200016b0 	.word	0x200016b0
 800c1d4:	200016e8 	.word	0x200016e8
 800c1d8:	20000db4 	.word	0x20000db4
 800c1dc:	2000170c 	.word	0x2000170c
 800c1e0:	20001458 	.word	0x20001458
 800c1e4:	20000056 	.word	0x20000056
 800c1e8:	20000848 	.word	0x20000848
 800c1ec:	51eb851f 	.word	0x51eb851f
 800c1f0:	20001714 	.word	0x20001714
 800c1f4:	10624dd3 	.word	0x10624dd3
                } else {
                    tmp = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
            rcCommand[axis] = tmp * -mcfg.yaw_control_direction;
 800c1fc:	4ba0      	ldr	r3, [pc, #640]	; (800c480 <annexCode+0x518>)
 800c1fe:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800c202:	425b      	negs	r3, r3
 800c204:	b29a      	uxth	r2, r3
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	b29b      	uxth	r3, r3
 800c20a:	fb12 f303 	smulbb	r3, r2, r3
 800c20e:	b29b      	uxth	r3, r3
 800c210:	b219      	sxth	r1, r3
 800c212:	4a9c      	ldr	r2, [pc, #624]	; (800c484 <annexCode+0x51c>)
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            prop1 = 100 - (uint16_t)cfg.yawRate * abs(tmp) / 500;
 800c21a:	4b9b      	ldr	r3, [pc, #620]	; (800c488 <annexCode+0x520>)
 800c21c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c220:	461a      	mov	r2, r3
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	2b00      	cmp	r3, #0
 800c226:	bfb8      	it	lt
 800c228:	425b      	neglt	r3, r3
 800c22a:	fb02 f303 	mul.w	r3, r2, r3
 800c22e:	4a97      	ldr	r2, [pc, #604]	; (800c48c <annexCode+0x524>)
 800c230:	fb82 1203 	smull	r1, r2, r2, r3
 800c234:	1152      	asrs	r2, r2, #5
 800c236:	17db      	asrs	r3, r3, #31
 800c238:	1a9b      	subs	r3, r3, r2
 800c23a:	3364      	adds	r3, #100	; 0x64
 800c23c:	61fb      	str	r3, [r7, #28]
        }
        dynP8[axis] = (uint16_t)cfg.P8[axis] * prop1 / 100;
 800c23e:	4a92      	ldr	r2, [pc, #584]	; (800c488 <annexCode+0x520>)
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	4413      	add	r3, r2
 800c244:	3301      	adds	r3, #1
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	461a      	mov	r2, r3
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	fb02 f303 	mul.w	r3, r2, r3
 800c250:	4a8f      	ldr	r2, [pc, #572]	; (800c490 <annexCode+0x528>)
 800c252:	fb82 1203 	smull	r1, r2, r2, r3
 800c256:	1152      	asrs	r2, r2, #5
 800c258:	17db      	asrs	r3, r3, #31
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	b2d9      	uxtb	r1, r3
 800c25e:	4a8d      	ldr	r2, [pc, #564]	; (800c494 <annexCode+0x52c>)
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	4413      	add	r3, r2
 800c264:	460a      	mov	r2, r1
 800c266:	701a      	strb	r2, [r3, #0]
        dynI8[axis] = (uint16_t)cfg.I8[axis] * prop1 / 100;
 800c268:	4a87      	ldr	r2, [pc, #540]	; (800c488 <annexCode+0x520>)
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	4413      	add	r3, r2
 800c26e:	330b      	adds	r3, #11
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	4a85      	ldr	r2, [pc, #532]	; (800c490 <annexCode+0x528>)
 800c27c:	fb82 1203 	smull	r1, r2, r2, r3
 800c280:	1152      	asrs	r2, r2, #5
 800c282:	17db      	asrs	r3, r3, #31
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	b2d9      	uxtb	r1, r3
 800c288:	4a83      	ldr	r2, [pc, #524]	; (800c498 <annexCode+0x530>)
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	4413      	add	r3, r2
 800c28e:	460a      	mov	r2, r1
 800c290:	701a      	strb	r2, [r3, #0]
        dynD8[axis] = (uint16_t)cfg.D8[axis] * prop1 / 100;
 800c292:	4a7d      	ldr	r2, [pc, #500]	; (800c488 <annexCode+0x520>)
 800c294:	6a3b      	ldr	r3, [r7, #32]
 800c296:	4413      	add	r3, r2
 800c298:	3315      	adds	r3, #21
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	461a      	mov	r2, r3
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	fb02 f303 	mul.w	r3, r2, r3
 800c2a4:	4a7a      	ldr	r2, [pc, #488]	; (800c490 <annexCode+0x528>)
 800c2a6:	fb82 1203 	smull	r1, r2, r2, r3
 800c2aa:	1152      	asrs	r2, r2, #5
 800c2ac:	17db      	asrs	r3, r3, #31
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	b2d9      	uxtb	r1, r3
 800c2b2:	4a7a      	ldr	r2, [pc, #488]	; (800c49c <annexCode+0x534>)
 800c2b4:	6a3b      	ldr	r3, [r7, #32]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	460a      	mov	r2, r1
 800c2ba:	701a      	strb	r2, [r3, #0]
        if (rcData[axis] < mcfg.midrc)
 800c2bc:	4a78      	ldr	r2, [pc, #480]	; (800c4a0 <annexCode+0x538>)
 800c2be:	6a3b      	ldr	r3, [r7, #32]
 800c2c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	4b6e      	ldr	r3, [pc, #440]	; (800c480 <annexCode+0x518>)
 800c2c8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	da0b      	bge.n	800c2e8 <annexCode+0x380>
            rcCommand[axis] = -rcCommand[axis];
 800c2d0:	4a6c      	ldr	r2, [pc, #432]	; (800c484 <annexCode+0x51c>)
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	425b      	negs	r3, r3
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	b219      	sxth	r1, r3
 800c2e0:	4a68      	ldr	r2, [pc, #416]	; (800c484 <annexCode+0x51c>)
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	623b      	str	r3, [r7, #32]
 800c2ee:	6a3b      	ldr	r3, [r7, #32]
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	f77f aeca 	ble.w	800c08a <annexCode+0x122>
    }

    tmp = constrain(rcData[THROTTLE], mcfg.mincheck, 2000);
 800c2f6:	4b6a      	ldr	r3, [pc, #424]	; (800c4a0 <annexCode+0x538>)
 800c2f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	4b60      	ldr	r3, [pc, #384]	; (800c480 <annexCode+0x518>)
 800c300:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c304:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c308:	4619      	mov	r1, r3
 800c30a:	f7f7 fc7d 	bl	8003c08 <constrain>
 800c30e:	6278      	str	r0, [r7, #36]	; 0x24
    tmp = (uint32_t)(tmp - mcfg.mincheck) * 1000 / (2000 - mcfg.mincheck);       // [MINCHECK;2000] -> [0;1000]
 800c310:	4b5b      	ldr	r3, [pc, #364]	; (800c480 <annexCode+0x518>)
 800c312:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800c316:	461a      	mov	r2, r3
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	461a      	mov	r2, r3
 800c31e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c322:	fb02 f303 	mul.w	r3, r2, r3
 800c326:	4a56      	ldr	r2, [pc, #344]	; (800c480 <annexCode+0x518>)
 800c328:	f8b2 219a 	ldrh.w	r2, [r2, #410]	; 0x19a
 800c32c:	f5c2 62fa 	rsb	r2, r2, #2000	; 0x7d0
 800c330:	fbb3 f3f2 	udiv	r3, r3, r2
 800c334:	627b      	str	r3, [r7, #36]	; 0x24
    tmp2 = tmp / 100;
 800c336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c338:	4a55      	ldr	r2, [pc, #340]	; (800c490 <annexCode+0x528>)
 800c33a:	fb82 1203 	smull	r1, r2, r2, r3
 800c33e:	1152      	asrs	r2, r2, #5
 800c340:	17db      	asrs	r3, r3, #31
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	617b      	str	r3, [r7, #20]
    rcCommand[THROTTLE] = lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrottleRC[tmp2]) / 100;    // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 800c346:	4a57      	ldr	r2, [pc, #348]	; (800c4a4 <annexCode+0x53c>)
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c34e:	b29a      	uxth	r2, r3
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800c356:	fb03 f101 	mul.w	r1, r3, r1
 800c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35c:	440b      	add	r3, r1
 800c35e:	6979      	ldr	r1, [r7, #20]
 800c360:	3101      	adds	r1, #1
 800c362:	4850      	ldr	r0, [pc, #320]	; (800c4a4 <annexCode+0x53c>)
 800c364:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c368:	460c      	mov	r4, r1
 800c36a:	484e      	ldr	r0, [pc, #312]	; (800c4a4 <annexCode+0x53c>)
 800c36c:	6979      	ldr	r1, [r7, #20]
 800c36e:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800c372:	1a61      	subs	r1, r4, r1
 800c374:	fb01 f303 	mul.w	r3, r1, r3
 800c378:	4945      	ldr	r1, [pc, #276]	; (800c490 <annexCode+0x528>)
 800c37a:	fb81 0103 	smull	r0, r1, r1, r3
 800c37e:	1149      	asrs	r1, r1, #5
 800c380:	17db      	asrs	r3, r3, #31
 800c382:	1acb      	subs	r3, r1, r3
 800c384:	b29b      	uxth	r3, r3
 800c386:	4413      	add	r3, r2
 800c388:	b29b      	uxth	r3, r3
 800c38a:	b21a      	sxth	r2, r3
 800c38c:	4b3d      	ldr	r3, [pc, #244]	; (800c484 <annexCode+0x51c>)
 800c38e:	80da      	strh	r2, [r3, #6]

    if (f.HEADFREE_MODE) {
 800c390:	4b45      	ldr	r3, [pc, #276]	; (800c4a8 <annexCode+0x540>)
 800c392:	7a5b      	ldrb	r3, [r3, #9]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d06b      	beq.n	800c470 <annexCode+0x508>
        float radDiff = (heading - headFreeModeHold) * M_PI / 180.0f;
 800c398:	4b44      	ldr	r3, [pc, #272]	; (800c4ac <annexCode+0x544>)
 800c39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c39e:	461a      	mov	r2, r3
 800c3a0:	4b43      	ldr	r3, [pc, #268]	; (800c4b0 <annexCode+0x548>)
 800c3a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c3a6:	1ad3      	subs	r3, r2, r3
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7f4 f86f 	bl	800048c <__aeabi_i2d>
 800c3ae:	a332      	add	r3, pc, #200	; (adr r3, 800c478 <annexCode+0x510>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	f7f4 f8d4 	bl	8000560 <__aeabi_dmul>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f04f 0200 	mov.w	r2, #0
 800c3c4:	4b3b      	ldr	r3, [pc, #236]	; (800c4b4 <annexCode+0x54c>)
 800c3c6:	f7f4 f9f5 	bl	80007b4 <__aeabi_ddiv>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	f7f4 fba7 	bl	8000b24 <__aeabi_d2f>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	613b      	str	r3, [r7, #16]
        float cosDiff = cosf(radDiff);
 800c3da:	ed97 0a04 	vldr	s0, [r7, #16]
 800c3de:	f017 f9e3 	bl	80237a8 <cosf>
 800c3e2:	ed87 0a03 	vstr	s0, [r7, #12]
        float sinDiff = sinf(radDiff);
 800c3e6:	ed97 0a04 	vldr	s0, [r7, #16]
 800c3ea:	f017 fa61 	bl	80238b0 <sinf>
 800c3ee:	ed87 0a02 	vstr	s0, [r7, #8]
        int16_t rcCommand_PITCH = rcCommand[PITCH] * cosDiff + rcCommand[ROLL] * sinDiff;
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <annexCode+0x51c>)
 800c3f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c3f8:	ee07 3a90 	vmov	s15, r3
 800c3fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c400:	edd7 7a03 	vldr	s15, [r7, #12]
 800c404:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c408:	4b1e      	ldr	r3, [pc, #120]	; (800c484 <annexCode+0x51c>)
 800c40a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c40e:	ee07 3a90 	vmov	s15, r3
 800c412:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c416:	edd7 7a02 	vldr	s15, [r7, #8]
 800c41a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c426:	ee17 3a90 	vmov	r3, s15
 800c42a:	80fb      	strh	r3, [r7, #6]
        rcCommand[ROLL] = rcCommand[ROLL] * cosDiff - rcCommand[PITCH] * sinDiff;
 800c42c:	4b15      	ldr	r3, [pc, #84]	; (800c484 <annexCode+0x51c>)
 800c42e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c43a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c43e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c442:	4b10      	ldr	r3, [pc, #64]	; (800c484 <annexCode+0x51c>)
 800c444:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c448:	ee07 3a90 	vmov	s15, r3
 800c44c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c450:	edd7 7a02 	vldr	s15, [r7, #8]
 800c454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c45c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c460:	ee17 3a90 	vmov	r3, s15
 800c464:	b21a      	sxth	r2, r3
 800c466:	4b07      	ldr	r3, [pc, #28]	; (800c484 <annexCode+0x51c>)
 800c468:	801a      	strh	r2, [r3, #0]
        rcCommand[PITCH] = rcCommand_PITCH;
 800c46a:	4a06      	ldr	r2, [pc, #24]	; (800c484 <annexCode+0x51c>)
 800c46c:	88fb      	ldrh	r3, [r7, #6]
 800c46e:	8053      	strh	r3, [r2, #2]
    }
}
 800c470:	bf00      	nop
 800c472:	372c      	adds	r7, #44	; 0x2c
 800c474:	46bd      	mov	sp, r7
 800c476:	bd90      	pop	{r4, r7, pc}
 800c478:	54442d18 	.word	0x54442d18
 800c47c:	400921fb 	.word	0x400921fb
 800c480:	20000848 	.word	0x20000848
 800c484:	2000170c 	.word	0x2000170c
 800c488:	20000db4 	.word	0x20000db4
 800c48c:	10624dd3 	.word	0x10624dd3
 800c490:	51eb851f 	.word	0x51eb851f
 800c494:	20001744 	.word	0x20001744
 800c498:	20001748 	.word	0x20001748
 800c49c:	2000174c 	.word	0x2000174c
 800c4a0:	200016e8 	.word	0x200016e8
 800c4a4:	20001724 	.word	0x20001724
 800c4a8:	200016b0 	.word	0x200016b0
 800c4ac:	200019e6 	.word	0x200019e6
 800c4b0:	200016d2 	.word	0x200016d2
 800c4b4:	40668000 	.word	0x40668000

0800c4b8 <taskLedState>:

uint16_t taskLedState(PifTask *p_task)
{
 800c4b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c4bc:	b082      	sub	sp, #8
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
    static int64_t mAhdrawnRaw = 0;
    static int32_t vbatCycleTime = 0;

    (void)p_task;

    if (feature(FEATURE_VBAT)) {
 800c4c2:	2002      	movs	r0, #2
 800c4c4:	f7fa fd04 	bl	8006ed0 <feature>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 80bb 	beq.w	800c646 <taskLedState+0x18e>
        vbatCycleTime += cycleTime;
 800c4d0:	4b91      	ldr	r3, [pc, #580]	; (800c718 <taskLedState+0x260>)
 800c4d2:	881b      	ldrh	r3, [r3, #0]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	4b91      	ldr	r3, [pc, #580]	; (800c71c <taskLedState+0x264>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4413      	add	r3, r2
 800c4dc:	4a8f      	ldr	r2, [pc, #572]	; (800c71c <taskLedState+0x264>)
 800c4de:	6013      	str	r3, [r2, #0]
        if (!(++vbatTimer % VBATFREQ)) {
 800c4e0:	4b8f      	ldr	r3, [pc, #572]	; (800c720 <taskLedState+0x268>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	4b8d      	ldr	r3, [pc, #564]	; (800c720 <taskLedState+0x268>)
 800c4ea:	701a      	strb	r2, [r3, #0]
 800c4ec:	4b8c      	ldr	r3, [pc, #560]	; (800c720 <taskLedState+0x268>)
 800c4ee:	781a      	ldrb	r2, [r3, #0]
 800c4f0:	4b8c      	ldr	r3, [pc, #560]	; (800c724 <taskLedState+0x26c>)
 800c4f2:	fba3 1302 	umull	r1, r3, r3, r2
 800c4f6:	0899      	lsrs	r1, r3, #2
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	440b      	add	r3, r1
 800c4fe:	005b      	lsls	r3, r3, #1
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b00      	cmp	r3, #0
 800c506:	f040 808b 	bne.w	800c620 <taskLedState+0x168>
            vbatRaw -= vbatRaw / 8;
 800c50a:	4b87      	ldr	r3, [pc, #540]	; (800c728 <taskLedState+0x270>)
 800c50c:	ed93 7a00 	vldr	s14, [r3]
 800c510:	4b85      	ldr	r3, [pc, #532]	; (800c728 <taskLedState+0x270>)
 800c512:	edd3 6a00 	vldr	s13, [r3]
 800c516:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
 800c51a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c51e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c522:	4b81      	ldr	r3, [pc, #516]	; (800c728 <taskLedState+0x270>)
 800c524:	edc3 7a00 	vstr	s15, [r3]
            vbatRaw += actGetBatteryVoltage() * mcfg.vbatscale;
 800c528:	f7f4 fe50 	bl	80011cc <actGetBatteryVoltage>
 800c52c:	eeb0 7a40 	vmov.f32	s14, s0
 800c530:	4b7e      	ldr	r3, [pc, #504]	; (800c72c <taskLedState+0x274>)
 800c532:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800c536:	ee07 3a90 	vmov	s15, r3
 800c53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c542:	4b79      	ldr	r3, [pc, #484]	; (800c728 <taskLedState+0x270>)
 800c544:	edd3 7a00 	vldr	s15, [r3]
 800c548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c54c:	4b76      	ldr	r3, [pc, #472]	; (800c728 <taskLedState+0x270>)
 800c54e:	edc3 7a00 	vstr	s15, [r3]
            vbat = vbatRaw / 8;
 800c552:	4b75      	ldr	r3, [pc, #468]	; (800c728 <taskLedState+0x270>)
 800c554:	ed93 7a00 	vldr	s14, [r3]
 800c558:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800c55c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c564:	ee17 3a90 	vmov	r3, s15
 800c568:	b29a      	uxth	r2, r3
 800c56a:	4b71      	ldr	r3, [pc, #452]	; (800c730 <taskLedState+0x278>)
 800c56c:	801a      	strh	r2, [r3, #0]

            if (mcfg.power_adc_channel > 0) {
 800c56e:	4b6f      	ldr	r3, [pc, #444]	; (800c72c <taskLedState+0x274>)
 800c570:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 800c574:	2b00      	cmp	r3, #0
 800c576:	d053      	beq.n	800c620 <taskLedState+0x168>
                amperageRaw -= amperageRaw / 8;
 800c578:	4b6e      	ldr	r3, [pc, #440]	; (800c734 <taskLedState+0x27c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	da00      	bge.n	800c582 <taskLedState+0xca>
 800c580:	3307      	adds	r3, #7
 800c582:	10db      	asrs	r3, r3, #3
 800c584:	425b      	negs	r3, r3
 800c586:	461a      	mov	r2, r3
 800c588:	4b6a      	ldr	r3, [pc, #424]	; (800c734 <taskLedState+0x27c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4413      	add	r3, r2
 800c58e:	4a69      	ldr	r2, [pc, #420]	; (800c734 <taskLedState+0x27c>)
 800c590:	6013      	str	r3, [r2, #0]
                amperageRaw += (actGetBatteryCurrent() - mcfg.currentoffset) * 1000 / (int32_t)mcfg.currentscale; // current in 0.01A steps
 800c592:	f7f4 fe39 	bl	8001208 <actGetBatteryCurrent>
 800c596:	4603      	mov	r3, r0
 800c598:	4a64      	ldr	r2, [pc, #400]	; (800c72c <taskLedState+0x274>)
 800c59a:	f8b2 217a 	ldrh.w	r2, [r2, #378]	; 0x17a
 800c59e:	1a9b      	subs	r3, r3, r2
 800c5a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5a4:	fb02 f303 	mul.w	r3, r2, r3
 800c5a8:	4a60      	ldr	r2, [pc, #384]	; (800c72c <taskLedState+0x274>)
 800c5aa:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
 800c5ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5b2:	4a60      	ldr	r2, [pc, #384]	; (800c734 <taskLedState+0x27c>)
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	4b5e      	ldr	r3, [pc, #376]	; (800c734 <taskLedState+0x27c>)
 800c5bc:	601a      	str	r2, [r3, #0]
                amperage = amperageRaw / 8;
 800c5be:	4b5d      	ldr	r3, [pc, #372]	; (800c734 <taskLedState+0x27c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da00      	bge.n	800c5c8 <taskLedState+0x110>
 800c5c6:	3307      	adds	r3, #7
 800c5c8:	10db      	asrs	r3, r3, #3
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	4b5a      	ldr	r3, [pc, #360]	; (800c738 <taskLedState+0x280>)
 800c5ce:	601a      	str	r2, [r3, #0]
                mAhdrawnRaw += (amperage * vbatCycleTime) / 1000;
 800c5d0:	4b59      	ldr	r3, [pc, #356]	; (800c738 <taskLedState+0x280>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a51      	ldr	r2, [pc, #324]	; (800c71c <taskLedState+0x264>)
 800c5d6:	6812      	ldr	r2, [r2, #0]
 800c5d8:	fb02 f303 	mul.w	r3, r2, r3
 800c5dc:	4a57      	ldr	r2, [pc, #348]	; (800c73c <taskLedState+0x284>)
 800c5de:	fb82 1203 	smull	r1, r2, r2, r3
 800c5e2:	1192      	asrs	r2, r2, #6
 800c5e4:	17db      	asrs	r3, r3, #31
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	17da      	asrs	r2, r3, #31
 800c5ea:	461c      	mov	r4, r3
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	4b54      	ldr	r3, [pc, #336]	; (800c740 <taskLedState+0x288>)
 800c5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f4:	eb14 0802 	adds.w	r8, r4, r2
 800c5f8:	eb45 0903 	adc.w	r9, r5, r3
 800c5fc:	4b50      	ldr	r3, [pc, #320]	; (800c740 <taskLedState+0x288>)
 800c5fe:	e9c3 8900 	strd	r8, r9, [r3]
                mAhdrawn = mAhdrawnRaw / (3600 * 100);
 800c602:	4b4f      	ldr	r3, [pc, #316]	; (800c740 <taskLedState+0x288>)
 800c604:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c608:	4a4e      	ldr	r2, [pc, #312]	; (800c744 <taskLedState+0x28c>)
 800c60a:	f04f 0300 	mov.w	r3, #0
 800c60e:	f7f4 fbe7 	bl	8000de0 <__aeabi_ldivmod>
 800c612:	4602      	mov	r2, r0
 800c614:	460b      	mov	r3, r1
 800c616:	4b4c      	ldr	r3, [pc, #304]	; (800c748 <taskLedState+0x290>)
 800c618:	601a      	str	r2, [r3, #0]
                vbatCycleTime = 0;
 800c61a:	4b40      	ldr	r3, [pc, #256]	; (800c71c <taskLedState+0x264>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	601a      	str	r2, [r3, #0]
            }

        }
        // Buzzers for low and critical battery levels
        if (vbat <= batteryCriticalVoltage)
 800c620:	4b43      	ldr	r3, [pc, #268]	; (800c730 <taskLedState+0x278>)
 800c622:	881a      	ldrh	r2, [r3, #0]
 800c624:	4b49      	ldr	r3, [pc, #292]	; (800c74c <taskLedState+0x294>)
 800c626:	881b      	ldrh	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d803      	bhi.n	800c634 <taskLedState+0x17c>
            buzzer(BUZZER_BAT_CRIT_LOW);     // Critically low battery
 800c62c:	2001      	movs	r0, #1
 800c62e:	f7f7 fc7b 	bl	8003f28 <buzzer>
 800c632:	e008      	b.n	800c646 <taskLedState+0x18e>
        else if (vbat <= batteryWarningVoltage)
 800c634:	4b3e      	ldr	r3, [pc, #248]	; (800c730 <taskLedState+0x278>)
 800c636:	881a      	ldrh	r2, [r3, #0]
 800c638:	4b45      	ldr	r3, [pc, #276]	; (800c750 <taskLedState+0x298>)
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d802      	bhi.n	800c646 <taskLedState+0x18e>
            buzzer(BUZZER_BAT_LOW);     // low battery
 800c640:	2002      	movs	r0, #2
 800c642:	f7f7 fc71 	bl	8003f28 <buzzer>
    }
    // update buzzer handler
    buzzerUpdate();
 800c646:	f7f7 fd5b 	bl	8004100 <buzzerUpdate>
    if (!cliMode && feature(FEATURE_TELEMETRY)) {
        handleTelemetry();
    }
#endif

    serialCom();
 800c64a:	f004 fbd7 	bl	8010dfc <serialCom>

    // Read out gyro temperature. can use it for something somewhere. maybe get MCU temperature instead? lots of fun possibilities.
    if (sensor_set.gyro.temperature)
 800c64e:	4b41      	ldr	r3, [pc, #260]	; (800c754 <taskLedState+0x29c>)
 800c650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c654:	2b00      	cmp	r3, #0
 800c656:	d005      	beq.n	800c664 <taskLedState+0x1ac>
        sensor_set.gyro.temperature(&sensor_set, &telemTemperature1);
 800c658:	4b3e      	ldr	r3, [pc, #248]	; (800c754 <taskLedState+0x29c>)
 800c65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c65e:	493e      	ldr	r1, [pc, #248]	; (800c758 <taskLedState+0x2a0>)
 800c660:	483c      	ldr	r0, [pc, #240]	; (800c754 <taskLedState+0x29c>)
 800c662:	4798      	blx	r3
    else {
        // TODO MCU temp
    }

    if ((calibratingA > 0 && sensors(SENSOR_ACC)) || (calibratingG > 0)) {      // Calibration phasis
 800c664:	4b3d      	ldr	r3, [pc, #244]	; (800c75c <taskLedState+0x2a4>)
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d005      	beq.n	800c678 <taskLedState+0x1c0>
 800c66c:	2002      	movs	r0, #2
 800c66e:	f7fa fbe7 	bl	8006e40 <sensors>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d103      	bne.n	800c680 <taskLedState+0x1c8>
 800c678:	4b39      	ldr	r3, [pc, #228]	; (800c760 <taskLedState+0x2a8>)
 800c67a:	881b      	ldrh	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <taskLedState+0x1ce>
        actLed0Toggle();
 800c680:	f7f5 fd10 	bl	80020a4 <actLed0Toggle>
 800c684:	e00d      	b.n	800c6a2 <taskLedState+0x1ea>
    } else {
        if (f.ACC_CALIBRATED)
 800c686:	4b37      	ldr	r3, [pc, #220]	; (800c764 <taskLedState+0x2ac>)
 800c688:	789b      	ldrb	r3, [r3, #2]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <taskLedState+0x1dc>
            actLed0State(OFF);
 800c68e:	2000      	movs	r0, #0
 800c690:	f7f5 fcf2 	bl	8002078 <actLed0State>
        if (f.ARMED)
 800c694:	4b33      	ldr	r3, [pc, #204]	; (800c764 <taskLedState+0x2ac>)
 800c696:	785b      	ldrb	r3, [r3, #1]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <taskLedState+0x1ea>
            actLed0State(ON);
 800c69c:	2001      	movs	r0, #1
 800c69e:	f7f5 fceb 	bl	8002078 <actLed0State>
        ledringState(heading, angle, f.ARMED);
    }
#endif

    static uint8_t AccCalibLed = 0;
    if (AccCalibLed) AccCalibLed--;
 800c6a2:	4b31      	ldr	r3, [pc, #196]	; (800c768 <taskLedState+0x2b0>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d006      	beq.n	800c6b8 <taskLedState+0x200>
 800c6aa:	4b2f      	ldr	r3, [pc, #188]	; (800c768 <taskLedState+0x2b0>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	4b2d      	ldr	r3, [pc, #180]	; (800c768 <taskLedState+0x2b0>)
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	e00f      	b.n	800c6d8 <taskLedState+0x220>
    else {
        if (!f.SMALL_ANGLE) {
 800c6b8:	4b2a      	ldr	r3, [pc, #168]	; (800c764 <taskLedState+0x2ac>)
 800c6ba:	7b5b      	ldrb	r3, [r3, #13]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d105      	bne.n	800c6cc <taskLedState+0x214>
            f.ACC_CALIBRATED = 0; // the multi uses ACC and is not calibrated or is too much inclinated
 800c6c0:	4b28      	ldr	r3, [pc, #160]	; (800c764 <taskLedState+0x2ac>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	709a      	strb	r2, [r3, #2]
            actLed0Toggle();
 800c6c6:	f7f5 fced 	bl	80020a4 <actLed0Toggle>
 800c6ca:	e002      	b.n	800c6d2 <taskLedState+0x21a>
        } else {
            f.ACC_CALIBRATED = 1;
 800c6cc:	4b25      	ldr	r3, [pc, #148]	; (800c764 <taskLedState+0x2ac>)
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	709a      	strb	r2, [r3, #2]
        }
        AccCalibLed = 10 - 1;       // 50ms * 10 = 500ms
 800c6d2:	4b25      	ldr	r3, [pc, #148]	; (800c768 <taskLedState+0x2b0>)
 800c6d4:	2209      	movs	r2, #9
 800c6d6:	701a      	strb	r2, [r3, #0]
    }

    if (sensors(SENSOR_GPS)) {
 800c6d8:	2020      	movs	r0, #32
 800c6da:	f7fa fbb1 	bl	8006e40 <sensors>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d013      	beq.n	800c70c <taskLedState+0x254>
        static uint8_t GPSLEDTime = 0;
        if (GPSLEDTime) GPSLEDTime--;
 800c6e4:	4b21      	ldr	r3, [pc, #132]	; (800c76c <taskLedState+0x2b4>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <taskLedState+0x242>
 800c6ec:	4b1f      	ldr	r3, [pc, #124]	; (800c76c <taskLedState+0x2b4>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	4b1d      	ldr	r3, [pc, #116]	; (800c76c <taskLedState+0x2b4>)
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e008      	b.n	800c70c <taskLedState+0x254>
        else {
            if (GPS_numSat >= 5) actLed1Toggle();
 800c6fa:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <taskLedState+0x2b8>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	d901      	bls.n	800c706 <taskLedState+0x24e>
 800c702:	f7f5 fcfb 	bl	80020fc <actLed1Toggle>
            GPSLEDTime = 3 - 1;     // 50ms * 3 = 150ms
 800c706:	4b19      	ldr	r3, [pc, #100]	; (800c76c <taskLedState+0x2b4>)
 800c708:	2202      	movs	r2, #2
 800c70a:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c718:	200016d0 	.word	0x200016d0
 800c71c:	20001874 	.word	0x20001874
 800c720:	20001878 	.word	0x20001878
 800c724:	aaaaaaab 	.word	0xaaaaaaab
 800c728:	2000187c 	.word	0x2000187c
 800c72c:	20000848 	.word	0x20000848
 800c730:	200016d4 	.word	0x200016d4
 800c734:	20001880 	.word	0x20001880
 800c738:	200016d8 	.word	0x200016d8
 800c73c:	10624dd3 	.word	0x10624dd3
 800c740:	20001888 	.word	0x20001888
 800c744:	00057e40 	.word	0x00057e40
 800c748:	200016dc 	.word	0x200016dc
 800c74c:	20001854 	.word	0x20001854
 800c750:	20001852 	.word	0x20001852
 800c754:	20000060 	.word	0x20000060
 800c758:	200016e0 	.word	0x200016e0
 800c75c:	200019e0 	.word	0x200019e0
 800c760:	200019e4 	.word	0x200019e4
 800c764:	200016b0 	.word	0x200016b0
 800c768:	20001890 	.word	0x20001890
 800c76c:	20001891 	.word	0x20001891
 800c770:	20001794 	.word	0x20001794

0800c774 <pwmReadRawRC>:

uint16_t pwmReadRawRC(uint8_t chan)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	71fb      	strb	r3, [r7, #7]
    return actPwmRead(mcfg.rcmap[chan]);
 800c77e:	79fb      	ldrb	r3, [r7, #7]
 800c780:	4a05      	ldr	r2, [pc, #20]	; (800c798 <pwmReadRawRC+0x24>)
 800c782:	4413      	add	r3, r2
 800c784:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800c788:	4618      	mov	r0, r3
 800c78a:	f7f5 fc09 	bl	8001fa0 <actPwmRead>
 800c78e:	4603      	mov	r3, r0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	20000848 	.word	0x20000848

0800c79c <computeRC>:

void computeRC(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
    uint16_t capture;
    int i, chan;

    if (feature(FEATURE_SERIALRX)) {
 800c7a2:	2008      	movs	r0, #8
 800c7a4:	f7fa fb94 	bl	8006ed0 <feature>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d019      	beq.n	800c7e2 <computeRC+0x46>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	607b      	str	r3, [r7, #4]
 800c7b2:	e00e      	b.n	800c7d2 <computeRC+0x36>
            rcData[chan] = rcReadRawFunc(chan);
 800c7b4:	4b41      	ldr	r3, [pc, #260]	; (800c8bc <computeRC+0x120>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	b219      	sxth	r1, r3
 800c7c4:	4a3e      	ldr	r2, [pc, #248]	; (800c8c0 <computeRC+0x124>)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	607b      	str	r3, [r7, #4]
 800c7d2:	4b3c      	ldr	r3, [pc, #240]	; (800c8c4 <computeRC+0x128>)
 800c7d4:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c7d8:	461a      	mov	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	dbe9      	blt.n	800c7b4 <computeRC+0x18>
                rcData[chan] += rcDataAverage[chan][i];
            rcData[chan] /= 4;
        }
        rcAverageIndex++;
    }
}
 800c7e0:	e068      	b.n	800c8b4 <computeRC+0x118>
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	607b      	str	r3, [r7, #4]
 800c7e6:	e059      	b.n	800c89c <computeRC+0x100>
            capture = rcReadRawFunc(chan);
 800c7e8:	4b34      	ldr	r3, [pc, #208]	; (800c8bc <computeRC+0x120>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	81fb      	strh	r3, [r7, #14]
            if (capture < PULSE_MIN || capture > PULSE_MAX)
 800c7f8:	89fb      	ldrh	r3, [r7, #14]
 800c7fa:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d904      	bls.n	800c80c <computeRC+0x70>
 800c802:	89fb      	ldrh	r3, [r7, #14]
 800c804:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800c808:	4293      	cmp	r3, r2
 800c80a:	d903      	bls.n	800c814 <computeRC+0x78>
                capture = mcfg.midrc;
 800c80c:	4b2d      	ldr	r3, [pc, #180]	; (800c8c4 <computeRC+0x128>)
 800c80e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800c812:	81fb      	strh	r3, [r7, #14]
            rcDataAverage[chan][rcAverageIndex % 4] = capture;
 800c814:	4b2c      	ldr	r3, [pc, #176]	; (800c8c8 <computeRC+0x12c>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	425a      	negs	r2, r3
 800c81a:	f003 0303 	and.w	r3, r3, #3
 800c81e:	f002 0203 	and.w	r2, r2, #3
 800c822:	bf58      	it	pl
 800c824:	4253      	negpl	r3, r2
 800c826:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800c82a:	4928      	ldr	r1, [pc, #160]	; (800c8cc <computeRC+0x130>)
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	0092      	lsls	r2, r2, #2
 800c830:	4413      	add	r3, r2
 800c832:	4602      	mov	r2, r0
 800c834:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            rcData[chan] = 0;
 800c838:	4a21      	ldr	r2, [pc, #132]	; (800c8c0 <computeRC+0x124>)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2100      	movs	r1, #0
 800c83e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c842:	2300      	movs	r3, #0
 800c844:	60bb      	str	r3, [r7, #8]
 800c846:	e016      	b.n	800c876 <computeRC+0xda>
                rcData[chan] += rcDataAverage[chan][i];
 800c848:	4a1d      	ldr	r2, [pc, #116]	; (800c8c0 <computeRC+0x124>)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c850:	b29a      	uxth	r2, r3
 800c852:	481e      	ldr	r0, [pc, #120]	; (800c8cc <computeRC+0x130>)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	0099      	lsls	r1, r3, #2
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	440b      	add	r3, r1
 800c85c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800c860:	b29b      	uxth	r3, r3
 800c862:	4413      	add	r3, r2
 800c864:	b29b      	uxth	r3, r3
 800c866:	b219      	sxth	r1, r3
 800c868:	4a15      	ldr	r2, [pc, #84]	; (800c8c0 <computeRC+0x124>)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 4; i++)
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	3301      	adds	r3, #1
 800c874:	60bb      	str	r3, [r7, #8]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b03      	cmp	r3, #3
 800c87a:	dde5      	ble.n	800c848 <computeRC+0xac>
            rcData[chan] /= 4;
 800c87c:	4a10      	ldr	r2, [pc, #64]	; (800c8c0 <computeRC+0x124>)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c884:	2b00      	cmp	r3, #0
 800c886:	da00      	bge.n	800c88a <computeRC+0xee>
 800c888:	3303      	adds	r3, #3
 800c88a:	109b      	asrs	r3, r3, #2
 800c88c:	b219      	sxth	r1, r3
 800c88e:	4a0c      	ldr	r2, [pc, #48]	; (800c8c0 <computeRC+0x124>)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (chan = 0; chan < mcfg.rc_channel_count; chan++) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3301      	adds	r3, #1
 800c89a:	607b      	str	r3, [r7, #4]
 800c89c:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <computeRC+0x128>)
 800c89e:	f893 31aa 	ldrb.w	r3, [r3, #426]	; 0x1aa
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	db9e      	blt.n	800c7e8 <computeRC+0x4c>
        rcAverageIndex++;
 800c8aa:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <computeRC+0x12c>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	4a05      	ldr	r2, [pc, #20]	; (800c8c8 <computeRC+0x12c>)
 800c8b2:	6013      	str	r3, [r2, #0]
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20001740 	.word	0x20001740
 800c8c0:	200016e8 	.word	0x200016e8
 800c8c4:	20000848 	.word	0x20000848
 800c8c8:	20001894 	.word	0x20001894
 800c8cc:	20001898 	.word	0x20001898

0800c8d0 <mwArm>:

static void mwArm(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
    if (calibratingG == 0 && f.ACC_CALIBRATED) {
 800c8d4:	4b1b      	ldr	r3, [pc, #108]	; (800c944 <mwArm+0x74>)
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d126      	bne.n	800c92a <mwArm+0x5a>
 800c8dc:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <mwArm+0x78>)
 800c8de:	789b      	ldrb	r3, [r3, #2]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d022      	beq.n	800c92a <mwArm+0x5a>
        // TODO: feature(FEATURE_FAILSAFE) && failsafeCnt < 2
        // TODO: && ( !feature || ( feature && ( failsafecnt > 2) )
        if (!f.ARMED) {         // arm now!
 800c8e4:	4b18      	ldr	r3, [pc, #96]	; (800c948 <mwArm+0x78>)
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d128      	bne.n	800c93e <mwArm+0x6e>
            f.ARMED = 1;
 800c8ec:	4b16      	ldr	r3, [pc, #88]	; (800c948 <mwArm+0x78>)
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	705a      	strb	r2, [r3, #1]
            headFreeModeHold = heading;
 800c8f2:	4b16      	ldr	r3, [pc, #88]	; (800c94c <mwArm+0x7c>)
 800c8f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c8f8:	4b15      	ldr	r3, [pc, #84]	; (800c950 <mwArm+0x80>)
 800c8fa:	801a      	strh	r2, [r3, #0]
            // Beep for inform about arming
#ifdef GPS
            if (feature(FEATURE_GPS) && f.GPS_FIX && GPS_numSat >= 5)
 800c8fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c900:	f7fa fae6 	bl	8006ed0 <feature>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <mwArm+0x52>
 800c90a:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <mwArm+0x78>)
 800c90c:	7adb      	ldrb	r3, [r3, #11]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <mwArm+0x52>
 800c912:	4b10      	ldr	r3, [pc, #64]	; (800c954 <mwArm+0x84>)
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b04      	cmp	r3, #4
 800c918:	d903      	bls.n	800c922 <mwArm+0x52>
                buzzer(BUZZER_ARMING_GPS_FIX);
 800c91a:	2007      	movs	r0, #7
 800c91c:	f7f7 fb04 	bl	8003f28 <buzzer>
        if (!f.ARMED) {         // arm now!
 800c920:	e00d      	b.n	800c93e <mwArm+0x6e>
            else
                buzzer(BUZZER_ARMING);
 800c922:	2006      	movs	r0, #6
 800c924:	f7f7 fb00 	bl	8003f28 <buzzer>
        if (!f.ARMED) {         // arm now!
 800c928:	e009      	b.n	800c93e <mwArm+0x6e>
#else
            buzzer(BUZZER_ARMING);
#endif
        }
    } else if (!f.ARMED) {
 800c92a:	4b07      	ldr	r3, [pc, #28]	; (800c948 <mwArm+0x78>)
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d105      	bne.n	800c93e <mwArm+0x6e>
        blinkLED(2, 255, 1);
 800c932:	2201      	movs	r2, #1
 800c934:	21ff      	movs	r1, #255	; 0xff
 800c936:	2002      	movs	r0, #2
 800c938:	f7ff fade 	bl	800bef8 <blinkLED>
    }
}
 800c93c:	e7ff      	b.n	800c93e <mwArm+0x6e>
 800c93e:	bf00      	nop
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	200019e4 	.word	0x200019e4
 800c948:	200016b0 	.word	0x200016b0
 800c94c:	200019e6 	.word	0x200019e6
 800c950:	200016d2 	.word	0x200016d2
 800c954:	20001794 	.word	0x20001794

0800c958 <mwDisarm>:

static void mwDisarm(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
    if (f.ARMED) {
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <mwDisarm+0x2c>)
 800c95e:	785b      	ldrb	r3, [r3, #1]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00c      	beq.n	800c97e <mwDisarm+0x26>
        f.ARMED = 0;
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <mwDisarm+0x2c>)
 800c966:	2200      	movs	r2, #0
 800c968:	705a      	strb	r2, [r3, #1]
        // Beep for inform about disarming
        buzzer(BUZZER_DISARMING);
 800c96a:	2005      	movs	r0, #5
 800c96c:	f7f7 fadc 	bl	8003f28 <buzzer>
        // Reset disarm time so that it works next time we arm the board.
        if (disarmTime != 0)
 800c970:	4b05      	ldr	r3, [pc, #20]	; (800c988 <mwDisarm+0x30>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <mwDisarm+0x26>
            disarmTime = 0;
 800c978:	4b03      	ldr	r3, [pc, #12]	; (800c988 <mwDisarm+0x30>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	601a      	str	r2, [r3, #0]
    }
}
 800c97e:	bf00      	nop
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	200016b0 	.word	0x200016b0
 800c988:	20001858 	.word	0x20001858

0800c98c <mwVario>:

static void mwVario(void)
{
 800c98c:	b480      	push	{r7}
 800c98e:	af00      	add	r7, sp, #0

}
 800c990:	bf00      	nop
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
	...

0800c99c <pidMultiWii>:

static int32_t errorGyroI[3] = { 0, 0, 0 };
static int32_t errorAngleI[2] = { 0, 0 };

static void pidMultiWii(void)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08e      	sub	sp, #56	; 0x38
 800c9a0:	af00      	add	r7, sp, #0
    int axis, prop;
    int32_t error, errorAngle;
    int32_t PTerm, ITerm, PTermACC = 0, ITermACC = 0, PTermGYRO = 0, ITermGYRO = 0, DTerm;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	623b      	str	r3, [r7, #32]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61fb      	str	r3, [r7, #28]
    static int32_t delta1[3], delta2[3];
    int32_t deltaSum;
    int32_t delta;

    // **** PITCH & ROLL & YAW PID ****
    prop = max(abs(rcCommand[PITCH]), abs(rcCommand[ROLL])); // range [0;500]
 800c9b2:	4b91      	ldr	r3, [pc, #580]	; (800cbf8 <pidMultiWii+0x25c>)
 800c9b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	bfb8      	it	lt
 800c9bc:	425b      	neglt	r3, r3
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	4b8d      	ldr	r3, [pc, #564]	; (800cbf8 <pidMultiWii+0x25c>)
 800c9c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	bfb8      	it	lt
 800c9ca:	425b      	neglt	r3, r3
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	bf38      	it	cc
 800c9d2:	4613      	movcc	r3, r2
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	61bb      	str	r3, [r7, #24]
    for (axis = 0; axis < 3; axis++) {
 800c9d8:	2300      	movs	r3, #0
 800c9da:	637b      	str	r3, [r7, #52]	; 0x34
 800c9dc:	e189      	b.n	800ccf2 <pidMultiWii+0x356>
        if ((f.ANGLE_MODE || f.HORIZON_MODE) && axis < 2) { // MODE relying on ACC
 800c9de:	4b87      	ldr	r3, [pc, #540]	; (800cbfc <pidMultiWii+0x260>)
 800c9e0:	78db      	ldrb	r3, [r3, #3]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d103      	bne.n	800c9ee <pidMultiWii+0x52>
 800c9e6:	4b85      	ldr	r3, [pc, #532]	; (800cbfc <pidMultiWii+0x260>)
 800c9e8:	791b      	ldrb	r3, [r3, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d060      	beq.n	800cab0 <pidMultiWii+0x114>
 800c9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	dc5d      	bgt.n	800cab0 <pidMultiWii+0x114>
            // 50 degrees max inclination
            errorAngle = constrain(2 * rcCommand[axis] + GPS_angle[axis], -((int)mcfg.max_angle_inclination), +mcfg.max_angle_inclination) - angle[axis] + cfg.angleTrim[axis];
 800c9f4:	4a80      	ldr	r2, [pc, #512]	; (800cbf8 <pidMultiWii+0x25c>)
 800c9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	4980      	ldr	r1, [pc, #512]	; (800cc00 <pidMultiWii+0x264>)
 800ca00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca02:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ca06:	4413      	add	r3, r2
 800ca08:	4a7e      	ldr	r2, [pc, #504]	; (800cc04 <pidMultiWii+0x268>)
 800ca0a:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800ca0e:	4251      	negs	r1, r2
 800ca10:	4a7c      	ldr	r2, [pc, #496]	; (800cc04 <pidMultiWii+0x268>)
 800ca12:	f8b2 2168 	ldrh.w	r2, [r2, #360]	; 0x168
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f7 f8f6 	bl	8003c08 <constrain>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	497a      	ldr	r1, [pc, #488]	; (800cc08 <pidMultiWii+0x26c>)
 800ca20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca22:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ca26:	1ad2      	subs	r2, r2, r3
 800ca28:	4978      	ldr	r1, [pc, #480]	; (800cc0c <pidMultiWii+0x270>)
 800ca2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2c:	3314      	adds	r3, #20
 800ca2e:	005b      	lsls	r3, r3, #1
 800ca30:	440b      	add	r3, r1
 800ca32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca36:	4413      	add	r3, r2
 800ca38:	617b      	str	r3, [r7, #20]
            PTermACC = errorAngle * cfg.P8[PIDLEVEL] / 100; // 32 bits is needed for calculation: errorAngle*P8[PIDLEVEL] could exceed 32768   16 bits is ok for result
 800ca3a:	4b74      	ldr	r3, [pc, #464]	; (800cc0c <pidMultiWii+0x270>)
 800ca3c:	7a1b      	ldrb	r3, [r3, #8]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	fb02 f303 	mul.w	r3, r2, r3
 800ca46:	4a72      	ldr	r2, [pc, #456]	; (800cc10 <pidMultiWii+0x274>)
 800ca48:	fb82 1203 	smull	r1, r2, r2, r3
 800ca4c:	1152      	asrs	r2, r2, #5
 800ca4e:	17db      	asrs	r3, r3, #31
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28
            PTermACC = constrain(PTermACC, -cfg.D8[PIDLEVEL] * 5, +cfg.D8[PIDLEVEL] * 5);
 800ca54:	4b6d      	ldr	r3, [pc, #436]	; (800cc0c <pidMultiWii+0x270>)
 800ca56:	7f1b      	ldrb	r3, [r3, #28]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	079b      	lsls	r3, r3, #30
 800ca5e:	1a9b      	subs	r3, r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	1a99      	subs	r1, r3, r2
 800ca64:	4b69      	ldr	r3, [pc, #420]	; (800cc0c <pidMultiWii+0x270>)
 800ca66:	7f1b      	ldrb	r3, [r3, #28]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	461a      	mov	r2, r3
 800ca72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca74:	f7f7 f8c8 	bl	8003c08 <constrain>
 800ca78:	62b8      	str	r0, [r7, #40]	; 0x28

            errorAngleI[axis] = constrain(errorAngleI[axis] + errorAngle, -10000, +10000); // WindUp
 800ca7a:	4a66      	ldr	r2, [pc, #408]	; (800cc14 <pidMultiWii+0x278>)
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	4413      	add	r3, r2
 800ca86:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca8a:	4963      	ldr	r1, [pc, #396]	; (800cc18 <pidMultiWii+0x27c>)
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7f7 f8bb 	bl	8003c08 <constrain>
 800ca92:	4602      	mov	r2, r0
 800ca94:	495f      	ldr	r1, [pc, #380]	; (800cc14 <pidMultiWii+0x278>)
 800ca96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            ITermACC = (errorAngleI[axis] * cfg.I8[PIDLEVEL]) >> 12;
 800ca9c:	4a5d      	ldr	r2, [pc, #372]	; (800cc14 <pidMultiWii+0x278>)
 800ca9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa4:	4a59      	ldr	r2, [pc, #356]	; (800cc0c <pidMultiWii+0x270>)
 800caa6:	7c92      	ldrb	r2, [r2, #18]
 800caa8:	fb02 f303 	mul.w	r3, r2, r3
 800caac:	131b      	asrs	r3, r3, #12
 800caae:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!f.ANGLE_MODE || f.HORIZON_MODE || axis == 2) { // MODE relying on GYRO or YAW axis
 800cab0:	4b52      	ldr	r3, [pc, #328]	; (800cbfc <pidMultiWii+0x260>)
 800cab2:	78db      	ldrb	r3, [r3, #3]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d006      	beq.n	800cac6 <pidMultiWii+0x12a>
 800cab8:	4b50      	ldr	r3, [pc, #320]	; (800cbfc <pidMultiWii+0x260>)
 800caba:	791b      	ldrb	r3, [r3, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d102      	bne.n	800cac6 <pidMultiWii+0x12a>
 800cac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d15f      	bne.n	800cb86 <pidMultiWii+0x1ea>
            error = (int32_t)rcCommand[axis] * 10 * 8 / cfg.P8[axis];
 800cac6:	4a4c      	ldr	r2, [pc, #304]	; (800cbf8 <pidMultiWii+0x25c>)
 800cac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cace:	461a      	mov	r2, r3
 800cad0:	4613      	mov	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4413      	add	r3, r2
 800cad6:	011b      	lsls	r3, r3, #4
 800cad8:	4619      	mov	r1, r3
 800cada:	4a4c      	ldr	r2, [pc, #304]	; (800cc0c <pidMultiWii+0x270>)
 800cadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cade:	4413      	add	r3, r2
 800cae0:	3301      	adds	r3, #1
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	fb91 f3f3 	sdiv	r3, r1, r3
 800cae8:	613b      	str	r3, [r7, #16]
            error -= gyroData[axis];
 800caea:	4a4c      	ldr	r2, [pc, #304]	; (800cc1c <pidMultiWii+0x280>)
 800caec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800caf2:	461a      	mov	r2, r3
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	1a9b      	subs	r3, r3, r2
 800caf8:	613b      	str	r3, [r7, #16]

            PTermGYRO = rcCommand[axis];
 800cafa:	4a3f      	ldr	r2, [pc, #252]	; (800cbf8 <pidMultiWii+0x25c>)
 800cafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb02:	623b      	str	r3, [r7, #32]

            errorGyroI[axis] = constrain(errorGyroI[axis] + error, -16000, +16000); // WindUp
 800cb04:	4a46      	ldr	r2, [pc, #280]	; (800cc20 <pidMultiWii+0x284>)
 800cb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cb14:	4943      	ldr	r1, [pc, #268]	; (800cc24 <pidMultiWii+0x288>)
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f7 f876 	bl	8003c08 <constrain>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	4940      	ldr	r1, [pc, #256]	; (800cc20 <pidMultiWii+0x284>)
 800cb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if ((abs(gyroData[axis]) > 640) || ((axis == YAW) && (abs(rcCommand[axis]) > 100)))
 800cb26:	4a3d      	ldr	r2, [pc, #244]	; (800cc1c <pidMultiWii+0x280>)
 800cb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfb8      	it	lt
 800cb32:	425b      	neglt	r3, r3
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cb3a:	d80c      	bhi.n	800cb56 <pidMultiWii+0x1ba>
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d10e      	bne.n	800cb60 <pidMultiWii+0x1c4>
 800cb42:	4a2d      	ldr	r2, [pc, #180]	; (800cbf8 <pidMultiWii+0x25c>)
 800cb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	bfb8      	it	lt
 800cb4e:	425b      	neglt	r3, r3
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	2b64      	cmp	r3, #100	; 0x64
 800cb54:	d904      	bls.n	800cb60 <pidMultiWii+0x1c4>
                errorGyroI[axis] = 0;
 800cb56:	4a32      	ldr	r2, [pc, #200]	; (800cc20 <pidMultiWii+0x284>)
 800cb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ITermGYRO = (errorGyroI[axis] / 125 * cfg.I8[axis]) >> 6;
 800cb60:	4a2f      	ldr	r2, [pc, #188]	; (800cc20 <pidMultiWii+0x284>)
 800cb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb68:	4a2f      	ldr	r2, [pc, #188]	; (800cc28 <pidMultiWii+0x28c>)
 800cb6a:	fb82 1203 	smull	r1, r2, r2, r3
 800cb6e:	10d2      	asrs	r2, r2, #3
 800cb70:	17db      	asrs	r3, r3, #31
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	4925      	ldr	r1, [pc, #148]	; (800cc0c <pidMultiWii+0x270>)
 800cb76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb78:	440a      	add	r2, r1
 800cb7a:	320b      	adds	r2, #11
 800cb7c:	7812      	ldrb	r2, [r2, #0]
 800cb7e:	fb02 f303 	mul.w	r3, r2, r3
 800cb82:	119b      	asrs	r3, r3, #6
 800cb84:	61fb      	str	r3, [r7, #28]
        }
        if (f.HORIZON_MODE && axis < 2) {
 800cb86:	4b1d      	ldr	r3, [pc, #116]	; (800cbfc <pidMultiWii+0x260>)
 800cb88:	791b      	ldrb	r3, [r3, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d027      	beq.n	800cbde <pidMultiWii+0x242>
 800cb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	dc24      	bgt.n	800cbde <pidMultiWii+0x242>
            PTerm = (PTermACC * (500 - prop) + PTermGYRO * prop) / 500;
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cb9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9c:	fb03 f202 	mul.w	r2, r3, r2
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	69b9      	ldr	r1, [r7, #24]
 800cba4:	fb01 f303 	mul.w	r3, r1, r3
 800cba8:	4413      	add	r3, r2
 800cbaa:	4a1f      	ldr	r2, [pc, #124]	; (800cc28 <pidMultiWii+0x28c>)
 800cbac:	fb82 1203 	smull	r1, r2, r2, r3
 800cbb0:	1152      	asrs	r2, r2, #5
 800cbb2:	17db      	asrs	r3, r3, #31
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	633b      	str	r3, [r7, #48]	; 0x30
            ITerm = (ITermACC * (500 - prop) + ITermGYRO * prop) / 500;
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 800cbbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbc0:	fb03 f202 	mul.w	r2, r3, r2
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	69b9      	ldr	r1, [r7, #24]
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	4413      	add	r3, r2
 800cbce:	4a16      	ldr	r2, [pc, #88]	; (800cc28 <pidMultiWii+0x28c>)
 800cbd0:	fb82 1203 	smull	r1, r2, r2, r3
 800cbd4:	1152      	asrs	r2, r2, #5
 800cbd6:	17db      	asrs	r3, r3, #31
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbdc:	e02a      	b.n	800cc34 <pidMultiWii+0x298>
        } else {
            if (f.ANGLE_MODE && axis < 2) {
 800cbde:	4b07      	ldr	r3, [pc, #28]	; (800cbfc <pidMultiWii+0x260>)
 800cbe0:	78db      	ldrb	r3, [r3, #3]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d022      	beq.n	800cc2c <pidMultiWii+0x290>
 800cbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	dc1f      	bgt.n	800cc2c <pidMultiWii+0x290>
                PTerm = PTermACC;
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermACC;
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf4:	e01e      	b.n	800cc34 <pidMultiWii+0x298>
 800cbf6:	bf00      	nop
 800cbf8:	2000170c 	.word	0x2000170c
 800cbfc:	200016b0 	.word	0x200016b0
 800cc00:	200017a0 	.word	0x200017a0
 800cc04:	20000848 	.word	0x20000848
 800cc08:	20001458 	.word	0x20001458
 800cc0c:	20000db4 	.word	0x20000db4
 800cc10:	51eb851f 	.word	0x51eb851f
 800cc14:	20001868 	.word	0x20001868
 800cc18:	ffffd8f0 	.word	0xffffd8f0
 800cc1c:	20001448 	.word	0x20001448
 800cc20:	2000185c 	.word	0x2000185c
 800cc24:	ffffc180 	.word	0xffffc180
 800cc28:	10624dd3 	.word	0x10624dd3
            } else {
                PTerm = PTermGYRO;
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	633b      	str	r3, [r7, #48]	; 0x30
                ITerm = ITermGYRO;
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }

        PTerm -= (int32_t)gyroData[axis] * dynP8[axis] / 10 / 8; // 32 bits is needed for calculation
 800cc34:	4a33      	ldr	r2, [pc, #204]	; (800cd04 <pidMultiWii+0x368>)
 800cc36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	4a32      	ldr	r2, [pc, #200]	; (800cd08 <pidMultiWii+0x36c>)
 800cc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc42:	4413      	add	r3, r2
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	fb01 f303 	mul.w	r3, r1, r3
 800cc4a:	4a30      	ldr	r2, [pc, #192]	; (800cd0c <pidMultiWii+0x370>)
 800cc4c:	fb82 1203 	smull	r1, r2, r2, r3
 800cc50:	1152      	asrs	r2, r2, #5
 800cc52:	17db      	asrs	r3, r3, #31
 800cc54:	1a9b      	subs	r3, r3, r2
 800cc56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc58:	4413      	add	r3, r2
 800cc5a:	633b      	str	r3, [r7, #48]	; 0x30
        delta = gyroData[axis] - lastGyro[axis];
 800cc5c:	4a29      	ldr	r2, [pc, #164]	; (800cd04 <pidMultiWii+0x368>)
 800cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc64:	4619      	mov	r1, r3
 800cc66:	4a2a      	ldr	r2, [pc, #168]	; (800cd10 <pidMultiWii+0x374>)
 800cc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cc6e:	1acb      	subs	r3, r1, r3
 800cc70:	60fb      	str	r3, [r7, #12]
        lastGyro[axis] = gyroData[axis];
 800cc72:	4a24      	ldr	r2, [pc, #144]	; (800cd04 <pidMultiWii+0x368>)
 800cc74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc76:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800cc7a:	4a25      	ldr	r2, [pc, #148]	; (800cd10 <pidMultiWii+0x374>)
 800cc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800cc82:	4a24      	ldr	r2, [pc, #144]	; (800cd14 <pidMultiWii+0x378>)
 800cc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc8a:	4923      	ldr	r1, [pc, #140]	; (800cd18 <pidMultiWii+0x37c>)
 800cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc92:	4413      	add	r3, r2
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	4413      	add	r3, r2
 800cc98:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cc9a:	4a1e      	ldr	r2, [pc, #120]	; (800cd14 <pidMultiWii+0x378>)
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cca2:	491d      	ldr	r1, [pc, #116]	; (800cd18 <pidMultiWii+0x37c>)
 800cca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800ccaa:	491a      	ldr	r1, [pc, #104]	; (800cd14 <pidMultiWii+0x378>)
 800ccac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * dynD8[axis]) / 32;
 800ccb4:	4a19      	ldr	r2, [pc, #100]	; (800cd1c <pidMultiWii+0x380>)
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	4413      	add	r3, r2
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	fb02 f303 	mul.w	r3, r2, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da00      	bge.n	800ccca <pidMultiWii+0x32e>
 800ccc8:	331f      	adds	r3, #31
 800ccca:	115b      	asrs	r3, r3, #5
 800cccc:	607b      	str	r3, [r7, #4]
        axisPID[axis] = PTerm + ITerm - DTerm;
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	4413      	add	r3, r2
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	b219      	sxth	r1, r3
 800cce4:	4a0e      	ldr	r2, [pc, #56]	; (800cd20 <pidMultiWii+0x384>)
 800cce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800ccec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccee:	3301      	adds	r3, #1
 800ccf0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	f77f ae72 	ble.w	800c9de <pidMultiWii+0x42>
    }
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	3738      	adds	r7, #56	; 0x38
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20001448 	.word	0x20001448
 800cd08:	20001744 	.word	0x20001744
 800cd0c:	66666667 	.word	0x66666667
 800cd10:	20001928 	.word	0x20001928
 800cd14:	20001930 	.word	0x20001930
 800cd18:	2000193c 	.word	0x2000193c
 800cd1c:	2000174c 	.word	0x2000174c
 800cd20:	2000176c 	.word	0x2000176c

0800cd24 <pidRewrite>:

#define GYRO_I_MAX 256

static void pidRewrite(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08a      	sub	sp, #40	; 0x28
 800cd28:	af00      	add	r7, sp, #0
    int32_t errorAngle = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	61fb      	str	r3, [r7, #28]
    int32_t PTerm, ITerm, DTerm;
    static int32_t lastError[3] = { 0, 0, 0 };
    int32_t AngleRateTmp, RateError;

    // ----------PID controller----------
    for (axis = 0; axis < 3; axis++) {
 800cd2e:	2300      	movs	r3, #0
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
 800cd32:	e0f2      	b.n	800cf1a <pidRewrite+0x1f6>
        // -----Get the desired angle rate depending on flight mode
        if (axis == 2) { // YAW is always gyro-controlled (MAG correction is applied to rcCommand)
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d10b      	bne.n	800cd52 <pidRewrite+0x2e>
            AngleRateTmp = (((int32_t)(cfg.yawRate + 27) * rcCommand[YAW]) >> 5);
 800cd3a:	4b7c      	ldr	r3, [pc, #496]	; (800cf2c <pidRewrite+0x208>)
 800cd3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cd40:	331b      	adds	r3, #27
 800cd42:	4a7b      	ldr	r2, [pc, #492]	; (800cf30 <pidRewrite+0x20c>)
 800cd44:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800cd48:	fb02 f303 	mul.w	r3, r2, r3
 800cd4c:	115b      	asrs	r3, r3, #5
 800cd4e:	623b      	str	r3, [r7, #32]
 800cd50:	e053      	b.n	800cdfa <pidRewrite+0xd6>
        } else {
            // calculate error and limit the angle to 50 degrees max inclination
            errorAngle = (constrain(rcCommand[axis] + GPS_angle[axis], -500, +500) - angle[axis] + cfg.angleTrim[axis]) / 10.0f; // 16 bits is ok here
 800cd52:	4a77      	ldr	r2, [pc, #476]	; (800cf30 <pidRewrite+0x20c>)
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4a75      	ldr	r2, [pc, #468]	; (800cf34 <pidRewrite+0x210>)
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800cd64:	440b      	add	r3, r1
 800cd66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800cd6a:	4973      	ldr	r1, [pc, #460]	; (800cf38 <pidRewrite+0x214>)
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7f6 ff4b 	bl	8003c08 <constrain>
 800cd72:	4602      	mov	r2, r0
 800cd74:	4971      	ldr	r1, [pc, #452]	; (800cf3c <pidRewrite+0x218>)
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800cd7c:	1ad2      	subs	r2, r2, r3
 800cd7e:	496b      	ldr	r1, [pc, #428]	; (800cf2c <pidRewrite+0x208>)
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	3314      	adds	r3, #20
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	440b      	add	r3, r1
 800cd88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cd96:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800cd9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cda2:	ee17 3a90 	vmov	r3, s15
 800cda6:	61fb      	str	r3, [r7, #28]
            if (!f.ANGLE_MODE) { //control is GYRO based (ACRO and HORIZON - direct sticks control is applied to rate PID
 800cda8:	4b65      	ldr	r3, [pc, #404]	; (800cf40 <pidRewrite+0x21c>)
 800cdaa:	78db      	ldrb	r3, [r3, #3]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d11c      	bne.n	800cdea <pidRewrite+0xc6>
                AngleRateTmp = ((int32_t)(cfg.rollPitchRate[axis] + 27) * rcCommand[axis]) >> 4;
 800cdb0:	4a5e      	ldr	r2, [pc, #376]	; (800cf2c <pidRewrite+0x208>)
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb4:	4413      	add	r3, r2
 800cdb6:	3323      	adds	r3, #35	; 0x23
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	331b      	adds	r3, #27
 800cdbc:	495c      	ldr	r1, [pc, #368]	; (800cf30 <pidRewrite+0x20c>)
 800cdbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800cdc4:	fb02 f303 	mul.w	r3, r2, r3
 800cdc8:	111b      	asrs	r3, r3, #4
 800cdca:	623b      	str	r3, [r7, #32]

                if (f.HORIZON_MODE) {
 800cdcc:	4b5c      	ldr	r3, [pc, #368]	; (800cf40 <pidRewrite+0x21c>)
 800cdce:	791b      	ldrb	r3, [r3, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d012      	beq.n	800cdfa <pidRewrite+0xd6>
                    // mix up angle error to desired AngleRateTmp to add a little auto-level feel
                    AngleRateTmp += (errorAngle * cfg.I8[PIDLEVEL]) >> 8;
 800cdd4:	4b55      	ldr	r3, [pc, #340]	; (800cf2c <pidRewrite+0x208>)
 800cdd6:	7c9b      	ldrb	r3, [r3, #18]
 800cdd8:	461a      	mov	r2, r3
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	fb02 f303 	mul.w	r3, r2, r3
 800cde0:	121b      	asrs	r3, r3, #8
 800cde2:	6a3a      	ldr	r2, [r7, #32]
 800cde4:	4413      	add	r3, r2
 800cde6:	623b      	str	r3, [r7, #32]
 800cde8:	e007      	b.n	800cdfa <pidRewrite+0xd6>
                }
            } else { // it's the ANGLE mode - control is angle based, so control loop is needed
                AngleRateTmp = (errorAngle * cfg.P8[PIDLEVEL]) >> 4;
 800cdea:	4b50      	ldr	r3, [pc, #320]	; (800cf2c <pidRewrite+0x208>)
 800cdec:	7a1b      	ldrb	r3, [r3, #8]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	fb02 f303 	mul.w	r3, r2, r3
 800cdf6:	111b      	asrs	r3, r3, #4
 800cdf8:	623b      	str	r3, [r7, #32]

        // --------low-level gyro-based PID. ----------
        // Used in stand-alone mode for ACRO, controlled by higher level regulators in other modes
        // -----calculate scaled error.AngleRates
        // multiplication of rcCommand corresponds to changing the sticks scaling here
        RateError = AngleRateTmp - gyroData[axis];
 800cdfa:	4a52      	ldr	r2, [pc, #328]	; (800cf44 <pidRewrite+0x220>)
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6a3b      	ldr	r3, [r7, #32]
 800ce06:	1a9b      	subs	r3, r3, r2
 800ce08:	61bb      	str	r3, [r7, #24]

        // -----calculate P component
        PTerm = (RateError * cfg.P8[axis]) >> 7;
 800ce0a:	4a48      	ldr	r2, [pc, #288]	; (800cf2c <pidRewrite+0x208>)
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	4413      	add	r3, r2
 800ce10:	3301      	adds	r3, #1
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	461a      	mov	r2, r3
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	fb02 f303 	mul.w	r3, r2, r3
 800ce1c:	11db      	asrs	r3, r3, #7
 800ce1e:	617b      	str	r3, [r7, #20]
        // -----calculate I component
        // there should be no division before accumulating the error to integrator, because the precision would be reduced.
        // Precision is critical, as I prevents from long-time drift. Thus, 32 bits integrator is used.
        // Time correction (to avoid different I scaling for different builds based on average cycle time)
        // is normalized to cycle time = 2048.
        errorGyroI[axis] = errorGyroI[axis] + ((RateError * cycleTime) >> 11) * cfg.I8[axis];
 800ce20:	4a49      	ldr	r2, [pc, #292]	; (800cf48 <pidRewrite+0x224>)
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce28:	4b48      	ldr	r3, [pc, #288]	; (800cf4c <pidRewrite+0x228>)
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	fb01 f303 	mul.w	r3, r1, r3
 800ce34:	12db      	asrs	r3, r3, #11
 800ce36:	483d      	ldr	r0, [pc, #244]	; (800cf2c <pidRewrite+0x208>)
 800ce38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce3a:	4401      	add	r1, r0
 800ce3c:	310b      	adds	r1, #11
 800ce3e:	7809      	ldrb	r1, [r1, #0]
 800ce40:	fb01 f303 	mul.w	r3, r1, r3
 800ce44:	441a      	add	r2, r3
 800ce46:	4940      	ldr	r1, [pc, #256]	; (800cf48 <pidRewrite+0x224>)
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // limit maximum integrator value to prevent WindUp - accumulating extreme values when system is saturated.
        // I coefficient (I8) moved before integration to make limiting independent from PID settings
        errorGyroI[axis] = constrain(errorGyroI[axis], (int32_t)(-GYRO_I_MAX) << 13, (int32_t)(+GYRO_I_MAX) << 13);
 800ce4e:	4a3e      	ldr	r2, [pc, #248]	; (800cf48 <pidRewrite+0x224>)
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ce5a:	493d      	ldr	r1, [pc, #244]	; (800cf50 <pidRewrite+0x22c>)
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7f6 fed3 	bl	8003c08 <constrain>
 800ce62:	4602      	mov	r2, r0
 800ce64:	4938      	ldr	r1, [pc, #224]	; (800cf48 <pidRewrite+0x224>)
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        ITerm = errorGyroI[axis] >> 13;
 800ce6c:	4a36      	ldr	r2, [pc, #216]	; (800cf48 <pidRewrite+0x224>)
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce74:	135b      	asrs	r3, r3, #13
 800ce76:	613b      	str	r3, [r7, #16]

        //-----calculate D-term
        delta = RateError - lastError[axis];  // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
 800ce78:	4a36      	ldr	r2, [pc, #216]	; (800cf54 <pidRewrite+0x230>)
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce80:	69ba      	ldr	r2, [r7, #24]
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	60fb      	str	r3, [r7, #12]
        lastError[axis] = RateError;
 800ce86:	4933      	ldr	r1, [pc, #204]	; (800cf54 <pidRewrite+0x230>)
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	69ba      	ldr	r2, [r7, #24]
 800ce8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // Correct difference by cycle time. Cycle time is jittery (can be different 2 times), so calculated difference
        // would be scaled by different dt each time. Division by dT fixes that.
        delta = (delta * ((uint16_t)0xFFFF / (cycleTime >> 4))) >> 6;
 800ce90:	4b2e      	ldr	r3, [pc, #184]	; (800cf4c <pidRewrite+0x228>)
 800ce92:	881b      	ldrh	r3, [r3, #0]
 800ce94:	091b      	lsrs	r3, r3, #4
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	461a      	mov	r2, r3
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	fb02 f303 	mul.w	r3, r2, r3
 800ceaa:	119b      	asrs	r3, r3, #6
 800ceac:	60fb      	str	r3, [r7, #12]
        // add moving average here to reduce noise
        deltaSum = delta1[axis] + delta2[axis] + delta;
 800ceae:	4a2a      	ldr	r2, [pc, #168]	; (800cf58 <pidRewrite+0x234>)
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ceb6:	4929      	ldr	r1, [pc, #164]	; (800cf5c <pidRewrite+0x238>)
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cebe:	4413      	add	r3, r2
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	60bb      	str	r3, [r7, #8]
        delta2[axis] = delta1[axis];
 800cec6:	4a24      	ldr	r2, [pc, #144]	; (800cf58 <pidRewrite+0x234>)
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cece:	4923      	ldr	r1, [pc, #140]	; (800cf5c <pidRewrite+0x238>)
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        delta1[axis] = delta;
 800ced6:	4920      	ldr	r1, [pc, #128]	; (800cf58 <pidRewrite+0x234>)
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        DTerm = (deltaSum * cfg.D8[axis]) >> 8;
 800cee0:	4a12      	ldr	r2, [pc, #72]	; (800cf2c <pidRewrite+0x208>)
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	4413      	add	r3, r2
 800cee6:	3315      	adds	r3, #21
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	fb02 f303 	mul.w	r3, r2, r3
 800cef2:	121b      	asrs	r3, r3, #8
 800cef4:	607b      	str	r3, [r7, #4]

        // -----calculate total PID output
        axisPID[axis] = PTerm + ITerm + DTerm;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	4413      	add	r3, r2
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	4413      	add	r3, r2
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	b219      	sxth	r1, r3
 800cf0c:	4a14      	ldr	r2, [pc, #80]	; (800cf60 <pidRewrite+0x23c>)
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++) {
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	3301      	adds	r3, #1
 800cf18:	627b      	str	r3, [r7, #36]	; 0x24
 800cf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	f77f af09 	ble.w	800cd34 <pidRewrite+0x10>
    }
}
 800cf22:	bf00      	nop
 800cf24:	bf00      	nop
 800cf26:	3728      	adds	r7, #40	; 0x28
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	20000db4 	.word	0x20000db4
 800cf30:	2000170c 	.word	0x2000170c
 800cf34:	200017a0 	.word	0x200017a0
 800cf38:	fffffe0c 	.word	0xfffffe0c
 800cf3c:	20001458 	.word	0x20001458
 800cf40:	200016b0 	.word	0x200016b0
 800cf44:	20001448 	.word	0x20001448
 800cf48:	2000185c 	.word	0x2000185c
 800cf4c:	200016d0 	.word	0x200016d0
 800cf50:	ffe00000 	.word	0xffe00000
 800cf54:	20001948 	.word	0x20001948
 800cf58:	20001954 	.word	0x20001954
 800cf5c:	20001960 	.word	0x20001960
 800cf60:	2000176c 	.word	0x2000176c

0800cf64 <setPIDController>:

void setPIDController(int type)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
    switch (type) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d003      	beq.n	800cf7a <setPIDController+0x16>
        case 0:
        default:
            pid_controller = pidMultiWii;
 800cf72:	4b07      	ldr	r3, [pc, #28]	; (800cf90 <setPIDController+0x2c>)
 800cf74:	4a07      	ldr	r2, [pc, #28]	; (800cf94 <setPIDController+0x30>)
 800cf76:	601a      	str	r2, [r3, #0]
            break;
 800cf78:	e003      	b.n	800cf82 <setPIDController+0x1e>
        case 1:
            pid_controller = pidRewrite;
 800cf7a:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <setPIDController+0x2c>)
 800cf7c:	4a06      	ldr	r2, [pc, #24]	; (800cf98 <setPIDController+0x34>)
 800cf7e:	601a      	str	r2, [r3, #0]
            break;
 800cf80:	bf00      	nop
    }
}
 800cf82:	bf00      	nop
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20000050 	.word	0x20000050
 800cf94:	0800c99d 	.word	0x0800c99d
 800cf98:	0800cd25 	.word	0x0800cd25

0800cf9c <taskComputeRc>:
#ifdef BARO
    static int16_t initialThrottleHold;
#endif

uint16_t taskComputeRc(PifTask *p_task)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
    static uint8_t rcDelayCommand;      // this indicates the number of time (multiple of RC measurement at 50Hz) the sticks must be maintained to run or switch off motors
    static uint8_t rcSticks;            // this hold sticks position for command combos
    uint8_t stTmp = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	75fb      	strb	r3, [r7, #23]
    int i;
    uint32_t auxState = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60fb      	str	r3, [r7, #12]
#ifdef GPS
    static uint8_t GPSNavReset = 1;
#endif
    bool isThrottleLow = false;
 800cfac:	2300      	movs	r3, #0
 800cfae:	72fb      	strb	r3, [r7, #11]

    (void)p_task;

        computeRC();
 800cfb0:	f7ff fbf4 	bl	800c79c <computeRC>

        // in 3D mode, we need to be able to disarm by switch at any time
        if (feature(FEATURE_3D)) {
 800cfb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cfb8:	f7f9 ff8a 	bl	8006ed0 <feature>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d005      	beq.n	800cfce <taskComputeRc+0x32>
            if (!rcOptions[BOXARM])
 800cfc2:	4b9d      	ldr	r3, [pc, #628]	; (800d238 <taskComputeRc+0x29c>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d101      	bne.n	800cfce <taskComputeRc+0x32>
                mwDisarm();
 800cfca:	f7ff fcc5 	bl	800c958 <mwDisarm>
        }

        // Read rssi value
        rssi = RSSI_getValue();
 800cfce:	f001 facd 	bl	800e56c <RSSI_getValue>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	4b99      	ldr	r3, [pc, #612]	; (800d23c <taskComputeRc+0x2a0>)
 800cfd8:	801a      	strh	r2, [r3, #0]

        // Failsafe routine
        if (feature(FEATURE_FAILSAFE) || feature(FEATURE_FW_FAILSAFE_RTH)) {
 800cfda:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cfde:	f7f9 ff77 	bl	8006ed0 <feature>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <taskComputeRc+0x5a>
 800cfe8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cfec:	f7f9 ff70 	bl	8006ed0 <feature>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d072      	beq.n	800d0dc <taskComputeRc+0x140>
            if (failsafeCnt > (5 * cfg.failsafe_delay) && f.ARMED) { // Stabilize, and set Throttle to specified level
 800cff6:	4b92      	ldr	r3, [pc, #584]	; (800d240 <taskComputeRc+0x2a4>)
 800cff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cffc:	4619      	mov	r1, r3
 800cffe:	4b91      	ldr	r3, [pc, #580]	; (800d244 <taskComputeRc+0x2a8>)
 800d000:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d004:	461a      	mov	r2, r3
 800d006:	4613      	mov	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4413      	add	r3, r2
 800d00c:	4299      	cmp	r1, r3
 800d00e:	dd43      	ble.n	800d098 <taskComputeRc+0xfc>
 800d010:	4b8d      	ldr	r3, [pc, #564]	; (800d248 <taskComputeRc+0x2ac>)
 800d012:	785b      	ldrb	r3, [r3, #1]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d03f      	beq.n	800d098 <taskComputeRc+0xfc>
                for (i = 0; i < 3; i++)
 800d018:	2300      	movs	r3, #0
 800d01a:	613b      	str	r3, [r7, #16]
 800d01c:	e00a      	b.n	800d034 <taskComputeRc+0x98>
                    rcData[i] = mcfg.midrc;      // after specified guard time after RC signal is lost (in 0.1sec)
 800d01e:	4b8b      	ldr	r3, [pc, #556]	; (800d24c <taskComputeRc+0x2b0>)
 800d020:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d024:	b219      	sxth	r1, r3
 800d026:	4a8a      	ldr	r2, [pc, #552]	; (800d250 <taskComputeRc+0x2b4>)
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	3301      	adds	r3, #1
 800d032:	613b      	str	r3, [r7, #16]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	2b02      	cmp	r3, #2
 800d038:	ddf1      	ble.n	800d01e <taskComputeRc+0x82>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800d03a:	4b82      	ldr	r3, [pc, #520]	; (800d244 <taskComputeRc+0x2a8>)
 800d03c:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800d040:	b21a      	sxth	r2, r3
 800d042:	4b83      	ldr	r3, [pc, #524]	; (800d250 <taskComputeRc+0x2b4>)
 800d044:	80da      	strh	r2, [r3, #6]
                buzzer(BUZZER_TX_LOST_ARMED);
 800d046:	2003      	movs	r0, #3
 800d048:	f7f6 ff6e 	bl	8003f28 <buzzer>
                if ((failsafeCnt > 5 * (cfg.failsafe_delay + cfg.failsafe_off_delay)) && !f.FW_FAILSAFE_RTH_ENABLE) {  // Turn OFF motors after specified Time (in 0.1sec)
 800d04c:	4b7c      	ldr	r3, [pc, #496]	; (800d240 <taskComputeRc+0x2a4>)
 800d04e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d052:	4619      	mov	r1, r3
 800d054:	4b7b      	ldr	r3, [pc, #492]	; (800d244 <taskComputeRc+0x2a8>)
 800d056:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d05a:	461a      	mov	r2, r3
 800d05c:	4b79      	ldr	r3, [pc, #484]	; (800d244 <taskComputeRc+0x2a8>)
 800d05e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800d062:	441a      	add	r2, r3
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	4299      	cmp	r1, r3
 800d06c:	dd0b      	ble.n	800d086 <taskComputeRc+0xea>
 800d06e:	4b76      	ldr	r3, [pc, #472]	; (800d248 <taskComputeRc+0x2ac>)
 800d070:	7c9b      	ldrb	r3, [r3, #18]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d107      	bne.n	800d086 <taskComputeRc+0xea>
                    mwDisarm();             // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d076:	f7ff fc6f 	bl	800c958 <mwDisarm>
                    f.OK_TO_ARM = 0;        // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d07a:	4b73      	ldr	r3, [pc, #460]	; (800d248 <taskComputeRc+0x2ac>)
 800d07c:	2200      	movs	r2, #0
 800d07e:	701a      	strb	r2, [r3, #0]
                    buzzer(BUZZER_TX_LOST);
 800d080:	2004      	movs	r0, #4
 800d082:	f7f6 ff51 	bl	8003f28 <buzzer>
                }
                failsafeEvents++;
 800d086:	4b73      	ldr	r3, [pc, #460]	; (800d254 <taskComputeRc+0x2b8>)
 800d088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	3301      	adds	r3, #1
 800d090:	b29b      	uxth	r3, r3
 800d092:	b21a      	sxth	r2, r3
 800d094:	4b6f      	ldr	r3, [pc, #444]	; (800d254 <taskComputeRc+0x2b8>)
 800d096:	801a      	strh	r2, [r3, #0]
            }
            if (failsafeCnt > (5 * cfg.failsafe_delay) && !f.ARMED) {  // Turn off "Ok To arm to prevent the motors from spinning after repowering the RX with low throttle and aux to arm
 800d098:	4b69      	ldr	r3, [pc, #420]	; (800d240 <taskComputeRc+0x2a4>)
 800d09a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4b68      	ldr	r3, [pc, #416]	; (800d244 <taskComputeRc+0x2a8>)
 800d0a2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4413      	add	r3, r2
 800d0ae:	4299      	cmp	r1, r3
 800d0b0:	dd0b      	ble.n	800d0ca <taskComputeRc+0x12e>
 800d0b2:	4b65      	ldr	r3, [pc, #404]	; (800d248 <taskComputeRc+0x2ac>)
 800d0b4:	785b      	ldrb	r3, [r3, #1]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d107      	bne.n	800d0ca <taskComputeRc+0x12e>
                mwDisarm();         // This will prevent the copter to automatically rearm if failsafe shuts it down and prevents
 800d0ba:	f7ff fc4d 	bl	800c958 <mwDisarm>
                f.OK_TO_ARM = 0;    // to restart accidentely by just reconnect to the tx - you will have to switch off first to rearm
 800d0be:	4b62      	ldr	r3, [pc, #392]	; (800d248 <taskComputeRc+0x2ac>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_TX_LOST);
 800d0c4:	2004      	movs	r0, #4
 800d0c6:	f7f6 ff2f 	bl	8003f28 <buzzer>
            }
            failsafeCnt++;
 800d0ca:	4b5d      	ldr	r3, [pc, #372]	; (800d240 <taskComputeRc+0x2a4>)
 800d0cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	b21a      	sxth	r2, r3
 800d0d8:	4b59      	ldr	r3, [pc, #356]	; (800d240 <taskComputeRc+0x2a4>)
 800d0da:	801a      	strh	r2, [r3, #0]
        }
        // end of failsafe routine - next change is made with RcOptions setting

        // ------------------ STICKS COMMAND HANDLER --------------------
        // checking sticks positions
        for (i = 0; i < 4; i++) {
 800d0dc:	2300      	movs	r3, #0
 800d0de:	613b      	str	r3, [r7, #16]
 800d0e0:	e021      	b.n	800d126 <taskComputeRc+0x18a>
            stTmp >>= 2;
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	089b      	lsrs	r3, r3, #2
 800d0e6:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] > mcfg.mincheck)
 800d0e8:	4a59      	ldr	r2, [pc, #356]	; (800d250 <taskComputeRc+0x2b4>)
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	4b56      	ldr	r3, [pc, #344]	; (800d24c <taskComputeRc+0x2b0>)
 800d0f4:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	dd03      	ble.n	800d104 <taskComputeRc+0x168>
                stTmp |= 0x80;  // check for MIN
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
 800d0fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d102:	75fb      	strb	r3, [r7, #23]
            if (rcData[i] < mcfg.maxcheck)
 800d104:	4a52      	ldr	r2, [pc, #328]	; (800d250 <taskComputeRc+0x2b4>)
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d10c:	461a      	mov	r2, r3
 800d10e:	4b4f      	ldr	r3, [pc, #316]	; (800d24c <taskComputeRc+0x2b0>)
 800d110:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 800d114:	429a      	cmp	r2, r3
 800d116:	da03      	bge.n	800d120 <taskComputeRc+0x184>
                stTmp |= 0x40;  // check for MAX
 800d118:	7dfb      	ldrb	r3, [r7, #23]
 800d11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11e:	75fb      	strb	r3, [r7, #23]
        for (i = 0; i < 4; i++) {
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	3301      	adds	r3, #1
 800d124:	613b      	str	r3, [r7, #16]
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	2b03      	cmp	r3, #3
 800d12a:	ddda      	ble.n	800d0e2 <taskComputeRc+0x146>
        }
        if (stTmp == rcSticks) {
 800d12c:	4b4a      	ldr	r3, [pc, #296]	; (800d258 <taskComputeRc+0x2bc>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	7dfa      	ldrb	r2, [r7, #23]
 800d132:	429a      	cmp	r2, r3
 800d134:	d10a      	bne.n	800d14c <taskComputeRc+0x1b0>
            if (rcDelayCommand < 250)
 800d136:	4b49      	ldr	r3, [pc, #292]	; (800d25c <taskComputeRc+0x2c0>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2bf9      	cmp	r3, #249	; 0xf9
 800d13c:	d809      	bhi.n	800d152 <taskComputeRc+0x1b6>
                rcDelayCommand++;
 800d13e:	4b47      	ldr	r3, [pc, #284]	; (800d25c <taskComputeRc+0x2c0>)
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	3301      	adds	r3, #1
 800d144:	b2da      	uxtb	r2, r3
 800d146:	4b45      	ldr	r3, [pc, #276]	; (800d25c <taskComputeRc+0x2c0>)
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	e002      	b.n	800d152 <taskComputeRc+0x1b6>
        } else
            rcDelayCommand = 0;
 800d14c:	4b43      	ldr	r3, [pc, #268]	; (800d25c <taskComputeRc+0x2c0>)
 800d14e:	2200      	movs	r2, #0
 800d150:	701a      	strb	r2, [r3, #0]
        rcSticks = stTmp;
 800d152:	4a41      	ldr	r2, [pc, #260]	; (800d258 <taskComputeRc+0x2bc>)
 800d154:	7dfb      	ldrb	r3, [r7, #23]
 800d156:	7013      	strb	r3, [r2, #0]

        // perform actions
        if (feature(FEATURE_3D) && (rcData[THROTTLE] > (mcfg.midrc - mcfg.deadband3d_throttle) && rcData[THROTTLE] < (mcfg.midrc + mcfg.deadband3d_throttle)))
 800d158:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d15c:	f7f9 feb8 	bl	8006ed0 <feature>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d01e      	beq.n	800d1a4 <taskComputeRc+0x208>
 800d166:	4b3a      	ldr	r3, [pc, #232]	; (800d250 <taskComputeRc+0x2b4>)
 800d168:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d16c:	461a      	mov	r2, r3
 800d16e:	4b37      	ldr	r3, [pc, #220]	; (800d24c <taskComputeRc+0x2b0>)
 800d170:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d174:	4619      	mov	r1, r3
 800d176:	4b35      	ldr	r3, [pc, #212]	; (800d24c <taskComputeRc+0x2b0>)
 800d178:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d17c:	1acb      	subs	r3, r1, r3
 800d17e:	429a      	cmp	r2, r3
 800d180:	dd10      	ble.n	800d1a4 <taskComputeRc+0x208>
 800d182:	4b33      	ldr	r3, [pc, #204]	; (800d250 <taskComputeRc+0x2b4>)
 800d184:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d188:	461a      	mov	r2, r3
 800d18a:	4b30      	ldr	r3, [pc, #192]	; (800d24c <taskComputeRc+0x2b0>)
 800d18c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800d190:	4619      	mov	r1, r3
 800d192:	4b2e      	ldr	r3, [pc, #184]	; (800d24c <taskComputeRc+0x2b0>)
 800d194:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800d198:	440b      	add	r3, r1
 800d19a:	429a      	cmp	r2, r3
 800d19c:	da02      	bge.n	800d1a4 <taskComputeRc+0x208>
            isThrottleLow = true;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	72fb      	strb	r3, [r7, #11]
 800d1a2:	e014      	b.n	800d1ce <taskComputeRc+0x232>
        else if (!feature(FEATURE_3D) && (rcData[THROTTLE] < mcfg.mincheck))
 800d1a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800d1a8:	f7f9 fe92 	bl	8006ed0 <feature>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	f083 0301 	eor.w	r3, r3, #1
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00a      	beq.n	800d1ce <taskComputeRc+0x232>
 800d1b8:	4b25      	ldr	r3, [pc, #148]	; (800d250 <taskComputeRc+0x2b4>)
 800d1ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	4b22      	ldr	r3, [pc, #136]	; (800d24c <taskComputeRc+0x2b0>)
 800d1c2:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	da01      	bge.n	800d1ce <taskComputeRc+0x232>
            isThrottleLow = true;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	72fb      	strb	r3, [r7, #11]
        if (isThrottleLow) {
 800d1ce:	7afb      	ldrb	r3, [r7, #11]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01c      	beq.n	800d20e <taskComputeRc+0x272>
            errorGyroI[ROLL] = 0;
 800d1d4:	4b22      	ldr	r3, [pc, #136]	; (800d260 <taskComputeRc+0x2c4>)
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	601a      	str	r2, [r3, #0]
            errorGyroI[PITCH] = 0;
 800d1da:	4b21      	ldr	r3, [pc, #132]	; (800d260 <taskComputeRc+0x2c4>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	605a      	str	r2, [r3, #4]
            errorGyroI[YAW] = 0;
 800d1e0:	4b1f      	ldr	r3, [pc, #124]	; (800d260 <taskComputeRc+0x2c4>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	609a      	str	r2, [r3, #8]
            errorAngleI[ROLL] = 0;
 800d1e6:	4b1f      	ldr	r3, [pc, #124]	; (800d264 <taskComputeRc+0x2c8>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	601a      	str	r2, [r3, #0]
            errorAngleI[PITCH] = 0;
 800d1ec:	4b1d      	ldr	r3, [pc, #116]	; (800d264 <taskComputeRc+0x2c8>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	605a      	str	r2, [r3, #4]
            if (cfg.activate[BOXARM] > 0) { // Arming via ARM BOX
 800d1f2:	4b14      	ldr	r3, [pc, #80]	; (800d244 <taskComputeRc+0x2a8>)
 800d1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d009      	beq.n	800d20e <taskComputeRc+0x272>
                if (rcOptions[BOXARM] && f.OK_TO_ARM)
 800d1fa:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <taskComputeRc+0x29c>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <taskComputeRc+0x272>
 800d202:	4b11      	ldr	r3, [pc, #68]	; (800d248 <taskComputeRc+0x2ac>)
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <taskComputeRc+0x272>
                    mwArm();
 800d20a:	f7ff fb61 	bl	800c8d0 <mwArm>
            }
        }

        if (cfg.activate[BOXARM] > 0) { // Disarming via ARM BOX
 800d20e:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <taskComputeRc+0x2a8>)
 800d210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d212:	2b00      	cmp	r3, #0
 800d214:	d02d      	beq.n	800d272 <taskComputeRc+0x2d6>
            if (!rcOptions[BOXARM] && f.ARMED) {
 800d216:	4b08      	ldr	r3, [pc, #32]	; (800d238 <taskComputeRc+0x29c>)
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d129      	bne.n	800d272 <taskComputeRc+0x2d6>
 800d21e:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <taskComputeRc+0x2ac>)
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d025      	beq.n	800d272 <taskComputeRc+0x2d6>
                if (mcfg.disarm_kill_switch) {
 800d226:	4b09      	ldr	r3, [pc, #36]	; (800d24c <taskComputeRc+0x2b0>)
 800d228:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d01b      	beq.n	800d268 <taskComputeRc+0x2cc>
                    mwDisarm();
 800d230:	f7ff fb92 	bl	800c958 <mwDisarm>
 800d234:	e01d      	b.n	800d272 <taskComputeRc+0x2d6>
 800d236:	bf00      	nop
 800d238:	20001750 	.word	0x20001750
 800d23c:	2000173c 	.word	0x2000173c
 800d240:	200016e2 	.word	0x200016e2
 800d244:	20000db4 	.word	0x20000db4
 800d248:	200016b0 	.word	0x200016b0
 800d24c:	20000848 	.word	0x20000848
 800d250:	200016e8 	.word	0x200016e8
 800d254:	200016e4 	.word	0x200016e4
 800d258:	2000196c 	.word	0x2000196c
 800d25c:	2000196d 	.word	0x2000196d
 800d260:	2000185c 	.word	0x2000185c
 800d264:	20001868 	.word	0x20001868
                } else if (isThrottleLow) {
 800d268:	7afb      	ldrb	r3, [r7, #11]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d001      	beq.n	800d272 <taskComputeRc+0x2d6>
                    mwDisarm();
 800d26e:	f7ff fb73 	bl	800c958 <mwDisarm>
                }
            }
        }

        if (rcDelayCommand == 20) {
 800d272:	4b82      	ldr	r3, [pc, #520]	; (800d47c <taskComputeRc+0x4e0>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b14      	cmp	r3, #20
 800d278:	f040 8131 	bne.w	800d4de <taskComputeRc+0x542>
            if (f.ARMED) {      // actions during armed
 800d27c:	4b80      	ldr	r3, [pc, #512]	; (800d480 <taskComputeRc+0x4e4>)
 800d27e:	785b      	ldrb	r3, [r3, #1]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d01c      	beq.n	800d2be <taskComputeRc+0x322>
                // Disarm on throttle down + yaw
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE))
 800d284:	4b7f      	ldr	r3, [pc, #508]	; (800d484 <taskComputeRc+0x4e8>)
 800d286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d105      	bne.n	800d298 <taskComputeRc+0x2fc>
 800d28c:	4b7e      	ldr	r3, [pc, #504]	; (800d488 <taskComputeRc+0x4ec>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b5f      	cmp	r3, #95	; 0x5f
 800d292:	d101      	bne.n	800d298 <taskComputeRc+0x2fc>
                    mwDisarm();
 800d294:	f7ff fb60 	bl	800c958 <mwDisarm>
                // Disarm on roll (only when retarded_arm is enabled)
                if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_LO))
 800d298:	4b7c      	ldr	r3, [pc, #496]	; (800d48c <taskComputeRc+0x4f0>)
 800d29a:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f000 811d 	beq.w	800d4de <taskComputeRc+0x542>
 800d2a4:	4b77      	ldr	r3, [pc, #476]	; (800d484 <taskComputeRc+0x4e8>)
 800d2a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f040 8118 	bne.w	800d4de <taskComputeRc+0x542>
 800d2ae:	4b76      	ldr	r3, [pc, #472]	; (800d488 <taskComputeRc+0x4ec>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2b7d      	cmp	r3, #125	; 0x7d
 800d2b4:	f040 8113 	bne.w	800d4de <taskComputeRc+0x542>
                    mwDisarm();
 800d2b8:	f7ff fb4e 	bl	800c958 <mwDisarm>
 800d2bc:	e10f      	b.n	800d4de <taskComputeRc+0x542>
            } else {            // actions during not armed
                i = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	613b      	str	r3, [r7, #16]
                // GYRO calibration
                if (rcSticks == THR_LO + YAW_LO + PIT_LO + ROL_CE) {
 800d2c2:	4b71      	ldr	r3, [pc, #452]	; (800d488 <taskComputeRc+0x4ec>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b57      	cmp	r3, #87	; 0x57
 800d2c8:	d122      	bne.n	800d310 <taskComputeRc+0x374>
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800d2ca:	4b71      	ldr	r3, [pc, #452]	; (800d490 <taskComputeRc+0x4f4>)
 800d2cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2d0:	801a      	strh	r2, [r3, #0]
#ifdef GPS
                    if (feature(FEATURE_GPS))
 800d2d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d2d6:	f7f9 fdfb 	bl	8006ed0 <feature>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <taskComputeRc+0x348>
                        GPS_reset_home_position();
 800d2e0:	f7fb fb7e 	bl	80089e0 <GPS_reset_home_position>
#endif
                    if (sensors(SENSOR_BARO))
 800d2e4:	2004      	movs	r0, #4
 800d2e6:	f7f9 fdab 	bl	8006e40 <sensors>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <taskComputeRc+0x35a>
                        calibratingB = 10; // calibrate baro to new ground level (10 * 25 ms = ~250 ms non blocking)
 800d2f0:	4b68      	ldr	r3, [pc, #416]	; (800d494 <taskComputeRc+0x4f8>)
 800d2f2:	220a      	movs	r2, #10
 800d2f4:	801a      	strh	r2, [r3, #0]
                    if (!sensors(SENSOR_MAG))
 800d2f6:	2008      	movs	r0, #8
 800d2f8:	f7f9 fda2 	bl	8006e40 <sensors>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	f083 0301 	eor.w	r3, r3, #1
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d032      	beq.n	800d36e <taskComputeRc+0x3d2>
                        heading = 0; // reset heading to zero after gyro calibration
 800d308:	4b63      	ldr	r3, [pc, #396]	; (800d498 <taskComputeRc+0x4fc>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	801a      	strh	r2, [r3, #0]
 800d30e:	e02e      	b.n	800d36e <taskComputeRc+0x3d2>
                    // Inflight ACC Calibration
                } else if (feature(FEATURE_INFLIGHT_ACC_CAL) && (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_HI)) {
 800d310:	2004      	movs	r0, #4
 800d312:	f7f9 fddd 	bl	8006ed0 <feature>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d028      	beq.n	800d36e <taskComputeRc+0x3d2>
 800d31c:	4b5a      	ldr	r3, [pc, #360]	; (800d488 <taskComputeRc+0x4ec>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	2b5a      	cmp	r3, #90	; 0x5a
 800d322:	d124      	bne.n	800d36e <taskComputeRc+0x3d2>
                    if (AccInflightCalibrationMeasurementDone) {        // trigger saving into eeprom after landing
 800d324:	4b5d      	ldr	r3, [pc, #372]	; (800d49c <taskComputeRc+0x500>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <taskComputeRc+0x39e>
                        AccInflightCalibrationMeasurementDone = false;
 800d32c:	4b5b      	ldr	r3, [pc, #364]	; (800d49c <taskComputeRc+0x500>)
 800d32e:	2200      	movs	r2, #0
 800d330:	701a      	strb	r2, [r3, #0]
                        AccInflightCalibrationSavetoEEProm = true;
 800d332:	4b5b      	ldr	r3, [pc, #364]	; (800d4a0 <taskComputeRc+0x504>)
 800d334:	2201      	movs	r2, #1
 800d336:	701a      	strb	r2, [r3, #0]
 800d338:	e019      	b.n	800d36e <taskComputeRc+0x3d2>
                    } else {
                        AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 800d33a:	4b5a      	ldr	r3, [pc, #360]	; (800d4a4 <taskComputeRc+0x508>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bf14      	ite	ne
 800d342:	2301      	movne	r3, #1
 800d344:	2300      	moveq	r3, #0
 800d346:	b2db      	uxtb	r3, r3
 800d348:	f083 0301 	eor.w	r3, r3, #1
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	b2da      	uxtb	r2, r3
 800d354:	4b53      	ldr	r3, [pc, #332]	; (800d4a4 <taskComputeRc+0x508>)
 800d356:	701a      	strb	r2, [r3, #0]
                        if (AccInflightCalibrationArmed) {
 800d358:	4b52      	ldr	r3, [pc, #328]	; (800d4a4 <taskComputeRc+0x508>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d003      	beq.n	800d368 <taskComputeRc+0x3cc>
                            buzzer(BUZZER_ACC_CALIBRATION);
 800d360:	200a      	movs	r0, #10
 800d362:	f7f6 fde1 	bl	8003f28 <buzzer>
 800d366:	e002      	b.n	800d36e <taskComputeRc+0x3d2>
                        } else {
                            buzzer(BUZZER_ACC_CALIBRATION_FAIL);
 800d368:	200b      	movs	r0, #11
 800d36a:	f7f6 fddd 	bl	8003f28 <buzzer>
                        }
                    }
                }

                // Multiple configuration profiles
                if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_LO)          // ROLL left  -> Profile 1
 800d36e:	4b46      	ldr	r3, [pc, #280]	; (800d488 <taskComputeRc+0x4ec>)
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b5d      	cmp	r3, #93	; 0x5d
 800d374:	d102      	bne.n	800d37c <taskComputeRc+0x3e0>
                    i = 1;
 800d376:	2301      	movs	r3, #1
 800d378:	613b      	str	r3, [r7, #16]
 800d37a:	e00c      	b.n	800d396 <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_HI + ROL_CE)     // PITCH up   -> Profile 2
 800d37c:	4b42      	ldr	r3, [pc, #264]	; (800d488 <taskComputeRc+0x4ec>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b5b      	cmp	r3, #91	; 0x5b
 800d382:	d102      	bne.n	800d38a <taskComputeRc+0x3ee>
                    i = 2;
 800d384:	2302      	movs	r3, #2
 800d386:	613b      	str	r3, [r7, #16]
 800d388:	e005      	b.n	800d396 <taskComputeRc+0x3fa>
                else if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)     // ROLL right -> Profile 3
 800d38a:	4b3f      	ldr	r3, [pc, #252]	; (800d488 <taskComputeRc+0x4ec>)
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b5e      	cmp	r3, #94	; 0x5e
 800d390:	d101      	bne.n	800d396 <taskComputeRc+0x3fa>
                    i = 3;
 800d392:	2303      	movs	r3, #3
 800d394:	613b      	str	r3, [r7, #16]
                if (i) {
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d011      	beq.n	800d3c0 <taskComputeRc+0x424>
                    mcfg.current_profile = i - 1;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	4b39      	ldr	r3, [pc, #228]	; (800d48c <taskComputeRc+0x4f0>)
 800d3a6:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
                    writeEEPROM(0, false);
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	f7f9 f9ad 	bl	800670c <writeEEPROM>
                    blinkLED(2, 40, i);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	2128      	movs	r1, #40	; 0x28
 800d3ba:	2002      	movs	r0, #2
 800d3bc:	f7fe fd9c 	bl	800bef8 <blinkLED>
                    // TODO alarmArray[0] = i;
                }

                // Arm via YAW
                if (cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE))
 800d3c0:	4b30      	ldr	r3, [pc, #192]	; (800d484 <taskComputeRc+0x4e8>)
 800d3c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d106      	bne.n	800d3d6 <taskComputeRc+0x43a>
 800d3c8:	4b2f      	ldr	r3, [pc, #188]	; (800d488 <taskComputeRc+0x4ec>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b6f      	cmp	r3, #111	; 0x6f
 800d3ce:	d102      	bne.n	800d3d6 <taskComputeRc+0x43a>
                    mwArm();
 800d3d0:	f7ff fa7e 	bl	800c8d0 <mwArm>
 800d3d4:	e01f      	b.n	800d416 <taskComputeRc+0x47a>
                // Arm via ROLL
                else if (mcfg.retarded_arm && cfg.activate[BOXARM] == 0 && (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_HI))
 800d3d6:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <taskComputeRc+0x4f0>)
 800d3d8:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00a      	beq.n	800d3f6 <taskComputeRc+0x45a>
 800d3e0:	4b28      	ldr	r3, [pc, #160]	; (800d484 <taskComputeRc+0x4e8>)
 800d3e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d106      	bne.n	800d3f6 <taskComputeRc+0x45a>
 800d3e8:	4b27      	ldr	r3, [pc, #156]	; (800d488 <taskComputeRc+0x4ec>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b7e      	cmp	r3, #126	; 0x7e
 800d3ee:	d102      	bne.n	800d3f6 <taskComputeRc+0x45a>
                    mwArm();
 800d3f0:	f7ff fa6e 	bl	800c8d0 <mwArm>
 800d3f4:	e00f      	b.n	800d416 <taskComputeRc+0x47a>
                // Calibrating Acc
                else if (rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_CE)
 800d3f6:	4b24      	ldr	r3, [pc, #144]	; (800d488 <taskComputeRc+0x4ec>)
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b97      	cmp	r3, #151	; 0x97
 800d3fc:	d104      	bne.n	800d408 <taskComputeRc+0x46c>
                    calibratingA = CALIBRATING_ACC_CYCLES;
 800d3fe:	4b2a      	ldr	r3, [pc, #168]	; (800d4a8 <taskComputeRc+0x50c>)
 800d400:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d404:	801a      	strh	r2, [r3, #0]
 800d406:	e006      	b.n	800d416 <taskComputeRc+0x47a>
                // Calibrating Mag
                else if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_CE)
 800d408:	4b1f      	ldr	r3, [pc, #124]	; (800d488 <taskComputeRc+0x4ec>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2ba7      	cmp	r3, #167	; 0xa7
 800d40e:	d102      	bne.n	800d416 <taskComputeRc+0x47a>
                    f.CALIBRATE_MAG = 1;
 800d410:	4b1b      	ldr	r3, [pc, #108]	; (800d480 <taskComputeRc+0x4e4>)
 800d412:	2201      	movs	r2, #1
 800d414:	739a      	strb	r2, [r3, #14]
                i = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	613b      	str	r3, [r7, #16]
                // Acc Trim
                if (rcSticks == THR_HI + YAW_CE + PIT_HI + ROL_CE) {
 800d41a:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <taskComputeRc+0x4ec>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2bbb      	cmp	r3, #187	; 0xbb
 800d420:	d10b      	bne.n	800d43a <taskComputeRc+0x49e>
                    cfg.angleTrim[PITCH] += 2;
 800d422:	4b18      	ldr	r3, [pc, #96]	; (800d484 <taskComputeRc+0x4e8>)
 800d424:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d428:	b29b      	uxth	r3, r3
 800d42a:	3302      	adds	r3, #2
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	b21a      	sxth	r2, r3
 800d430:	4b14      	ldr	r3, [pc, #80]	; (800d484 <taskComputeRc+0x4e8>)
 800d432:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d434:	2301      	movs	r3, #1
 800d436:	613b      	str	r3, [r7, #16]
 800d438:	e047      	b.n	800d4ca <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_LO + ROL_CE) {
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <taskComputeRc+0x4ec>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2bb7      	cmp	r3, #183	; 0xb7
 800d440:	d10b      	bne.n	800d45a <taskComputeRc+0x4be>
                    cfg.angleTrim[PITCH] -= 2;
 800d442:	4b10      	ldr	r3, [pc, #64]	; (800d484 <taskComputeRc+0x4e8>)
 800d444:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800d448:	b29b      	uxth	r3, r3
 800d44a:	3b02      	subs	r3, #2
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	b21a      	sxth	r2, r3
 800d450:	4b0c      	ldr	r3, [pc, #48]	; (800d484 <taskComputeRc+0x4e8>)
 800d452:	85da      	strh	r2, [r3, #46]	; 0x2e
                    i = 1;
 800d454:	2301      	movs	r3, #1
 800d456:	613b      	str	r3, [r7, #16]
 800d458:	e037      	b.n	800d4ca <taskComputeRc+0x52e>
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_HI) {
 800d45a:	4b0b      	ldr	r3, [pc, #44]	; (800d488 <taskComputeRc+0x4ec>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2bbe      	cmp	r3, #190	; 0xbe
 800d460:	d124      	bne.n	800d4ac <taskComputeRc+0x510>
                    cfg.angleTrim[ROLL] += 2;
 800d462:	4b08      	ldr	r3, [pc, #32]	; (800d484 <taskComputeRc+0x4e8>)
 800d464:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d468:	b29b      	uxth	r3, r3
 800d46a:	3302      	adds	r3, #2
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	b21a      	sxth	r2, r3
 800d470:	4b04      	ldr	r3, [pc, #16]	; (800d484 <taskComputeRc+0x4e8>)
 800d472:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d474:	2301      	movs	r3, #1
 800d476:	613b      	str	r3, [r7, #16]
 800d478:	e027      	b.n	800d4ca <taskComputeRc+0x52e>
 800d47a:	bf00      	nop
 800d47c:	2000196d 	.word	0x2000196d
 800d480:	200016b0 	.word	0x200016b0
 800d484:	20000db4 	.word	0x20000db4
 800d488:	2000196c 	.word	0x2000196c
 800d48c:	20000848 	.word	0x20000848
 800d490:	200019e4 	.word	0x200019e4
 800d494:	200019e2 	.word	0x200019e2
 800d498:	200019e6 	.word	0x200019e6
 800d49c:	2000184d 	.word	0x2000184d
 800d4a0:	2000184e 	.word	0x2000184e
 800d4a4:	2000184c 	.word	0x2000184c
 800d4a8:	200019e0 	.word	0x200019e0
                } else if (rcSticks == THR_HI + YAW_CE + PIT_CE + ROL_LO) {
 800d4ac:	4b9e      	ldr	r3, [pc, #632]	; (800d728 <taskComputeRc+0x78c>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2bbd      	cmp	r3, #189	; 0xbd
 800d4b2:	d10a      	bne.n	800d4ca <taskComputeRc+0x52e>
                    cfg.angleTrim[ROLL] -= 2;
 800d4b4:	4b9d      	ldr	r3, [pc, #628]	; (800d72c <taskComputeRc+0x790>)
 800d4b6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	3b02      	subs	r3, #2
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	b21a      	sxth	r2, r3
 800d4c2:	4b9a      	ldr	r3, [pc, #616]	; (800d72c <taskComputeRc+0x790>)
 800d4c4:	859a      	strh	r2, [r3, #44]	; 0x2c
                    i = 1;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	613b      	str	r3, [r7, #16]
                }
                if (i) {
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d006      	beq.n	800d4de <taskComputeRc+0x542>
                    writeEEPROM(1, true);
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	f7f9 f91a 	bl	800670c <writeEEPROM>
                    rcDelayCommand = 0; // allow autorepetition
 800d4d8:	4b95      	ldr	r3, [pc, #596]	; (800d730 <taskComputeRc+0x794>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800d4de:	2004      	movs	r0, #4
 800d4e0:	f7f9 fcf6 	bl	8006ed0 <feature>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d041      	beq.n	800d56e <taskComputeRc+0x5d2>
            if (AccInflightCalibrationArmed && f.ARMED && rcData[THROTTLE] > mcfg.mincheck && !rcOptions[BOXARM]) {   // Copter is airborne and you are turning it off via boxarm : start measurement
 800d4ea:	4b92      	ldr	r3, [pc, #584]	; (800d734 <taskComputeRc+0x798>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d016      	beq.n	800d520 <taskComputeRc+0x584>
 800d4f2:	4b91      	ldr	r3, [pc, #580]	; (800d738 <taskComputeRc+0x79c>)
 800d4f4:	785b      	ldrb	r3, [r3, #1]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d012      	beq.n	800d520 <taskComputeRc+0x584>
 800d4fa:	4b90      	ldr	r3, [pc, #576]	; (800d73c <taskComputeRc+0x7a0>)
 800d4fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d500:	461a      	mov	r2, r3
 800d502:	4b8f      	ldr	r3, [pc, #572]	; (800d740 <taskComputeRc+0x7a4>)
 800d504:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800d508:	429a      	cmp	r2, r3
 800d50a:	dd09      	ble.n	800d520 <taskComputeRc+0x584>
 800d50c:	4b8d      	ldr	r3, [pc, #564]	; (800d744 <taskComputeRc+0x7a8>)
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d105      	bne.n	800d520 <taskComputeRc+0x584>
                InflightcalibratingA = 50;
 800d514:	4b8c      	ldr	r3, [pc, #560]	; (800d748 <taskComputeRc+0x7ac>)
 800d516:	2232      	movs	r2, #50	; 0x32
 800d518:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationArmed = false;
 800d51a:	4b86      	ldr	r3, [pc, #536]	; (800d734 <taskComputeRc+0x798>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	701a      	strb	r2, [r3, #0]
            }
            if (rcOptions[BOXCALIB]) {      // Use the Calib Option to activate : Calib = TRUE Meausrement started, Land and Calib = 0 measurement stored
 800d520:	4b88      	ldr	r3, [pc, #544]	; (800d744 <taskComputeRc+0x7a8>)
 800d522:	7c5b      	ldrb	r3, [r3, #17]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d014      	beq.n	800d552 <taskComputeRc+0x5b6>
                if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 800d528:	4b88      	ldr	r3, [pc, #544]	; (800d74c <taskComputeRc+0x7b0>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	f083 0301 	eor.w	r3, r3, #1
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d009      	beq.n	800d54a <taskComputeRc+0x5ae>
 800d536:	4b86      	ldr	r3, [pc, #536]	; (800d750 <taskComputeRc+0x7b4>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	f083 0301 	eor.w	r3, r3, #1
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <taskComputeRc+0x5ae>
                    InflightcalibratingA = 50;
 800d544:	4b80      	ldr	r3, [pc, #512]	; (800d748 <taskComputeRc+0x7ac>)
 800d546:	2232      	movs	r2, #50	; 0x32
 800d548:	801a      	strh	r2, [r3, #0]
                AccInflightCalibrationActive = true;
 800d54a:	4b80      	ldr	r3, [pc, #512]	; (800d74c <taskComputeRc+0x7b0>)
 800d54c:	2201      	movs	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e00d      	b.n	800d56e <taskComputeRc+0x5d2>
            } else if (AccInflightCalibrationMeasurementDone && !f.ARMED) {
 800d552:	4b7f      	ldr	r3, [pc, #508]	; (800d750 <taskComputeRc+0x7b4>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d009      	beq.n	800d56e <taskComputeRc+0x5d2>
 800d55a:	4b77      	ldr	r3, [pc, #476]	; (800d738 <taskComputeRc+0x79c>)
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d105      	bne.n	800d56e <taskComputeRc+0x5d2>
                AccInflightCalibrationMeasurementDone = false;
 800d562:	4b7b      	ldr	r3, [pc, #492]	; (800d750 <taskComputeRc+0x7b4>)
 800d564:	2200      	movs	r2, #0
 800d566:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationSavetoEEProm = true;
 800d568:	4b7a      	ldr	r3, [pc, #488]	; (800d754 <taskComputeRc+0x7b8>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	701a      	strb	r2, [r3, #0]
            }
        }

        // Check AUX switches

        for (i = 0; i < core.numAuxChannels; i++)
 800d56e:	2300      	movs	r3, #0
 800d570:	613b      	str	r3, [r7, #16]
 800d572:	e04a      	b.n	800d60a <taskComputeRc+0x66e>
            auxState |= (rcData[AUX1 + i] < 1300) << (3 * i) | (1300 < rcData[AUX1 + i] && rcData[AUX1 + i] < 1700) << (3 * i + 1) | (rcData[AUX1 + i] > 1700) << (3 * i + 2);
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	3304      	adds	r3, #4
 800d578:	4a70      	ldr	r2, [pc, #448]	; (800d73c <taskComputeRc+0x7a0>)
 800d57a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d57e:	f240 5213 	movw	r2, #1299	; 0x513
 800d582:	4293      	cmp	r3, r2
 800d584:	bfd4      	ite	le
 800d586:	2301      	movle	r3, #1
 800d588:	2300      	movgt	r3, #0
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	4619      	mov	r1, r3
 800d58e:	693a      	ldr	r2, [r7, #16]
 800d590:	4613      	mov	r3, r2
 800d592:	005b      	lsls	r3, r3, #1
 800d594:	4413      	add	r3, r2
 800d596:	4099      	lsls	r1, r3
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4a67      	ldr	r2, [pc, #412]	; (800d73c <taskComputeRc+0x7a0>)
 800d59e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5a2:	f240 5214 	movw	r2, #1300	; 0x514
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	dd0a      	ble.n	800d5c0 <taskComputeRc+0x624>
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	4a63      	ldr	r2, [pc, #396]	; (800d73c <taskComputeRc+0x7a0>)
 800d5b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5b4:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	dc01      	bgt.n	800d5c0 <taskComputeRc+0x624>
 800d5bc:	2001      	movs	r0, #1
 800d5be:	e000      	b.n	800d5c2 <taskComputeRc+0x626>
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	693a      	ldr	r2, [r7, #16]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	4413      	add	r3, r2
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	fa00 f303 	lsl.w	r3, r0, r3
 800d5d0:	4319      	orrs	r1, r3
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4a59      	ldr	r2, [pc, #356]	; (800d73c <taskComputeRc+0x7a0>)
 800d5d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5dc:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	bfcc      	ite	gt
 800d5e4:	2301      	movgt	r3, #1
 800d5e6:	2300      	movle	r3, #0
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3302      	adds	r3, #2
 800d5f6:	fa00 f303 	lsl.w	r3, r0, r3
 800d5fa:	430b      	orrs	r3, r1
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	4313      	orrs	r3, r2
 800d602:	60fb      	str	r3, [r7, #12]
        for (i = 0; i < core.numAuxChannels; i++)
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	3301      	adds	r3, #1
 800d608:	613b      	str	r3, [r7, #16]
 800d60a:	4b53      	ldr	r3, [pc, #332]	; (800d758 <taskComputeRc+0x7bc>)
 800d60c:	7d1b      	ldrb	r3, [r3, #20]
 800d60e:	461a      	mov	r2, r3
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	4293      	cmp	r3, r2
 800d614:	dbae      	blt.n	800d574 <taskComputeRc+0x5d8>
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d616:	2300      	movs	r3, #0
 800d618:	613b      	str	r3, [r7, #16]
 800d61a:	e015      	b.n	800d648 <taskComputeRc+0x6ac>
            rcOptions[i] = (auxState & cfg.activate[i]) > 0;
 800d61c:	4a43      	ldr	r2, [pc, #268]	; (800d72c <taskComputeRc+0x790>)
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	3312      	adds	r3, #18
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	4413      	add	r3, r2
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4013      	ands	r3, r2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bf14      	ite	ne
 800d630:	2301      	movne	r3, #1
 800d632:	2300      	moveq	r3, #0
 800d634:	b2db      	uxtb	r3, r3
 800d636:	4619      	mov	r1, r3
 800d638:	4a42      	ldr	r2, [pc, #264]	; (800d744 <taskComputeRc+0x7a8>)
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	4413      	add	r3, r2
 800d63e:	460a      	mov	r2, r1
 800d640:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < CHECKBOXITEMS; i++)
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	3301      	adds	r3, #1
 800d646:	613b      	str	r3, [r7, #16]
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	2b18      	cmp	r3, #24
 800d64c:	dde6      	ble.n	800d61c <taskComputeRc+0x680>
        f.CRUISE_MODE = rcOptions[BOXGCRUISE];
 800d64e:	4b3d      	ldr	r3, [pc, #244]	; (800d744 <taskComputeRc+0x7a8>)
 800d650:	7e1a      	ldrb	r2, [r3, #24]
 800d652:	4b39      	ldr	r3, [pc, #228]	; (800d738 <taskComputeRc+0x79c>)
 800d654:	751a      	strb	r2, [r3, #20]
        if (f.CRUISE_MODE) {
 800d656:	4b38      	ldr	r3, [pc, #224]	; (800d738 <taskComputeRc+0x79c>)
 800d658:	7d1b      	ldrb	r3, [r3, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d005      	beq.n	800d66a <taskComputeRc+0x6ce>
            rcOptions[BOXGPSHOLD] = true;
 800d65e:	4b39      	ldr	r3, [pc, #228]	; (800d744 <taskComputeRc+0x7a8>)
 800d660:	2201      	movs	r2, #1
 800d662:	72da      	strb	r2, [r3, #11]
            rcOptions[BOXHORIZON] = true;
 800d664:	4b37      	ldr	r3, [pc, #220]	; (800d744 <taskComputeRc+0x7a8>)
 800d666:	2201      	movs	r2, #1
 800d668:	709a      	strb	r2, [r3, #2]
        }

        // note: if FAILSAFE is disable, failsafeCnt > 5 * FAILSAVE_DELAY is always false
        if ((rcOptions[BOXANGLE] || (failsafeCnt > 5 * cfg.failsafe_delay)) && (sensors(SENSOR_ACC))) {
 800d66a:	4b36      	ldr	r3, [pc, #216]	; (800d744 <taskComputeRc+0x7a8>)
 800d66c:	785b      	ldrb	r3, [r3, #1]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10c      	bne.n	800d68c <taskComputeRc+0x6f0>
 800d672:	4b3a      	ldr	r3, [pc, #232]	; (800d75c <taskComputeRc+0x7c0>)
 800d674:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d678:	4619      	mov	r1, r3
 800d67a:	4b2c      	ldr	r3, [pc, #176]	; (800d72c <taskComputeRc+0x790>)
 800d67c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d680:	461a      	mov	r2, r3
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	4299      	cmp	r1, r3
 800d68a:	dd30      	ble.n	800d6ee <taskComputeRc+0x752>
 800d68c:	2002      	movs	r0, #2
 800d68e:	f7f9 fbd7 	bl	8006e40 <sensors>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d02a      	beq.n	800d6ee <taskComputeRc+0x752>
            // bumpless transfer to Level mode
            if (!f.ANGLE_MODE) {
 800d698:	4b27      	ldr	r3, [pc, #156]	; (800d738 <taskComputeRc+0x79c>)
 800d69a:	78db      	ldrb	r3, [r3, #3]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d108      	bne.n	800d6b2 <taskComputeRc+0x716>
                errorAngleI[ROLL] = 0;
 800d6a0:	4b2f      	ldr	r3, [pc, #188]	; (800d760 <taskComputeRc+0x7c4>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d6a6:	4b2e      	ldr	r3, [pc, #184]	; (800d760 <taskComputeRc+0x7c4>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	605a      	str	r2, [r3, #4]
                f.ANGLE_MODE = 1;
 800d6ac:	4b22      	ldr	r3, [pc, #136]	; (800d738 <taskComputeRc+0x79c>)
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	70da      	strb	r2, [r3, #3]
            }
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d6b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d6b6:	f7f9 fc0b 	bl	8006ed0 <feature>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d01d      	beq.n	800d6fc <taskComputeRc+0x760>
                if ((failsafeCnt > 5 * cfg.failsafe_delay) && sensors(SENSOR_GPS)) {
 800d6c0:	4b26      	ldr	r3, [pc, #152]	; (800d75c <taskComputeRc+0x7c0>)
 800d6c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4b18      	ldr	r3, [pc, #96]	; (800d72c <taskComputeRc+0x790>)
 800d6ca:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4413      	add	r3, r2
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	dd10      	ble.n	800d6fc <taskComputeRc+0x760>
 800d6da:	2020      	movs	r0, #32
 800d6dc:	f7f9 fbb0 	bl	8006e40 <sensors>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <taskComputeRc+0x760>
                    f.FW_FAILSAFE_RTH_ENABLE = 1;
 800d6e6:	4b14      	ldr	r3, [pc, #80]	; (800d738 <taskComputeRc+0x79c>)
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	749a      	strb	r2, [r3, #18]
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d6ec:	e006      	b.n	800d6fc <taskComputeRc+0x760>
                }
            }
        } else {
            f.ANGLE_MODE = 0;   // failsafe support
 800d6ee:	4b12      	ldr	r3, [pc, #72]	; (800d738 <taskComputeRc+0x79c>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	70da      	strb	r2, [r3, #3]
            f.FW_FAILSAFE_RTH_ENABLE = 0;
 800d6f4:	4b10      	ldr	r3, [pc, #64]	; (800d738 <taskComputeRc+0x79c>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	749a      	strb	r2, [r3, #18]
 800d6fa:	e000      	b.n	800d6fe <taskComputeRc+0x762>
            if (feature(FEATURE_FW_FAILSAFE_RTH)) {
 800d6fc:	bf00      	nop
        }

        if (rcOptions[BOXHORIZON]) {
 800d6fe:	4b11      	ldr	r3, [pc, #68]	; (800d744 <taskComputeRc+0x7a8>)
 800d700:	789b      	ldrb	r3, [r3, #2]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d02e      	beq.n	800d764 <taskComputeRc+0x7c8>
            f.ANGLE_MODE = 0;
 800d706:	4b0c      	ldr	r3, [pc, #48]	; (800d738 <taskComputeRc+0x79c>)
 800d708:	2200      	movs	r2, #0
 800d70a:	70da      	strb	r2, [r3, #3]
            if (!f.HORIZON_MODE) {
 800d70c:	4b0a      	ldr	r3, [pc, #40]	; (800d738 <taskComputeRc+0x79c>)
 800d70e:	791b      	ldrb	r3, [r3, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d12a      	bne.n	800d76a <taskComputeRc+0x7ce>
                errorAngleI[ROLL] = 0;
 800d714:	4b12      	ldr	r3, [pc, #72]	; (800d760 <taskComputeRc+0x7c4>)
 800d716:	2200      	movs	r2, #0
 800d718:	601a      	str	r2, [r3, #0]
                errorAngleI[PITCH] = 0;
 800d71a:	4b11      	ldr	r3, [pc, #68]	; (800d760 <taskComputeRc+0x7c4>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	605a      	str	r2, [r3, #4]
                f.HORIZON_MODE = 1;
 800d720:	4b05      	ldr	r3, [pc, #20]	; (800d738 <taskComputeRc+0x79c>)
 800d722:	2201      	movs	r2, #1
 800d724:	711a      	strb	r2, [r3, #4]
 800d726:	e020      	b.n	800d76a <taskComputeRc+0x7ce>
 800d728:	2000196c 	.word	0x2000196c
 800d72c:	20000db4 	.word	0x20000db4
 800d730:	2000196d 	.word	0x2000196d
 800d734:	2000184c 	.word	0x2000184c
 800d738:	200016b0 	.word	0x200016b0
 800d73c:	200016e8 	.word	0x200016e8
 800d740:	20000848 	.word	0x20000848
 800d744:	20001750 	.word	0x20001750
 800d748:	20001850 	.word	0x20001850
 800d74c:	2000184f 	.word	0x2000184f
 800d750:	2000184d 	.word	0x2000184d
 800d754:	2000184e 	.word	0x2000184e
 800d758:	20000790 	.word	0x20000790
 800d75c:	200016e2 	.word	0x200016e2
 800d760:	20001868 	.word	0x20001868
            }
        } else {
            f.HORIZON_MODE = 0;
 800d764:	4b9c      	ldr	r3, [pc, #624]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d766:	2200      	movs	r2, #0
 800d768:	711a      	strb	r2, [r3, #4]
        }

        if ((rcOptions[BOXARM]) == 0)
 800d76a:	4b9c      	ldr	r3, [pc, #624]	; (800d9dc <taskComputeRc+0xa40>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <taskComputeRc+0x7dc>
            f.OK_TO_ARM = 1;
 800d772:	4b99      	ldr	r3, [pc, #612]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d774:	2201      	movs	r2, #1
 800d776:	701a      	strb	r2, [r3, #0]
        if (f.ANGLE_MODE || f.HORIZON_MODE) {
 800d778:	4b97      	ldr	r3, [pc, #604]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d77a:	78db      	ldrb	r3, [r3, #3]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d103      	bne.n	800d788 <taskComputeRc+0x7ec>
 800d780:	4b95      	ldr	r3, [pc, #596]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d782:	791b      	ldrb	r3, [r3, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d003      	beq.n	800d790 <taskComputeRc+0x7f4>
            actLed1State(ON);
 800d788:	2001      	movs	r0, #1
 800d78a:	f7f4 fca1 	bl	80020d0 <actLed1State>
 800d78e:	e002      	b.n	800d796 <taskComputeRc+0x7fa>
        } else {
            actLed1State(OFF);
 800d790:	2000      	movs	r0, #0
 800d792:	f7f4 fc9d 	bl	80020d0 <actLed1State>
        }

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800d796:	2004      	movs	r0, #4
 800d798:	f7f9 fb52 	bl	8006e40 <sensors>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d033      	beq.n	800d80a <taskComputeRc+0x86e>
            // Baro alt hold activate
            if (rcOptions[BOXBARO]) {
 800d7a2:	4b8e      	ldr	r3, [pc, #568]	; (800d9dc <taskComputeRc+0xa40>)
 800d7a4:	78db      	ldrb	r3, [r3, #3]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d016      	beq.n	800d7d8 <taskComputeRc+0x83c>
                if (!f.BARO_MODE) {
 800d7aa:	4b8b      	ldr	r3, [pc, #556]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d7ac:	799b      	ldrb	r3, [r3, #6]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d115      	bne.n	800d7de <taskComputeRc+0x842>
                    f.BARO_MODE = 1;
 800d7b2:	4b89      	ldr	r3, [pc, #548]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	719a      	strb	r2, [r3, #6]
                    AltHold = EstAlt;
 800d7b8:	4b89      	ldr	r3, [pc, #548]	; (800d9e0 <taskComputeRc+0xa44>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a89      	ldr	r2, [pc, #548]	; (800d9e4 <taskComputeRc+0xa48>)
 800d7be:	6013      	str	r3, [r2, #0]
                    initialThrottleHold = rcCommand[THROTTLE];
 800d7c0:	4b89      	ldr	r3, [pc, #548]	; (800d9e8 <taskComputeRc+0xa4c>)
 800d7c2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800d7c6:	4b89      	ldr	r3, [pc, #548]	; (800d9ec <taskComputeRc+0xa50>)
 800d7c8:	801a      	strh	r2, [r3, #0]
                    errorVelocityI = 0;
 800d7ca:	4b89      	ldr	r3, [pc, #548]	; (800d9f0 <taskComputeRc+0xa54>)
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	601a      	str	r2, [r3, #0]
                    BaroPID = 0;
 800d7d0:	4b88      	ldr	r3, [pc, #544]	; (800d9f4 <taskComputeRc+0xa58>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	e002      	b.n	800d7de <taskComputeRc+0x842>
                }
            } else {
                f.BARO_MODE = 0;
 800d7d8:	4b7f      	ldr	r3, [pc, #508]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	719a      	strb	r2, [r3, #6]
            }
            // Vario signalling activate
            if (feature(FEATURE_VARIO)) {
 800d7de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d7e2:	f7f9 fb75 	bl	8006ed0 <feature>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00e      	beq.n	800d80a <taskComputeRc+0x86e>
                if (rcOptions[BOXVARIO]) {
 800d7ec:	4b7b      	ldr	r3, [pc, #492]	; (800d9dc <taskComputeRc+0xa40>)
 800d7ee:	791b      	ldrb	r3, [r3, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d007      	beq.n	800d804 <taskComputeRc+0x868>
                    if (!f.VARIO_MODE) {
 800d7f4:	4b78      	ldr	r3, [pc, #480]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d7f6:	7bdb      	ldrb	r3, [r3, #15]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <taskComputeRc+0x86e>
                        f.VARIO_MODE = 1;
 800d7fc:	4b76      	ldr	r3, [pc, #472]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d7fe:	2201      	movs	r2, #1
 800d800:	73da      	strb	r2, [r3, #15]
 800d802:	e002      	b.n	800d80a <taskComputeRc+0x86e>
                    }
                } else {
                    f.VARIO_MODE = 0;
 800d804:	4b74      	ldr	r3, [pc, #464]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d806:	2200      	movs	r2, #0
 800d808:	73da      	strb	r2, [r3, #15]
            }
        }
#endif

#ifdef  MAG
        if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800d80a:	2002      	movs	r0, #2
 800d80c:	f7f9 fb18 	bl	8006e40 <sensors>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d105      	bne.n	800d822 <taskComputeRc+0x886>
 800d816:	2008      	movs	r0, #8
 800d818:	f7f9 fb12 	bl	8006e40 <sensors>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d02b      	beq.n	800d87a <taskComputeRc+0x8de>
            if (rcOptions[BOXMAG]) {
 800d822:	4b6e      	ldr	r3, [pc, #440]	; (800d9dc <taskComputeRc+0xa40>)
 800d824:	795b      	ldrb	r3, [r3, #5]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00c      	beq.n	800d844 <taskComputeRc+0x8a8>
                if (!f.MAG_MODE) {
 800d82a:	4b6b      	ldr	r3, [pc, #428]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d82c:	795b      	ldrb	r3, [r3, #5]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d10b      	bne.n	800d84a <taskComputeRc+0x8ae>
                    f.MAG_MODE = 1;
 800d832:	4b69      	ldr	r3, [pc, #420]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d834:	2201      	movs	r2, #1
 800d836:	715a      	strb	r2, [r3, #5]
                    magHold = heading;
 800d838:	4b6f      	ldr	r3, [pc, #444]	; (800d9f8 <taskComputeRc+0xa5c>)
 800d83a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d83e:	4b6f      	ldr	r3, [pc, #444]	; (800d9fc <taskComputeRc+0xa60>)
 800d840:	801a      	strh	r2, [r3, #0]
 800d842:	e002      	b.n	800d84a <taskComputeRc+0x8ae>
                }
            } else {
                f.MAG_MODE = 0;
 800d844:	4b64      	ldr	r3, [pc, #400]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d846:	2200      	movs	r2, #0
 800d848:	715a      	strb	r2, [r3, #5]
            }
            if (rcOptions[BOXHEADFREE]) {
 800d84a:	4b64      	ldr	r3, [pc, #400]	; (800d9dc <taskComputeRc+0xa40>)
 800d84c:	799b      	ldrb	r3, [r3, #6]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d007      	beq.n	800d862 <taskComputeRc+0x8c6>
                if (!f.HEADFREE_MODE) {
 800d852:	4b61      	ldr	r3, [pc, #388]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d854:	7a5b      	ldrb	r3, [r3, #9]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <taskComputeRc+0x8cc>
                    f.HEADFREE_MODE = 1;
 800d85a:	4b5f      	ldr	r3, [pc, #380]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d85c:	2201      	movs	r2, #1
 800d85e:	725a      	strb	r2, [r3, #9]
 800d860:	e002      	b.n	800d868 <taskComputeRc+0x8cc>
                }
            } else {
                f.HEADFREE_MODE = 0;
 800d862:	4b5d      	ldr	r3, [pc, #372]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d864:	2200      	movs	r2, #0
 800d866:	725a      	strb	r2, [r3, #9]
            }
            if (rcOptions[BOXHEADADJ]) {
 800d868:	4b5c      	ldr	r3, [pc, #368]	; (800d9dc <taskComputeRc+0xa40>)
 800d86a:	79db      	ldrb	r3, [r3, #7]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <taskComputeRc+0x8de>
                headFreeModeHold = heading; // acquire new heading
 800d870:	4b61      	ldr	r3, [pc, #388]	; (800d9f8 <taskComputeRc+0xa5c>)
 800d872:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d876:	4b62      	ldr	r3, [pc, #392]	; (800da00 <taskComputeRc+0xa64>)
 800d878:	801a      	strh	r2, [r3, #0]
            }
        }
#endif

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800d87a:	2020      	movs	r0, #32
 800d87c:	f7f9 fae0 	bl	8006e40 <sensors>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	f000 809c 	beq.w	800d9c0 <taskComputeRc+0xa24>
            if (f.GPS_FIX && GPS_numSat >= 5) {
 800d888:	4b53      	ldr	r3, [pc, #332]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d88a:	7adb      	ldrb	r3, [r3, #11]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 808e 	beq.w	800d9ae <taskComputeRc+0xa12>
 800d892:	4b5c      	ldr	r3, [pc, #368]	; (800da04 <taskComputeRc+0xa68>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b04      	cmp	r3, #4
 800d898:	f240 8089 	bls.w	800d9ae <taskComputeRc+0xa12>
                if (nav_mode != NAV_MODE_NONE && (!f.HORIZON_MODE && !f.ANGLE_MODE))
 800d89c:	4b5a      	ldr	r3, [pc, #360]	; (800da08 <taskComputeRc+0xa6c>)
 800d89e:	f993 3000 	ldrsb.w	r3, [r3]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00a      	beq.n	800d8bc <taskComputeRc+0x920>
 800d8a6:	4b4c      	ldr	r3, [pc, #304]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8a8:	791b      	ldrb	r3, [r3, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <taskComputeRc+0x920>
 800d8ae:	4b4a      	ldr	r3, [pc, #296]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8b0:	78db      	ldrb	r3, [r3, #3]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d102      	bne.n	800d8bc <taskComputeRc+0x920>
                    f.ANGLE_MODE = true; // Force a stable mode in GPS Mode
 800d8b6:	4b48      	ldr	r3, [pc, #288]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	70da      	strb	r2, [r3, #3]

                // if both GPS_HOME & GPS_HOLD are checked => GPS_HOME is the priority
                if (rcOptions[BOXGPSHOME] || f.FW_FAILSAFE_RTH_ENABLE ) {
 800d8bc:	4b47      	ldr	r3, [pc, #284]	; (800d9dc <taskComputeRc+0xa40>)
 800d8be:	7a9b      	ldrb	r3, [r3, #10]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d103      	bne.n	800d8cc <taskComputeRc+0x930>
 800d8c4:	4b44      	ldr	r3, [pc, #272]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8c6:	7c9b      	ldrb	r3, [r3, #18]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01c      	beq.n	800d906 <taskComputeRc+0x96a>
                    if (!f.GPS_HOME_MODE) {
 800d8cc:	4b42      	ldr	r3, [pc, #264]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8ce:	79db      	ldrb	r3, [r3, #7]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d168      	bne.n	800d9a6 <taskComputeRc+0xa0a>
                        f.GPS_HOME_MODE = 1;
 800d8d4:	4b40      	ldr	r3, [pc, #256]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	71da      	strb	r2, [r3, #7]
                        f.GPS_HOLD_MODE = 0;
 800d8da:	4b3f      	ldr	r3, [pc, #252]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	721a      	strb	r2, [r3, #8]
                        GPSNavReset = 0;
 800d8e0:	4b4a      	ldr	r3, [pc, #296]	; (800da0c <taskComputeRc+0xa70>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
                        GPS_set_next_wp(&GPS_home[LAT], &GPS_home[LON]);
 800d8e6:	494a      	ldr	r1, [pc, #296]	; (800da10 <taskComputeRc+0xa74>)
 800d8e8:	484a      	ldr	r0, [pc, #296]	; (800da14 <taskComputeRc+0xa78>)
 800d8ea:	f7fb fa31 	bl	8008d50 <GPS_set_next_wp>
                        nav_mode = NAV_MODE_WP;
 800d8ee:	4b46      	ldr	r3, [pc, #280]	; (800da08 <taskComputeRc+0xa6c>)
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	701a      	strb	r2, [r3, #0]
                        GPS_hold[ALT] = GPS_altitude;
 800d8f4:	4b48      	ldr	r3, [pc, #288]	; (800da18 <taskComputeRc+0xa7c>)
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4b48      	ldr	r3, [pc, #288]	; (800da1c <taskComputeRc+0xa80>)
 800d8fc:	609a      	str	r2, [r3, #8]
                        f.CLIMBOUT_FW = 1;
 800d8fe:	4b36      	ldr	r3, [pc, #216]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d900:	2201      	movs	r2, #1
 800d902:	74da      	strb	r2, [r3, #19]
                    if (!f.GPS_HOME_MODE) {
 800d904:	e04f      	b.n	800d9a6 <taskComputeRc+0xa0a>
                    }
                } else {
                    f.GPS_HOME_MODE = 0;
 800d906:	4b34      	ldr	r3, [pc, #208]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d908:	2200      	movs	r2, #0
 800d90a:	71da      	strb	r2, [r3, #7]
                    if (rcOptions[BOXGPSHOLD] && abs(rcCommand[ROLL]) < cfg.ap_mode && abs(rcCommand[PITCH]) < cfg.ap_mode) {
 800d90c:	4b33      	ldr	r3, [pc, #204]	; (800d9dc <taskComputeRc+0xa40>)
 800d90e:	7adb      	ldrb	r3, [r3, #11]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d039      	beq.n	800d988 <taskComputeRc+0x9ec>
 800d914:	4b34      	ldr	r3, [pc, #208]	; (800d9e8 <taskComputeRc+0xa4c>)
 800d916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	bfb8      	it	lt
 800d91e:	425b      	neglt	r3, r3
 800d920:	b29a      	uxth	r2, r3
 800d922:	4b3f      	ldr	r3, [pc, #252]	; (800da20 <taskComputeRc+0xa84>)
 800d924:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d928:	429a      	cmp	r2, r3
 800d92a:	d22d      	bcs.n	800d988 <taskComputeRc+0x9ec>
 800d92c:	4b2e      	ldr	r3, [pc, #184]	; (800d9e8 <taskComputeRc+0xa4c>)
 800d92e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfb8      	it	lt
 800d936:	425b      	neglt	r3, r3
 800d938:	b29a      	uxth	r2, r3
 800d93a:	4b39      	ldr	r3, [pc, #228]	; (800da20 <taskComputeRc+0xa84>)
 800d93c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800d940:	429a      	cmp	r2, r3
 800d942:	d221      	bcs.n	800d988 <taskComputeRc+0x9ec>
                        if (!f.GPS_HOLD_MODE) {
 800d944:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d946:	7a1b      	ldrb	r3, [r3, #8]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d12c      	bne.n	800d9a6 <taskComputeRc+0xa0a>
                            f.GPS_HOLD_MODE = 1;
 800d94c:	4b22      	ldr	r3, [pc, #136]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d94e:	2201      	movs	r2, #1
 800d950:	721a      	strb	r2, [r3, #8]
                            GPSNavReset = 0;
 800d952:	4b2e      	ldr	r3, [pc, #184]	; (800da0c <taskComputeRc+0xa70>)
 800d954:	2200      	movs	r2, #0
 800d956:	701a      	strb	r2, [r3, #0]
                            GPS_hold[LAT] = GPS_coord[LAT];
 800d958:	4b32      	ldr	r3, [pc, #200]	; (800da24 <taskComputeRc+0xa88>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a2f      	ldr	r2, [pc, #188]	; (800da1c <taskComputeRc+0xa80>)
 800d95e:	6013      	str	r3, [r2, #0]
                            GPS_hold[LON] = GPS_coord[LON];
 800d960:	4b30      	ldr	r3, [pc, #192]	; (800da24 <taskComputeRc+0xa88>)
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	4a2d      	ldr	r2, [pc, #180]	; (800da1c <taskComputeRc+0xa80>)
 800d966:	6053      	str	r3, [r2, #4]
                            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 800d968:	492f      	ldr	r1, [pc, #188]	; (800da28 <taskComputeRc+0xa8c>)
 800d96a:	482c      	ldr	r0, [pc, #176]	; (800da1c <taskComputeRc+0xa80>)
 800d96c:	f7fb f9f0 	bl	8008d50 <GPS_set_next_wp>
                            nav_mode = NAV_MODE_POSHOLD;
 800d970:	4b25      	ldr	r3, [pc, #148]	; (800da08 <taskComputeRc+0xa6c>)
 800d972:	2201      	movs	r2, #1
 800d974:	701a      	strb	r2, [r3, #0]
                            GPS_hold[ALT] = GPS_altitude;
 800d976:	4b28      	ldr	r3, [pc, #160]	; (800da18 <taskComputeRc+0xa7c>)
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	4b27      	ldr	r3, [pc, #156]	; (800da1c <taskComputeRc+0xa80>)
 800d97e:	609a      	str	r2, [r3, #8]
                            f.CLIMBOUT_FW = 0;
 800d980:	4b15      	ldr	r3, [pc, #84]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d982:	2200      	movs	r2, #0
 800d984:	74da      	strb	r2, [r3, #19]
                        if (!f.GPS_HOLD_MODE) {
 800d986:	e00e      	b.n	800d9a6 <taskComputeRc+0xa0a>
                        }
                    } else {
                        f.GPS_HOLD_MODE = 0;
 800d988:	4b13      	ldr	r3, [pc, #76]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	721a      	strb	r2, [r3, #8]
                        // both boxes are unselected here, nav is reset if not already done
                        if (GPSNavReset == 0) {
 800d98e:	4b1f      	ldr	r3, [pc, #124]	; (800da0c <taskComputeRc+0xa70>)
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d107      	bne.n	800d9a6 <taskComputeRc+0xa0a>
                            GPSNavReset = 1;
 800d996:	4b1d      	ldr	r3, [pc, #116]	; (800da0c <taskComputeRc+0xa70>)
 800d998:	2201      	movs	r2, #1
 800d99a:	701a      	strb	r2, [r3, #0]
                            GPS_reset_nav();
 800d99c:	f7fb f854 	bl	8008a48 <GPS_reset_nav>
                            f.CLIMBOUT_FW = 0;
 800d9a0:	4b0d      	ldr	r3, [pc, #52]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	74da      	strb	r2, [r3, #19]
                        }
                    }
                }
                // Beep for indication that GPS has found satellites and naze32 is ready to fly
                buzzer(BUZZER_READY_BEEP);
 800d9a6:	200c      	movs	r0, #12
 800d9a8:	f7f6 fabe 	bl	8003f28 <buzzer>
 800d9ac:	e008      	b.n	800d9c0 <taskComputeRc+0xa24>
            } else {
                f.GPS_HOME_MODE = 0;
 800d9ae:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	71da      	strb	r2, [r3, #7]
                f.GPS_HOLD_MODE = 0;
 800d9b4:	4b08      	ldr	r3, [pc, #32]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	721a      	strb	r2, [r3, #8]
                nav_mode = NAV_MODE_NONE;
 800d9ba:	4b13      	ldr	r3, [pc, #76]	; (800da08 <taskComputeRc+0xa6c>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	701a      	strb	r2, [r3, #0]
            }
        }
#endif

        if (rcOptions[BOXPASSTHRU] && !f.FW_FAILSAFE_RTH_ENABLE) {
 800d9c0:	4b06      	ldr	r3, [pc, #24]	; (800d9dc <taskComputeRc+0xa40>)
 800d9c2:	7b1b      	ldrb	r3, [r3, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d031      	beq.n	800da2c <taskComputeRc+0xa90>
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d9ca:	7c9b      	ldrb	r3, [r3, #18]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d12d      	bne.n	800da2c <taskComputeRc+0xa90>
            f.PASSTHRU_MODE = 1;
 800d9d0:	4b01      	ldr	r3, [pc, #4]	; (800d9d8 <taskComputeRc+0xa3c>)
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	729a      	strb	r2, [r3, #10]
 800d9d6:	e02c      	b.n	800da32 <taskComputeRc+0xa96>
 800d9d8:	200016b0 	.word	0x200016b0
 800d9dc:	20001750 	.word	0x20001750
 800d9e0:	2000141c 	.word	0x2000141c
 800d9e4:	20001424 	.word	0x20001424
 800d9e8:	2000170c 	.word	0x2000170c
 800d9ec:	20001870 	.word	0x20001870
 800d9f0:	20001430 	.word	0x20001430
 800d9f4:	20001420 	.word	0x20001420
 800d9f8:	200019e6 	.word	0x200019e6
 800d9fc:	200019e8 	.word	0x200019e8
 800da00:	200016d2 	.word	0x200016d2
 800da04:	20001794 	.word	0x20001794
 800da08:	200017b0 	.word	0x200017b0
 800da0c:	20000058 	.word	0x20000058
 800da10:	20001780 	.word	0x20001780
 800da14:	2000177c 	.word	0x2000177c
 800da18:	2000179a 	.word	0x2000179a
 800da1c:	20001788 	.word	0x20001788
 800da20:	20000db4 	.word	0x20000db4
 800da24:	20001774 	.word	0x20001774
 800da28:	2000178c 	.word	0x2000178c
        } else {
            f.PASSTHRU_MODE = 0;
 800da2c:	4b47      	ldr	r3, [pc, #284]	; (800db4c <taskComputeRc+0xbb0>)
 800da2e:	2200      	movs	r2, #0
 800da30:	729a      	strb	r2, [r3, #10]
        }

        if (f.FIXED_WING) {
 800da32:	4b46      	ldr	r3, [pc, #280]	; (800db4c <taskComputeRc+0xbb0>)
 800da34:	7c1b      	ldrb	r3, [r3, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d047      	beq.n	800daca <taskComputeRc+0xb2e>
            f.HEADFREE_MODE = 0;
 800da3a:	4b44      	ldr	r3, [pc, #272]	; (800db4c <taskComputeRc+0xbb0>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	725a      	strb	r2, [r3, #9]
            if (feature(FEATURE_FAILSAFE) && failsafeCnt > (6 * cfg.failsafe_delay)) {
 800da40:	f44f 7000 	mov.w	r0, #512	; 0x200
 800da44:	f7f9 fa44 	bl	8006ed0 <feature>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d03d      	beq.n	800daca <taskComputeRc+0xb2e>
 800da4e:	4b40      	ldr	r3, [pc, #256]	; (800db50 <taskComputeRc+0xbb4>)
 800da50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da54:	4619      	mov	r1, r3
 800da56:	4b3f      	ldr	r3, [pc, #252]	; (800db54 <taskComputeRc+0xbb8>)
 800da58:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800da5c:	461a      	mov	r2, r3
 800da5e:	4613      	mov	r3, r2
 800da60:	005b      	lsls	r3, r3, #1
 800da62:	4413      	add	r3, r2
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	4299      	cmp	r1, r3
 800da68:	dd2f      	ble.n	800daca <taskComputeRc+0xb2e>
                f.PASSTHRU_MODE = 0;
 800da6a:	4b38      	ldr	r3, [pc, #224]	; (800db4c <taskComputeRc+0xbb0>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	729a      	strb	r2, [r3, #10]
                f.ANGLE_MODE = 1;
 800da70:	4b36      	ldr	r3, [pc, #216]	; (800db4c <taskComputeRc+0xbb0>)
 800da72:	2201      	movs	r2, #1
 800da74:	70da      	strb	r2, [r3, #3]
                for (i = 0; i < 3; i++)
 800da76:	2300      	movs	r3, #0
 800da78:	613b      	str	r3, [r7, #16]
 800da7a:	e00a      	b.n	800da92 <taskComputeRc+0xaf6>
                    rcData[i] = mcfg.midrc;
 800da7c:	4b36      	ldr	r3, [pc, #216]	; (800db58 <taskComputeRc+0xbbc>)
 800da7e:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800da82:	b219      	sxth	r1, r3
 800da84:	4a35      	ldr	r2, [pc, #212]	; (800db5c <taskComputeRc+0xbc0>)
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (i = 0; i < 3; i++)
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	3301      	adds	r3, #1
 800da90:	613b      	str	r3, [r7, #16]
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	2b02      	cmp	r3, #2
 800da96:	ddf1      	ble.n	800da7c <taskComputeRc+0xae0>
                rcData[THROTTLE] = cfg.failsafe_throttle;
 800da98:	4b2e      	ldr	r3, [pc, #184]	; (800db54 <taskComputeRc+0xbb8>)
 800da9a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800da9e:	b21a      	sxth	r2, r3
 800daa0:	4b2e      	ldr	r3, [pc, #184]	; (800db5c <taskComputeRc+0xbc0>)
 800daa2:	80da      	strh	r2, [r3, #6]
                // No GPS?  Force a soft left turn.
                if (!f.GPS_FIX && GPS_numSat <= 5) {
 800daa4:	4b29      	ldr	r3, [pc, #164]	; (800db4c <taskComputeRc+0xbb0>)
 800daa6:	7adb      	ldrb	r3, [r3, #11]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10e      	bne.n	800daca <taskComputeRc+0xb2e>
 800daac:	4b2c      	ldr	r3, [pc, #176]	; (800db60 <taskComputeRc+0xbc4>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	2b05      	cmp	r3, #5
 800dab2:	d80a      	bhi.n	800daca <taskComputeRc+0xb2e>
                    f.FW_FAILSAFE_RTH_ENABLE = 0;
 800dab4:	4b25      	ldr	r3, [pc, #148]	; (800db4c <taskComputeRc+0xbb0>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	749a      	strb	r2, [r3, #18]
                    rcData[ROLL] = mcfg.midrc - 50;
 800daba:	4b27      	ldr	r3, [pc, #156]	; (800db58 <taskComputeRc+0xbbc>)
 800dabc:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800dac0:	3b32      	subs	r3, #50	; 0x32
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	b21a      	sxth	r2, r3
 800dac6:	4b25      	ldr	r3, [pc, #148]	; (800db5c <taskComputeRc+0xbc0>)
 800dac8:	801a      	strh	r2, [r3, #0]
                }
            }
        }
        // When armed and motors aren't spinning. Make warning beeps so that accidentally won't lose fingers...
        // Also disarm board after 5 sec so users without buzzer won't lose fingers.
        if (feature(FEATURE_MOTOR_STOP) && f.ARMED && !f.FIXED_WING) {
 800daca:	2010      	movs	r0, #16
 800dacc:	f7f9 fa00 	bl	8006ed0 <feature>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d035      	beq.n	800db42 <taskComputeRc+0xba6>
 800dad6:	4b1d      	ldr	r3, [pc, #116]	; (800db4c <taskComputeRc+0xbb0>)
 800dad8:	785b      	ldrb	r3, [r3, #1]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d031      	beq.n	800db42 <taskComputeRc+0xba6>
 800dade:	4b1b      	ldr	r3, [pc, #108]	; (800db4c <taskComputeRc+0xbb0>)
 800dae0:	7c1b      	ldrb	r3, [r3, #16]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d12d      	bne.n	800db42 <taskComputeRc+0xba6>
            if (isThrottleLow) {
 800dae6:	7afb      	ldrb	r3, [r7, #11]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d023      	beq.n	800db34 <taskComputeRc+0xb98>
                if (disarmTime == 0)
 800daec:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <taskComputeRc+0xbc8>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d10e      	bne.n	800db12 <taskComputeRc+0xb76>
                    disarmTime = pif_cumulative_timer1ms + 1000 * mcfg.auto_disarm_board;
 800daf4:	4b18      	ldr	r3, [pc, #96]	; (800db58 <taskComputeRc+0xbbc>)
 800daf6:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800dafa:	461a      	mov	r2, r3
 800dafc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db00:	fb02 f303 	mul.w	r3, r2, r3
 800db04:	461a      	mov	r2, r3
 800db06:	4b18      	ldr	r3, [pc, #96]	; (800db68 <taskComputeRc+0xbcc>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4413      	add	r3, r2
 800db0c:	4a15      	ldr	r2, [pc, #84]	; (800db64 <taskComputeRc+0xbc8>)
 800db0e:	6013      	str	r3, [r2, #0]
 800db10:	e00c      	b.n	800db2c <taskComputeRc+0xb90>
                else if (disarmTime < pif_cumulative_timer1ms && mcfg.auto_disarm_board != 0)
 800db12:	4b14      	ldr	r3, [pc, #80]	; (800db64 <taskComputeRc+0xbc8>)
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4b14      	ldr	r3, [pc, #80]	; (800db68 <taskComputeRc+0xbcc>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d206      	bcs.n	800db2c <taskComputeRc+0xb90>
 800db1e:	4b0e      	ldr	r3, [pc, #56]	; (800db58 <taskComputeRc+0xbbc>)
 800db20:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <taskComputeRc+0xb90>
                    mwDisarm();
 800db28:	f7fe ff16 	bl	800c958 <mwDisarm>
                buzzer(BUZZER_ARMED);
 800db2c:	2009      	movs	r0, #9
 800db2e:	f7f6 f9fb 	bl	8003f28 <buzzer>
 800db32:	e006      	b.n	800db42 <taskComputeRc+0xba6>
            } else if (disarmTime != 0)
 800db34:	4b0b      	ldr	r3, [pc, #44]	; (800db64 <taskComputeRc+0xbc8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <taskComputeRc+0xba6>
                disarmTime = 0;
 800db3c:	4b09      	ldr	r3, [pc, #36]	; (800db64 <taskComputeRc+0xbc8>)
 800db3e:	2200      	movs	r2, #0
 800db40:	601a      	str	r2, [r3, #0]
        }
    return 0;
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	200016b0 	.word	0x200016b0
 800db50:	200016e2 	.word	0x200016e2
 800db54:	20000db4 	.word	0x20000db4
 800db58:	20000848 	.word	0x20000848
 800db5c:	200016e8 	.word	0x200016e8
 800db60:	20001794 	.word	0x20001794
 800db64:	20001858 	.word	0x20001858
 800db68:	20001d60 	.word	0x20001d60

0800db6c <taskLoop>:

uint16_t taskLoop(PifTask *p_task)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	static int taskOrder = 0;   // never call all function in the same loop, to avoid high delay spikes

	(void)p_task;

	switch (taskOrder) {
 800db74:	4b15      	ldr	r3, [pc, #84]	; (800dbcc <taskLoop+0x60>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d002      	beq.n	800db82 <taskLoop+0x16>
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d00f      	beq.n	800dba0 <taskLoop+0x34>
 800db80:	e01f      	b.n	800dbc2 <taskLoop+0x56>
		case 0:
			// if GPS feature is enabled, gpsThread() will be called at some intervals to check for stuck
			// hardware, wrong baud rates, init GPS if needed, etc. Don't use SENSOR_GPS here as gpsThread() can and will
			// change this based on available hardware
			taskOrder++;
 800db82:	4b12      	ldr	r3, [pc, #72]	; (800dbcc <taskLoop+0x60>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3301      	adds	r3, #1
 800db88:	4a10      	ldr	r2, [pc, #64]	; (800dbcc <taskLoop+0x60>)
 800db8a:	6013      	str	r3, [r2, #0]
#ifdef GPS
			if (feature(FEATURE_GPS)) {
 800db8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800db90:	f7f9 f99e 	bl	8006ed0 <feature>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d002      	beq.n	800dba0 <taskLoop+0x34>
				gpsThread();
 800db9a:	f7fa facb 	bl	8008134 <gpsThread>
				break;
 800db9e:	e010      	b.n	800dbc2 <taskLoop+0x56>
			}
#endif
		case 1:
			taskOrder = 0;
 800dba0:	4b0a      	ldr	r3, [pc, #40]	; (800dbcc <taskLoop+0x60>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
			if (feature(FEATURE_VARIO) && f.VARIO_MODE)
 800dba6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800dbaa:	f7f9 f991 	bl	8006ed0 <feature>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d005      	beq.n	800dbc0 <taskLoop+0x54>
 800dbb4:	4b06      	ldr	r3, [pc, #24]	; (800dbd0 <taskLoop+0x64>)
 800dbb6:	7bdb      	ldrb	r3, [r3, #15]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <taskLoop+0x54>
				mwVario();
 800dbbc:	f7fe fee6 	bl	800c98c <mwVario>
			break;
 800dbc0:	bf00      	nop
	}
    return 0;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	20001970 	.word	0x20001970
 800dbd0:	200016b0 	.word	0x200016b0

0800dbd4 <taskComputeImu>:

uint16_t taskComputeImu(PifTask *p_task)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
	static int step = 0;

    switch (step) {
 800dbdc:	4ba1      	ldr	r3, [pc, #644]	; (800de64 <taskComputeImu+0x290>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2b06      	cmp	r3, #6
 800dbe2:	f200 82be 	bhi.w	800e162 <taskComputeImu+0x58e>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <taskComputeImu+0x18>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc09 	.word	0x0800dc09
 800dbf0:	0800dc19 	.word	0x0800dc19
 800dbf4:	0800dc19 	.word	0x0800dc19
 800dbf8:	0800dc19 	.word	0x0800dc19
 800dbfc:	0800dc31 	.word	0x0800dc31
 800dc00:	0800dc43 	.word	0x0800dc43
 800dc04:	0800e149 	.word	0x0800e149
    case 0:
        // Measure loop rate just afer reading the sensors
        cycleTime = pifTask_GetDeltaTime(p_task, TRUE);
 800dc08:	2101      	movs	r1, #1
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f006 fca6 	bl	801455c <pifTask_GetDeltaTime>
 800dc10:	4603      	mov	r3, r0
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	4b94      	ldr	r3, [pc, #592]	; (800de68 <taskComputeImu+0x294>)
 800dc16:	801a      	strh	r2, [r3, #0]
    
    case 1:
    case 2:
    case 3:
        step = computeIMU(step);
 800dc18:	4b92      	ldr	r3, [pc, #584]	; (800de64 <taskComputeImu+0x290>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fb fe1b 	bl	8009858 <computeIMU>
 800dc22:	4603      	mov	r3, r0
 800dc24:	4a8f      	ldr	r2, [pc, #572]	; (800de64 <taskComputeImu+0x290>)
 800dc26:	6013      	str	r3, [r2, #0]
        pifTask_SetTrigger(p_task);
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f006 fc71 	bl	8014510 <pifTask_SetTrigger>
		break;
 800dc2e:	e298      	b.n	800e162 <taskComputeImu+0x58e>

    case 4:
        // non IMU critical, temeperatur
        annexCode();
 800dc30:	f7fe f99a 	bl	800bf68 <annexCode>
        step = 5;
 800dc34:	4b8b      	ldr	r3, [pc, #556]	; (800de64 <taskComputeImu+0x290>)
 800dc36:	2205      	movs	r2, #5
 800dc38:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f006 fc68 	bl	8014510 <pifTask_SetTrigger>
    	break;
 800dc40:	e28f      	b.n	800e162 <taskComputeImu+0x58e>

    case 5:
#ifdef MAG
        if (sensors(SENSOR_MAG)) {
 800dc42:	2008      	movs	r0, #8
 800dc44:	f7f9 f8fc 	bl	8006e40 <sensors>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d057      	beq.n	800dcfe <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dc4e:	4b87      	ldr	r3, [pc, #540]	; (800de6c <taskComputeImu+0x298>)
 800dc50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	bfb8      	it	lt
 800dc58:	425b      	neglt	r3, r3
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	2b45      	cmp	r3, #69	; 0x45
 800dc5e:	d847      	bhi.n	800dcf0 <taskComputeImu+0x11c>
 800dc60:	4b83      	ldr	r3, [pc, #524]	; (800de70 <taskComputeImu+0x29c>)
 800dc62:	795b      	ldrb	r3, [r3, #5]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d043      	beq.n	800dcf0 <taskComputeImu+0x11c>
                int16_t dif = heading - magHold;
 800dc68:	4b82      	ldr	r3, [pc, #520]	; (800de74 <taskComputeImu+0x2a0>)
 800dc6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	4b81      	ldr	r3, [pc, #516]	; (800de78 <taskComputeImu+0x2a4>)
 800dc72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	82fb      	strh	r3, [r7, #22]
                if (dif <= -180)
 800dc7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc82:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 800dc86:	da04      	bge.n	800dc92 <taskComputeImu+0xbe>
                    dif += 360;
 800dc88:	8afb      	ldrh	r3, [r7, #22]
 800dc8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	82fb      	strh	r3, [r7, #22]
                if (dif >= +180)
 800dc92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dc96:	2bb3      	cmp	r3, #179	; 0xb3
 800dc98:	dd04      	ble.n	800dca4 <taskComputeImu+0xd0>
                    dif -= 360;
 800dc9a:	8afb      	ldrh	r3, [r7, #22]
 800dc9c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	82fb      	strh	r3, [r7, #22]
                dif *= -mcfg.yaw_control_direction;
 800dca4:	4b75      	ldr	r3, [pc, #468]	; (800de7c <taskComputeImu+0x2a8>)
 800dca6:	f993 315c 	ldrsb.w	r3, [r3, #348]	; 0x15c
 800dcaa:	425b      	negs	r3, r3
 800dcac:	b29a      	uxth	r2, r3
 800dcae:	8afb      	ldrh	r3, [r7, #22]
 800dcb0:	fb12 f303 	smulbb	r3, r2, r3
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	82fb      	strh	r3, [r7, #22]
                if (f.SMALL_ANGLE)
 800dcb8:	4b6d      	ldr	r3, [pc, #436]	; (800de70 <taskComputeImu+0x29c>)
 800dcba:	7b5b      	ldrb	r3, [r3, #13]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d01d      	beq.n	800dcfc <taskComputeImu+0x128>
                    rcCommand[YAW] -= dif * cfg.P8[PIDMAG] / 30;    // 18 deg
 800dcc0:	4b6a      	ldr	r3, [pc, #424]	; (800de6c <taskComputeImu+0x298>)
 800dcc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dccc:	496c      	ldr	r1, [pc, #432]	; (800de80 <taskComputeImu+0x2ac>)
 800dcce:	7a49      	ldrb	r1, [r1, #9]
 800dcd0:	fb01 f303 	mul.w	r3, r1, r3
 800dcd4:	496b      	ldr	r1, [pc, #428]	; (800de84 <taskComputeImu+0x2b0>)
 800dcd6:	fb81 0103 	smull	r0, r1, r1, r3
 800dcda:	4419      	add	r1, r3
 800dcdc:	1109      	asrs	r1, r1, #4
 800dcde:	17db      	asrs	r3, r3, #31
 800dce0:	1a5b      	subs	r3, r3, r1
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	4413      	add	r3, r2
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	b21a      	sxth	r2, r3
 800dcea:	4b60      	ldr	r3, [pc, #384]	; (800de6c <taskComputeImu+0x298>)
 800dcec:	809a      	strh	r2, [r3, #4]
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dcee:	e005      	b.n	800dcfc <taskComputeImu+0x128>
            } else
                magHold = heading;
 800dcf0:	4b60      	ldr	r3, [pc, #384]	; (800de74 <taskComputeImu+0x2a0>)
 800dcf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dcf6:	4b60      	ldr	r3, [pc, #384]	; (800de78 <taskComputeImu+0x2a4>)
 800dcf8:	801a      	strh	r2, [r3, #0]
 800dcfa:	e000      	b.n	800dcfe <taskComputeImu+0x12a>
            if (abs(rcCommand[YAW]) < 70 && f.MAG_MODE) {
 800dcfc:	bf00      	nop
        }
#endif

#ifdef BARO
        if (sensors(SENSOR_BARO)) {
 800dcfe:	2004      	movs	r0, #4
 800dd00:	f7f9 f89e 	bl	8006e40 <sensors>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f000 80e1 	beq.w	800dece <taskComputeImu+0x2fa>
            if (f.BARO_MODE) {
 800dd0c:	4b58      	ldr	r3, [pc, #352]	; (800de70 <taskComputeImu+0x29c>)
 800dd0e:	799b      	ldrb	r3, [r3, #6]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	f000 80dc 	beq.w	800dece <taskComputeImu+0x2fa>
                static uint8_t isAltHoldChanged = 0;
                if (!f.FIXED_WING) {
 800dd16:	4b56      	ldr	r3, [pc, #344]	; (800de70 <taskComputeImu+0x29c>)
 800dd18:	7c1b      	ldrb	r3, [r3, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f040 80c4 	bne.w	800dea8 <taskComputeImu+0x2d4>
                    // multirotor alt hold
                    if (cfg.alt_hold_fast_change) {
 800dd20:	4b57      	ldr	r3, [pc, #348]	; (800de80 <taskComputeImu+0x2ac>)
 800dd22:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d053      	beq.n	800ddd2 <taskComputeImu+0x1fe>
                        // rapid alt changes
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800dd2a:	4b50      	ldr	r3, [pc, #320]	; (800de6c <taskComputeImu+0x298>)
 800dd2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dd30:	461a      	mov	r2, r3
 800dd32:	4b55      	ldr	r3, [pc, #340]	; (800de88 <taskComputeImu+0x2b4>)
 800dd34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bfb8      	it	lt
 800dd3e:	425b      	neglt	r3, r3
 800dd40:	4a4f      	ldr	r2, [pc, #316]	; (800de80 <taskComputeImu+0x2ac>)
 800dd42:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800dd46:	4293      	cmp	r3, r2
 800dd48:	dd22      	ble.n	800dd90 <taskComputeImu+0x1bc>
                            errorVelocityI = 0;
 800dd4a:	4b50      	ldr	r3, [pc, #320]	; (800de8c <taskComputeImu+0x2b8>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	601a      	str	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800dd50:	4b4f      	ldr	r3, [pc, #316]	; (800de90 <taskComputeImu+0x2bc>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	701a      	strb	r2, [r3, #0]
                            rcCommand[THROTTLE] += (rcCommand[THROTTLE] > initialThrottleHold) ? -cfg.alt_hold_throttle_neutral : cfg.alt_hold_throttle_neutral;
 800dd56:	4b45      	ldr	r3, [pc, #276]	; (800de6c <taskComputeImu+0x298>)
 800dd58:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	4b43      	ldr	r3, [pc, #268]	; (800de6c <taskComputeImu+0x298>)
 800dd60:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800dd64:	4b48      	ldr	r3, [pc, #288]	; (800de88 <taskComputeImu+0x2b4>)
 800dd66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd6a:	4299      	cmp	r1, r3
 800dd6c:	dd06      	ble.n	800dd7c <taskComputeImu+0x1a8>
 800dd6e:	4b44      	ldr	r3, [pc, #272]	; (800de80 <taskComputeImu+0x2ac>)
 800dd70:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	425b      	negs	r3, r3
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	e003      	b.n	800dd84 <taskComputeImu+0x1b0>
 800dd7c:	4b40      	ldr	r3, [pc, #256]	; (800de80 <taskComputeImu+0x2ac>)
 800dd7e:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	4413      	add	r3, r2
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	b21a      	sxth	r2, r3
 800dd8a:	4b38      	ldr	r3, [pc, #224]	; (800de6c <taskComputeImu+0x298>)
 800dd8c:	80da      	strh	r2, [r3, #6]
 800dd8e:	e09e      	b.n	800dece <taskComputeImu+0x2fa>
                        } else {
                            if (isAltHoldChanged) {
 800dd90:	4b3f      	ldr	r3, [pc, #252]	; (800de90 <taskComputeImu+0x2bc>)
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d006      	beq.n	800dda6 <taskComputeImu+0x1d2>
                                AltHold = EstAlt;
 800dd98:	4b3e      	ldr	r3, [pc, #248]	; (800de94 <taskComputeImu+0x2c0>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a3e      	ldr	r2, [pc, #248]	; (800de98 <taskComputeImu+0x2c4>)
 800dd9e:	6013      	str	r3, [r2, #0]
                                isAltHoldChanged = 0;
 800dda0:	4b3b      	ldr	r3, [pc, #236]	; (800de90 <taskComputeImu+0x2bc>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	701a      	strb	r2, [r3, #0]
                            }
                            rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800dda6:	4b38      	ldr	r3, [pc, #224]	; (800de88 <taskComputeImu+0x2b4>)
 800dda8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ddac:	461a      	mov	r2, r3
 800ddae:	4b3b      	ldr	r3, [pc, #236]	; (800de9c <taskComputeImu+0x2c8>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	4a31      	ldr	r2, [pc, #196]	; (800de7c <taskComputeImu+0x2a8>)
 800ddb6:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800ddba:	4611      	mov	r1, r2
 800ddbc:	4a2f      	ldr	r2, [pc, #188]	; (800de7c <taskComputeImu+0x2a8>)
 800ddbe:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f5 ff20 	bl	8003c08 <constrain>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	b21a      	sxth	r2, r3
 800ddcc:	4b27      	ldr	r3, [pc, #156]	; (800de6c <taskComputeImu+0x298>)
 800ddce:	80da      	strh	r2, [r3, #6]
 800ddd0:	e07d      	b.n	800dece <taskComputeImu+0x2fa>
                        }
                    } else {
                        // slow alt changes for apfags
                        if (abs(rcCommand[THROTTLE] - initialThrottleHold) > cfg.alt_hold_throttle_neutral) {
 800ddd2:	4b26      	ldr	r3, [pc, #152]	; (800de6c <taskComputeImu+0x298>)
 800ddd4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	4b2b      	ldr	r3, [pc, #172]	; (800de88 <taskComputeImu+0x2b4>)
 800dddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	bfb8      	it	lt
 800dde6:	425b      	neglt	r3, r3
 800dde8:	4a25      	ldr	r2, [pc, #148]	; (800de80 <taskComputeImu+0x2ac>)
 800ddea:	f892 20b2 	ldrb.w	r2, [r2, #178]	; 0xb2
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	dd14      	ble.n	800de1c <taskComputeImu+0x248>
                            // set velocity proportional to stick movement +100 throttle gives ~ +50 cm/s
                            setVelocity = (rcCommand[THROTTLE] - initialThrottleHold) / 2;
 800ddf2:	4b1e      	ldr	r3, [pc, #120]	; (800de6c <taskComputeImu+0x298>)
 800ddf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4b23      	ldr	r3, [pc, #140]	; (800de88 <taskComputeImu+0x2b4>)
 800ddfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	0fda      	lsrs	r2, r3, #31
 800de04:	4413      	add	r3, r2
 800de06:	105b      	asrs	r3, r3, #1
 800de08:	461a      	mov	r2, r3
 800de0a:	4b25      	ldr	r3, [pc, #148]	; (800dea0 <taskComputeImu+0x2cc>)
 800de0c:	601a      	str	r2, [r3, #0]
                            velocityControl = 1;
 800de0e:	4b25      	ldr	r3, [pc, #148]	; (800dea4 <taskComputeImu+0x2d0>)
 800de10:	2201      	movs	r2, #1
 800de12:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 1;
 800de14:	4b1e      	ldr	r3, [pc, #120]	; (800de90 <taskComputeImu+0x2bc>)
 800de16:	2201      	movs	r2, #1
 800de18:	701a      	strb	r2, [r3, #0]
 800de1a:	e00d      	b.n	800de38 <taskComputeImu+0x264>
                        } else if (isAltHoldChanged) {
 800de1c:	4b1c      	ldr	r3, [pc, #112]	; (800de90 <taskComputeImu+0x2bc>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d009      	beq.n	800de38 <taskComputeImu+0x264>
                            AltHold = EstAlt;
 800de24:	4b1b      	ldr	r3, [pc, #108]	; (800de94 <taskComputeImu+0x2c0>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a1b      	ldr	r2, [pc, #108]	; (800de98 <taskComputeImu+0x2c4>)
 800de2a:	6013      	str	r3, [r2, #0]
                            velocityControl = 0;
 800de2c:	4b1d      	ldr	r3, [pc, #116]	; (800dea4 <taskComputeImu+0x2d0>)
 800de2e:	2200      	movs	r2, #0
 800de30:	701a      	strb	r2, [r3, #0]
                            isAltHoldChanged = 0;
 800de32:	4b17      	ldr	r3, [pc, #92]	; (800de90 <taskComputeImu+0x2bc>)
 800de34:	2200      	movs	r2, #0
 800de36:	701a      	strb	r2, [r3, #0]
                        }
                        rcCommand[THROTTLE] = constrain(initialThrottleHold + BaroPID, mcfg.minthrottle, mcfg.maxthrottle);
 800de38:	4b13      	ldr	r3, [pc, #76]	; (800de88 <taskComputeImu+0x2b4>)
 800de3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de3e:	461a      	mov	r2, r3
 800de40:	4b16      	ldr	r3, [pc, #88]	; (800de9c <taskComputeImu+0x2c8>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4413      	add	r3, r2
 800de46:	4a0d      	ldr	r2, [pc, #52]	; (800de7c <taskComputeImu+0x2a8>)
 800de48:	f8b2 2140 	ldrh.w	r2, [r2, #320]	; 0x140
 800de4c:	4611      	mov	r1, r2
 800de4e:	4a0b      	ldr	r2, [pc, #44]	; (800de7c <taskComputeImu+0x2a8>)
 800de50:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 800de54:	4618      	mov	r0, r3
 800de56:	f7f5 fed7 	bl	8003c08 <constrain>
 800de5a:	4603      	mov	r3, r0
 800de5c:	b21a      	sxth	r2, r3
 800de5e:	4b03      	ldr	r3, [pc, #12]	; (800de6c <taskComputeImu+0x298>)
 800de60:	80da      	strh	r2, [r3, #6]
 800de62:	e034      	b.n	800dece <taskComputeImu+0x2fa>
 800de64:	20001974 	.word	0x20001974
 800de68:	200016d0 	.word	0x200016d0
 800de6c:	2000170c 	.word	0x2000170c
 800de70:	200016b0 	.word	0x200016b0
 800de74:	200019e6 	.word	0x200019e6
 800de78:	200019e8 	.word	0x200019e8
 800de7c:	20000848 	.word	0x20000848
 800de80:	20000db4 	.word	0x20000db4
 800de84:	88888889 	.word	0x88888889
 800de88:	20001870 	.word	0x20001870
 800de8c:	20001430 	.word	0x20001430
 800de90:	20001978 	.word	0x20001978
 800de94:	2000141c 	.word	0x2000141c
 800de98:	20001424 	.word	0x20001424
 800de9c:	20001420 	.word	0x20001420
 800dea0:	20001428 	.word	0x20001428
 800dea4:	2000142c 	.word	0x2000142c
                    }
                } else {
                    // handle fixedwing-related althold. UNTESTED! and probably wrong
                    // most likely need to check changes on pitch channel and 'reset' althold similar to
                    // how throttle does it on multirotor
                    rcCommand[PITCH] += BaroPID * mcfg.fw_althold_dir;
 800dea8:	4bb0      	ldr	r3, [pc, #704]	; (800e16c <taskComputeImu+0x598>)
 800deaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800deae:	b29a      	uxth	r2, r3
 800deb0:	4baf      	ldr	r3, [pc, #700]	; (800e170 <taskComputeImu+0x59c>)
 800deb2:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 800deb6:	b299      	uxth	r1, r3
 800deb8:	4bae      	ldr	r3, [pc, #696]	; (800e174 <taskComputeImu+0x5a0>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	b29b      	uxth	r3, r3
 800debe:	fb11 f303 	smulbb	r3, r1, r3
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	4413      	add	r3, r2
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	b21a      	sxth	r2, r3
 800deca:	4ba8      	ldr	r3, [pc, #672]	; (800e16c <taskComputeImu+0x598>)
 800decc:	805a      	strh	r2, [r3, #2]
                }
            }
        }
#endif

        if (cfg.throttle_correction_value && (f.ANGLE_MODE || f.HORIZON_MODE)) {
 800dece:	4baa      	ldr	r3, [pc, #680]	; (800e178 <taskComputeImu+0x5a4>)
 800ded0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d014      	beq.n	800df02 <taskComputeImu+0x32e>
 800ded8:	4ba8      	ldr	r3, [pc, #672]	; (800e17c <taskComputeImu+0x5a8>)
 800deda:	78db      	ldrb	r3, [r3, #3]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d103      	bne.n	800dee8 <taskComputeImu+0x314>
 800dee0:	4ba6      	ldr	r3, [pc, #664]	; (800e17c <taskComputeImu+0x5a8>)
 800dee2:	791b      	ldrb	r3, [r3, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00c      	beq.n	800df02 <taskComputeImu+0x32e>
            rcCommand[THROTTLE] += throttleAngleCorrection;
 800dee8:	4ba0      	ldr	r3, [pc, #640]	; (800e16c <taskComputeImu+0x598>)
 800deea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800deee:	b29a      	uxth	r2, r3
 800def0:	4ba3      	ldr	r3, [pc, #652]	; (800e180 <taskComputeImu+0x5ac>)
 800def2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def6:	b29b      	uxth	r3, r3
 800def8:	4413      	add	r3, r2
 800defa:	b29b      	uxth	r3, r3
 800defc:	b21a      	sxth	r2, r3
 800defe:	4b9b      	ldr	r3, [pc, #620]	; (800e16c <taskComputeImu+0x598>)
 800df00:	80da      	strh	r2, [r3, #6]
        }

#ifdef GPS
        if (sensors(SENSOR_GPS)) {
 800df02:	2020      	movs	r0, #32
 800df04:	f7f8 ff9c 	bl	8006e40 <sensors>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 8115 	beq.w	800e13a <taskComputeImu+0x566>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800df10:	4b9a      	ldr	r3, [pc, #616]	; (800e17c <taskComputeImu+0x5a8>)
 800df12:	79db      	ldrb	r3, [r3, #7]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <taskComputeImu+0x34e>
 800df18:	4b98      	ldr	r3, [pc, #608]	; (800e17c <taskComputeImu+0x5a8>)
 800df1a:	7a1b      	ldrb	r3, [r3, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f000 8103 	beq.w	800e128 <taskComputeImu+0x554>
 800df22:	4b96      	ldr	r3, [pc, #600]	; (800e17c <taskComputeImu+0x5a8>)
 800df24:	7b1b      	ldrb	r3, [r3, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	f000 80fe 	beq.w	800e128 <taskComputeImu+0x554>
                float sin_yaw_y = sinf(heading * 0.0174532925f);
 800df2c:	4b95      	ldr	r3, [pc, #596]	; (800e184 <taskComputeImu+0x5b0>)
 800df2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df32:	ee07 3a90 	vmov	s15, r3
 800df36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df3a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800e188 <taskComputeImu+0x5b4>
 800df3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df42:	eeb0 0a67 	vmov.f32	s0, s15
 800df46:	f015 fcb3 	bl	80238b0 <sinf>
 800df4a:	ed87 0a04 	vstr	s0, [r7, #16]
                float cos_yaw_x = cosf(heading * 0.0174532925f);
 800df4e:	4b8d      	ldr	r3, [pc, #564]	; (800e184 <taskComputeImu+0x5b0>)
 800df50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df54:	ee07 3a90 	vmov	s15, r3
 800df58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df5c:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e188 <taskComputeImu+0x5b4>
 800df60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df64:	eeb0 0a67 	vmov.f32	s0, s15
 800df68:	f015 fc1e 	bl	80237a8 <cosf>
 800df6c:	ed87 0a03 	vstr	s0, [r7, #12]
                if (!f.FIXED_WING) {
 800df70:	4b82      	ldr	r3, [pc, #520]	; (800e17c <taskComputeImu+0x5a8>)
 800df72:	7c1b      	ldrb	r3, [r3, #16]
 800df74:	2b00      	cmp	r3, #0
 800df76:	f040 80d4 	bne.w	800e122 <taskComputeImu+0x54e>
                    if (cfg.nav_slew_rate) {
 800df7a:	4b7f      	ldr	r3, [pc, #508]	; (800e178 <taskComputeImu+0x5a4>)
 800df7c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 8087 	beq.w	800e094 <taskComputeImu+0x4c0>
                        nav_rated[LON] += constrain(wrap_18000(nav[LON] - nav_rated[LON]), -cfg.nav_slew_rate, cfg.nav_slew_rate); // TODO check this on uint8
 800df86:	4b81      	ldr	r3, [pc, #516]	; (800e18c <taskComputeImu+0x5b8>)
 800df88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df8c:	461a      	mov	r2, r3
 800df8e:	4b80      	ldr	r3, [pc, #512]	; (800e190 <taskComputeImu+0x5bc>)
 800df90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	4618      	mov	r0, r3
 800df98:	f7fb fad0 	bl	800953c <wrap_18000>
 800df9c:	4b76      	ldr	r3, [pc, #472]	; (800e178 <taskComputeImu+0x5a4>)
 800df9e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800dfa2:	425b      	negs	r3, r3
 800dfa4:	4a74      	ldr	r2, [pc, #464]	; (800e178 <taskComputeImu+0x5a4>)
 800dfa6:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800dfaa:	4619      	mov	r1, r3
 800dfac:	f7f5 fe2c 	bl	8003c08 <constrain>
 800dfb0:	4601      	mov	r1, r0
 800dfb2:	4b77      	ldr	r3, [pc, #476]	; (800e190 <taskComputeImu+0x5bc>)
 800dfb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	b28b      	uxth	r3, r1
 800dfbc:	4413      	add	r3, r2
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	b21a      	sxth	r2, r3
 800dfc2:	4b73      	ldr	r3, [pc, #460]	; (800e190 <taskComputeImu+0x5bc>)
 800dfc4:	805a      	strh	r2, [r3, #2]
                        nav_rated[LAT] += constrain(wrap_18000(nav[LAT] - nav_rated[LAT]), -cfg.nav_slew_rate, cfg.nav_slew_rate);
 800dfc6:	4b71      	ldr	r3, [pc, #452]	; (800e18c <taskComputeImu+0x5b8>)
 800dfc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	4b70      	ldr	r3, [pc, #448]	; (800e190 <taskComputeImu+0x5bc>)
 800dfd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fb fab0 	bl	800953c <wrap_18000>
 800dfdc:	4b66      	ldr	r3, [pc, #408]	; (800e178 <taskComputeImu+0x5a4>)
 800dfde:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800dfe2:	425b      	negs	r3, r3
 800dfe4:	4a64      	ldr	r2, [pc, #400]	; (800e178 <taskComputeImu+0x5a4>)
 800dfe6:	f892 2115 	ldrb.w	r2, [r2, #277]	; 0x115
 800dfea:	4619      	mov	r1, r3
 800dfec:	f7f5 fe0c 	bl	8003c08 <constrain>
 800dff0:	4601      	mov	r1, r0
 800dff2:	4b67      	ldr	r3, [pc, #412]	; (800e190 <taskComputeImu+0x5bc>)
 800dff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dff8:	b29a      	uxth	r2, r3
 800dffa:	b28b      	uxth	r3, r1
 800dffc:	4413      	add	r3, r2
 800dffe:	b29b      	uxth	r3, r3
 800e000:	b21a      	sxth	r2, r3
 800e002:	4b63      	ldr	r3, [pc, #396]	; (800e190 <taskComputeImu+0x5bc>)
 800e004:	801a      	strh	r2, [r3, #0]
                        GPS_angle[ROLL] = (nav_rated[LON] * cos_yaw_x - nav_rated[LAT] * sin_yaw_y) / 10;
 800e006:	4b62      	ldr	r3, [pc, #392]	; (800e190 <taskComputeImu+0x5bc>)
 800e008:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e014:	edd7 7a03 	vldr	s15, [r7, #12]
 800e018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e01c:	4b5c      	ldr	r3, [pc, #368]	; (800e190 <taskComputeImu+0x5bc>)
 800e01e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e022:	ee07 3a90 	vmov	s15, r3
 800e026:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e02a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e02e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e032:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e036:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e03a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e042:	ee17 3a90 	vmov	r3, s15
 800e046:	b21a      	sxth	r2, r3
 800e048:	4b52      	ldr	r3, [pc, #328]	; (800e194 <taskComputeImu+0x5c0>)
 800e04a:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav_rated[LON] * sin_yaw_y + nav_rated[LAT] * cos_yaw_x) / 10;
 800e04c:	4b50      	ldr	r3, [pc, #320]	; (800e190 <taskComputeImu+0x5bc>)
 800e04e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e052:	ee07 3a90 	vmov	s15, r3
 800e056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e05a:	edd7 7a04 	vldr	s15, [r7, #16]
 800e05e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e062:	4b4b      	ldr	r3, [pc, #300]	; (800e190 <taskComputeImu+0x5bc>)
 800e064:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e068:	ee07 3a90 	vmov	s15, r3
 800e06c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e070:	edd7 7a03 	vldr	s15, [r7, #12]
 800e074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e07c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e088:	ee17 3a90 	vmov	r3, s15
 800e08c:	b21a      	sxth	r2, r3
 800e08e:	4b41      	ldr	r3, [pc, #260]	; (800e194 <taskComputeImu+0x5c0>)
 800e090:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e092:	e052      	b.n	800e13a <taskComputeImu+0x566>
                    } else {
                        GPS_angle[ROLL] = (nav[LON] * cos_yaw_x - nav[LAT] * sin_yaw_y) / 10;
 800e094:	4b3d      	ldr	r3, [pc, #244]	; (800e18c <taskComputeImu+0x5b8>)
 800e096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e09a:	ee07 3a90 	vmov	s15, r3
 800e09e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0a2:	edd7 7a03 	vldr	s15, [r7, #12]
 800e0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0aa:	4b38      	ldr	r3, [pc, #224]	; (800e18c <taskComputeImu+0x5b8>)
 800e0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0b0:	ee07 3a90 	vmov	s15, r3
 800e0b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0c4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e0c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e0cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0d0:	ee17 3a90 	vmov	r3, s15
 800e0d4:	b21a      	sxth	r2, r3
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <taskComputeImu+0x5c0>)
 800e0d8:	801a      	strh	r2, [r3, #0]
                        GPS_angle[PITCH] = (nav[LON] * sin_yaw_y + nav[LAT] * cos_yaw_x) / 10;
 800e0da:	4b2c      	ldr	r3, [pc, #176]	; (800e18c <taskComputeImu+0x5b8>)
 800e0dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e0e0:	ee07 3a90 	vmov	s15, r3
 800e0e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0f0:	4b26      	ldr	r3, [pc, #152]	; (800e18c <taskComputeImu+0x5b8>)
 800e0f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0f6:	ee07 3a90 	vmov	s15, r3
 800e0fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800e102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e10a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800e10e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e116:	ee17 3a90 	vmov	r3, s15
 800e11a:	b21a      	sxth	r2, r3
 800e11c:	4b1d      	ldr	r3, [pc, #116]	; (800e194 <taskComputeImu+0x5c0>)
 800e11e:	805a      	strh	r2, [r3, #2]
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e120:	e00b      	b.n	800e13a <taskComputeImu+0x566>
                    }
                } else fw_nav();
 800e122:	f7f9 f807 	bl	8007134 <fw_nav>
            if ((f.GPS_HOME_MODE || f.GPS_HOLD_MODE) && f.GPS_FIX_HOME) {
 800e126:	e008      	b.n	800e13a <taskComputeImu+0x566>
            } else {
                GPS_angle[ROLL] = 0;
 800e128:	4b1a      	ldr	r3, [pc, #104]	; (800e194 <taskComputeImu+0x5c0>)
 800e12a:	2200      	movs	r2, #0
 800e12c:	801a      	strh	r2, [r3, #0]
                GPS_angle[PITCH] = 0;
 800e12e:	4b19      	ldr	r3, [pc, #100]	; (800e194 <taskComputeImu+0x5c0>)
 800e130:	2200      	movs	r2, #0
 800e132:	805a      	strh	r2, [r3, #2]
                GPS_angle[YAW] = 0;
 800e134:	4b17      	ldr	r3, [pc, #92]	; (800e194 <taskComputeImu+0x5c0>)
 800e136:	2200      	movs	r2, #0
 800e138:	809a      	strh	r2, [r3, #4]
            }
        }
#endif
        step = 6;
 800e13a:	4b17      	ldr	r3, [pc, #92]	; (800e198 <taskComputeImu+0x5c4>)
 800e13c:	2206      	movs	r2, #6
 800e13e:	601a      	str	r2, [r3, #0]
        pifTask_SetTrigger(p_task);
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f006 f9e5 	bl	8014510 <pifTask_SetTrigger>
    	break;
 800e146:	e00c      	b.n	800e162 <taskComputeImu+0x58e>

    case 6:
        // PID - note this is function pointer set by setPIDController()
        pid_controller();
 800e148:	4b14      	ldr	r3, [pc, #80]	; (800e19c <taskComputeImu+0x5c8>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4798      	blx	r3

        mixTable();
 800e14e:	f7fd fb6f 	bl	800b830 <mixTable>
        writeServos();
 800e152:	f7fc ffc5 	bl	800b0e0 <writeServos>
        writeMotors();
 800e156:	f7fd f8fb 	bl	800b350 <writeMotors>
        step = 0;
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <taskComputeImu+0x5c4>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	601a      	str	r2, [r3, #0]
    	break;
 800e160:	bf00      	nop
	}

    return 0;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	2000170c 	.word	0x2000170c
 800e170:	20000848 	.word	0x20000848
 800e174:	20001420 	.word	0x20001420
 800e178:	20000db4 	.word	0x20000db4
 800e17c:	200016b0 	.word	0x200016b0
 800e180:	20001438 	.word	0x20001438
 800e184:	200019e6 	.word	0x200019e6
 800e188:	3c8efa35 	.word	0x3c8efa35
 800e18c:	200017a8 	.word	0x200017a8
 800e190:	200017ac 	.word	0x200017ac
 800e194:	200017a0 	.word	0x200017a0
 800e198:	20001974 	.word	0x20001974
 800e19c:	20000050 	.word	0x20000050

0800e1a0 <mspReadRawRC>:
#include "board.h"
#include "mw.h"


static uint16_t mspReadRawRC(uint8_t chan)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	71fb      	strb	r3, [r7, #7]
    return rcData[chan];
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	4a04      	ldr	r2, [pc, #16]	; (800e1c0 <mspReadRawRC+0x20>)
 800e1ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800e1b2:	b29b      	uxth	r3, r3
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	200016e8 	.word	0x200016e8

0800e1c4 <mspFrameRecieve>:

void mspFrameRecieve(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	af00      	add	r7, sp, #0
    failsafeCnt = 0; // clear FailSafe counter
 800e1c8:	4b04      	ldr	r3, [pc, #16]	; (800e1dc <mspFrameRecieve+0x18>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	801a      	strh	r2, [r3, #0]

    pifTask_SetTrigger(g_task_compute_rc);
 800e1ce:	4b04      	ldr	r3, [pc, #16]	; (800e1e0 <mspFrameRecieve+0x1c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f006 f99c 	bl	8014510 <pifTask_SetTrigger>
}
 800e1d8:	bf00      	nop
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	200016e2 	.word	0x200016e2
 800e1e0:	2000150c 	.word	0x2000150c

0800e1e4 <mspInit>:

void mspInit(rcReadRawDataPtr *callback)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
    if (callback)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <mspInit+0x14>
        *callback = mspReadRawRC;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4a03      	ldr	r2, [pc, #12]	; (800e204 <mspInit+0x20>)
 800e1f6:	601a      	str	r2, [r3, #0]
}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	0800e1a1 	.word	0x0800e1a1

0800e208 <sbusReadRawRC>:
static PifRcSbus s_sbus;
static uint32_t sbusChannelData[SBUS_MAX_CHANNEL];


static uint16_t sbusReadRawRC(uint8_t chan)
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	71fb      	strb	r3, [r7, #7]
    return sbusChannelData[mcfg.rcmap[chan]];
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	4a07      	ldr	r2, [pc, #28]	; (800e234 <sbusReadRawRC+0x2c>)
 800e216:	4413      	add	r3, r2
 800e218:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800e21c:	461a      	mov	r2, r3
 800e21e:	4b06      	ldr	r3, [pc, #24]	; (800e238 <sbusReadRawRC+0x30>)
 800e220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e224:	b29b      	uxth	r3, r3
}
 800e226:	4618      	mov	r0, r3
 800e228:	370c      	adds	r7, #12
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop
 800e234:	20000848 	.word	0x20000848
 800e238:	200019c0 	.word	0x200019c0

0800e23c <_evtSbusReceive>:

static void _evtSbusReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e248:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e24c:	f7f8 fe40 	bl	8006ed0 <feature>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d005      	beq.n	800e262 <_evtSbusReceive+0x26>
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f009 fc36 	bl	8017ac8 <pifRc_CheckFailSafe>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d11b      	bne.n	800e29a <_evtSbusReceive+0x5e>

    failsafeCnt = 0; // clear FailSafe counter
 800e262:	4b10      	ldr	r3, [pc, #64]	; (800e2a4 <_evtSbusReceive+0x68>)
 800e264:	2200      	movs	r2, #0
 800e266:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e268:	2300      	movs	r3, #0
 800e26a:	617b      	str	r3, [r7, #20]
 800e26c:	e00c      	b.n	800e288 <_evtSbusReceive+0x4c>
		sbusChannelData[i] = channel[i];
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	005b      	lsls	r3, r3, #1
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	4413      	add	r3, r2
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	4619      	mov	r1, r3
 800e27a:	4a0b      	ldr	r2, [pc, #44]	; (800e2a8 <_evtSbusReceive+0x6c>)
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SBUS_MAX_CHANNEL; i++) {
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	3301      	adds	r3, #1
 800e286:	617b      	str	r3, [r7, #20]
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b07      	cmp	r3, #7
 800e28c:	ddef      	ble.n	800e26e <_evtSbusReceive+0x32>
	}

	p_task = (PifTask*)p_issuer;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 800e292:	6938      	ldr	r0, [r7, #16]
 800e294:	f006 f93c 	bl	8014510 <pifTask_SetTrigger>
 800e298:	e000      	b.n	800e29c <_evtSbusReceive+0x60>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 800e29a:	bf00      	nop
}
 800e29c:	3718      	adds	r7, #24
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	200016e2 	.word	0x200016e2
 800e2a8:	200019c0 	.word	0x200019c0

0800e2ac <sbusInit>:

BOOL sbusInit(int uart, rcReadRawDataPtr *callback)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
    int b;

    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	60fb      	str	r3, [r7, #12]
 800e2ba:	e00a      	b.n	800e2d2 <sbusInit+0x26>
        sbusChannelData[b] = mcfg.midrc;
 800e2bc:	4b22      	ldr	r3, [pc, #136]	; (800e348 <sbusInit+0x9c>)
 800e2be:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4a21      	ldr	r2, [pc, #132]	; (800e34c <sbusInit+0xa0>)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SBUS_MAX_CHANNEL; b++)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	60fb      	str	r3, [r7, #12]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b07      	cmp	r3, #7
 800e2d6:	ddf1      	ble.n	800e2bc <sbusInit+0x10>

    core.rcvrport = uartOpen(uart, 100000, (portMode_t)(MODE_RX | MODE_SBUS), 2);	// 2ms
 800e2d8:	2302      	movs	r3, #2
 800e2da:	2205      	movs	r2, #5
 800e2dc:	491c      	ldr	r1, [pc, #112]	; (800e350 <sbusInit+0xa4>)
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7f4 f80c 	bl	80022fc <uartOpen>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	4a1b      	ldr	r2, [pc, #108]	; (800e354 <sbusInit+0xa8>)
 800e2e8:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 800e2ea:	4b1a      	ldr	r3, [pc, #104]	; (800e354 <sbusInit+0xa8>)
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <sbusInit+0x4a>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	e023      	b.n	800e33e <sbusInit+0x92>

    if (!pifRcSbus_Init(&s_sbus, PIF_ID_AUTO)) return FALSE;
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	4817      	ldr	r0, [pc, #92]	; (800e358 <sbusInit+0xac>)
 800e2fa:	f00a fa83 	bl	8018804 <pifRcSbus_Init>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d101      	bne.n	800e308 <sbusInit+0x5c>
 800e304:	2300      	movs	r3, #0
 800e306:	e01a      	b.n	800e33e <sbusInit+0x92>
    pifRc_AttachEvtReceive(&s_sbus.parent, _evtSbusReceive, g_task_compute_rc);
 800e308:	4b14      	ldr	r3, [pc, #80]	; (800e35c <sbusInit+0xb0>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	461a      	mov	r2, r3
 800e30e:	4914      	ldr	r1, [pc, #80]	; (800e360 <sbusInit+0xb4>)
 800e310:	4811      	ldr	r0, [pc, #68]	; (800e358 <sbusInit+0xac>)
 800e312:	f009 fbc7 	bl	8017aa4 <pifRc_AttachEvtReceive>
    pifRcSbus_AttachComm(&s_sbus, &core.rcvrport->comm);
 800e316:	4b0f      	ldr	r3, [pc, #60]	; (800e354 <sbusInit+0xa8>)
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4619      	mov	r1, r3
 800e31e:	480e      	ldr	r0, [pc, #56]	; (800e358 <sbusInit+0xac>)
 800e320:	f00a faa0 	bl	8018864 <pifRcSbus_AttachComm>

    if (callback)
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d002      	beq.n	800e330 <sbusInit+0x84>
        *callback = sbusReadRawRC;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	4a0d      	ldr	r2, [pc, #52]	; (800e364 <sbusInit+0xb8>)
 800e32e:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 800e330:	4b08      	ldr	r3, [pc, #32]	; (800e354 <sbusInit+0xa8>)
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	3304      	adds	r3, #4
 800e336:	4618      	mov	r0, r3
 800e338:	f7f4 f94c 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 800e33c:	2301      	movs	r3, #1
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000848 	.word	0x20000848
 800e34c:	200019c0 	.word	0x200019c0
 800e350:	000186a0 	.word	0x000186a0
 800e354:	20000790 	.word	0x20000790
 800e358:	2000197c 	.word	0x2000197c
 800e35c:	2000150c 	.word	0x2000150c
 800e360:	0800e23d 	.word	0x0800e23d
 800e364:	0800e209 	.word	0x0800e209

0800e368 <sensorsAutodetect>:
#endif
};


bool sensorsAutodetect(sensorDetect_t* gyroDetect, sensorDetect_t* accDetect, sensorDetect_t* baroDetect, sensorDetect_t* magDetect)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	603b      	str	r3, [r7, #0]
    int16_t deg, min;

    pifImuSensor_Init(&sensor_set.imu_sensor);
 800e376:	4878      	ldr	r0, [pc, #480]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e378:	f00b fbea 	bl	8019b50 <pifImuSensor_Init>
    pifImuSensor_InitBoardAlignment(&sensor_set.imu_sensor, mcfg.board_align_roll, mcfg.board_align_pitch, mcfg.board_align_yaw);
 800e37c:	4b77      	ldr	r3, [pc, #476]	; (800e55c <sensorsAutodetect+0x1f4>)
 800e37e:	f9b3 1156 	ldrsh.w	r1, [r3, #342]	; 0x156
 800e382:	4b76      	ldr	r3, [pc, #472]	; (800e55c <sensorsAutodetect+0x1f4>)
 800e384:	f9b3 2158 	ldrsh.w	r2, [r3, #344]	; 0x158
 800e388:	4b74      	ldr	r3, [pc, #464]	; (800e55c <sensorsAutodetect+0x1f4>)
 800e38a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 800e38e:	4872      	ldr	r0, [pc, #456]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e390:	f00b fbec 	bl	8019b6c <pifImuSensor_InitBoardAlignment>

    // set gyro low pass filter parameters
    sensor_set.gyro.lpf = mcfg.gyro_lpf;
 800e394:	4b71      	ldr	r3, [pc, #452]	; (800e55c <sensorsAutodetect+0x1f4>)
 800e396:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
 800e39a:	4b6f      	ldr	r3, [pc, #444]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e39c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

    // Autodetect Invensense gyro hardware
    while (gyroDetect->p_func) {
 800e3a0:	e010      	b.n	800e3c4 <sensorsAutodetect+0x5c>
    	if ((*gyroDetect->p_func)(&sensor_set, gyroDetect->p_param)) {
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	6852      	ldr	r2, [r2, #4]
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	486a      	ldr	r0, [pc, #424]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e3ae:	4798      	blx	r3
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <sensorsAutodetect+0x56>
    	    sensorsSet(SENSOR_GYRO);
 800e3b6:	2001      	movs	r0, #1
 800e3b8:	f7f8 fd58 	bl	8006e6c <sensorsSet>
    		break;
 800e3bc:	e006      	b.n	800e3cc <sensorsAutodetect+0x64>
    	}
    	gyroDetect++;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3308      	adds	r3, #8
 800e3c2:	60fb      	str	r3, [r7, #12]
    while (gyroDetect->p_func) {
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1ea      	bne.n	800e3a2 <sensorsAutodetect+0x3a>
    }
    if (!sensor_set.gyro.hardware) return false;
 800e3cc:	4b62      	ldr	r3, [pc, #392]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e3ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <sensorsAutodetect+0x70>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e0ba      	b.n	800e54e <sensorsAutodetect+0x1e6>

    // Autodetect Invensense acc hardware
    if (sensor_set.acc.hardware) {
 800e3d8:	4b5f      	ldr	r3, [pc, #380]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d003      	beq.n	800e3ea <sensorsAutodetect+0x82>
    	sensorsSet(SENSOR_ACC);
 800e3e2:	2002      	movs	r0, #2
 800e3e4:	f7f8 fd42 	bl	8006e6c <sensorsSet>
 800e3e8:	e018      	b.n	800e41c <sensorsAutodetect+0xb4>
    }
    else if (accDetect) {
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d015      	beq.n	800e41c <sensorsAutodetect+0xb4>
        while (accDetect->p_func) {
 800e3f0:	e010      	b.n	800e414 <sensorsAutodetect+0xac>
        	if ((*accDetect->p_func)(&sensor_set, accDetect->p_param)) {
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	6852      	ldr	r2, [r2, #4]
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	4856      	ldr	r0, [pc, #344]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e3fe:	4798      	blx	r3
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d003      	beq.n	800e40e <sensorsAutodetect+0xa6>
            	sensorsSet(SENSOR_ACC);
 800e406:	2002      	movs	r0, #2
 800e408:	f7f8 fd30 	bl	8006e6c <sensorsSet>
        		break;
 800e40c:	e006      	b.n	800e41c <sensorsAutodetect+0xb4>
        	}
        	accDetect++;
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	3308      	adds	r3, #8
 800e412:	60bb      	str	r3, [r7, #8]
        while (accDetect->p_func) {
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1ea      	bne.n	800e3f2 <sensorsAutodetect+0x8a>
        }
    }

#ifdef BARO
    // Autodetect Invensense baro hardware
    if (sensor_set.baro.hardware) {
 800e41c:	4b4e      	ldr	r3, [pc, #312]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e41e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e422:	2b00      	cmp	r3, #0
 800e424:	d003      	beq.n	800e42e <sensorsAutodetect+0xc6>
    	sensorsSet(SENSOR_BARO);
 800e426:	2004      	movs	r0, #4
 800e428:	f7f8 fd20 	bl	8006e6c <sensorsSet>
 800e42c:	e018      	b.n	800e460 <sensorsAutodetect+0xf8>
    }
    else if (baroDetect) {
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d015      	beq.n	800e460 <sensorsAutodetect+0xf8>
		while (baroDetect->p_func) {
 800e434:	e010      	b.n	800e458 <sensorsAutodetect+0xf0>
			if ((*baroDetect->p_func)(&sensor_set, baroDetect->p_param)) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	6852      	ldr	r2, [r2, #4]
 800e43e:	4611      	mov	r1, r2
 800e440:	4845      	ldr	r0, [pc, #276]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e442:	4798      	blx	r3
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <sensorsAutodetect+0xea>
				sensorsSet(SENSOR_BARO);
 800e44a:	2004      	movs	r0, #4
 800e44c:	f7f8 fd0e 	bl	8006e6c <sensorsSet>
				break;
 800e450:	e006      	b.n	800e460 <sensorsAutodetect+0xf8>
			}
			baroDetect++;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	3308      	adds	r3, #8
 800e456:	607b      	str	r3, [r7, #4]
		while (baroDetect->p_func) {
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1ea      	bne.n	800e436 <sensorsAutodetect+0xce>
#else
    (void)baroDetect;
#endif

    // Now time to init things, acc first
    if (sensors(SENSOR_ACC))
 800e460:	2002      	movs	r0, #2
 800e462:	f7f8 fced 	bl	8006e40 <sensors>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d008      	beq.n	800e47e <sensorsAutodetect+0x116>
        sensor_set.acc.init(&sensor_set, mcfg.acc_align);
 800e46c:	4b3a      	ldr	r3, [pc, #232]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e46e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e472:	4a3a      	ldr	r2, [pc, #232]	; (800e55c <sensorsAutodetect+0x1f4>)
 800e474:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 800e478:	4611      	mov	r1, r2
 800e47a:	4837      	ldr	r0, [pc, #220]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e47c:	4798      	blx	r3
    // this is safe because either mpu6050 or mpu3050 or lg3d20 sets it, and in case of fail, we never get here.
    sensor_set.gyro.init(&sensor_set, mcfg.gyro_align);
 800e47e:	4b36      	ldr	r3, [pc, #216]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e482:	4a36      	ldr	r2, [pc, #216]	; (800e55c <sensorsAutodetect+0x1f4>)
 800e484:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800e488:	4611      	mov	r1, r2
 800e48a:	4833      	ldr	r0, [pc, #204]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e48c:	4798      	blx	r3

#ifdef MAG
    // Autodetect Invensense mag hardware
    if (sensor_set.mag.hardware) {
 800e48e:	4b32      	ldr	r3, [pc, #200]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d003      	beq.n	800e4a0 <sensorsAutodetect+0x138>
    	sensorsSet(SENSOR_MAG);
 800e498:	2008      	movs	r0, #8
 800e49a:	f7f8 fce7 	bl	8006e6c <sensorsSet>
 800e49e:	e018      	b.n	800e4d2 <sensorsAutodetect+0x16a>
    }
    else if (magDetect) {
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d015      	beq.n	800e4d2 <sensorsAutodetect+0x16a>
		while (magDetect->p_func) {
 800e4a6:	e010      	b.n	800e4ca <sensorsAutodetect+0x162>
			if ((*magDetect->p_func)(&sensor_set, magDetect->p_param)) {
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	6852      	ldr	r2, [r2, #4]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4829      	ldr	r0, [pc, #164]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e4b4:	4798      	blx	r3
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d003      	beq.n	800e4c4 <sensorsAutodetect+0x15c>
				sensorsSet(SENSOR_MAG);
 800e4bc:	2008      	movs	r0, #8
 800e4be:	f7f8 fcd5 	bl	8006e6c <sensorsSet>
				break;
 800e4c2:	e006      	b.n	800e4d2 <sensorsAutodetect+0x16a>
			}
			magDetect++;
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	603b      	str	r3, [r7, #0]
		while (magDetect->p_func) {
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1ea      	bne.n	800e4a8 <sensorsAutodetect+0x140>
#else
    (void)magDetect;
#endif

    // calculate magnetic declination
    deg = cfg.mag_declination / 100;
 800e4d2:	4b23      	ldr	r3, [pc, #140]	; (800e560 <sensorsAutodetect+0x1f8>)
 800e4d4:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e4d8:	4a22      	ldr	r2, [pc, #136]	; (800e564 <sensorsAutodetect+0x1fc>)
 800e4da:	fb82 1203 	smull	r1, r2, r2, r3
 800e4de:	1152      	asrs	r2, r2, #5
 800e4e0:	17db      	asrs	r3, r3, #31
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	82fb      	strh	r3, [r7, #22]
    min = cfg.mag_declination % 100;
 800e4e6:	4b1e      	ldr	r3, [pc, #120]	; (800e560 <sensorsAutodetect+0x1f8>)
 800e4e8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800e4ec:	4a1d      	ldr	r2, [pc, #116]	; (800e564 <sensorsAutodetect+0x1fc>)
 800e4ee:	fb82 1203 	smull	r1, r2, r2, r3
 800e4f2:	1151      	asrs	r1, r2, #5
 800e4f4:	17da      	asrs	r2, r3, #31
 800e4f6:	1a8a      	subs	r2, r1, r2
 800e4f8:	2164      	movs	r1, #100	; 0x64
 800e4fa:	fb01 f202 	mul.w	r2, r1, r2
 800e4fe:	1a9b      	subs	r3, r3, r2
 800e500:	82bb      	strh	r3, [r7, #20]
    if (sensors(SENSOR_MAG))
 800e502:	2008      	movs	r0, #8
 800e504:	f7f8 fc9c 	bl	8006e40 <sensors>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d019      	beq.n	800e542 <sensorsAutodetect+0x1da>
        sensor_set.mag.declination = (deg + ((float)min * (1.0f / 60.0f))) * 10; // heading is in 0.1deg units
 800e50e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e512:	ee07 3a90 	vmov	s15, r3
 800e516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e51a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e51e:	ee07 3a90 	vmov	s15, r3
 800e522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e526:	eddf 6a10 	vldr	s13, [pc, #64]	; 800e568 <sensorsAutodetect+0x200>
 800e52a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e532:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800e536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e53a:	4b07      	ldr	r3, [pc, #28]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e53c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800e540:	e004      	b.n	800e54c <sensorsAutodetect+0x1e4>
    else
        sensor_set.mag.declination = 0.0f;
 800e542:	4b05      	ldr	r3, [pc, #20]	; (800e558 <sensorsAutodetect+0x1f0>)
 800e544:	f04f 0200 	mov.w	r2, #0
 800e548:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    return true;
 800e54c:	2301      	movs	r3, #1
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3718      	adds	r7, #24
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20000060 	.word	0x20000060
 800e55c:	20000848 	.word	0x20000848
 800e560:	20000db4 	.word	0x20000db4
 800e564:	51eb851f 	.word	0x51eb851f
 800e568:	3c888889 	.word	0x3c888889

0800e56c <RSSI_getValue>:

uint16_t RSSI_getValue(void)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
    uint16_t value = 0;
 800e572:	2300      	movs	r3, #0
 800e574:	80fb      	strh	r3, [r7, #6]

    if (mcfg.rssi_aux_channel > 0) {
 800e576:	4b2a      	ldr	r3, [pc, #168]	; (800e620 <RSSI_getValue+0xb4>)
 800e578:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d029      	beq.n	800e5d4 <RSSI_getValue+0x68>
        const int16_t rssiChannelData = rcData[AUX1 + mcfg.rssi_aux_channel - 1];
 800e580:	4b27      	ldr	r3, [pc, #156]	; (800e620 <RSSI_getValue+0xb4>)
 800e582:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800e586:	3303      	adds	r3, #3
 800e588:	4a26      	ldr	r2, [pc, #152]	; (800e624 <RSSI_getValue+0xb8>)
 800e58a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e58e:	807b      	strh	r3, [r7, #2]
        // Range of rssiChannelData is [1000;2000]. rssi should be in [0;1023];
        value = (uint16_t)((constrain(rssiChannelData - 1000, 0, mcfg.rssi_aux_max) / (float) mcfg.rssi_aux_max) * 1023.0f);
 800e590:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e594:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800e598:	4a21      	ldr	r2, [pc, #132]	; (800e620 <RSSI_getValue+0xb4>)
 800e59a:	f8b2 21a2 	ldrh.w	r2, [r2, #418]	; 0x1a2
 800e59e:	2100      	movs	r1, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f5 fb31 	bl	8003c08 <constrain>
 800e5a6:	ee07 0a90 	vmov	s15, r0
 800e5aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e5ae:	4b1c      	ldr	r3, [pc, #112]	; (800e620 <RSSI_getValue+0xb4>)
 800e5b0:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 800e5b4:	ee07 3a90 	vmov	s15, r3
 800e5b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5c0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e628 <RSSI_getValue+0xbc>
 800e5c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5cc:	ee17 3a90 	vmov	r3, s15
 800e5d0:	80fb      	strh	r3, [r7, #6]
 800e5d2:	e020      	b.n	800e616 <RSSI_getValue+0xaa>
    } else if (mcfg.rssi_adc_channel > 0) {
 800e5d4:	4b12      	ldr	r3, [pc, #72]	; (800e620 <RSSI_getValue+0xb4>)
 800e5d6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d01b      	beq.n	800e616 <RSSI_getValue+0xaa>
        const int16_t rssiData = (((int32_t)(actGetAdcChannel(ADC_RSSI) - mcfg.rssi_adc_offset)) * 1023L) / mcfg.rssi_adc_max;
 800e5de:	2003      	movs	r0, #3
 800e5e0:	f7f2 fde2 	bl	80011a8 <actGetAdcChannel>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	4b0d      	ldr	r3, [pc, #52]	; (800e620 <RSSI_getValue+0xb4>)
 800e5ea:	f8b3 31a8 	ldrh.w	r3, [r3, #424]	; 0x1a8
 800e5ee:	1ad2      	subs	r2, r2, r3
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	029b      	lsls	r3, r3, #10
 800e5f4:	1a9b      	subs	r3, r3, r2
 800e5f6:	4a0a      	ldr	r2, [pc, #40]	; (800e620 <RSSI_getValue+0xb4>)
 800e5f8:	f8b2 21a6 	ldrh.w	r2, [r2, #422]	; 0x1a6
 800e5fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e600:	80bb      	strh	r3, [r7, #4]
        // Set to correct range [0;1023]
        value = constrain(rssiData, 0, 1023);
 800e602:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e606:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e60a:	2100      	movs	r1, #0
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7f5 fafb 	bl	8003c08 <constrain>
 800e612:	4603      	mov	r3, r0
 800e614:	80fb      	strh	r3, [r7, #6]
    }

    // return range [0;1023]
    return value;
 800e616:	88fb      	ldrh	r3, [r7, #6]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	20000848 	.word	0x20000848
 800e624:	200016e8 	.word	0x200016e8
 800e628:	447fc000 	.word	0x447fc000

0800e62c <batteryInit>:

void batteryInit(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
    uint32_t i;
    float voltage = 0;
 800e632:	f04f 0300 	mov.w	r3, #0
 800e636:	603b      	str	r3, [r7, #0]

    // average up some voltage readings
    for (i = 0; i < 32; i++) {
 800e638:	2300      	movs	r3, #0
 800e63a:	607b      	str	r3, [r7, #4]
 800e63c:	e018      	b.n	800e670 <batteryInit+0x44>
        voltage += actGetBatteryVoltage() * mcfg.vbatscale;
 800e63e:	f7f2 fdc5 	bl	80011cc <actGetBatteryVoltage>
 800e642:	eeb0 7a40 	vmov.f32	s14, s0
 800e646:	4b2d      	ldr	r3, [pc, #180]	; (800e6fc <batteryInit+0xd0>)
 800e648:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800e64c:	ee07 3a90 	vmov	s15, r3
 800e650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e658:	ed97 7a00 	vldr	s14, [r7]
 800e65c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e660:	edc7 7a00 	vstr	s15, [r7]
        pif_Delay1ms(10);
 800e664:	200a      	movs	r0, #10
 800e666:	f002 fe23 	bl	80112b0 <pif_Delay1ms>
    for (i = 0; i < 32; i++) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3301      	adds	r3, #1
 800e66e:	607b      	str	r3, [r7, #4]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b1f      	cmp	r3, #31
 800e674:	d9e3      	bls.n	800e63e <batteryInit+0x12>
    }

    voltage = voltage / 32;
 800e676:	ed97 7a00 	vldr	s14, [r7]
 800e67a:	eddf 6a21 	vldr	s13, [pc, #132]	; 800e700 <batteryInit+0xd4>
 800e67e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e682:	edc7 7a00 	vstr	s15, [r7]
#ifndef __PIF_NO_LOG__
    pifLog_Printf(LT_INFO, "Battery: %fV", voltage / 10);
#endif

    // autodetect cell count, going from 2S..8S
    for (i = 1; i < 8; i++) {
 800e686:	2301      	movs	r3, #1
 800e688:	607b      	str	r3, [r7, #4]
 800e68a:	e014      	b.n	800e6b6 <batteryInit+0x8a>
        if (voltage < i * mcfg.vbatmaxcellvoltage)
 800e68c:	4b1b      	ldr	r3, [pc, #108]	; (800e6fc <batteryInit+0xd0>)
 800e68e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800e692:	461a      	mov	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	fb02 f303 	mul.w	r3, r2, r3
 800e69a:	ee07 3a90 	vmov	s15, r3
 800e69e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6a2:	ed97 7a00 	vldr	s14, [r7]
 800e6a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ae:	d406      	bmi.n	800e6be <batteryInit+0x92>
    for (i = 1; i < 8; i++) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	607b      	str	r3, [r7, #4]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b07      	cmp	r3, #7
 800e6ba:	d9e7      	bls.n	800e68c <batteryInit+0x60>
 800e6bc:	e000      	b.n	800e6c0 <batteryInit+0x94>
            break;
 800e6be:	bf00      	nop
    }
    batteryCellCount = i;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	4b0f      	ldr	r3, [pc, #60]	; (800e704 <batteryInit+0xd8>)
 800e6c6:	701a      	strb	r2, [r3, #0]
    batteryWarningVoltage = i * mcfg.vbatwarningcellvoltage; // 3.5V per cell minimum, configurable in CLI
 800e6c8:	4b0c      	ldr	r3, [pc, #48]	; (800e6fc <batteryInit+0xd0>)
 800e6ca:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	fb12 f303 	smulbb	r3, r2, r3
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	4b0b      	ldr	r3, [pc, #44]	; (800e708 <batteryInit+0xdc>)
 800e6dc:	801a      	strh	r2, [r3, #0]
    batteryCriticalVoltage = i * mcfg.vbatmincellvoltage; // 3.3V per cell minimum, configurable in CLI
 800e6de:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <batteryInit+0xd0>)
 800e6e0:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	fb12 f303 	smulbb	r3, r2, r3
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	4b06      	ldr	r3, [pc, #24]	; (800e70c <batteryInit+0xe0>)
 800e6f2:	801a      	strh	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	20000848 	.word	0x20000848
 800e700:	42000000 	.word	0x42000000
 800e704:	20000054 	.word	0x20000054
 800e708:	20001852 	.word	0x20001852
 800e70c:	20001854 	.word	0x20001854

0800e710 <ACC_Common>:

static void ACC_Common(void)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
    static int32_t a[3];
    int axis;

    if (calibratingA > 0) {
 800e716:	4b4e      	ldr	r3, [pc, #312]	; (800e850 <ACC_Common+0x140>)
 800e718:	881b      	ldrh	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d06c      	beq.n	800e7f8 <ACC_Common+0xe8>
        for (axis = 0; axis < 3; axis++) {
 800e71e:	2300      	movs	r3, #0
 800e720:	607b      	str	r3, [r7, #4]
 800e722:	e025      	b.n	800e770 <ACC_Common+0x60>
            // Reset a[axis] at start of calibration
            if (calibratingA == CALIBRATING_ACC_CYCLES)
 800e724:	4b4a      	ldr	r3, [pc, #296]	; (800e850 <ACC_Common+0x140>)
 800e726:	881b      	ldrh	r3, [r3, #0]
 800e728:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e72c:	d104      	bne.n	800e738 <ACC_Common+0x28>
                a[axis] = 0;
 800e72e:	4a49      	ldr	r2, [pc, #292]	; (800e854 <ACC_Common+0x144>)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2100      	movs	r1, #0
 800e734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            // Sum up CALIBRATING_ACC_CYCLES readings
            a[axis] += accADC[axis];
 800e738:	4a46      	ldr	r2, [pc, #280]	; (800e854 <ACC_Common+0x144>)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e740:	4945      	ldr	r1, [pc, #276]	; (800e858 <ACC_Common+0x148>)
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e748:	441a      	add	r2, r3
 800e74a:	4942      	ldr	r1, [pc, #264]	; (800e854 <ACC_Common+0x144>)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            // Clear global variables for next reading
            accADC[axis] = 0;
 800e752:	4a41      	ldr	r2, [pc, #260]	; (800e858 <ACC_Common+0x148>)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2100      	movs	r1, #0
 800e758:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            mcfg.accZero[axis] = 0;
 800e75c:	4a3f      	ldr	r2, [pc, #252]	; (800e85c <ACC_Common+0x14c>)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	33b4      	adds	r3, #180	; 0xb4
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	4413      	add	r3, r2
 800e766:	2200      	movs	r2, #0
 800e768:	805a      	strh	r2, [r3, #2]
        for (axis = 0; axis < 3; axis++) {
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3301      	adds	r3, #1
 800e76e:	607b      	str	r3, [r7, #4]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b02      	cmp	r3, #2
 800e774:	ddd6      	ble.n	800e724 <ACC_Common+0x14>
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (calibratingA == 1) {
 800e776:	4b36      	ldr	r3, [pc, #216]	; (800e850 <ACC_Common+0x140>)
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d136      	bne.n	800e7ec <ACC_Common+0xdc>
            mcfg.accZero[ROLL] = (a[ROLL] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e77e:	4b35      	ldr	r3, [pc, #212]	; (800e854 <ACC_Common+0x144>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	33c8      	adds	r3, #200	; 0xc8
 800e784:	4a36      	ldr	r2, [pc, #216]	; (800e860 <ACC_Common+0x150>)
 800e786:	fb82 1203 	smull	r1, r2, r2, r3
 800e78a:	11d2      	asrs	r2, r2, #7
 800e78c:	17db      	asrs	r3, r3, #31
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	b21a      	sxth	r2, r3
 800e792:	4b32      	ldr	r3, [pc, #200]	; (800e85c <ACC_Common+0x14c>)
 800e794:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = (a[PITCH] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES;
 800e798:	4b2e      	ldr	r3, [pc, #184]	; (800e854 <ACC_Common+0x144>)
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	33c8      	adds	r3, #200	; 0xc8
 800e79e:	4a30      	ldr	r2, [pc, #192]	; (800e860 <ACC_Common+0x150>)
 800e7a0:	fb82 1203 	smull	r1, r2, r2, r3
 800e7a4:	11d2      	asrs	r2, r2, #7
 800e7a6:	17db      	asrs	r3, r3, #31
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	b21a      	sxth	r2, r3
 800e7ac:	4b2b      	ldr	r3, [pc, #172]	; (800e85c <ACC_Common+0x14c>)
 800e7ae:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = (a[YAW] + (CALIBRATING_ACC_CYCLES / 2)) / CALIBRATING_ACC_CYCLES - sensor_set.acc.acc_1G;
 800e7b2:	4b28      	ldr	r3, [pc, #160]	; (800e854 <ACC_Common+0x144>)
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	33c8      	adds	r3, #200	; 0xc8
 800e7b8:	4a29      	ldr	r2, [pc, #164]	; (800e860 <ACC_Common+0x150>)
 800e7ba:	fb82 1203 	smull	r1, r2, r2, r3
 800e7be:	11d2      	asrs	r2, r2, #7
 800e7c0:	17db      	asrs	r3, r3, #31
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	4b27      	ldr	r3, [pc, #156]	; (800e864 <ACC_Common+0x154>)
 800e7c8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	b21a      	sxth	r2, r3
 800e7d2:	4b22      	ldr	r3, [pc, #136]	; (800e85c <ACC_Common+0x14c>)
 800e7d4:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e7d8:	4b23      	ldr	r3, [pc, #140]	; (800e868 <ACC_Common+0x158>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e7de:	4b22      	ldr	r3, [pc, #136]	; (800e868 <ACC_Common+0x158>)
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);      // write accZero in EEPROM
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	f7f7 ff90 	bl	800670c <writeEEPROM>
        }
        calibratingA--;
 800e7ec:	4b18      	ldr	r3, [pc, #96]	; (800e850 <ACC_Common+0x140>)
 800e7ee:	881b      	ldrh	r3, [r3, #0]
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	4b16      	ldr	r3, [pc, #88]	; (800e850 <ACC_Common+0x140>)
 800e7f6:	801a      	strh	r2, [r3, #0]
    }

    if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 800e7f8:	2004      	movs	r0, #4
 800e7fa:	f7f8 fb69 	bl	8006ed0 <feature>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	f000 80cb 	beq.w	800e99c <ACC_Common+0x28c>
        static int32_t b[3];
        static int16_t accZero_saved[3] = { 0, 0, 0 };
        static int16_t angleTrim_saved[2] = { 0, 0 };
        // Saving old zeropoints before measurement
        if (InflightcalibratingA == 50) {
 800e806:	4b19      	ldr	r3, [pc, #100]	; (800e86c <ACC_Common+0x15c>)
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	2b32      	cmp	r3, #50	; 0x32
 800e80c:	d118      	bne.n	800e840 <ACC_Common+0x130>
            accZero_saved[ROLL] = mcfg.accZero[ROLL];
 800e80e:	4b13      	ldr	r3, [pc, #76]	; (800e85c <ACC_Common+0x14c>)
 800e810:	f9b3 216a 	ldrsh.w	r2, [r3, #362]	; 0x16a
 800e814:	4b16      	ldr	r3, [pc, #88]	; (800e870 <ACC_Common+0x160>)
 800e816:	801a      	strh	r2, [r3, #0]
            accZero_saved[PITCH] = mcfg.accZero[PITCH];
 800e818:	4b10      	ldr	r3, [pc, #64]	; (800e85c <ACC_Common+0x14c>)
 800e81a:	f9b3 216c 	ldrsh.w	r2, [r3, #364]	; 0x16c
 800e81e:	4b14      	ldr	r3, [pc, #80]	; (800e870 <ACC_Common+0x160>)
 800e820:	805a      	strh	r2, [r3, #2]
            accZero_saved[YAW] = mcfg.accZero[YAW];
 800e822:	4b0e      	ldr	r3, [pc, #56]	; (800e85c <ACC_Common+0x14c>)
 800e824:	f9b3 216e 	ldrsh.w	r2, [r3, #366]	; 0x16e
 800e828:	4b11      	ldr	r3, [pc, #68]	; (800e870 <ACC_Common+0x160>)
 800e82a:	809a      	strh	r2, [r3, #4]
            angleTrim_saved[ROLL] = cfg.angleTrim[ROLL];
 800e82c:	4b0e      	ldr	r3, [pc, #56]	; (800e868 <ACC_Common+0x158>)
 800e82e:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800e832:	4b10      	ldr	r3, [pc, #64]	; (800e874 <ACC_Common+0x164>)
 800e834:	801a      	strh	r2, [r3, #0]
            angleTrim_saved[PITCH] = cfg.angleTrim[PITCH];
 800e836:	4b0c      	ldr	r3, [pc, #48]	; (800e868 <ACC_Common+0x158>)
 800e838:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e83c:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <ACC_Common+0x164>)
 800e83e:	805a      	strh	r2, [r3, #2]
        }
        if (InflightcalibratingA > 0) {
 800e840:	4b0a      	ldr	r3, [pc, #40]	; (800e86c <ACC_Common+0x15c>)
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d06e      	beq.n	800e926 <ACC_Common+0x216>
            for (axis = 0; axis < 3; axis++) {
 800e848:	2300      	movs	r3, #0
 800e84a:	607b      	str	r3, [r7, #4]
 800e84c:	e039      	b.n	800e8c2 <ACC_Common+0x1b2>
 800e84e:	bf00      	nop
 800e850:	200019e0 	.word	0x200019e0
 800e854:	200019fc 	.word	0x200019fc
 800e858:	200013d8 	.word	0x200013d8
 800e85c:	20000848 	.word	0x20000848
 800e860:	51eb851f 	.word	0x51eb851f
 800e864:	20000060 	.word	0x20000060
 800e868:	20000db4 	.word	0x20000db4
 800e86c:	20001850 	.word	0x20001850
 800e870:	20001a08 	.word	0x20001a08
 800e874:	20001a10 	.word	0x20001a10
                // Reset a[axis] at start of calibration
                if (InflightcalibratingA == 50)
 800e878:	4b5e      	ldr	r3, [pc, #376]	; (800e9f4 <ACC_Common+0x2e4>)
 800e87a:	881b      	ldrh	r3, [r3, #0]
 800e87c:	2b32      	cmp	r3, #50	; 0x32
 800e87e:	d104      	bne.n	800e88a <ACC_Common+0x17a>
                    b[axis] = 0;
 800e880:	4a5d      	ldr	r2, [pc, #372]	; (800e9f8 <ACC_Common+0x2e8>)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2100      	movs	r1, #0
 800e886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                // Sum up 50 readings
                b[axis] += accADC[axis];
 800e88a:	4a5b      	ldr	r2, [pc, #364]	; (800e9f8 <ACC_Common+0x2e8>)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e892:	495a      	ldr	r1, [pc, #360]	; (800e9fc <ACC_Common+0x2ec>)
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800e89a:	441a      	add	r2, r3
 800e89c:	4956      	ldr	r1, [pc, #344]	; (800e9f8 <ACC_Common+0x2e8>)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Clear global variables for next reading
                accADC[axis] = 0;
 800e8a4:	4a55      	ldr	r2, [pc, #340]	; (800e9fc <ACC_Common+0x2ec>)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                mcfg.accZero[axis] = 0;
 800e8ae:	4a54      	ldr	r2, [pc, #336]	; (800ea00 <ACC_Common+0x2f0>)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	33b4      	adds	r3, #180	; 0xb4
 800e8b4:	005b      	lsls	r3, r3, #1
 800e8b6:	4413      	add	r3, r2
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	805a      	strh	r2, [r3, #2]
            for (axis = 0; axis < 3; axis++) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	607b      	str	r3, [r7, #4]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	ddd7      	ble.n	800e878 <ACC_Common+0x168>
            }
            // all values are measured
            if (InflightcalibratingA == 1) {
 800e8c8:	4b4a      	ldr	r3, [pc, #296]	; (800e9f4 <ACC_Common+0x2e4>)
 800e8ca:	881b      	ldrh	r3, [r3, #0]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d124      	bne.n	800e91a <ACC_Common+0x20a>
                AccInflightCalibrationActive = false;
 800e8d0:	4b4c      	ldr	r3, [pc, #304]	; (800ea04 <ACC_Common+0x2f4>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	701a      	strb	r2, [r3, #0]
                AccInflightCalibrationMeasurementDone = true;
 800e8d6:	4b4c      	ldr	r3, [pc, #304]	; (800ea08 <ACC_Common+0x2f8>)
 800e8d8:	2201      	movs	r2, #1
 800e8da:	701a      	strb	r2, [r3, #0]
                buzzer(BUZZER_ACC_CALIBRATION);      // buzzer for indicatiing the end of calibration
 800e8dc:	200a      	movs	r0, #10
 800e8de:	f7f5 fb23 	bl	8003f28 <buzzer>
                // recover saved values to maintain current flight behavior until new values are transferred
                mcfg.accZero[ROLL] = accZero_saved[ROLL];
 800e8e2:	4b4a      	ldr	r3, [pc, #296]	; (800ea0c <ACC_Common+0x2fc>)
 800e8e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e8e8:	4b45      	ldr	r3, [pc, #276]	; (800ea00 <ACC_Common+0x2f0>)
 800e8ea:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
                mcfg.accZero[PITCH] = accZero_saved[PITCH];
 800e8ee:	4b47      	ldr	r3, [pc, #284]	; (800ea0c <ACC_Common+0x2fc>)
 800e8f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e8f4:	4b42      	ldr	r3, [pc, #264]	; (800ea00 <ACC_Common+0x2f0>)
 800e8f6:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
                mcfg.accZero[YAW] = accZero_saved[YAW];
 800e8fa:	4b44      	ldr	r3, [pc, #272]	; (800ea0c <ACC_Common+0x2fc>)
 800e8fc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e900:	4b3f      	ldr	r3, [pc, #252]	; (800ea00 <ACC_Common+0x2f0>)
 800e902:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
                cfg.angleTrim[ROLL] = angleTrim_saved[ROLL];
 800e906:	4b42      	ldr	r3, [pc, #264]	; (800ea10 <ACC_Common+0x300>)
 800e908:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e90c:	4b41      	ldr	r3, [pc, #260]	; (800ea14 <ACC_Common+0x304>)
 800e90e:	859a      	strh	r2, [r3, #44]	; 0x2c
                cfg.angleTrim[PITCH] = angleTrim_saved[PITCH];
 800e910:	4b3f      	ldr	r3, [pc, #252]	; (800ea10 <ACC_Common+0x300>)
 800e912:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e916:	4b3f      	ldr	r3, [pc, #252]	; (800ea14 <ACC_Common+0x304>)
 800e918:	85da      	strh	r2, [r3, #46]	; 0x2e
            }
            InflightcalibratingA--;
 800e91a:	4b36      	ldr	r3, [pc, #216]	; (800e9f4 <ACC_Common+0x2e4>)
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	3b01      	subs	r3, #1
 800e920:	b29a      	uxth	r2, r3
 800e922:	4b34      	ldr	r3, [pc, #208]	; (800e9f4 <ACC_Common+0x2e4>)
 800e924:	801a      	strh	r2, [r3, #0]
        }
        // Calculate average, shift Z down by acc_1G and store values in EEPROM at end of calibration
        if (AccInflightCalibrationSavetoEEProm) {      // the copter is landed, disarmed and the combo has been done again
 800e926:	4b3c      	ldr	r3, [pc, #240]	; (800ea18 <ACC_Common+0x308>)
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d036      	beq.n	800e99c <ACC_Common+0x28c>
            AccInflightCalibrationSavetoEEProm = false;
 800e92e:	4b3a      	ldr	r3, [pc, #232]	; (800ea18 <ACC_Common+0x308>)
 800e930:	2200      	movs	r2, #0
 800e932:	701a      	strb	r2, [r3, #0]
            mcfg.accZero[ROLL] = b[ROLL] / 50;
 800e934:	4b30      	ldr	r3, [pc, #192]	; (800e9f8 <ACC_Common+0x2e8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a38      	ldr	r2, [pc, #224]	; (800ea1c <ACC_Common+0x30c>)
 800e93a:	fb82 1203 	smull	r1, r2, r2, r3
 800e93e:	1112      	asrs	r2, r2, #4
 800e940:	17db      	asrs	r3, r3, #31
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	b21a      	sxth	r2, r3
 800e946:	4b2e      	ldr	r3, [pc, #184]	; (800ea00 <ACC_Common+0x2f0>)
 800e948:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
            mcfg.accZero[PITCH] = b[PITCH] / 50;
 800e94c:	4b2a      	ldr	r3, [pc, #168]	; (800e9f8 <ACC_Common+0x2e8>)
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	4a32      	ldr	r2, [pc, #200]	; (800ea1c <ACC_Common+0x30c>)
 800e952:	fb82 1203 	smull	r1, r2, r2, r3
 800e956:	1112      	asrs	r2, r2, #4
 800e958:	17db      	asrs	r3, r3, #31
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	b21a      	sxth	r2, r3
 800e95e:	4b28      	ldr	r3, [pc, #160]	; (800ea00 <ACC_Common+0x2f0>)
 800e960:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
            mcfg.accZero[YAW] = b[YAW] / 50 - sensor_set.acc.acc_1G;    // for nunchuk 200=1G
 800e964:	4b24      	ldr	r3, [pc, #144]	; (800e9f8 <ACC_Common+0x2e8>)
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	4a2c      	ldr	r2, [pc, #176]	; (800ea1c <ACC_Common+0x30c>)
 800e96a:	fb82 1203 	smull	r1, r2, r2, r3
 800e96e:	1112      	asrs	r2, r2, #4
 800e970:	17db      	asrs	r3, r3, #31
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	b29a      	uxth	r2, r3
 800e976:	4b2a      	ldr	r3, [pc, #168]	; (800ea20 <ACC_Common+0x310>)
 800e978:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	b29b      	uxth	r3, r3
 800e980:	b21a      	sxth	r2, r3
 800e982:	4b1f      	ldr	r3, [pc, #124]	; (800ea00 <ACC_Common+0x2f0>)
 800e984:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
            cfg.angleTrim[ROLL] = 0;
 800e988:	4b22      	ldr	r3, [pc, #136]	; (800ea14 <ACC_Common+0x304>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	859a      	strh	r2, [r3, #44]	; 0x2c
            cfg.angleTrim[PITCH] = 0;
 800e98e:	4b21      	ldr	r3, [pc, #132]	; (800ea14 <ACC_Common+0x304>)
 800e990:	2200      	movs	r2, #0
 800e992:	85da      	strh	r2, [r3, #46]	; 0x2e
            writeEEPROM(1, true);          // write accZero in EEPROM
 800e994:	2101      	movs	r1, #1
 800e996:	2001      	movs	r0, #1
 800e998:	f7f7 feb8 	bl	800670c <writeEEPROM>
        }
    }

    accADC[ROLL] -= mcfg.accZero[ROLL];
 800e99c:	4b17      	ldr	r3, [pc, #92]	; (800e9fc <ACC_Common+0x2ec>)
 800e99e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	4b16      	ldr	r3, [pc, #88]	; (800ea00 <ACC_Common+0x2f0>)
 800e9a6:	f9b3 316a 	ldrsh.w	r3, [r3, #362]	; 0x16a
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	1ad3      	subs	r3, r2, r3
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	b21a      	sxth	r2, r3
 800e9b2:	4b12      	ldr	r3, [pc, #72]	; (800e9fc <ACC_Common+0x2ec>)
 800e9b4:	801a      	strh	r2, [r3, #0]
    accADC[PITCH] -= mcfg.accZero[PITCH];
 800e9b6:	4b11      	ldr	r3, [pc, #68]	; (800e9fc <ACC_Common+0x2ec>)
 800e9b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	4b10      	ldr	r3, [pc, #64]	; (800ea00 <ACC_Common+0x2f0>)
 800e9c0:	f9b3 316c 	ldrsh.w	r3, [r3, #364]	; 0x16c
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	b21a      	sxth	r2, r3
 800e9cc:	4b0b      	ldr	r3, [pc, #44]	; (800e9fc <ACC_Common+0x2ec>)
 800e9ce:	805a      	strh	r2, [r3, #2]
    accADC[YAW] -= mcfg.accZero[YAW];
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <ACC_Common+0x2ec>)
 800e9d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	4b09      	ldr	r3, [pc, #36]	; (800ea00 <ACC_Common+0x2f0>)
 800e9da:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	; 0x16e
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	b21a      	sxth	r2, r3
 800e9e6:	4b05      	ldr	r3, [pc, #20]	; (800e9fc <ACC_Common+0x2ec>)
 800e9e8:	809a      	strh	r2, [r3, #4]
}
 800e9ea:	bf00      	nop
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20001850 	.word	0x20001850
 800e9f8:	20001a14 	.word	0x20001a14
 800e9fc:	200013d8 	.word	0x200013d8
 800ea00:	20000848 	.word	0x20000848
 800ea04:	2000184f 	.word	0x2000184f
 800ea08:	2000184d 	.word	0x2000184d
 800ea0c:	20001a08 	.word	0x20001a08
 800ea10:	20001a10 	.word	0x20001a10
 800ea14:	20000db4 	.word	0x20000db4
 800ea18:	2000184e 	.word	0x2000184e
 800ea1c:	51eb851f 	.word	0x51eb851f
 800ea20:	20000060 	.word	0x20000060

0800ea24 <ACC_getADC>:

BOOL ACC_getADC(void)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	af00      	add	r7, sp, #0
    if (sensor_set.acc.read(&sensor_set, accADC)) {
 800ea28:	4b07      	ldr	r3, [pc, #28]	; (800ea48 <ACC_getADC+0x24>)
 800ea2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ea2e:	4907      	ldr	r1, [pc, #28]	; (800ea4c <ACC_getADC+0x28>)
 800ea30:	4805      	ldr	r0, [pc, #20]	; (800ea48 <ACC_getADC+0x24>)
 800ea32:	4798      	blx	r3
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d003      	beq.n	800ea42 <ACC_getADC+0x1e>
    	ACC_Common();
 800ea3a:	f7ff fe69 	bl	800e710 <ACC_Common>
    	return TRUE;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e000      	b.n	800ea44 <ACC_getADC+0x20>
    }
	return FALSE;
 800ea42:	2300      	movs	r3, #0
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	20000060 	.word	0x20000060
 800ea4c:	200013d8 	.word	0x200013d8

0800ea50 <Baro_Common>:

#ifdef BARO
static void Baro_Common(void)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
    static int32_t baroHistTab[BARO_TAB_SIZE_MAX];
    static int baroHistIdx = 0;
    int indexplus1;

    indexplus1 = (baroHistIdx + 1);
 800ea56:	4b18      	ldr	r3, [pc, #96]	; (800eab8 <Baro_Common+0x68>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	607b      	str	r3, [r7, #4]
    if (indexplus1 >= cfg.baro_tab_size)
 800ea5e:	4b17      	ldr	r3, [pc, #92]	; (800eabc <Baro_Common+0x6c>)
 800ea60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea64:	461a      	mov	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	db01      	blt.n	800ea70 <Baro_Common+0x20>
        indexplus1 = 0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	607b      	str	r3, [r7, #4]
    baroHistTab[baroHistIdx] = baroPressure;
 800ea70:	4b11      	ldr	r3, [pc, #68]	; (800eab8 <Baro_Common+0x68>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a12      	ldr	r2, [pc, #72]	; (800eac0 <Baro_Common+0x70>)
 800ea76:	6812      	ldr	r2, [r2, #0]
 800ea78:	4912      	ldr	r1, [pc, #72]	; (800eac4 <Baro_Common+0x74>)
 800ea7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    baroPressureSum += baroHistTab[baroHistIdx];
 800ea7e:	4b0e      	ldr	r3, [pc, #56]	; (800eab8 <Baro_Common+0x68>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	4a10      	ldr	r2, [pc, #64]	; (800eac4 <Baro_Common+0x74>)
 800ea84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4b0f      	ldr	r3, [pc, #60]	; (800eac8 <Baro_Common+0x78>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4413      	add	r3, r2
 800ea90:	4a0d      	ldr	r2, [pc, #52]	; (800eac8 <Baro_Common+0x78>)
 800ea92:	6013      	str	r3, [r2, #0]
    baroPressureSum -= baroHistTab[indexplus1];
 800ea94:	4b0c      	ldr	r3, [pc, #48]	; (800eac8 <Baro_Common+0x78>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	490a      	ldr	r1, [pc, #40]	; (800eac4 <Baro_Common+0x74>)
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eaa0:	1a9b      	subs	r3, r3, r2
 800eaa2:	4a09      	ldr	r2, [pc, #36]	; (800eac8 <Baro_Common+0x78>)
 800eaa4:	6013      	str	r3, [r2, #0]
    baroHistIdx = indexplus1;
 800eaa6:	4a04      	ldr	r2, [pc, #16]	; (800eab8 <Baro_Common+0x68>)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6013      	str	r3, [r2, #0]
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr
 800eab8:	20001a20 	.word	0x20001a20
 800eabc:	20000db4 	.word	0x20000db4
 800eac0:	200019ec 	.word	0x200019ec
 800eac4:	20001a24 	.word	0x20001a24
 800eac8:	20001408 	.word	0x20001408

0800eacc <evtBaroRead>:

static void evtBaroRead(float pressure, float temperature)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	ed87 0a01 	vstr	s0, [r7, #4]
 800ead6:	edc7 0a00 	vstr	s1, [r7]
    baroPressure = pressure * 100;
 800eada:	edd7 7a01 	vldr	s15, [r7, #4]
 800eade:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800eb24 <evtBaroRead+0x58>
 800eae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eaea:	ee17 2a90 	vmov	r2, s15
 800eaee:	4b0e      	ldr	r3, [pc, #56]	; (800eb28 <evtBaroRead+0x5c>)
 800eaf0:	601a      	str	r2, [r3, #0]
    baroTemperature = temperature * 100;
 800eaf2:	edd7 7a00 	vldr	s15, [r7]
 800eaf6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800eb24 <evtBaroRead+0x58>
 800eafa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eafe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eb02:	ee17 2a90 	vmov	r2, s15
 800eb06:	4b09      	ldr	r3, [pc, #36]	; (800eb2c <evtBaroRead+0x60>)
 800eb08:	601a      	str	r2, [r3, #0]
    Baro_Common();
 800eb0a:	f7ff ffa1 	bl	800ea50 <Baro_Common>
    pifTask_SetTrigger(sensor_set.baro.p_task);
 800eb0e:	4b08      	ldr	r3, [pc, #32]	; (800eb30 <evtBaroRead+0x64>)
 800eb10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800eb14:	4618      	mov	r0, r3
 800eb16:	f005 fcfb 	bl	8014510 <pifTask_SetTrigger>
}
 800eb1a:	bf00      	nop
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	42c80000 	.word	0x42c80000
 800eb28:	200019ec 	.word	0x200019ec
 800eb2c:	200019f0 	.word	0x200019f0
 800eb30:	20000060 	.word	0x20000060

0800eb34 <devClear>:
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;

static void devClear(stdev_t *dev)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
    dev->m_n = 0;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	611a      	str	r2, [r3, #16]
}
 800eb42:	bf00      	nop
 800eb44:	370c      	adds	r7, #12
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <devPush>:

static void devPush(stdev_t *dev, float x)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b083      	sub	sp, #12
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	ed87 0a00 	vstr	s0, [r7]
    dev->m_n++;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	1c5a      	adds	r2, r3, #1
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	611a      	str	r2, [r3, #16]
    if (dev->m_n == 1) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d10b      	bne.n	800eb84 <devPush+0x36>
        dev->m_oldM = dev->m_newM = x;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	605a      	str	r2, [r3, #4]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	685a      	ldr	r2, [r3, #4]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	601a      	str	r2, [r3, #0]
        dev->m_oldS = 0.0f;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f04f 0200 	mov.w	r2, #0
 800eb80:	609a      	str	r2, [r3, #8]
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
        dev->m_oldM = dev->m_newM;
        dev->m_oldS = dev->m_newS;
    }
}
 800eb82:	e036      	b.n	800ebf2 <devPush+0xa4>
        dev->m_newM = dev->m_oldM + (x - dev->m_oldM) / dev->m_n;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	ed93 7a00 	vldr	s14, [r3]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	edd3 7a00 	vldr	s15, [r3]
 800eb90:	edd7 6a00 	vldr	s13, [r7]
 800eb94:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	691b      	ldr	r3, [r3, #16]
 800eb9c:	ee07 3a90 	vmov	s15, r3
 800eba0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eba4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800eba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	edc3 7a01 	vstr	s15, [r3, #4]
        dev->m_newS = dev->m_oldS + (x - dev->m_oldM) * (x - dev->m_newM);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	ed93 7a02 	vldr	s14, [r3, #8]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	edd3 7a00 	vldr	s15, [r3]
 800ebbe:	edd7 6a00 	vldr	s13, [r7]
 800ebc2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ebcc:	ed97 6a00 	vldr	s12, [r7]
 800ebd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ebd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	edc3 7a03 	vstr	s15, [r3, #12]
        dev->m_oldM = dev->m_newM;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	601a      	str	r2, [r3, #0]
        dev->m_oldS = dev->m_newS;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	68da      	ldr	r2, [r3, #12]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	609a      	str	r2, [r3, #8]
}
 800ebf2:	bf00      	nop
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <devVariance>:

static float devVariance(stdev_t *dev)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
    return ((dev->m_n > 1) ? dev->m_newS / (dev->m_n - 1) : 0.0f);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	691b      	ldr	r3, [r3, #16]
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	dd0c      	ble.n	800ec2a <devVariance+0x2a>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	ed93 7a03 	vldr	s14, [r3, #12]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	ee07 3a90 	vmov	s15, r3
 800ec20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ec28:	e001      	b.n	800ec2e <devVariance+0x2e>
 800ec2a:	eddf 6a05 	vldr	s13, [pc, #20]	; 800ec40 <devVariance+0x40>
 800ec2e:	eef0 7a66 	vmov.f32	s15, s13
}
 800ec32:	eeb0 0a67 	vmov.f32	s0, s15
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	00000000 	.word	0x00000000

0800ec44 <devStandardDeviation>:

static float devStandardDeviation(stdev_t *dev)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
    return sqrtf(devVariance(dev));
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff ffd7 	bl	800ec00 <devVariance>
 800ec52:	eef0 7a40 	vmov.f32	s15, s0
 800ec56:	eeb0 0a67 	vmov.f32	s0, s15
 800ec5a:	f014 fef5 	bl	8023a48 <sqrtf>
 800ec5e:	eef0 7a40 	vmov.f32	s15, s0
}
 800ec62:	eeb0 0a67 	vmov.f32	s0, s15
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <GYRO_Common>:

static void GYRO_Common(void)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
    int axis;
    static int32_t g[3];
    static stdev_t var[3];

    if (calibratingG > 0) {
 800ec72:	4b62      	ldr	r3, [pc, #392]	; (800edfc <GYRO_Common+0x190>)
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 80a1 	beq.w	800edbe <GYRO_Common+0x152>
        for (axis = 0; axis < 3; axis++) {
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	607b      	str	r3, [r7, #4]
 800ec80:	e093      	b.n	800edaa <GYRO_Common+0x13e>
            // Reset g[axis] at start of calibration
            if (calibratingG == CALIBRATING_GYRO_CYCLES) {
 800ec82:	4b5e      	ldr	r3, [pc, #376]	; (800edfc <GYRO_Common+0x190>)
 800ec84:	881b      	ldrh	r3, [r3, #0]
 800ec86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec8a:	d10e      	bne.n	800ecaa <GYRO_Common+0x3e>
                g[axis] = 0;
 800ec8c:	4a5c      	ldr	r2, [pc, #368]	; (800ee00 <GYRO_Common+0x194>)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2100      	movs	r1, #0
 800ec92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                devClear(&var[axis]);
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	4413      	add	r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	4a58      	ldr	r2, [pc, #352]	; (800ee04 <GYRO_Common+0x198>)
 800eca2:	4413      	add	r3, r2
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff ff45 	bl	800eb34 <devClear>
            }
            // Sum up 1000 readings
            g[axis] += gyroADC[axis];
 800ecaa:	4a55      	ldr	r2, [pc, #340]	; (800ee00 <GYRO_Common+0x194>)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecb2:	4955      	ldr	r1, [pc, #340]	; (800ee08 <GYRO_Common+0x19c>)
 800ecb4:	687a      	ldr	r2, [r7, #4]
 800ecb6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800ecba:	441a      	add	r2, r3
 800ecbc:	4950      	ldr	r1, [pc, #320]	; (800ee00 <GYRO_Common+0x194>)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            devPush(&var[axis], (float)gyroADC[axis]);
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	4413      	add	r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4a4d      	ldr	r2, [pc, #308]	; (800ee04 <GYRO_Common+0x198>)
 800ecd0:	441a      	add	r2, r3
 800ecd2:	494d      	ldr	r1, [pc, #308]	; (800ee08 <GYRO_Common+0x19c>)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ecda:	ee07 3a90 	vmov	s15, r3
 800ecde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ece2:	eeb0 0a67 	vmov.f32	s0, s15
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7ff ff31 	bl	800eb4e <devPush>
            // Clear global variables for next reading
            gyroADC[axis] = 0;
 800ecec:	4a46      	ldr	r2, [pc, #280]	; (800ee08 <GYRO_Common+0x19c>)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            gyroZero[axis] = 0;
 800ecf6:	4a45      	ldr	r2, [pc, #276]	; (800ee0c <GYRO_Common+0x1a0>)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            if (calibratingG == 1) {
 800ed00:	4b3e      	ldr	r3, [pc, #248]	; (800edfc <GYRO_Common+0x190>)
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d14d      	bne.n	800eda4 <GYRO_Common+0x138>
                float dev = devStandardDeviation(&var[axis]);
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4413      	add	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4a3c      	ldr	r2, [pc, #240]	; (800ee04 <GYRO_Common+0x198>)
 800ed14:	4413      	add	r3, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7ff ff94 	bl	800ec44 <devStandardDeviation>
 800ed1c:	ed87 0a00 	vstr	s0, [r7]
                // check deviation and startover if idiot was moving the model
                if (mcfg.moron_threshold && dev > mcfg.moron_threshold) {
 800ed20:	4b3b      	ldr	r3, [pc, #236]	; (800ee10 <GYRO_Common+0x1a4>)
 800ed22:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d026      	beq.n	800ed78 <GYRO_Common+0x10c>
 800ed2a:	4b39      	ldr	r3, [pc, #228]	; (800ee10 <GYRO_Common+0x1a4>)
 800ed2c:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800ed30:	ee07 3a90 	vmov	s15, r3
 800ed34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed38:	ed97 7a00 	vldr	s14, [r7]
 800ed3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	dd18      	ble.n	800ed78 <GYRO_Common+0x10c>
#ifndef __PIF_NO_LOG__
                    pifLog_Printf(LT_INFO, "Gyro Calib[%u]: %f > %d", axis, dev, mcfg.moron_threshold);
#endif
                    calibratingG = CALIBRATING_GYRO_CYCLES;
 800ed46:	4b2d      	ldr	r3, [pc, #180]	; (800edfc <GYRO_Common+0x190>)
 800ed48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed4c:	801a      	strh	r2, [r3, #0]
                    devClear(&var[0]);
 800ed4e:	482d      	ldr	r0, [pc, #180]	; (800ee04 <GYRO_Common+0x198>)
 800ed50:	f7ff fef0 	bl	800eb34 <devClear>
                    devClear(&var[1]);
 800ed54:	482f      	ldr	r0, [pc, #188]	; (800ee14 <GYRO_Common+0x1a8>)
 800ed56:	f7ff feed 	bl	800eb34 <devClear>
                    devClear(&var[2]);
 800ed5a:	482f      	ldr	r0, [pc, #188]	; (800ee18 <GYRO_Common+0x1ac>)
 800ed5c:	f7ff feea 	bl	800eb34 <devClear>
                    g[0] = g[1] = g[2] = 0;
 800ed60:	4b27      	ldr	r3, [pc, #156]	; (800ee00 <GYRO_Common+0x194>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	609a      	str	r2, [r3, #8]
 800ed66:	4b26      	ldr	r3, [pc, #152]	; (800ee00 <GYRO_Common+0x194>)
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	4a25      	ldr	r2, [pc, #148]	; (800ee00 <GYRO_Common+0x194>)
 800ed6c:	6053      	str	r3, [r2, #4]
 800ed6e:	4b24      	ldr	r3, [pc, #144]	; (800ee00 <GYRO_Common+0x194>)
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	4a23      	ldr	r2, [pc, #140]	; (800ee00 <GYRO_Common+0x194>)
 800ed74:	6013      	str	r3, [r2, #0]
                    continue;
 800ed76:	e015      	b.n	800eda4 <GYRO_Common+0x138>
                }
                gyroZero[axis] = (g[axis] + (CALIBRATING_GYRO_CYCLES / 2)) / CALIBRATING_GYRO_CYCLES;
 800ed78:	4a21      	ldr	r2, [pc, #132]	; (800ee00 <GYRO_Common+0x194>)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ed84:	4a25      	ldr	r2, [pc, #148]	; (800ee1c <GYRO_Common+0x1b0>)
 800ed86:	fb82 1203 	smull	r1, r2, r2, r3
 800ed8a:	1192      	asrs	r2, r2, #6
 800ed8c:	17db      	asrs	r3, r3, #31
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	b219      	sxth	r1, r3
 800ed92:	4a1e      	ldr	r2, [pc, #120]	; (800ee0c <GYRO_Common+0x1a0>)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                blinkLED(10, 15, 1);
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	210f      	movs	r1, #15
 800ed9e:	200a      	movs	r0, #10
 800eda0:	f7fd f8aa 	bl	800bef8 <blinkLED>
        for (axis = 0; axis < 3; axis++) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	3301      	adds	r3, #1
 800eda8:	607b      	str	r3, [r7, #4]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b02      	cmp	r3, #2
 800edae:	f77f af68 	ble.w	800ec82 <GYRO_Common+0x16>
            }
        }
        calibratingG--;
 800edb2:	4b12      	ldr	r3, [pc, #72]	; (800edfc <GYRO_Common+0x190>)
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	b29a      	uxth	r2, r3
 800edba:	4b10      	ldr	r3, [pc, #64]	; (800edfc <GYRO_Common+0x190>)
 800edbc:	801a      	strh	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
        if (!calibratingG) pifLog_Printf(LT_INFO, "Gyro Zero: %d %d %d", gyroZero[X], gyroZero[Y], gyroZero[Z]);
#endif
    }
    for (axis = 0; axis < 3; axis++)
 800edbe:	2300      	movs	r3, #0
 800edc0:	607b      	str	r3, [r7, #4]
 800edc2:	e013      	b.n	800edec <GYRO_Common+0x180>
        gyroADC[axis] -= gyroZero[axis];
 800edc4:	4a10      	ldr	r2, [pc, #64]	; (800ee08 <GYRO_Common+0x19c>)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800edcc:	b29a      	uxth	r2, r3
 800edce:	490f      	ldr	r1, [pc, #60]	; (800ee0c <GYRO_Common+0x1a0>)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	b29b      	uxth	r3, r3
 800eddc:	b219      	sxth	r1, r3
 800edde:	4a0a      	ldr	r2, [pc, #40]	; (800ee08 <GYRO_Common+0x19c>)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (axis = 0; axis < 3; axis++)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	3301      	adds	r3, #1
 800edea:	607b      	str	r3, [r7, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	dde8      	ble.n	800edc4 <GYRO_Common+0x158>
}
 800edf2:	bf00      	nop
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	200019e4 	.word	0x200019e4
 800ee00:	20001ae4 	.word	0x20001ae4
 800ee04:	20001af0 	.word	0x20001af0
 800ee08:	200013d0 	.word	0x200013d0
 800ee0c:	20001450 	.word	0x20001450
 800ee10:	20000848 	.word	0x20000848
 800ee14:	20001b04 	.word	0x20001b04
 800ee18:	20001b18 	.word	0x20001b18
 800ee1c:	10624dd3 	.word	0x10624dd3

0800ee20 <Gyro_getADC>:

BOOL Gyro_getADC(void)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	af00      	add	r7, sp, #0
    // range: +/- 8192; +/- 2000 deg/sec
    if (sensor_set.gyro.read(&sensor_set, gyroADC)) {
 800ee24:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <Gyro_getADC+0x24>)
 800ee26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee2a:	4907      	ldr	r1, [pc, #28]	; (800ee48 <Gyro_getADC+0x28>)
 800ee2c:	4805      	ldr	r0, [pc, #20]	; (800ee44 <Gyro_getADC+0x24>)
 800ee2e:	4798      	blx	r3
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d003      	beq.n	800ee3e <Gyro_getADC+0x1e>
    	GYRO_Common();
 800ee36:	f7ff ff19 	bl	800ec6c <GYRO_Common>
    	return TRUE;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e000      	b.n	800ee40 <Gyro_getADC+0x20>
    }
    return FALSE;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	20000060 	.word	0x20000060
 800ee48:	200013d0 	.word	0x200013d0

0800ee4c <Mag_init>:

#ifdef MAG
static uint8_t magInit = 0;

void Mag_init(void)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	af00      	add	r7, sp, #0
    // initialize and calibration. turn on led during mag calibration (calibration routine blinks it)
    actLed1State(ON);
 800ee50:	2001      	movs	r0, #1
 800ee52:	f7f3 f93d 	bl	80020d0 <actLed1State>
    if (!sensor_set.mag.init(&sensor_set, mcfg.gyro_align)) {
 800ee56:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <Mag_init+0x2c>)
 800ee58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ee5c:	4a07      	ldr	r2, [pc, #28]	; (800ee7c <Mag_init+0x30>)
 800ee5e:	f892 2153 	ldrb.w	r2, [r2, #339]	; 0x153
 800ee62:	4611      	mov	r1, r2
 800ee64:	4804      	ldr	r0, [pc, #16]	; (800ee78 <Mag_init+0x2c>)
 800ee66:	4798      	blx	r3
#ifndef __PIF_NO_LOG__
    	pifLog_Printf(LT_INFO, "Mag Error:%d", pif_error);
#endif
    }
    actLed1State(OFF);
 800ee68:	2000      	movs	r0, #0
 800ee6a:	f7f3 f931 	bl	80020d0 <actLed1State>
    magInit = 1;
 800ee6e:	4b04      	ldr	r3, [pc, #16]	; (800ee80 <Mag_init+0x34>)
 800ee70:	2201      	movs	r2, #1
 800ee72:	701a      	strb	r2, [r3, #0]
}
 800ee74:	bf00      	nop
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	20000060 	.word	0x20000060
 800ee7c:	20000848 	.word	0x20000848
 800ee80:	200019f4 	.word	0x200019f4

0800ee84 <taskMagGetAdc>:

uint16_t taskMagGetAdc(PifTask *p_task)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
    uint32_t axis;

    (void)p_task;

    // Read mag sensor
    if (!sensor_set.mag.read(&sensor_set, magADC)) {
 800ee8c:	4b65      	ldr	r3, [pc, #404]	; (800f024 <taskMagGetAdc+0x1a0>)
 800ee8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ee92:	4965      	ldr	r1, [pc, #404]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ee94:	4863      	ldr	r0, [pc, #396]	; (800f024 <taskMagGetAdc+0x1a0>)
 800ee96:	4798      	blx	r3
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d104      	bne.n	800eea8 <taskMagGetAdc+0x24>
    	pifTask_SetTrigger(p_task);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f005 fb36 	bl	8014510 <pifTask_SetTrigger>
    	return 0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	e0b8      	b.n	800f01a <taskMagGetAdc+0x196>
    }

    if (f.CALIBRATE_MAG) {
 800eea8:	4b60      	ldr	r3, [pc, #384]	; (800f02c <taskMagGetAdc+0x1a8>)
 800eeaa:	7b9b      	ldrb	r3, [r3, #14]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d027      	beq.n	800ef00 <taskMagGetAdc+0x7c>
        tCal = (*pif_act_timer1us)();
 800eeb0:	4b5f      	ldr	r3, [pc, #380]	; (800f030 <taskMagGetAdc+0x1ac>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4798      	blx	r3
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	4a5e      	ldr	r2, [pc, #376]	; (800f034 <taskMagGetAdc+0x1b0>)
 800eeba:	6013      	str	r3, [r2, #0]
        for (axis = 0; axis < 3; axis++) {
 800eebc:	2300      	movs	r3, #0
 800eebe:	60fb      	str	r3, [r7, #12]
 800eec0:	e018      	b.n	800eef4 <taskMagGetAdc+0x70>
            mcfg.magZero[axis] = 0;
 800eec2:	4a5d      	ldr	r2, [pc, #372]	; (800f038 <taskMagGetAdc+0x1b4>)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	33b8      	adds	r3, #184	; 0xb8
 800eec8:	2100      	movs	r1, #0
 800eeca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMin[axis] = magADC[axis];
 800eece:	4a56      	ldr	r2, [pc, #344]	; (800f028 <taskMagGetAdc+0x1a4>)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800eed6:	4a59      	ldr	r2, [pc, #356]	; (800f03c <taskMagGetAdc+0x1b8>)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            magZeroTempMax[axis] = magADC[axis];
 800eede:	4a52      	ldr	r2, [pc, #328]	; (800f028 <taskMagGetAdc+0x1a4>)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800eee6:	4a56      	ldr	r2, [pc, #344]	; (800f040 <taskMagGetAdc+0x1bc>)
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (axis = 0; axis < 3; axis++) {
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3301      	adds	r3, #1
 800eef2:	60fb      	str	r3, [r7, #12]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d9e3      	bls.n	800eec2 <taskMagGetAdc+0x3e>
        }
        f.CALIBRATE_MAG = 0;
 800eefa:	4b4c      	ldr	r3, [pc, #304]	; (800f02c <taskMagGetAdc+0x1a8>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	739a      	strb	r2, [r3, #14]
    }

    if (magInit) {              // we apply offset only once mag calibration is done
 800ef00:	4b50      	ldr	r3, [pc, #320]	; (800f044 <taskMagGetAdc+0x1c0>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d026      	beq.n	800ef56 <taskMagGetAdc+0xd2>
        magADC[X] -= mcfg.magZero[X];
 800ef08:	4b47      	ldr	r3, [pc, #284]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	4b49      	ldr	r3, [pc, #292]	; (800f038 <taskMagGetAdc+0x1b4>)
 800ef12:	f9b3 3170 	ldrsh.w	r3, [r3, #368]	; 0x170
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	b21a      	sxth	r2, r3
 800ef1e:	4b42      	ldr	r3, [pc, #264]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef20:	801a      	strh	r2, [r3, #0]
        magADC[Y] -= mcfg.magZero[Y];
 800ef22:	4b41      	ldr	r3, [pc, #260]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	4b43      	ldr	r3, [pc, #268]	; (800f038 <taskMagGetAdc+0x1b4>)
 800ef2c:	f9b3 3172 	ldrsh.w	r3, [r3, #370]	; 0x172
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	1ad3      	subs	r3, r2, r3
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	b21a      	sxth	r2, r3
 800ef38:	4b3b      	ldr	r3, [pc, #236]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef3a:	805a      	strh	r2, [r3, #2]
        magADC[Z] -= mcfg.magZero[Z];
 800ef3c:	4b3a      	ldr	r3, [pc, #232]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	4b3c      	ldr	r3, [pc, #240]	; (800f038 <taskMagGetAdc+0x1b4>)
 800ef46:	f9b3 3174 	ldrsh.w	r3, [r3, #372]	; 0x174
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	b21a      	sxth	r2, r3
 800ef52:	4b35      	ldr	r3, [pc, #212]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef54:	809a      	strh	r2, [r3, #4]
    }

    if (tCal != 0) {
 800ef56:	4b37      	ldr	r3, [pc, #220]	; (800f034 <taskMagGetAdc+0x1b0>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d05c      	beq.n	800f018 <taskMagGetAdc+0x194>
        if (((*pif_act_timer1us)() - tCal) < 30000000) {    // 30s: you have 30s to turn the multi in all directions
 800ef5e:	4b34      	ldr	r3, [pc, #208]	; (800f030 <taskMagGetAdc+0x1ac>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4798      	blx	r3
 800ef64:	4602      	mov	r2, r0
 800ef66:	4b33      	ldr	r3, [pc, #204]	; (800f034 <taskMagGetAdc+0x1b0>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	4a36      	ldr	r2, [pc, #216]	; (800f048 <taskMagGetAdc+0x1c4>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d82f      	bhi.n	800efd2 <taskMagGetAdc+0x14e>
            actLed0Toggle();
 800ef72:	f7f3 f897 	bl	80020a4 <actLed0Toggle>
            for (axis = 0; axis < 3; axis++) {
 800ef76:	2300      	movs	r3, #0
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e026      	b.n	800efca <taskMagGetAdc+0x146>
                if (magADC[axis] < magZeroTempMin[axis])
 800ef7c:	4a2a      	ldr	r2, [pc, #168]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800ef84:	492d      	ldr	r1, [pc, #180]	; (800f03c <taskMagGetAdc+0x1b8>)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	da07      	bge.n	800efa0 <taskMagGetAdc+0x11c>
                    magZeroTempMin[axis] = magADC[axis];
 800ef90:	4a25      	ldr	r2, [pc, #148]	; (800f028 <taskMagGetAdc+0x1a4>)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800ef98:	4a28      	ldr	r2, [pc, #160]	; (800f03c <taskMagGetAdc+0x1b8>)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (magADC[axis] > magZeroTempMax[axis])
 800efa0:	4a21      	ldr	r2, [pc, #132]	; (800f028 <taskMagGetAdc+0x1a4>)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800efa8:	4925      	ldr	r1, [pc, #148]	; (800f040 <taskMagGetAdc+0x1bc>)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	dd07      	ble.n	800efc4 <taskMagGetAdc+0x140>
                    magZeroTempMax[axis] = magADC[axis];
 800efb4:	4a1c      	ldr	r2, [pc, #112]	; (800f028 <taskMagGetAdc+0x1a4>)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800efbc:	4a20      	ldr	r2, [pc, #128]	; (800f040 <taskMagGetAdc+0x1bc>)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++) {
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3301      	adds	r3, #1
 800efc8:	60fb      	str	r3, [r7, #12]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d9d5      	bls.n	800ef7c <taskMagGetAdc+0xf8>
 800efd0:	e022      	b.n	800f018 <taskMagGetAdc+0x194>
            }
        } else {
            tCal = 0;
 800efd2:	4b18      	ldr	r3, [pc, #96]	; (800f034 <taskMagGetAdc+0x1b0>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]
            for (axis = 0; axis < 3; axis++)
 800efd8:	2300      	movs	r3, #0
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e015      	b.n	800f00a <taskMagGetAdc+0x186>
                mcfg.magZero[axis] = (magZeroTempMin[axis] + magZeroTempMax[axis]) / 2; // Calculate offsets
 800efde:	4a17      	ldr	r2, [pc, #92]	; (800f03c <taskMagGetAdc+0x1b8>)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800efe6:	4619      	mov	r1, r3
 800efe8:	4a15      	ldr	r2, [pc, #84]	; (800f040 <taskMagGetAdc+0x1bc>)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800eff0:	440b      	add	r3, r1
 800eff2:	0fda      	lsrs	r2, r3, #31
 800eff4:	4413      	add	r3, r2
 800eff6:	105b      	asrs	r3, r3, #1
 800eff8:	b219      	sxth	r1, r3
 800effa:	4a0f      	ldr	r2, [pc, #60]	; (800f038 <taskMagGetAdc+0x1b4>)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	33b8      	adds	r3, #184	; 0xb8
 800f000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (axis = 0; axis < 3; axis++)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	3301      	adds	r3, #1
 800f008:	60fb      	str	r3, [r7, #12]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d9e6      	bls.n	800efde <taskMagGetAdc+0x15a>
            writeEEPROM(1, true);
 800f010:	2101      	movs	r1, #1
 800f012:	2001      	movs	r0, #1
 800f014:	f7f7 fb7a 	bl	800670c <writeEEPROM>
        }
    }
    return 0;
 800f018:	2300      	movs	r3, #0
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	3710      	adds	r7, #16
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20000060 	.word	0x20000060
 800f028:	200013e8 	.word	0x200013e8
 800f02c:	200016b0 	.word	0x200016b0
 800f030:	20001d6c 	.word	0x20001d6c
 800f034:	20001b2c 	.word	0x20001b2c
 800f038:	20000848 	.word	0x20000848
 800f03c:	20001b30 	.word	0x20001b30
 800f040:	20001b38 	.word	0x20001b38
 800f044:	200019f4 	.word	0x200019f4
 800f048:	01c9c37f 	.word	0x01c9c37f

0800f04c <getSonarDistance>:
#ifdef SONAR

static PifNoiseFilter* p_sonar_noise_filter;

static float getSonarDistance(int32_t distance)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
	if (distance > 300)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f05a:	dd02      	ble.n	800f062 <getSonarDistance+0x16>
		distance = -1;
 800f05c:	f04f 33ff 	mov.w	r3, #4294967295
 800f060:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f062:	4a0d      	ldr	r2, [pc, #52]	; (800f098 <getSonarDistance+0x4c>)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f068:	4b0c      	ldr	r3, [pc, #48]	; (800f09c <getSonarDistance+0x50>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7f1 fa0d 	bl	800048c <__aeabi_i2d>
 800f072:	f04f 0200 	mov.w	r2, #0
 800f076:	4b0a      	ldr	r3, [pc, #40]	; (800f0a0 <getSonarDistance+0x54>)
 800f078:	f7f1 fb9c 	bl	80007b4 <__aeabi_ddiv>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	4610      	mov	r0, r2
 800f082:	4619      	mov	r1, r3
 800f084:	f7f1 fd4e 	bl	8000b24 <__aeabi_d2f>
 800f088:	4603      	mov	r3, r0
 800f08a:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f08e:	eeb0 0a67 	vmov.f32	s0, s15
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	2000002c 	.word	0x2000002c
 800f09c:	200019f0 	.word	0x200019f0
 800f0a0:	40590000 	.word	0x40590000

0800f0a4 <getSonarDistanceFilter>:

static float getSonarDistanceFilter(int32_t distance)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
	distance = *(int32_t*)pifNoiseFilter_Process(p_sonar_noise_filter, &distance);
 800f0ac:	4b15      	ldr	r3, [pc, #84]	; (800f104 <getSonarDistanceFilter+0x60>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	1d3a      	adds	r2, r7, #4
 800f0b2:	4611      	mov	r1, r2
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f006 f889 	bl	80151cc <pifNoiseFilter_Process>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	607b      	str	r3, [r7, #4]
	if (distance > 300)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f0c6:	dd02      	ble.n	800f0ce <getSonarDistanceFilter+0x2a>
		distance = -1;
 800f0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0cc:	607b      	str	r3, [r7, #4]
	sonarDistance = distance;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a0d      	ldr	r2, [pc, #52]	; (800f108 <getSonarDistanceFilter+0x64>)
 800f0d2:	6013      	str	r3, [r2, #0]

#ifdef BARO
	return baroTemperature / 100.0;
 800f0d4:	4b0d      	ldr	r3, [pc, #52]	; (800f10c <getSonarDistanceFilter+0x68>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7f1 f9d7 	bl	800048c <__aeabi_i2d>
 800f0de:	f04f 0200 	mov.w	r2, #0
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <getSonarDistanceFilter+0x6c>)
 800f0e4:	f7f1 fb66 	bl	80007b4 <__aeabi_ddiv>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	f7f1 fd18 	bl	8000b24 <__aeabi_d2f>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	ee07 3a90 	vmov	s15, r3
#else
	return 20.0;
#endif
}
 800f0fa:	eeb0 0a67 	vmov.f32	s0, s15
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	200019f8 	.word	0x200019f8
 800f108:	2000002c 	.word	0x2000002c
 800f10c:	200019f0 	.word	0x200019f0
 800f110:	40590000 	.word	0x40590000

0800f114 <Sonar_init>:

void Sonar_init(sonarInitFuncPtr sonarInit, sonar_filter_t filter)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b082      	sub	sp, #8
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
    static PifNoiseFilterInt32 noise_filter;

    // the repeat interval of trig signal should be greater than 60ms
    // to avoid interference between connective measurements.
	switch (filter) {
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	2b01      	cmp	r3, #1
 800f124:	d002      	beq.n	800f12c <Sonar_init+0x18>
 800f126:	2b02      	cmp	r3, #2
 800f128:	d00b      	beq.n	800f142 <Sonar_init+0x2e>
	        }
	    }
		break;

	default:
		break;
 800f12a:	e01e      	b.n	800f16a <Sonar_init+0x56>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 5)) {
 800f12c:	2105      	movs	r1, #5
 800f12e:	481e      	ldr	r0, [pc, #120]	; (800f1a8 <Sonar_init+0x94>)
 800f130:	f006 f9fc 	bl	801552c <pifNoiseFilterInt32_Init>
 800f134:	4603      	mov	r3, r0
 800f136:	2b00      	cmp	r3, #0
 800f138:	d014      	beq.n	800f164 <Sonar_init+0x50>
	        p_sonar_noise_filter = &noise_filter.parent;
 800f13a:	4b1c      	ldr	r3, [pc, #112]	; (800f1ac <Sonar_init+0x98>)
 800f13c:	4a1a      	ldr	r2, [pc, #104]	; (800f1a8 <Sonar_init+0x94>)
 800f13e:	601a      	str	r2, [r3, #0]
		break;
 800f140:	e010      	b.n	800f164 <Sonar_init+0x50>
	    if (pifNoiseFilterInt32_Init(&noise_filter, 7)) {
 800f142:	2107      	movs	r1, #7
 800f144:	4818      	ldr	r0, [pc, #96]	; (800f1a8 <Sonar_init+0x94>)
 800f146:	f006 f9f1 	bl	801552c <pifNoiseFilterInt32_Init>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00b      	beq.n	800f168 <Sonar_init+0x54>
	        if (pifNoiseFilterInt32_SetNoiseCancel(&noise_filter)) {
 800f150:	4815      	ldr	r0, [pc, #84]	; (800f1a8 <Sonar_init+0x94>)
 800f152:	f006 fa2b 	bl	80155ac <pifNoiseFilterInt32_SetNoiseCancel>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d005      	beq.n	800f168 <Sonar_init+0x54>
	            p_sonar_noise_filter = &noise_filter.parent;
 800f15c:	4b13      	ldr	r3, [pc, #76]	; (800f1ac <Sonar_init+0x98>)
 800f15e:	4a12      	ldr	r2, [pc, #72]	; (800f1a8 <Sonar_init+0x94>)
 800f160:	601a      	str	r2, [r3, #0]
		break;
 800f162:	e001      	b.n	800f168 <Sonar_init+0x54>
		break;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <Sonar_init+0x56>
		break;
 800f168:	bf00      	nop
	}
	if (p_sonar_noise_filter) {
 800f16a:	4b10      	ldr	r3, [pc, #64]	; (800f1ac <Sonar_init+0x98>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d007      	beq.n	800f182 <Sonar_init+0x6e>
		if (!(*sonarInit)(60, getSonarDistanceFilter)) return;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	490e      	ldr	r1, [pc, #56]	; (800f1b0 <Sonar_init+0x9c>)
 800f176:	203c      	movs	r0, #60	; 0x3c
 800f178:	4798      	blx	r3
 800f17a:	4603      	mov	r3, r0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <Sonar_init+0x7c>
 800f180:	e00f      	b.n	800f1a2 <Sonar_init+0x8e>
	}
	else {
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	490b      	ldr	r1, [pc, #44]	; (800f1b4 <Sonar_init+0xa0>)
 800f186:	203c      	movs	r0, #60	; 0x3c
 800f188:	4798      	blx	r3
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d007      	beq.n	800f1a0 <Sonar_init+0x8c>
	}
    sensorsSet(SENSOR_SONAR);
 800f190:	2010      	movs	r0, #16
 800f192:	f7f7 fe6b 	bl	8006e6c <sensorsSet>
    sonarDistance = -1;
 800f196:	4b08      	ldr	r3, [pc, #32]	; (800f1b8 <Sonar_init+0xa4>)
 800f198:	f04f 32ff 	mov.w	r2, #4294967295
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	e000      	b.n	800f1a2 <Sonar_init+0x8e>
		if (!(*sonarInit)(60, getSonarDistance)) return;
 800f1a0:	bf00      	nop
#ifndef __PIF_NO_LOG__
	pifLog_Print(LT_INFO, "Sonar init : success");
#endif
}
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	20001b40 	.word	0x20001b40
 800f1ac:	200019f8 	.word	0x200019f8
 800f1b0:	0800f0a5 	.word	0x0800f0a5
 800f1b4:	0800f04d 	.word	0x0800f04d
 800f1b8:	2000002c 	.word	0x2000002c

0800f1bc <_SerializeBoxNamesReply>:

static void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer);
static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer);

static void _SerializeBoxNamesReply(PifMsp* p_owner)
{
 800f1bc:	b590      	push	{r4, r7, lr}
 800f1be:	b085      	sub	sp, #20
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
    int i, idx;

    // in first run of the loop, we grab total size of junk to be sent
    // then come back and actually send it
    for (i = 0; i < numberBoxItems; i++) {
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	60fb      	str	r3, [r7, #12]
 800f1c8:	e023      	b.n	800f212 <_SerializeBoxNamesReply+0x56>
        idx = availableBoxes[i];
 800f1ca:	4a17      	ldr	r2, [pc, #92]	; (800f228 <_SerializeBoxNamesReply+0x6c>)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	60bb      	str	r3, [r7, #8]
       	pifMsp_AddAnswer(p_owner, (uint8_t*)boxes[idx].boxName, strlen(boxes[idx].boxName));
 800f1d4:	4915      	ldr	r1, [pc, #84]	; (800f22c <_SerializeBoxNamesReply+0x70>)
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	005b      	lsls	r3, r3, #1
 800f1dc:	4413      	add	r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	440b      	add	r3, r1
 800f1e2:	3304      	adds	r3, #4
 800f1e4:	681c      	ldr	r4, [r3, #0]
 800f1e6:	4911      	ldr	r1, [pc, #68]	; (800f22c <_SerializeBoxNamesReply+0x70>)
 800f1e8:	68ba      	ldr	r2, [r7, #8]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	005b      	lsls	r3, r3, #1
 800f1ee:	4413      	add	r3, r2
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	440b      	add	r3, r1
 800f1f4:	3304      	adds	r3, #4
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7f0 ffed 	bl	80001d8 <strlen>
 800f1fe:	4603      	mov	r3, r0
 800f200:	b29b      	uxth	r3, r3
 800f202:	461a      	mov	r2, r3
 800f204:	4621      	mov	r1, r4
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f008 fb82 	bl	8017910 <pifMsp_AddAnswer>
    for (i = 0; i < numberBoxItems; i++) {
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	3301      	adds	r3, #1
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	4b07      	ldr	r3, [pc, #28]	; (800f230 <_SerializeBoxNamesReply+0x74>)
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	4293      	cmp	r3, r2
 800f21c:	dbd5      	blt.n	800f1ca <_SerializeBoxNamesReply+0xe>
    }
}
 800f21e:	bf00      	nop
 800f220:	bf00      	nop
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	bd90      	pop	{r4, r7, pc}
 800f228:	20001b60 	.word	0x20001b60
 800f22c:	08029208 	.word	0x08029208
 800f230:	20001b79 	.word	0x20001b79

0800f234 <serialInit>:

void serialInit(uint8_t port, uint32_t baudrate, uint8_t flexport)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	4603      	mov	r3, r0
 800f23c:	6039      	str	r1, [r7, #0]
 800f23e:	71fb      	strb	r3, [r7, #7]
 800f240:	4613      	mov	r3, r2
 800f242:	71bb      	strb	r3, [r7, #6]
    int idx;

    core.mainport = uartOpen(port, baudrate, MODE_RXTX, 2);			// 10ms
 800f244:	79f8      	ldrb	r0, [r7, #7]
 800f246:	2302      	movs	r3, #2
 800f248:	2203      	movs	r2, #3
 800f24a:	6839      	ldr	r1, [r7, #0]
 800f24c:	f7f3 f856 	bl	80022fc <uartOpen>
 800f250:	4603      	mov	r3, r0
 800f252:	4a92      	ldr	r2, [pc, #584]	; (800f49c <serialInit+0x268>)
 800f254:	6013      	str	r3, [r2, #0]
    ports[0].port = core.mainport;
 800f256:	4b91      	ldr	r3, [pc, #580]	; (800f49c <serialInit+0x268>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a91      	ldr	r2, [pc, #580]	; (800f4a0 <serialInit+0x26c>)
 800f25c:	6013      	str	r3, [r2, #0]

    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f25e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f262:	4990      	ldr	r1, [pc, #576]	; (800f4a4 <serialInit+0x270>)
 800f264:	4890      	ldr	r0, [pc, #576]	; (800f4a8 <serialInit+0x274>)
 800f266:	f008 f94d 	bl	8017504 <pifMsp_Init>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 810e 	beq.w	800f48e <serialInit+0x25a>
    pifMsp_AttachEvtReceive(&ports[0].pif_msp, evtMspReceive, evtMspOtherPacket, core.mainport);
 800f272:	4b8a      	ldr	r3, [pc, #552]	; (800f49c <serialInit+0x268>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a8d      	ldr	r2, [pc, #564]	; (800f4ac <serialInit+0x278>)
 800f278:	498d      	ldr	r1, [pc, #564]	; (800f4b0 <serialInit+0x27c>)
 800f27a:	488b      	ldr	r0, [pc, #556]	; (800f4a8 <serialInit+0x274>)
 800f27c:	f008 f9ea 	bl	8017654 <pifMsp_AttachEvtReceive>
    pifMsp_AttachComm(&ports[0].pif_msp, &core.mainport->comm);
 800f280:	4b86      	ldr	r3, [pc, #536]	; (800f49c <serialInit+0x268>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3304      	adds	r3, #4
 800f286:	4619      	mov	r1, r3
 800f288:	4887      	ldr	r0, [pc, #540]	; (800f4a8 <serialInit+0x274>)
 800f28a:	f008 f9bd 	bl	8017608 <pifMsp_AttachComm>

    serialStartReceiveFunc(&core.mainport->comm);
 800f28e:	4b83      	ldr	r3, [pc, #524]	; (800f49c <serialInit+0x268>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	3304      	adds	r3, #4
 800f294:	4618      	mov	r0, r3
 800f296:	f7f3 f99d 	bl	80025d4 <serialStartReceiveFunc>

    // additional telemetry port available only if spektrum sat isn't already assigned there
    if (flexport) {
 800f29a:	79bb      	ldrb	r3, [r7, #6]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d02a      	beq.n	800f2f6 <serialInit+0xc2>
        core.flexport = uartOpen(flexport, baudrate, MODE_RXTX, 10);	// 10ms
 800f2a0:	79b8      	ldrb	r0, [r7, #6]
 800f2a2:	230a      	movs	r3, #10
 800f2a4:	2203      	movs	r2, #3
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	f7f3 f828 	bl	80022fc <uartOpen>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	4a7b      	ldr	r2, [pc, #492]	; (800f49c <serialInit+0x268>)
 800f2b0:	6053      	str	r3, [r2, #4]
        ports[1].port = core.flexport;
 800f2b2:	4b7a      	ldr	r3, [pc, #488]	; (800f49c <serialInit+0x268>)
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	4a7a      	ldr	r2, [pc, #488]	; (800f4a0 <serialInit+0x26c>)
 800f2b8:	65d3      	str	r3, [r2, #92]	; 0x5c

        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f2ba:	f240 1211 	movw	r2, #273	; 0x111
 800f2be:	4979      	ldr	r1, [pc, #484]	; (800f4a4 <serialInit+0x270>)
 800f2c0:	487c      	ldr	r0, [pc, #496]	; (800f4b4 <serialInit+0x280>)
 800f2c2:	f008 f91f 	bl	8017504 <pifMsp_Init>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f000 80e2 	beq.w	800f492 <serialInit+0x25e>
        pifMsp_AttachEvtReceive(&ports[1].pif_msp, evtMspReceive, evtMspOtherPacket, core.flexport);
 800f2ce:	4b73      	ldr	r3, [pc, #460]	; (800f49c <serialInit+0x268>)
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	4a76      	ldr	r2, [pc, #472]	; (800f4ac <serialInit+0x278>)
 800f2d4:	4976      	ldr	r1, [pc, #472]	; (800f4b0 <serialInit+0x27c>)
 800f2d6:	4877      	ldr	r0, [pc, #476]	; (800f4b4 <serialInit+0x280>)
 800f2d8:	f008 f9bc 	bl	8017654 <pifMsp_AttachEvtReceive>
        pifMsp_AttachComm(&ports[1].pif_msp, &core.flexport->comm);
 800f2dc:	4b6f      	ldr	r3, [pc, #444]	; (800f49c <serialInit+0x268>)
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4873      	ldr	r0, [pc, #460]	; (800f4b4 <serialInit+0x280>)
 800f2e6:	f008 f98f 	bl	8017608 <pifMsp_AttachComm>

        serialStartReceiveFunc(&core.flexport->comm);
 800f2ea:	4b6c      	ldr	r3, [pc, #432]	; (800f49c <serialInit+0x268>)
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	3304      	adds	r3, #4
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7f3 f96f 	bl	80025d4 <serialStartReceiveFunc>
    }

    // calculate used boxes based on features and fill availableBoxes[] array
    memset(availableBoxes, 0xFF, sizeof(availableBoxes));
 800f2f6:	2219      	movs	r2, #25
 800f2f8:	21ff      	movs	r1, #255	; 0xff
 800f2fa:	486f      	ldr	r0, [pc, #444]	; (800f4b8 <serialInit+0x284>)
 800f2fc:	f013 ff74 	bl	80231e8 <memset>

    idx = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	60fb      	str	r3, [r7, #12]
    availableBoxes[idx++] = BOXARM;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	60fa      	str	r2, [r7, #12]
 800f30a:	4a6b      	ldr	r2, [pc, #428]	; (800f4b8 <serialInit+0x284>)
 800f30c:	2100      	movs	r1, #0
 800f30e:	54d1      	strb	r1, [r2, r3]
    if (sensors(SENSOR_ACC)) {
 800f310:	2002      	movs	r0, #2
 800f312:	f7f7 fd95 	bl	8006e40 <sensors>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00b      	beq.n	800f334 <serialInit+0x100>
        availableBoxes[idx++] = BOXANGLE;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	1c5a      	adds	r2, r3, #1
 800f320:	60fa      	str	r2, [r7, #12]
 800f322:	4a65      	ldr	r2, [pc, #404]	; (800f4b8 <serialInit+0x284>)
 800f324:	2101      	movs	r1, #1
 800f326:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHORIZON;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	1c5a      	adds	r2, r3, #1
 800f32c:	60fa      	str	r2, [r7, #12]
 800f32e:	4a62      	ldr	r2, [pc, #392]	; (800f4b8 <serialInit+0x284>)
 800f330:	2102      	movs	r1, #2
 800f332:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_BARO)) {
 800f334:	2004      	movs	r0, #4
 800f336:	f7f7 fd83 	bl	8006e40 <sensors>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d012      	beq.n	800f366 <serialInit+0x132>
        availableBoxes[idx++] = BOXBARO;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	60fa      	str	r2, [r7, #12]
 800f346:	4a5c      	ldr	r2, [pc, #368]	; (800f4b8 <serialInit+0x284>)
 800f348:	2103      	movs	r1, #3
 800f34a:	54d1      	strb	r1, [r2, r3]
        if (feature(FEATURE_VARIO))
 800f34c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f350:	f7f7 fdbe 	bl	8006ed0 <feature>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d005      	beq.n	800f366 <serialInit+0x132>
            availableBoxes[idx++] = BOXVARIO;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	1c5a      	adds	r2, r3, #1
 800f35e:	60fa      	str	r2, [r7, #12]
 800f360:	4a55      	ldr	r2, [pc, #340]	; (800f4b8 <serialInit+0x284>)
 800f362:	2104      	movs	r1, #4
 800f364:	54d1      	strb	r1, [r2, r3]
    }
    if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 800f366:	2002      	movs	r0, #2
 800f368:	f7f7 fd6a 	bl	8006e40 <sensors>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d105      	bne.n	800f37e <serialInit+0x14a>
 800f372:	2008      	movs	r0, #8
 800f374:	f7f7 fd64 	bl	8006e40 <sensors>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d011      	beq.n	800f3a2 <serialInit+0x16e>
        availableBoxes[idx++] = BOXMAG;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	60fa      	str	r2, [r7, #12]
 800f384:	4a4c      	ldr	r2, [pc, #304]	; (800f4b8 <serialInit+0x284>)
 800f386:	2105      	movs	r1, #5
 800f388:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADFREE;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	1c5a      	adds	r2, r3, #1
 800f38e:	60fa      	str	r2, [r7, #12]
 800f390:	4a49      	ldr	r2, [pc, #292]	; (800f4b8 <serialInit+0x284>)
 800f392:	2106      	movs	r1, #6
 800f394:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXHEADADJ;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	60fa      	str	r2, [r7, #12]
 800f39c:	4a46      	ldr	r2, [pc, #280]	; (800f4b8 <serialInit+0x284>)
 800f39e:	2107      	movs	r1, #7
 800f3a0:	54d1      	strb	r1, [r2, r3]
    }
    if (feature(FEATURE_SERVO_TILT))
 800f3a2:	2020      	movs	r0, #32
 800f3a4:	f7f7 fd94 	bl	8006ed0 <feature>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d005      	beq.n	800f3ba <serialInit+0x186>
        availableBoxes[idx++] = BOXCAMSTAB;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	1c5a      	adds	r2, r3, #1
 800f3b2:	60fa      	str	r2, [r7, #12]
 800f3b4:	4a40      	ldr	r2, [pc, #256]	; (800f4b8 <serialInit+0x284>)
 800f3b6:	2108      	movs	r1, #8
 800f3b8:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_GPS)) {
 800f3ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f3be:	f7f7 fd87 	bl	8006ed0 <feature>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00b      	beq.n	800f3e0 <serialInit+0x1ac>
        availableBoxes[idx++] = BOXGPSHOME;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	1c5a      	adds	r2, r3, #1
 800f3cc:	60fa      	str	r2, [r7, #12]
 800f3ce:	4a3a      	ldr	r2, [pc, #232]	; (800f4b8 <serialInit+0x284>)
 800f3d0:	210a      	movs	r1, #10
 800f3d2:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGPSHOLD;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	1c5a      	adds	r2, r3, #1
 800f3d8:	60fa      	str	r2, [r7, #12]
 800f3da:	4a37      	ldr	r2, [pc, #220]	; (800f4b8 <serialInit+0x284>)
 800f3dc:	210b      	movs	r1, #11
 800f3de:	54d1      	strb	r1, [r2, r3]
    }
    if (f.FIXED_WING) {
 800f3e0:	4b36      	ldr	r3, [pc, #216]	; (800f4bc <serialInit+0x288>)
 800f3e2:	7c1b      	ldrb	r3, [r3, #16]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d00b      	beq.n	800f400 <serialInit+0x1cc>
        availableBoxes[idx++] = BOXPASSTHRU;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	60fa      	str	r2, [r7, #12]
 800f3ee:	4a32      	ldr	r2, [pc, #200]	; (800f4b8 <serialInit+0x284>)
 800f3f0:	210c      	movs	r1, #12
 800f3f2:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXGCRUISE;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	1c5a      	adds	r2, r3, #1
 800f3f8:	60fa      	str	r2, [r7, #12]
 800f3fa:	4a2f      	ldr	r2, [pc, #188]	; (800f4b8 <serialInit+0x284>)
 800f3fc:	2118      	movs	r1, #24
 800f3fe:	54d1      	strb	r1, [r2, r3]
    }
    availableBoxes[idx++] = BOXBEEPERON;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	1c5a      	adds	r2, r3, #1
 800f404:	60fa      	str	r2, [r7, #12]
 800f406:	4a2c      	ldr	r2, [pc, #176]	; (800f4b8 <serialInit+0x284>)
 800f408:	210d      	movs	r1, #13
 800f40a:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_INFLIGHT_ACC_CAL))
 800f40c:	2004      	movs	r0, #4
 800f40e:	f7f7 fd5f 	bl	8006ed0 <feature>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d005      	beq.n	800f424 <serialInit+0x1f0>
        availableBoxes[idx++] = BOXCALIB;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	60fa      	str	r2, [r7, #12]
 800f41e:	4a26      	ldr	r2, [pc, #152]	; (800f4b8 <serialInit+0x284>)
 800f420:	2111      	movs	r1, #17
 800f422:	54d1      	strb	r1, [r2, r3]
    availableBoxes[idx++] = BOXOSD;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	60fa      	str	r2, [r7, #12]
 800f42a:	4a23      	ldr	r2, [pc, #140]	; (800f4b8 <serialInit+0x284>)
 800f42c:	2113      	movs	r1, #19
 800f42e:	54d1      	strb	r1, [r2, r3]
    if (feature(FEATURE_TELEMETRY && mcfg.telemetry_switch))
 800f430:	4b23      	ldr	r3, [pc, #140]	; (800f4c0 <serialInit+0x28c>)
 800f432:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800f436:	2b00      	cmp	r3, #0
 800f438:	bf14      	ite	ne
 800f43a:	2301      	movne	r3, #1
 800f43c:	2300      	moveq	r3, #0
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	4618      	mov	r0, r3
 800f442:	f7f7 fd45 	bl	8006ed0 <feature>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d005      	beq.n	800f458 <serialInit+0x224>
        availableBoxes[idx++] = BOXTELEMETRY;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	60fa      	str	r2, [r7, #12]
 800f452:	4a19      	ldr	r2, [pc, #100]	; (800f4b8 <serialInit+0x284>)
 800f454:	2114      	movs	r1, #20
 800f456:	54d1      	strb	r1, [r2, r3]
    if (mcfg.mixerConfiguration == MULTITYPE_CUSTOM_PLANE) {
 800f458:	4b19      	ldr	r3, [pc, #100]	; (800f4c0 <serialInit+0x28c>)
 800f45a:	795b      	ldrb	r3, [r3, #5]
 800f45c:	2b18      	cmp	r3, #24
 800f45e:	d111      	bne.n	800f484 <serialInit+0x250>
        availableBoxes[idx++] = BOXSERVO1;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	1c5a      	adds	r2, r3, #1
 800f464:	60fa      	str	r2, [r7, #12]
 800f466:	4a14      	ldr	r2, [pc, #80]	; (800f4b8 <serialInit+0x284>)
 800f468:	2115      	movs	r1, #21
 800f46a:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO2;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	1c5a      	adds	r2, r3, #1
 800f470:	60fa      	str	r2, [r7, #12]
 800f472:	4a11      	ldr	r2, [pc, #68]	; (800f4b8 <serialInit+0x284>)
 800f474:	2116      	movs	r1, #22
 800f476:	54d1      	strb	r1, [r2, r3]
        availableBoxes[idx++] = BOXSERVO3;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	60fa      	str	r2, [r7, #12]
 800f47e:	4a0e      	ldr	r2, [pc, #56]	; (800f4b8 <serialInit+0x284>)
 800f480:	2117      	movs	r1, #23
 800f482:	54d1      	strb	r1, [r2, r3]
    }

    numberBoxItems = idx;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	b2da      	uxtb	r2, r3
 800f488:	4b0e      	ldr	r3, [pc, #56]	; (800f4c4 <serialInit+0x290>)
 800f48a:	701a      	strb	r2, [r3, #0]
 800f48c:	e002      	b.n	800f494 <serialInit+0x260>
    if (!pifMsp_Init(&ports[0].pif_msp, &g_timer_1ms, PIF_ID_MSP(0))) return;
 800f48e:	bf00      	nop
 800f490:	e000      	b.n	800f494 <serialInit+0x260>
        if (!pifMsp_Init(&ports[1].pif_msp, &g_timer_1ms, PIF_ID_MSP(1))) return;
 800f492:	bf00      	nop
}
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	20000790 	.word	0x20000790
 800f4a0:	20001b7c 	.word	0x20001b7c
 800f4a4:	200014e4 	.word	0x200014e4
 800f4a8:	20001b80 	.word	0x20001b80
 800f4ac:	08010db1 	.word	0x08010db1
 800f4b0:	0800f4c9 	.word	0x0800f4c9
 800f4b4:	20001bdc 	.word	0x20001bdc
 800f4b8:	20001b60 	.word	0x20001b60
 800f4bc:	200016b0 	.word	0x200016b0
 800f4c0:	20000848 	.word	0x20000848
 800f4c4:	20001b79 	.word	0x20001b79

0800f4c8 <evtMspReceive>:

void evtMspReceive(PifMsp* p_owner, PifMspPacket* p_packet, PifIssuerP p_issuer)
{
 800f4c8:	b590      	push	{r4, r7, lr}
 800f4ca:	b08f      	sub	sp, #60	; 0x3c
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
    uint32_t i, j, tmp, junk;
#ifdef GPS
    uint8_t wp_no;
    int32_t lat = 0, lon = 0, alt = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4d8:	2300      	movs	r3, #0
 800f4da:	627b      	str	r3, [r7, #36]	; 0x24
 800f4dc:	2300      	movs	r3, #0
 800f4de:	623b      	str	r3, [r7, #32]
#endif
    const char *build = __DATE__;
 800f4e0:	4bd9      	ldr	r3, [pc, #868]	; (800f848 <evtMspReceive+0x380>)
 800f4e2:	61fb      	str	r3, [r7, #28]

    (void)p_issuer;

    pifMsp_MakeAnswer(p_owner, p_packet);
 800f4e4:	68b9      	ldr	r1, [r7, #8]
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f008 f922 	bl	8017730 <pifMsp_MakeAnswer>
    switch (p_packet->command) {
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	781b      	ldrb	r3, [r3, #0]
 800f4f0:	3b40      	subs	r3, #64	; 0x40
 800f4f2:	2bbe      	cmp	r3, #190	; 0xbe
 800f4f4:	f201 843f 	bhi.w	8010d76 <evtMspReceive+0x18ae>
 800f4f8:	a201      	add	r2, pc, #4	; (adr r2, 800f500 <evtMspReceive+0x38>)
 800f4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4fe:	bf00      	nop
 800f500:	08010ce7 	.word	0x08010ce7
 800f504:	08010d0f 	.word	0x08010d0f
 800f508:	08010c11 	.word	0x08010c11
 800f50c:	08010a7d 	.word	0x08010a7d
 800f510:	08010d3b 	.word	0x08010d3b
 800f514:	08010d43 	.word	0x08010d43
 800f518:	08010d77 	.word	0x08010d77
 800f51c:	08010d77 	.word	0x08010d77
 800f520:	08010d77 	.word	0x08010d77
 800f524:	08010d77 	.word	0x08010d77
 800f528:	08010d77 	.word	0x08010d77
 800f52c:	08010d77 	.word	0x08010d77
 800f530:	08010d77 	.word	0x08010d77
 800f534:	08010d77 	.word	0x08010d77
 800f538:	08010d77 	.word	0x08010d77
 800f53c:	08010d77 	.word	0x08010d77
 800f540:	08010d77 	.word	0x08010d77
 800f544:	08010d77 	.word	0x08010d77
 800f548:	08010d77 	.word	0x08010d77
 800f54c:	08010d77 	.word	0x08010d77
 800f550:	08010d77 	.word	0x08010d77
 800f554:	08010d77 	.word	0x08010d77
 800f558:	08010d77 	.word	0x08010d77
 800f55c:	08010d77 	.word	0x08010d77
 800f560:	08010d77 	.word	0x08010d77
 800f564:	08010d77 	.word	0x08010d77
 800f568:	08010d77 	.word	0x08010d77
 800f56c:	08010d77 	.word	0x08010d77
 800f570:	08010d77 	.word	0x08010d77
 800f574:	08010d77 	.word	0x08010d77
 800f578:	08010d77 	.word	0x08010d77
 800f57c:	08010d77 	.word	0x08010d77
 800f580:	08010d77 	.word	0x08010d77
 800f584:	08010d77 	.word	0x08010d77
 800f588:	08010d77 	.word	0x08010d77
 800f58c:	08010d77 	.word	0x08010d77
 800f590:	0800fb6d 	.word	0x0800fb6d
 800f594:	0800fb95 	.word	0x0800fb95
 800f598:	0800fd21 	.word	0x0800fd21
 800f59c:	0800fdcd 	.word	0x0800fdcd
 800f5a0:	0801029f 	.word	0x0801029f
 800f5a4:	080102ad 	.word	0x080102ad
 800f5a8:	080102d5 	.word	0x080102d5
 800f5ac:	0801032d 	.word	0x0801032d
 800f5b0:	0801035f 	.word	0x0801035f
 800f5b4:	08010397 	.word	0x08010397
 800f5b8:	080103f9 	.word	0x080103f9
 800f5bc:	0801049d 	.word	0x0801049d
 800f5c0:	08010501 	.word	0x08010501
 800f5c4:	0801055b 	.word	0x0801055b
 800f5c8:	08010629 	.word	0x08010629
 800f5cc:	08010719 	.word	0x08010719
 800f5d0:	08010593 	.word	0x08010593
 800f5d4:	0801054d 	.word	0x0801054d
 800f5d8:	0801073d 	.word	0x0801073d
 800f5dc:	0801059b 	.word	0x0801059b
 800f5e0:	0800fddb 	.word	0x0800fddb
 800f5e4:	08010d77 	.word	0x08010d77
 800f5e8:	08010d77 	.word	0x08010d77
 800f5ec:	08010115 	.word	0x08010115
 800f5f0:	08010d77 	.word	0x08010d77
 800f5f4:	08010d77 	.word	0x08010d77
 800f5f8:	08010d77 	.word	0x08010d77
 800f5fc:	08010d77 	.word	0x08010d77
 800f600:	08010d77 	.word	0x08010d77
 800f604:	08010d77 	.word	0x08010d77
 800f608:	08010d77 	.word	0x08010d77
 800f60c:	08010d77 	.word	0x08010d77
 800f610:	08010d77 	.word	0x08010d77
 800f614:	08010d77 	.word	0x08010d77
 800f618:	08010d77 	.word	0x08010d77
 800f61c:	08010d77 	.word	0x08010d77
 800f620:	08010d77 	.word	0x08010d77
 800f624:	08010d77 	.word	0x08010d77
 800f628:	08010d77 	.word	0x08010d77
 800f62c:	08010d77 	.word	0x08010d77
 800f630:	08010d77 	.word	0x08010d77
 800f634:	08010d77 	.word	0x08010d77
 800f638:	08010d77 	.word	0x08010d77
 800f63c:	08010d77 	.word	0x08010d77
 800f640:	08010d77 	.word	0x08010d77
 800f644:	08010d77 	.word	0x08010d77
 800f648:	08010d77 	.word	0x08010d77
 800f64c:	08010d77 	.word	0x08010d77
 800f650:	08010d77 	.word	0x08010d77
 800f654:	08010d77 	.word	0x08010d77
 800f658:	08010d77 	.word	0x08010d77
 800f65c:	08010d77 	.word	0x08010d77
 800f660:	08010d77 	.word	0x08010d77
 800f664:	08010d77 	.word	0x08010d77
 800f668:	08010d77 	.word	0x08010d77
 800f66c:	08010d77 	.word	0x08010d77
 800f670:	08010d77 	.word	0x08010d77
 800f674:	08010d77 	.word	0x08010d77
 800f678:	08010d77 	.word	0x08010d77
 800f67c:	08010d77 	.word	0x08010d77
 800f680:	08010991 	.word	0x08010991
 800f684:	08010d77 	.word	0x08010d77
 800f688:	08010d77 	.word	0x08010d77
 800f68c:	08010d77 	.word	0x08010d77
 800f690:	080109b7 	.word	0x080109b7
 800f694:	08010d77 	.word	0x08010d77
 800f698:	08010a21 	.word	0x08010a21
 800f69c:	08010d77 	.word	0x08010d77
 800f6a0:	08010d77 	.word	0x08010d77
 800f6a4:	08010d77 	.word	0x08010d77
 800f6a8:	08010d77 	.word	0x08010d77
 800f6ac:	08010d77 	.word	0x08010d77
 800f6b0:	08010d77 	.word	0x08010d77
 800f6b4:	08010d77 	.word	0x08010d77
 800f6b8:	08010d77 	.word	0x08010d77
 800f6bc:	08010d77 	.word	0x08010d77
 800f6c0:	08010d77 	.word	0x08010d77
 800f6c4:	08010d77 	.word	0x08010d77
 800f6c8:	08010d77 	.word	0x08010d77
 800f6cc:	08010d77 	.word	0x08010d77
 800f6d0:	08010d77 	.word	0x08010d77
 800f6d4:	08010d77 	.word	0x08010d77
 800f6d8:	08010d77 	.word	0x08010d77
 800f6dc:	08010d77 	.word	0x08010d77
 800f6e0:	08010d77 	.word	0x08010d77
 800f6e4:	08010d77 	.word	0x08010d77
 800f6e8:	08010d77 	.word	0x08010d77
 800f6ec:	08010d77 	.word	0x08010d77
 800f6f0:	08010d77 	.word	0x08010d77
 800f6f4:	08010d77 	.word	0x08010d77
 800f6f8:	08010d77 	.word	0x08010d77
 800f6fc:	08010d77 	.word	0x08010d77
 800f700:	08010d77 	.word	0x08010d77
 800f704:	08010d77 	.word	0x08010d77
 800f708:	08010d77 	.word	0x08010d77
 800f70c:	08010d77 	.word	0x08010d77
 800f710:	08010d77 	.word	0x08010d77
 800f714:	08010d77 	.word	0x08010d77
 800f718:	08010d77 	.word	0x08010d77
 800f71c:	08010d77 	.word	0x08010d77
 800f720:	0800f7fd 	.word	0x0800f7fd
 800f724:	0800f855 	.word	0x0800f855
 800f728:	0800f8bb 	.word	0x0800f8bb
 800f72c:	0800f913 	.word	0x0800f913
 800f730:	0800f94b 	.word	0x0800f94b
 800f734:	0801085b 	.word	0x0801085b
 800f738:	0801086f 	.word	0x0801086f
 800f73c:	0800f9b3 	.word	0x0800f9b3
 800f740:	08010849 	.word	0x08010849
 800f744:	080107b1 	.word	0x080107b1
 800f748:	0800faf1 	.word	0x0800faf1
 800f74c:	0800fb29 	.word	0x0800fb29
 800f750:	0800feb7 	.word	0x0800feb7
 800f754:	08010d77 	.word	0x08010d77
 800f758:	0800fac9 	.word	0x0800fac9
 800f75c:	08010d77 	.word	0x08010d77
 800f760:	080101dd 	.word	0x080101dd
 800f764:	08010d77 	.word	0x08010d77
 800f768:	08010d77 	.word	0x08010d77
 800f76c:	08010d77 	.word	0x08010d77
 800f770:	08010d77 	.word	0x08010d77
 800f774:	08010d77 	.word	0x08010d77
 800f778:	08010d77 	.word	0x08010d77
 800f77c:	08010d77 	.word	0x08010d77
 800f780:	08010d77 	.word	0x08010d77
 800f784:	08010d77 	.word	0x08010d77
 800f788:	08010d77 	.word	0x08010d77
 800f78c:	08010d77 	.word	0x08010d77
 800f790:	08010d77 	.word	0x08010d77
 800f794:	08010d77 	.word	0x08010d77
 800f798:	08010d77 	.word	0x08010d77
 800f79c:	08010d77 	.word	0x08010d77
 800f7a0:	08010d77 	.word	0x08010d77
 800f7a4:	08010d77 	.word	0x08010d77
 800f7a8:	08010d77 	.word	0x08010d77
 800f7ac:	08010d77 	.word	0x08010d77
 800f7b0:	08010d77 	.word	0x08010d77
 800f7b4:	08010d77 	.word	0x08010d77
 800f7b8:	08010d77 	.word	0x08010d77
 800f7bc:	0800f829 	.word	0x0800f829
 800f7c0:	0801096f 	.word	0x0801096f
 800f7c4:	0800ff63 	.word	0x0800ff63
 800f7c8:	0801002d 	.word	0x0801002d
 800f7cc:	08010d77 	.word	0x08010d77
 800f7d0:	08010d77 	.word	0x08010d77
 800f7d4:	08010d77 	.word	0x08010d77
 800f7d8:	08010d77 	.word	0x08010d77
 800f7dc:	08010d77 	.word	0x08010d77
 800f7e0:	08010d77 	.word	0x08010d77
 800f7e4:	08010d77 	.word	0x08010d77
 800f7e8:	08010881 	.word	0x08010881
 800f7ec:	08010d77 	.word	0x08010d77
 800f7f0:	08010d77 	.word	0x08010d77
 800f7f4:	08010d77 	.word	0x08010d77
 800f7f8:	0801089d 	.word	0x0801089d
    case MSP_SET_RAW_RC:
        for (i = 0; i < 8; i++)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f800:	e00b      	b.n	800f81a <evtMspReceive+0x352>
            rcData[i] = pifMsp_ReadData16(p_packet);
 800f802:	68b8      	ldr	r0, [r7, #8]
 800f804:	f007 ff50 	bl	80176a8 <pifMsp_ReadData16>
 800f808:	4603      	mov	r3, r0
 800f80a:	b219      	sxth	r1, r3
 800f80c:	4a0f      	ldr	r2, [pc, #60]	; (800f84c <evtMspReceive+0x384>)
 800f80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f810:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800f814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f816:	3301      	adds	r3, #1
 800f818:	637b      	str	r3, [r7, #52]	; 0x34
 800f81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f81c:	2b07      	cmp	r3, #7
 800f81e:	d9f0      	bls.n	800f802 <evtMspReceive+0x33a>
        mspFrameRecieve();
 800f820:	f7fe fcd0 	bl	800e1c4 <mspFrameRecieve>
        break;
 800f824:	f001 bab5 	b.w	8010d92 <evtMspReceive+0x18ca>
        
    case MSP_SET_ACC_TRIM:
        cfg.angleTrim[PITCH] = pifMsp_ReadData16(p_packet);
 800f828:	68b8      	ldr	r0, [r7, #8]
 800f82a:	f007 ff3d 	bl	80176a8 <pifMsp_ReadData16>
 800f82e:	4603      	mov	r3, r0
 800f830:	b21a      	sxth	r2, r3
 800f832:	4b07      	ldr	r3, [pc, #28]	; (800f850 <evtMspReceive+0x388>)
 800f834:	85da      	strh	r2, [r3, #46]	; 0x2e
        cfg.angleTrim[ROLL]  = pifMsp_ReadData16(p_packet);
 800f836:	68b8      	ldr	r0, [r7, #8]
 800f838:	f007 ff36 	bl	80176a8 <pifMsp_ReadData16>
 800f83c:	4603      	mov	r3, r0
 800f83e:	b21a      	sxth	r2, r3
 800f840:	4b03      	ldr	r3, [pc, #12]	; (800f850 <evtMspReceive+0x388>)
 800f842:	859a      	strh	r2, [r3, #44]	; 0x2c
        break;
 800f844:	f001 baa5 	b.w	8010d92 <evtMspReceive+0x18ca>
 800f848:	08027838 	.word	0x08027838
 800f84c:	200016e8 	.word	0x200016e8
 800f850:	20000db4 	.word	0x20000db4

#ifdef GPS
    case MSP_SET_RAW_GPS:
        f.GPS_FIX = pifMsp_ReadData8(p_packet);
 800f854:	68b8      	ldr	r0, [r7, #8]
 800f856:	f007 ff13 	bl	8017680 <pifMsp_ReadData8>
 800f85a:	4603      	mov	r3, r0
 800f85c:	461a      	mov	r2, r3
 800f85e:	4bb7      	ldr	r3, [pc, #732]	; (800fb3c <evtMspReceive+0x674>)
 800f860:	72da      	strb	r2, [r3, #11]
        GPS_numSat = pifMsp_ReadData8(p_packet);
 800f862:	68b8      	ldr	r0, [r7, #8]
 800f864:	f007 ff0c 	bl	8017680 <pifMsp_ReadData8>
 800f868:	4603      	mov	r3, r0
 800f86a:	461a      	mov	r2, r3
 800f86c:	4bb4      	ldr	r3, [pc, #720]	; (800fb40 <evtMspReceive+0x678>)
 800f86e:	701a      	strb	r2, [r3, #0]
        GPS_coord[LAT] = pifMsp_ReadData32(p_packet);
 800f870:	68b8      	ldr	r0, [r7, #8]
 800f872:	f007 ff36 	bl	80176e2 <pifMsp_ReadData32>
 800f876:	4603      	mov	r3, r0
 800f878:	461a      	mov	r2, r3
 800f87a:	4bb2      	ldr	r3, [pc, #712]	; (800fb44 <evtMspReceive+0x67c>)
 800f87c:	601a      	str	r2, [r3, #0]
        GPS_coord[LON] = pifMsp_ReadData32(p_packet);
 800f87e:	68b8      	ldr	r0, [r7, #8]
 800f880:	f007 ff2f 	bl	80176e2 <pifMsp_ReadData32>
 800f884:	4603      	mov	r3, r0
 800f886:	461a      	mov	r2, r3
 800f888:	4bae      	ldr	r3, [pc, #696]	; (800fb44 <evtMspReceive+0x67c>)
 800f88a:	605a      	str	r2, [r3, #4]
        GPS_altitude = pifMsp_ReadData16(p_packet);
 800f88c:	68b8      	ldr	r0, [r7, #8]
 800f88e:	f007 ff0b 	bl	80176a8 <pifMsp_ReadData16>
 800f892:	4603      	mov	r3, r0
 800f894:	461a      	mov	r2, r3
 800f896:	4bac      	ldr	r3, [pc, #688]	; (800fb48 <evtMspReceive+0x680>)
 800f898:	801a      	strh	r2, [r3, #0]
        GPS_speed = pifMsp_ReadData16(p_packet);
 800f89a:	68b8      	ldr	r0, [r7, #8]
 800f89c:	f007 ff04 	bl	80176a8 <pifMsp_ReadData16>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	4ba9      	ldr	r3, [pc, #676]	; (800fb4c <evtMspReceive+0x684>)
 800f8a6:	801a      	strh	r2, [r3, #0]
        GPS_update |= 2;        // New data signalisation to GPS functions
 800f8a8:	4ba9      	ldr	r3, [pc, #676]	; (800fb50 <evtMspReceive+0x688>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	f043 0302 	orr.w	r3, r3, #2
 800f8b0:	b2da      	uxtb	r2, r3
 800f8b2:	4ba7      	ldr	r3, [pc, #668]	; (800fb50 <evtMspReceive+0x688>)
 800f8b4:	701a      	strb	r2, [r3, #0]
        break;
 800f8b6:	f001 ba6c 	b.w	8010d92 <evtMspReceive+0x18ca>
#endif

    case MSP_SET_PID:
        for (i = 0; i < PIDITEMS; i++) {
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f8be:	e023      	b.n	800f908 <evtMspReceive+0x440>
            cfg.P8[i] = pifMsp_ReadData8(p_packet);
 800f8c0:	68b8      	ldr	r0, [r7, #8]
 800f8c2:	f007 fedd 	bl	8017680 <pifMsp_ReadData8>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4aa2      	ldr	r2, [pc, #648]	; (800fb54 <evtMspReceive+0x68c>)
 800f8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ce:	4413      	add	r3, r2
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	460a      	mov	r2, r1
 800f8d4:	701a      	strb	r2, [r3, #0]
            cfg.I8[i] = pifMsp_ReadData8(p_packet);
 800f8d6:	68b8      	ldr	r0, [r7, #8]
 800f8d8:	f007 fed2 	bl	8017680 <pifMsp_ReadData8>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4a9c      	ldr	r2, [pc, #624]	; (800fb54 <evtMspReceive+0x68c>)
 800f8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e4:	4413      	add	r3, r2
 800f8e6:	330b      	adds	r3, #11
 800f8e8:	460a      	mov	r2, r1
 800f8ea:	701a      	strb	r2, [r3, #0]
            cfg.D8[i] = pifMsp_ReadData8(p_packet);
 800f8ec:	68b8      	ldr	r0, [r7, #8]
 800f8ee:	f007 fec7 	bl	8017680 <pifMsp_ReadData8>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	4a97      	ldr	r2, [pc, #604]	; (800fb54 <evtMspReceive+0x68c>)
 800f8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8fa:	4413      	add	r3, r2
 800f8fc:	3315      	adds	r3, #21
 800f8fe:	460a      	mov	r2, r1
 800f900:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < PIDITEMS; i++) {
 800f902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f904:	3301      	adds	r3, #1
 800f906:	637b      	str	r3, [r7, #52]	; 0x34
 800f908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90a:	2b09      	cmp	r3, #9
 800f90c:	d9d8      	bls.n	800f8c0 <evtMspReceive+0x3f8>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "S-PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
#endif
        }
        break;
 800f90e:	f001 ba40 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_BOX:
        for (i = 0; i < numberBoxItems; i++)
 800f912:	2300      	movs	r3, #0
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
 800f916:	e010      	b.n	800f93a <evtMspReceive+0x472>
            cfg.activate[availableBoxes[i]] = pifMsp_ReadData16(p_packet);
 800f918:	68b8      	ldr	r0, [r7, #8]
 800f91a:	f007 fec5 	bl	80176a8 <pifMsp_ReadData16>
 800f91e:	4603      	mov	r3, r0
 800f920:	4619      	mov	r1, r3
 800f922:	4a8d      	ldr	r2, [pc, #564]	; (800fb58 <evtMspReceive+0x690>)
 800f924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f926:	4413      	add	r3, r2
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	4a8a      	ldr	r2, [pc, #552]	; (800fb54 <evtMspReceive+0x68c>)
 800f92c:	3312      	adds	r3, #18
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	6059      	str	r1, [r3, #4]
        for (i = 0; i < numberBoxItems; i++)
 800f934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f936:	3301      	adds	r3, #1
 800f938:	637b      	str	r3, [r7, #52]	; 0x34
 800f93a:	4b88      	ldr	r3, [pc, #544]	; (800fb5c <evtMspReceive+0x694>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	461a      	mov	r2, r3
 800f940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f942:	4293      	cmp	r3, r2
 800f944:	d3e8      	bcc.n	800f918 <evtMspReceive+0x450>
        break;
 800f946:	f001 ba24 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_RC_TUNING:
        cfg.rcRate8 = pifMsp_ReadData8(p_packet);
 800f94a:	68b8      	ldr	r0, [r7, #8]
 800f94c:	f007 fe98 	bl	8017680 <pifMsp_ReadData8>
 800f950:	4603      	mov	r3, r0
 800f952:	461a      	mov	r2, r3
 800f954:	4b7f      	ldr	r3, [pc, #508]	; (800fb54 <evtMspReceive+0x68c>)
 800f956:	77da      	strb	r2, [r3, #31]
        cfg.rcExpo8 = pifMsp_ReadData8(p_packet);
 800f958:	68b8      	ldr	r0, [r7, #8]
 800f95a:	f007 fe91 	bl	8017680 <pifMsp_ReadData8>
 800f95e:	4603      	mov	r3, r0
 800f960:	461a      	mov	r2, r3
 800f962:	4b7c      	ldr	r3, [pc, #496]	; (800fb54 <evtMspReceive+0x68c>)
 800f964:	f883 2020 	strb.w	r2, [r3, #32]
        pifMsp_ReadData8(p_packet); // Legacy pitch-roll rate, read but not set.
 800f968:	68b8      	ldr	r0, [r7, #8]
 800f96a:	f007 fe89 	bl	8017680 <pifMsp_ReadData8>
        cfg.yawRate = pifMsp_ReadData8(p_packet);
 800f96e:	68b8      	ldr	r0, [r7, #8]
 800f970:	f007 fe86 	bl	8017680 <pifMsp_ReadData8>
 800f974:	4603      	mov	r3, r0
 800f976:	461a      	mov	r2, r3
 800f978:	4b76      	ldr	r3, [pc, #472]	; (800fb54 <evtMspReceive+0x68c>)
 800f97a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        cfg.dynThrPID = pifMsp_ReadData8(p_packet);
 800f97e:	68b8      	ldr	r0, [r7, #8]
 800f980:	f007 fe7e 	bl	8017680 <pifMsp_ReadData8>
 800f984:	4603      	mov	r3, r0
 800f986:	461a      	mov	r2, r3
 800f988:	4b72      	ldr	r3, [pc, #456]	; (800fb54 <evtMspReceive+0x68c>)
 800f98a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
        cfg.thrMid8 = pifMsp_ReadData8(p_packet);
 800f98e:	68b8      	ldr	r0, [r7, #8]
 800f990:	f007 fe76 	bl	8017680 <pifMsp_ReadData8>
 800f994:	4603      	mov	r3, r0
 800f996:	461a      	mov	r2, r3
 800f998:	4b6e      	ldr	r3, [pc, #440]	; (800fb54 <evtMspReceive+0x68c>)
 800f99a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        cfg.thrExpo8 = pifMsp_ReadData8(p_packet);
 800f99e:	68b8      	ldr	r0, [r7, #8]
 800f9a0:	f007 fe6e 	bl	8017680 <pifMsp_ReadData8>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	4b6a      	ldr	r3, [pc, #424]	; (800fb54 <evtMspReceive+0x68c>)
 800f9aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        break;
 800f9ae:	f001 b9f0 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_MISC:
        tmp = pifMsp_ReadData16(p_packet);
 800f9b2:	68b8      	ldr	r0, [r7, #8]
 800f9b4:	f007 fe78 	bl	80176a8 <pifMsp_ReadData16>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	617b      	str	r3, [r7, #20]
        // sanity check
        if (tmp < 1600 && tmp > 1400)
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f9c2:	d208      	bcs.n	800f9d6 <evtMspReceive+0x50e>
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800f9ca:	d904      	bls.n	800f9d6 <evtMspReceive+0x50e>
            mcfg.midrc = tmp;
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	4b63      	ldr	r3, [pc, #396]	; (800fb60 <evtMspReceive+0x698>)
 800f9d2:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
        mcfg.minthrottle = pifMsp_ReadData16(p_packet);
 800f9d6:	68b8      	ldr	r0, [r7, #8]
 800f9d8:	f007 fe66 	bl	80176a8 <pifMsp_ReadData16>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	461a      	mov	r2, r3
 800f9e0:	4b5f      	ldr	r3, [pc, #380]	; (800fb60 <evtMspReceive+0x698>)
 800f9e2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
        mcfg.maxthrottle = pifMsp_ReadData16(p_packet);
 800f9e6:	68b8      	ldr	r0, [r7, #8]
 800f9e8:	f007 fe5e 	bl	80176a8 <pifMsp_ReadData16>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	4b5b      	ldr	r3, [pc, #364]	; (800fb60 <evtMspReceive+0x698>)
 800f9f2:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
        mcfg.mincommand = pifMsp_ReadData16(p_packet);
 800f9f6:	68b8      	ldr	r0, [r7, #8]
 800f9f8:	f007 fe56 	bl	80176a8 <pifMsp_ReadData16>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	461a      	mov	r2, r3
 800fa00:	4b57      	ldr	r3, [pc, #348]	; (800fb60 <evtMspReceive+0x698>)
 800fa02:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
        cfg.failsafe_throttle = pifMsp_ReadData16(p_packet);
 800fa06:	68b8      	ldr	r0, [r7, #8]
 800fa08:	f007 fe4e 	bl	80176a8 <pifMsp_ReadData16>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4b50      	ldr	r3, [pc, #320]	; (800fb54 <evtMspReceive+0x68c>)
 800fa12:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        mcfg.gps_type = pifMsp_ReadData8(p_packet);
 800fa16:	68b8      	ldr	r0, [r7, #8]
 800fa18:	f007 fe32 	bl	8017680 <pifMsp_ReadData8>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4b4f      	ldr	r3, [pc, #316]	; (800fb60 <evtMspReceive+0x698>)
 800fa22:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
        mcfg.gps_baudrate = pifMsp_ReadData8(p_packet);
 800fa26:	68b8      	ldr	r0, [r7, #8]
 800fa28:	f007 fe2a 	bl	8017680 <pifMsp_ReadData8>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	b25a      	sxtb	r2, r3
 800fa30:	4b4b      	ldr	r3, [pc, #300]	; (800fb60 <evtMspReceive+0x698>)
 800fa32:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
        mcfg.gps_ubx_sbas = pifMsp_ReadData8(p_packet);
 800fa36:	68b8      	ldr	r0, [r7, #8]
 800fa38:	f007 fe22 	bl	8017680 <pifMsp_ReadData8>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	b25a      	sxtb	r2, r3
 800fa40:	4b47      	ldr	r3, [pc, #284]	; (800fb60 <evtMspReceive+0x698>)
 800fa42:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
        mcfg.multiwiicurrentoutput = pifMsp_ReadData8(p_packet);
 800fa46:	68b8      	ldr	r0, [r7, #8]
 800fa48:	f007 fe1a 	bl	8017680 <pifMsp_ReadData8>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	461a      	mov	r2, r3
 800fa50:	4b43      	ldr	r3, [pc, #268]	; (800fb60 <evtMspReceive+0x698>)
 800fa52:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
        mcfg.rssi_aux_channel = pifMsp_ReadData8(p_packet);
 800fa56:	68b8      	ldr	r0, [r7, #8]
 800fa58:	f007 fe12 	bl	8017680 <pifMsp_ReadData8>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	461a      	mov	r2, r3
 800fa60:	4b3f      	ldr	r3, [pc, #252]	; (800fb60 <evtMspReceive+0x698>)
 800fa62:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
        pifMsp_ReadData8(p_packet);
 800fa66:	68b8      	ldr	r0, [r7, #8]
 800fa68:	f007 fe0a 	bl	8017680 <pifMsp_ReadData8>
        cfg.mag_declination = pifMsp_ReadData16(p_packet) * 10;
 800fa6c:	68b8      	ldr	r0, [r7, #8]
 800fa6e:	f007 fe1b 	bl	80176a8 <pifMsp_ReadData16>
 800fa72:	4603      	mov	r3, r0
 800fa74:	461a      	mov	r2, r3
 800fa76:	0092      	lsls	r2, r2, #2
 800fa78:	4413      	add	r3, r2
 800fa7a:	005b      	lsls	r3, r3, #1
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	b21a      	sxth	r2, r3
 800fa80:	4b34      	ldr	r3, [pc, #208]	; (800fb54 <evtMspReceive+0x68c>)
 800fa82:	855a      	strh	r2, [r3, #42]	; 0x2a
        mcfg.vbatscale = pifMsp_ReadData8(p_packet);           // actual vbatscale as intended
 800fa84:	68b8      	ldr	r0, [r7, #8]
 800fa86:	f007 fdfb 	bl	8017680 <pifMsp_ReadData8>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	4b34      	ldr	r3, [pc, #208]	; (800fb60 <evtMspReceive+0x698>)
 800fa90:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
        mcfg.vbatmincellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn1 in MWC2.3 GUI
 800fa94:	68b8      	ldr	r0, [r7, #8]
 800fa96:	f007 fdf3 	bl	8017680 <pifMsp_ReadData8>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	4b30      	ldr	r3, [pc, #192]	; (800fb60 <evtMspReceive+0x698>)
 800faa0:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
        mcfg.vbatmaxcellvoltage = pifMsp_ReadData8(p_packet);  // vbatlevel_warn2 in MWC2.3 GUI
 800faa4:	68b8      	ldr	r0, [r7, #8]
 800faa6:	f007 fdeb 	bl	8017680 <pifMsp_ReadData8>
 800faaa:	4603      	mov	r3, r0
 800faac:	461a      	mov	r2, r3
 800faae:	4b2c      	ldr	r3, [pc, #176]	; (800fb60 <evtMspReceive+0x698>)
 800fab0:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
        mcfg.vbatwarningcellvoltage = pifMsp_ReadData8(p_packet); // vbatlevel when buzzer starts to alert
 800fab4:	68b8      	ldr	r0, [r7, #8]
 800fab6:	f007 fde3 	bl	8017680 <pifMsp_ReadData8>
 800faba:	4603      	mov	r3, r0
 800fabc:	461a      	mov	r2, r3
 800fabe:	4b28      	ldr	r3, [pc, #160]	; (800fb60 <evtMspReceive+0x698>)
 800fac0:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
        break;
 800fac4:	f001 b965 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_MOTOR:
        for (i = 0; i < 8; i++)
 800fac8:	2300      	movs	r3, #0
 800faca:	637b      	str	r3, [r7, #52]	; 0x34
 800facc:	e00b      	b.n	800fae6 <evtMspReceive+0x61e>
            motor_disarmed[i] = pifMsp_ReadData16(p_packet);
 800face:	68b8      	ldr	r0, [r7, #8]
 800fad0:	f007 fdea 	bl	80176a8 <pifMsp_ReadData16>
 800fad4:	4603      	mov	r3, r0
 800fad6:	b219      	sxth	r1, r3
 800fad8:	4a22      	ldr	r2, [pc, #136]	; (800fb64 <evtMspReceive+0x69c>)
 800fada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fadc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < 8; i++)
 800fae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae2:	3301      	adds	r3, #1
 800fae4:	637b      	str	r3, [r7, #52]	; 0x34
 800fae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae8:	2b07      	cmp	r3, #7
 800faea:	d9f0      	bls.n	800face <evtMspReceive+0x606>
        break;
 800faec:	f001 b951 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SELECT_SETTING:
        if (!f.ARMED) {
 800faf0:	4b12      	ldr	r3, [pc, #72]	; (800fb3c <evtMspReceive+0x674>)
 800faf2:	785b      	ldrb	r3, [r3, #1]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f041 8143 	bne.w	8010d80 <evtMspReceive+0x18b8>
            mcfg.current_profile = pifMsp_ReadData8(p_packet);
 800fafa:	68b8      	ldr	r0, [r7, #8]
 800fafc:	f007 fdc0 	bl	8017680 <pifMsp_ReadData8>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
 800fb04:	4b16      	ldr	r3, [pc, #88]	; (800fb60 <evtMspReceive+0x698>)
 800fb06:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            if (mcfg.current_profile > 2)
 800fb0a:	4b15      	ldr	r3, [pc, #84]	; (800fb60 <evtMspReceive+0x698>)
 800fb0c:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d903      	bls.n	800fb1c <evtMspReceive+0x654>
                mcfg.current_profile = 0;
 800fb14:	4b12      	ldr	r3, [pc, #72]	; (800fb60 <evtMspReceive+0x698>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
            // this writes new profile index and re-reads it
            writeEEPROM(0, false);
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	2000      	movs	r0, #0
 800fb20:	f7f6 fdf4 	bl	800670c <writeEEPROM>
        }
        break;
 800fb24:	f001 b92c 	b.w	8010d80 <evtMspReceive+0x18b8>

    case MSP_SET_HEAD:
        magHold = pifMsp_ReadData16(p_packet);
 800fb28:	68b8      	ldr	r0, [r7, #8]
 800fb2a:	f007 fdbd 	bl	80176a8 <pifMsp_ReadData16>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	b21a      	sxth	r2, r3
 800fb32:	4b0d      	ldr	r3, [pc, #52]	; (800fb68 <evtMspReceive+0x6a0>)
 800fb34:	801a      	strh	r2, [r3, #0]
        break;
 800fb36:	f001 b92c 	b.w	8010d92 <evtMspReceive+0x18ca>
 800fb3a:	bf00      	nop
 800fb3c:	200016b0 	.word	0x200016b0
 800fb40:	20001794 	.word	0x20001794
 800fb44:	20001774 	.word	0x20001774
 800fb48:	2000179a 	.word	0x2000179a
 800fb4c:	2000179c 	.word	0x2000179c
 800fb50:	2000179e 	.word	0x2000179e
 800fb54:	20000db4 	.word	0x20000db4
 800fb58:	20001b60 	.word	0x20001b60
 800fb5c:	20001b79 	.word	0x20001b79
 800fb60:	20000848 	.word	0x20000848
 800fb64:	20001530 	.word	0x20001530
 800fb68:	200019e8 	.word	0x200019e8

    case MSP_IDENT:
        pifMsp_AddAnswer8(p_owner, VERSION);                    // multiwii version
 800fb6c:	21e7      	movs	r1, #231	; 0xe7
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	f007 fe1c 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);    // type of multicopter
 800fb74:	4b9a      	ldr	r3, [pc, #616]	; (800fde0 <evtMspReceive+0x918>)
 800fb76:	795b      	ldrb	r3, [r3, #5]
 800fb78:	4619      	mov	r1, r3
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f007 fe16 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, MSP_VERSION);                // MultiWii Serial Protocol Version
 800fb80:	2104      	movs	r1, #4
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f007 fe12 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, CAP_PLATFORM_32BIT | CAP_BASEFLIGHT_CONFIG | CAP_DYNBALANCE | CAP_FW_FLAPS); // "capability"
 800fb88:	4996      	ldr	r1, [pc, #600]	; (800fde4 <evtMspReceive+0x91c>)
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f007 fe84 	bl	8017898 <pifMsp_AddAnswer32>
        break;
 800fb90:	f001 b8ff 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_STATUS:
        pifMsp_AddAnswer16(p_owner, cycleTime);
 800fb94:	4b94      	ldr	r3, [pc, #592]	; (800fde8 <evtMspReceive+0x920>)
 800fb96:	881b      	ldrh	r3, [r3, #0]
 800fb98:	4619      	mov	r1, r3
 800fb9a:	68f8      	ldr	r0, [r7, #12]
 800fb9c:	f007 fe3e 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, g_i2c_port.error_count);
 800fba0:	4b92      	ldr	r3, [pc, #584]	; (800fdec <evtMspReceive+0x924>)
 800fba2:	881b      	ldrh	r3, [r3, #0]
 800fba4:	4619      	mov	r1, r3
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f007 fe38 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG) << 2 | sensors(SENSOR_GPS) << 3 | sensors(SENSOR_SONAR) << 4);
 800fbac:	2002      	movs	r0, #2
 800fbae:	f7f7 f947 	bl	8006e40 <sensors>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	b21c      	sxth	r4, r3
 800fbb6:	2004      	movs	r0, #4
 800fbb8:	f7f7 f942 	bl	8006e40 <sensors>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	005b      	lsls	r3, r3, #1
 800fbc0:	b21b      	sxth	r3, r3
 800fbc2:	4323      	orrs	r3, r4
 800fbc4:	b21c      	sxth	r4, r3
 800fbc6:	2008      	movs	r0, #8
 800fbc8:	f7f7 f93a 	bl	8006e40 <sensors>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	b21b      	sxth	r3, r3
 800fbd2:	4323      	orrs	r3, r4
 800fbd4:	b21c      	sxth	r4, r3
 800fbd6:	2020      	movs	r0, #32
 800fbd8:	f7f7 f932 	bl	8006e40 <sensors>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	b21b      	sxth	r3, r3
 800fbe2:	4323      	orrs	r3, r4
 800fbe4:	b21c      	sxth	r4, r3
 800fbe6:	2010      	movs	r0, #16
 800fbe8:	f7f7 f92a 	bl	8006e40 <sensors>
 800fbec:	4603      	mov	r3, r0
 800fbee:	011b      	lsls	r3, r3, #4
 800fbf0:	b21b      	sxth	r3, r3
 800fbf2:	4323      	orrs	r3, r4
 800fbf4:	b21b      	sxth	r3, r3
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f007 fe0e 	bl	801781c <pifMsp_AddAnswer16>
        // OK, so you waste all the fucking time to have BOXNAMES and BOXINDEXES etc, and then you go ahead and serialize enabled shit simply by stuffing all
        // the bits in order, instead of setting the enabled bits based on BOXINDEX. WHERE IS THE FUCKING LOGIC IN THIS, FUCKWADS.
        // Serialize the boxes in the order we delivered them, until multiwii retards fix their shit
        junk = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fc04:	4b7a      	ldr	r3, [pc, #488]	; (800fdf0 <evtMspReceive+0x928>)
 800fc06:	78db      	ldrb	r3, [r3, #3]
 800fc08:	005a      	lsls	r2, r3, #1
 800fc0a:	4b79      	ldr	r3, [pc, #484]	; (800fdf0 <evtMspReceive+0x928>)
 800fc0c:	791b      	ldrb	r3, [r3, #4]
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fc12:	4b77      	ldr	r3, [pc, #476]	; (800fdf0 <evtMspReceive+0x928>)
 800fc14:	799b      	ldrb	r3, [r3, #6]
 800fc16:	00db      	lsls	r3, r3, #3
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fc18:	431a      	orrs	r2, r3
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fc1a:	4b75      	ldr	r3, [pc, #468]	; (800fdf0 <evtMspReceive+0x928>)
 800fc1c:	795b      	ldrb	r3, [r3, #5]
 800fc1e:	015b      	lsls	r3, r3, #5
 800fc20:	431a      	orrs	r2, r3
 800fc22:	4b73      	ldr	r3, [pc, #460]	; (800fdf0 <evtMspReceive+0x928>)
 800fc24:	7a5b      	ldrb	r3, [r3, #9]
 800fc26:	019b      	lsls	r3, r3, #6
 800fc28:	431a      	orrs	r2, r3
 800fc2a:	4b72      	ldr	r3, [pc, #456]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc2c:	79db      	ldrb	r3, [r3, #7]
 800fc2e:	01db      	lsls	r3, r3, #7
 800fc30:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fc32:	4b70      	ldr	r3, [pc, #448]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc34:	7a1b      	ldrb	r3, [r3, #8]
 800fc36:	021b      	lsls	r3, r3, #8
                f.BARO_MODE << BOXBARO | f.MAG_MODE << BOXMAG | f.HEADFREE_MODE << BOXHEADFREE | rcOptions[BOXHEADADJ] << BOXHEADADJ |
 800fc38:	431a      	orrs	r2, r3
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fc3a:	4b6e      	ldr	r3, [pc, #440]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc3c:	7a5b      	ldrb	r3, [r3, #9]
 800fc3e:	025b      	lsls	r3, r3, #9
 800fc40:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fc42:	4b6b      	ldr	r3, [pc, #428]	; (800fdf0 <evtMspReceive+0x928>)
 800fc44:	79db      	ldrb	r3, [r3, #7]
 800fc46:	029b      	lsls	r3, r3, #10
                rcOptions[BOXCAMSTAB] << BOXCAMSTAB | rcOptions[BOXCAMTRIG] << BOXCAMTRIG |
 800fc48:	431a      	orrs	r2, r3
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fc4a:	4b69      	ldr	r3, [pc, #420]	; (800fdf0 <evtMspReceive+0x928>)
 800fc4c:	7a1b      	ldrb	r3, [r3, #8]
 800fc4e:	02db      	lsls	r3, r3, #11
 800fc50:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fc52:	4b67      	ldr	r3, [pc, #412]	; (800fdf0 <evtMspReceive+0x928>)
 800fc54:	7d1b      	ldrb	r3, [r3, #20]
 800fc56:	061b      	lsls	r3, r3, #24
                f.GPS_HOME_MODE << BOXGPSHOME | f.GPS_HOLD_MODE << BOXGPSHOLD |
 800fc58:	431a      	orrs	r2, r3
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fc5a:	4b65      	ldr	r3, [pc, #404]	; (800fdf0 <evtMspReceive+0x928>)
 800fc5c:	7a9b      	ldrb	r3, [r3, #10]
 800fc5e:	031b      	lsls	r3, r3, #12
 800fc60:	431a      	orrs	r2, r3
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fc62:	4b64      	ldr	r3, [pc, #400]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc64:	7b5b      	ldrb	r3, [r3, #13]
 800fc66:	035b      	lsls	r3, r3, #13
                f.CRUISE_MODE << BOXGCRUISE | f.PASSTHRU_MODE << BOXPASSTHRU |
 800fc68:	431a      	orrs	r2, r3
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fc6a:	4b62      	ldr	r3, [pc, #392]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc6c:	7b9b      	ldrb	r3, [r3, #14]
 800fc6e:	039b      	lsls	r3, r3, #14
                rcOptions[BOXBEEPERON] << BOXBEEPERON |
 800fc70:	431a      	orrs	r2, r3
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fc72:	4b60      	ldr	r3, [pc, #384]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc74:	7c1b      	ldrb	r3, [r3, #16]
 800fc76:	041b      	lsls	r3, r3, #16
                rcOptions[BOXLEDMAX] << BOXLEDMAX |
 800fc78:	431a      	orrs	r2, r3
                rcOptions[BOXVARIO] << BOXVARIO |
 800fc7a:	4b5e      	ldr	r3, [pc, #376]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc7c:	791b      	ldrb	r3, [r3, #4]
 800fc7e:	011b      	lsls	r3, r3, #4
                rcOptions[BOXLLIGHTS] << BOXLLIGHTS |
 800fc80:	431a      	orrs	r2, r3
                rcOptions[BOXCALIB] << BOXCALIB |
 800fc82:	4b5c      	ldr	r3, [pc, #368]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc84:	7c5b      	ldrb	r3, [r3, #17]
 800fc86:	045b      	lsls	r3, r3, #17
                rcOptions[BOXVARIO] << BOXVARIO |
 800fc88:	431a      	orrs	r2, r3
                rcOptions[BOXGOV] << BOXGOV |
 800fc8a:	4b5a      	ldr	r3, [pc, #360]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc8c:	7c9b      	ldrb	r3, [r3, #18]
 800fc8e:	049b      	lsls	r3, r3, #18
                rcOptions[BOXCALIB] << BOXCALIB |
 800fc90:	431a      	orrs	r2, r3
                rcOptions[BOXOSD] << BOXOSD |
 800fc92:	4b58      	ldr	r3, [pc, #352]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc94:	7cdb      	ldrb	r3, [r3, #19]
 800fc96:	04db      	lsls	r3, r3, #19
                rcOptions[BOXGOV] << BOXGOV |
 800fc98:	431a      	orrs	r2, r3
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fc9a:	4b56      	ldr	r3, [pc, #344]	; (800fdf4 <evtMspReceive+0x92c>)
 800fc9c:	7d1b      	ldrb	r3, [r3, #20]
 800fc9e:	051b      	lsls	r3, r3, #20
                rcOptions[BOXOSD] << BOXOSD |
 800fca0:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fca2:	4b54      	ldr	r3, [pc, #336]	; (800fdf4 <evtMspReceive+0x92c>)
 800fca4:	7d5b      	ldrb	r3, [r3, #21]
 800fca6:	055b      	lsls	r3, r3, #21
                rcOptions[BOXTELEMETRY] << BOXTELEMETRY |
 800fca8:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fcaa:	4b52      	ldr	r3, [pc, #328]	; (800fdf4 <evtMspReceive+0x92c>)
 800fcac:	7d9b      	ldrb	r3, [r3, #22]
 800fcae:	059b      	lsls	r3, r3, #22
                rcOptions[BOXSERVO1] << BOXSERVO1 |
 800fcb0:	431a      	orrs	r2, r3
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fcb2:	4b50      	ldr	r3, [pc, #320]	; (800fdf4 <evtMspReceive+0x92c>)
 800fcb4:	7ddb      	ldrb	r3, [r3, #23]
 800fcb6:	05db      	lsls	r3, r3, #23
                rcOptions[BOXSERVO2] << BOXSERVO2 |
 800fcb8:	4313      	orrs	r3, r2
                f.ARMED << BOXARM;
 800fcba:	4a4d      	ldr	r2, [pc, #308]	; (800fdf0 <evtMspReceive+0x928>)
 800fcbc:	7852      	ldrb	r2, [r2, #1]
                rcOptions[BOXSERVO3] << BOXSERVO3 |
 800fcbe:	4313      	orrs	r3, r2
        tmp = f.ANGLE_MODE << BOXANGLE | f.HORIZON_MODE << BOXHORIZON |
 800fcc0:	617b      	str	r3, [r7, #20]
        for (i = 0; i < numberBoxItems; i++) {
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	637b      	str	r3, [r7, #52]	; 0x34
 800fcc6:	e018      	b.n	800fcfa <evtMspReceive+0x832>
            int flag = (tmp & (1 << availableBoxes[i]));
 800fcc8:	4a4b      	ldr	r2, [pc, #300]	; (800fdf8 <evtMspReceive+0x930>)
 800fcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fccc:	4413      	add	r3, r2
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	4093      	lsls	r3, r2
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	4013      	ands	r3, r2
 800fcdc:	613b      	str	r3, [r7, #16]
            if (flag)
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d007      	beq.n	800fcf4 <evtMspReceive+0x82c>
                junk |= 1 << i;
 800fce4:	2201      	movs	r2, #1
 800fce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce8:	fa02 f303 	lsl.w	r3, r2, r3
 800fcec:	461a      	mov	r2, r3
 800fcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 0; i < numberBoxItems; i++) {
 800fcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	637b      	str	r3, [r7, #52]	; 0x34
 800fcfa:	4b40      	ldr	r3, [pc, #256]	; (800fdfc <evtMspReceive+0x934>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d3e0      	bcc.n	800fcc8 <evtMspReceive+0x800>
        }
        pifMsp_AddAnswer32(p_owner, junk);
 800fd06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f007 fdc5 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.current_profile);
 800fd0e:	4b34      	ldr	r3, [pc, #208]	; (800fde0 <evtMspReceive+0x918>)
 800fd10:	f893 3568 	ldrb.w	r3, [r3, #1384]	; 0x568
 800fd14:	4619      	mov	r1, r3
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f007 fd48 	bl	80177ac <pifMsp_AddAnswer8>
        break;
 800fd1c:	f001 b839 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_RAW_IMU:
        // Retarded hack until multiwiidorks start using real units for sensor data
        if (sensor_set.acc.acc_1G > 1024) {
 800fd20:	4b37      	ldr	r3, [pc, #220]	; (800fe00 <evtMspReceive+0x938>)
 800fd22:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800fd26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd2a:	d917      	bls.n	800fd5c <evtMspReceive+0x894>
            for (i = 0; i < 3; i++)
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd30:	e010      	b.n	800fd54 <evtMspReceive+0x88c>
                pifMsp_AddAnswer16(p_owner, accSmooth[i] / 8);
 800fd32:	4a34      	ldr	r2, [pc, #208]	; (800fe04 <evtMspReceive+0x93c>)
 800fd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd36:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	da00      	bge.n	800fd40 <evtMspReceive+0x878>
 800fd3e:	3307      	adds	r3, #7
 800fd40:	10db      	asrs	r3, r3, #3
 800fd42:	b21b      	sxth	r3, r3
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	4619      	mov	r1, r3
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f007 fd67 	bl	801781c <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd50:	3301      	adds	r3, #1
 800fd52:	637b      	str	r3, [r7, #52]	; 0x34
 800fd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd56:	2b02      	cmp	r3, #2
 800fd58:	d9eb      	bls.n	800fd32 <evtMspReceive+0x86a>
 800fd5a:	e011      	b.n	800fd80 <evtMspReceive+0x8b8>
        } else {
            for (i = 0; i < 3; i++)
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	637b      	str	r3, [r7, #52]	; 0x34
 800fd60:	e00b      	b.n	800fd7a <evtMspReceive+0x8b2>
                pifMsp_AddAnswer16(p_owner, accSmooth[i]);
 800fd62:	4a28      	ldr	r2, [pc, #160]	; (800fe04 <evtMspReceive+0x93c>)
 800fd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f007 fd54 	bl	801781c <pifMsp_AddAnswer16>
            for (i = 0; i < 3; i++)
 800fd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd76:	3301      	adds	r3, #1
 800fd78:	637b      	str	r3, [r7, #52]	; 0x34
 800fd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d9f0      	bls.n	800fd62 <evtMspReceive+0x89a>
        }
        for (i = 0; i < 3; i++)
 800fd80:	2300      	movs	r3, #0
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
 800fd84:	e00b      	b.n	800fd9e <evtMspReceive+0x8d6>
            pifMsp_AddAnswer16(p_owner, gyroData[i]);
 800fd86:	4a20      	ldr	r2, [pc, #128]	; (800fe08 <evtMspReceive+0x940>)
 800fd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4619      	mov	r1, r3
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f007 fd42 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800fd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda0:	2b02      	cmp	r3, #2
 800fda2:	d9f0      	bls.n	800fd86 <evtMspReceive+0x8be>
        for (i = 0; i < 3; i++)
 800fda4:	2300      	movs	r3, #0
 800fda6:	637b      	str	r3, [r7, #52]	; 0x34
 800fda8:	e00b      	b.n	800fdc2 <evtMspReceive+0x8fa>
            pifMsp_AddAnswer16(p_owner, magADC[i]);
 800fdaa:	4a18      	ldr	r2, [pc, #96]	; (800fe0c <evtMspReceive+0x944>)
 800fdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	68f8      	ldr	r0, [r7, #12]
 800fdb8:	f007 fd30 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < 3; i++)
 800fdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	637b      	str	r3, [r7, #52]	; 0x34
 800fdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc4:	2b02      	cmp	r3, #2
 800fdc6:	d9f0      	bls.n	800fdaa <evtMspReceive+0x8e2>
        break;
 800fdc8:	f000 bfe3 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SERVO:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&servo, 16);
 800fdcc:	2210      	movs	r2, #16
 800fdce:	4910      	ldr	r1, [pc, #64]	; (800fe10 <evtMspReceive+0x948>)
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f007 fd9d 	bl	8017910 <pifMsp_AddAnswer>
        break;
 800fdd6:	f000 bfdc 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800fdda:	2300      	movs	r3, #0
 800fddc:	637b      	str	r3, [r7, #52]	; 0x34
 800fdde:	e065      	b.n	800feac <evtMspReceive+0x9e4>
 800fde0:	20000848 	.word	0x20000848
 800fde4:	c000000c 	.word	0xc000000c
 800fde8:	200016d0 	.word	0x200016d0
 800fdec:	200014b4 	.word	0x200014b4
 800fdf0:	200016b0 	.word	0x200016b0
 800fdf4:	20001750 	.word	0x20001750
 800fdf8:	20001b60 	.word	0x20001b60
 800fdfc:	20001b79 	.word	0x20001b79
 800fe00:	20000060 	.word	0x20000060
 800fe04:	200013e0 	.word	0x200013e0
 800fe08:	20001448 	.word	0x20001448
 800fe0c:	200013e8 	.word	0x200013e8
 800fe10:	20000040 	.word	0x20000040
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].min);
 800fe14:	49bd      	ldr	r1, [pc, #756]	; (801010c <evtMspReceive+0xc44>)
 800fe16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe18:	4613      	mov	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4413      	add	r3, r2
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	440b      	add	r3, r1
 800fe22:	33b8      	adds	r3, #184	; 0xb8
 800fe24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f007 fcf5 	bl	801781c <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].max);
 800fe32:	49b6      	ldr	r1, [pc, #728]	; (801010c <evtMspReceive+0xc44>)
 800fe34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe36:	4613      	mov	r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4413      	add	r3, r2
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	440b      	add	r3, r1
 800fe40:	33ba      	adds	r3, #186	; 0xba
 800fe42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4619      	mov	r1, r3
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f007 fce6 	bl	801781c <pifMsp_AddAnswer16>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].middle);
 800fe50:	49ae      	ldr	r1, [pc, #696]	; (801010c <evtMspReceive+0xc44>)
 800fe52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe54:	4613      	mov	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	005b      	lsls	r3, r3, #1
 800fe5c:	440b      	add	r3, r1
 800fe5e:	33bc      	adds	r3, #188	; 0xbc
 800fe60:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	4619      	mov	r1, r3
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f007 fcd7 	bl	801781c <pifMsp_AddAnswer16>
            pifMsp_AddAnswer8(p_owner, cfg.servoConf[i].rate);
 800fe6e:	49a7      	ldr	r1, [pc, #668]	; (801010c <evtMspReceive+0xc44>)
 800fe70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe72:	4613      	mov	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	440b      	add	r3, r1
 800fe7c:	33be      	adds	r3, #190	; 0xbe
 800fe7e:	f993 3000 	ldrsb.w	r3, [r3]
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	4619      	mov	r1, r3
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	f007 fc90 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer16(p_owner, cfg.servoConf[i].direction);
 800fe8c:	499f      	ldr	r1, [pc, #636]	; (801010c <evtMspReceive+0xc44>)
 800fe8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe90:	4613      	mov	r3, r2
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	4413      	add	r3, r2
 800fe96:	005b      	lsls	r3, r3, #1
 800fe98:	440b      	add	r3, r1
 800fe9a:	33c0      	adds	r3, #192	; 0xc0
 800fe9c:	881b      	ldrh	r3, [r3, #0]
 800fe9e:	4619      	mov	r1, r3
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f007 fcbb 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < MAX_SERVOS; i++) {
 800fea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fea8:	3301      	adds	r3, #1
 800feaa:	637b      	str	r3, [r7, #52]	; 0x34
 800feac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feae:	2b07      	cmp	r3, #7
 800feb0:	d9b0      	bls.n	800fe14 <evtMspReceive+0x94c>
        }
        break;
 800feb2:	f000 bf6e 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_SERVO_CONF:
        for (i = 0; i < MAX_SERVOS; i++) {
 800feb6:	2300      	movs	r3, #0
 800feb8:	637b      	str	r3, [r7, #52]	; 0x34
 800feba:	e04d      	b.n	800ff58 <evtMspReceive+0xa90>
            cfg.servoConf[i].min = pifMsp_ReadData16(p_packet);
 800febc:	68b8      	ldr	r0, [r7, #8]
 800febe:	f007 fbf3 	bl	80176a8 <pifMsp_ReadData16>
 800fec2:	4603      	mov	r3, r0
 800fec4:	b218      	sxth	r0, r3
 800fec6:	4991      	ldr	r1, [pc, #580]	; (801010c <evtMspReceive+0xc44>)
 800fec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800feca:	4613      	mov	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4413      	add	r3, r2
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	440b      	add	r3, r1
 800fed4:	33b8      	adds	r3, #184	; 0xb8
 800fed6:	4602      	mov	r2, r0
 800fed8:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].max = pifMsp_ReadData16(p_packet);
 800feda:	68b8      	ldr	r0, [r7, #8]
 800fedc:	f007 fbe4 	bl	80176a8 <pifMsp_ReadData16>
 800fee0:	4603      	mov	r3, r0
 800fee2:	b218      	sxth	r0, r3
 800fee4:	4989      	ldr	r1, [pc, #548]	; (801010c <evtMspReceive+0xc44>)
 800fee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fee8:	4613      	mov	r3, r2
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	4413      	add	r3, r2
 800feee:	005b      	lsls	r3, r3, #1
 800fef0:	440b      	add	r3, r1
 800fef2:	33ba      	adds	r3, #186	; 0xba
 800fef4:	4602      	mov	r2, r0
 800fef6:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].middle = pifMsp_ReadData16(p_packet);
 800fef8:	68b8      	ldr	r0, [r7, #8]
 800fefa:	f007 fbd5 	bl	80176a8 <pifMsp_ReadData16>
 800fefe:	4603      	mov	r3, r0
 800ff00:	b218      	sxth	r0, r3
 800ff02:	4982      	ldr	r1, [pc, #520]	; (801010c <evtMspReceive+0xc44>)
 800ff04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff06:	4613      	mov	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4413      	add	r3, r2
 800ff0c:	005b      	lsls	r3, r3, #1
 800ff0e:	440b      	add	r3, r1
 800ff10:	33bc      	adds	r3, #188	; 0xbc
 800ff12:	4602      	mov	r2, r0
 800ff14:	801a      	strh	r2, [r3, #0]
            cfg.servoConf[i].rate = pifMsp_ReadData8(p_packet);
 800ff16:	68b8      	ldr	r0, [r7, #8]
 800ff18:	f007 fbb2 	bl	8017680 <pifMsp_ReadData8>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	b258      	sxtb	r0, r3
 800ff20:	497a      	ldr	r1, [pc, #488]	; (801010c <evtMspReceive+0xc44>)
 800ff22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff24:	4613      	mov	r3, r2
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	4413      	add	r3, r2
 800ff2a:	005b      	lsls	r3, r3, #1
 800ff2c:	440b      	add	r3, r1
 800ff2e:	33be      	adds	r3, #190	; 0xbe
 800ff30:	4602      	mov	r2, r0
 800ff32:	701a      	strb	r2, [r3, #0]
            cfg.servoConf[i].direction = pifMsp_ReadData16(p_packet);
 800ff34:	68b8      	ldr	r0, [r7, #8]
 800ff36:	f007 fbb7 	bl	80176a8 <pifMsp_ReadData16>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	4973      	ldr	r1, [pc, #460]	; (801010c <evtMspReceive+0xc44>)
 800ff40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff42:	4613      	mov	r3, r2
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	4413      	add	r3, r2
 800ff48:	005b      	lsls	r3, r3, #1
 800ff4a:	440b      	add	r3, r1
 800ff4c:	33c0      	adds	r3, #192	; 0xc0
 800ff4e:	4602      	mov	r2, r0
 800ff50:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < MAX_SERVOS; i++) {
 800ff52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff54:	3301      	adds	r3, #1
 800ff56:	637b      	str	r3, [r7, #52]	; 0x34
 800ff58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5a:	2b07      	cmp	r3, #7
 800ff5c:	d9ae      	bls.n	800febc <evtMspReceive+0x9f4>
        }
        break;
 800ff5e:	f000 bf18 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 800ff62:	2300      	movs	r3, #0
 800ff64:	637b      	str	r3, [r7, #52]	; 0x34
 800ff66:	e05c      	b.n	8010022 <evtMspReceive+0xb5a>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].targetChannel);
 800ff68:	4969      	ldr	r1, [pc, #420]	; (8010110 <evtMspReceive+0xc48>)
 800ff6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	00db      	lsls	r3, r3, #3
 800ff70:	1a9b      	subs	r3, r3, r2
 800ff72:	440b      	add	r3, r1
 800ff74:	33d0      	adds	r3, #208	; 0xd0
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	4619      	mov	r1, r3
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f007 fc16 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].fromChannel);
 800ff80:	4963      	ldr	r1, [pc, #396]	; (8010110 <evtMspReceive+0xc48>)
 800ff82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff84:	4613      	mov	r3, r2
 800ff86:	00db      	lsls	r3, r3, #3
 800ff88:	1a9b      	subs	r3, r3, r2
 800ff8a:	440b      	add	r3, r1
 800ff8c:	33d1      	adds	r3, #209	; 0xd1
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	4619      	mov	r1, r3
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	f007 fc0a 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].rate);
 800ff98:	495d      	ldr	r1, [pc, #372]	; (8010110 <evtMspReceive+0xc48>)
 800ff9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	00db      	lsls	r3, r3, #3
 800ffa0:	1a9b      	subs	r3, r3, r2
 800ffa2:	440b      	add	r3, r1
 800ffa4:	33d2      	adds	r3, #210	; 0xd2
 800ffa6:	f993 3000 	ldrsb.w	r3, [r3]
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	4619      	mov	r1, r3
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f007 fbfc 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].speed);
 800ffb4:	4956      	ldr	r1, [pc, #344]	; (8010110 <evtMspReceive+0xc48>)
 800ffb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffb8:	4613      	mov	r3, r2
 800ffba:	00db      	lsls	r3, r3, #3
 800ffbc:	1a9b      	subs	r3, r3, r2
 800ffbe:	440b      	add	r3, r1
 800ffc0:	33d3      	adds	r3, #211	; 0xd3
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	68f8      	ldr	r0, [r7, #12]
 800ffc8:	f007 fbf0 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].min);
 800ffcc:	4950      	ldr	r1, [pc, #320]	; (8010110 <evtMspReceive+0xc48>)
 800ffce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	00db      	lsls	r3, r3, #3
 800ffd4:	1a9b      	subs	r3, r3, r2
 800ffd6:	440b      	add	r3, r1
 800ffd8:	33d4      	adds	r3, #212	; 0xd4
 800ffda:	f993 3000 	ldrsb.w	r3, [r3]
 800ffde:	b2db      	uxtb	r3, r3
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f007 fbe2 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].max);
 800ffe8:	4949      	ldr	r1, [pc, #292]	; (8010110 <evtMspReceive+0xc48>)
 800ffea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffec:	4613      	mov	r3, r2
 800ffee:	00db      	lsls	r3, r3, #3
 800fff0:	1a9b      	subs	r3, r3, r2
 800fff2:	440b      	add	r3, r1
 800fff4:	33d5      	adds	r3, #213	; 0xd5
 800fff6:	f993 3000 	ldrsb.w	r3, [r3]
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	4619      	mov	r1, r3
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f007 fbd4 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, mcfg.customServoMixer[i].box);
 8010004:	4942      	ldr	r1, [pc, #264]	; (8010110 <evtMspReceive+0xc48>)
 8010006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010008:	4613      	mov	r3, r2
 801000a:	00db      	lsls	r3, r3, #3
 801000c:	1a9b      	subs	r3, r3, r2
 801000e:	440b      	add	r3, r1
 8010010:	33d6      	adds	r3, #214	; 0xd6
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	4619      	mov	r1, r3
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f007 fbc8 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801001c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801001e:	3301      	adds	r3, #1
 8010020:	637b      	str	r3, [r7, #52]	; 0x34
 8010022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010024:	2b0f      	cmp	r3, #15
 8010026:	d99f      	bls.n	800ff68 <evtMspReceive+0xaa0>
        }
        break;
 8010028:	f000 beb3 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_SERVOMIX_CONF:
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 801002c:	2300      	movs	r3, #0
 801002e:	637b      	str	r3, [r7, #52]	; 0x34
 8010030:	e064      	b.n	80100fc <evtMspReceive+0xc34>
            mcfg.customServoMixer[i].targetChannel = pifMsp_ReadData8(p_packet);
 8010032:	68b8      	ldr	r0, [r7, #8]
 8010034:	f007 fb24 	bl	8017680 <pifMsp_ReadData8>
 8010038:	4603      	mov	r3, r0
 801003a:	4618      	mov	r0, r3
 801003c:	4934      	ldr	r1, [pc, #208]	; (8010110 <evtMspReceive+0xc48>)
 801003e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010040:	4613      	mov	r3, r2
 8010042:	00db      	lsls	r3, r3, #3
 8010044:	1a9b      	subs	r3, r3, r2
 8010046:	440b      	add	r3, r1
 8010048:	33d0      	adds	r3, #208	; 0xd0
 801004a:	4602      	mov	r2, r0
 801004c:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].fromChannel = pifMsp_ReadData8(p_packet);
 801004e:	68b8      	ldr	r0, [r7, #8]
 8010050:	f007 fb16 	bl	8017680 <pifMsp_ReadData8>
 8010054:	4603      	mov	r3, r0
 8010056:	4618      	mov	r0, r3
 8010058:	492d      	ldr	r1, [pc, #180]	; (8010110 <evtMspReceive+0xc48>)
 801005a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801005c:	4613      	mov	r3, r2
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	1a9b      	subs	r3, r3, r2
 8010062:	440b      	add	r3, r1
 8010064:	33d1      	adds	r3, #209	; 0xd1
 8010066:	4602      	mov	r2, r0
 8010068:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].rate = pifMsp_ReadData8(p_packet);
 801006a:	68b8      	ldr	r0, [r7, #8]
 801006c:	f007 fb08 	bl	8017680 <pifMsp_ReadData8>
 8010070:	4603      	mov	r3, r0
 8010072:	b258      	sxtb	r0, r3
 8010074:	4926      	ldr	r1, [pc, #152]	; (8010110 <evtMspReceive+0xc48>)
 8010076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010078:	4613      	mov	r3, r2
 801007a:	00db      	lsls	r3, r3, #3
 801007c:	1a9b      	subs	r3, r3, r2
 801007e:	440b      	add	r3, r1
 8010080:	33d2      	adds	r3, #210	; 0xd2
 8010082:	4602      	mov	r2, r0
 8010084:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].speed = pifMsp_ReadData8(p_packet);
 8010086:	68b8      	ldr	r0, [r7, #8]
 8010088:	f007 fafa 	bl	8017680 <pifMsp_ReadData8>
 801008c:	4603      	mov	r3, r0
 801008e:	4618      	mov	r0, r3
 8010090:	491f      	ldr	r1, [pc, #124]	; (8010110 <evtMspReceive+0xc48>)
 8010092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010094:	4613      	mov	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	440b      	add	r3, r1
 801009c:	33d3      	adds	r3, #211	; 0xd3
 801009e:	4602      	mov	r2, r0
 80100a0:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].min = pifMsp_ReadData8(p_packet);
 80100a2:	68b8      	ldr	r0, [r7, #8]
 80100a4:	f007 faec 	bl	8017680 <pifMsp_ReadData8>
 80100a8:	4603      	mov	r3, r0
 80100aa:	b258      	sxtb	r0, r3
 80100ac:	4918      	ldr	r1, [pc, #96]	; (8010110 <evtMspReceive+0xc48>)
 80100ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100b0:	4613      	mov	r3, r2
 80100b2:	00db      	lsls	r3, r3, #3
 80100b4:	1a9b      	subs	r3, r3, r2
 80100b6:	440b      	add	r3, r1
 80100b8:	33d4      	adds	r3, #212	; 0xd4
 80100ba:	4602      	mov	r2, r0
 80100bc:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].max = pifMsp_ReadData8(p_packet);
 80100be:	68b8      	ldr	r0, [r7, #8]
 80100c0:	f007 fade 	bl	8017680 <pifMsp_ReadData8>
 80100c4:	4603      	mov	r3, r0
 80100c6:	b258      	sxtb	r0, r3
 80100c8:	4911      	ldr	r1, [pc, #68]	; (8010110 <evtMspReceive+0xc48>)
 80100ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100cc:	4613      	mov	r3, r2
 80100ce:	00db      	lsls	r3, r3, #3
 80100d0:	1a9b      	subs	r3, r3, r2
 80100d2:	440b      	add	r3, r1
 80100d4:	33d5      	adds	r3, #213	; 0xd5
 80100d6:	4602      	mov	r2, r0
 80100d8:	701a      	strb	r2, [r3, #0]
            mcfg.customServoMixer[i].box = pifMsp_ReadData8(p_packet);
 80100da:	68b8      	ldr	r0, [r7, #8]
 80100dc:	f007 fad0 	bl	8017680 <pifMsp_ReadData8>
 80100e0:	4603      	mov	r3, r0
 80100e2:	4618      	mov	r0, r3
 80100e4:	490a      	ldr	r1, [pc, #40]	; (8010110 <evtMspReceive+0xc48>)
 80100e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e8:	4613      	mov	r3, r2
 80100ea:	00db      	lsls	r3, r3, #3
 80100ec:	1a9b      	subs	r3, r3, r2
 80100ee:	440b      	add	r3, r1
 80100f0:	33d6      	adds	r3, #214	; 0xd6
 80100f2:	4602      	mov	r2, r0
 80100f4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERVO_RULES; i++) {
 80100f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f8:	3301      	adds	r3, #1
 80100fa:	637b      	str	r3, [r7, #52]	; 0x34
 80100fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fe:	2b0f      	cmp	r3, #15
 8010100:	d997      	bls.n	8010032 <evtMspReceive+0xb6a>
        }
        loadCustomServoMixer();
 8010102:	f7fa fd91 	bl	800ac28 <loadCustomServoMixer>
        break;
 8010106:	f000 be44 	b.w	8010d92 <evtMspReceive+0x18ca>
 801010a:	bf00      	nop
 801010c:	20000db4 	.word	0x20000db4
 8010110:	20000848 	.word	0x20000848

    case MSP_FW_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.fw_althold_dir);
 8010114:	4ba7      	ldr	r3, [pc, #668]	; (80103b4 <evtMspReceive+0xeec>)
 8010116:	f993 31a0 	ldrsb.w	r3, [r3, #416]	; 0x1a0
 801011a:	b2db      	uxtb	r3, r3
 801011c:	4619      	mov	r1, r3
 801011e:	68f8      	ldr	r0, [r7, #12]
 8010120:	f007 fb44 	bl	80177ac <pifMsp_AddAnswer8>
        // pifMsp_AddAnswer8(p_owner, cfg.fw_vector_thrust); // Future Gui setting?
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxcorr);
 8010124:	4ba4      	ldr	r3, [pc, #656]	; (80103b8 <evtMspReceive+0xef0>)
 8010126:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
 801012a:	b29b      	uxth	r3, r3
 801012c:	4619      	mov	r1, r3
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f007 fb74 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_rudder);
 8010134:	4ba0      	ldr	r3, [pc, #640]	; (80103b8 <evtMspReceive+0xef0>)
 8010136:	f9b3 3122 	ldrsh.w	r3, [r3, #290]	; 0x122
 801013a:	b29b      	uxth	r3, r3
 801013c:	4619      	mov	r1, r3
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f007 fb6c 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxclimb);
 8010144:	4b9c      	ldr	r3, [pc, #624]	; (80103b8 <evtMspReceive+0xef0>)
 8010146:	f9b3 3124 	ldrsh.w	r3, [r3, #292]	; 0x124
 801014a:	b29b      	uxth	r3, r3
 801014c:	4619      	mov	r1, r3
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f007 fb64 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_gps_maxdive);
 8010154:	4b98      	ldr	r3, [pc, #608]	; (80103b8 <evtMspReceive+0xef0>)
 8010156:	f9b3 3126 	ldrsh.w	r3, [r3, #294]	; 0x126
 801015a:	b29b      	uxth	r3, r3
 801015c:	4619      	mov	r1, r3
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f007 fb5c 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_climb_throttle);
 8010164:	4b94      	ldr	r3, [pc, #592]	; (80103b8 <evtMspReceive+0xef0>)
 8010166:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 801016a:	4619      	mov	r1, r3
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f007 fb55 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_cruise_throttle);
 8010172:	4b91      	ldr	r3, [pc, #580]	; (80103b8 <evtMspReceive+0xef0>)
 8010174:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8010178:	4619      	mov	r1, r3
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	f007 fb4e 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_idle_throttle);
 8010180:	4b8d      	ldr	r3, [pc, #564]	; (80103b8 <evtMspReceive+0xef0>)
 8010182:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 8010186:	4619      	mov	r1, r3
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f007 fb47 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.fw_scaler_throttle);
 801018e:	4b8a      	ldr	r3, [pc, #552]	; (80103b8 <evtMspReceive+0xef0>)
 8010190:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8010194:	4619      	mov	r1, r3
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f007 fb40 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer32(p_owner, cfg.fw_roll_comp); // Float is Not compatible with Gui. Change to _Serialize8
 801019c:	4b86      	ldr	r3, [pc, #536]	; (80103b8 <evtMspReceive+0xef0>)
 801019e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80101a2:	4619      	mov	r1, r3
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f007 fb77 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, cfg.fw_rth_alt);
 80101aa:	4b83      	ldr	r3, [pc, #524]	; (80103b8 <evtMspReceive+0xef0>)
 80101ac:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80101b0:	4619      	mov	r1, r3
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	f007 fafa 	bl	80177ac <pifMsp_AddAnswer8>
        // next added for future use
        pifMsp_AddAnswer32(p_owner, 0);
 80101b8:	2100      	movs	r1, #0
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f007 fb6c 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80101c0:	2100      	movs	r1, #0
 80101c2:	68f8      	ldr	r0, [r7, #12]
 80101c4:	f007 fb68 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80101c8:	2100      	movs	r1, #0
 80101ca:	68f8      	ldr	r0, [r7, #12]
 80101cc:	f007 fb64 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0);
 80101d0:	2100      	movs	r1, #0
 80101d2:	68f8      	ldr	r0, [r7, #12]
 80101d4:	f007 fb60 	bl	8017898 <pifMsp_AddAnswer32>
        break;
 80101d8:	f000 bddb 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_FW_CONFIG:
        mcfg.fw_althold_dir = pifMsp_ReadData8(p_packet);
 80101dc:	68b8      	ldr	r0, [r7, #8]
 80101de:	f007 fa4f 	bl	8017680 <pifMsp_ReadData8>
 80101e2:	4603      	mov	r3, r0
 80101e4:	b25a      	sxtb	r2, r3
 80101e6:	4b73      	ldr	r3, [pc, #460]	; (80103b4 <evtMspReceive+0xeec>)
 80101e8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        // cfg.fw_vector_thrust = pifMsp_ReadData8(p_packet); // Future Gui setting?
        cfg.fw_gps_maxcorr = pifMsp_ReadData16(p_packet);
 80101ec:	68b8      	ldr	r0, [r7, #8]
 80101ee:	f007 fa5b 	bl	80176a8 <pifMsp_ReadData16>
 80101f2:	4603      	mov	r3, r0
 80101f4:	b21a      	sxth	r2, r3
 80101f6:	4b70      	ldr	r3, [pc, #448]	; (80103b8 <evtMspReceive+0xef0>)
 80101f8:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
        cfg.fw_gps_rudder = pifMsp_ReadData16(p_packet);
 80101fc:	68b8      	ldr	r0, [r7, #8]
 80101fe:	f007 fa53 	bl	80176a8 <pifMsp_ReadData16>
 8010202:	4603      	mov	r3, r0
 8010204:	b21a      	sxth	r2, r3
 8010206:	4b6c      	ldr	r3, [pc, #432]	; (80103b8 <evtMspReceive+0xef0>)
 8010208:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
        cfg.fw_gps_maxclimb = pifMsp_ReadData16(p_packet);
 801020c:	68b8      	ldr	r0, [r7, #8]
 801020e:	f007 fa4b 	bl	80176a8 <pifMsp_ReadData16>
 8010212:	4603      	mov	r3, r0
 8010214:	b21a      	sxth	r2, r3
 8010216:	4b68      	ldr	r3, [pc, #416]	; (80103b8 <evtMspReceive+0xef0>)
 8010218:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        cfg.fw_gps_maxdive = pifMsp_ReadData16(p_packet);
 801021c:	68b8      	ldr	r0, [r7, #8]
 801021e:	f007 fa43 	bl	80176a8 <pifMsp_ReadData16>
 8010222:	4603      	mov	r3, r0
 8010224:	b21a      	sxth	r2, r3
 8010226:	4b64      	ldr	r3, [pc, #400]	; (80103b8 <evtMspReceive+0xef0>)
 8010228:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
        cfg.fw_climb_throttle = pifMsp_ReadData16(p_packet);
 801022c:	68b8      	ldr	r0, [r7, #8]
 801022e:	f007 fa3b 	bl	80176a8 <pifMsp_ReadData16>
 8010232:	4603      	mov	r3, r0
 8010234:	461a      	mov	r2, r3
 8010236:	4b60      	ldr	r3, [pc, #384]	; (80103b8 <evtMspReceive+0xef0>)
 8010238:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
        cfg.fw_cruise_throttle = pifMsp_ReadData16(p_packet);
 801023c:	68b8      	ldr	r0, [r7, #8]
 801023e:	f007 fa33 	bl	80176a8 <pifMsp_ReadData16>
 8010242:	4603      	mov	r3, r0
 8010244:	461a      	mov	r2, r3
 8010246:	4b5c      	ldr	r3, [pc, #368]	; (80103b8 <evtMspReceive+0xef0>)
 8010248:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
        cfg.fw_idle_throttle = pifMsp_ReadData16(p_packet);
 801024c:	68b8      	ldr	r0, [r7, #8]
 801024e:	f007 fa2b 	bl	80176a8 <pifMsp_ReadData16>
 8010252:	4603      	mov	r3, r0
 8010254:	461a      	mov	r2, r3
 8010256:	4b58      	ldr	r3, [pc, #352]	; (80103b8 <evtMspReceive+0xef0>)
 8010258:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
        cfg.fw_scaler_throttle = pifMsp_ReadData16(p_packet);
 801025c:	68b8      	ldr	r0, [r7, #8]
 801025e:	f007 fa23 	bl	80176a8 <pifMsp_ReadData16>
 8010262:	4603      	mov	r3, r0
 8010264:	461a      	mov	r2, r3
 8010266:	4b54      	ldr	r3, [pc, #336]	; (80103b8 <evtMspReceive+0xef0>)
 8010268:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
        //cfg.fw_gps_maxdive = pifMsp_ReadData32(p_packet);// Wrong when using float in MSP!... Change to pifMsp_ReadData8
        pifMsp_ReadData32(p_packet); // Just read and skip
 801026c:	68b8      	ldr	r0, [r7, #8]
 801026e:	f007 fa38 	bl	80176e2 <pifMsp_ReadData32>
        cfg.fw_rth_alt = pifMsp_ReadData8(p_packet);
 8010272:	68b8      	ldr	r0, [r7, #8]
 8010274:	f007 fa04 	bl	8017680 <pifMsp_ReadData8>
 8010278:	4603      	mov	r3, r0
 801027a:	461a      	mov	r2, r3
 801027c:	4b4e      	ldr	r3, [pc, #312]	; (80103b8 <evtMspReceive+0xef0>)
 801027e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
        // next added for future use
        pifMsp_ReadData32(p_packet);
 8010282:	68b8      	ldr	r0, [r7, #8]
 8010284:	f007 fa2d 	bl	80176e2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010288:	68b8      	ldr	r0, [r7, #8]
 801028a:	f007 fa2a 	bl	80176e2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 801028e:	68b8      	ldr	r0, [r7, #8]
 8010290:	f007 fa27 	bl	80176e2 <pifMsp_ReadData32>
        pifMsp_ReadData32(p_packet);
 8010294:	68b8      	ldr	r0, [r7, #8]
 8010296:	f007 fa24 	bl	80176e2 <pifMsp_ReadData32>
        break;
 801029a:	f000 bd7a 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_MOTOR:
        pifMsp_AddAnswer(p_owner, (uint8_t *)&motor, 16);
 801029e:	2210      	movs	r2, #16
 80102a0:	4946      	ldr	r1, [pc, #280]	; (80103bc <evtMspReceive+0xef4>)
 80102a2:	68f8      	ldr	r0, [r7, #12]
 80102a4:	f007 fb34 	bl	8017910 <pifMsp_AddAnswer>
        break;
 80102a8:	f000 bd73 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_RC:
        for (i = 0; i < 8; i++)
 80102ac:	2300      	movs	r3, #0
 80102ae:	637b      	str	r3, [r7, #52]	; 0x34
 80102b0:	e00b      	b.n	80102ca <evtMspReceive+0xe02>
            pifMsp_AddAnswer16(p_owner, rcData[i]);
 80102b2:	4a43      	ldr	r2, [pc, #268]	; (80103c0 <evtMspReceive+0xef8>)
 80102b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	4619      	mov	r1, r3
 80102be:	68f8      	ldr	r0, [r7, #12]
 80102c0:	f007 faac 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < 8; i++)
 80102c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c6:	3301      	adds	r3, #1
 80102c8:	637b      	str	r3, [r7, #52]	; 0x34
 80102ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102cc:	2b07      	cmp	r3, #7
 80102ce:	d9f0      	bls.n	80102b2 <evtMspReceive+0xdea>
        break;
 80102d0:	f000 bd5f 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_RAW_GPS:
        pifMsp_AddAnswer8(p_owner, f.GPS_FIX);
 80102d4:	4b3b      	ldr	r3, [pc, #236]	; (80103c4 <evtMspReceive+0xefc>)
 80102d6:	7adb      	ldrb	r3, [r3, #11]
 80102d8:	4619      	mov	r1, r3
 80102da:	68f8      	ldr	r0, [r7, #12]
 80102dc:	f007 fa66 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, GPS_numSat);
 80102e0:	4b39      	ldr	r3, [pc, #228]	; (80103c8 <evtMspReceive+0xf00>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	4619      	mov	r1, r3
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f007 fa60 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LAT]);
 80102ec:	4b37      	ldr	r3, [pc, #220]	; (80103cc <evtMspReceive+0xf04>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4619      	mov	r1, r3
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f007 fad0 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_coord[LON]);
 80102f8:	4b34      	ldr	r3, [pc, #208]	; (80103cc <evtMspReceive+0xf04>)
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	4619      	mov	r1, r3
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f007 faca 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, GPS_altitude);
 8010304:	4b32      	ldr	r3, [pc, #200]	; (80103d0 <evtMspReceive+0xf08>)
 8010306:	881b      	ldrh	r3, [r3, #0]
 8010308:	4619      	mov	r1, r3
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f007 fa86 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_speed);
 8010310:	4b30      	ldr	r3, [pc, #192]	; (80103d4 <evtMspReceive+0xf0c>)
 8010312:	881b      	ldrh	r3, [r3, #0]
 8010314:	4619      	mov	r1, r3
 8010316:	68f8      	ldr	r0, [r7, #12]
 8010318:	f007 fa80 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_ground_course);
 801031c:	4b2e      	ldr	r3, [pc, #184]	; (80103d8 <evtMspReceive+0xf10>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	4619      	mov	r1, r3
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f007 fa7a 	bl	801781c <pifMsp_AddAnswer16>
        break;
 8010328:	f000 bd33 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_COMP_GPS:
        pifMsp_AddAnswer16(p_owner, GPS_distanceToHome);
 801032c:	4b2b      	ldr	r3, [pc, #172]	; (80103dc <evtMspReceive+0xf14>)
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	4619      	mov	r1, r3
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f007 fa72 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, GPS_directionToHome);
 8010338:	4b29      	ldr	r3, [pc, #164]	; (80103e0 <evtMspReceive+0xf18>)
 801033a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801033e:	b29b      	uxth	r3, r3
 8010340:	4619      	mov	r1, r3
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f007 fa6a 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, GPS_update & 1);
 8010348:	4b26      	ldr	r3, [pc, #152]	; (80103e4 <evtMspReceive+0xf1c>)
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	b2db      	uxtb	r3, r3
 8010352:	4619      	mov	r1, r3
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f007 fa29 	bl	80177ac <pifMsp_AddAnswer8>
        break;
 801035a:	f000 bd1a 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_ATTITUDE:
        for (i = 0; i < 2; i++)
 801035e:	2300      	movs	r3, #0
 8010360:	637b      	str	r3, [r7, #52]	; 0x34
 8010362:	e00b      	b.n	801037c <evtMspReceive+0xeb4>
            pifMsp_AddAnswer16(p_owner, angle[i]);
 8010364:	4a20      	ldr	r2, [pc, #128]	; (80103e8 <evtMspReceive+0xf20>)
 8010366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010368:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801036c:	b29b      	uxth	r3, r3
 801036e:	4619      	mov	r1, r3
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f007 fa53 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < 2; i++)
 8010376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010378:	3301      	adds	r3, #1
 801037a:	637b      	str	r3, [r7, #52]	; 0x34
 801037c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037e:	2b01      	cmp	r3, #1
 8010380:	d9f0      	bls.n	8010364 <evtMspReceive+0xe9c>
        pifMsp_AddAnswer16(p_owner, heading);
 8010382:	4b1a      	ldr	r3, [pc, #104]	; (80103ec <evtMspReceive+0xf24>)
 8010384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010388:	b29b      	uxth	r3, r3
 801038a:	4619      	mov	r1, r3
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f007 fa45 	bl	801781c <pifMsp_AddAnswer16>
        break;
 8010392:	f000 bcfe 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_ALTITUDE:
        pifMsp_AddAnswer32(p_owner, EstAlt);
 8010396:	4b16      	ldr	r3, [pc, #88]	; (80103f0 <evtMspReceive+0xf28>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	4619      	mov	r1, r3
 801039c:	68f8      	ldr	r0, [r7, #12]
 801039e:	f007 fa7b 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, vario);
 80103a2:	4b14      	ldr	r3, [pc, #80]	; (80103f4 <evtMspReceive+0xf2c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	4619      	mov	r1, r3
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	f007 fa36 	bl	801781c <pifMsp_AddAnswer16>
        break;
 80103b0:	f000 bcef 	b.w	8010d92 <evtMspReceive+0x18ca>
 80103b4:	20000848 	.word	0x20000848
 80103b8:	20000db4 	.word	0x20000db4
 80103bc:	20001518 	.word	0x20001518
 80103c0:	200016e8 	.word	0x200016e8
 80103c4:	200016b0 	.word	0x200016b0
 80103c8:	20001794 	.word	0x20001794
 80103cc:	20001774 	.word	0x20001774
 80103d0:	2000179a 	.word	0x2000179a
 80103d4:	2000179c 	.word	0x2000179c
 80103d8:	200017a6 	.word	0x200017a6
 80103dc:	20001796 	.word	0x20001796
 80103e0:	20001798 	.word	0x20001798
 80103e4:	2000179e 	.word	0x2000179e
 80103e8:	20001458 	.word	0x20001458
 80103ec:	200019e6 	.word	0x200019e6
 80103f0:	2000141c 	.word	0x2000141c
 80103f4:	20001434 	.word	0x20001434

    case MSP_ANALOG:
        pifMsp_AddAnswer8(p_owner, (uint8_t)constrain((int16_t)vbat, 0, 255));
 80103f8:	4b81      	ldr	r3, [pc, #516]	; (8010600 <evtMspReceive+0x1138>)
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	b21b      	sxth	r3, r3
 80103fe:	22ff      	movs	r2, #255	; 0xff
 8010400:	2100      	movs	r1, #0
 8010402:	4618      	mov	r0, r3
 8010404:	f7f3 fc00 	bl	8003c08 <constrain>
 8010408:	4603      	mov	r3, r0
 801040a:	b2db      	uxtb	r3, r3
 801040c:	4619      	mov	r1, r3
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f007 f9cc 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(mAhdrawn, 0, 0xFFFF)); // milliamphours drawn from battery
 8010414:	4b7b      	ldr	r3, [pc, #492]	; (8010604 <evtMspReceive+0x113c>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801041c:	2100      	movs	r1, #0
 801041e:	4618      	mov	r0, r3
 8010420:	f7f3 fbf2 	bl	8003c08 <constrain>
 8010424:	4603      	mov	r3, r0
 8010426:	b29b      	uxth	r3, r3
 8010428:	4619      	mov	r1, r3
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f007 f9f6 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, rssi);
 8010430:	4b75      	ldr	r3, [pc, #468]	; (8010608 <evtMspReceive+0x1140>)
 8010432:	881b      	ldrh	r3, [r3, #0]
 8010434:	4619      	mov	r1, r3
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	f007 f9f0 	bl	801781c <pifMsp_AddAnswer16>
        if (mcfg.multiwiicurrentoutput)
 801043c:	4b73      	ldr	r3, [pc, #460]	; (801060c <evtMspReceive+0x1144>)
 801043e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8010442:	2b00      	cmp	r3, #0
 8010444:	d017      	beq.n	8010476 <evtMspReceive+0xfae>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain((abs(amperage) * 10), 0, 0xFFFF)); // send amperage in 0.001 A steps
 8010446:	4b72      	ldr	r3, [pc, #456]	; (8010610 <evtMspReceive+0x1148>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801044e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8010452:	4613      	mov	r3, r2
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	4413      	add	r3, r2
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801045e:	2100      	movs	r1, #0
 8010460:	4618      	mov	r0, r3
 8010462:	f7f3 fbd1 	bl	8003c08 <constrain>
 8010466:	4603      	mov	r3, r0
 8010468:	b29b      	uxth	r3, r3
 801046a:	4619      	mov	r1, r3
 801046c:	68f8      	ldr	r0, [r7, #12]
 801046e:	f007 f9d5 	bl	801781c <pifMsp_AddAnswer16>
        else
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
        break;
 8010472:	f000 bc8e 	b.w	8010d92 <evtMspReceive+0x18ca>
            pifMsp_AddAnswer16(p_owner, (uint16_t)constrain(abs(amperage), 0, 0xFFFF)); // send amperage in 0.01 A steps
 8010476:	4b66      	ldr	r3, [pc, #408]	; (8010610 <evtMspReceive+0x1148>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	bfb8      	it	lt
 801047e:	425b      	neglt	r3, r3
 8010480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010484:	2100      	movs	r1, #0
 8010486:	4618      	mov	r0, r3
 8010488:	f7f3 fbbe 	bl	8003c08 <constrain>
 801048c:	4603      	mov	r3, r0
 801048e:	b29b      	uxth	r3, r3
 8010490:	4619      	mov	r1, r3
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	f007 f9c2 	bl	801781c <pifMsp_AddAnswer16>
        break;
 8010498:	f000 bc7b 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_RC_TUNING:
        pifMsp_AddAnswer8(p_owner, cfg.rcRate8);
 801049c:	4b5d      	ldr	r3, [pc, #372]	; (8010614 <evtMspReceive+0x114c>)
 801049e:	7fdb      	ldrb	r3, [r3, #31]
 80104a0:	4619      	mov	r1, r3
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f007 f982 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rcExpo8);
 80104a8:	4b5a      	ldr	r3, [pc, #360]	; (8010614 <evtMspReceive+0x114c>)
 80104aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104ae:	4619      	mov	r1, r3
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f007 f97b 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]); // here for legacy support
 80104b6:	4b57      	ldr	r3, [pc, #348]	; (8010614 <evtMspReceive+0x114c>)
 80104b8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80104bc:	4619      	mov	r1, r3
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f007 f974 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.yawRate);
 80104c4:	4b53      	ldr	r3, [pc, #332]	; (8010614 <evtMspReceive+0x114c>)
 80104c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80104ca:	4619      	mov	r1, r3
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f007 f96d 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.dynThrPID);
 80104d2:	4b50      	ldr	r3, [pc, #320]	; (8010614 <evtMspReceive+0x114c>)
 80104d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80104d8:	4619      	mov	r1, r3
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f007 f966 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrMid8);
 80104e0:	4b4c      	ldr	r3, [pc, #304]	; (8010614 <evtMspReceive+0x114c>)
 80104e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80104e6:	4619      	mov	r1, r3
 80104e8:	68f8      	ldr	r0, [r7, #12]
 80104ea:	f007 f95f 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.thrExpo8);
 80104ee:	4b49      	ldr	r3, [pc, #292]	; (8010614 <evtMspReceive+0x114c>)
 80104f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80104f4:	4619      	mov	r1, r3
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f007 f958 	bl	80177ac <pifMsp_AddAnswer8>
        break;
 80104fc:	f000 bc49 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_PID:
        for (i = 0; i < PIDITEMS; i++) {
 8010500:	2300      	movs	r3, #0
 8010502:	637b      	str	r3, [r7, #52]	; 0x34
 8010504:	e01d      	b.n	8010542 <evtMspReceive+0x107a>
            pifMsp_AddAnswer8(p_owner, cfg.P8[i]);
 8010506:	4a43      	ldr	r2, [pc, #268]	; (8010614 <evtMspReceive+0x114c>)
 8010508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050a:	4413      	add	r3, r2
 801050c:	3301      	adds	r3, #1
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	4619      	mov	r1, r3
 8010512:	68f8      	ldr	r0, [r7, #12]
 8010514:	f007 f94a 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.I8[i]);
 8010518:	4a3e      	ldr	r2, [pc, #248]	; (8010614 <evtMspReceive+0x114c>)
 801051a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801051c:	4413      	add	r3, r2
 801051e:	330b      	adds	r3, #11
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	4619      	mov	r1, r3
 8010524:	68f8      	ldr	r0, [r7, #12]
 8010526:	f007 f941 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, cfg.D8[i]);
 801052a:	4a3a      	ldr	r2, [pc, #232]	; (8010614 <evtMspReceive+0x114c>)
 801052c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052e:	4413      	add	r3, r2
 8010530:	3315      	adds	r3, #21
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	4619      	mov	r1, r3
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f007 f938 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < PIDITEMS; i++) {
 801053c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053e:	3301      	adds	r3, #1
 8010540:	637b      	str	r3, [r7, #52]	; 0x34
 8010542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010544:	2b09      	cmp	r3, #9
 8010546:	d9de      	bls.n	8010506 <evtMspReceive+0x103e>
#ifndef __PIF_NO_LOG__
            pifLog_Printf(LT_INFO, "PID:%d P=%u I=%u D=%u", i, cfg.P8[i], cfg.I8[i], cfg.D8[i]);
#endif
        }
        break;
 8010548:	f000 bc23 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_PIDNAMES:
        pifMsp_AddAnswer(p_owner, (uint8_t*)pidnames, sizeof(pidnames));
 801054c:	2230      	movs	r2, #48	; 0x30
 801054e:	4932      	ldr	r1, [pc, #200]	; (8010618 <evtMspReceive+0x1150>)
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f007 f9dd 	bl	8017910 <pifMsp_AddAnswer>
        break;
 8010556:	f000 bc1c 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_BOX:
        for (i = 0; i < numberBoxItems; i++)
 801055a:	2300      	movs	r3, #0
 801055c:	637b      	str	r3, [r7, #52]	; 0x34
 801055e:	e010      	b.n	8010582 <evtMspReceive+0x10ba>
            pifMsp_AddAnswer16(p_owner, cfg.activate[availableBoxes[i]]);
 8010560:	4a2e      	ldr	r2, [pc, #184]	; (801061c <evtMspReceive+0x1154>)
 8010562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010564:	4413      	add	r3, r2
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	4a2a      	ldr	r2, [pc, #168]	; (8010614 <evtMspReceive+0x114c>)
 801056a:	3312      	adds	r3, #18
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	4413      	add	r3, r2
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	b29b      	uxth	r3, r3
 8010574:	4619      	mov	r1, r3
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f007 f950 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < numberBoxItems; i++)
 801057c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801057e:	3301      	adds	r3, #1
 8010580:	637b      	str	r3, [r7, #52]	; 0x34
 8010582:	4b27      	ldr	r3, [pc, #156]	; (8010620 <evtMspReceive+0x1158>)
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058a:	4293      	cmp	r3, r2
 801058c:	d3e8      	bcc.n	8010560 <evtMspReceive+0x1098>
        break;
 801058e:	f000 bc00 	b.w	8010d92 <evtMspReceive+0x18ca>

    case MSP_BOXNAMES:
        _SerializeBoxNamesReply(p_owner);
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f7fe fe12 	bl	800f1bc <_SerializeBoxNamesReply>
        break;
 8010598:	e3fb      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_BOXIDS:
        for (i = 0; i < numberBoxItems; i++) {
 801059a:	2300      	movs	r3, #0
 801059c:	637b      	str	r3, [r7, #52]	; 0x34
 801059e:	e028      	b.n	80105f2 <evtMspReceive+0x112a>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80105a0:	2300      	movs	r3, #0
 80105a2:	633b      	str	r3, [r7, #48]	; 0x30
 80105a4:	e01f      	b.n	80105e6 <evtMspReceive+0x111e>
                if (boxes[j].permanentId == availableBoxes[i]) {
 80105a6:	491f      	ldr	r1, [pc, #124]	; (8010624 <evtMspReceive+0x115c>)
 80105a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105aa:	4613      	mov	r3, r2
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	4413      	add	r3, r2
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	440b      	add	r3, r1
 80105b4:	3308      	adds	r3, #8
 80105b6:	781a      	ldrb	r2, [r3, #0]
 80105b8:	4918      	ldr	r1, [pc, #96]	; (801061c <evtMspReceive+0x1154>)
 80105ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105bc:	440b      	add	r3, r1
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d10d      	bne.n	80105e0 <evtMspReceive+0x1118>
                    pifMsp_AddAnswer8(p_owner, boxes[j].permanentId);
 80105c4:	4917      	ldr	r1, [pc, #92]	; (8010624 <evtMspReceive+0x115c>)
 80105c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105c8:	4613      	mov	r3, r2
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	4413      	add	r3, r2
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	440b      	add	r3, r1
 80105d2:	3308      	adds	r3, #8
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	4619      	mov	r1, r3
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f007 f8e7 	bl	80177ac <pifMsp_AddAnswer8>
                    break;
 80105de:	e005      	b.n	80105ec <evtMspReceive+0x1124>
            for  (j = 0; j < CHECKBOXITEMS; j++) {
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	3301      	adds	r3, #1
 80105e4:	633b      	str	r3, [r7, #48]	; 0x30
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	2b18      	cmp	r3, #24
 80105ea:	d9dc      	bls.n	80105a6 <evtMspReceive+0x10de>
        for (i = 0; i < numberBoxItems; i++) {
 80105ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ee:	3301      	adds	r3, #1
 80105f0:	637b      	str	r3, [r7, #52]	; 0x34
 80105f2:	4b0b      	ldr	r3, [pc, #44]	; (8010620 <evtMspReceive+0x1158>)
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	461a      	mov	r2, r3
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d3d0      	bcc.n	80105a0 <evtMspReceive+0x10d8>
                }
            }
        }
        break;
 80105fe:	e3c8      	b.n	8010d92 <evtMspReceive+0x18ca>
 8010600:	200016d4 	.word	0x200016d4
 8010604:	200016dc 	.word	0x200016dc
 8010608:	2000173c 	.word	0x2000173c
 801060c:	20000848 	.word	0x20000848
 8010610:	200016d8 	.word	0x200016d8
 8010614:	20000db4 	.word	0x20000db4
 8010618:	08029340 	.word	0x08029340
 801061c:	20001b60 	.word	0x20001b60
 8010620:	20001b79 	.word	0x20001b79
 8010624:	08029208 	.word	0x08029208

    case MSP_MISC:
        pifMsp_AddAnswer16(p_owner, mcfg.midrc);
 8010628:	4ba8      	ldr	r3, [pc, #672]	; (80108cc <evtMspReceive+0x1404>)
 801062a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 801062e:	4619      	mov	r1, r3
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f007 f8f3 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.minthrottle);
 8010636:	4ba5      	ldr	r3, [pc, #660]	; (80108cc <evtMspReceive+0x1404>)
 8010638:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
 801063c:	4619      	mov	r1, r3
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f007 f8ec 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.maxthrottle);
 8010644:	4ba1      	ldr	r3, [pc, #644]	; (80108cc <evtMspReceive+0x1404>)
 8010646:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 801064a:	4619      	mov	r1, r3
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f007 f8e5 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.mincommand);
 8010652:	4b9e      	ldr	r3, [pc, #632]	; (80108cc <evtMspReceive+0x1404>)
 8010654:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8010658:	4619      	mov	r1, r3
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f007 f8de 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.failsafe_throttle);
 8010660:	4b9b      	ldr	r3, [pc, #620]	; (80108d0 <evtMspReceive+0x1408>)
 8010662:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8010666:	4619      	mov	r1, r3
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f007 f8d7 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_type);
 801066e:	4b97      	ldr	r3, [pc, #604]	; (80108cc <evtMspReceive+0x1404>)
 8010670:	f893 31ab 	ldrb.w	r3, [r3, #427]	; 0x1ab
 8010674:	4619      	mov	r1, r3
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f007 f898 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_baudrate);
 801067c:	4b93      	ldr	r3, [pc, #588]	; (80108cc <evtMspReceive+0x1404>)
 801067e:	f993 31ac 	ldrsb.w	r3, [r3, #428]	; 0x1ac
 8010682:	b2db      	uxtb	r3, r3
 8010684:	4619      	mov	r1, r3
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	f007 f890 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.gps_ubx_sbas);
 801068c:	4b8f      	ldr	r3, [pc, #572]	; (80108cc <evtMspReceive+0x1404>)
 801068e:	f993 31ad 	ldrsb.w	r3, [r3, #429]	; 0x1ad
 8010692:	b2db      	uxtb	r3, r3
 8010694:	4619      	mov	r1, r3
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f007 f888 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.multiwiicurrentoutput);
 801069c:	4b8b      	ldr	r3, [pc, #556]	; (80108cc <evtMspReceive+0x1404>)
 801069e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80106a2:	4619      	mov	r1, r3
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f007 f881 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.rssi_aux_channel);
 80106aa:	4b88      	ldr	r3, [pc, #544]	; (80108cc <evtMspReceive+0x1404>)
 80106ac:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80106b0:	4619      	mov	r1, r3
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	f007 f87a 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, 0);
 80106b8:	2100      	movs	r1, #0
 80106ba:	68f8      	ldr	r0, [r7, #12]
 80106bc:	f007 f876 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, cfg.mag_declination / 10); // TODO check this shit
 80106c0:	4b83      	ldr	r3, [pc, #524]	; (80108d0 <evtMspReceive+0x1408>)
 80106c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80106c6:	4a83      	ldr	r2, [pc, #524]	; (80108d4 <evtMspReceive+0x140c>)
 80106c8:	fb82 1203 	smull	r1, r2, r2, r3
 80106cc:	1092      	asrs	r2, r2, #2
 80106ce:	17db      	asrs	r3, r3, #31
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	b21b      	sxth	r3, r3
 80106d4:	b29b      	uxth	r3, r3
 80106d6:	4619      	mov	r1, r3
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f007 f89f 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatscale);
 80106de:	4b7b      	ldr	r3, [pc, #492]	; (80108cc <evtMspReceive+0x1404>)
 80106e0:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 80106e4:	4619      	mov	r1, r3
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f007 f860 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmincellvoltage);
 80106ec:	4b77      	ldr	r3, [pc, #476]	; (80108cc <evtMspReceive+0x1404>)
 80106ee:	f893 317f 	ldrb.w	r3, [r3, #383]	; 0x17f
 80106f2:	4619      	mov	r1, r3
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f007 f859 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatmaxcellvoltage);
 80106fa:	4b74      	ldr	r3, [pc, #464]	; (80108cc <evtMspReceive+0x1404>)
 80106fc:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8010700:	4619      	mov	r1, r3
 8010702:	68f8      	ldr	r0, [r7, #12]
 8010704:	f007 f852 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.vbatwarningcellvoltage);
 8010708:	4b70      	ldr	r3, [pc, #448]	; (80108cc <evtMspReceive+0x1404>)
 801070a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 801070e:	4619      	mov	r1, r3
 8010710:	68f8      	ldr	r0, [r7, #12]
 8010712:	f007 f84b 	bl	80177ac <pifMsp_AddAnswer8>
        break;
 8010716:	e33c      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_MOTOR_PINS:
        for (i = 0; i < 8; i++)
 8010718:	2300      	movs	r3, #0
 801071a:	637b      	str	r3, [r7, #52]	; 0x34
 801071c:	e00a      	b.n	8010734 <evtMspReceive+0x126c>
            pifMsp_AddAnswer8(p_owner, i + 1);
 801071e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010720:	b2db      	uxtb	r3, r3
 8010722:	3301      	adds	r3, #1
 8010724:	b2db      	uxtb	r3, r3
 8010726:	4619      	mov	r1, r3
 8010728:	68f8      	ldr	r0, [r7, #12]
 801072a:	f007 f83f 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < 8; i++)
 801072e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010730:	3301      	adds	r3, #1
 8010732:	637b      	str	r3, [r7, #52]	; 0x34
 8010734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010736:	2b07      	cmp	r3, #7
 8010738:	d9f1      	bls.n	801071e <evtMspReceive+0x1256>
        break;
 801073a:	e32a      	b.n	8010d92 <evtMspReceive+0x18ca>

#ifdef GPS
    case MSP_WP:
        wp_no = pifMsp_ReadData8(p_packet);    // get the wp number
 801073c:	68b8      	ldr	r0, [r7, #8]
 801073e:	f006 ff9f 	bl	8017680 <pifMsp_ReadData8>
 8010742:	4603      	mov	r3, r0
 8010744:	76fb      	strb	r3, [r7, #27]
        if (wp_no == 0) {
 8010746:	7efb      	ldrb	r3, [r7, #27]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d106      	bne.n	801075a <evtMspReceive+0x1292>
            lat = GPS_home[LAT];
 801074c:	4b62      	ldr	r3, [pc, #392]	; (80108d8 <evtMspReceive+0x1410>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_home[LON];
 8010752:	4b61      	ldr	r3, [pc, #388]	; (80108d8 <evtMspReceive+0x1410>)
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	627b      	str	r3, [r7, #36]	; 0x24
 8010758:	e008      	b.n	801076c <evtMspReceive+0x12a4>
        } else if (wp_no == 16) {
 801075a:	7efb      	ldrb	r3, [r7, #27]
 801075c:	2b10      	cmp	r3, #16
 801075e:	d105      	bne.n	801076c <evtMspReceive+0x12a4>
            lat = GPS_hold[LAT];
 8010760:	4b5e      	ldr	r3, [pc, #376]	; (80108dc <evtMspReceive+0x1414>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	62bb      	str	r3, [r7, #40]	; 0x28
            lon = GPS_hold[LON];
 8010766:	4b5d      	ldr	r3, [pc, #372]	; (80108dc <evtMspReceive+0x1414>)
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        pifMsp_AddAnswer8(p_owner, wp_no);
 801076c:	7efb      	ldrb	r3, [r7, #27]
 801076e:	4619      	mov	r1, r3
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f007 f81b 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, lat);
 8010776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010778:	4619      	mov	r1, r3
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f007 f88c 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, lon);
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	4619      	mov	r1, r3
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f007 f887 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, AltHold);           // altitude (cm) will come here -- temporary implementation to test feature with apps
 801078a:	4b55      	ldr	r3, [pc, #340]	; (80108e0 <evtMspReceive+0x1418>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4619      	mov	r1, r3
 8010790:	68f8      	ldr	r0, [r7, #12]
 8010792:	f007 f881 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer16(p_owner, 0);                 // heading  will come here (deg)
 8010796:	2100      	movs	r1, #0
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f007 f83f 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, 0);                 // time to stay (ms) will come here
 801079e:	2100      	movs	r1, #0
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f007 f83b 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, 0);                  // nav flag will come here
 80107a6:	2100      	movs	r1, #0
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f006 ffff 	bl	80177ac <pifMsp_AddAnswer8>
        break;
 80107ae:	e2f0      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_WP:
        wp_no = pifMsp_ReadData8(p_packet);    //get the wp number
 80107b0:	68b8      	ldr	r0, [r7, #8]
 80107b2:	f006 ff65 	bl	8017680 <pifMsp_ReadData8>
 80107b6:	4603      	mov	r3, r0
 80107b8:	76fb      	strb	r3, [r7, #27]
        lat = pifMsp_ReadData32(p_packet);
 80107ba:	68b8      	ldr	r0, [r7, #8]
 80107bc:	f006 ff91 	bl	80176e2 <pifMsp_ReadData32>
 80107c0:	4603      	mov	r3, r0
 80107c2:	62bb      	str	r3, [r7, #40]	; 0x28
        lon = pifMsp_ReadData32(p_packet);
 80107c4:	68b8      	ldr	r0, [r7, #8]
 80107c6:	f006 ff8c 	bl	80176e2 <pifMsp_ReadData32>
 80107ca:	4603      	mov	r3, r0
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
        alt = pifMsp_ReadData32(p_packet);     // to set altitude (cm)
 80107ce:	68b8      	ldr	r0, [r7, #8]
 80107d0:	f006 ff87 	bl	80176e2 <pifMsp_ReadData32>
 80107d4:	4603      	mov	r3, r0
 80107d6:	623b      	str	r3, [r7, #32]
        pifMsp_ReadData16(p_packet);           // future: to set heading (deg)
 80107d8:	68b8      	ldr	r0, [r7, #8]
 80107da:	f006 ff65 	bl	80176a8 <pifMsp_ReadData16>
        pifMsp_ReadData16(p_packet);           // future: to set time to stay (ms)
 80107de:	68b8      	ldr	r0, [r7, #8]
 80107e0:	f006 ff62 	bl	80176a8 <pifMsp_ReadData16>
        pifMsp_ReadData8(p_packet);            // future: to set nav flag
 80107e4:	68b8      	ldr	r0, [r7, #8]
 80107e6:	f006 ff4b 	bl	8017680 <pifMsp_ReadData8>
        if (wp_no == 0) {
 80107ea:	7efb      	ldrb	r3, [r7, #27]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d113      	bne.n	8010818 <evtMspReceive+0x1350>
            GPS_home[LAT] = lat;
 80107f0:	4a39      	ldr	r2, [pc, #228]	; (80108d8 <evtMspReceive+0x1410>)
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	6013      	str	r3, [r2, #0]
            GPS_home[LON] = lon;
 80107f6:	4a38      	ldr	r2, [pc, #224]	; (80108d8 <evtMspReceive+0x1410>)
 80107f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fa:	6053      	str	r3, [r2, #4]
            f.GPS_HOME_MODE = 0;        // with this flag, GPS_set_next_wp will be called in the next loop -- OK with SERIAL GPS / OK with I2C GPS
 80107fc:	4b39      	ldr	r3, [pc, #228]	; (80108e4 <evtMspReceive+0x141c>)
 80107fe:	2200      	movs	r2, #0
 8010800:	71da      	strb	r2, [r3, #7]
            f.GPS_FIX_HOME = 1;
 8010802:	4b38      	ldr	r3, [pc, #224]	; (80108e4 <evtMspReceive+0x141c>)
 8010804:	2201      	movs	r2, #1
 8010806:	731a      	strb	r2, [r3, #12]
            if (alt != 0)
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	2b00      	cmp	r3, #0
 801080c:	f000 82ba 	beq.w	8010d84 <evtMspReceive+0x18bc>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010810:	4a33      	ldr	r2, [pc, #204]	; (80108e0 <evtMspReceive+0x1418>)
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	6013      	str	r3, [r2, #0]
            if (alt != 0)
                AltHold = alt;          // temporary implementation to test feature with apps
            nav_mode = NAV_MODE_WP;
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
        }
        break;
 8010816:	e2b5      	b.n	8010d84 <evtMspReceive+0x18bc>
        } else if (wp_no == 16) {       // OK with SERIAL GPS  --  NOK for I2C GPS / needs more code dev in order to inject GPS coord inside I2C GPS
 8010818:	7efb      	ldrb	r3, [r7, #27]
 801081a:	2b10      	cmp	r3, #16
 801081c:	f040 82b2 	bne.w	8010d84 <evtMspReceive+0x18bc>
            GPS_hold[LAT] = lat;
 8010820:	4a2e      	ldr	r2, [pc, #184]	; (80108dc <evtMspReceive+0x1414>)
 8010822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010824:	6013      	str	r3, [r2, #0]
            GPS_hold[LON] = lon;
 8010826:	4a2d      	ldr	r2, [pc, #180]	; (80108dc <evtMspReceive+0x1414>)
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	6053      	str	r3, [r2, #4]
            if (alt != 0)
 801082c:	6a3b      	ldr	r3, [r7, #32]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <evtMspReceive+0x1370>
                AltHold = alt;          // temporary implementation to test feature with apps
 8010832:	4a2b      	ldr	r2, [pc, #172]	; (80108e0 <evtMspReceive+0x1418>)
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	6013      	str	r3, [r2, #0]
            nav_mode = NAV_MODE_WP;
 8010838:	4b2b      	ldr	r3, [pc, #172]	; (80108e8 <evtMspReceive+0x1420>)
 801083a:	2202      	movs	r2, #2
 801083c:	701a      	strb	r2, [r3, #0]
            GPS_set_next_wp(&GPS_hold[LAT], &GPS_hold[LON]);
 801083e:	492b      	ldr	r1, [pc, #172]	; (80108ec <evtMspReceive+0x1424>)
 8010840:	4826      	ldr	r0, [pc, #152]	; (80108dc <evtMspReceive+0x1414>)
 8010842:	f7f8 fa85 	bl	8008d50 <GPS_set_next_wp>
        break;
 8010846:	e29d      	b.n	8010d84 <evtMspReceive+0x18bc>
#endif  // GPS

    case MSP_RESET_CONF:
        if (!f.ARMED)
 8010848:	4b26      	ldr	r3, [pc, #152]	; (80108e4 <evtMspReceive+0x141c>)
 801084a:	785b      	ldrb	r3, [r3, #1]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f040 829b 	bne.w	8010d88 <evtMspReceive+0x18c0>
            checkFirstTime(true);
 8010852:	2001      	movs	r0, #1
 8010854:	f7f5 ffdc 	bl	8006810 <checkFirstTime>
        break;
 8010858:	e296      	b.n	8010d88 <evtMspReceive+0x18c0>

    case MSP_ACC_CALIBRATION:
        if (!f.ARMED)
 801085a:	4b22      	ldr	r3, [pc, #136]	; (80108e4 <evtMspReceive+0x141c>)
 801085c:	785b      	ldrb	r3, [r3, #1]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f040 8294 	bne.w	8010d8c <evtMspReceive+0x18c4>
            calibratingA = CALIBRATING_ACC_CYCLES;
 8010864:	4b22      	ldr	r3, [pc, #136]	; (80108f0 <evtMspReceive+0x1428>)
 8010866:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801086a:	801a      	strh	r2, [r3, #0]
        break;
 801086c:	e28e      	b.n	8010d8c <evtMspReceive+0x18c4>

    case MSP_MAG_CALIBRATION:
        if (!f.ARMED)
 801086e:	4b1d      	ldr	r3, [pc, #116]	; (80108e4 <evtMspReceive+0x141c>)
 8010870:	785b      	ldrb	r3, [r3, #1]
 8010872:	2b00      	cmp	r3, #0
 8010874:	f040 828c 	bne.w	8010d90 <evtMspReceive+0x18c8>
            f.CALIBRATE_MAG = 1;
 8010878:	4b1a      	ldr	r3, [pc, #104]	; (80108e4 <evtMspReceive+0x141c>)
 801087a:	2201      	movs	r2, #1
 801087c:	739a      	strb	r2, [r3, #14]
        break;
 801087e:	e287      	b.n	8010d90 <evtMspReceive+0x18c8>

    case MSP_EEPROM_WRITE:
        if (f.ARMED) {
 8010880:	4b18      	ldr	r3, [pc, #96]	; (80108e4 <evtMspReceive+0x141c>)
 8010882:	785b      	ldrb	r3, [r3, #1]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <evtMspReceive+0x13ca>
            pifMsp_MakeError(p_owner, p_packet);
 8010888:	68b9      	ldr	r1, [r7, #8]
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f007 f882 	bl	8017994 <pifMsp_MakeError>
        } else {
            writeEEPROM(0, true);
        }
        break;
 8010890:	e27f      	b.n	8010d92 <evtMspReceive+0x18ca>
            writeEEPROM(0, true);
 8010892:	2101      	movs	r1, #1
 8010894:	2000      	movs	r0, #0
 8010896:	f7f5 ff39 	bl	800670c <writeEEPROM>
        break;
 801089a:	e27a      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_DEBUG:
        // make use of this crap, output some useful QA statistics
        if (mcfg.looptime) debug[0] = (int16_t)cycleTime - mcfg.looptime + mcfg.looptime / 10;
 801089c:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <evtMspReceive+0x1404>)
 801089e:	899b      	ldrh	r3, [r3, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d02d      	beq.n	8010900 <evtMspReceive+0x1438>
 80108a4:	4b13      	ldr	r3, [pc, #76]	; (80108f4 <evtMspReceive+0x142c>)
 80108a6:	881a      	ldrh	r2, [r3, #0]
 80108a8:	4b08      	ldr	r3, [pc, #32]	; (80108cc <evtMspReceive+0x1404>)
 80108aa:	899b      	ldrh	r3, [r3, #12]
 80108ac:	1ad3      	subs	r3, r2, r3
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	4b06      	ldr	r3, [pc, #24]	; (80108cc <evtMspReceive+0x1404>)
 80108b2:	899b      	ldrh	r3, [r3, #12]
 80108b4:	4910      	ldr	r1, [pc, #64]	; (80108f8 <evtMspReceive+0x1430>)
 80108b6:	fba1 1303 	umull	r1, r3, r1, r3
 80108ba:	08db      	lsrs	r3, r3, #3
 80108bc:	b29b      	uxth	r3, r3
 80108be:	4413      	add	r3, r2
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	b21a      	sxth	r2, r3
 80108c4:	4b0d      	ldr	r3, [pc, #52]	; (80108fc <evtMspReceive+0x1434>)
 80108c6:	801a      	strh	r2, [r3, #0]
 80108c8:	e01f      	b.n	801090a <evtMspReceive+0x1442>
 80108ca:	bf00      	nop
 80108cc:	20000848 	.word	0x20000848
 80108d0:	20000db4 	.word	0x20000db4
 80108d4:	66666667 	.word	0x66666667
 80108d8:	2000177c 	.word	0x2000177c
 80108dc:	20001788 	.word	0x20001788
 80108e0:	20001424 	.word	0x20001424
 80108e4:	200016b0 	.word	0x200016b0
 80108e8:	200017b0 	.word	0x200017b0
 80108ec:	2000178c 	.word	0x2000178c
 80108f0:	200019e0 	.word	0x200019e0
 80108f4:	200016d0 	.word	0x200016d0
 80108f8:	cccccccd 	.word	0xcccccccd
 80108fc:	200016c8 	.word	0x200016c8
        else debug[0] = cycleTime;
 8010900:	4ba6      	ldr	r3, [pc, #664]	; (8010b9c <evtMspReceive+0x16d4>)
 8010902:	881b      	ldrh	r3, [r3, #0]
 8010904:	b21a      	sxth	r2, r3
 8010906:	4ba6      	ldr	r3, [pc, #664]	; (8010ba0 <evtMspReceive+0x16d8>)
 8010908:	801a      	strh	r2, [r3, #0]
        debug[1] = pif_performance._use_rate;
 801090a:	4ba6      	ldr	r3, [pc, #664]	; (8010ba4 <evtMspReceive+0x16dc>)
 801090c:	791b      	ldrb	r3, [r3, #4]
 801090e:	b21a      	sxth	r2, r3
 8010910:	4ba3      	ldr	r3, [pc, #652]	; (8010ba0 <evtMspReceive+0x16d8>)
 8010912:	805a      	strh	r2, [r3, #2]
        debug[3] = ((g_crystal_clock / 1000000) * 1000) + (g_core_clock / 1000000);         // XX0YY [crystal clock : core clock]
 8010914:	4ba4      	ldr	r3, [pc, #656]	; (8010ba8 <evtMspReceive+0x16e0>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4aa4      	ldr	r2, [pc, #656]	; (8010bac <evtMspReceive+0x16e4>)
 801091a:	fba2 2303 	umull	r2, r3, r2, r3
 801091e:	0c9b      	lsrs	r3, r3, #18
 8010920:	b29b      	uxth	r3, r3
 8010922:	461a      	mov	r2, r3
 8010924:	0152      	lsls	r2, r2, #5
 8010926:	1ad2      	subs	r2, r2, r3
 8010928:	0092      	lsls	r2, r2, #2
 801092a:	4413      	add	r3, r2
 801092c:	00db      	lsls	r3, r3, #3
 801092e:	b29a      	uxth	r2, r3
 8010930:	4b9f      	ldr	r3, [pc, #636]	; (8010bb0 <evtMspReceive+0x16e8>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	499d      	ldr	r1, [pc, #628]	; (8010bac <evtMspReceive+0x16e4>)
 8010936:	fba1 1303 	umull	r1, r3, r1, r3
 801093a:	0c9b      	lsrs	r3, r3, #18
 801093c:	b29b      	uxth	r3, r3
 801093e:	4413      	add	r3, r2
 8010940:	b29b      	uxth	r3, r3
 8010942:	b21a      	sxth	r2, r3
 8010944:	4b96      	ldr	r3, [pc, #600]	; (8010ba0 <evtMspReceive+0x16d8>)
 8010946:	80da      	strh	r2, [r3, #6]
        for (i = 0; i < 4; i++)
 8010948:	2300      	movs	r3, #0
 801094a:	637b      	str	r3, [r7, #52]	; 0x34
 801094c:	e00b      	b.n	8010966 <evtMspReceive+0x149e>
            pifMsp_AddAnswer16(p_owner, debug[i]);      // 4 variables are here for general monitoring purpose
 801094e:	4a94      	ldr	r2, [pc, #592]	; (8010ba0 <evtMspReceive+0x16d8>)
 8010950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010952:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8010956:	b29b      	uxth	r3, r3
 8010958:	4619      	mov	r1, r3
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	f006 ff5e 	bl	801781c <pifMsp_AddAnswer16>
        for (i = 0; i < 4; i++)
 8010960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010962:	3301      	adds	r3, #1
 8010964:	637b      	str	r3, [r7, #52]	; 0x34
 8010966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010968:	2b03      	cmp	r3, #3
 801096a:	d9f0      	bls.n	801094e <evtMspReceive+0x1486>
        break;
 801096c:	e211      	b.n	8010d92 <evtMspReceive+0x18ca>

    // Additional commands that are not compatible with MultiWii
    case MSP_ACC_TRIM:
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[PITCH]);
 801096e:	4b91      	ldr	r3, [pc, #580]	; (8010bb4 <evtMspReceive+0x16ec>)
 8010970:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8010974:	b29b      	uxth	r3, r3
 8010976:	4619      	mov	r1, r3
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f006 ff4f 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, cfg.angleTrim[ROLL]);
 801097e:	4b8d      	ldr	r3, [pc, #564]	; (8010bb4 <evtMspReceive+0x16ec>)
 8010980:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010984:	b29b      	uxth	r3, r3
 8010986:	4619      	mov	r1, r3
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f006 ff47 	bl	801781c <pifMsp_AddAnswer16>
        break;
 801098e:	e200      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_UID:
        pifMsp_AddAnswer32(p_owner, g_unique_id[0]);
 8010990:	4b89      	ldr	r3, [pc, #548]	; (8010bb8 <evtMspReceive+0x16f0>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4619      	mov	r1, r3
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f006 ff7e 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[1]);
 801099c:	4b86      	ldr	r3, [pc, #536]	; (8010bb8 <evtMspReceive+0x16f0>)
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	4619      	mov	r1, r3
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f006 ff78 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, g_unique_id[2]);
 80109a8:	4b83      	ldr	r3, [pc, #524]	; (8010bb8 <evtMspReceive+0x16f0>)
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	4619      	mov	r1, r3
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f006 ff72 	bl	8017898 <pifMsp_AddAnswer32>
        break;
 80109b4:	e1ed      	b.n	8010d92 <evtMspReceive+0x18ca>

#ifdef GPS
    case MSP_GPSSVINFO:
        pifMsp_AddAnswer8(p_owner, GPS_numCh);
 80109b6:	4b81      	ldr	r3, [pc, #516]	; (8010bbc <evtMspReceive+0x16f4>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	4619      	mov	r1, r3
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f006 fef5 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 80109c2:	2300      	movs	r3, #0
 80109c4:	637b      	str	r3, [r7, #52]	; 0x34
 80109c6:	e022      	b.n	8010a0e <evtMspReceive+0x1546>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_chn[i]);
 80109c8:	4a7d      	ldr	r2, [pc, #500]	; (8010bc0 <evtMspReceive+0x16f8>)
 80109ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109cc:	4413      	add	r3, r2
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	4619      	mov	r1, r3
 80109d2:	68f8      	ldr	r0, [r7, #12]
 80109d4:	f006 feea 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_svid[i]);
 80109d8:	4a7a      	ldr	r2, [pc, #488]	; (8010bc4 <evtMspReceive+0x16fc>)
 80109da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109dc:	4413      	add	r3, r2
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	4619      	mov	r1, r3
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f006 fee2 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_quality[i]);
 80109e8:	4a77      	ldr	r2, [pc, #476]	; (8010bc8 <evtMspReceive+0x1700>)
 80109ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ec:	4413      	add	r3, r2
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	4619      	mov	r1, r3
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f006 feda 	bl	80177ac <pifMsp_AddAnswer8>
            pifMsp_AddAnswer8(p_owner, GPS_svinfo_cno[i]);
 80109f8:	4a74      	ldr	r2, [pc, #464]	; (8010bcc <evtMspReceive+0x1704>)
 80109fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109fc:	4413      	add	r3, r2
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	4619      	mov	r1, r3
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f006 fed2 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < GPS_numCh; i++) {
 8010a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a0e:	4b6b      	ldr	r3, [pc, #428]	; (8010bbc <evtMspReceive+0x16f4>)
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	461a      	mov	r2, r3
 8010a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d3d6      	bcc.n	80109c8 <evtMspReceive+0x1500>
        }
        // Poll new SVINFO from GPS
        gpsPollSvinfo();
 8010a1a:	f7f7 fc6f 	bl	80082fc <gpsPollSvinfo>
        break;
 8010a1e:	e1b8      	b.n	8010d92 <evtMspReceive+0x18ca>
    case MSP_GPSDEBUGINFO:
        if (sensors(SENSOR_GPS)) {
 8010a20:	2020      	movs	r0, #32
 8010a22:	f7f6 fa0d 	bl	8006e40 <sensors>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d012      	beq.n	8010a52 <evtMspReceive+0x158a>
            pifMsp_AddAnswer32(p_owner, GPS_update_rate[1] - GPS_update_rate[0]);
 8010a2c:	4b68      	ldr	r3, [pc, #416]	; (8010bd0 <evtMspReceive+0x1708>)
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	4b67      	ldr	r3, [pc, #412]	; (8010bd0 <evtMspReceive+0x1708>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	1ad3      	subs	r3, r2, r3
 8010a36:	4619      	mov	r1, r3
 8010a38:	68f8      	ldr	r0, [r7, #12]
 8010a3a:	f006 ff2d 	bl	8017898 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, GPS_svinfo_rate[1] - GPS_svinfo_rate[0]);
 8010a3e:	4b65      	ldr	r3, [pc, #404]	; (8010bd4 <evtMspReceive+0x170c>)
 8010a40:	685a      	ldr	r2, [r3, #4]
 8010a42:	4b64      	ldr	r3, [pc, #400]	; (8010bd4 <evtMspReceive+0x170c>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	4619      	mov	r1, r3
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f006 ff24 	bl	8017898 <pifMsp_AddAnswer32>
 8010a50:	e007      	b.n	8010a62 <evtMspReceive+0x159a>
        } else {
            pifMsp_AddAnswer32(p_owner, 0);
 8010a52:	2100      	movs	r1, #0
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	f006 ff1f 	bl	8017898 <pifMsp_AddAnswer32>
            pifMsp_AddAnswer32(p_owner, 0);
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f006 ff1b 	bl	8017898 <pifMsp_AddAnswer32>
        }
        pifMsp_AddAnswer32(p_owner, GPS_HorizontalAcc);
 8010a62:	4b5d      	ldr	r3, [pc, #372]	; (8010bd8 <evtMspReceive+0x1710>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	4619      	mov	r1, r3
 8010a68:	68f8      	ldr	r0, [r7, #12]
 8010a6a:	f006 ff15 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, GPS_VerticalAcc);
 8010a6e:	4b5b      	ldr	r3, [pc, #364]	; (8010bdc <evtMspReceive+0x1714>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	4619      	mov	r1, r3
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f006 ff0f 	bl	8017898 <pifMsp_AddAnswer32>
        break;
 8010a7a:	e18a      	b.n	8010d92 <evtMspReceive+0x18ca>
#endif  // GPS

    case MSP_SET_CONFIG:
        mcfg.mixerConfiguration = pifMsp_ReadData8(p_packet); // multitype
 8010a7c:	68b8      	ldr	r0, [r7, #8]
 8010a7e:	f006 fdff 	bl	8017680 <pifMsp_ReadData8>
 8010a82:	4603      	mov	r3, r0
 8010a84:	461a      	mov	r2, r3
 8010a86:	4b56      	ldr	r3, [pc, #344]	; (8010be0 <evtMspReceive+0x1718>)
 8010a88:	715a      	strb	r2, [r3, #5]
        featureClearAll();
 8010a8a:	f7f6 fa5d 	bl	8006f48 <featureClearAll>
        featureSet(pifMsp_ReadData32(p_packet)); // features bitmap
 8010a8e:	68b8      	ldr	r0, [r7, #8]
 8010a90:	f006 fe27 	bl	80176e2 <pifMsp_ReadData32>
 8010a94:	4603      	mov	r3, r0
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7f6 fa30 	bl	8006efc <featureSet>
        mcfg.serialrx_type = pifMsp_ReadData8(p_packet); // serialrx_type
 8010a9c:	68b8      	ldr	r0, [r7, #8]
 8010a9e:	f006 fdef 	bl	8017680 <pifMsp_ReadData8>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	4b4e      	ldr	r3, [pc, #312]	; (8010be0 <evtMspReceive+0x1718>)
 8010aa8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
        mcfg.board_align_roll = pifMsp_ReadData16(p_packet); // board_align_roll
 8010aac:	68b8      	ldr	r0, [r7, #8]
 8010aae:	f006 fdfb 	bl	80176a8 <pifMsp_ReadData16>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	b21a      	sxth	r2, r3
 8010ab6:	4b4a      	ldr	r3, [pc, #296]	; (8010be0 <evtMspReceive+0x1718>)
 8010ab8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
        mcfg.board_align_pitch = pifMsp_ReadData16(p_packet); // board_align_pitch
 8010abc:	68b8      	ldr	r0, [r7, #8]
 8010abe:	f006 fdf3 	bl	80176a8 <pifMsp_ReadData16>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	b21a      	sxth	r2, r3
 8010ac6:	4b46      	ldr	r3, [pc, #280]	; (8010be0 <evtMspReceive+0x1718>)
 8010ac8:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
        mcfg.board_align_yaw = pifMsp_ReadData16(p_packet); // board_align_yaw
 8010acc:	68b8      	ldr	r0, [r7, #8]
 8010ace:	f006 fdeb 	bl	80176a8 <pifMsp_ReadData16>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	b21a      	sxth	r2, r3
 8010ad6:	4b42      	ldr	r3, [pc, #264]	; (8010be0 <evtMspReceive+0x1718>)
 8010ad8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
        mcfg.currentscale = pifMsp_ReadData16(p_packet);
 8010adc:	68b8      	ldr	r0, [r7, #8]
 8010ade:	f006 fde3 	bl	80176a8 <pifMsp_ReadData16>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	4b3e      	ldr	r3, [pc, #248]	; (8010be0 <evtMspReceive+0x1718>)
 8010ae8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
        mcfg.currentoffset = pifMsp_ReadData16(p_packet);
 8010aec:	68b8      	ldr	r0, [r7, #8]
 8010aee:	f006 fddb 	bl	80176a8 <pifMsp_ReadData16>
 8010af2:	4603      	mov	r3, r0
 8010af4:	461a      	mov	r2, r3
 8010af6:	4b3a      	ldr	r3, [pc, #232]	; (8010be0 <evtMspReceive+0x1718>)
 8010af8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
        mcfg.motor_pwm_rate = pifMsp_ReadData16(p_packet);
 8010afc:	68b8      	ldr	r0, [r7, #8]
 8010afe:	f006 fdd3 	bl	80176a8 <pifMsp_ReadData16>
 8010b02:	4603      	mov	r3, r0
 8010b04:	461a      	mov	r2, r3
 8010b06:	4b36      	ldr	r3, [pc, #216]	; (8010be0 <evtMspReceive+0x1718>)
 8010b08:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
        cfg.rollPitchRate[0] = pifMsp_ReadData8(p_packet);
 8010b0c:	68b8      	ldr	r0, [r7, #8]
 8010b0e:	f006 fdb7 	bl	8017680 <pifMsp_ReadData8>
 8010b12:	4603      	mov	r3, r0
 8010b14:	461a      	mov	r2, r3
 8010b16:	4b27      	ldr	r3, [pc, #156]	; (8010bb4 <evtMspReceive+0x16ec>)
 8010b18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        cfg.rollPitchRate[1] = pifMsp_ReadData8(p_packet);
 8010b1c:	68b8      	ldr	r0, [r7, #8]
 8010b1e:	f006 fdaf 	bl	8017680 <pifMsp_ReadData8>
 8010b22:	4603      	mov	r3, r0
 8010b24:	461a      	mov	r2, r3
 8010b26:	4b23      	ldr	r3, [pc, #140]	; (8010bb4 <evtMspReceive+0x16ec>)
 8010b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mcfg.power_adc_channel = pifMsp_ReadData8(p_packet);
 8010b2c:	68b8      	ldr	r0, [r7, #8]
 8010b2e:	f006 fda7 	bl	8017680 <pifMsp_ReadData8>
 8010b32:	4603      	mov	r3, r0
 8010b34:	461a      	mov	r2, r3
 8010b36:	4b2a      	ldr	r3, [pc, #168]	; (8010be0 <evtMspReceive+0x1718>)
 8010b38:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
        cfg.small_angle = pifMsp_ReadData8(p_packet);
 8010b3c:	68b8      	ldr	r0, [r7, #8]
 8010b3e:	f006 fd9f 	bl	8017680 <pifMsp_ReadData8>
 8010b42:	4603      	mov	r3, r0
 8010b44:	461a      	mov	r2, r3
 8010b46:	4b1b      	ldr	r3, [pc, #108]	; (8010bb4 <evtMspReceive+0x16ec>)
 8010b48:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        tmp = pifMsp_ReadData16(p_packet);
 8010b4c:	68b8      	ldr	r0, [r7, #8]
 8010b4e:	f006 fdab 	bl	80176a8 <pifMsp_ReadData16>
 8010b52:	4603      	mov	r3, r0
 8010b54:	617b      	str	r3, [r7, #20]
        if (tmp != mcfg.looptime) {
 8010b56:	4b22      	ldr	r3, [pc, #136]	; (8010be0 <evtMspReceive+0x1718>)
 8010b58:	899b      	ldrh	r3, [r3, #12]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d04d      	beq.n	8010bfe <evtMspReceive+0x1736>
            if (mcfg.looptime && tmp) {
 8010b62:	4b1f      	ldr	r3, [pc, #124]	; (8010be0 <evtMspReceive+0x1718>)
 8010b64:	899b      	ldrh	r3, [r3, #12]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00b      	beq.n	8010b82 <evtMspReceive+0x16ba>
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d008      	beq.n	8010b82 <evtMspReceive+0x16ba>
                pifTask_ChangePeriod(g_task_compute_imu, tmp);
 8010b70:	4b1c      	ldr	r3, [pc, #112]	; (8010be4 <evtMspReceive+0x171c>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	697a      	ldr	r2, [r7, #20]
 8010b76:	b292      	uxth	r2, r2
 8010b78:	4611      	mov	r1, r2
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f003 fca6 	bl	80144cc <pifTask_ChangePeriod>
 8010b80:	e039      	b.n	8010bf6 <evtMspReceive+0x172e>
            }
            else {
                if (tmp) {
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d02f      	beq.n	8010be8 <evtMspReceive+0x1720>
                    pifTask_ChangeMode(g_task_compute_imu, TM_PERIOD_US, tmp);
 8010b88:	4b16      	ldr	r3, [pc, #88]	; (8010be4 <evtMspReceive+0x171c>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	697a      	ldr	r2, [r7, #20]
 8010b8e:	b292      	uxth	r2, r2
 8010b90:	2103      	movs	r1, #3
 8010b92:	4618      	mov	r0, r3
 8010b94:	f003 fc5c 	bl	8014450 <pifTask_ChangeMode>
 8010b98:	e02d      	b.n	8010bf6 <evtMspReceive+0x172e>
 8010b9a:	bf00      	nop
 8010b9c:	200016d0 	.word	0x200016d0
 8010ba0:	200016c8 	.word	0x200016c8
 8010ba4:	20001d64 	.word	0x20001d64
 8010ba8:	2000169c 	.word	0x2000169c
 8010bac:	431bde83 	.word	0x431bde83
 8010bb0:	200016a0 	.word	0x200016a0
 8010bb4:	20000db4 	.word	0x20000db4
 8010bb8:	200016a4 	.word	0x200016a4
 8010bbc:	200017b1 	.word	0x200017b1
 8010bc0:	200017b4 	.word	0x200017b4
 8010bc4:	200017d4 	.word	0x200017d4
 8010bc8:	200017f4 	.word	0x200017f4
 8010bcc:	20001814 	.word	0x20001814
 8010bd0:	20001834 	.word	0x20001834
 8010bd4:	2000183c 	.word	0x2000183c
 8010bd8:	20001844 	.word	0x20001844
 8010bdc:	20001848 	.word	0x20001848
 8010be0:	20000848 	.word	0x20000848
 8010be4:	20001508 	.word	0x20001508
                }
                else {
                    pifTask_ChangeMode(g_task_compute_imu, TM_ALWAYS, 100);	    // 100%
 8010be8:	4b6d      	ldr	r3, [pc, #436]	; (8010da0 <evtMspReceive+0x18d8>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2264      	movs	r2, #100	; 0x64
 8010bee:	2101      	movs	r1, #1
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f003 fc2d 	bl	8014450 <pifTask_ChangeMode>
                }
            }
            mcfg.looptime = tmp;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	4b6a      	ldr	r3, [pc, #424]	; (8010da4 <evtMspReceive+0x18dc>)
 8010bfc:	819a      	strh	r2, [r3, #12]
        }
        cfg.locked_in = pifMsp_ReadData8(p_packet);
 8010bfe:	68b8      	ldr	r0, [r7, #8]
 8010c00:	f006 fd3e 	bl	8017680 <pifMsp_ReadData8>
 8010c04:	4603      	mov	r3, r0
 8010c06:	461a      	mov	r2, r3
 8010c08:	4b67      	ldr	r3, [pc, #412]	; (8010da8 <evtMspReceive+0x18e0>)
 8010c0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        /// ???
        break;
 8010c0e:	e0c0      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_CONFIG:
        pifMsp_AddAnswer8(p_owner, mcfg.mixerConfiguration);
 8010c10:	4b64      	ldr	r3, [pc, #400]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c12:	795b      	ldrb	r3, [r3, #5]
 8010c14:	4619      	mov	r1, r3
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f006 fdc8 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer32(p_owner, featureMask());
 8010c1c:	f7f6 f9a0 	bl	8006f60 <featureMask>
 8010c20:	4603      	mov	r3, r0
 8010c22:	4619      	mov	r1, r3
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f006 fe37 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer8(p_owner, mcfg.serialrx_type);
 8010c2a:	4b5e      	ldr	r3, [pc, #376]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c2c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010c30:	4619      	mov	r1, r3
 8010c32:	68f8      	ldr	r0, [r7, #12]
 8010c34:	f006 fdba 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_roll);
 8010c38:	4b5a      	ldr	r3, [pc, #360]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c3a:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	4619      	mov	r1, r3
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f006 fdea 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_pitch);
 8010c48:	4b56      	ldr	r3, [pc, #344]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c4a:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	4619      	mov	r1, r3
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f006 fde2 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.board_align_yaw);
 8010c58:	4b52      	ldr	r3, [pc, #328]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c5a:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	4619      	mov	r1, r3
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f006 fdda 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentscale);
 8010c68:	4b4e      	ldr	r3, [pc, #312]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c6a:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
 8010c6e:	4619      	mov	r1, r3
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f006 fdd3 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.currentoffset);
 8010c76:	4b4b      	ldr	r3, [pc, #300]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c78:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	68f8      	ldr	r0, [r7, #12]
 8010c80:	f006 fdcc 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer16(p_owner, mcfg.motor_pwm_rate);
 8010c84:	4b47      	ldr	r3, [pc, #284]	; (8010da4 <evtMspReceive+0x18dc>)
 8010c86:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f006 fdc5 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[0]);
 8010c92:	4b45      	ldr	r3, [pc, #276]	; (8010da8 <evtMspReceive+0x18e0>)
 8010c94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010c98:	4619      	mov	r1, r3
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f006 fd86 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.rollPitchRate[1]);
 8010ca0:	4b41      	ldr	r3, [pc, #260]	; (8010da8 <evtMspReceive+0x18e0>)
 8010ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f006 fd7f 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, mcfg.power_adc_channel);
 8010cae:	4b3d      	ldr	r3, [pc, #244]	; (8010da4 <evtMspReceive+0x18dc>)
 8010cb0:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f006 fd78 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer8(p_owner, cfg.small_angle);
 8010cbc:	4b3a      	ldr	r3, [pc, #232]	; (8010da8 <evtMspReceive+0x18e0>)
 8010cbe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f006 fd71 	bl	80177ac <pifMsp_AddAnswer8>
        pifMsp_AddAnswer16(p_owner, mcfg.looptime);
 8010cca:	4b36      	ldr	r3, [pc, #216]	; (8010da4 <evtMspReceive+0x18dc>)
 8010ccc:	899b      	ldrh	r3, [r3, #12]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f006 fda3 	bl	801781c <pifMsp_AddAnswer16>
        pifMsp_AddAnswer8(p_owner, cfg.locked_in);
 8010cd6:	4b34      	ldr	r3, [pc, #208]	; (8010da8 <evtMspReceive+0x18e0>)
 8010cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cdc:	4619      	mov	r1, r3
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f006 fd64 	bl	80177ac <pifMsp_AddAnswer8>
        /// ???
        break;
 8010ce4:	e055      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8010cea:	e00c      	b.n	8010d06 <evtMspReceive+0x183e>
            pifMsp_AddAnswer8(p_owner, mcfg.rcmap[i]);
 8010cec:	4a2d      	ldr	r2, [pc, #180]	; (8010da4 <evtMspReceive+0x18dc>)
 8010cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf0:	4413      	add	r3, r2
 8010cf2:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f006 fd56 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d02:	3301      	adds	r3, #1
 8010d04:	637b      	str	r3, [r7, #52]	; 0x34
 8010d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d08:	2b07      	cmp	r3, #7
 8010d0a:	d9ef      	bls.n	8010cec <evtMspReceive+0x1824>
        break;
 8010d0c:	e041      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_SET_RCMAP:
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d0e:	2300      	movs	r3, #0
 8010d10:	637b      	str	r3, [r7, #52]	; 0x34
 8010d12:	e00e      	b.n	8010d32 <evtMspReceive+0x186a>
            mcfg.rcmap[i] = pifMsp_ReadData8(p_packet);
 8010d14:	68b8      	ldr	r0, [r7, #8]
 8010d16:	f006 fcb3 	bl	8017680 <pifMsp_ReadData8>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4a21      	ldr	r2, [pc, #132]	; (8010da4 <evtMspReceive+0x18dc>)
 8010d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d22:	4413      	add	r3, r2
 8010d24:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8010d28:	460a      	mov	r2, r1
 8010d2a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < MAX_SERIAL_INPUTS; i++)
 8010d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d2e:	3301      	adds	r3, #1
 8010d30:	637b      	str	r3, [r7, #52]	; 0x34
 8010d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d34:	2b07      	cmp	r3, #7
 8010d36:	d9ed      	bls.n	8010d14 <evtMspReceive+0x184c>
        break;
 8010d38:	e02b      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_REBOOT:
        pendReboot = true;
 8010d3a:	4b1c      	ldr	r3, [pc, #112]	; (8010dac <evtMspReceive+0x18e4>)
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	701a      	strb	r2, [r3, #0]
        break;
 8010d40:	e027      	b.n	8010d92 <evtMspReceive+0x18ca>

    case MSP_BUILDINFO:
        for (i = 0; i < 11; i++)
 8010d42:	2300      	movs	r3, #0
 8010d44:	637b      	str	r3, [r7, #52]	; 0x34
 8010d46:	e00a      	b.n	8010d5e <evtMspReceive+0x1896>
            pifMsp_AddAnswer8(p_owner, build[i]); // MMM DD YYYY as ascii, MMM = Jan/Feb... etc
 8010d48:	69fa      	ldr	r2, [r7, #28]
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4c:	4413      	add	r3, r2
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	4619      	mov	r1, r3
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	f006 fd2a 	bl	80177ac <pifMsp_AddAnswer8>
        for (i = 0; i < 11; i++)
 8010d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d60:	2b0a      	cmp	r3, #10
 8010d62:	d9f1      	bls.n	8010d48 <evtMspReceive+0x1880>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010d64:	2100      	movs	r1, #0
 8010d66:	68f8      	ldr	r0, [r7, #12]
 8010d68:	f006 fd96 	bl	8017898 <pifMsp_AddAnswer32>
        pifMsp_AddAnswer32(p_owner, 0); // future exp
 8010d6c:	2100      	movs	r1, #0
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f006 fd92 	bl	8017898 <pifMsp_AddAnswer32>
        break;
 8010d74:	e00d      	b.n	8010d92 <evtMspReceive+0x18ca>

    default:                   // we do not know how to handle the (valid) message, indicate error MSP $M!
        pifMsp_MakeError(p_owner, p_packet);
 8010d76:	68b9      	ldr	r1, [r7, #8]
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f006 fe0b 	bl	8017994 <pifMsp_MakeError>
        break;
 8010d7e:	e008      	b.n	8010d92 <evtMspReceive+0x18ca>
        break;
 8010d80:	bf00      	nop
 8010d82:	e006      	b.n	8010d92 <evtMspReceive+0x18ca>
        break;
 8010d84:	bf00      	nop
 8010d86:	e004      	b.n	8010d92 <evtMspReceive+0x18ca>
        break;
 8010d88:	bf00      	nop
 8010d8a:	e002      	b.n	8010d92 <evtMspReceive+0x18ca>
        break;
 8010d8c:	bf00      	nop
 8010d8e:	e000      	b.n	8010d92 <evtMspReceive+0x18ca>
        break;
 8010d90:	bf00      	nop
    }
    pifMsp_SendAnswer(p_owner);
 8010d92:	68f8      	ldr	r0, [r7, #12]
 8010d94:	f006 fe3c 	bl	8017a10 <pifMsp_SendAnswer>
}
 8010d98:	bf00      	nop
 8010d9a:	373c      	adds	r7, #60	; 0x3c
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd90      	pop	{r4, r7, pc}
 8010da0:	20001508 	.word	0x20001508
 8010da4:	20000848 	.word	0x20000848
 8010da8:	20000db4 	.word	0x20000db4
 8010dac:	20001b7a 	.word	0x20001b7a

08010db0 <evtMspOtherPacket>:

static void evtMspOtherPacket(PifMsp* p_owner, uint8_t data, PifIssuerP p_issuer)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	460b      	mov	r3, r1
 8010dba:	607a      	str	r2, [r7, #4]
 8010dbc:	72fb      	strb	r3, [r7, #11]
    (void)p_owner;
    (void)p_issuer;

    if (f.ARMED) return;
 8010dbe:	4b0c      	ldr	r3, [pc, #48]	; (8010df0 <evtMspOtherPacket+0x40>)
 8010dc0:	785b      	ldrb	r3, [r3, #1]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d110      	bne.n	8010de8 <evtMspOtherPacket+0x38>

    if (data == '#')
 8010dc6:	7afb      	ldrb	r3, [r7, #11]
 8010dc8:	2b23      	cmp	r3, #35	; 0x23
 8010dca:	d103      	bne.n	8010dd4 <evtMspOtherPacket+0x24>
        s_change_cli = TRUE;
 8010dcc:	4b09      	ldr	r3, [pc, #36]	; (8010df4 <evtMspOtherPacket+0x44>)
 8010dce:	2201      	movs	r2, #1
 8010dd0:	701a      	strb	r2, [r3, #0]
 8010dd2:	e00a      	b.n	8010dea <evtMspOtherPacket+0x3a>
    else if (data == mcfg.reboot_character)
 8010dd4:	4b08      	ldr	r3, [pc, #32]	; (8010df8 <evtMspOtherPacket+0x48>)
 8010dd6:	f893 3569 	ldrb.w	r3, [r3, #1385]	; 0x569
 8010dda:	7afa      	ldrb	r2, [r7, #11]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d104      	bne.n	8010dea <evtMspOtherPacket+0x3a>
        systemReset(true);      // reboot to bootloader
 8010de0:	2001      	movs	r0, #1
 8010de2:	f7f1 f92d 	bl	8002040 <systemReset>
 8010de6:	e000      	b.n	8010dea <evtMspOtherPacket+0x3a>
    if (f.ARMED) return;
 8010de8:	bf00      	nop
}
 8010dea:	3710      	adds	r7, #16
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	200016b0 	.word	0x200016b0
 8010df4:	20001c34 	.word	0x20001c34
 8010df8:	20000848 	.word	0x20000848

08010dfc <serialCom>:

void serialCom(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
    if (s_change_cli) {
 8010e00:	4b0c      	ldr	r3, [pc, #48]	; (8010e34 <serialCom+0x38>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00b      	beq.n	8010e20 <serialCom+0x24>
        s_change_cli = FALSE;
 8010e08:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <serialCom+0x38>)
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	701a      	strb	r2, [r3, #0]

        pifMsp_DetachComm(&ports[0].pif_msp);
 8010e0e:	480a      	ldr	r0, [pc, #40]	; (8010e38 <serialCom+0x3c>)
 8010e10:	f006 fc10 	bl	8017634 <pifMsp_DetachComm>
        cliInit(&core.mainport->comm);
 8010e14:	4b09      	ldr	r3, [pc, #36]	; (8010e3c <serialCom+0x40>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	3304      	adds	r3, #4
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7f5 fa7e 	bl	800631c <cliInit>
    };

    if (pendReboot)
 8010e20:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <serialCom+0x44>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <serialCom+0x32>
        systemReset(false); // noreturn
 8010e28:	2000      	movs	r0, #0
 8010e2a:	f7f1 f909 	bl	8002040 <systemReset>
}
 8010e2e:	bf00      	nop
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	20001c34 	.word	0x20001c34
 8010e38:	20001b80 	.word	0x20001b80
 8010e3c:	20000790 	.word	0x20000790
 8010e40:	20001b7a 	.word	0x20001b7a

08010e44 <spektrumReadRawRC>:
static PifRcSpektrum s_spektrum;
static uint32_t spekChannelData[SPEK_2048_MAX_CHANNEL];


static uint16_t spektrumReadRawRC(uint8_t chan)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b085      	sub	sp, #20
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	71fb      	strb	r3, [r7, #7]
	uint16_t data;

    if (chan >= s_spektrum.parent._channel_count) {
 8010e4e:	4b0d      	ldr	r3, [pc, #52]	; (8010e84 <spektrumReadRawRC+0x40>)
 8010e50:	789b      	ldrb	r3, [r3, #2]
 8010e52:	79fa      	ldrb	r2, [r7, #7]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d304      	bcc.n	8010e62 <spektrumReadRawRC+0x1e>
        data = mcfg.midrc;
 8010e58:	4b0b      	ldr	r3, [pc, #44]	; (8010e88 <spektrumReadRawRC+0x44>)
 8010e5a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010e5e:	81fb      	strh	r3, [r7, #14]
 8010e60:	e009      	b.n	8010e76 <spektrumReadRawRC+0x32>
    } else {
        data = spekChannelData[mcfg.rcmap[chan]];
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	4a08      	ldr	r2, [pc, #32]	; (8010e88 <spektrumReadRawRC+0x44>)
 8010e66:	4413      	add	r3, r2
 8010e68:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	4b07      	ldr	r3, [pc, #28]	; (8010e8c <spektrumReadRawRC+0x48>)
 8010e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e74:	81fb      	strh	r3, [r7, #14]
    }

    return data;
 8010e76:	89fb      	ldrh	r3, [r7, #14]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3714      	adds	r7, #20
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	20001c38 	.word	0x20001c38
 8010e88:	20000848 	.word	0x20000848
 8010e8c:	20001c98 	.word	0x20001c98

08010e90 <_evtSpektrumReceive>:

static void _evtSpektrumReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b086      	sub	sp, #24
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
	int i;
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8010e9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010ea0:	f7f6 f816 	bl	8006ed0 <feature>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d005      	beq.n	8010eb6 <_evtSpektrumReceive+0x26>
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f006 fe0c 	bl	8017ac8 <pifRc_CheckFailSafe>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d11e      	bne.n	8010ef4 <_evtSpektrumReceive+0x64>

    failsafeCnt = 0;
 8010eb6:	4b11      	ldr	r3, [pc, #68]	; (8010efc <_evtSpektrumReceive+0x6c>)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < p_owner->_channel_count; i++) {
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	617b      	str	r3, [r7, #20]
 8010ec0:	e00c      	b.n	8010edc <_evtSpektrumReceive+0x4c>
        spekChannelData[i] = channel[i];
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	68ba      	ldr	r2, [r7, #8]
 8010ec8:	4413      	add	r3, r2
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4a0c      	ldr	r2, [pc, #48]	; (8010f00 <_evtSpektrumReceive+0x70>)
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < p_owner->_channel_count; i++) {
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	617b      	str	r3, [r7, #20]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	789b      	ldrb	r3, [r3, #2]
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	dbec      	blt.n	8010ec2 <_evtSpektrumReceive+0x32>
    }

	p_task = (PifTask*)p_issuer;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 8010eec:	6938      	ldr	r0, [r7, #16]
 8010eee:	f003 fb0f 	bl	8014510 <pifTask_SetTrigger>
 8010ef2:	e000      	b.n	8010ef6 <_evtSpektrumReceive+0x66>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8010ef4:	bf00      	nop
}
 8010ef6:	3718      	adds	r7, #24
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	200016e2 	.word	0x200016e2
 8010f00:	20001c98 	.word	0x20001c98

08010f04 <spektrumInit>:

BOOL spektrumInit(int uart, rcReadRawDataPtr *callback)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
    int b;
    uint8_t Protocol_id;

    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 8010f0e:	2300      	movs	r3, #0
 8010f10:	60fb      	str	r3, [r7, #12]
 8010f12:	e00a      	b.n	8010f2a <spektrumInit+0x26>
        spekChannelData[b] = mcfg.midrc;
 8010f14:	4b2b      	ldr	r3, [pc, #172]	; (8010fc4 <spektrumInit+0xc0>)
 8010f16:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4a2a      	ldr	r2, [pc, #168]	; (8010fc8 <spektrumInit+0xc4>)
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (b = 0; b < SPEK_2048_MAX_CHANNEL; b++)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	3301      	adds	r3, #1
 8010f28:	60fb      	str	r3, [r7, #12]
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2b07      	cmp	r3, #7
 8010f2e:	ddf1      	ble.n	8010f14 <spektrumInit+0x10>

    switch (mcfg.serialrx_type) {
 8010f30:	4b24      	ldr	r3, [pc, #144]	; (8010fc4 <spektrumInit+0xc0>)
 8010f32:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d004      	beq.n	8010f44 <spektrumInit+0x40>
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d105      	bne.n	8010f4a <spektrumInit+0x46>
    case SERIALRX_SPEKTRUM2048:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS;
 8010f3e:	23a2      	movs	r3, #162	; 0xa2
 8010f40:	72fb      	strb	r3, [r7, #11]
        break;
 8010f42:	e004      	b.n	8010f4e <spektrumInit+0x4a>

    case SERIALRX_SPEKTRUM1024:
        Protocol_id = PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2;
 8010f44:	2301      	movs	r3, #1
 8010f46:	72fb      	strb	r3, [r7, #11]
        break;
 8010f48:	e001      	b.n	8010f4e <spektrumInit+0x4a>

    default:
        return FALSE;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	e035      	b.n	8010fba <spektrumInit+0xb6>
    }

    // spekUart is set by spektrumBind() which is called very early at startup
    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);		// 2ms
 8010f4e:	2302      	movs	r3, #2
 8010f50:	2201      	movs	r2, #1
 8010f52:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f7f1 f9d0 	bl	80022fc <uartOpen>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	4a1b      	ldr	r2, [pc, #108]	; (8010fcc <spektrumInit+0xc8>)
 8010f60:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 8010f62:	4b1a      	ldr	r3, [pc, #104]	; (8010fcc <spektrumInit+0xc8>)
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d101      	bne.n	8010f6e <spektrumInit+0x6a>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	e025      	b.n	8010fba <spektrumInit+0xb6>

    if (!pifRcSpektrum_Init(&s_spektrum, PIF_ID_AUTO, Protocol_id)) return FALSE;
 8010f6e:	7afb      	ldrb	r3, [r7, #11]
 8010f70:	461a      	mov	r2, r3
 8010f72:	2100      	movs	r1, #0
 8010f74:	4816      	ldr	r0, [pc, #88]	; (8010fd0 <spektrumInit+0xcc>)
 8010f76:	f007 fd57 	bl	8018a28 <pifRcSpektrum_Init>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d101      	bne.n	8010f84 <spektrumInit+0x80>
 8010f80:	2300      	movs	r3, #0
 8010f82:	e01a      	b.n	8010fba <spektrumInit+0xb6>
    pifRc_AttachEvtReceive(&s_spektrum.parent, _evtSpektrumReceive, g_task_compute_rc);
 8010f84:	4b13      	ldr	r3, [pc, #76]	; (8010fd4 <spektrumInit+0xd0>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	461a      	mov	r2, r3
 8010f8a:	4913      	ldr	r1, [pc, #76]	; (8010fd8 <spektrumInit+0xd4>)
 8010f8c:	4810      	ldr	r0, [pc, #64]	; (8010fd0 <spektrumInit+0xcc>)
 8010f8e:	f006 fd89 	bl	8017aa4 <pifRc_AttachEvtReceive>
    pifRcSpektrum_AttachComm(&s_spektrum, &core.rcvrport->comm);
 8010f92:	4b0e      	ldr	r3, [pc, #56]	; (8010fcc <spektrumInit+0xc8>)
 8010f94:	691b      	ldr	r3, [r3, #16]
 8010f96:	3304      	adds	r3, #4
 8010f98:	4619      	mov	r1, r3
 8010f9a:	480d      	ldr	r0, [pc, #52]	; (8010fd0 <spektrumInit+0xcc>)
 8010f9c:	f007 fdd8 	bl	8018b50 <pifRcSpektrum_AttachComm>

    if (callback)
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d002      	beq.n	8010fac <spektrumInit+0xa8>
        *callback = spektrumReadRawRC;
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	4a0c      	ldr	r2, [pc, #48]	; (8010fdc <spektrumInit+0xd8>)
 8010faa:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 8010fac:	4b07      	ldr	r3, [pc, #28]	; (8010fcc <spektrumInit+0xc8>)
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7f1 fb0e 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 8010fb8:	2301      	movs	r3, #1
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3710      	adds	r7, #16
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	20000848 	.word	0x20000848
 8010fc8:	20001c98 	.word	0x20001c98
 8010fcc:	20000790 	.word	0x20000790
 8010fd0:	20001c38 	.word	0x20001c38
 8010fd4:	2000150c 	.word	0x2000150c
 8010fd8:	08010e91 	.word	0x08010e91
 8010fdc:	08010e45 	.word	0x08010e45

08010fe0 <sumdReadRawRC>:
static PifRcSumd s_sumd;
static uint32_t sumdChannelData[SUMD_MAX_CHANNEL];


static uint16_t sumdReadRawRC(uint8_t chan)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	71fb      	strb	r3, [r7, #7]
    return sumdChannelData[mcfg.rcmap[chan]];
 8010fea:	79fb      	ldrb	r3, [r7, #7]
 8010fec:	4a07      	ldr	r2, [pc, #28]	; (801100c <sumdReadRawRC+0x2c>)
 8010fee:	4413      	add	r3, r2
 8010ff0:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	4b06      	ldr	r3, [pc, #24]	; (8011010 <sumdReadRawRC+0x30>)
 8010ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ffc:	b29b      	uxth	r3, r3
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	370c      	adds	r7, #12
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	20000848 	.word	0x20000848
 8011010:	20001d28 	.word	0x20001d28

08011014 <_evtSumdReceive>:

static void _evtSumdReceive(PifRc* p_owner, uint16_t* channel, PifIssuerP p_issuer)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b086      	sub	sp, #24
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
    PifTask* p_task;

    // internal failsafe enabled and rx failsafe flag set
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011020:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011024:	f7f5 ff54 	bl	8006ed0 <feature>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	d005      	beq.n	801103a <_evtSumdReceive+0x26>
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	f006 fd4a 	bl	8017ac8 <pifRc_CheckFailSafe>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d11b      	bne.n	8011072 <_evtSumdReceive+0x5e>

	failsafeCnt = 0;
 801103a:	4b10      	ldr	r3, [pc, #64]	; (801107c <_evtSumdReceive+0x68>)
 801103c:	2200      	movs	r2, #0
 801103e:	801a      	strh	r2, [r3, #0]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 8011040:	2300      	movs	r3, #0
 8011042:	617b      	str	r3, [r7, #20]
 8011044:	e00c      	b.n	8011060 <_evtSumdReceive+0x4c>
		sumdChannelData[b] = channel[b];
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	4413      	add	r3, r2
 801104e:	881b      	ldrh	r3, [r3, #0]
 8011050:	4619      	mov	r1, r3
 8011052:	4a0b      	ldr	r2, [pc, #44]	; (8011080 <_evtSumdReceive+0x6c>)
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int b = 0; b < SUMD_MAX_CHANNEL; b++)
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	3301      	adds	r3, #1
 801105e:	617b      	str	r3, [r7, #20]
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	2b07      	cmp	r3, #7
 8011064:	ddef      	ble.n	8011046 <_evtSumdReceive+0x32>

	p_task = (PifTask*)p_issuer;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	613b      	str	r3, [r7, #16]
	pifTask_SetTrigger(p_task);
 801106a:	6938      	ldr	r0, [r7, #16]
 801106c:	f003 fa50 	bl	8014510 <pifTask_SetTrigger>
 8011070:	e000      	b.n	8011074 <_evtSumdReceive+0x60>
    if (feature(FEATURE_FAILSAFE) && pifRc_CheckFailSafe(p_owner)) return;
 8011072:	bf00      	nop
}
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	200016e2 	.word	0x200016e2
 8011080:	20001d28 	.word	0x20001d28

08011084 <sumdInit>:

BOOL sumdInit(int uart, rcReadRawDataPtr *callback)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
    core.rcvrport = uartOpen(uart, 115200, MODE_RX, 2);		// 2ms
 801108e:	2302      	movs	r3, #2
 8011090:	2201      	movs	r2, #1
 8011092:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f7f1 f930 	bl	80022fc <uartOpen>
 801109c:	4603      	mov	r3, r0
 801109e:	4a18      	ldr	r2, [pc, #96]	; (8011100 <sumdInit+0x7c>)
 80110a0:	6113      	str	r3, [r2, #16]
    if (!core.rcvrport) return FALSE;
 80110a2:	4b17      	ldr	r3, [pc, #92]	; (8011100 <sumdInit+0x7c>)
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d101      	bne.n	80110ae <sumdInit+0x2a>
 80110aa:	2300      	movs	r3, #0
 80110ac:	e023      	b.n	80110f6 <sumdInit+0x72>

    if (!pifRcSumd_Init(&s_sumd, PIF_ID_AUTO)) return FALSE;
 80110ae:	2100      	movs	r1, #0
 80110b0:	4814      	ldr	r0, [pc, #80]	; (8011104 <sumdInit+0x80>)
 80110b2:	f007 fe57 	bl	8018d64 <pifRcSumd_Init>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d101      	bne.n	80110c0 <sumdInit+0x3c>
 80110bc:	2300      	movs	r3, #0
 80110be:	e01a      	b.n	80110f6 <sumdInit+0x72>
    pifRc_AttachEvtReceive(&s_sumd.parent, _evtSumdReceive, g_task_compute_rc);
 80110c0:	4b11      	ldr	r3, [pc, #68]	; (8011108 <sumdInit+0x84>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	461a      	mov	r2, r3
 80110c6:	4911      	ldr	r1, [pc, #68]	; (801110c <sumdInit+0x88>)
 80110c8:	480e      	ldr	r0, [pc, #56]	; (8011104 <sumdInit+0x80>)
 80110ca:	f006 fceb 	bl	8017aa4 <pifRc_AttachEvtReceive>
    pifRcSumd_AttachComm(&s_sumd, &core.rcvrport->comm);
 80110ce:	4b0c      	ldr	r3, [pc, #48]	; (8011100 <sumdInit+0x7c>)
 80110d0:	691b      	ldr	r3, [r3, #16]
 80110d2:	3304      	adds	r3, #4
 80110d4:	4619      	mov	r1, r3
 80110d6:	480b      	ldr	r0, [pc, #44]	; (8011104 <sumdInit+0x80>)
 80110d8:	f007 fe78 	bl	8018dcc <pifRcSumd_AttachComm>

    if (callback)
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d002      	beq.n	80110e8 <sumdInit+0x64>
        *callback = sumdReadRawRC;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	4a0a      	ldr	r2, [pc, #40]	; (8011110 <sumdInit+0x8c>)
 80110e6:	601a      	str	r2, [r3, #0]

    serialStartReceiveFunc(&core.rcvrport->comm);
 80110e8:	4b05      	ldr	r3, [pc, #20]	; (8011100 <sumdInit+0x7c>)
 80110ea:	691b      	ldr	r3, [r3, #16]
 80110ec:	3304      	adds	r3, #4
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f1 fa70 	bl	80025d4 <serialStartReceiveFunc>

    return TRUE;
 80110f4:	2301      	movs	r3, #1
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20000790 	.word	0x20000790
 8011104:	20001cb8 	.word	0x20001cb8
 8011108:	2000150c 	.word	0x2000150c
 801110c:	08011015 	.word	0x08011015
 8011110:	08010fe1 	.word	0x08010fe1

08011114 <pif_Init>:
void PIF_WEAK pifSequenceColSig_Clear() {}

#endif

void pif_Init(PifActTimer1us act_timer1us)
{
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
	pif_act_timer1us = act_timer1us;
 801111c:	4a07      	ldr	r2, [pc, #28]	; (801113c <pif_Init+0x28>)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6013      	str	r3, [r2, #0]

	pif_datetime.month = 1;
 8011122:	4b07      	ldr	r3, [pc, #28]	; (8011140 <pif_Init+0x2c>)
 8011124:	2201      	movs	r2, #1
 8011126:	705a      	strb	r2, [r3, #1]
	pif_datetime.day = 1;
 8011128:	4b05      	ldr	r3, [pc, #20]	; (8011140 <pif_Init+0x2c>)
 801112a:	2201      	movs	r2, #1
 801112c:	709a      	strb	r2, [r3, #2]
    pifSensorDigitalColSig_Init();
    pifSensorSwitchColSig_Init();
    pifSolenoidColSig_Init();
    pifSequenceColSig_Init();
#endif
}
 801112e:	bf00      	nop
 8011130:	370c      	adds	r7, #12
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	20001d6c 	.word	0x20001d6c
 8011140:	20001d58 	.word	0x20001d58

08011144 <pif_sigTimer1ms>:
    pifSequenceColSig_Clear();
#endif
}

void pif_sigTimer1ms()
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
	uint8_t days;
	uint16_t year;

	pif_cumulative_timer1ms++;
 801114a:	4b53      	ldr	r3, [pc, #332]	; (8011298 <pif_sigTimer1ms+0x154>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	3301      	adds	r3, #1
 8011150:	4a51      	ldr	r2, [pc, #324]	; (8011298 <pif_sigTimer1ms+0x154>)
 8011152:	6013      	str	r3, [r2, #0]
    pif_timer1ms++;
 8011154:	4b51      	ldr	r3, [pc, #324]	; (801129c <pif_sigTimer1ms+0x158>)
 8011156:	881b      	ldrh	r3, [r3, #0]
 8011158:	b29b      	uxth	r3, r3
 801115a:	3301      	adds	r3, #1
 801115c:	b29a      	uxth	r2, r3
 801115e:	4b4f      	ldr	r3, [pc, #316]	; (801129c <pif_sigTimer1ms+0x158>)
 8011160:	801a      	strh	r2, [r3, #0]
    if (pif_timer1ms >= 1000) {
 8011162:	4b4e      	ldr	r3, [pc, #312]	; (801129c <pif_sigTimer1ms+0x158>)
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	b29b      	uxth	r3, r3
 8011168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801116c:	f0c0 8086 	bcc.w	801127c <pif_sigTimer1ms+0x138>
        pif_timer1ms = 0;
 8011170:	4b4a      	ldr	r3, [pc, #296]	; (801129c <pif_sigTimer1ms+0x158>)
 8011172:	2200      	movs	r2, #0
 8011174:	801a      	strh	r2, [r3, #0]

        pif_timer1sec++;
 8011176:	4b4a      	ldr	r3, [pc, #296]	; (80112a0 <pif_sigTimer1ms+0x15c>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	3301      	adds	r3, #1
 801117c:	4a48      	ldr	r2, [pc, #288]	; (80112a0 <pif_sigTimer1ms+0x15c>)
 801117e:	6013      	str	r3, [r2, #0]
    	pif_datetime.second++;
 8011180:	4b48      	ldr	r3, [pc, #288]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011182:	795b      	ldrb	r3, [r3, #5]
 8011184:	b2db      	uxtb	r3, r3
 8011186:	3301      	adds	r3, #1
 8011188:	b2da      	uxtb	r2, r3
 801118a:	4b46      	ldr	r3, [pc, #280]	; (80112a4 <pif_sigTimer1ms+0x160>)
 801118c:	715a      	strb	r2, [r3, #5]
    	if (pif_datetime.second >= 60) {
 801118e:	4b45      	ldr	r3, [pc, #276]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011190:	795b      	ldrb	r3, [r3, #5]
 8011192:	b2db      	uxtb	r3, r3
 8011194:	2b3b      	cmp	r3, #59	; 0x3b
 8011196:	d96a      	bls.n	801126e <pif_sigTimer1ms+0x12a>
    		pif_datetime.second = 0;
 8011198:	4b42      	ldr	r3, [pc, #264]	; (80112a4 <pif_sigTimer1ms+0x160>)
 801119a:	2200      	movs	r2, #0
 801119c:	715a      	strb	r2, [r3, #5]
    		pif_datetime.minute++;
 801119e:	4b41      	ldr	r3, [pc, #260]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111a0:	791b      	ldrb	r3, [r3, #4]
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	3301      	adds	r3, #1
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	4b3e      	ldr	r3, [pc, #248]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111aa:	711a      	strb	r2, [r3, #4]
    		if (pif_datetime.minute >= 60) {
 80111ac:	4b3d      	ldr	r3, [pc, #244]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111ae:	791b      	ldrb	r3, [r3, #4]
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b3b      	cmp	r3, #59	; 0x3b
 80111b4:	d95b      	bls.n	801126e <pif_sigTimer1ms+0x12a>
    			pif_datetime.minute = 0;
 80111b6:	4b3b      	ldr	r3, [pc, #236]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111b8:	2200      	movs	r2, #0
 80111ba:	711a      	strb	r2, [r3, #4]
    			pif_datetime.hour++;
 80111bc:	4b39      	ldr	r3, [pc, #228]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111be:	78db      	ldrb	r3, [r3, #3]
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	3301      	adds	r3, #1
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	4b37      	ldr	r3, [pc, #220]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111c8:	70da      	strb	r2, [r3, #3]
    			if (pif_datetime.hour >= 24) {
 80111ca:	4b36      	ldr	r3, [pc, #216]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111cc:	78db      	ldrb	r3, [r3, #3]
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b17      	cmp	r3, #23
 80111d2:	d94c      	bls.n	801126e <pif_sigTimer1ms+0x12a>
    				pif_datetime.hour = 0;
 80111d4:	4b33      	ldr	r3, [pc, #204]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	70da      	strb	r2, [r3, #3]
    				pif_datetime.day++;
 80111da:	4b32      	ldr	r3, [pc, #200]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111dc:	789b      	ldrb	r3, [r3, #2]
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	3301      	adds	r3, #1
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	4b2f      	ldr	r3, [pc, #188]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111e6:	709a      	strb	r2, [r3, #2]
    				days = kDaysInMonth[pif_datetime.month - 1];
 80111e8:	4b2e      	ldr	r3, [pc, #184]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	3b01      	subs	r3, #1
 80111f0:	4a2d      	ldr	r2, [pc, #180]	; (80112a8 <pif_sigTimer1ms+0x164>)
 80111f2:	5cd3      	ldrb	r3, [r2, r3]
 80111f4:	71fb      	strb	r3, [r7, #7]
    				if (pif_datetime.month == 2) {
 80111f6:	4b2b      	ldr	r3, [pc, #172]	; (80112a4 <pif_sigTimer1ms+0x160>)
 80111f8:	785b      	ldrb	r3, [r3, #1]
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	2b02      	cmp	r3, #2
 80111fe:	d117      	bne.n	8011230 <pif_sigTimer1ms+0xec>
    					year = 2000 + pif_datetime.year;
 8011200:	4b28      	ldr	r3, [pc, #160]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	b2db      	uxtb	r3, r3
 8011206:	b29b      	uxth	r3, r3
 8011208:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801120c:	80bb      	strh	r3, [r7, #4]
    					if (year / 4 == 0) {
 801120e:	88bb      	ldrh	r3, [r7, #4]
 8011210:	2b03      	cmp	r3, #3
 8011212:	d80d      	bhi.n	8011230 <pif_sigTimer1ms+0xec>
    						if (year / 100 == 0) {
 8011214:	88bb      	ldrh	r3, [r7, #4]
 8011216:	2b63      	cmp	r3, #99	; 0x63
 8011218:	d807      	bhi.n	801122a <pif_sigTimer1ms+0xe6>
    							if (year / 400 == 0) days++;
 801121a:	88bb      	ldrh	r3, [r7, #4]
 801121c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8011220:	d206      	bcs.n	8011230 <pif_sigTimer1ms+0xec>
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	3301      	adds	r3, #1
 8011226:	71fb      	strb	r3, [r7, #7]
 8011228:	e002      	b.n	8011230 <pif_sigTimer1ms+0xec>
    						}
    						else days++;
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	3301      	adds	r3, #1
 801122e:	71fb      	strb	r3, [r7, #7]
    					}
    				}
    				if (pif_datetime.day > days) {
 8011230:	4b1c      	ldr	r3, [pc, #112]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011232:	789b      	ldrb	r3, [r3, #2]
 8011234:	b2db      	uxtb	r3, r3
 8011236:	79fa      	ldrb	r2, [r7, #7]
 8011238:	429a      	cmp	r2, r3
 801123a:	d218      	bcs.n	801126e <pif_sigTimer1ms+0x12a>
    					pif_datetime.day = 1;
 801123c:	4b19      	ldr	r3, [pc, #100]	; (80112a4 <pif_sigTimer1ms+0x160>)
 801123e:	2201      	movs	r2, #1
 8011240:	709a      	strb	r2, [r3, #2]
    					pif_datetime.month++;
 8011242:	4b18      	ldr	r3, [pc, #96]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011244:	785b      	ldrb	r3, [r3, #1]
 8011246:	b2db      	uxtb	r3, r3
 8011248:	3301      	adds	r3, #1
 801124a:	b2da      	uxtb	r2, r3
 801124c:	4b15      	ldr	r3, [pc, #84]	; (80112a4 <pif_sigTimer1ms+0x160>)
 801124e:	705a      	strb	r2, [r3, #1]
    					if (pif_datetime.month > 12) {
 8011250:	4b14      	ldr	r3, [pc, #80]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011252:	785b      	ldrb	r3, [r3, #1]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	2b0c      	cmp	r3, #12
 8011258:	d909      	bls.n	801126e <pif_sigTimer1ms+0x12a>
    						pif_datetime.month = 1;
 801125a:	4b12      	ldr	r3, [pc, #72]	; (80112a4 <pif_sigTimer1ms+0x160>)
 801125c:	2201      	movs	r2, #1
 801125e:	705a      	strb	r2, [r3, #1]
    						pif_datetime.year++;
 8011260:	4b10      	ldr	r3, [pc, #64]	; (80112a4 <pif_sigTimer1ms+0x160>)
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	b2db      	uxtb	r3, r3
 8011266:	3301      	adds	r3, #1
 8011268:	b2da      	uxtb	r2, r3
 801126a:	4b0e      	ldr	r3, [pc, #56]	; (80112a4 <pif_sigTimer1ms+0x160>)
 801126c:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_DEBUG__
        	pif_performance.__state |= 4;
#endif			
    	}

    	pif_performance.__state |= 2;
 801126e:	4b0f      	ldr	r3, [pc, #60]	; (80112ac <pif_sigTimer1ms+0x168>)
 8011270:	795b      	ldrb	r3, [r3, #5]
 8011272:	f043 0302 	orr.w	r3, r3, #2
 8011276:	b2da      	uxtb	r2, r3
 8011278:	4b0c      	ldr	r3, [pc, #48]	; (80112ac <pif_sigTimer1ms+0x168>)
 801127a:	715a      	strb	r2, [r3, #5]
    }

   	pif_performance.__state |= 1;
 801127c:	4b0b      	ldr	r3, [pc, #44]	; (80112ac <pif_sigTimer1ms+0x168>)
 801127e:	795b      	ldrb	r3, [r3, #5]
 8011280:	f043 0301 	orr.w	r3, r3, #1
 8011284:	b2da      	uxtb	r2, r3
 8011286:	4b09      	ldr	r3, [pc, #36]	; (80112ac <pif_sigTimer1ms+0x168>)
 8011288:	715a      	strb	r2, [r3, #5]
}
 801128a:	bf00      	nop
 801128c:	370c      	adds	r7, #12
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop
 8011298:	20001d60 	.word	0x20001d60
 801129c:	20001d50 	.word	0x20001d50
 80112a0:	20001d54 	.word	0x20001d54
 80112a4:	20001d58 	.word	0x20001d58
 80112a8:	08029370 	.word	0x08029370
 80112ac:	20001d64 	.word	0x20001d64

080112b0 <pif_Delay1ms>:

void pif_Delay1ms(uint16_t delay)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = pif_cumulative_timer1ms;
 80112ba:	4b0a      	ldr	r3, [pc, #40]	; (80112e4 <pif_Delay1ms+0x34>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	60fb      	str	r3, [r7, #12]
	do {
		diff = pif_cumulative_timer1ms - start;
 80112c0:	4b08      	ldr	r3, [pc, #32]	; (80112e4 <pif_Delay1ms+0x34>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 80112ce:	897a      	ldrh	r2, [r7, #10]
 80112d0:	88fb      	ldrh	r3, [r7, #6]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d3f4      	bcc.n	80112c0 <pif_Delay1ms+0x10>
}
 80112d6:	bf00      	nop
 80112d8:	bf00      	nop
 80112da:	3714      	adds	r7, #20
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	20001d60 	.word	0x20001d60

080112e8 <pif_Delay1us>:

void pif_Delay1us(uint16_t delay)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	4603      	mov	r3, r0
 80112f0:	80fb      	strh	r3, [r7, #6]
	uint32_t start;
	uint16_t diff;

	start = (*pif_act_timer1us)();
 80112f2:	4b0b      	ldr	r3, [pc, #44]	; (8011320 <pif_Delay1us+0x38>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4798      	blx	r3
 80112f8:	60f8      	str	r0, [r7, #12]
	do {
		diff = (*pif_act_timer1us)() - start;
 80112fa:	4b09      	ldr	r3, [pc, #36]	; (8011320 <pif_Delay1us+0x38>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4798      	blx	r3
 8011300:	4603      	mov	r3, r0
 8011302:	b29a      	uxth	r2, r3
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	b29b      	uxth	r3, r3
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	817b      	strh	r3, [r7, #10]
	} while (diff < delay);
 801130c:	897a      	ldrh	r2, [r7, #10]
 801130e:	88fb      	ldrh	r3, [r7, #6]
 8011310:	429a      	cmp	r2, r3
 8011312:	d3f2      	bcc.n	80112fa <pif_Delay1us+0x12>
}
 8011314:	bf00      	nop
 8011316:	bf00      	nop
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	20001d6c 	.word	0x20001d6c

08011324 <pif_BinToString>:
{
	pif_error = E_SUCCESS;
}

int pif_BinToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 8011324:	b480      	push	{r7}
 8011326:	b089      	sub	sp, #36	; 0x24
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	4613      	mov	r3, r2
 8011330:	80fb      	strh	r3, [r7, #6]
	int i, idx = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	61bb      	str	r3, [r7, #24]
	BOOL first;
    uint32_t tmp_val;

    if (str_cnt) {
 8011336:	88fb      	ldrh	r3, [r7, #6]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d01b      	beq.n	8011374 <pif_BinToString+0x50>
    	for (i = str_cnt - 1; i >= 0; i--) {
 801133c:	88fb      	ldrh	r3, [r7, #6]
 801133e:	3b01      	subs	r3, #1
 8011340:	61fb      	str	r3, [r7, #28]
 8011342:	e013      	b.n	801136c <pif_BinToString+0x48>
    		p_buffer[idx++] = '0' + ((value >> i) & 1);
 8011344:	68ba      	ldr	r2, [r7, #8]
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	fa22 f303 	lsr.w	r3, r2, r3
 801134c:	b2db      	uxtb	r3, r3
 801134e:	f003 0301 	and.w	r3, r3, #1
 8011352:	b2da      	uxtb	r2, r3
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	1c59      	adds	r1, r3, #1
 8011358:	61b9      	str	r1, [r7, #24]
 801135a:	4619      	mov	r1, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	440b      	add	r3, r1
 8011360:	3230      	adds	r2, #48	; 0x30
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	701a      	strb	r2, [r3, #0]
    	for (i = str_cnt - 1; i >= 0; i--) {
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	3b01      	subs	r3, #1
 801136a:	61fb      	str	r3, [r7, #28]
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	2b00      	cmp	r3, #0
 8011370:	dae8      	bge.n	8011344 <pif_BinToString+0x20>
 8011372:	e030      	b.n	80113d6 <pif_BinToString+0xb2>
    	}
    }
    else if (value > 0) {
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d025      	beq.n	80113c6 <pif_BinToString+0xa2>
    	first = TRUE;
 801137a:	2301      	movs	r3, #1
 801137c:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 801137e:	231f      	movs	r3, #31
 8011380:	61fb      	str	r3, [r7, #28]
 8011382:	e01c      	b.n	80113be <pif_BinToString+0x9a>
    		tmp_val = (value >> i) & 1;
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	69fb      	ldr	r3, [r7, #28]
 8011388:	fa22 f303 	lsr.w	r3, r2, r3
 801138c:	f003 0301 	and.w	r3, r3, #1
 8011390:	613b      	str	r3, [r7, #16]
    		if (!first || tmp_val) {
 8011392:	7dfb      	ldrb	r3, [r7, #23]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <pif_BinToString+0x7a>
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00c      	beq.n	80113b8 <pif_BinToString+0x94>
    			p_buffer[idx++] = '0' + tmp_val;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	1c59      	adds	r1, r3, #1
 80113a6:	61b9      	str	r1, [r7, #24]
 80113a8:	4619      	mov	r1, r3
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	440b      	add	r3, r1
 80113ae:	3230      	adds	r2, #48	; 0x30
 80113b0:	b2d2      	uxtb	r2, r2
 80113b2:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80113b4:	2300      	movs	r3, #0
 80113b6:	75fb      	strb	r3, [r7, #23]
    	for (i = 31; i >= 0; i--) {
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	61fb      	str	r3, [r7, #28]
 80113be:	69fb      	ldr	r3, [r7, #28]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	dadf      	bge.n	8011384 <pif_BinToString+0x60>
 80113c4:	e007      	b.n	80113d6 <pif_BinToString+0xb2>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	1c5a      	adds	r2, r3, #1
 80113ca:	61ba      	str	r2, [r7, #24]
 80113cc:	461a      	mov	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	4413      	add	r3, r2
 80113d2:	2230      	movs	r2, #48	; 0x30
 80113d4:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80113d6:	69bb      	ldr	r3, [r7, #24]
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3724      	adds	r7, #36	; 0x24
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr

080113e4 <pif_DecToString>:

int pif_DecToString(char* p_buffer, uint32_t value, uint16_t str_cnt)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b08d      	sub	sp, #52	; 0x34
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	4613      	mov	r3, r2
 80113f0:	80fb      	strh	r3, [r7, #6]
    uint16_t exp_cnt = 0;
 80113f2:	2300      	movs	r3, #0
 80113f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t zero_str_cnt = 0;
 80113f6:	2300      	movs	r3, #0
 80113f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int idx = 0;
 80113fa:	2300      	movs	r3, #0
 80113fc:	62bb      	str	r3, [r7, #40]	; 0x28
    uint32_t idx_inv = 0;
 80113fe:	2300      	movs	r3, #0
 8011400:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t tmp_val;
    char inv_buf[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8011402:	4a43      	ldr	r2, [pc, #268]	; (8011510 <pif_DecToString+0x12c>)
 8011404:	f107 0314 	add.w	r3, r7, #20
 8011408:	ca07      	ldmia	r2, {r0, r1, r2}
 801140a:	c303      	stmia	r3!, {r0, r1}
 801140c:	801a      	strh	r2, [r3, #0]
 801140e:	3302      	adds	r3, #2
 8011410:	0c12      	lsrs	r2, r2, #16
 8011412:	701a      	strb	r2, [r3, #0]

    tmp_val = value;
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	623b      	str	r3, [r7, #32]
    if (tmp_val != 0) {
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d05e      	beq.n	80114dc <pif_DecToString+0xf8>
        while (tmp_val) {
 801141e:	e02c      	b.n	801147a <pif_DecToString+0x96>
        	exp_cnt++;
 8011420:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011422:	3301      	adds	r3, #1
 8011424:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if (tmp_val >= 10) {
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	2b09      	cmp	r3, #9
 801142a:	d914      	bls.n	8011456 <pif_DecToString+0x72>
                inv_buf[idx_inv++] = (tmp_val % 10) + '0';
 801142c:	6a39      	ldr	r1, [r7, #32]
 801142e:	4b39      	ldr	r3, [pc, #228]	; (8011514 <pif_DecToString+0x130>)
 8011430:	fba3 2301 	umull	r2, r3, r3, r1
 8011434:	08da      	lsrs	r2, r3, #3
 8011436:	4613      	mov	r3, r2
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	4413      	add	r3, r2
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	1aca      	subs	r2, r1, r3
 8011440:	b2d2      	uxtb	r2, r2
 8011442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011444:	1c59      	adds	r1, r3, #1
 8011446:	6279      	str	r1, [r7, #36]	; 0x24
 8011448:	3230      	adds	r2, #48	; 0x30
 801144a:	b2d2      	uxtb	r2, r2
 801144c:	3330      	adds	r3, #48	; 0x30
 801144e:	443b      	add	r3, r7
 8011450:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8011454:	e00b      	b.n	801146e <pif_DecToString+0x8a>
            }
            else {
                inv_buf[idx_inv++] = tmp_val + '0';
 8011456:	6a3b      	ldr	r3, [r7, #32]
 8011458:	b2da      	uxtb	r2, r3
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	1c59      	adds	r1, r3, #1
 801145e:	6279      	str	r1, [r7, #36]	; 0x24
 8011460:	3230      	adds	r2, #48	; 0x30
 8011462:	b2d2      	uxtb	r2, r2
 8011464:	3330      	adds	r3, #48	; 0x30
 8011466:	443b      	add	r3, r7
 8011468:	f803 2c1c 	strb.w	r2, [r3, #-28]
                break;
 801146c:	e008      	b.n	8011480 <pif_DecToString+0x9c>
            }
            tmp_val = tmp_val / 10;
 801146e:	6a3b      	ldr	r3, [r7, #32]
 8011470:	4a28      	ldr	r2, [pc, #160]	; (8011514 <pif_DecToString+0x130>)
 8011472:	fba2 2303 	umull	r2, r3, r2, r3
 8011476:	08db      	lsrs	r3, r3, #3
 8011478:	623b      	str	r3, [r7, #32]
        while (tmp_val) {
 801147a:	6a3b      	ldr	r3, [r7, #32]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d1cf      	bne.n	8011420 <pif_DecToString+0x3c>
        }

        if ((str_cnt != 0) && (exp_cnt < str_cnt)) {
 8011480:	88fb      	ldrh	r3, [r7, #6]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d026      	beq.n	80114d4 <pif_DecToString+0xf0>
 8011486:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011488:	88fb      	ldrh	r3, [r7, #6]
 801148a:	429a      	cmp	r2, r3
 801148c:	d222      	bcs.n	80114d4 <pif_DecToString+0xf0>
            zero_str_cnt = str_cnt - exp_cnt;
 801148e:	88fa      	ldrh	r2, [r7, #6]
 8011490:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 8011496:	e00a      	b.n	80114ae <pif_DecToString+0xca>
            	p_buffer[idx++] = '0';
 8011498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801149a:	1c5a      	adds	r2, r3, #1
 801149c:	62ba      	str	r2, [r7, #40]	; 0x28
 801149e:	461a      	mov	r2, r3
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	4413      	add	r3, r2
 80114a4:	2230      	movs	r2, #48	; 0x30
 80114a6:	701a      	strb	r2, [r3, #0]
                zero_str_cnt--;
 80114a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114aa:	3b01      	subs	r3, #1
 80114ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (zero_str_cnt) {
 80114ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d1f1      	bne.n	8011498 <pif_DecToString+0xb4>
            }
        }
        while (idx_inv) {
 80114b4:	e00e      	b.n	80114d4 <pif_DecToString+0xf0>
            idx_inv--;
 80114b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b8:	3b01      	subs	r3, #1
 80114ba:	627b      	str	r3, [r7, #36]	; 0x24
            p_buffer[idx++] = inv_buf[idx_inv];
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80114c2:	461a      	mov	r2, r3
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	4413      	add	r3, r2
 80114c8:	f107 0114 	add.w	r1, r7, #20
 80114cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ce:	440a      	add	r2, r1
 80114d0:	7812      	ldrb	r2, [r2, #0]
 80114d2:	701a      	strb	r2, [r3, #0]
        while (idx_inv) {
 80114d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1ed      	bne.n	80114b6 <pif_DecToString+0xd2>
 80114da:	e012      	b.n	8011502 <pif_DecToString+0x11e>
        }
    }
    else {
        zero_str_cnt = str_cnt;
 80114dc:	88fb      	ldrh	r3, [r7, #6]
 80114de:	85bb      	strh	r3, [r7, #44]	; 0x2c
        do {
        	p_buffer[idx++] = '0';
 80114e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e2:	1c5a      	adds	r2, r3, #1
 80114e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80114e6:	461a      	mov	r2, r3
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	4413      	add	r3, r2
 80114ec:	2230      	movs	r2, #48	; 0x30
 80114ee:	701a      	strb	r2, [r3, #0]
            if (zero_str_cnt > 0) zero_str_cnt--;
 80114f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d002      	beq.n	80114fc <pif_DecToString+0x118>
 80114f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114f8:	3b01      	subs	r3, #1
 80114fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
        while (zero_str_cnt);
 80114fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d1ee      	bne.n	80114e0 <pif_DecToString+0xfc>
    }
    return idx;
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011504:	4618      	mov	r0, r3
 8011506:	3734      	adds	r7, #52	; 0x34
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	0802789c 	.word	0x0802789c
 8011514:	cccccccd 	.word	0xcccccccd

08011518 <pif_HexToString>:

int pif_HexToString(char* p_buffer, uint32_t value, uint16_t str_cnt, BOOL upper)
{
 8011518:	b480      	push	{r7}
 801151a:	b08b      	sub	sp, #44	; 0x2c
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	4611      	mov	r1, r2
 8011524:	461a      	mov	r2, r3
 8011526:	460b      	mov	r3, r1
 8011528:	80fb      	strh	r3, [r7, #6]
 801152a:	4613      	mov	r3, r2
 801152c:	717b      	strb	r3, [r7, #5]
	int i, idx = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	623b      	str	r3, [r7, #32]
	BOOL first;
    uint32_t tmp_val;
    const char* kHexChar = upper ? kPifHexUpperChar : kPifHexLowerChar;
 8011532:	797b      	ldrb	r3, [r7, #5]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <pif_HexToString+0x26>
 8011538:	4b2f      	ldr	r3, [pc, #188]	; (80115f8 <pif_HexToString+0xe0>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	e001      	b.n	8011542 <pif_HexToString+0x2a>
 801153e:	4b2f      	ldr	r3, [pc, #188]	; (80115fc <pif_HexToString+0xe4>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	61bb      	str	r3, [r7, #24]

    if (str_cnt) {
 8011544:	88fb      	ldrh	r3, [r7, #6]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d01d      	beq.n	8011586 <pif_HexToString+0x6e>
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 801154a:	88fb      	ldrh	r3, [r7, #6]
 801154c:	3b01      	subs	r3, #1
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	627b      	str	r3, [r7, #36]	; 0x24
 8011552:	e014      	b.n	801157e <pif_HexToString+0x66>
    		tmp_val = (value >> i) & 0x0F;
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	fa22 f303 	lsr.w	r3, r2, r3
 801155c:	f003 030f 	and.w	r3, r3, #15
 8011560:	617b      	str	r3, [r7, #20]
    		p_buffer[idx++] = kHexChar[tmp_val];
 8011562:	69ba      	ldr	r2, [r7, #24]
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	441a      	add	r2, r3
 8011568:	6a3b      	ldr	r3, [r7, #32]
 801156a:	1c59      	adds	r1, r3, #1
 801156c:	6239      	str	r1, [r7, #32]
 801156e:	4619      	mov	r1, r3
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	440b      	add	r3, r1
 8011574:	7812      	ldrb	r2, [r2, #0]
 8011576:	701a      	strb	r2, [r3, #0]
    	for (i = (str_cnt - 1) * 4; i >= 0; i -= 4) {
 8011578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157a:	3b04      	subs	r3, #4
 801157c:	627b      	str	r3, [r7, #36]	; 0x24
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	2b00      	cmp	r3, #0
 8011582:	dae7      	bge.n	8011554 <pif_HexToString+0x3c>
 8011584:	e030      	b.n	80115e8 <pif_HexToString+0xd0>
    	}
    }
    else if (value > 0) {
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d025      	beq.n	80115d8 <pif_HexToString+0xc0>
    	first = TRUE;
 801158c:	2301      	movs	r3, #1
 801158e:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 8011590:	231c      	movs	r3, #28
 8011592:	627b      	str	r3, [r7, #36]	; 0x24
 8011594:	e01c      	b.n	80115d0 <pif_HexToString+0xb8>
    		tmp_val = (value >> i) & 0x0F;
 8011596:	68ba      	ldr	r2, [r7, #8]
 8011598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159a:	fa22 f303 	lsr.w	r3, r2, r3
 801159e:	f003 030f 	and.w	r3, r3, #15
 80115a2:	617b      	str	r3, [r7, #20]
    		if (!first || tmp_val) {
 80115a4:	7ffb      	ldrb	r3, [r7, #31]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d002      	beq.n	80115b0 <pif_HexToString+0x98>
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00c      	beq.n	80115ca <pif_HexToString+0xb2>
    			p_buffer[idx++] = kHexChar[tmp_val];
 80115b0:	69ba      	ldr	r2, [r7, #24]
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	441a      	add	r2, r3
 80115b6:	6a3b      	ldr	r3, [r7, #32]
 80115b8:	1c59      	adds	r1, r3, #1
 80115ba:	6239      	str	r1, [r7, #32]
 80115bc:	4619      	mov	r1, r3
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	440b      	add	r3, r1
 80115c2:	7812      	ldrb	r2, [r2, #0]
 80115c4:	701a      	strb	r2, [r3, #0]
    			first = FALSE;
 80115c6:	2300      	movs	r3, #0
 80115c8:	77fb      	strb	r3, [r7, #31]
    	for (i = 28; i >= 0; i -= 4) {
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	3b04      	subs	r3, #4
 80115ce:	627b      	str	r3, [r7, #36]	; 0x24
 80115d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	dadf      	bge.n	8011596 <pif_HexToString+0x7e>
 80115d6:	e007      	b.n	80115e8 <pif_HexToString+0xd0>
    		}
    	}
    }
    else {
    	p_buffer[idx++] = '0';
 80115d8:	6a3b      	ldr	r3, [r7, #32]
 80115da:	1c5a      	adds	r2, r3, #1
 80115dc:	623a      	str	r2, [r7, #32]
 80115de:	461a      	mov	r2, r3
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4413      	add	r3, r2
 80115e4:	2230      	movs	r2, #48	; 0x30
 80115e6:	701a      	strb	r2, [r3, #0]
    }
    return idx;
 80115e8:	6a3b      	ldr	r3, [r7, #32]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	372c      	adds	r7, #44	; 0x2c
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	2000012c 	.word	0x2000012c
 80115fc:	20000130 	.word	0x20000130

08011600 <pif_FloatToString>:

int pif_FloatToString(char* p_buffer, double value, uint16_t point)
{
 8011600:	b5b0      	push	{r4, r5, r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	ed87 0b00 	vstr	d0, [r7]
 801160c:	460b      	mov	r3, r1
 801160e:	817b      	strh	r3, [r7, #10]
	uint16_t i, idx = 0;
 8011610:	2300      	movs	r3, #0
 8011612:	82bb      	strh	r3, [r7, #20]
	uint32_t num;

	if (value < 0.0) {
 8011614:	f04f 0200 	mov.w	r2, #0
 8011618:	f04f 0300 	mov.w	r3, #0
 801161c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011620:	f7ef fa10 	bl	8000a44 <__aeabi_dcmplt>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d00d      	beq.n	8011646 <pif_FloatToString+0x46>
		p_buffer[idx++] = '-';
 801162a:	8abb      	ldrh	r3, [r7, #20]
 801162c:	1c5a      	adds	r2, r3, #1
 801162e:	82ba      	strh	r2, [r7, #20]
 8011630:	461a      	mov	r2, r3
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	4413      	add	r3, r2
 8011636:	222d      	movs	r2, #45	; 0x2d
 8011638:	701a      	strb	r2, [r3, #0]
		value *= -1.0;
 801163a:	683c      	ldr	r4, [r7, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8011642:	e9c7 4500 	strd	r4, r5, [r7]
	}

	num = (uint32_t)value;
 8011646:	e9d7 0100 	ldrd	r0, r1, [r7]
 801164a:	f7ef fa4b 	bl	8000ae4 <__aeabi_d2uiz>
 801164e:	4603      	mov	r3, r0
 8011650:	613b      	str	r3, [r7, #16]
	idx += pif_DecToString(p_buffer + idx, num, 0);
 8011652:	8abb      	ldrh	r3, [r7, #20]
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	4413      	add	r3, r2
 8011658:	2200      	movs	r2, #0
 801165a:	6939      	ldr	r1, [r7, #16]
 801165c:	4618      	mov	r0, r3
 801165e:	f7ff fec1 	bl	80113e4 <pif_DecToString>
 8011662:	4603      	mov	r3, r0
 8011664:	b29a      	uxth	r2, r3
 8011666:	8abb      	ldrh	r3, [r7, #20]
 8011668:	4413      	add	r3, r2
 801166a:	82bb      	strh	r3, [r7, #20]
	p_buffer[idx++] = '.';
 801166c:	8abb      	ldrh	r3, [r7, #20]
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	82ba      	strh	r2, [r7, #20]
 8011672:	461a      	mov	r2, r3
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	4413      	add	r3, r2
 8011678:	222e      	movs	r2, #46	; 0x2e
 801167a:	701a      	strb	r2, [r3, #0]

	if (point == 0) point = 6;
 801167c:	897b      	ldrh	r3, [r7, #10]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <pif_FloatToString+0x86>
 8011682:	2306      	movs	r3, #6
 8011684:	817b      	strh	r3, [r7, #10]
	value -= num;
 8011686:	6938      	ldr	r0, [r7, #16]
 8011688:	f7ee fef0 	bl	800046c <__aeabi_ui2d>
 801168c:	4602      	mov	r2, r0
 801168e:	460b      	mov	r3, r1
 8011690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011694:	f7ee fdac 	bl	80001f0 <__aeabi_dsub>
 8011698:	4602      	mov	r2, r0
 801169a:	460b      	mov	r3, r1
 801169c:	e9c7 2300 	strd	r2, r3, [r7]
	for (i = 0; i < point; i++) value *= 10;
 80116a0:	2300      	movs	r3, #0
 80116a2:	82fb      	strh	r3, [r7, #22]
 80116a4:	e00d      	b.n	80116c2 <pif_FloatToString+0xc2>
 80116a6:	f04f 0200 	mov.w	r2, #0
 80116aa:	4b13      	ldr	r3, [pc, #76]	; (80116f8 <pif_FloatToString+0xf8>)
 80116ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116b0:	f7ee ff56 	bl	8000560 <__aeabi_dmul>
 80116b4:	4602      	mov	r2, r0
 80116b6:	460b      	mov	r3, r1
 80116b8:	e9c7 2300 	strd	r2, r3, [r7]
 80116bc:	8afb      	ldrh	r3, [r7, #22]
 80116be:	3301      	adds	r3, #1
 80116c0:	82fb      	strh	r3, [r7, #22]
 80116c2:	8afa      	ldrh	r2, [r7, #22]
 80116c4:	897b      	ldrh	r3, [r7, #10]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d3ed      	bcc.n	80116a6 <pif_FloatToString+0xa6>

	idx += pif_DecToString(p_buffer + idx, (uint32_t)value, point);
 80116ca:	8abb      	ldrh	r3, [r7, #20]
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	18d4      	adds	r4, r2, r3
 80116d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80116d4:	f7ef fa06 	bl	8000ae4 <__aeabi_d2uiz>
 80116d8:	4601      	mov	r1, r0
 80116da:	897b      	ldrh	r3, [r7, #10]
 80116dc:	461a      	mov	r2, r3
 80116de:	4620      	mov	r0, r4
 80116e0:	f7ff fe80 	bl	80113e4 <pif_DecToString>
 80116e4:	4603      	mov	r3, r0
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	8abb      	ldrh	r3, [r7, #20]
 80116ea:	4413      	add	r3, r2
 80116ec:	82bb      	strh	r3, [r7, #20]
    return idx;
 80116ee:	8abb      	ldrh	r3, [r7, #20]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3718      	adds	r7, #24
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bdb0      	pop	{r4, r5, r7, pc}
 80116f8:	40240000 	.word	0x40240000

080116fc <pif_PrintFormat>:

void pif_PrintFormat(char* p_buffer, va_list* p_data, const char* p_format)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b08c      	sub	sp, #48	; 0x30
 8011700:	af00      	add	r7, sp, #0
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
	unsigned long ulong_val;
	long long_val;
	uint16_t num_str_cnt;
	BOOL is_long;
	char *p_var_str;
	int offset = 0;
 8011708:	2300      	movs	r3, #0
 801170a:	623b      	str	r3, [r7, #32]
	size_t size;

	while (*p_format) {
 801170c:	e242      	b.n	8011b94 <pif_PrintFormat+0x498>
        if (*p_format == '%') {
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	2b25      	cmp	r3, #37	; 0x25
 8011714:	f040 8230 	bne.w	8011b78 <pif_PrintFormat+0x47c>
            num_str_cnt = 0;
 8011718:	2300      	movs	r3, #0
 801171a:	84fb      	strh	r3, [r7, #38]	; 0x26
        	is_long = FALSE;
 801171c:	2300      	movs	r3, #0
 801171e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
NEXT_STR:
			p_format = p_format + 1;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	3301      	adds	r3, #1
 8011726:	607b      	str	r3, [r7, #4]
            switch(*p_format) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	3b25      	subs	r3, #37	; 0x25
 801172e:	2b53      	cmp	r3, #83	; 0x53
 8011730:	f200 822d 	bhi.w	8011b8e <pif_PrintFormat+0x492>
 8011734:	a201      	add	r2, pc, #4	; (adr r2, 801173c <pif_PrintFormat+0x40>)
 8011736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801173a:	bf00      	nop
 801173c:	08011b67 	.word	0x08011b67
 8011740:	08011b8f 	.word	0x08011b8f
 8011744:	08011b8f 	.word	0x08011b8f
 8011748:	08011b8f 	.word	0x08011b8f
 801174c:	08011b8f 	.word	0x08011b8f
 8011750:	08011b8f 	.word	0x08011b8f
 8011754:	08011b8f 	.word	0x08011b8f
 8011758:	08011b8f 	.word	0x08011b8f
 801175c:	08011b8f 	.word	0x08011b8f
 8011760:	08011b8f 	.word	0x08011b8f
 8011764:	08011b8f 	.word	0x08011b8f
 8011768:	0801188d 	.word	0x0801188d
 801176c:	0801188d 	.word	0x0801188d
 8011770:	0801188d 	.word	0x0801188d
 8011774:	0801188d 	.word	0x0801188d
 8011778:	0801188d 	.word	0x0801188d
 801177c:	0801188d 	.word	0x0801188d
 8011780:	0801188d 	.word	0x0801188d
 8011784:	0801188d 	.word	0x0801188d
 8011788:	0801188d 	.word	0x0801188d
 801178c:	0801188d 	.word	0x0801188d
 8011790:	08011b8f 	.word	0x08011b8f
 8011794:	08011b8f 	.word	0x08011b8f
 8011798:	08011b8f 	.word	0x08011b8f
 801179c:	08011b8f 	.word	0x08011b8f
 80117a0:	08011b8f 	.word	0x08011b8f
 80117a4:	08011b8f 	.word	0x08011b8f
 80117a8:	08011b8f 	.word	0x08011b8f
 80117ac:	08011b8f 	.word	0x08011b8f
 80117b0:	08011b8f 	.word	0x08011b8f
 80117b4:	08011b8f 	.word	0x08011b8f
 80117b8:	08011b8f 	.word	0x08011b8f
 80117bc:	08011b8f 	.word	0x08011b8f
 80117c0:	08011b8f 	.word	0x08011b8f
 80117c4:	08011b8f 	.word	0x08011b8f
 80117c8:	08011b8f 	.word	0x08011b8f
 80117cc:	08011b8f 	.word	0x08011b8f
 80117d0:	08011b8f 	.word	0x08011b8f
 80117d4:	08011b8f 	.word	0x08011b8f
 80117d8:	08011b8f 	.word	0x08011b8f
 80117dc:	08011b8f 	.word	0x08011b8f
 80117e0:	08011b8f 	.word	0x08011b8f
 80117e4:	08011b8f 	.word	0x08011b8f
 80117e8:	08011b8f 	.word	0x08011b8f
 80117ec:	08011b8f 	.word	0x08011b8f
 80117f0:	08011b8f 	.word	0x08011b8f
 80117f4:	08011b8f 	.word	0x08011b8f
 80117f8:	08011b8f 	.word	0x08011b8f
 80117fc:	08011b8f 	.word	0x08011b8f
 8011800:	08011b8f 	.word	0x08011b8f
 8011804:	08011b8f 	.word	0x08011b8f
 8011808:	08011a63 	.word	0x08011a63
 801180c:	08011b8f 	.word	0x08011b8f
 8011810:	08011b8f 	.word	0x08011b8f
 8011814:	08011b8f 	.word	0x08011b8f
 8011818:	08011b8f 	.word	0x08011b8f
 801181c:	08011b8f 	.word	0x08011b8f
 8011820:	08011b8f 	.word	0x08011b8f
 8011824:	08011b8f 	.word	0x08011b8f
 8011828:	08011b8f 	.word	0x08011b8f
 801182c:	08011b8f 	.word	0x08011b8f
 8011830:	080118b3 	.word	0x080118b3
 8011834:	08011b49 	.word	0x08011b49
 8011838:	0801190b 	.word	0x0801190b
 801183c:	08011b8f 	.word	0x08011b8f
 8011840:	08011abb 	.word	0x08011abb
 8011844:	08011b8f 	.word	0x08011b8f
 8011848:	08011b8f 	.word	0x08011b8f
 801184c:	0801190b 	.word	0x0801190b
 8011850:	08011b8f 	.word	0x08011b8f
 8011854:	08011b8f 	.word	0x08011b8f
 8011858:	080118ab 	.word	0x080118ab
 801185c:	08011b8f 	.word	0x08011b8f
 8011860:	08011b8f 	.word	0x08011b8f
 8011864:	08011b8f 	.word	0x08011b8f
 8011868:	08011b8f 	.word	0x08011b8f
 801186c:	08011b8f 	.word	0x08011b8f
 8011870:	08011b8f 	.word	0x08011b8f
 8011874:	08011af1 	.word	0x08011af1
 8011878:	08011b8f 	.word	0x08011b8f
 801187c:	080119b3 	.word	0x080119b3
 8011880:	08011b8f 	.word	0x08011b8f
 8011884:	08011b8f 	.word	0x08011b8f
 8011888:	08011a0b 	.word	0x08011a0b
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    num_str_cnt *= 10;
 801188c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801188e:	461a      	mov	r2, r3
 8011890:	0092      	lsls	r2, r2, #2
 8011892:	4413      	add	r3, r2
 8011894:	005b      	lsls	r3, r3, #1
 8011896:	84fb      	strh	r3, [r7, #38]	; 0x26
                    num_str_cnt += *p_format - '0';
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	b29a      	uxth	r2, r3
 801189e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118a0:	4413      	add	r3, r2
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	3b30      	subs	r3, #48	; 0x30
 80118a6:	84fb      	strh	r3, [r7, #38]	; 0x26
                    goto NEXT_STR;
 80118a8:	e73b      	b.n	8011722 <pif_PrintFormat+0x26>

                case 'l':
					is_long = TRUE;
 80118aa:	2301      	movs	r3, #1
 80118ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					goto NEXT_STR;
 80118b0:	e737      	b.n	8011722 <pif_PrintFormat+0x26>

                case 'b':
                	if (is_long) {
 80118b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d013      	beq.n	80118e2 <pif_PrintFormat+0x1e6>
                		ulong_val = va_arg(*p_data, unsigned long);
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	1d19      	adds	r1, r3, #4
 80118c0:	68ba      	ldr	r2, [r7, #8]
 80118c2:	6011      	str	r1, [r2, #0]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	617b      	str	r3, [r7, #20]
						offset += pif_BinToString(p_buffer + offset, ulong_val, num_str_cnt);
 80118c8:	6a3b      	ldr	r3, [r7, #32]
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	4413      	add	r3, r2
 80118ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118d0:	6979      	ldr	r1, [r7, #20]
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7ff fd26 	bl	8011324 <pif_BinToString>
 80118d8:	4602      	mov	r2, r0
 80118da:	6a3b      	ldr	r3, [r7, #32]
 80118dc:	4413      	add	r3, r2
 80118de:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 80118e0:	e155      	b.n	8011b8e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	1d19      	adds	r1, r3, #4
 80118e8:	68ba      	ldr	r2, [r7, #8]
 80118ea:	6011      	str	r1, [r2, #0]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	61bb      	str	r3, [r7, #24]
						offset += pif_BinToString(p_buffer + offset, uint_val, num_str_cnt);
 80118f0:	6a3b      	ldr	r3, [r7, #32]
 80118f2:	68fa      	ldr	r2, [r7, #12]
 80118f4:	4413      	add	r3, r2
 80118f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118f8:	69b9      	ldr	r1, [r7, #24]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7ff fd12 	bl	8011324 <pif_BinToString>
 8011900:	4602      	mov	r2, r0
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	4413      	add	r3, r2
 8011906:	623b      	str	r3, [r7, #32]
                    break;
 8011908:	e141      	b.n	8011b8e <pif_PrintFormat+0x492>

                case 'd':
                case 'i':
                	if (is_long) {
 801190a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801190e:	2b00      	cmp	r3, #0
 8011910:	d027      	beq.n	8011962 <pif_PrintFormat+0x266>
            			long_val = va_arg(*p_data, long);
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	1d19      	adds	r1, r3, #4
 8011918:	68ba      	ldr	r2, [r7, #8]
 801191a:	6011      	str	r1, [r2, #0]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	62bb      	str	r3, [r7, #40]	; 0x28
            			if (long_val < 0) {
 8011920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011922:	2b00      	cmp	r3, #0
 8011924:	da10      	bge.n	8011948 <pif_PrintFormat+0x24c>
            				p_buffer[offset++] = '-';
 8011926:	6a3b      	ldr	r3, [r7, #32]
 8011928:	1c5a      	adds	r2, r3, #1
 801192a:	623a      	str	r2, [r7, #32]
 801192c:	461a      	mov	r2, r3
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	4413      	add	r3, r2
 8011932:	222d      	movs	r2, #45	; 0x2d
 8011934:	701a      	strb	r2, [r3, #0]
            				long_val *= -1;
 8011936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011938:	425b      	negs	r3, r3
 801193a:	62bb      	str	r3, [r7, #40]	; 0x28
            				if (num_str_cnt) num_str_cnt--;
 801193c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801193e:	2b00      	cmp	r3, #0
 8011940:	d002      	beq.n	8011948 <pif_PrintFormat+0x24c>
 8011942:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011944:	3b01      	subs	r3, #1
 8011946:	84fb      	strh	r3, [r7, #38]	; 0x26
            			}
            			offset += pif_DecToString(p_buffer + offset, long_val, num_str_cnt);
 8011948:	6a3b      	ldr	r3, [r7, #32]
 801194a:	68fa      	ldr	r2, [r7, #12]
 801194c:	4413      	add	r3, r2
 801194e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011950:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011952:	4618      	mov	r0, r3
 8011954:	f7ff fd46 	bl	80113e4 <pif_DecToString>
 8011958:	4602      	mov	r2, r0
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	4413      	add	r3, r2
 801195e:	623b      	str	r3, [r7, #32]
                			int_val *= -1;
                			if (num_str_cnt) num_str_cnt--;
            			}
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
                	}
                    break;
 8011960:	e115      	b.n	8011b8e <pif_PrintFormat+0x492>
            			int_val = va_arg(*p_data, int);
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	1d19      	adds	r1, r3, #4
 8011968:	68ba      	ldr	r2, [r7, #8]
 801196a:	6011      	str	r1, [r2, #0]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	62fb      	str	r3, [r7, #44]	; 0x2c
            			if (int_val < 0) {
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	2b00      	cmp	r3, #0
 8011974:	da10      	bge.n	8011998 <pif_PrintFormat+0x29c>
            				p_buffer[offset++] = '-';
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	623a      	str	r2, [r7, #32]
 801197c:	461a      	mov	r2, r3
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	4413      	add	r3, r2
 8011982:	222d      	movs	r2, #45	; 0x2d
 8011984:	701a      	strb	r2, [r3, #0]
                			int_val *= -1;
 8011986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011988:	425b      	negs	r3, r3
 801198a:	62fb      	str	r3, [r7, #44]	; 0x2c
                			if (num_str_cnt) num_str_cnt--;
 801198c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801198e:	2b00      	cmp	r3, #0
 8011990:	d002      	beq.n	8011998 <pif_PrintFormat+0x29c>
 8011992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011994:	3b01      	subs	r3, #1
 8011996:	84fb      	strh	r3, [r7, #38]	; 0x26
            			offset += pif_DecToString(p_buffer + offset, int_val, num_str_cnt);
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	68fa      	ldr	r2, [r7, #12]
 801199c:	4413      	add	r3, r2
 801199e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff fd1e 	bl	80113e4 <pif_DecToString>
 80119a8:	4602      	mov	r2, r0
 80119aa:	6a3b      	ldr	r3, [r7, #32]
 80119ac:	4413      	add	r3, r2
 80119ae:	623b      	str	r3, [r7, #32]
                    break;
 80119b0:	e0ed      	b.n	8011b8e <pif_PrintFormat+0x492>

                case 'u':
                	if (is_long) {
 80119b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d013      	beq.n	80119e2 <pif_PrintFormat+0x2e6>
						ulong_val = va_arg(*p_data, unsigned long);
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	1d19      	adds	r1, r3, #4
 80119c0:	68ba      	ldr	r2, [r7, #8]
 80119c2:	6011      	str	r1, [r2, #0]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	617b      	str	r3, [r7, #20]
						offset += pif_DecToString(p_buffer + offset, ulong_val, num_str_cnt);
 80119c8:	6a3b      	ldr	r3, [r7, #32]
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	4413      	add	r3, r2
 80119ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119d0:	6979      	ldr	r1, [r7, #20]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7ff fd06 	bl	80113e4 <pif_DecToString>
 80119d8:	4602      	mov	r2, r0
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	4413      	add	r3, r2
 80119de:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
                	}
                    break;
 80119e0:	e0d5      	b.n	8011b8e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	1d19      	adds	r1, r3, #4
 80119e8:	68ba      	ldr	r2, [r7, #8]
 80119ea:	6011      	str	r1, [r2, #0]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	61bb      	str	r3, [r7, #24]
						offset += pif_DecToString(p_buffer + offset, uint_val, num_str_cnt);
 80119f0:	6a3b      	ldr	r3, [r7, #32]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	4413      	add	r3, r2
 80119f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119f8:	69b9      	ldr	r1, [r7, #24]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff fcf2 	bl	80113e4 <pif_DecToString>
 8011a00:	4602      	mov	r2, r0
 8011a02:	6a3b      	ldr	r3, [r7, #32]
 8011a04:	4413      	add	r3, r2
 8011a06:	623b      	str	r3, [r7, #32]
                    break;
 8011a08:	e0c1      	b.n	8011b8e <pif_PrintFormat+0x492>

                case 'x':
                	if (is_long) {
 8011a0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d013      	beq.n	8011a3a <pif_PrintFormat+0x33e>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	1d19      	adds	r1, r3, #4
 8011a18:	68ba      	ldr	r2, [r7, #8]
 8011a1a:	6011      	str	r1, [r2, #0]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	617b      	str	r3, [r7, #20]
						offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, FALSE);
 8011a20:	6a3b      	ldr	r3, [r7, #32]
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	18d0      	adds	r0, r2, r3
 8011a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a28:	2300      	movs	r3, #0
 8011a2a:	6979      	ldr	r1, [r7, #20]
 8011a2c:	f7ff fd74 	bl	8011518 <pif_HexToString>
 8011a30:	4602      	mov	r2, r0
 8011a32:	6a3b      	ldr	r3, [r7, #32]
 8011a34:	4413      	add	r3, r2
 8011a36:	623b      	str	r3, [r7, #32]
                	}
                	else {
						uint_val = va_arg(*p_data, unsigned int);
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
                	}
                    break;
 8011a38:	e0a9      	b.n	8011b8e <pif_PrintFormat+0x492>
						uint_val = va_arg(*p_data, unsigned int);
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	1d19      	adds	r1, r3, #4
 8011a40:	68ba      	ldr	r2, [r7, #8]
 8011a42:	6011      	str	r1, [r2, #0]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	61bb      	str	r3, [r7, #24]
						offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, FALSE);
 8011a48:	6a3b      	ldr	r3, [r7, #32]
 8011a4a:	68fa      	ldr	r2, [r7, #12]
 8011a4c:	18d0      	adds	r0, r2, r3
 8011a4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a50:	2300      	movs	r3, #0
 8011a52:	69b9      	ldr	r1, [r7, #24]
 8011a54:	f7ff fd60 	bl	8011518 <pif_HexToString>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	6a3b      	ldr	r3, [r7, #32]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	623b      	str	r3, [r7, #32]
                    break;
 8011a60:	e095      	b.n	8011b8e <pif_PrintFormat+0x492>

                case 'X':
                	if (is_long) {
 8011a62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d013      	beq.n	8011a92 <pif_PrintFormat+0x396>
                		ulong_val = va_arg(*p_data, unsigned long);
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	1d19      	adds	r1, r3, #4
 8011a70:	68ba      	ldr	r2, [r7, #8]
 8011a72:	6011      	str	r1, [r2, #0]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	617b      	str	r3, [r7, #20]
                		offset += pif_HexToString(p_buffer + offset, ulong_val, num_str_cnt, TRUE);
 8011a78:	6a3b      	ldr	r3, [r7, #32]
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	18d0      	adds	r0, r2, r3
 8011a7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a80:	2301      	movs	r3, #1
 8011a82:	6979      	ldr	r1, [r7, #20]
 8011a84:	f7ff fd48 	bl	8011518 <pif_HexToString>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	6a3b      	ldr	r3, [r7, #32]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	623b      	str	r3, [r7, #32]
                	}
                	else {
                		uint_val = va_arg(*p_data, unsigned int);
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
                	}
                    break;
 8011a90:	e07d      	b.n	8011b8e <pif_PrintFormat+0x492>
                		uint_val = va_arg(*p_data, unsigned int);
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	1d19      	adds	r1, r3, #4
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	6011      	str	r1, [r2, #0]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	61bb      	str	r3, [r7, #24]
                		offset += pif_HexToString(p_buffer + offset, uint_val, num_str_cnt, TRUE);
 8011aa0:	6a3b      	ldr	r3, [r7, #32]
 8011aa2:	68fa      	ldr	r2, [r7, #12]
 8011aa4:	18d0      	adds	r0, r2, r3
 8011aa6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	69b9      	ldr	r1, [r7, #24]
 8011aac:	f7ff fd34 	bl	8011518 <pif_HexToString>
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	6a3b      	ldr	r3, [r7, #32]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	623b      	str	r3, [r7, #32]
                    break;
 8011ab8:	e069      	b.n	8011b8e <pif_PrintFormat+0x492>

                case 'f':
					offset += pif_FloatToString(p_buffer + offset, va_arg(*p_data, double), num_str_cnt);
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	68fa      	ldr	r2, [r7, #12]
 8011abe:	18d0      	adds	r0, r2, r3
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	3307      	adds	r3, #7
 8011ac6:	f023 0307 	bic.w	r3, r3, #7
 8011aca:	f103 0108 	add.w	r1, r3, #8
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	6011      	str	r1, [r2, #0]
 8011ad2:	ed93 7b00 	vldr	d7, [r3]
 8011ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011ad8:	4619      	mov	r1, r3
 8011ada:	eeb0 0a47 	vmov.f32	s0, s14
 8011ade:	eef0 0a67 	vmov.f32	s1, s15
 8011ae2:	f7ff fd8d 	bl	8011600 <pif_FloatToString>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	6a3b      	ldr	r3, [r7, #32]
 8011aea:	4413      	add	r3, r2
 8011aec:	623b      	str	r3, [r7, #32]
                    break;
 8011aee:	e04e      	b.n	8011b8e <pif_PrintFormat+0x492>

                case 's':
                    p_var_str = va_arg(*p_data, char *);
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	1d19      	adds	r1, r3, #4
 8011af6:	68ba      	ldr	r2, [r7, #8]
 8011af8:	6011      	str	r1, [r2, #0]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	613b      	str	r3, [r7, #16]
                    if (p_var_str) {
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d043      	beq.n	8011b8c <pif_PrintFormat+0x490>
						size = strlen(p_var_str);
 8011b04:	6938      	ldr	r0, [r7, #16]
 8011b06:	f7ee fb67 	bl	80001d8 <strlen>
 8011b0a:	61f8      	str	r0, [r7, #28]
						if (offset + size < PIF_LOG_LINE_SIZE - 1) {
 8011b0c:	6a3a      	ldr	r2, [r7, #32]
 8011b0e:	69fb      	ldr	r3, [r7, #28]
 8011b10:	4413      	add	r3, r2
 8011b12:	2b4e      	cmp	r3, #78	; 0x4e
 8011b14:	d807      	bhi.n	8011b26 <pif_PrintFormat+0x42a>
							strcpy(p_buffer + offset, p_var_str);
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	68fa      	ldr	r2, [r7, #12]
 8011b1a:	4413      	add	r3, r2
 8011b1c:	6939      	ldr	r1, [r7, #16]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f011 fca6 	bl	8023470 <strcpy>
 8011b24:	e00b      	b.n	8011b3e <pif_PrintFormat+0x442>
						}
						else {
							size = PIF_LOG_LINE_SIZE - 1 - offset;
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	f1c3 034f 	rsb	r3, r3, #79	; 0x4f
 8011b2c:	61fb      	str	r3, [r7, #28]
							strncpy(p_buffer + offset, p_var_str, size);
 8011b2e:	6a3b      	ldr	r3, [r7, #32]
 8011b30:	68fa      	ldr	r2, [r7, #12]
 8011b32:	4413      	add	r3, r2
 8011b34:	69fa      	ldr	r2, [r7, #28]
 8011b36:	6939      	ldr	r1, [r7, #16]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f011 fcc3 	bl	80234c4 <strncpy>
						}
						offset += size;
 8011b3e:	6a3a      	ldr	r2, [r7, #32]
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	4413      	add	r3, r2
 8011b44:	623b      	str	r3, [r7, #32]
                    }
                    break;
 8011b46:	e021      	b.n	8011b8c <pif_PrintFormat+0x490>

                case 'c':
                	p_buffer[offset++] = va_arg(*p_data, int);
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	1d19      	adds	r1, r3, #4
 8011b4e:	68ba      	ldr	r2, [r7, #8]
 8011b50:	6011      	str	r1, [r2, #0]
 8011b52:	6819      	ldr	r1, [r3, #0]
 8011b54:	6a3b      	ldr	r3, [r7, #32]
 8011b56:	1c5a      	adds	r2, r3, #1
 8011b58:	623a      	str	r2, [r7, #32]
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	4413      	add	r3, r2
 8011b60:	b2ca      	uxtb	r2, r1
 8011b62:	701a      	strb	r2, [r3, #0]
                    break;
 8011b64:	e013      	b.n	8011b8e <pif_PrintFormat+0x492>

                case '%':
                	p_buffer[offset++] = '%';
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	1c5a      	adds	r2, r3, #1
 8011b6a:	623a      	str	r2, [r7, #32]
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	4413      	add	r3, r2
 8011b72:	2225      	movs	r2, #37	; 0x25
 8011b74:	701a      	strb	r2, [r3, #0]
                    break;
 8011b76:	e00a      	b.n	8011b8e <pif_PrintFormat+0x492>
            }
        }
        else {
        	p_buffer[offset++] = *p_format;
 8011b78:	6a3b      	ldr	r3, [r7, #32]
 8011b7a:	1c5a      	adds	r2, r3, #1
 8011b7c:	623a      	str	r2, [r7, #32]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	4413      	add	r3, r2
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	7812      	ldrb	r2, [r2, #0]
 8011b88:	701a      	strb	r2, [r3, #0]
 8011b8a:	e000      	b.n	8011b8e <pif_PrintFormat+0x492>
                    break;
 8011b8c:	bf00      	nop
        }
        p_format = p_format + 1;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	3301      	adds	r3, #1
 8011b92:	607b      	str	r3, [r7, #4]
	while (*p_format) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f47f adb8 	bne.w	801170e <pif_PrintFormat+0x12>
	}
	p_buffer[offset] = 0;
 8011b9e:	6a3b      	ldr	r3, [r7, #32]
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	701a      	strb	r2, [r3, #0]
}
 8011ba8:	bf00      	nop
 8011baa:	3730      	adds	r7, #48	; 0x30
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <pif_Printf>:

void pif_Printf(char* p_buffer, const char* p_format, ...)
{
 8011bb0:	b40e      	push	{r1, r2, r3}
 8011bb2:	b580      	push	{r7, lr}
 8011bb4:	b085      	sub	sp, #20
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	6078      	str	r0, [r7, #4]
	va_list data;

	va_start(data, p_format);
 8011bba:	f107 0320 	add.w	r3, r7, #32
 8011bbe:	60fb      	str	r3, [r7, #12]
	pif_PrintFormat(p_buffer, &data, p_format);
 8011bc0:	f107 030c 	add.w	r3, r7, #12
 8011bc4:	69fa      	ldr	r2, [r7, #28]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7ff fd97 	bl	80116fc <pif_PrintFormat>
	va_end(data);
}
 8011bce:	bf00      	nop
 8011bd0:	3714      	adds	r7, #20
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011bd8:	b003      	add	sp, #12
 8011bda:	4770      	bx	lr

08011bdc <pifCrc16_Add>:
	}
	return pifCrc7_Result(crc);
}

uint16_t pifCrc16_Add(uint16_t crc, uint8_t data)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	4603      	mov	r3, r0
 8011be4:	460a      	mov	r2, r1
 8011be6:	80fb      	strh	r3, [r7, #6]
 8011be8:	4613      	mov	r3, r2
 8011bea:	717b      	strb	r3, [r7, #5]
	uint16_t i;

    crc ^= (uint16_t)data << 8;
 8011bec:	797b      	ldrb	r3, [r7, #5]
 8011bee:	021b      	lsls	r3, r3, #8
 8011bf0:	b21a      	sxth	r2, r3
 8011bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bf6:	4053      	eors	r3, r2
 8011bf8:	b21b      	sxth	r3, r3
 8011bfa:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	81fb      	strh	r3, [r7, #14]
 8011c00:	e013      	b.n	8011c2a <pifCrc16_Add+0x4e>
        if (crc & 0x8000) crc = (crc << 1) ^ 0x1021;
 8011c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	da09      	bge.n	8011c1e <pifCrc16_Add+0x42>
 8011c0a:	88fb      	ldrh	r3, [r7, #6]
 8011c0c:	005b      	lsls	r3, r3, #1
 8011c0e:	b21b      	sxth	r3, r3
 8011c10:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8011c14:	f083 0301 	eor.w	r3, r3, #1
 8011c18:	b21b      	sxth	r3, r3
 8011c1a:	80fb      	strh	r3, [r7, #6]
 8011c1c:	e002      	b.n	8011c24 <pifCrc16_Add+0x48>
        else crc <<= 1;
 8011c1e:	88fb      	ldrh	r3, [r7, #6]
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 8011c24:	89fb      	ldrh	r3, [r7, #14]
 8011c26:	3301      	adds	r3, #1
 8011c28:	81fb      	strh	r3, [r7, #14]
 8011c2a:	89fb      	ldrh	r3, [r7, #14]
 8011c2c:	2b07      	cmp	r3, #7
 8011c2e:	d9e8      	bls.n	8011c02 <pifCrc16_Add+0x26>
    }
	return crc;
 8011c30:	88fb      	ldrh	r3, [r7, #6]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3714      	adds	r7, #20
 8011c36:	46bd      	mov	sp, r7
 8011c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3c:	4770      	bx	lr

08011c3e <pifCrc16>:

uint16_t pifCrc16(uint8_t* p_data, uint16_t length)
{
 8011c3e:	b580      	push	{r7, lr}
 8011c40:	b084      	sub	sp, #16
 8011c42:	af00      	add	r7, sp, #0
 8011c44:	6078      	str	r0, [r7, #4]
 8011c46:	460b      	mov	r3, r1
 8011c48:	807b      	strh	r3, [r7, #2]
	uint16_t i, crc = 0;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < length; i++) {
 8011c4e:	2300      	movs	r3, #0
 8011c50:	81fb      	strh	r3, [r7, #14]
 8011c52:	e00d      	b.n	8011c70 <pifCrc16+0x32>
		crc = pifCrc16_Add(crc, p_data[i]);
 8011c54:	89fb      	ldrh	r3, [r7, #14]
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	4413      	add	r3, r2
 8011c5a:	781a      	ldrb	r2, [r3, #0]
 8011c5c:	89bb      	ldrh	r3, [r7, #12]
 8011c5e:	4611      	mov	r1, r2
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7ff ffbb 	bl	8011bdc <pifCrc16_Add>
 8011c66:	4603      	mov	r3, r0
 8011c68:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < length; i++) {
 8011c6a:	89fb      	ldrh	r3, [r7, #14]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	81fb      	strh	r3, [r7, #14]
 8011c70:	89fa      	ldrh	r2, [r7, #14]
 8011c72:	887b      	ldrh	r3, [r7, #2]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d3ed      	bcc.n	8011c54 <pifCrc16+0x16>
	}
	return crc;
 8011c78:	89bb      	ldrh	r3, [r7, #12]
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <pifCheckSum>:

uint32_t pifCheckSum(uint8_t* p_data, uint16_t length)
{
 8011c82:	b480      	push	{r7}
 8011c84:	b085      	sub	sp, #20
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint32_t sum = 0UL;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < length; i++) {
 8011c92:	2300      	movs	r3, #0
 8011c94:	81fb      	strh	r3, [r7, #14]
 8011c96:	e00a      	b.n	8011cae <pifCheckSum+0x2c>
		sum += p_data[i];
 8011c98:	89fb      	ldrh	r3, [r7, #14]
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	461a      	mov	r2, r3
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < length; i++) {
 8011ca8:	89fb      	ldrh	r3, [r7, #14]
 8011caa:	3301      	adds	r3, #1
 8011cac:	81fb      	strh	r3, [r7, #14]
 8011cae:	89fa      	ldrh	r2, [r7, #14]
 8011cb0:	887b      	ldrh	r3, [r7, #2]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d3f0      	bcc.n	8011c98 <pifCheckSum+0x16>
	}
	return sum;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3714      	adds	r7, #20
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc2:	4770      	bx	lr

08011cc4 <pifCheckXor>:

uint8_t pifCheckXor(uint8_t* p_data, uint16_t length)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	uint8_t xor = 0;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	737b      	strb	r3, [r7, #13]

	for (i = 0; i < length; i++) {
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	81fb      	strh	r3, [r7, #14]
 8011cd8:	e009      	b.n	8011cee <pifCheckXor+0x2a>
		xor ^= p_data[i];
 8011cda:	89fb      	ldrh	r3, [r7, #14]
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	4413      	add	r3, r2
 8011ce0:	781a      	ldrb	r2, [r3, #0]
 8011ce2:	7b7b      	ldrb	r3, [r7, #13]
 8011ce4:	4053      	eors	r3, r2
 8011ce6:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < length; i++) {
 8011ce8:	89fb      	ldrh	r3, [r7, #14]
 8011cea:	3301      	adds	r3, #1
 8011cec:	81fb      	strh	r3, [r7, #14]
 8011cee:	89fa      	ldrh	r2, [r7, #14]
 8011cf0:	887b      	ldrh	r3, [r7, #2]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d3f1      	bcc.n	8011cda <pifCheckXor+0x16>
	}
	return xor;
 8011cf6:	7b7b      	ldrb	r3, [r7, #13]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3714      	adds	r7, #20
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <_actReceiveData>:
#include "core/pif_comm.h"


static BOOL _actReceiveData(PifComm* p_owner, uint8_t* p_data)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
	return pifRingBuffer_GetByte(p_owner->_p_rx_buffer, p_data);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	699b      	ldr	r3, [r3, #24]
 8011d12:	6839      	ldr	r1, [r7, #0]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f001 ffe1 	bl	8013cdc <pifRingBuffer_GetByte>
 8011d1a:	4603      	mov	r3, r0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <_actSendData>:

static uint16_t _actSendData(PifComm* p_owner, uint8_t* p_buffer, uint16_t size)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b086      	sub	sp, #24
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	4613      	mov	r3, r2
 8011d30:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner->_p_tx_buffer);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	695b      	ldr	r3, [r3, #20]
 8011d36:	4618      	mov	r0, r3
 8011d38:	f001 fe8d 	bl	8013a56 <pifRingBuffer_GetRemainSize>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	82fb      	strh	r3, [r7, #22]

	if (!remain) return 0;
 8011d40:	8afb      	ldrh	r3, [r7, #22]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d101      	bne.n	8011d4a <_actSendData+0x26>
 8011d46:	2300      	movs	r3, #0
 8011d48:	e012      	b.n	8011d70 <_actSendData+0x4c>
	if (size > remain) size = remain;
 8011d4a:	88fa      	ldrh	r2, [r7, #6]
 8011d4c:	8afb      	ldrh	r3, [r7, #22]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d901      	bls.n	8011d56 <_actSendData+0x32>
 8011d52:	8afb      	ldrh	r3, [r7, #22]
 8011d54:	80fb      	strh	r3, [r7, #6]
	if (pifRingBuffer_PutData(p_owner->_p_tx_buffer, p_buffer, size)) {
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	695b      	ldr	r3, [r3, #20]
 8011d5a:	88fa      	ldrh	r2, [r7, #6]
 8011d5c:	68b9      	ldr	r1, [r7, #8]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f001 ff24 	bl	8013bac <pifRingBuffer_PutData>
 8011d64:	4603      	mov	r3, r0
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <_actSendData+0x4a>
		return size;
 8011d6a:	88fb      	ldrh	r3, [r7, #6]
 8011d6c:	e000      	b.n	8011d70 <_actSendData+0x4c>
	}
	return 0;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3718      	adds	r7, #24
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}

08011d78 <_sendData>:

static void _sendData(PifComm* p_owner)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
	if (p_owner->act_send_data) {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	689b      	ldr	r3, [r3, #8]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d008      	beq.n	8011d9a <_sendData+0x22>
		(*p_owner->__evt_sending)(p_owner->__p_client, p_owner->act_send_data);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	687a      	ldr	r2, [r7, #4]
 8011d8e:	6a10      	ldr	r0, [r2, #32]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	6892      	ldr	r2, [r2, #8]
 8011d94:	4611      	mov	r1, r2
 8011d96:	4798      	blx	r3
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
				}
			}
		}
	}
}
 8011d98:	e025      	b.n	8011de6 <_sendData+0x6e>
	else if (p_owner->_p_tx_buffer) {
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	695b      	ldr	r3, [r3, #20]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d021      	beq.n	8011de6 <_sendData+0x6e>
		if ((*p_owner->__evt_sending)(p_owner->__p_client, _actSendData)) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da6:	687a      	ldr	r2, [r7, #4]
 8011da8:	6a12      	ldr	r2, [r2, #32]
 8011daa:	4911      	ldr	r1, [pc, #68]	; (8011df0 <_sendData+0x78>)
 8011dac:	4610      	mov	r0, r2
 8011dae:	4798      	blx	r3
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d017      	beq.n	8011de6 <_sendData+0x6e>
			if (p_owner->__state == CTS_IDLE) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d112      	bne.n	8011de6 <_sendData+0x6e>
				p_owner->__state = CTS_SENDING;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				if (p_owner->act_start_transfer) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00a      	beq.n	8011de6 <_sendData+0x6e>
					if (!(*p_owner->act_start_transfer)(p_owner)) p_owner->__state = CTS_IDLE;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	4798      	blx	r3
 8011dd8:	4603      	mov	r3, r0
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d103      	bne.n	8011de6 <_sendData+0x6e>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2200      	movs	r2, #0
 8011de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8011de6:	bf00      	nop
 8011de8:	3708      	adds	r7, #8
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}
 8011dee:	bf00      	nop
 8011df0:	08011d25 	.word	0x08011d25

08011df4 <pifComm_Init>:

BOOL pifComm_Init(PifComm* p_owner, PifId id)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d104      	bne.n	8011e10 <pifComm_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8011e06:	4b0e      	ldr	r3, [pc, #56]	; (8011e40 <pifComm_Init+0x4c>)
 8011e08:	2201      	movs	r2, #1
 8011e0a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	e012      	b.n	8011e36 <pifComm_Init+0x42>
	}

	memset(p_owner, 0, sizeof(PifComm));
 8011e10:	2230      	movs	r2, #48	; 0x30
 8011e12:	2100      	movs	r1, #0
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f011 f9e7 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8011e1a:	887b      	ldrh	r3, [r7, #2]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d106      	bne.n	8011e2e <pifComm_Init+0x3a>
 8011e20:	4b08      	ldr	r3, [pc, #32]	; (8011e44 <pifComm_Init+0x50>)
 8011e22:	881b      	ldrh	r3, [r3, #0]
 8011e24:	1c5a      	adds	r2, r3, #1
 8011e26:	b291      	uxth	r1, r2
 8011e28:	4a06      	ldr	r2, [pc, #24]	; (8011e44 <pifComm_Init+0x50>)
 8011e2a:	8011      	strh	r1, [r2, #0]
 8011e2c:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	887a      	ldrh	r2, [r7, #2]
 8011e32:	821a      	strh	r2, [r3, #16]
    return TRUE;
 8011e34:	2301      	movs	r3, #1
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	20001d48 	.word	0x20001d48
 8011e44:	20000128 	.word	0x20000128

08011e48 <pifComm_Clear>:

void pifComm_Clear(PifComm* p_owner)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	69db      	ldr	r3, [r3, #28]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d007      	beq.n	8011e68 <pifComm_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	69db      	ldr	r3, [r3, #28]
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f002 fc45 	bl	80146ec <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_rx_buffer) pifRingBuffer_Destroy(&p_owner->_p_rx_buffer);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	699b      	ldr	r3, [r3, #24]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d004      	beq.n	8011e7a <pifComm_Clear+0x32>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	3318      	adds	r3, #24
 8011e74:	4618      	mov	r0, r3
 8011e76:	f001 fcd9 	bl	801382c <pifRingBuffer_Destroy>
	if (p_owner->_p_tx_buffer) pifRingBuffer_Destroy(&p_owner->_p_tx_buffer);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	695b      	ldr	r3, [r3, #20]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d004      	beq.n	8011e8c <pifComm_Clear+0x44>
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	3314      	adds	r3, #20
 8011e86:	4618      	mov	r0, r3
 8011e88:	f001 fcd0 	bl	801382c <pifRingBuffer_Destroy>
}
 8011e8c:	bf00      	nop
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <pifComm_AllocRxBuffer>:

BOOL pifComm_AllocRxBuffer(PifComm* p_owner, uint16_t rx_size, uint8_t threshold)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b082      	sub	sp, #8
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	807b      	strh	r3, [r7, #2]
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	707b      	strb	r3, [r7, #1]
    if (!rx_size) {
 8011ea4:	887b      	ldrh	r3, [r7, #2]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d104      	bne.n	8011eb4 <pifComm_AllocRxBuffer+0x20>
    	pif_error = E_INVALID_PARAM;
 8011eaa:	4b1a      	ldr	r3, [pc, #104]	; (8011f14 <pifComm_AllocRxBuffer+0x80>)
 8011eac:	2201      	movs	r2, #1
 8011eae:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e02a      	b.n	8011f0a <pifComm_AllocRxBuffer+0x76>
    }

    p_owner->_p_rx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, rx_size);
 8011eb4:	887b      	ldrh	r3, [r7, #2]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	2000      	movs	r0, #0
 8011eba:	f001 fc8b 	bl	80137d4 <pifRingBuffer_CreateHeap>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	619a      	str	r2, [r3, #24]
    if (!p_owner->_p_rx_buffer) return FALSE;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	699b      	ldr	r3, [r3, #24]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <pifComm_AllocRxBuffer+0x3c>
 8011ecc:	2300      	movs	r3, #0
 8011ece:	e01c      	b.n	8011f0a <pifComm_AllocRxBuffer+0x76>
    if (threshold > 100) threshold = 100;
 8011ed0:	787b      	ldrb	r3, [r7, #1]
 8011ed2:	2b64      	cmp	r3, #100	; 0x64
 8011ed4:	d901      	bls.n	8011eda <pifComm_AllocRxBuffer+0x46>
 8011ed6:	2364      	movs	r3, #100	; 0x64
 8011ed8:	707b      	strb	r3, [r7, #1]
    p_owner->__rx_threshold = rx_size * 100 / threshold;
 8011eda:	887b      	ldrh	r3, [r7, #2]
 8011edc:	2264      	movs	r2, #100	; 0x64
 8011ede:	fb03 f202 	mul.w	r2, r3, r2
 8011ee2:	787b      	ldrb	r3, [r7, #1]
 8011ee4:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	84da      	strh	r2, [r3, #38]	; 0x26
    if (p_owner->__rx_threshold == 0) p_owner->__rx_threshold = 1;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d102      	bne.n	8011efc <pifComm_AllocRxBuffer+0x68>
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2201      	movs	r2, #1
 8011efa:	84da      	strh	r2, [r3, #38]	; 0x26
    pifRingBuffer_SetName(p_owner->_p_rx_buffer, "RB");
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	699b      	ldr	r3, [r3, #24]
 8011f00:	4905      	ldr	r1, [pc, #20]	; (8011f18 <pifComm_AllocRxBuffer+0x84>)
 8011f02:	4618      	mov	r0, r3
 8011f04:	f001 fd0f 	bl	8013926 <pifRingBuffer_SetName>
    return TRUE;
 8011f08:	2301      	movs	r3, #1
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	20001d48 	.word	0x20001d48
 8011f18:	080278a8 	.word	0x080278a8

08011f1c <pifComm_AllocTxBuffer>:

BOOL pifComm_AllocTxBuffer(PifComm* p_owner, uint16_t tx_size)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	460b      	mov	r3, r1
 8011f26:	807b      	strh	r3, [r7, #2]
	if (!tx_size) {
 8011f28:	887b      	ldrh	r3, [r7, #2]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d104      	bne.n	8011f38 <pifComm_AllocTxBuffer+0x1c>
    	pif_error = E_INVALID_PARAM;
 8011f2e:	4b0f      	ldr	r3, [pc, #60]	; (8011f6c <pifComm_AllocTxBuffer+0x50>)
 8011f30:	2201      	movs	r2, #1
 8011f32:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8011f34:	2300      	movs	r3, #0
 8011f36:	e014      	b.n	8011f62 <pifComm_AllocTxBuffer+0x46>
    }

    p_owner->_p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, tx_size);
 8011f38:	887b      	ldrh	r3, [r7, #2]
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	2000      	movs	r0, #0
 8011f3e:	f001 fc49 	bl	80137d4 <pifRingBuffer_CreateHeap>
 8011f42:	4602      	mov	r2, r0
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	615a      	str	r2, [r3, #20]
    if (!p_owner->_p_tx_buffer) return FALSE;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	695b      	ldr	r3, [r3, #20]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d101      	bne.n	8011f54 <pifComm_AllocTxBuffer+0x38>
 8011f50:	2300      	movs	r3, #0
 8011f52:	e006      	b.n	8011f62 <pifComm_AllocTxBuffer+0x46>
    pifRingBuffer_SetName(p_owner->_p_tx_buffer, "TB");
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	695b      	ldr	r3, [r3, #20]
 8011f58:	4905      	ldr	r1, [pc, #20]	; (8011f70 <pifComm_AllocTxBuffer+0x54>)
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f001 fce3 	bl	8013926 <pifRingBuffer_SetName>
	return TRUE;
 8011f60:	2301      	movs	r3, #1
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3708      	adds	r7, #8
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	20001d48 	.word	0x20001d48
 8011f70:	080278ac 	.word	0x080278ac

08011f74 <pifComm_AttachClient>:

void pifComm_AttachClient(PifComm* p_owner, void* p_client, PifEvtCommParsing evt_parsing, PifEvtCommSending evt_sending)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
 8011f80:	603b      	str	r3, [r7, #0]
	p_owner->__p_client = p_client;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = evt_parsing;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = evt_sending;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	683a      	ldr	r2, [r7, #0]
 8011f92:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011f94:	bf00      	nop
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <pifComm_DetachClient>:

void pifComm_DetachClient(PifComm* p_owner)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
	p_owner->__p_client = NULL;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	621a      	str	r2, [r3, #32]
	p_owner->__evt_parsing = NULL;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__evt_sending = NULL;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011fba:	bf00      	nop
 8011fbc:	370c      	adds	r7, #12
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc4:	4770      	bx	lr

08011fc6 <pifComm_PutRxByte>:
{
	return pifRingBuffer_GetFillSize(p_owner->_p_tx_buffer);
}

BOOL pifComm_PutRxByte(PifComm* p_owner, uint8_t data)
{
 8011fc6:	b580      	push	{r7, lr}
 8011fc8:	b082      	sub	sp, #8
 8011fca:	af00      	add	r7, sp, #0
 8011fcc:	6078      	str	r0, [r7, #4]
 8011fce:	460b      	mov	r3, r1
 8011fd0:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->_p_rx_buffer) return FALSE;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	699b      	ldr	r3, [r3, #24]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d101      	bne.n	8011fde <pifComm_PutRxByte+0x18>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	e01c      	b.n	8012018 <pifComm_PutRxByte+0x52>

	if (!pifRingBuffer_PutByte(p_owner->_p_rx_buffer, data)) return FALSE;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	699b      	ldr	r3, [r3, #24]
 8011fe2:	78fa      	ldrb	r2, [r7, #3]
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f001 fdac 	bl	8013b44 <pifRingBuffer_PutByte>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d101      	bne.n	8011ff6 <pifComm_PutRxByte+0x30>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	e010      	b.n	8012018 <pifComm_PutRxByte+0x52>
	if (pifRingBuffer_GetFillSize(p_owner->_p_rx_buffer) >= p_owner->__rx_threshold) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	699b      	ldr	r3, [r3, #24]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f001 fce0 	bl	80139c0 <pifRingBuffer_GetFillSize>
 8012000:	4603      	mov	r3, r0
 8012002:	461a      	mov	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012008:	429a      	cmp	r2, r3
 801200a:	d304      	bcc.n	8012016 <pifComm_PutRxByte+0x50>
		pifTask_SetTrigger(p_owner->_p_task);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	69db      	ldr	r3, [r3, #28]
 8012010:	4618      	mov	r0, r3
 8012012:	f002 fa7d 	bl	8014510 <pifTask_SetTrigger>
	}
	return TRUE;
 8012016:	2301      	movs	r3, #1
}
 8012018:	4618      	mov	r0, r3
 801201a:	3708      	adds	r7, #8
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <pifComm_StartGetTxData>:
	else ucState |= PIF_COMM_SEND_DATA_STATE_EMPTY;
	return ucState;
}

uint8_t pifComm_StartGetTxData(PifComm* p_owner, uint8_t** pp_data, uint16_t* p_length)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
	uint16_t usLength;

    if (!p_owner->_p_tx_buffer) return PIF_COMM_SEND_DATA_STATE_INIT;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	695b      	ldr	r3, [r3, #20]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d101      	bne.n	8012038 <pifComm_StartGetTxData+0x18>
 8012034:	2300      	movs	r3, #0
 8012036:	e027      	b.n	8012088 <pifComm_StartGetTxData+0x68>
    if (pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer)) return PIF_COMM_SEND_DATA_STATE_EMPTY;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	4618      	mov	r0, r3
 801203e:	f001 fcac 	bl	801399a <pifRingBuffer_IsEmpty>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d001      	beq.n	801204c <pifComm_StartGetTxData+0x2c>
 8012048:	2302      	movs	r3, #2
 801204a:	e01d      	b.n	8012088 <pifComm_StartGetTxData+0x68>

    *pp_data = pifRingBuffer_GetTailPointer(p_owner->_p_tx_buffer, 0);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	695b      	ldr	r3, [r3, #20]
 8012050:	2100      	movs	r1, #0
 8012052:	4618      	mov	r0, r3
 8012054:	f001 fc75 	bl	8013942 <pifRingBuffer_GetTailPointer>
 8012058:	4602      	mov	r2, r0
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	601a      	str	r2, [r3, #0]
    usLength = pifRingBuffer_GetLinerSize(p_owner->_p_tx_buffer, 0);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	695b      	ldr	r3, [r3, #20]
 8012062:	2100      	movs	r1, #0
 8012064:	4618      	mov	r0, r3
 8012066:	f001 fccd 	bl	8013a04 <pifRingBuffer_GetLinerSize>
 801206a:	4603      	mov	r3, r0
 801206c:	82fb      	strh	r3, [r7, #22]
    if (!*p_length || usLength <= *p_length) *p_length = usLength;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	881b      	ldrh	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d004      	beq.n	8012080 <pifComm_StartGetTxData+0x60>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	8afa      	ldrh	r2, [r7, #22]
 801207c:	429a      	cmp	r2, r3
 801207e:	d802      	bhi.n	8012086 <pifComm_StartGetTxData+0x66>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	8afa      	ldrh	r2, [r7, #22]
 8012084:	801a      	strh	r2, [r3, #0]
	return PIF_COMM_SEND_DATA_STATE_DATA;
 8012086:	2301      	movs	r3, #1
}
 8012088:	4618      	mov	r0, r3
 801208a:	3718      	adds	r7, #24
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <pifComm_EndGetTxData>:

uint8_t pifComm_EndGetTxData(PifComm* p_owner, uint16_t length)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	460b      	mov	r3, r1
 801209a:	807b      	strh	r3, [r7, #2]
    pifRingBuffer_Remove(p_owner->_p_tx_buffer, length);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	695b      	ldr	r3, [r3, #20]
 80120a0:	887a      	ldrh	r2, [r7, #2]
 80120a2:	4611      	mov	r1, r2
 80120a4:	4618      	mov	r0, r3
 80120a6:	f001 fe8a 	bl	8013dbe <pifRingBuffer_Remove>
	return pifRingBuffer_IsEmpty(p_owner->_p_tx_buffer) << 1;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	695b      	ldr	r3, [r3, #20]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f001 fc73 	bl	801399a <pifRingBuffer_IsEmpty>
 80120b4:	4603      	mov	r3, r0
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	b2db      	uxtb	r3, r3
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <pifComm_FinishTransfer>:
	}
	return FALSE;
}

void pifComm_FinishTransfer(PifComm* p_owner)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
	p_owner->__state = CTS_IDLE;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2200      	movs	r2, #0
 80120ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pifTask_SetTrigger(p_owner->_p_task);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	4618      	mov	r0, r3
 80120d8:	f002 fa1a 	bl	8014510 <pifTask_SetTrigger>
}
 80120dc:	bf00      	nop
 80120de:	3708      	adds	r7, #8
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <_doTask>:
{
	if (p_owner->__evt_sending) _sendData(p_owner);
}

static uint16_t _doTask(PifTask* p_task)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
	PifComm *p_owner = p_task->_p_client;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	60fb      	str	r3, [r7, #12]

	if (p_owner->__evt_parsing) {
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d017      	beq.n	801212a <_doTask+0x46>
		if (p_owner->act_receive_data) {
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d008      	beq.n	8012114 <_doTask+0x30>
			(*p_owner->__evt_parsing)(p_owner->__p_client, p_owner->act_receive_data);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	6a10      	ldr	r0, [r2, #32]
 801210a:	68fa      	ldr	r2, [r7, #12]
 801210c:	6852      	ldr	r2, [r2, #4]
 801210e:	4611      	mov	r1, r2
 8012110:	4798      	blx	r3
 8012112:	e00a      	b.n	801212a <_doTask+0x46>
		}
		else if (p_owner->_p_rx_buffer) {
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	699b      	ldr	r3, [r3, #24]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d006      	beq.n	801212a <_doTask+0x46>
			(*p_owner->__evt_parsing)(p_owner->__p_client, _actReceiveData);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012120:	68fa      	ldr	r2, [r7, #12]
 8012122:	6a12      	ldr	r2, [r2, #32]
 8012124:	4907      	ldr	r1, [pc, #28]	; (8012144 <_doTask+0x60>)
 8012126:	4610      	mov	r0, r2
 8012128:	4798      	blx	r3
		}
	}

	if (p_owner->__evt_sending) _sendData(p_owner);
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <_doTask+0x54>
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f7ff fe20 	bl	8011d78 <_sendData>
	return 0;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	08011d05 	.word	0x08011d05

08012148 <pifComm_AttachTask>:

PifTask* pifComm_AttachTask(PifComm* p_owner, PifTaskMode mode, uint16_t period, BOOL start, const char* name)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af02      	add	r7, sp, #8
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	4608      	mov	r0, r1
 8012152:	4611      	mov	r1, r2
 8012154:	461a      	mov	r2, r3
 8012156:	4603      	mov	r3, r0
 8012158:	70fb      	strb	r3, [r7, #3]
 801215a:	460b      	mov	r3, r1
 801215c:	803b      	strh	r3, [r7, #0]
 801215e:	4613      	mov	r3, r2
 8012160:	70bb      	strb	r3, [r7, #2]
	p_owner->_p_task = pifTaskManager_Add(mode, period, _doTask, p_owner, start);
 8012162:	8839      	ldrh	r1, [r7, #0]
 8012164:	78f8      	ldrb	r0, [r7, #3]
 8012166:	78bb      	ldrb	r3, [r7, #2]
 8012168:	9300      	str	r3, [sp, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	4a0d      	ldr	r2, [pc, #52]	; (80121a4 <pifComm_AttachTask+0x5c>)
 801216e:	f002 fa55 	bl	801461c <pifTaskManager_Add>
 8012172:	4602      	mov	r2, r0
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	61da      	str	r2, [r3, #28]
	if (p_owner->_p_task) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	69db      	ldr	r3, [r3, #28]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d00b      	beq.n	8012198 <pifComm_AttachTask+0x50>
		if (name) p_owner->_p_task->name = name;
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d004      	beq.n	8012190 <pifComm_AttachTask+0x48>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	69db      	ldr	r3, [r3, #28]
 801218a:	693a      	ldr	r2, [r7, #16]
 801218c:	601a      	str	r2, [r3, #0]
 801218e:	e003      	b.n	8012198 <pifComm_AttachTask+0x50>
		else p_owner->_p_task->name = "Comm";
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	69db      	ldr	r3, [r3, #28]
 8012194:	4a04      	ldr	r2, [pc, #16]	; (80121a8 <pifComm_AttachTask+0x60>)
 8012196:	601a      	str	r2, [r3, #0]
	}
	return p_owner->_p_task;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	69db      	ldr	r3, [r3, #28]
}
 801219c:	4618      	mov	r0, r3
 801219e:	3708      	adds	r7, #8
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	080120e5 	.word	0x080120e5
 80121a8:	080278b0 	.word	0x080278b0

080121ac <pifI2cPort_Init>:
#endif
#include "core/pif_task.h"


BOOL pifI2cPort_Init(PifI2cPort* p_owner, PifId id, uint8_t device_count, uint16_t max_transfer_size)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	4608      	mov	r0, r1
 80121b6:	4611      	mov	r1, r2
 80121b8:	461a      	mov	r2, r3
 80121ba:	4603      	mov	r3, r0
 80121bc:	817b      	strh	r3, [r7, #10]
 80121be:	460b      	mov	r3, r1
 80121c0:	727b      	strb	r3, [r7, #9]
 80121c2:	4613      	mov	r3, r2
 80121c4:	80fb      	strh	r3, [r7, #6]
	if (!p_owner || !device_count || !max_transfer_size) {
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d005      	beq.n	80121d8 <pifI2cPort_Init+0x2c>
 80121cc:	7a7b      	ldrb	r3, [r7, #9]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d002      	beq.n	80121d8 <pifI2cPort_Init+0x2c>
 80121d2:	88fb      	ldrh	r3, [r7, #6]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d104      	bne.n	80121e2 <pifI2cPort_Init+0x36>
		pif_error = E_INVALID_PARAM;
 80121d8:	4b17      	ldr	r3, [pc, #92]	; (8012238 <pifI2cPort_Init+0x8c>)
 80121da:	2201      	movs	r2, #1
 80121dc:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80121de:	2300      	movs	r3, #0
 80121e0:	e025      	b.n	801222e <pifI2cPort_Init+0x82>
	}

    memset(p_owner, 0, sizeof(PifI2cPort));
 80121e2:	2230      	movs	r2, #48	; 0x30
 80121e4:	2100      	movs	r1, #0
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f010 fffe 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 80121ec:	897b      	ldrh	r3, [r7, #10]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d106      	bne.n	8012200 <pifI2cPort_Init+0x54>
 80121f2:	4b12      	ldr	r3, [pc, #72]	; (801223c <pifI2cPort_Init+0x90>)
 80121f4:	881b      	ldrh	r3, [r3, #0]
 80121f6:	1c5a      	adds	r2, r3, #1
 80121f8:	b291      	uxth	r1, r2
 80121fa:	4a10      	ldr	r2, [pc, #64]	; (801223c <pifI2cPort_Init+0x90>)
 80121fc:	8011      	strh	r1, [r2, #0]
 80121fe:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	897a      	ldrh	r2, [r7, #10]
 8012204:	819a      	strh	r2, [r3, #12]
    p_owner->__max_transfer_size = max_transfer_size;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	88fa      	ldrh	r2, [r7, #6]
 801220a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	3310      	adds	r3, #16
 8012210:	7a7a      	ldrb	r2, [r7, #9]
 8012212:	2108      	movs	r1, #8
 8012214:	4618      	mov	r0, r3
 8012216:	f000 fa7d 	bl	8012714 <pifFixList_Init>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d001      	beq.n	8012224 <pifI2cPort_Init+0x78>
    return TRUE;
 8012220:	2301      	movs	r3, #1
 8012222:	e004      	b.n	801222e <pifI2cPort_Init+0x82>
    if (!pifFixList_Init(&p_owner->__devices, sizeof(PifI2cDevice), device_count)) goto fail;
 8012224:	bf00      	nop

fail:
	pifI2cPort_Clear(p_owner);
 8012226:	68f8      	ldr	r0, [r7, #12]
 8012228:	f000 f80a 	bl	8012240 <pifI2cPort_Clear>
	return FALSE;
 801222c:	2300      	movs	r3, #0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3710      	adds	r7, #16
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	20001d48 	.word	0x20001d48
 801223c:	20000128 	.word	0x20000128

08012240 <pifI2cPort_Clear>:

void pifI2cPort_Clear(PifI2cPort* p_owner)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
	pifFixList_Clear(&p_owner->__devices, NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	3310      	adds	r3, #16
 801224c:	2100      	movs	r1, #0
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fac0 	bl	80127d4 <pifFixList_Clear>
}
 8012254:	bf00      	nop
 8012256:	3708      	adds	r7, #8
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <pifI2cPort_AddDevice>:

PifI2cDevice* pifI2cPort_AddDevice(PifI2cPort* p_owner)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
	if (!p_owner) {
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d104      	bne.n	8012274 <pifI2cPort_AddDevice+0x18>
		pif_error = E_INVALID_PARAM;
 801226a:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <pifI2cPort_AddDevice+0x44>)
 801226c:	2201      	movs	r2, #1
 801226e:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8012270:	2300      	movs	r3, #0
 8012272:	e011      	b.n	8012298 <pifI2cPort_AddDevice+0x3c>
	}

	PifI2cDevice* p_device = (PifI2cDevice*)pifFixList_AddFirst(&p_owner->__devices);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	3310      	adds	r3, #16
 8012278:	4618      	mov	r0, r3
 801227a:	f000 fade 	bl	801283a <pifFixList_AddFirst>
 801227e:	60f8      	str	r0, [r7, #12]
    if (!p_device) return FALSE;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d101      	bne.n	801228a <pifI2cPort_AddDevice+0x2e>
 8012286:	2300      	movs	r3, #0
 8012288:	e006      	b.n	8012298 <pifI2cPort_AddDevice+0x3c>

    p_device->__p_port = p_owner;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	605a      	str	r2, [r3, #4]
    p_device->timeout = 10;		// 10ms
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	220a      	movs	r2, #10
 8012294:	705a      	strb	r2, [r3, #1]
    return p_device;
 8012296:	68fb      	ldr	r3, [r7, #12]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3710      	adds	r7, #16
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	20001d48 	.word	0x20001d48

080122a4 <pifI2cPort_RemoveDevice>:

void pifI2cPort_RemoveDevice(PifI2cPort* p_owner, PifI2cDevice* p_device)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
	if (p_device) {
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d007      	beq.n	80122c4 <pifI2cPort_RemoveDevice+0x20>
		pifFixList_Remove(&p_owner->__devices, p_device);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	3310      	adds	r3, #16
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f000 faf1 	bl	80128a2 <pifFixList_Remove>
		p_device = NULL;
 80122c0:	2300      	movs	r3, #0
 80122c2:	603b      	str	r3, [r7, #0]
	}
}
 80122c4:	bf00      	nop
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <pifI2cDevice_Read>:
}

#endif

BOOL pifI2cDevice_Read(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80122cc:	b5b0      	push	{r4, r5, r7, lr}
 80122ce:	b08a      	sub	sp, #40	; 0x28
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	603b      	str	r3, [r7, #0]
 80122d8:	4613      	mov	r3, r2
 80122da:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	61bb      	str	r3, [r7, #24]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_read) return FALSE;
 80122e2:	69bb      	ldr	r3, [r7, #24]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d101      	bne.n	80122ee <pifI2cDevice_Read+0x22>
 80122ea:	2300      	movs	r3, #0
 80122ec:	e06e      	b.n	80123cc <pifI2cDevice_Read+0x100>
	if (p_port->__use_device) {
 80122ee:	69bb      	ldr	r3, [r7, #24]
 80122f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d001      	beq.n	80122fa <pifI2cDevice_Read+0x2e>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CR:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
#endif
		return FALSE;
 80122f6:	2300      	movs	r3, #0
 80122f8:	e068      	b.n	80123cc <pifI2cDevice_Read+0x100>
	}

	p_port->__use_device = p_owner;
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2201      	movs	r2, #1
 8012304:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 8012306:	2300      	movs	r3, #0
 8012308:	61fb      	str	r3, [r7, #28]
	while (size) {
 801230a:	e03f      	b.n	801238c <pifI2cDevice_Read+0xc0>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012310:	461a      	mov	r2, r3
 8012312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012314:	4293      	cmp	r3, r2
 8012316:	bf28      	it	cs
 8012318:	4613      	movcs	r3, r2
 801231a:	75fb      	strb	r3, [r7, #23]
		switch ((*p_port->act_read)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	685c      	ldr	r4, [r3, #4]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	7818      	ldrb	r0, [r3, #0]
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	18d1      	adds	r1, r2, r3
 801232a:	683a      	ldr	r2, [r7, #0]
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	18d5      	adds	r5, r2, r3
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	b29b      	uxth	r3, r3
 8012334:	79fa      	ldrb	r2, [r7, #7]
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	462b      	mov	r3, r5
 801233a:	47a0      	blx	r4
 801233c:	4603      	mov	r3, r0
 801233e:	2b02      	cmp	r3, #2
 8012340:	d02f      	beq.n	80123a2 <pifI2cDevice_Read+0xd6>
 8012342:	2b02      	cmp	r3, #2
 8012344:	dc1a      	bgt.n	801237c <pifI2cDevice_Read+0xb0>
 8012346:	2b00      	cmp	r3, #0
 8012348:	d001      	beq.n	801234e <pifI2cDevice_Read+0x82>
 801234a:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 801234c:	e016      	b.n	801237c <pifI2cDevice_Read+0xb0>
			timer1ms = pif_cumulative_timer1ms;
 801234e:	4b21      	ldr	r3, [pc, #132]	; (80123d4 <pifI2cDevice_Read+0x108>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	613b      	str	r3, [r7, #16]
			while (p_owner->_state == IS_RUN) {
 8012354:	e007      	b.n	8012366 <pifI2cDevice_Read+0x9a>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 8012356:	4b1f      	ldr	r3, [pc, #124]	; (80123d4 <pifI2cDevice_Read+0x108>)
 8012358:	681a      	ldr	r2, [r3, #0]
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	7852      	ldrb	r2, [r2, #1]
 8012362:	4293      	cmp	r3, r2
 8012364:	d81f      	bhi.n	80123a6 <pifI2cDevice_Read+0xda>
			while (p_owner->_state == IS_RUN) {
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	789b      	ldrb	r3, [r3, #2]
 801236a:	b2db      	uxtb	r3, r3
 801236c:	2b01      	cmp	r3, #1
 801236e:	d0f2      	beq.n	8012356 <pifI2cDevice_Read+0x8a>
			if (p_owner->_state == IS_ERROR) {
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	789b      	ldrb	r3, [r3, #2]
 8012374:	b2db      	uxtb	r3, r3
 8012376:	2b03      	cmp	r3, #3
 8012378:	d017      	beq.n	80123aa <pifI2cDevice_Read+0xde>
			break;
 801237a:	bf00      	nop
#ifndef __PIF_NO_LOG__
			line = __LINE__;
#endif
			goto fail;
		}
		ptr += len;
 801237c:	7dfb      	ldrb	r3, [r7, #23]
 801237e:	69fa      	ldr	r2, [r7, #28]
 8012380:	4413      	add	r3, r2
 8012382:	61fb      	str	r3, [r7, #28]
		size -= len;
 8012384:	7dfb      	ldrb	r3, [r7, #23]
 8012386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012388:	1ad3      	subs	r3, r2, r3
 801238a:	633b      	str	r3, [r7, #48]	; 0x30
	while (size) {
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1bc      	bne.n	801230c <pifI2cDevice_Read+0x40>
	}
	p_port->__use_device = NULL;
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	2200      	movs	r2, #0
 8012396:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2200      	movs	r2, #0
 801239c:	709a      	strb	r2, [r3, #2]
	return TRUE;
 801239e:	2301      	movs	r3, #1
 80123a0:	e014      	b.n	80123cc <pifI2cDevice_Read+0x100>
			goto fail;
 80123a2:	bf00      	nop
 80123a4:	e002      	b.n	80123ac <pifI2cDevice_Read+0xe0>
					goto fail;
 80123a6:	bf00      	nop
 80123a8:	e000      	b.n	80123ac <pifI2cDevice_Read+0xe0>
				goto fail;
 80123aa:	bf00      	nop

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CR:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
#endif
	p_port->__use_device = NULL;
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	2200      	movs	r2, #0
 80123b0:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	3301      	adds	r3, #1
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2200      	movs	r2, #0
 80123c2:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80123c4:	4b04      	ldr	r3, [pc, #16]	; (80123d8 <pifI2cDevice_Read+0x10c>)
 80123c6:	220a      	movs	r2, #10
 80123c8:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3720      	adds	r7, #32
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bdb0      	pop	{r4, r5, r7, pc}
 80123d4:	20001d60 	.word	0x20001d60
 80123d8:	20001d48 	.word	0x20001d48

080123dc <pifI2cDevice_ReadRegByte>:

BOOL pifI2cDevice_ReadRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af02      	add	r7, sp, #8
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	460b      	mov	r3, r1
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, 1);
 80123ea:	7af9      	ldrb	r1, [r7, #11]
 80123ec:	2301      	movs	r3, #1
 80123ee:	9300      	str	r3, [sp, #0]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2201      	movs	r2, #1
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f7ff ff69 	bl	80122cc <pifI2cDevice_Read>
 80123fa:	4603      	mov	r3, r0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3710      	adds	r7, #16
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <pifI2cDevice_ReadRegWord>:

BOOL pifI2cDevice_ReadRegWord(PifI2cDevice* p_owner, uint8_t reg, uint16_t* p_data)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b088      	sub	sp, #32
 8012408:	af02      	add	r7, sp, #8
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	460b      	mov	r3, r1
 801240e:	607a      	str	r2, [r7, #4]
 8012410:	72fb      	strb	r3, [r7, #11]
	uint8_t tmp[2];

	if (!pifI2cDevice_Read(p_owner, reg, 1, tmp, 2)) return FALSE;
 8012412:	7af9      	ldrb	r1, [r7, #11]
 8012414:	f107 0314 	add.w	r3, r7, #20
 8012418:	2202      	movs	r2, #2
 801241a:	9200      	str	r2, [sp, #0]
 801241c:	2201      	movs	r2, #1
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f7ff ff54 	bl	80122cc <pifI2cDevice_Read>
 8012424:	4603      	mov	r3, r0
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <pifI2cDevice_ReadRegWord+0x2a>
 801242a:	2300      	movs	r3, #0
 801242c:	e00a      	b.n	8012444 <pifI2cDevice_ReadRegWord+0x40>
	*p_data = (tmp[0] << 8) + tmp[1];
 801242e:	7d3b      	ldrb	r3, [r7, #20]
 8012430:	b29b      	uxth	r3, r3
 8012432:	021b      	lsls	r3, r3, #8
 8012434:	b29a      	uxth	r2, r3
 8012436:	7d7b      	ldrb	r3, [r7, #21]
 8012438:	b29b      	uxth	r3, r3
 801243a:	4413      	add	r3, r2
 801243c:	b29a      	uxth	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8012442:	2301      	movs	r3, #1
}
 8012444:	4618      	mov	r0, r3
 8012446:	3718      	adds	r7, #24
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}

0801244c <pifI2cDevice_ReadRegBytes>:

BOOL pifI2cDevice_ReadRegBytes(PifI2cDevice* p_owner, uint8_t reg, uint8_t* p_data, size_t size)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af02      	add	r7, sp, #8
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	607a      	str	r2, [r7, #4]
 8012456:	603b      	str	r3, [r7, #0]
 8012458:	460b      	mov	r3, r1
 801245a:	72fb      	strb	r3, [r7, #11]
	return pifI2cDevice_Read(p_owner, reg, 1, p_data, size);
 801245c:	7af9      	ldrb	r1, [r7, #11]
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	9300      	str	r3, [sp, #0]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2201      	movs	r2, #1
 8012466:	68f8      	ldr	r0, [r7, #12]
 8012468:	f7ff ff30 	bl	80122cc <pifI2cDevice_Read>
 801246c:	4603      	mov	r3, r0
}
 801246e:	4618      	mov	r0, r3
 8012470:	3710      	adds	r7, #16
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <pifI2cDevice_ReadRegBit8>:

BOOL pifI2cDevice_ReadRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t* p_data)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b088      	sub	sp, #32
 801247a:	af02      	add	r7, sp, #8
 801247c:	60f8      	str	r0, [r7, #12]
 801247e:	607b      	str	r3, [r7, #4]
 8012480:	460b      	mov	r3, r1
 8012482:	72fb      	strb	r3, [r7, #11]
 8012484:	4613      	mov	r3, r2
 8012486:	813b      	strh	r3, [r7, #8]
	uint8_t tmp, shift, mask;

	shift = field >> 8;
 8012488:	893b      	ldrh	r3, [r7, #8]
 801248a:	0a1b      	lsrs	r3, r3, #8
 801248c:	b29b      	uxth	r3, r3
 801248e:	75fb      	strb	r3, [r7, #23]
	mask = (1 << (field & 0xFF)) - 1;
 8012490:	893b      	ldrh	r3, [r7, #8]
 8012492:	b2db      	uxtb	r3, r3
 8012494:	2201      	movs	r2, #1
 8012496:	fa02 f303 	lsl.w	r3, r2, r3
 801249a:	b2db      	uxtb	r3, r3
 801249c:	3b01      	subs	r3, #1
 801249e:	75bb      	strb	r3, [r7, #22]

	if (!pifI2cDevice_Read(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80124a0:	7af9      	ldrb	r1, [r7, #11]
 80124a2:	f107 0315 	add.w	r3, r7, #21
 80124a6:	2201      	movs	r2, #1
 80124a8:	9200      	str	r2, [sp, #0]
 80124aa:	2201      	movs	r2, #1
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ff ff0d 	bl	80122cc <pifI2cDevice_Read>
 80124b2:	4603      	mov	r3, r0
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <pifI2cDevice_ReadRegBit8+0x46>
 80124b8:	2300      	movs	r3, #0
 80124ba:	e00d      	b.n	80124d8 <pifI2cDevice_ReadRegBit8+0x62>
	*p_data = (tmp >> shift) & mask;
 80124bc:	7d7b      	ldrb	r3, [r7, #21]
 80124be:	461a      	mov	r2, r3
 80124c0:	7dfb      	ldrb	r3, [r7, #23]
 80124c2:	fa42 f303 	asr.w	r3, r2, r3
 80124c6:	b25a      	sxtb	r2, r3
 80124c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80124cc:	4013      	ands	r3, r2
 80124ce:	b25b      	sxtb	r3, r3
 80124d0:	b2da      	uxtb	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	701a      	strb	r2, [r3, #0]
	return TRUE;
 80124d6:	2301      	movs	r3, #1
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3718      	adds	r7, #24
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <pifI2cDevice_Write>:
	*p_data = (((tmp[0] << 8) + tmp[1]) >> shift) & mask;
	return TRUE;
}

BOOL pifI2cDevice_Write(PifI2cDevice* p_owner, uint32_t iaddr, uint8_t isize, uint8_t* p_data, size_t size)
{
 80124e0:	b5b0      	push	{r4, r5, r7, lr}
 80124e2:	b08a      	sub	sp, #40	; 0x28
 80124e4:	af02      	add	r7, sp, #8
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	603b      	str	r3, [r7, #0]
 80124ec:	4613      	mov	r3, r2
 80124ee:	71fb      	strb	r3, [r7, #7]
	PifI2cPort* p_port = p_owner->__p_port;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	61bb      	str	r3, [r7, #24]
	size_t ptr;
#ifndef __PIF_NO_LOG__
	int line;
#endif

	if (!p_port->act_write) return FALSE;
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d101      	bne.n	8012502 <pifI2cDevice_Write+0x22>
 80124fe:	2300      	movs	r3, #0
 8012500:	e06e      	b.n	80125e0 <pifI2cDevice_Write+0x100>
	if (p_port->__use_device) {
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012506:	2b00      	cmp	r3, #0
 8012508:	d001      	beq.n	801250e <pifI2cDevice_Write+0x2e>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_INFO, "I2CW:%u Addr:%Xh Use Addr:%Xh", __LINE__, p_owner->addr, p_port->__use_device->addr);
#endif
		return FALSE;
 801250a:	2300      	movs	r3, #0
 801250c:	e068      	b.n	80125e0 <pifI2cDevice_Write+0x100>
	}

	p_port->__use_device = p_owner;
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_RUN;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2201      	movs	r2, #1
 8012518:	709a      	strb	r2, [r3, #2]
	ptr = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	61fb      	str	r3, [r7, #28]
	while (size) {
 801251e:	e03f      	b.n	80125a0 <pifI2cDevice_Write+0xc0>
		len = size > p_port->__max_transfer_size ? p_port->__max_transfer_size : size;
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012524:	461a      	mov	r2, r3
 8012526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012528:	4293      	cmp	r3, r2
 801252a:	bf28      	it	cs
 801252c:	4613      	movcs	r3, r2
 801252e:	75fb      	strb	r3, [r7, #23]
		switch ((*p_port->act_write)(p_owner->addr, iaddr + ptr, isize, p_data + ptr, len)) {
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	689c      	ldr	r4, [r3, #8]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	7818      	ldrb	r0, [r3, #0]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	18d1      	adds	r1, r2, r3
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	18d5      	adds	r5, r2, r3
 8012544:	7dfb      	ldrb	r3, [r7, #23]
 8012546:	b29b      	uxth	r3, r3
 8012548:	79fa      	ldrb	r2, [r7, #7]
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	462b      	mov	r3, r5
 801254e:	47a0      	blx	r4
 8012550:	4603      	mov	r3, r0
 8012552:	2b02      	cmp	r3, #2
 8012554:	d02f      	beq.n	80125b6 <pifI2cDevice_Write+0xd6>
 8012556:	2b02      	cmp	r3, #2
 8012558:	dc1a      	bgt.n	8012590 <pifI2cDevice_Write+0xb0>
 801255a:	2b00      	cmp	r3, #0
 801255c:	d001      	beq.n	8012562 <pifI2cDevice_Write+0x82>
 801255e:	2b01      	cmp	r3, #1
				goto fail;
			}
			break;

		case IR_COMPLETE:
			break;
 8012560:	e016      	b.n	8012590 <pifI2cDevice_Write+0xb0>
			timer1ms = pif_cumulative_timer1ms;
 8012562:	4b21      	ldr	r3, [pc, #132]	; (80125e8 <pifI2cDevice_Write+0x108>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	613b      	str	r3, [r7, #16]
			while (p_owner->_state == IS_RUN) {
 8012568:	e007      	b.n	801257a <pifI2cDevice_Write+0x9a>
				if (pif_cumulative_timer1ms - timer1ms > p_owner->timeout) {
 801256a:	4b1f      	ldr	r3, [pc, #124]	; (80125e8 <pifI2cDevice_Write+0x108>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	1ad3      	subs	r3, r2, r3
 8012572:	68fa      	ldr	r2, [r7, #12]
 8012574:	7852      	ldrb	r2, [r2, #1]
 8012576:	4293      	cmp	r3, r2
 8012578:	d81f      	bhi.n	80125ba <pifI2cDevice_Write+0xda>
			while (p_owner->_state == IS_RUN) {
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	789b      	ldrb	r3, [r3, #2]
 801257e:	b2db      	uxtb	r3, r3
 8012580:	2b01      	cmp	r3, #1
 8012582:	d0f2      	beq.n	801256a <pifI2cDevice_Write+0x8a>
			if (p_owner->_state == IS_ERROR) {
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	789b      	ldrb	r3, [r3, #2]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2b03      	cmp	r3, #3
 801258c:	d017      	beq.n	80125be <pifI2cDevice_Write+0xde>
			break;
 801258e:	bf00      	nop
#ifndef __PIF_NO_LOG__
			line = __LINE__;
#endif
			goto fail;
		}
		ptr += len;
 8012590:	7dfb      	ldrb	r3, [r7, #23]
 8012592:	69fa      	ldr	r2, [r7, #28]
 8012594:	4413      	add	r3, r2
 8012596:	61fb      	str	r3, [r7, #28]
		size -= len;
 8012598:	7dfb      	ldrb	r3, [r7, #23]
 801259a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	633b      	str	r3, [r7, #48]	; 0x30
	while (size) {
 80125a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1bc      	bne.n	8012520 <pifI2cDevice_Write+0x40>
	}
	p_port->__use_device = NULL;
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	2200      	movs	r2, #0
 80125aa:	62da      	str	r2, [r3, #44]	; 0x2c
	p_owner->_state = IS_IDLE;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2200      	movs	r2, #0
 80125b0:	709a      	strb	r2, [r3, #2]
	return TRUE;
 80125b2:	2301      	movs	r3, #1
 80125b4:	e014      	b.n	80125e0 <pifI2cDevice_Write+0x100>
			goto fail;
 80125b6:	bf00      	nop
 80125b8:	e002      	b.n	80125c0 <pifI2cDevice_Write+0xe0>
					goto fail;
 80125ba:	bf00      	nop
 80125bc:	e000      	b.n	80125c0 <pifI2cDevice_Write+0xe0>
				goto fail;
 80125be:	bf00      	nop

fail:
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "I2CW:%u A:%Xh R:%Xh E:%u", line, p_owner->addr, iaddr, pif_error);
#endif
	p_port->__use_device = NULL;
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	2200      	movs	r2, #0
 80125c4:	62da      	str	r2, [r3, #44]	; 0x2c
	p_port->error_count++;
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	3301      	adds	r3, #1
 80125cc:	b29a      	uxth	r2, r3
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	801a      	strh	r2, [r3, #0]
	p_owner->_state = IS_IDLE;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2200      	movs	r2, #0
 80125d6:	709a      	strb	r2, [r3, #2]
	pif_error = E_TRANSFER_FAILED;
 80125d8:	4b04      	ldr	r3, [pc, #16]	; (80125ec <pifI2cDevice_Write+0x10c>)
 80125da:	220a      	movs	r2, #10
 80125dc:	701a      	strb	r2, [r3, #0]
	return FALSE;
 80125de:	2300      	movs	r3, #0
}
 80125e0:	4618      	mov	r0, r3
 80125e2:	3720      	adds	r7, #32
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bdb0      	pop	{r4, r5, r7, pc}
 80125e8:	20001d60 	.word	0x20001d60
 80125ec:	20001d48 	.word	0x20001d48

080125f0 <pifI2cDevice_WriteRegByte>:

BOOL pifI2cDevice_WriteRegByte(PifI2cDevice* p_owner, uint8_t reg, uint8_t data)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af02      	add	r7, sp, #8
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	460b      	mov	r3, r1
 80125fa:	70fb      	strb	r3, [r7, #3]
 80125fc:	4613      	mov	r3, r2
 80125fe:	70bb      	strb	r3, [r7, #2]
	return pifI2cDevice_Write(p_owner, reg, 1, &data, 1);
 8012600:	78f9      	ldrb	r1, [r7, #3]
 8012602:	1cbb      	adds	r3, r7, #2
 8012604:	2201      	movs	r2, #1
 8012606:	9200      	str	r2, [sp, #0]
 8012608:	2201      	movs	r2, #1
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7ff ff68 	bl	80124e0 <pifI2cDevice_Write>
 8012610:	4603      	mov	r3, r0
}
 8012612:	4618      	mov	r0, r3
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
	...

0801261c <pifI2cDevice_WriteRegBit8>:
{
	return pifI2cDevice_Write(p_owner, reg, 1, p_data, size);
}

BOOL pifI2cDevice_WriteRegBit8(PifI2cDevice* p_owner, uint8_t reg, PifI2cRegField field, uint8_t data)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b086      	sub	sp, #24
 8012620:	af02      	add	r7, sp, #8
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	4608      	mov	r0, r1
 8012626:	4611      	mov	r1, r2
 8012628:	461a      	mov	r2, r3
 801262a:	4603      	mov	r3, r0
 801262c:	70fb      	strb	r3, [r7, #3]
 801262e:	460b      	mov	r3, r1
 8012630:	803b      	strh	r3, [r7, #0]
 8012632:	4613      	mov	r3, r2
 8012634:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp, org, shift, mask;

	shift = field >> 8;
 8012636:	883b      	ldrh	r3, [r7, #0]
 8012638:	0a1b      	lsrs	r3, r3, #8
 801263a:	b29b      	uxth	r3, r3
 801263c:	73fb      	strb	r3, [r7, #15]
	mask = (1 << (field & 0xFF)) - 1;
 801263e:	883b      	ldrh	r3, [r7, #0]
 8012640:	b2db      	uxtb	r3, r3
 8012642:	2201      	movs	r2, #1
 8012644:	fa02 f303 	lsl.w	r3, r2, r3
 8012648:	b2db      	uxtb	r3, r3
 801264a:	3b01      	subs	r3, #1
 801264c:	73bb      	strb	r3, [r7, #14]

	if (data > mask) {
 801264e:	78ba      	ldrb	r2, [r7, #2]
 8012650:	7bbb      	ldrb	r3, [r7, #14]
 8012652:	429a      	cmp	r2, r3
 8012654:	d904      	bls.n	8012660 <pifI2cDevice_WriteRegBit8+0x44>
		pif_error = E_WRONG_DATA;
 8012656:	4b21      	ldr	r3, [pc, #132]	; (80126dc <pifI2cDevice_WriteRegBit8+0xc0>)
 8012658:	2206      	movs	r2, #6
 801265a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801265c:	2300      	movs	r3, #0
 801265e:	e039      	b.n	80126d4 <pifI2cDevice_WriteRegBit8+0xb8>
	}
	if (!pifI2cDevice_Read(p_owner, reg, 1, &org, 1)) return FALSE;
 8012660:	78f9      	ldrb	r1, [r7, #3]
 8012662:	f107 030c 	add.w	r3, r7, #12
 8012666:	2201      	movs	r2, #1
 8012668:	9200      	str	r2, [sp, #0]
 801266a:	2201      	movs	r2, #1
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7ff fe2d 	bl	80122cc <pifI2cDevice_Read>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d101      	bne.n	801267c <pifI2cDevice_WriteRegBit8+0x60>
 8012678:	2300      	movs	r3, #0
 801267a:	e02b      	b.n	80126d4 <pifI2cDevice_WriteRegBit8+0xb8>

	if (((org >> shift) & mask) != data) {
 801267c:	7b3b      	ldrb	r3, [r7, #12]
 801267e:	461a      	mov	r2, r3
 8012680:	7bfb      	ldrb	r3, [r7, #15]
 8012682:	411a      	asrs	r2, r3
 8012684:	7bbb      	ldrb	r3, [r7, #14]
 8012686:	401a      	ands	r2, r3
 8012688:	78bb      	ldrb	r3, [r7, #2]
 801268a:	429a      	cmp	r2, r3
 801268c:	d021      	beq.n	80126d2 <pifI2cDevice_WriteRegBit8+0xb6>
		tmp = (org & ~(mask << shift)) | (data << shift);
 801268e:	7bba      	ldrb	r2, [r7, #14]
 8012690:	7bfb      	ldrb	r3, [r7, #15]
 8012692:	fa02 f303 	lsl.w	r3, r2, r3
 8012696:	b25b      	sxtb	r3, r3
 8012698:	43db      	mvns	r3, r3
 801269a:	b25a      	sxtb	r2, r3
 801269c:	7b3b      	ldrb	r3, [r7, #12]
 801269e:	b25b      	sxtb	r3, r3
 80126a0:	4013      	ands	r3, r2
 80126a2:	b25a      	sxtb	r2, r3
 80126a4:	78b9      	ldrb	r1, [r7, #2]
 80126a6:	7bfb      	ldrb	r3, [r7, #15]
 80126a8:	fa01 f303 	lsl.w	r3, r1, r3
 80126ac:	b25b      	sxtb	r3, r3
 80126ae:	4313      	orrs	r3, r2
 80126b0:	b25b      	sxtb	r3, r3
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	737b      	strb	r3, [r7, #13]
		if (!pifI2cDevice_Write(p_owner, reg, 1, &tmp, 1)) return FALSE;
 80126b6:	78f9      	ldrb	r1, [r7, #3]
 80126b8:	f107 030d 	add.w	r3, r7, #13
 80126bc:	2201      	movs	r2, #1
 80126be:	9200      	str	r2, [sp, #0]
 80126c0:	2201      	movs	r2, #1
 80126c2:	6878      	ldr	r0, [r7, #4]
 80126c4:	f7ff ff0c 	bl	80124e0 <pifI2cDevice_Write>
 80126c8:	4603      	mov	r3, r0
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <pifI2cDevice_WriteRegBit8+0xb6>
 80126ce:	2300      	movs	r3, #0
 80126d0:	e000      	b.n	80126d4 <pifI2cDevice_WriteRegBit8+0xb8>
	}
    return TRUE;
 80126d2:	2301      	movs	r3, #1
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3710      	adds	r7, #16
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	20001d48 	.word	0x20001d48

080126e0 <pifI2cPort_sigEndTransfer>:
	}
    return TRUE;
}

void pifI2cPort_sigEndTransfer(PifI2cPort* p_owner, BOOL result)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b083      	sub	sp, #12
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	460b      	mov	r3, r1
 80126ea:	70fb      	strb	r3, [r7, #3]
	if (!p_owner->__use_device) return;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d009      	beq.n	8012708 <pifI2cPort_sigEndTransfer+0x28>
	p_owner->__use_device->_state = result ? IS_COMPLETE : IS_ERROR;
 80126f4:	78fb      	ldrb	r3, [r7, #3]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <pifI2cPort_sigEndTransfer+0x1e>
 80126fa:	2202      	movs	r2, #2
 80126fc:	e000      	b.n	8012700 <pifI2cPort_sigEndTransfer+0x20>
 80126fe:	2203      	movs	r2, #3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012704:	709a      	strb	r2, [r3, #2]
 8012706:	e000      	b.n	801270a <pifI2cPort_sigEndTransfer+0x2a>
	if (!p_owner->__use_device) return;
 8012708:	bf00      	nop
}
 801270a:	370c      	adds	r7, #12
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <pifFixList_Init>:
}

// ---------- PIF Fixed Linked List ----------

BOOL pifFixList_Init(PifFixList* p_owner, int size, int max_count)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b088      	sub	sp, #32
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
	char* p_buffer;
	PifFixListIterator p_node;

	if (!p_owner || !size || !max_count) {
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d005      	beq.n	8012732 <pifFixList_Init+0x1e>
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d002      	beq.n	8012732 <pifFixList_Init+0x1e>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d104      	bne.n	801273c <pifFixList_Init+0x28>
		pif_error = E_INVALID_PARAM;
 8012732:	4b27      	ldr	r3, [pc, #156]	; (80127d0 <pifFixList_Init+0xbc>)
 8012734:	2201      	movs	r2, #1
 8012736:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8012738:	2300      	movs	r3, #0
 801273a:	e045      	b.n	80127c8 <pifFixList_Init+0xb4>
	}

	p_buffer = calloc(2 * sizeof(PifFixListIterator) + size, max_count);
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	3308      	adds	r3, #8
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	4611      	mov	r1, r2
 8012744:	4618      	mov	r0, r3
 8012746:	f010 fcff 	bl	8023148 <calloc>
 801274a:	4603      	mov	r3, r0
 801274c:	61fb      	str	r3, [r7, #28]
	if (!p_buffer) goto fail;
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d033      	beq.n	80127bc <pifFixList_Init+0xa8>

	p_owner->p_node = (PifFixListIterator)p_buffer;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	69fa      	ldr	r2, [r7, #28]
 8012758:	60da      	str	r2, [r3, #12]
	p_owner->size = size;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	68ba      	ldr	r2, [r7, #8]
 801275e:	601a      	str	r2, [r3, #0]
	p_owner->max_count = max_count;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	687a      	ldr	r2, [r7, #4]
 8012764:	605a      	str	r2, [r3, #4]
	p_owner->count = 0;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2200      	movs	r2, #0
 801276a:	609a      	str	r2, [r3, #8]

	p_owner->p_first = NULL;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2200      	movs	r2, #0
 8012770:	611a      	str	r2, [r3, #16]

	p_node = p_owner->p_node;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	61bb      	str	r3, [r7, #24]
	p_owner->p_free = p_node;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	69ba      	ldr	r2, [r7, #24]
 801277c:	615a      	str	r2, [r3, #20]
	for (int i = 1; i < max_count; i++) {
 801277e:	2301      	movs	r3, #1
 8012780:	617b      	str	r3, [r7, #20]
 8012782:	e00f      	b.n	80127a4 <pifFixList_Init+0x90>
		p_buffer += 2 * sizeof(PifFixListIterator) + size;
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	3308      	adds	r3, #8
 8012788:	69fa      	ldr	r2, [r7, #28]
 801278a:	4413      	add	r3, r2
 801278c:	61fb      	str	r3, [r7, #28]
		p_node->p_next = (PifFixListIterator)p_buffer;
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	69fa      	ldr	r2, [r7, #28]
 8012792:	601a      	str	r2, [r3, #0]
		p_node->p_prev = NULL;
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	2200      	movs	r2, #0
 8012798:	605a      	str	r2, [r3, #4]
		p_node = (PifFixListIterator)p_buffer;
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	61bb      	str	r3, [r7, #24]
	for (int i = 1; i < max_count; i++) {
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	3301      	adds	r3, #1
 80127a2:	617b      	str	r3, [r7, #20]
 80127a4:	697a      	ldr	r2, [r7, #20]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	dbeb      	blt.n	8012784 <pifFixList_Init+0x70>
	}
	p_node->p_next = NULL;
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	2200      	movs	r2, #0
 80127b0:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	2200      	movs	r2, #0
 80127b6:	605a      	str	r2, [r3, #4]

	return TRUE;
 80127b8:	2301      	movs	r3, #1
 80127ba:	e005      	b.n	80127c8 <pifFixList_Init+0xb4>
	if (!p_buffer) goto fail;
 80127bc:	bf00      	nop

fail:
	pifFixList_Clear(p_owner, NULL);
 80127be:	2100      	movs	r1, #0
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	f000 f807 	bl	80127d4 <pifFixList_Clear>
	return FALSE;
 80127c6:	2300      	movs	r3, #0
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3720      	adds	r7, #32
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	20001d48 	.word	0x20001d48

080127d4 <pifFixList_Clear>:

void pifFixList_Clear(PifFixList* p_owner, PifEvtFixListClear evt_clear)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b084      	sub	sp, #16
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
	if (p_owner->p_node) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d01f      	beq.n	8012826 <pifFixList_Clear+0x52>
		if (evt_clear) {
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d014      	beq.n	8012816 <pifFixList_Clear+0x42>
			PifFixListIterator it = p_owner->p_first;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	60fb      	str	r3, [r7, #12]
			while (it) {
 80127f2:	e00d      	b.n	8012810 <pifFixList_Clear+0x3c>
				(*evt_clear)(it->data);
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f103 0208 	add.w	r2, r3, #8
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	4610      	mov	r0, r2
 80127fe:	4798      	blx	r3
				it = it ? it->p_next : NULL;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d002      	beq.n	801280c <pifFixList_Clear+0x38>
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	e000      	b.n	801280e <pifFixList_Clear+0x3a>
 801280c:	2300      	movs	r3, #0
 801280e:	60fb      	str	r3, [r7, #12]
			while (it) {
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d1ee      	bne.n	80127f4 <pifFixList_Clear+0x20>
			}
		}

		free(p_owner->p_node);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	68db      	ldr	r3, [r3, #12]
 801281a:	4618      	mov	r0, r3
 801281c:	f010 fcce 	bl	80231bc <free>
		p_owner->p_node = NULL;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2200      	movs	r2, #0
 8012824:	60da      	str	r2, [r3, #12]
	}

	p_owner->size = 0;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2200      	movs	r2, #0
 801282a:	601a      	str	r2, [r3, #0]
	p_owner->max_count = 0;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	605a      	str	r2, [r3, #4]
}
 8012832:	bf00      	nop
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}

0801283a <pifFixList_AddFirst>:

void* pifFixList_AddFirst(PifFixList* p_owner)
{
 801283a:	b580      	push	{r7, lr}
 801283c:	b084      	sub	sp, #16
 801283e:	af00      	add	r7, sp, #0
 8012840:	6078      	str	r0, [r7, #4]
	char* p;

	if (p_owner->p_free == NULL) return NULL;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	695b      	ldr	r3, [r3, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <pifFixList_AddFirst+0x14>
 801284a:	2300      	movs	r3, #0
 801284c:	e025      	b.n	801289a <pifFixList_AddFirst+0x60>

	PifFixListIterator p_node = p_owner->p_free;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	695b      	ldr	r3, [r3, #20]
 8012852:	60fb      	str	r3, [r7, #12]
	p_owner->p_free = p_node->p_next;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	615a      	str	r2, [r3, #20]

	p_node->p_next = p_owner->p_first;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	691a      	ldr	r2, [r3, #16]
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	601a      	str	r2, [r3, #0]
	if (p_owner->p_first) {
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	691b      	ldr	r3, [r3, #16]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d003      	beq.n	8012874 <pifFixList_AddFirst+0x3a>
		p_owner->p_first->p_prev = p_node;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	691b      	ldr	r3, [r3, #16]
 8012870:	68fa      	ldr	r2, [r7, #12]
 8012872:	605a      	str	r2, [r3, #4]
	}
	p_owner->p_first = p_node;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	611a      	str	r2, [r3, #16]
	p_owner->count++;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	1c5a      	adds	r2, r3, #1
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	609a      	str	r2, [r3, #8]

	p = (char*)p_node + 2 * sizeof(PifFixListIterator);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	3308      	adds	r3, #8
 8012888:	60bb      	str	r3, [r7, #8]
	memset(p, 0, p_owner->size);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	461a      	mov	r2, r3
 8012890:	2100      	movs	r1, #0
 8012892:	68b8      	ldr	r0, [r7, #8]
 8012894:	f010 fca8 	bl	80231e8 <memset>
    return p;
 8012898:	68bb      	ldr	r3, [r7, #8]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3710      	adds	r7, #16
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <pifFixList_Remove>:

void pifFixList_Remove(PifFixList* p_owner, void* p_data)
{
 80128a2:	b480      	push	{r7}
 80128a4:	b085      	sub	sp, #20
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	6039      	str	r1, [r7, #0]
	PifFixListIterator p_node = (PifFixListIterator)((uint8_t*)p_data - 2 * sizeof(PifFixListIterator));
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	3b08      	subs	r3, #8
 80128b0:	60fb      	str	r3, [r7, #12]

	if (p_node->p_prev) {
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d005      	beq.n	80128c6 <pifFixList_Remove+0x24>
		p_node->p_prev->p_next = p_node->p_next;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	68fa      	ldr	r2, [r7, #12]
 80128c0:	6812      	ldr	r2, [r2, #0]
 80128c2:	601a      	str	r2, [r3, #0]
 80128c4:	e003      	b.n	80128ce <pifFixList_Remove+0x2c>
	}
	else {
		p_owner->p_first = p_node->p_next;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	611a      	str	r2, [r3, #16]
	}
	if (p_node->p_next) {
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d004      	beq.n	80128e0 <pifFixList_Remove+0x3e>
		p_node->p_next->p_prev = p_node->p_prev;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	68fa      	ldr	r2, [r7, #12]
 80128dc:	6852      	ldr	r2, [r2, #4]
 80128de:	605a      	str	r2, [r3, #4]
	}
	p_node->p_next = p_owner->p_free;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	695a      	ldr	r2, [r3, #20]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	601a      	str	r2, [r3, #0]
	p_node->p_prev = NULL;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2200      	movs	r2, #0
 80128ec:	605a      	str	r2, [r3, #4]
	p_owner->p_free = p_node;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	68fa      	ldr	r2, [r7, #12]
 80128f2:	615a      	str	r2, [r3, #20]

	p_owner->count--;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	689b      	ldr	r3, [r3, #8]
 80128f8:	1e5a      	subs	r2, r3, #1
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	609a      	str	r2, [r3, #8]
}
 80128fe:	bf00      	nop
 8012900:	3714      	adds	r7, #20
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr

0801290a <pifFixList_Count>:

#ifdef __PIF_NO_USE_INLINE__

int pifFixList_Count(PifFixList* p_owner)
{
 801290a:	b480      	push	{r7}
 801290c:	b083      	sub	sp, #12
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
	return p_owner->count;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	689b      	ldr	r3, [r3, #8]
}
 8012916:	4618      	mov	r0, r3
 8012918:	370c      	adds	r7, #12
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr

08012922 <pifFixList_Begin>:

PifFixListIterator pifFixList_Begin(PifFixList* p_owner)
{
 8012922:	b480      	push	{r7}
 8012924:	b083      	sub	sp, #12
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
	return p_owner->p_first;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	691b      	ldr	r3, [r3, #16]
}
 801292e:	4618      	mov	r0, r3
 8012930:	370c      	adds	r7, #12
 8012932:	46bd      	mov	sp, r7
 8012934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012938:	4770      	bx	lr

0801293a <pifFixList_Next>:

PifFixListIterator pifFixList_Next(PifFixListIterator it)
{
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
	return it ? it->p_next : NULL;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d002      	beq.n	801294e <pifFixList_Next+0x14>
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	e000      	b.n	8012950 <pifFixList_Next+0x16>
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <pifLog_CmdHelp>:

#ifdef __PIF_LOG_COMMAND__


int pifLog_CmdHelp(int argc, char *argv[])
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
    const PifLogCmdEntry* p_entry;

    (void)argc;
    (void)argv;

    pifLog_Print(LT_NONE, "Available commands:\n");
 8012966:	4916      	ldr	r1, [pc, #88]	; (80129c0 <pifLog_CmdHelp+0x64>)
 8012968:	2000      	movs	r0, #0
 801296a:	f000 fd75 	bl	8013458 <pifLog_Print>
    i = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	60fb      	str	r3, [r7, #12]
    while (1) {
        p_entry = &s_log.p_cmd_table[i];
 8012972:	4b14      	ldr	r3, [pc, #80]	; (80129c4 <pifLog_CmdHelp+0x68>)
 8012974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	011b      	lsls	r3, r3, #4
 801297a:	4413      	add	r3, r2
 801297c:	60bb      	str	r3, [r7, #8]
        if (!p_entry->p_name) break;
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d016      	beq.n	80129b4 <pifLog_CmdHelp+0x58>

        pifLog_Printf(LT_NONE, "  %s - %s\n", p_entry->p_name, p_entry->p_help);
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	490e      	ldr	r1, [pc, #56]	; (80129c8 <pifLog_CmdHelp+0x6c>)
 8012990:	2000      	movs	r0, #0
 8012992:	f000 fdef 	bl	8013574 <pifLog_Printf>
    	if (p_entry->p_args) {
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	68db      	ldr	r3, [r3, #12]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d006      	beq.n	80129ac <pifLog_CmdHelp+0x50>
            pifLog_Printf(LT_NONE, "\t%s\n", p_entry->p_args);
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	461a      	mov	r2, r3
 80129a4:	4909      	ldr	r1, [pc, #36]	; (80129cc <pifLog_CmdHelp+0x70>)
 80129a6:	2000      	movs	r0, #0
 80129a8:	f000 fde4 	bl	8013574 <pifLog_Printf>
    	}
        i++;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	3301      	adds	r3, #1
 80129b0:	60fb      	str	r3, [r7, #12]
        p_entry = &s_log.p_cmd_table[i];
 80129b2:	e7de      	b.n	8012972 <pifLog_CmdHelp+0x16>
        if (!p_entry->p_name) break;
 80129b4:	bf00      	nop
    }
	return PIF_LOG_CMD_NO_ERROR;
 80129b6:	2300      	movs	r3, #0
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	08027908 	.word	0x08027908
 80129c4:	20001d74 	.word	0x20001d74
 80129c8:	08027920 	.word	0x08027920
 80129cc:	0802792c 	.word	0x0802792c

080129d0 <pifLog_CmdPrintVersion>:

int pifLog_CmdPrintVersion(int argc, char* argv[])
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	af02      	add	r7, sp, #8
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifLog_Printf(LT_NONE, "PIF Version: %d.%d.%d %s\n", PIF_VERSION_MAJOR, PIF_VERSION_MINOR, PIF_VERSION_PATCH, __DATE__);
 80129da:	4b07      	ldr	r3, [pc, #28]	; (80129f8 <pifLog_CmdPrintVersion+0x28>)
 80129dc:	9301      	str	r3, [sp, #4]
 80129de:	2300      	movs	r3, #0
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	2301      	movs	r3, #1
 80129e4:	2200      	movs	r2, #0
 80129e6:	4905      	ldr	r1, [pc, #20]	; (80129fc <pifLog_CmdPrintVersion+0x2c>)
 80129e8:	2000      	movs	r0, #0
 80129ea:	f000 fdc3 	bl	8013574 <pifLog_Printf>
	return PIF_LOG_CMD_NO_ERROR;
 80129ee:	2300      	movs	r3, #0
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3708      	adds	r7, #8
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	08027950 	.word	0x08027950
 80129fc:	08027934 	.word	0x08027934

08012a00 <pifLog_CmdPrintTask>:

int pifLog_CmdPrintTask(int argc, char* argv[])
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
	(void)argc;
	(void)argv;

	pifTaskManager_Print();
 8012a0a:	f002 f947 	bl	8014c9c <pifTaskManager_Print>
	return PIF_LOG_CMD_NO_ERROR;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <pifLog_CmdSetStatus>:

int pifLog_CmdSetStatus(int argc, char* argv[])
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b086      	sub	sp, #24
 8012a1c:	af02      	add	r7, sp, #8
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	6039      	str	r1, [r7, #0]
	BOOL value;
	int i;

	if (argc == 0) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d136      	bne.n	8012a96 <pifLog_CmdSetStatus+0x7e>
    	pifLog_Printf(LT_NONE, "Use Rate: %u%%\n", pif_performance._use_rate);
 8012a28:	4b4b      	ldr	r3, [pc, #300]	; (8012b58 <pifLog_CmdSetStatus+0x140>)
 8012a2a:	791b      	ldrb	r3, [r3, #4]
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	494b      	ldr	r1, [pc, #300]	; (8012b5c <pifLog_CmdSetStatus+0x144>)
 8012a30:	2000      	movs	r0, #0
 8012a32:	f000 fd9f 	bl	8013574 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Error: %d\n", pif_error);
 8012a36:	4b4a      	ldr	r3, [pc, #296]	; (8012b60 <pifLog_CmdSetStatus+0x148>)
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	4949      	ldr	r1, [pc, #292]	; (8012b64 <pifLog_CmdSetStatus+0x14c>)
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f000 fd98 	bl	8013574 <pifLog_Printf>
	   	pifLog_Printf(LT_NONE, "Flag:\n");
 8012a44:	4948      	ldr	r1, [pc, #288]	; (8012b68 <pifLog_CmdSetStatus+0x150>)
 8012a46:	2000      	movs	r0, #0
 8012a48:	f000 fd94 	bl	8013574 <pifLog_Printf>
	   	i = 0;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012a50:	e019      	b.n	8012a86 <pifLog_CmdSetStatus+0x6e>
			pifLog_Printf(LT_NONE, "  %s(%s): %d\n", c_log_flags[i].p_name, c_log_flags[i].p_command, (pif_log_flag.all >> i) & 1);
 8012a52:	4a46      	ldr	r2, [pc, #280]	; (8012b6c <pifLog_CmdSetStatus+0x154>)
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012a5a:	4a44      	ldr	r2, [pc, #272]	; (8012b6c <pifLog_CmdSetStatus+0x154>)
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	4413      	add	r3, r2
 8012a62:	6858      	ldr	r0, [r3, #4]
 8012a64:	4b42      	ldr	r3, [pc, #264]	; (8012b70 <pifLog_CmdSetStatus+0x158>)
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8012a6e:	f003 0301 	and.w	r3, r3, #1
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	4603      	mov	r3, r0
 8012a76:	460a      	mov	r2, r1
 8012a78:	493e      	ldr	r1, [pc, #248]	; (8012b74 <pifLog_CmdSetStatus+0x15c>)
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	f000 fd7a 	bl	8013574 <pifLog_Printf>
			i++;
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	3301      	adds	r3, #1
 8012a84:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012a86:	4a39      	ldr	r2, [pc, #228]	; (8012b6c <pifLog_CmdSetStatus+0x154>)
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1df      	bne.n	8012a52 <pifLog_CmdSetStatus+0x3a>
		}
		return PIF_LOG_CMD_NO_ERROR;
 8012a92:	2300      	movs	r3, #0
 8012a94:	e05c      	b.n	8012b50 <pifLog_CmdSetStatus+0x138>
	}
	else if (argc > 1) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	dd57      	ble.n	8012b4c <pifLog_CmdSetStatus+0x134>
		switch (argv[1][0]) {
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	3304      	adds	r3, #4
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b74      	cmp	r3, #116	; 0x74
 8012aa6:	d015      	beq.n	8012ad4 <pifLog_CmdSetStatus+0xbc>
 8012aa8:	2b74      	cmp	r3, #116	; 0x74
 8012aaa:	dc16      	bgt.n	8012ada <pifLog_CmdSetStatus+0xc2>
 8012aac:	2b66      	cmp	r3, #102	; 0x66
 8012aae:	d00e      	beq.n	8012ace <pifLog_CmdSetStatus+0xb6>
 8012ab0:	2b66      	cmp	r3, #102	; 0x66
 8012ab2:	dc12      	bgt.n	8012ada <pifLog_CmdSetStatus+0xc2>
 8012ab4:	2b54      	cmp	r3, #84	; 0x54
 8012ab6:	d00d      	beq.n	8012ad4 <pifLog_CmdSetStatus+0xbc>
 8012ab8:	2b54      	cmp	r3, #84	; 0x54
 8012aba:	dc0e      	bgt.n	8012ada <pifLog_CmdSetStatus+0xc2>
 8012abc:	2b46      	cmp	r3, #70	; 0x46
 8012abe:	d006      	beq.n	8012ace <pifLog_CmdSetStatus+0xb6>
 8012ac0:	2b46      	cmp	r3, #70	; 0x46
 8012ac2:	dc0a      	bgt.n	8012ada <pifLog_CmdSetStatus+0xc2>
 8012ac4:	2b30      	cmp	r3, #48	; 0x30
 8012ac6:	d002      	beq.n	8012ace <pifLog_CmdSetStatus+0xb6>
 8012ac8:	2b31      	cmp	r3, #49	; 0x31
 8012aca:	d003      	beq.n	8012ad4 <pifLog_CmdSetStatus+0xbc>
 8012acc:	e005      	b.n	8012ada <pifLog_CmdSetStatus+0xc2>
		case '0':
		case 'F':
		case 'f':
			value = FALSE;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	73fb      	strb	r3, [r7, #15]
			break;
 8012ad2:	e005      	b.n	8012ae0 <pifLog_CmdSetStatus+0xc8>

		case '1':
		case 'T':
		case 't':
			value = TRUE;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	73fb      	strb	r3, [r7, #15]
			break;
 8012ad8:	e002      	b.n	8012ae0 <pifLog_CmdSetStatus+0xc8>

		default:
			return PIF_LOG_CMD_INVALID_ARG;
 8012ada:	f06f 0303 	mvn.w	r3, #3
 8012ade:	e037      	b.n	8012b50 <pifLog_CmdSetStatus+0x138>
		}
		i = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012ae4:	e029      	b.n	8012b3a <pifLog_CmdSetStatus+0x122>
			if (!strcasecmp(argv[0], c_log_flags[i].p_command)) {
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	681a      	ldr	r2, [r3, #0]
 8012aea:	4920      	ldr	r1, [pc, #128]	; (8012b6c <pifLog_CmdSetStatus+0x154>)
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	440b      	add	r3, r1
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	4619      	mov	r1, r3
 8012af6:	4610      	mov	r0, r2
 8012af8:	f010 fc84 	bl	8023404 <strcasecmp>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d118      	bne.n	8012b34 <pifLog_CmdSetStatus+0x11c>
				if (value) {
 8012b02:	7bfb      	ldrb	r3, [r7, #15]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d009      	beq.n	8012b1c <pifLog_CmdSetStatus+0x104>
					pif_log_flag.all |= 1L << i;
 8012b08:	4b19      	ldr	r3, [pc, #100]	; (8012b70 <pifLog_CmdSetStatus+0x158>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2101      	movs	r1, #1
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	fa01 f202 	lsl.w	r2, r1, r2
 8012b14:	4313      	orrs	r3, r2
 8012b16:	4a16      	ldr	r2, [pc, #88]	; (8012b70 <pifLog_CmdSetStatus+0x158>)
 8012b18:	6013      	str	r3, [r2, #0]
 8012b1a:	e009      	b.n	8012b30 <pifLog_CmdSetStatus+0x118>
				}
				else {
					pif_log_flag.all &= ~(1L << i);
 8012b1c:	4b14      	ldr	r3, [pc, #80]	; (8012b70 <pifLog_CmdSetStatus+0x158>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2101      	movs	r1, #1
 8012b22:	68ba      	ldr	r2, [r7, #8]
 8012b24:	fa01 f202 	lsl.w	r2, r1, r2
 8012b28:	43d2      	mvns	r2, r2
 8012b2a:	4013      	ands	r3, r2
 8012b2c:	4a10      	ldr	r2, [pc, #64]	; (8012b70 <pifLog_CmdSetStatus+0x158>)
 8012b2e:	6013      	str	r3, [r2, #0]
				}
				return PIF_LOG_CMD_NO_ERROR;
 8012b30:	2300      	movs	r3, #0
 8012b32:	e00d      	b.n	8012b50 <pifLog_CmdSetStatus+0x138>
			}
			i++;
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	3301      	adds	r3, #1
 8012b38:	60bb      	str	r3, [r7, #8]
		while (c_log_flags[i].p_name) {
 8012b3a:	4a0c      	ldr	r2, [pc, #48]	; (8012b6c <pifLog_CmdSetStatus+0x154>)
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1cf      	bne.n	8012ae6 <pifLog_CmdSetStatus+0xce>
		}
		return PIF_LOG_CMD_INVALID_ARG;
 8012b46:	f06f 0303 	mvn.w	r3, #3
 8012b4a:	e001      	b.n	8012b50 <pifLog_CmdSetStatus+0x138>
	}
	return PIF_LOG_CMD_TOO_FEW_ARGS;
 8012b4c:	f06f 0302 	mvn.w	r3, #2
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3710      	adds	r7, #16
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	20001d64 	.word	0x20001d64
 8012b5c:	0802795c 	.word	0x0802795c
 8012b60:	20001d48 	.word	0x20001d48
 8012b64:	0802796c 	.word	0x0802796c
 8012b68:	08027978 	.word	0x08027978
 8012b6c:	0802937c 	.word	0x0802937c
 8012b70:	20001d70 	.word	0x20001d70
 8012b74:	08027980 	.word	0x08027980

08012b78 <_getDebugString>:

static BOOL _getDebugString(PifLog* p_owner, PifActCommReceiveData act_receive_data)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b088      	sub	sp, #32
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	6039      	str	r1, [r7, #0]
    char tmp_char;
    uint8_t i;
    BOOL str_get_done_flag = FALSE;
 8012b82:	2300      	movs	r3, #0
 8012b84:	77bb      	strb	r3, [r7, #30]
    uint8_t enter;
    static uint8_t pre_enter = 0;
    const PifLogCmdEntry *cmd, *pstart, *pend;

	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012b86:	e1e2      	b.n	8012f4e <_getDebugString+0x3d6>
		if (tmp_char >= 32 && tmp_char <= 126) {
 8012b88:	7bfb      	ldrb	r3, [r7, #15]
 8012b8a:	2b1f      	cmp	r3, #31
 8012b8c:	d934      	bls.n	8012bf8 <_getDebugString+0x80>
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
 8012b90:	2b7e      	cmp	r3, #126	; 0x7e
 8012b92:	d831      	bhi.n	8012bf8 <_getDebugString+0x80>
			if (!p_owner->char_idx && tmp_char == ' ') continue;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d103      	bne.n	8012ba6 <_getDebugString+0x2e>
 8012b9e:	7bfb      	ldrb	r3, [r7, #15]
 8012ba0:	2b20      	cmp	r3, #32
 8012ba2:	d100      	bne.n	8012ba6 <_getDebugString+0x2e>
 8012ba4:	e1d3      	b.n	8012f4e <_getDebugString+0x3d6>
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bac:	461a      	mov	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012bb4:	3b03      	subs	r3, #3
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	f280 815d 	bge.w	8012e76 <_getDebugString+0x2fe>
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, tmp_char);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc0:	7bfa      	ldrb	r2, [r7, #15]
 8012bc2:	4611      	mov	r1, r2
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f000 ffbd 	bl	8013b44 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6a1b      	ldr	r3, [r3, #32]
 8012bce:	69db      	ldr	r3, [r3, #28]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f001 fc9d 	bl	8014510 <pifTask_SetTrigger>
				p_owner->p_rx_buffer[p_owner->char_idx] = tmp_char;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012be0:	4413      	add	r3, r2
 8012be2:	7bfa      	ldrb	r2, [r7, #15]
 8012be4:	701a      	strb	r2, [r3, #0]
				p_owner->char_idx++;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bec:	3301      	adds	r3, #1
 8012bee:	b2da      	uxtb	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			if (p_owner->char_idx < p_owner->rx_buffer_size - 3) {
 8012bf6:	e13e      	b.n	8012e76 <_getDebugString+0x2fe>
            }
		}
		else {
			switch (tmp_char) {
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
 8012bfa:	2b0d      	cmp	r3, #13
 8012bfc:	dc16      	bgt.n	8012c2c <_getDebugString+0xb4>
 8012bfe:	2b08      	cmp	r3, #8
 8012c00:	f2c0 812c 	blt.w	8012e5c <_getDebugString+0x2e4>
 8012c04:	3b08      	subs	r3, #8
 8012c06:	2b05      	cmp	r3, #5
 8012c08:	f200 8128 	bhi.w	8012e5c <_getDebugString+0x2e4>
 8012c0c:	a201      	add	r2, pc, #4	; (adr r2, 8012c14 <_getDebugString+0x9c>)
 8012c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c12:	bf00      	nop
 8012c14:	08012c33 	.word	0x08012c33
 8012c18:	08012c79 	.word	0x08012c79
 8012c1c:	08012e27 	.word	0x08012e27
 8012c20:	08012e5d 	.word	0x08012e5d
 8012c24:	08012e33 	.word	0x08012e33
 8012c28:	08012e2d 	.word	0x08012e2d
 8012c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8012c2e:	f040 8115 	bne.w	8012e5c <_getDebugString+0x2e4>
			case '\b':		// 0x08 / Backspace / CTRL-H
			case 0x7F:		// Delete
				if (p_owner->char_idx) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f000 8119 	beq.w	8012e70 <_getDebugString+0x2f8>
					p_owner->char_idx--;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c44:	3b01      	subs	r3, #1
 8012c46:	b2da      	uxtb	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c52:	687a      	ldr	r2, [r7, #4]
 8012c54:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012c58:	4413      	add	r3, r2
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	701a      	strb	r2, [r3, #0]
					pifRingBuffer_PutString(p_owner->p_tx_buffer, "\b \b");
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c62:	499c      	ldr	r1, [pc, #624]	; (8012ed4 <_getDebugString+0x35c>)
 8012c64:	4618      	mov	r0, r3
 8012c66:	f000 ffeb 	bl	8013c40 <pifRingBuffer_PutString>
					pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6a1b      	ldr	r3, [r3, #32]
 8012c6e:	69db      	ldr	r3, [r3, #28]
 8012c70:	4618      	mov	r0, r3
 8012c72:	f001 fc4d 	bl	8014510 <pifTask_SetTrigger>
				}
				break;
 8012c76:	e0fb      	b.n	8012e70 <_getDebugString+0x2f8>

			case '\t':		// 0x09 / Horizontal Tab / CTRL-I
	            // do tab completion
			    pstart = NULL;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	617b      	str	r3, [r7, #20]
			    pend = NULL;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	613b      	str	r3, [r7, #16]
	            i = p_owner->char_idx;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c86:	77fb      	strb	r3, [r7, #31]
	            cmd = p_owner->p_cmd_table;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c8c:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012c8e:	e01b      	b.n	8012cc8 <_getDebugString+0x150>
	                if (!(p_owner->char_idx && (strncasecmp(p_owner->p_rx_buffer, cmd->p_name, p_owner->char_idx) != 0))) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d00c      	beq.n	8012cb4 <_getDebugString+0x13c>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	6819      	ldr	r1, [r3, #0]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ca8:	461a      	mov	r2, r3
 8012caa:	f010 fbe9 	bl	8023480 <strncasecmp>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d106      	bne.n	8012cc2 <_getDebugString+0x14a>
						if (!pstart)
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d101      	bne.n	8012cbe <_getDebugString+0x146>
							pstart = cmd;
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	617b      	str	r3, [r7, #20]
						pend = cmd;
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	613b      	str	r3, [r7, #16]
	                }
	                cmd++;
 8012cc2:	69bb      	ldr	r3, [r7, #24]
 8012cc4:	3310      	adds	r3, #16
 8012cc6:	61bb      	str	r3, [r7, #24]
	            while (cmd->p_name) {
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1df      	bne.n	8012c90 <_getDebugString+0x118>
	            }
	            if (pstart) {    /* Buffer matches one or more commands */
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d05b      	beq.n	8012d8e <_getDebugString+0x216>
	                for (; ; p_owner->char_idx++) {
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	687a      	ldr	r2, [r7, #4]
 8012cdc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012ce0:	4413      	add	r3, r2
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d04f      	beq.n	8012d88 <_getDebugString+0x210>
	                    if (pstart->p_name[p_owner->char_idx] != pend->p_name[p_owner->char_idx])
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012cf2:	4413      	add	r3, r2
 8012cf4:	781a      	ldrb	r2, [r3, #0]
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012d00:	440b      	add	r3, r1
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	429a      	cmp	r2, r3
 8012d06:	d141      	bne.n	8012d8c <_getDebugString+0x214>
	                        break;
	                    if (!pstart->p_name[p_owner->char_idx] && p_owner->char_idx < p_owner->rx_buffer_size - 2) {
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012d12:	4413      	add	r3, r2
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d11f      	bne.n	8012d5a <_getDebugString+0x1e2>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d20:	461a      	mov	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d28:	3b02      	subs	r3, #2
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	da15      	bge.n	8012d5a <_getDebugString+0x1e2>
	                        /* Unambiguous -- append a space */
	                    	p_owner->p_rx_buffer[p_owner->char_idx++] = ' ';
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d38:	1c59      	adds	r1, r3, #1
 8012d3a:	b2c8      	uxtb	r0, r1
 8012d3c:	6879      	ldr	r1, [r7, #4]
 8012d3e:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
 8012d42:	4413      	add	r3, r2
 8012d44:	2220      	movs	r2, #32
 8012d46:	701a      	strb	r2, [r3, #0]
	                        p_owner->p_rx_buffer[p_owner->char_idx] = '\0';
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012d52:	4413      	add	r3, r2
 8012d54:	2200      	movs	r2, #0
 8012d56:	701a      	strb	r2, [r3, #0]
	                        break;
 8012d58:	e019      	b.n	8012d8e <_getDebugString+0x216>
	                    }
	                    p_owner->p_rx_buffer[p_owner->char_idx] = pstart->p_name[p_owner->char_idx];
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012d64:	441a      	add	r2, r3
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d6a:	6879      	ldr	r1, [r7, #4]
 8012d6c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8012d70:	440b      	add	r3, r1
 8012d72:	7812      	ldrb	r2, [r2, #0]
 8012d74:	701a      	strb	r2, [r3, #0]
	                for (; ; p_owner->char_idx++) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	                	if (!pstart->p_name[p_owner->char_idx]) break;
 8012d86:	e7a6      	b.n	8012cd6 <_getDebugString+0x15e>
 8012d88:	bf00      	nop
 8012d8a:	e000      	b.n	8012d8e <_getDebugString+0x216>
	                        break;
 8012d8c:	bf00      	nop
	                }
	            }
	            if (!p_owner->char_idx || pstart != pend) {
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d003      	beq.n	8012da0 <_getDebugString+0x228>
 8012d98:	697a      	ldr	r2, [r7, #20]
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d035      	beq.n	8012e0c <_getDebugString+0x294>
	                /* Print list of ambiguous matches */
	            	pifRingBuffer_PutString(p_owner->p_tx_buffer, "\r\033[K");
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da4:	494c      	ldr	r1, [pc, #304]	; (8012ed8 <_getDebugString+0x360>)
 8012da6:	4618      	mov	r0, r3
 8012da8:	f000 ff4a 	bl	8013c40 <pifRingBuffer_PutString>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	61bb      	str	r3, [r7, #24]
 8012db0:	e010      	b.n	8012dd4 <_getDebugString+0x25c>
	                	pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)cmd->p_name);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012db6:	69bb      	ldr	r3, [r7, #24]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4619      	mov	r1, r3
 8012dbc:	4610      	mov	r0, r2
 8012dbe:	f000 ff3f 	bl	8013c40 <pifRingBuffer_PutString>
	                	pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\t');
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc6:	2109      	movs	r1, #9
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f000 febb 	bl	8013b44 <pifRingBuffer_PutByte>
	                for (cmd = pstart; cmd <= pend; cmd++) {
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	3310      	adds	r3, #16
 8012dd2:	61bb      	str	r3, [r7, #24]
 8012dd4:	69ba      	ldr	r2, [r7, #24]
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d9ea      	bls.n	8012db2 <_getDebugString+0x23a>
	                }
					pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012de0:	4a3e      	ldr	r2, [pc, #248]	; (8012edc <_getDebugString+0x364>)
 8012de2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012de4:	4611      	mov	r1, r2
 8012de6:	4618      	mov	r0, r3
 8012de8:	f000 ff2a 	bl	8013c40 <pifRingBuffer_PutString>
	                i = 0;    /* Redraw prompt */
 8012dec:	2300      	movs	r3, #0
 8012dee:	77fb      	strb	r3, [r7, #31]
	            }
	            for (; i < p_owner->char_idx; i++)
 8012df0:	e00c      	b.n	8012e0c <_getDebugString+0x294>
	            	pifRingBuffer_PutByte(p_owner->p_tx_buffer, p_owner->p_rx_buffer[i]);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012dfa:	7ffb      	ldrb	r3, [r7, #31]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	4619      	mov	r1, r3
 8012e02:	f000 fe9f 	bl	8013b44 <pifRingBuffer_PutByte>
	            for (; i < p_owner->char_idx; i++)
 8012e06:	7ffb      	ldrb	r3, [r7, #31]
 8012e08:	3301      	adds	r3, #1
 8012e0a:	77fb      	strb	r3, [r7, #31]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e12:	7ffa      	ldrb	r2, [r7, #31]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d3ec      	bcc.n	8012df2 <_getDebugString+0x27a>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6a1b      	ldr	r3, [r3, #32]
 8012e1c:	69db      	ldr	r3, [r3, #28]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f001 fb76 	bl	8014510 <pifTask_SetTrigger>
				break;
 8012e24:	e027      	b.n	8012e76 <_getDebugString+0x2fe>

			case '\n':		// 0x0A / Line Feed / CTRL-J
				enter = 1;
 8012e26:	2301      	movs	r3, #1
 8012e28:	777b      	strb	r3, [r7, #29]
				break;
 8012e2a:	e024      	b.n	8012e76 <_getDebugString+0x2fe>

			case '\r':		// 0x0D / Carriage Return / CTRL-M
				enter = 2;
 8012e2c:	2302      	movs	r3, #2
 8012e2e:	777b      	strb	r3, [r7, #29]
				break;
 8012e30:	e021      	b.n	8012e76 <_getDebugString+0x2fe>

			case 0x0C:		// Form Feed, New Page / CTRL-L
				pifRingBuffer_PutString(p_owner->p_tx_buffer, "\033[2J\033[1;1H");
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e36:	492a      	ldr	r1, [pc, #168]	; (8012ee0 <_getDebugString+0x368>)
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f000 ff01 	bl	8013c40 <pifRingBuffer_PutString>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e42:	4a26      	ldr	r2, [pc, #152]	; (8012edc <_getDebugString+0x364>)
 8012e44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012e46:	4611      	mov	r1, r2
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f000 fef9 	bl	8013c40 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a1b      	ldr	r3, [r3, #32]
 8012e52:	69db      	ldr	r3, [r3, #28]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f001 fb5b 	bl	8014510 <pifTask_SetTrigger>
				break;
 8012e5a:	e00c      	b.n	8012e76 <_getDebugString+0x2fe>

			default:
				if (p_owner->evt_control_char) (*p_owner->evt_control_char)(tmp_char);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d007      	beq.n	8012e74 <_getDebugString+0x2fc>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e68:	7bfa      	ldrb	r2, [r7, #15]
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	4798      	blx	r3
            	break;
 8012e6e:	e001      	b.n	8012e74 <_getDebugString+0x2fc>
				break;
 8012e70:	bf00      	nop
 8012e72:	e000      	b.n	8012e76 <_getDebugString+0x2fe>
            	break;
 8012e74:	bf00      	nop
			}
        }

		if (enter) {
 8012e76:	7f7b      	ldrb	r3, [r7, #29]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d026      	beq.n	8012eca <_getDebugString+0x352>
			if (p_owner->char_idx) {
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d005      	beq.n	8012e92 <_getDebugString+0x31a>
				str_get_done_flag = TRUE;
 8012e86:	2301      	movs	r3, #1
 8012e88:	77bb      	strb	r3, [r7, #30]
				pre_enter = enter;
 8012e8a:	4a16      	ldr	r2, [pc, #88]	; (8012ee4 <_getDebugString+0x36c>)
 8012e8c:	7f7b      	ldrb	r3, [r7, #29]
 8012e8e:	7013      	strb	r3, [r2, #0]
 8012e90:	e019      	b.n	8012ec6 <_getDebugString+0x34e>
			}
			else if (!pre_enter || enter == pre_enter) {
 8012e92:	4b14      	ldr	r3, [pc, #80]	; (8012ee4 <_getDebugString+0x36c>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d004      	beq.n	8012ea4 <_getDebugString+0x32c>
 8012e9a:	4b12      	ldr	r3, [pc, #72]	; (8012ee4 <_getDebugString+0x36c>)
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	7f7a      	ldrb	r2, [r7, #29]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d110      	bne.n	8012ec6 <_getDebugString+0x34e>
				pifRingBuffer_PutString(p_owner->p_tx_buffer, (char *)s_log.p_prompt);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea8:	4a0c      	ldr	r2, [pc, #48]	; (8012edc <_getDebugString+0x364>)
 8012eaa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f000 fec6 	bl	8013c40 <pifRingBuffer_PutString>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6a1b      	ldr	r3, [r3, #32]
 8012eb8:	69db      	ldr	r3, [r3, #28]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f001 fb28 	bl	8014510 <pifTask_SetTrigger>
				pre_enter = enter;
 8012ec0:	4a08      	ldr	r2, [pc, #32]	; (8012ee4 <_getDebugString+0x36c>)
 8012ec2:	7f7b      	ldrb	r3, [r7, #29]
 8012ec4:	7013      	strb	r3, [r2, #0]
			}
			enter = 0;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	777b      	strb	r3, [r7, #29]
		}

        if (str_get_done_flag == TRUE) {
 8012eca:	7fbb      	ldrb	r3, [r7, #30]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d13e      	bne.n	8012f4e <_getDebugString+0x3d6>
        	// Strip trailing whitespace
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012ed0:	e012      	b.n	8012ef8 <_getDebugString+0x380>
 8012ed2:	bf00      	nop
 8012ed4:	08027990 	.word	0x08027990
 8012ed8:	08027994 	.word	0x08027994
 8012edc:	20001d74 	.word	0x20001d74
 8012ee0:	0802799c 	.word	0x0802799c
 8012ee4:	20001dd8 	.word	0x20001dd8
            	p_owner->char_idx--;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012eee:	3b01      	subs	r3, #1
 8012ef0:	b2da      	uxtb	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            while (p_owner->char_idx > 0 && p_owner->p_rx_buffer[p_owner->char_idx - 1] == ' ') {
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d009      	beq.n	8012f16 <_getDebugString+0x39e>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	4413      	add	r3, r2
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2b20      	cmp	r3, #32
 8012f14:	d0e8      	beq.n	8012ee8 <_getDebugString+0x370>
            }
            if (p_owner->char_idx) {
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d014      	beq.n	8012f4a <_getDebugString+0x3d2>
				p_owner->p_rx_buffer[p_owner->char_idx] = 0;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8012f2a:	4413      	add	r3, r2
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	701a      	strb	r2, [r3, #0]
				pifRingBuffer_PutByte(p_owner->p_tx_buffer, '\n');
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f34:	210a      	movs	r1, #10
 8012f36:	4618      	mov	r0, r3
 8012f38:	f000 fe04 	bl	8013b44 <pifRingBuffer_PutByte>
				pifTask_SetTrigger(p_owner->p_comm->_p_task);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a1b      	ldr	r3, [r3, #32]
 8012f40:	69db      	ldr	r3, [r3, #28]
 8012f42:	4618      	mov	r0, r3
 8012f44:	f001 fae4 	bl	8014510 <pifTask_SetTrigger>
	        	break;
 8012f48:	e00c      	b.n	8012f64 <_getDebugString+0x3ec>
            }
            else {
            	str_get_done_flag = FALSE;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	77bb      	strb	r3, [r7, #30]
	while ((*act_receive_data)(p_owner->p_comm, (uint8_t*)&tmp_char)) {
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6a1a      	ldr	r2, [r3, #32]
 8012f52:	f107 010f 	add.w	r1, r7, #15
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	4610      	mov	r0, r2
 8012f5a:	4798      	blx	r3
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f47f ae12 	bne.w	8012b88 <_getDebugString+0x10>
        	}
        }
    }
    return str_get_done_flag;
 8012f64:	7fbb      	ldrb	r3, [r7, #30]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3720      	adds	r7, #32
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop

08012f70 <_processDebugCmd>:

static int _processDebugCmd(PifLog* p_owner)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b086      	sub	sp, #24
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
    char* p_tmp_cmd;
    BOOL find_arg;
    unsigned int argc;
    const PifLogCmdEntry* p_cmd_entry;

    find_arg = TRUE;
 8012f78:	2301      	movs	r3, #1
 8012f7a:	74fb      	strb	r3, [r7, #19]
    argc = 0;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	60fb      	str	r3, [r7, #12]
    p_tmp_cmd = p_owner->p_rx_buffer;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f84:	617b      	str	r3, [r7, #20]

    while (*p_tmp_cmd) {
 8012f86:	e022      	b.n	8012fce <_processDebugCmd+0x5e>
        if (*p_tmp_cmd == ' ') {
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	781b      	ldrb	r3, [r3, #0]
 8012f8c:	2b20      	cmp	r3, #32
 8012f8e:	d105      	bne.n	8012f9c <_processDebugCmd+0x2c>
            *p_tmp_cmd = 0;
 8012f90:	697b      	ldr	r3, [r7, #20]
 8012f92:	2200      	movs	r2, #0
 8012f94:	701a      	strb	r2, [r3, #0]
            find_arg = TRUE;
 8012f96:	2301      	movs	r3, #1
 8012f98:	74fb      	strb	r3, [r7, #19]
 8012f9a:	e015      	b.n	8012fc8 <_processDebugCmd+0x58>
        }
        else {
            if (find_arg) {
 8012f9c:	7cfb      	ldrb	r3, [r7, #19]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d012      	beq.n	8012fc8 <_processDebugCmd+0x58>
                if (argc < PIF_LOG_CMD_MAX_ARGS) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	2b07      	cmp	r3, #7
 8012fa6:	d80c      	bhi.n	8012fc2 <_processDebugCmd+0x52>
                	p_owner->p_argv[argc] = p_tmp_cmd;
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	330c      	adds	r3, #12
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	4413      	add	r3, r2
 8012fb2:	697a      	ldr	r2, [r7, #20]
 8012fb4:	605a      	str	r2, [r3, #4]
                	argc++;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	60fb      	str	r3, [r7, #12]
                    find_arg = FALSE;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	74fb      	strb	r3, [r7, #19]
 8012fc0:	e002      	b.n	8012fc8 <_processDebugCmd+0x58>
                }
                else {
                    return PIF_LOG_CMD_TOO_MANY_ARGS;
 8012fc2:	f06f 0301 	mvn.w	r3, #1
 8012fc6:	e02e      	b.n	8013026 <_processDebugCmd+0xb6>
                }
            }
        }

        p_tmp_cmd++;
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	617b      	str	r3, [r7, #20]
    while (*p_tmp_cmd) {
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d1d8      	bne.n	8012f88 <_processDebugCmd+0x18>
    }

    if (argc) {
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d023      	beq.n	8013024 <_processDebugCmd+0xb4>
		p_cmd_entry = p_owner->p_cmd_table;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fe0:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8012fe2:	e018      	b.n	8013016 <_processDebugCmd+0xa6>
			if (!strcasecmp(p_owner->p_argv[0], p_cmd_entry->p_name)) {
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4619      	mov	r1, r3
 8012fee:	4610      	mov	r0, r2
 8012ff0:	f010 fa08 	bl	8023404 <strcasecmp>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d10a      	bne.n	8013010 <_processDebugCmd+0xa0>
				return p_cmd_entry->processor(argc - 1, &p_owner->p_argv[1]);
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	68fa      	ldr	r2, [r7, #12]
 8013000:	3a01      	subs	r2, #1
 8013002:	4610      	mov	r0, r2
 8013004:	687a      	ldr	r2, [r7, #4]
 8013006:	3238      	adds	r2, #56	; 0x38
 8013008:	4611      	mov	r1, r2
 801300a:	4798      	blx	r3
 801300c:	4603      	mov	r3, r0
 801300e:	e00a      	b.n	8013026 <_processDebugCmd+0xb6>
            }

			p_cmd_entry++;
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	3310      	adds	r3, #16
 8013014:	60bb      	str	r3, [r7, #8]
		while (p_cmd_entry->p_name) {
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d1e2      	bne.n	8012fe4 <_processDebugCmd+0x74>
    	}
        return PIF_LOG_CMD_BAD_CMD;
 801301e:	f04f 33ff 	mov.w	r3, #4294967295
 8013022:	e000      	b.n	8013026 <_processDebugCmd+0xb6>
    }
    return PIF_LOG_CMD_NO_ERROR;
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3718      	adds	r7, #24
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <_evtParsing>:

static void _evtParsing(void* p_client, PifActCommReceiveData act_receive_data)
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b084      	sub	sp, #16
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
 8013036:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	60fb      	str	r3, [r7, #12]

    if (p_owner->cmd_done == FALSE) {
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10f      	bne.n	8013066 <_evtParsing+0x38>
        if (_getDebugString(p_owner, act_receive_data)) {
 8013046:	6839      	ldr	r1, [r7, #0]
 8013048:	68f8      	ldr	r0, [r7, #12]
 801304a:	f7ff fd95 	bl	8012b78 <_getDebugString>
 801304e:	4603      	mov	r3, r0
 8013050:	2b00      	cmp	r3, #0
 8013052:	d008      	beq.n	8013066 <_evtParsing+0x38>
        	p_owner->cmd_done = TRUE;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2201      	movs	r2, #1
 8013058:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        	pifTask_SetTrigger(p_owner->p_task);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013060:	4618      	mov	r0, r3
 8013062:	f001 fa55 	bl	8014510 <pifTask_SetTrigger>
        }
    }
}
 8013066:	bf00      	nop
 8013068:	3710      	adds	r7, #16
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
	...

08013070 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b08e      	sub	sp, #56	; 0x38
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    int status = PIF_LOG_CMD_NO_ERROR;
 8013078:	2300      	movs	r3, #0
 801307a:	633b      	str	r3, [r7, #48]	; 0x30
    char msg[40];

    (void)p_task;

	status = _processDebugCmd(&s_log);
 801307c:	4850      	ldr	r0, [pc, #320]	; (80131c0 <_doTask+0x150>)
 801307e:	f7ff ff77 	bl	8012f70 <_processDebugCmd>
 8013082:	6338      	str	r0, [r7, #48]	; 0x30

	while (s_log.char_idx) {
 8013084:	e00f      	b.n	80130a6 <_doTask+0x36>
		s_log.p_rx_buffer[s_log.char_idx] = 0;
 8013086:	4b4e      	ldr	r3, [pc, #312]	; (80131c0 <_doTask+0x150>)
 8013088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801308a:	4a4d      	ldr	r2, [pc, #308]	; (80131c0 <_doTask+0x150>)
 801308c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8013090:	4413      	add	r3, r2
 8013092:	2200      	movs	r2, #0
 8013094:	701a      	strb	r2, [r3, #0]
		s_log.char_idx--;
 8013096:	4b4a      	ldr	r3, [pc, #296]	; (80131c0 <_doTask+0x150>)
 8013098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801309c:	3b01      	subs	r3, #1
 801309e:	b2da      	uxtb	r2, r3
 80130a0:	4b47      	ldr	r3, [pc, #284]	; (80131c0 <_doTask+0x150>)
 80130a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	while (s_log.char_idx) {
 80130a6:	4b46      	ldr	r3, [pc, #280]	; (80131c0 <_doTask+0x150>)
 80130a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1ea      	bne.n	8013086 <_doTask+0x16>
	}

	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 80130b0:	2300      	movs	r3, #0
 80130b2:	637b      	str	r3, [r7, #52]	; 0x34
 80130b4:	e009      	b.n	80130ca <_doTask+0x5a>
		s_log.p_argv[i] = 0;
 80130b6:	4a42      	ldr	r2, [pc, #264]	; (80131c0 <_doTask+0x150>)
 80130b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ba:	330c      	adds	r3, #12
 80130bc:	009b      	lsls	r3, r3, #2
 80130be:	4413      	add	r3, r2
 80130c0:	2200      	movs	r2, #0
 80130c2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < PIF_LOG_CMD_MAX_ARGS; i++) {
 80130c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c6:	3301      	adds	r3, #1
 80130c8:	637b      	str	r3, [r7, #52]	; 0x34
 80130ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130cc:	2b07      	cmp	r3, #7
 80130ce:	ddf2      	ble.n	80130b6 <_doTask+0x46>
	}

	switch (status) {
 80130d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d2:	3304      	adds	r3, #4
 80130d4:	2b03      	cmp	r3, #3
 80130d6:	d83f      	bhi.n	8013158 <_doTask+0xe8>
 80130d8:	a201      	add	r2, pc, #4	; (adr r2, 80130e0 <_doTask+0x70>)
 80130da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130de:	bf00      	nop
 80130e0:	0801313f 	.word	0x0801313f
 80130e4:	08013125 	.word	0x08013125
 80130e8:	0801310b 	.word	0x0801310b
 80130ec:	080130f1 	.word	0x080130f1
	case PIF_LOG_CMD_BAD_CMD:
		// Handle the case of bad command.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Not defined command!\n");
 80130f0:	4b33      	ldr	r3, [pc, #204]	; (80131c0 <_doTask+0x150>)
 80130f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f4:	4933      	ldr	r1, [pc, #204]	; (80131c4 <_doTask+0x154>)
 80130f6:	4618      	mov	r0, r3
 80130f8:	f000 fda2 	bl	8013c40 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 80130fc:	4b30      	ldr	r3, [pc, #192]	; (80131c0 <_doTask+0x150>)
 80130fe:	6a1b      	ldr	r3, [r3, #32]
 8013100:	69db      	ldr	r3, [r3, #28]
 8013102:	4618      	mov	r0, r3
 8013104:	f001 fa04 	bl	8014510 <pifTask_SetTrigger>
		break;
 8013108:	e043      	b.n	8013192 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_MANY_ARGS:
		// Handle the case of too many arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too many arguments!\n");
 801310a:	4b2d      	ldr	r3, [pc, #180]	; (80131c0 <_doTask+0x150>)
 801310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801310e:	492e      	ldr	r1, [pc, #184]	; (80131c8 <_doTask+0x158>)
 8013110:	4618      	mov	r0, r3
 8013112:	f000 fd95 	bl	8013c40 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013116:	4b2a      	ldr	r3, [pc, #168]	; (80131c0 <_doTask+0x150>)
 8013118:	6a1b      	ldr	r3, [r3, #32]
 801311a:	69db      	ldr	r3, [r3, #28]
 801311c:	4618      	mov	r0, r3
 801311e:	f001 f9f7 	bl	8014510 <pifTask_SetTrigger>
		break;
 8013122:	e036      	b.n	8013192 <_doTask+0x122>

	case PIF_LOG_CMD_TOO_FEW_ARGS:
		// Handle the case of too few arguments.
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Too few arguments!\n");
 8013124:	4b26      	ldr	r3, [pc, #152]	; (80131c0 <_doTask+0x150>)
 8013126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013128:	4928      	ldr	r1, [pc, #160]	; (80131cc <_doTask+0x15c>)
 801312a:	4618      	mov	r0, r3
 801312c:	f000 fd88 	bl	8013c40 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013130:	4b23      	ldr	r3, [pc, #140]	; (80131c0 <_doTask+0x150>)
 8013132:	6a1b      	ldr	r3, [r3, #32]
 8013134:	69db      	ldr	r3, [r3, #28]
 8013136:	4618      	mov	r0, r3
 8013138:	f001 f9ea 	bl	8014510 <pifTask_SetTrigger>
		break;
 801313c:	e029      	b.n	8013192 <_doTask+0x122>

	case PIF_LOG_CMD_INVALID_ARG:
		pifRingBuffer_PutString(s_log.p_tx_buffer, "Invalid arguments!\n");
 801313e:	4b20      	ldr	r3, [pc, #128]	; (80131c0 <_doTask+0x150>)
 8013140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013142:	4923      	ldr	r1, [pc, #140]	; (80131d0 <_doTask+0x160>)
 8013144:	4618      	mov	r0, r3
 8013146:	f000 fd7b 	bl	8013c40 <pifRingBuffer_PutString>
		pifTask_SetTrigger(s_log.p_comm->_p_task);
 801314a:	4b1d      	ldr	r3, [pc, #116]	; (80131c0 <_doTask+0x150>)
 801314c:	6a1b      	ldr	r3, [r3, #32]
 801314e:	69db      	ldr	r3, [r3, #28]
 8013150:	4618      	mov	r0, r3
 8013152:	f001 f9dd 	bl	8014510 <pifTask_SetTrigger>
		break;
 8013156:	e01c      	b.n	8013192 <_doTask+0x122>

	default:
		// Otherwise the command was executed.  Print the error
		// code if one was returned.
		if (status < PIF_LOG_CMD_NO_ERROR && status > PIF_LOG_CMD_USER_ERROR) {
 8013158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315a:	2b00      	cmp	r3, #0
 801315c:	da18      	bge.n	8013190 <_doTask+0x120>
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	f113 0f09 	cmn.w	r3, #9
 8013164:	db14      	blt.n	8013190 <_doTask+0x120>
			pif_Printf(msg, "Command returned error code: %d\n", status);
 8013166:	f107 0308 	add.w	r3, r7, #8
 801316a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801316c:	4919      	ldr	r1, [pc, #100]	; (80131d4 <_doTask+0x164>)
 801316e:	4618      	mov	r0, r3
 8013170:	f7fe fd1e 	bl	8011bb0 <pif_Printf>
			pifRingBuffer_PutString(s_log.p_tx_buffer, msg);
 8013174:	4b12      	ldr	r3, [pc, #72]	; (80131c0 <_doTask+0x150>)
 8013176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013178:	f107 0208 	add.w	r2, r7, #8
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f000 fd5e 	bl	8013c40 <pifRingBuffer_PutString>
			pifTask_SetTrigger(s_log.p_comm->_p_task);
 8013184:	4b0e      	ldr	r3, [pc, #56]	; (80131c0 <_doTask+0x150>)
 8013186:	6a1b      	ldr	r3, [r3, #32]
 8013188:	69db      	ldr	r3, [r3, #28]
 801318a:	4618      	mov	r0, r3
 801318c:	f001 f9c0 	bl	8014510 <pifTask_SetTrigger>
		}
		break;
 8013190:	bf00      	nop
	}

	pifRingBuffer_PutString(s_log.p_tx_buffer, (char *)s_log.p_prompt);
 8013192:	4b0b      	ldr	r3, [pc, #44]	; (80131c0 <_doTask+0x150>)
 8013194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013196:	4a0a      	ldr	r2, [pc, #40]	; (80131c0 <_doTask+0x150>)
 8013198:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801319a:	4611      	mov	r1, r2
 801319c:	4618      	mov	r0, r3
 801319e:	f000 fd4f 	bl	8013c40 <pifRingBuffer_PutString>
	pifTask_SetTrigger(s_log.p_comm->_p_task);
 80131a2:	4b07      	ldr	r3, [pc, #28]	; (80131c0 <_doTask+0x150>)
 80131a4:	6a1b      	ldr	r3, [r3, #32]
 80131a6:	69db      	ldr	r3, [r3, #28]
 80131a8:	4618      	mov	r0, r3
 80131aa:	f001 f9b1 	bl	8014510 <pifTask_SetTrigger>

	s_log.cmd_done = FALSE;
 80131ae:	4b04      	ldr	r3, [pc, #16]	; (80131c0 <_doTask+0x150>)
 80131b0:	2200      	movs	r2, #0
 80131b2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return 0;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3738      	adds	r7, #56	; 0x38
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	20001d74 	.word	0x20001d74
 80131c4:	080279a8 	.word	0x080279a8
 80131c8:	080279c0 	.word	0x080279c0
 80131cc:	080279d8 	.word	0x080279d8
 80131d0:	080279ec 	.word	0x080279ec
 80131d4:	08027a00 	.word	0x08027a00

080131d8 <_evtSending>:
}

#endif

static BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 80131d8:	b5b0      	push	{r4, r5, r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
	PifLog* p_owner = (PifLog*)p_client;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (!pifRingBuffer_IsEmpty(p_owner->p_tx_buffer)) {
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ea:	4618      	mov	r0, r3
 80131ec:	f000 fbd5 	bl	801399a <pifRingBuffer_IsEmpty>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d11f      	bne.n	8013236 <_evtSending+0x5e>
		length = (*act_send_data)(p_owner->p_comm, pifRingBuffer_GetTailPointer(p_owner->p_tx_buffer, 0),
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	6a1c      	ldr	r4, [r3, #32]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fe:	2100      	movs	r1, #0
 8013200:	4618      	mov	r0, r3
 8013202:	f000 fb9e 	bl	8013942 <pifRingBuffer_GetTailPointer>
 8013206:	4605      	mov	r5, r0
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320c:	2100      	movs	r1, #0
 801320e:	4618      	mov	r0, r3
 8013210:	f000 fbf8 	bl	8013a04 <pifRingBuffer_GetLinerSize>
 8013214:	4603      	mov	r3, r0
 8013216:	461a      	mov	r2, r3
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	4629      	mov	r1, r5
 801321c:	4620      	mov	r0, r4
 801321e:	4798      	blx	r3
 8013220:	4603      	mov	r3, r0
 8013222:	817b      	strh	r3, [r7, #10]
    			pifRingBuffer_GetLinerSize(p_owner->p_tx_buffer, 0));
		pifRingBuffer_Remove(p_owner->p_tx_buffer, length);
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013228:	897a      	ldrh	r2, [r7, #10]
 801322a:	4611      	mov	r1, r2
 801322c:	4618      	mov	r0, r3
 801322e:	f000 fdc6 	bl	8013dbe <pifRingBuffer_Remove>
		return TRUE;
 8013232:	2301      	movs	r3, #1
 8013234:	e000      	b.n	8013238 <_evtSending+0x60>
	}
	return FALSE;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3710      	adds	r7, #16
 801323c:	46bd      	mov	sp, r7
 801323e:	bdb0      	pop	{r4, r5, r7, pc}

08013240 <_printLog>:

static void _printLog(char* p_string, BOOL vcd)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	460b      	mov	r3, r1
 801324a:	70fb      	strb	r3, [r7, #3]
	if (!vcd && pifRingBuffer_IsBuffer(&s_log.buffer)) {
 801324c:	78fb      	ldrb	r3, [r7, #3]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d109      	bne.n	8013266 <_printLog+0x26>
 8013252:	4813      	ldr	r0, [pc, #76]	; (80132a0 <_printLog+0x60>)
 8013254:	f000 fb90 	bl	8013978 <pifRingBuffer_IsBuffer>
 8013258:	4603      	mov	r3, r0
 801325a:	2b00      	cmp	r3, #0
 801325c:	d003      	beq.n	8013266 <_printLog+0x26>
		pifRingBuffer_PutString(&s_log.buffer, p_string);
 801325e:	6879      	ldr	r1, [r7, #4]
 8013260:	480f      	ldr	r0, [pc, #60]	; (80132a0 <_printLog+0x60>)
 8013262:	f000 fced 	bl	8013c40 <pifRingBuffer_PutString>
	}

	if (s_log.enable || vcd) {
 8013266:	4b0f      	ldr	r3, [pc, #60]	; (80132a4 <_printLog+0x64>)
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d108      	bne.n	8013280 <_printLog+0x40>
 801326e:	78fb      	ldrb	r3, [r7, #3]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d010      	beq.n	8013296 <_printLog+0x56>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013274:	e004      	b.n	8013280 <_printLog+0x40>
        	if (!pifTaskManager_Yield()) break;
 8013276:	f001 fb89 	bl	801498c <pifTaskManager_Yield>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d009      	beq.n	8013294 <_printLog+0x54>
        while (!pifRingBuffer_PutString(s_log.p_tx_buffer, p_string)) {
 8013280:	4b08      	ldr	r3, [pc, #32]	; (80132a4 <_printLog+0x64>)
 8013282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013284:	6879      	ldr	r1, [r7, #4]
 8013286:	4618      	mov	r0, r3
 8013288:	f000 fcda 	bl	8013c40 <pifRingBuffer_PutString>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d0f1      	beq.n	8013276 <_printLog+0x36>
        }
	}
}
 8013292:	e000      	b.n	8013296 <_printLog+0x56>
        	if (!pifTaskManager_Yield()) break;
 8013294:	bf00      	nop
}
 8013296:	bf00      	nop
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	20001d78 	.word	0x20001d78
 80132a4:	20001d74 	.word	0x20001d74

080132a8 <_printTime>:

static void _printTime()
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
	int offset = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	607b      	str	r3, [r7, #4]
    static char tmp_buf[20];

    tmp_buf[offset++] = '\n';
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	1c5a      	adds	r2, r3, #1
 80132b6:	607a      	str	r2, [r7, #4]
 80132b8:	4a35      	ldr	r2, [pc, #212]	; (8013390 <_printTime+0xe8>)
 80132ba:	210a      	movs	r1, #10
 80132bc:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	4a33      	ldr	r2, [pc, #204]	; (8013390 <_printTime+0xe8>)
 80132c2:	4413      	add	r3, r2
 80132c4:	4a33      	ldr	r2, [pc, #204]	; (8013394 <_printTime+0xec>)
 80132c6:	7952      	ldrb	r2, [r2, #5]
 80132c8:	b2d2      	uxtb	r2, r2
 80132ca:	4611      	mov	r1, r2
 80132cc:	2202      	movs	r2, #2
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fe f888 	bl	80113e4 <pif_DecToString>
 80132d4:	4602      	mov	r2, r0
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	4413      	add	r3, r2
 80132da:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = '.';
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	607a      	str	r2, [r7, #4]
 80132e2:	4a2b      	ldr	r2, [pc, #172]	; (8013390 <_printTime+0xe8>)
 80132e4:	212e      	movs	r1, #46	; 0x2e
 80132e6:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4a29      	ldr	r2, [pc, #164]	; (8013390 <_printTime+0xe8>)
 80132ec:	4413      	add	r3, r2
 80132ee:	4a2a      	ldr	r2, [pc, #168]	; (8013398 <_printTime+0xf0>)
 80132f0:	8812      	ldrh	r2, [r2, #0]
 80132f2:	b292      	uxth	r2, r2
 80132f4:	4611      	mov	r1, r2
 80132f6:	2203      	movs	r2, #3
 80132f8:	4618      	mov	r0, r3
 80132fa:	f7fe f873 	bl	80113e4 <pif_DecToString>
 80132fe:	4602      	mov	r2, r0
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	4413      	add	r3, r2
 8013304:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	1c5a      	adds	r2, r3, #1
 801330a:	607a      	str	r2, [r7, #4]
 801330c:	4a20      	ldr	r2, [pc, #128]	; (8013390 <_printTime+0xe8>)
 801330e:	2120      	movs	r1, #32
 8013310:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = 'T';
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	1c5a      	adds	r2, r3, #1
 8013316:	607a      	str	r2, [r7, #4]
 8013318:	4a1d      	ldr	r2, [pc, #116]	; (8013390 <_printTime+0xe8>)
 801331a:	2154      	movs	r1, #84	; 0x54
 801331c:	54d1      	strb	r1, [r2, r3]
	tmp_buf[offset++] = ' ';
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	1c5a      	adds	r2, r3, #1
 8013322:	607a      	str	r2, [r7, #4]
 8013324:	4a1a      	ldr	r2, [pc, #104]	; (8013390 <_printTime+0xe8>)
 8013326:	2120      	movs	r1, #32
 8013328:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.hour, 2);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	4a18      	ldr	r2, [pc, #96]	; (8013390 <_printTime+0xe8>)
 801332e:	4413      	add	r3, r2
 8013330:	4a18      	ldr	r2, [pc, #96]	; (8013394 <_printTime+0xec>)
 8013332:	78d2      	ldrb	r2, [r2, #3]
 8013334:	b2d2      	uxtb	r2, r2
 8013336:	4611      	mov	r1, r2
 8013338:	2202      	movs	r2, #2
 801333a:	4618      	mov	r0, r3
 801333c:	f7fe f852 	bl	80113e4 <pif_DecToString>
 8013340:	4602      	mov	r2, r0
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	4413      	add	r3, r2
 8013346:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ':';
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	1c5a      	adds	r2, r3, #1
 801334c:	607a      	str	r2, [r7, #4]
 801334e:	4a10      	ldr	r2, [pc, #64]	; (8013390 <_printTime+0xe8>)
 8013350:	213a      	movs	r1, #58	; 0x3a
 8013352:	54d1      	strb	r1, [r2, r3]
	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.minute, 2);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4a0e      	ldr	r2, [pc, #56]	; (8013390 <_printTime+0xe8>)
 8013358:	4413      	add	r3, r2
 801335a:	4a0e      	ldr	r2, [pc, #56]	; (8013394 <_printTime+0xec>)
 801335c:	7912      	ldrb	r2, [r2, #4]
 801335e:	b2d2      	uxtb	r2, r2
 8013360:	4611      	mov	r1, r2
 8013362:	2202      	movs	r2, #2
 8013364:	4618      	mov	r0, r3
 8013366:	f7fe f83d 	bl	80113e4 <pif_DecToString>
 801336a:	4602      	mov	r2, r0
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	4413      	add	r3, r2
 8013370:	607b      	str	r3, [r7, #4]
	tmp_buf[offset++] = ' ';
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	1c5a      	adds	r2, r3, #1
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	4a05      	ldr	r2, [pc, #20]	; (8013390 <_printTime+0xe8>)
 801337a:	2120      	movs	r1, #32
 801337c:	54d1      	strb	r1, [r2, r3]

	_printLog(tmp_buf, FALSE);
 801337e:	2100      	movs	r1, #0
 8013380:	4803      	ldr	r0, [pc, #12]	; (8013390 <_printTime+0xe8>)
 8013382:	f7ff ff5d 	bl	8013240 <_printLog>
}
 8013386:	bf00      	nop
 8013388:	3708      	adds	r7, #8
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}
 801338e:	bf00      	nop
 8013390:	20001ddc 	.word	0x20001ddc
 8013394:	20001d58 	.word	0x20001d58
 8013398:	20001d50 	.word	0x20001d50

0801339c <pifLog_Init>:

BOOL pifLog_Init()
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af02      	add	r7, sp, #8
	memset(&s_log, 0, sizeof(PifLog));
 80133a2:	2264      	movs	r2, #100	; 0x64
 80133a4:	2100      	movs	r1, #0
 80133a6:	480f      	ldr	r0, [pc, #60]	; (80133e4 <pifLog_Init+0x48>)
 80133a8:	f00f ff1e 	bl	80231e8 <memset>

	s_log.enable = TRUE;
 80133ac:	4b0d      	ldr	r3, [pc, #52]	; (80133e4 <pifLog_Init+0x48>)
 80133ae:	2201      	movs	r2, #1
 80133b0:	701a      	strb	r2, [r3, #0]
#ifdef __PIF_LOG_COMMAND__
	s_log.p_task = pifTaskManager_Add(TM_EXTERNAL_ORDER, 0, _doTask, &s_log, FALSE);
 80133b2:	2300      	movs	r3, #0
 80133b4:	9300      	str	r3, [sp, #0]
 80133b6:	4b0b      	ldr	r3, [pc, #44]	; (80133e4 <pifLog_Init+0x48>)
 80133b8:	4a0b      	ldr	r2, [pc, #44]	; (80133e8 <pifLog_Init+0x4c>)
 80133ba:	2100      	movs	r1, #0
 80133bc:	2007      	movs	r0, #7
 80133be:	f001 f92d 	bl	801461c <pifTaskManager_Add>
 80133c2:	4603      	mov	r3, r0
 80133c4:	4a07      	ldr	r2, [pc, #28]	; (80133e4 <pifLog_Init+0x48>)
 80133c6:	6293      	str	r3, [r2, #40]	; 0x28
	if (!s_log.p_task) return FALSE;
 80133c8:	4b06      	ldr	r3, [pc, #24]	; (80133e4 <pifLog_Init+0x48>)
 80133ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d101      	bne.n	80133d4 <pifLog_Init+0x38>
 80133d0:	2300      	movs	r3, #0
 80133d2:	e004      	b.n	80133de <pifLog_Init+0x42>
	s_log.p_task->name = "Log";
 80133d4:	4b03      	ldr	r3, [pc, #12]	; (80133e4 <pifLog_Init+0x48>)
 80133d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133d8:	4a04      	ldr	r2, [pc, #16]	; (80133ec <pifLog_Init+0x50>)
 80133da:	601a      	str	r2, [r3, #0]
#endif
   	return TRUE;
 80133dc:	2301      	movs	r3, #1
}
 80133de:	4618      	mov	r0, r3
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	20001d74 	.word	0x20001d74
 80133e8:	08013071 	.word	0x08013071
 80133ec:	08027a24 	.word	0x08027a24

080133f0 <pifLog_UseCommand>:
}

#ifdef __PIF_LOG_COMMAND__

BOOL pifLog_UseCommand(const PifLogCmdEntry* p_cmd_table, const char* p_prompt)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
    if (!p_cmd_table || !p_prompt) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d002      	beq.n	8013406 <pifLog_UseCommand+0x16>
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d104      	bne.n	8013410 <pifLog_UseCommand+0x20>
    	pif_error = E_INVALID_PARAM;
 8013406:	4b12      	ldr	r3, [pc, #72]	; (8013450 <pifLog_UseCommand+0x60>)
 8013408:	2201      	movs	r2, #1
 801340a:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801340c:	2300      	movs	r3, #0
 801340e:	e01b      	b.n	8013448 <pifLog_UseCommand+0x58>
    }

    s_log.p_rx_buffer = calloc(sizeof(char), PIF_LOG_RX_BUFFER_SIZE);
 8013410:	2120      	movs	r1, #32
 8013412:	2001      	movs	r0, #1
 8013414:	f00f fe98 	bl	8023148 <calloc>
 8013418:	4603      	mov	r3, r0
 801341a:	461a      	mov	r2, r3
 801341c:	4b0d      	ldr	r3, [pc, #52]	; (8013454 <pifLog_UseCommand+0x64>)
 801341e:	631a      	str	r2, [r3, #48]	; 0x30
    if (!s_log.p_rx_buffer) {
 8013420:	4b0c      	ldr	r3, [pc, #48]	; (8013454 <pifLog_UseCommand+0x64>)
 8013422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013424:	2b00      	cmp	r3, #0
 8013426:	d104      	bne.n	8013432 <pifLog_UseCommand+0x42>
        pif_error = E_OUT_OF_HEAP;
 8013428:	4b09      	ldr	r3, [pc, #36]	; (8013450 <pifLog_UseCommand+0x60>)
 801342a:	2203      	movs	r2, #3
 801342c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801342e:	2300      	movs	r3, #0
 8013430:	e00a      	b.n	8013448 <pifLog_UseCommand+0x58>
    }
    s_log.rx_buffer_size = PIF_LOG_RX_BUFFER_SIZE;
 8013432:	4b08      	ldr	r3, [pc, #32]	; (8013454 <pifLog_UseCommand+0x64>)
 8013434:	2220      	movs	r2, #32
 8013436:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    s_log.p_cmd_table = p_cmd_table;
 801343a:	4a06      	ldr	r2, [pc, #24]	; (8013454 <pifLog_UseCommand+0x64>)
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	6593      	str	r3, [r2, #88]	; 0x58
    s_log.p_prompt = p_prompt;
 8013440:	4a04      	ldr	r2, [pc, #16]	; (8013454 <pifLog_UseCommand+0x64>)
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	65d3      	str	r3, [r2, #92]	; 0x5c
    return TRUE;
 8013446:	2301      	movs	r3, #1
}
 8013448:	4618      	mov	r0, r3
 801344a:	3708      	adds	r7, #8
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}
 8013450:	20001d48 	.word	0x20001d48
 8013454:	20001d74 	.word	0x20001d74

08013458 <pifLog_Print>:
{
	return pifRingBuffer_IsEmpty(&s_log.buffer);
}

void pifLog_Print(PifLogType type, const char* p_string)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b098      	sub	sp, #96	; 0x60
 801345c:	af00      	add	r7, sp, #0
 801345e:	4603      	mov	r3, r0
 8013460:	6039      	str	r1, [r7, #0]
 8013462:	71fb      	strb	r3, [r7, #7]
	int offset = 0;
 8013464:	2300      	movs	r3, #0
 8013466:	65fb      	str	r3, [r7, #92]	; 0x5c
    char tmp_buf[PIF_LOG_LINE_SIZE];

    if (type >= LT_INFO) {
 8013468:	79fb      	ldrb	r3, [r7, #7]
 801346a:	2b01      	cmp	r3, #1
 801346c:	d96b      	bls.n	8013546 <pifLog_Print+0xee>
        if (s_minute != pif_datetime.minute) {
 801346e:	4b3d      	ldr	r3, [pc, #244]	; (8013564 <pifLog_Print+0x10c>)
 8013470:	791b      	ldrb	r3, [r3, #4]
 8013472:	b2da      	uxtb	r2, r3
 8013474:	4b3c      	ldr	r3, [pc, #240]	; (8013568 <pifLog_Print+0x110>)
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	429a      	cmp	r2, r3
 801347a:	d006      	beq.n	801348a <pifLog_Print+0x32>
        	_printTime();
 801347c:	f7ff ff14 	bl	80132a8 <_printTime>
        	s_minute = pif_datetime.minute;
 8013480:	4b38      	ldr	r3, [pc, #224]	; (8013564 <pifLog_Print+0x10c>)
 8013482:	791b      	ldrb	r3, [r3, #4]
 8013484:	b2da      	uxtb	r2, r3
 8013486:	4b38      	ldr	r3, [pc, #224]	; (8013568 <pifLog_Print+0x110>)
 8013488:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 801348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801348c:	1c5a      	adds	r2, r3, #1
 801348e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013490:	3360      	adds	r3, #96	; 0x60
 8013492:	443b      	add	r3, r7
 8013494:	220a      	movs	r2, #10
 8013496:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 801349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801349c:	f107 020c 	add.w	r2, r7, #12
 80134a0:	4413      	add	r3, r2
 80134a2:	4a30      	ldr	r2, [pc, #192]	; (8013564 <pifLog_Print+0x10c>)
 80134a4:	7952      	ldrb	r2, [r2, #5]
 80134a6:	b2d2      	uxtb	r2, r2
 80134a8:	4611      	mov	r1, r2
 80134aa:	2202      	movs	r2, #2
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7fd ff99 	bl	80113e4 <pif_DecToString>
 80134b2:	4602      	mov	r2, r0
 80134b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134b6:	4413      	add	r3, r2
 80134b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = '.';
 80134ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134bc:	1c5a      	adds	r2, r3, #1
 80134be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134c0:	3360      	adds	r3, #96	; 0x60
 80134c2:	443b      	add	r3, r7
 80134c4:	222e      	movs	r2, #46	; 0x2e
 80134c6:	f803 2c54 	strb.w	r2, [r3, #-84]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80134ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134cc:	f107 020c 	add.w	r2, r7, #12
 80134d0:	4413      	add	r3, r2
 80134d2:	4a26      	ldr	r2, [pc, #152]	; (801356c <pifLog_Print+0x114>)
 80134d4:	8812      	ldrh	r2, [r2, #0]
 80134d6:	b292      	uxth	r2, r2
 80134d8:	4611      	mov	r1, r2
 80134da:	2203      	movs	r2, #3
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fd ff81 	bl	80113e4 <pif_DecToString>
 80134e2:	4602      	mov	r2, r0
 80134e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134e6:	4413      	add	r3, r2
 80134e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    	tmp_buf[offset++] = ' ';
 80134ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ec:	1c5a      	adds	r2, r3, #1
 80134ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134f0:	3360      	adds	r3, #96	; 0x60
 80134f2:	443b      	add	r3, r7
 80134f4:	2220      	movs	r2, #32
 80134f6:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 80134fa:	79fb      	ldrb	r3, [r7, #7]
 80134fc:	1e9a      	subs	r2, r3, #2
 80134fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013500:	1c59      	adds	r1, r3, #1
 8013502:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013504:	491a      	ldr	r1, [pc, #104]	; (8013570 <pifLog_Print+0x118>)
 8013506:	5c8a      	ldrb	r2, [r1, r2]
 8013508:	3360      	adds	r3, #96	; 0x60
 801350a:	443b      	add	r3, r7
 801350c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset++] = ' ';
 8013510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013512:	1c5a      	adds	r2, r3, #1
 8013514:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013516:	3360      	adds	r3, #96	; 0x60
 8013518:	443b      	add	r3, r7
 801351a:	2220      	movs	r2, #32
 801351c:	f803 2c54 	strb.w	r2, [r3, #-84]
    	tmp_buf[offset] = 0;
 8013520:	f107 020c 	add.w	r2, r7, #12
 8013524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013526:	4413      	add	r3, r2
 8013528:	2200      	movs	r2, #0
 801352a:	701a      	strb	r2, [r3, #0]
    	_printLog(tmp_buf, type == LT_VCD);
 801352c:	79fb      	ldrb	r3, [r7, #7]
 801352e:	2b01      	cmp	r3, #1
 8013530:	bf0c      	ite	eq
 8013532:	2301      	moveq	r3, #1
 8013534:	2300      	movne	r3, #0
 8013536:	b2db      	uxtb	r3, r3
 8013538:	461a      	mov	r2, r3
 801353a:	f107 030c 	add.w	r3, r7, #12
 801353e:	4611      	mov	r1, r2
 8013540:	4618      	mov	r0, r3
 8013542:	f7ff fe7d 	bl	8013240 <_printLog>
    }

	_printLog((char*)p_string, type == LT_VCD);
 8013546:	79fb      	ldrb	r3, [r7, #7]
 8013548:	2b01      	cmp	r3, #1
 801354a:	bf0c      	ite	eq
 801354c:	2301      	moveq	r3, #1
 801354e:	2300      	movne	r3, #0
 8013550:	b2db      	uxtb	r3, r3
 8013552:	4619      	mov	r1, r3
 8013554:	6838      	ldr	r0, [r7, #0]
 8013556:	f7ff fe73 	bl	8013240 <_printLog>
}
 801355a:	bf00      	nop
 801355c:	3760      	adds	r7, #96	; 0x60
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	20001d58 	.word	0x20001d58
 8013568:	20000134 	.word	0x20000134
 801356c:	20001d50 	.word	0x20001d50
 8013570:	080293ac 	.word	0x080293ac

08013574 <pifLog_Printf>:

void pifLog_Printf(PifLogType type, const char* p_format, ...)
{
 8013574:	b40e      	push	{r1, r2, r3}
 8013576:	b580      	push	{r7, lr}
 8013578:	b09b      	sub	sp, #108	; 0x6c
 801357a:	af00      	add	r7, sp, #0
 801357c:	4603      	mov	r3, r0
 801357e:	71fb      	strb	r3, [r7, #7]
	va_list data;
	int offset = 0;
 8013580:	2300      	movs	r3, #0
 8013582:	667b      	str	r3, [r7, #100]	; 0x64
    char tmp_buf[PIF_LOG_LINE_SIZE + 1];

    if (type >= LT_INFO) {
 8013584:	79fb      	ldrb	r3, [r7, #7]
 8013586:	2b01      	cmp	r3, #1
 8013588:	d958      	bls.n	801363c <pifLog_Printf+0xc8>
        if (s_minute != pif_datetime.minute) {
 801358a:	4b3d      	ldr	r3, [pc, #244]	; (8013680 <pifLog_Printf+0x10c>)
 801358c:	791b      	ldrb	r3, [r3, #4]
 801358e:	b2da      	uxtb	r2, r3
 8013590:	4b3c      	ldr	r3, [pc, #240]	; (8013684 <pifLog_Printf+0x110>)
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	429a      	cmp	r2, r3
 8013596:	d006      	beq.n	80135a6 <pifLog_Printf+0x32>
        	_printTime();
 8013598:	f7ff fe86 	bl	80132a8 <_printTime>
        	s_minute = pif_datetime.minute;
 801359c:	4b38      	ldr	r3, [pc, #224]	; (8013680 <pifLog_Printf+0x10c>)
 801359e:	791b      	ldrb	r3, [r3, #4]
 80135a0:	b2da      	uxtb	r2, r3
 80135a2:	4b38      	ldr	r3, [pc, #224]	; (8013684 <pifLog_Printf+0x110>)
 80135a4:	701a      	strb	r2, [r3, #0]
    	}

        tmp_buf[offset++] = '\n';
 80135a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	667a      	str	r2, [r7, #100]	; 0x64
 80135ac:	3368      	adds	r3, #104	; 0x68
 80135ae:	443b      	add	r3, r7
 80135b0:	220a      	movs	r2, #10
 80135b2:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_datetime.second, 2);
 80135b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135b8:	f107 020c 	add.w	r2, r7, #12
 80135bc:	4413      	add	r3, r2
 80135be:	4a30      	ldr	r2, [pc, #192]	; (8013680 <pifLog_Printf+0x10c>)
 80135c0:	7952      	ldrb	r2, [r2, #5]
 80135c2:	b2d2      	uxtb	r2, r2
 80135c4:	4611      	mov	r1, r2
 80135c6:	2202      	movs	r2, #2
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fd ff0b 	bl	80113e4 <pif_DecToString>
 80135ce:	4602      	mov	r2, r0
 80135d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135d2:	4413      	add	r3, r2
 80135d4:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = '.';
 80135d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135d8:	1c5a      	adds	r2, r3, #1
 80135da:	667a      	str	r2, [r7, #100]	; 0x64
 80135dc:	3368      	adds	r3, #104	; 0x68
 80135de:	443b      	add	r3, r7
 80135e0:	222e      	movs	r2, #46	; 0x2e
 80135e2:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	offset += pif_DecToString(tmp_buf + offset, (uint32_t)pif_timer1ms, 3);
 80135e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135e8:	f107 020c 	add.w	r2, r7, #12
 80135ec:	4413      	add	r3, r2
 80135ee:	4a26      	ldr	r2, [pc, #152]	; (8013688 <pifLog_Printf+0x114>)
 80135f0:	8812      	ldrh	r2, [r2, #0]
 80135f2:	b292      	uxth	r2, r2
 80135f4:	4611      	mov	r1, r2
 80135f6:	2203      	movs	r2, #3
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fd fef3 	bl	80113e4 <pif_DecToString>
 80135fe:	4602      	mov	r2, r0
 8013600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013602:	4413      	add	r3, r2
 8013604:	667b      	str	r3, [r7, #100]	; 0x64
    	tmp_buf[offset++] = ' ';
 8013606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013608:	1c5a      	adds	r2, r3, #1
 801360a:	667a      	str	r2, [r7, #100]	; 0x64
 801360c:	3368      	adds	r3, #104	; 0x68
 801360e:	443b      	add	r3, r7
 8013610:	2220      	movs	r2, #32
 8013612:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = type_ch[type - LT_INFO];
 8013616:	79fb      	ldrb	r3, [r7, #7]
 8013618:	1e9a      	subs	r2, r3, #2
 801361a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801361c:	1c59      	adds	r1, r3, #1
 801361e:	6679      	str	r1, [r7, #100]	; 0x64
 8013620:	491a      	ldr	r1, [pc, #104]	; (801368c <pifLog_Printf+0x118>)
 8013622:	5c8a      	ldrb	r2, [r1, r2]
 8013624:	3368      	adds	r3, #104	; 0x68
 8013626:	443b      	add	r3, r7
 8013628:	f803 2c5c 	strb.w	r2, [r3, #-92]
    	tmp_buf[offset++] = ' ';
 801362c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801362e:	1c5a      	adds	r2, r3, #1
 8013630:	667a      	str	r2, [r7, #100]	; 0x64
 8013632:	3368      	adds	r3, #104	; 0x68
 8013634:	443b      	add	r3, r7
 8013636:	2220      	movs	r2, #32
 8013638:	f803 2c5c 	strb.w	r2, [r3, #-92]
    }

	va_start(data, p_format);
 801363c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8013640:	663b      	str	r3, [r7, #96]	; 0x60
	pif_PrintFormat(tmp_buf + offset, &data, p_format);
 8013642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013644:	f107 020c 	add.w	r2, r7, #12
 8013648:	4413      	add	r3, r2
 801364a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 801364e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013650:	4618      	mov	r0, r3
 8013652:	f7fe f853 	bl	80116fc <pif_PrintFormat>
	va_end(data);

	_printLog(tmp_buf, type == LT_VCD);
 8013656:	79fb      	ldrb	r3, [r7, #7]
 8013658:	2b01      	cmp	r3, #1
 801365a:	bf0c      	ite	eq
 801365c:	2301      	moveq	r3, #1
 801365e:	2300      	movne	r3, #0
 8013660:	b2db      	uxtb	r3, r3
 8013662:	461a      	mov	r2, r3
 8013664:	f107 030c 	add.w	r3, r7, #12
 8013668:	4611      	mov	r1, r2
 801366a:	4618      	mov	r0, r3
 801366c:	f7ff fde8 	bl	8013240 <_printLog>
}
 8013670:	bf00      	nop
 8013672:	376c      	adds	r7, #108	; 0x6c
 8013674:	46bd      	mov	sp, r7
 8013676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801367a:	b003      	add	sp, #12
 801367c:	4770      	bx	lr
 801367e:	bf00      	nop
 8013680:	20001d58 	.word	0x20001d58
 8013684:	20000134 	.word	0x20000134
 8013688:	20001d50 	.word	0x20001d50
 801368c:	080293ac 	.word	0x080293ac

08013690 <pifLog_AttachComm>:
{
	return s_log.p_comm->_p_task;
}

BOOL pifLog_AttachComm(PifComm* p_comm)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
    s_log.p_tx_buffer = pifRingBuffer_CreateHeap(PIF_ID_AUTO, PIF_LOG_TX_BUFFER_SIZE);
 8013698:	2150      	movs	r1, #80	; 0x50
 801369a:	2000      	movs	r0, #0
 801369c:	f000 f89a 	bl	80137d4 <pifRingBuffer_CreateHeap>
 80136a0:	4603      	mov	r3, r0
 80136a2:	4a0b      	ldr	r2, [pc, #44]	; (80136d0 <pifLog_AttachComm+0x40>)
 80136a4:	6253      	str	r3, [r2, #36]	; 0x24
    if (!s_log.p_tx_buffer) return FALSE;
 80136a6:	4b0a      	ldr	r3, [pc, #40]	; (80136d0 <pifLog_AttachComm+0x40>)
 80136a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d101      	bne.n	80136b2 <pifLog_AttachComm+0x22>
 80136ae:	2300      	movs	r3, #0
 80136b0:	e009      	b.n	80136c6 <pifLog_AttachComm+0x36>

	s_log.p_comm = p_comm;
 80136b2:	4a07      	ldr	r2, [pc, #28]	; (80136d0 <pifLog_AttachComm+0x40>)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6213      	str	r3, [r2, #32]
	pifComm_AttachClient(p_comm, &s_log, _evtParsing, _evtSending);
 80136b8:	4b06      	ldr	r3, [pc, #24]	; (80136d4 <pifLog_AttachComm+0x44>)
 80136ba:	4a07      	ldr	r2, [pc, #28]	; (80136d8 <pifLog_AttachComm+0x48>)
 80136bc:	4904      	ldr	r1, [pc, #16]	; (80136d0 <pifLog_AttachComm+0x40>)
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7fe fc58 	bl	8011f74 <pifComm_AttachClient>
    return TRUE;
 80136c4:	2301      	movs	r3, #1
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3708      	adds	r7, #8
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	20001d74 	.word	0x20001d74
 80136d4:	080131d9 	.word	0x080131d9
 80136d8:	0801302f 	.word	0x0801302f

080136dc <_chopOff>:

#include <string.h>


static BOOL _chopOff(PifRingBuffer* p_owner, uint16_t count)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b084      	sub	sp, #16
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	460b      	mov	r3, r1
 80136e6:	807b      	strh	r3, [r7, #2]
	uint16_t length;
	uint16_t size, tail;

	switch (p_owner->_bt.chop_off) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	791b      	ldrb	r3, [r3, #4]
 80136ec:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80136f0:	b2db      	uxtb	r3, r3
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d002      	beq.n	80136fc <_chopOff+0x20>
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d02e      	beq.n	8013758 <_chopOff+0x7c>
 80136fa:	e065      	b.n	80137c8 <_chopOff+0xec>
	case RB_CHOP_OFF_CHAR:
		size = 0;
 80136fc:	2300      	movs	r3, #0
 80136fe:	81fb      	strh	r3, [r7, #14]
		tail = p_owner->__tail;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	8adb      	ldrh	r3, [r3, #22]
 8013704:	81bb      	strh	r3, [r7, #12]
		while (tail != p_owner->__head) {
 8013706:	e021      	b.n	801374c <_chopOff+0x70>
			if (p_owner->__p_buffer[tail] == p_owner->__ui.chop_off_char) {
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	691a      	ldr	r2, [r3, #16]
 801370c:	89bb      	ldrh	r3, [r7, #12]
 801370e:	4413      	add	r3, r2
 8013710:	781a      	ldrb	r2, [r3, #0]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	7e9b      	ldrb	r3, [r3, #26]
 8013716:	429a      	cmp	r2, r3
 8013718:	d108      	bne.n	801372c <_chopOff+0x50>
				if (size > count) {
 801371a:	89fa      	ldrh	r2, [r7, #14]
 801371c:	887b      	ldrh	r3, [r7, #2]
 801371e:	429a      	cmp	r2, r3
 8013720:	d904      	bls.n	801372c <_chopOff+0x50>
					p_owner->__tail = tail;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	89ba      	ldrh	r2, [r7, #12]
 8013726:	82da      	strh	r2, [r3, #22]
					return TRUE;
 8013728:	2301      	movs	r3, #1
 801372a:	e04e      	b.n	80137ca <_chopOff+0xee>
				}
			}
			tail++;
 801372c:	89bb      	ldrh	r3, [r7, #12]
 801372e:	3301      	adds	r3, #1
 8013730:	81bb      	strh	r3, [r7, #12]
			if (tail >= p_owner->_size) tail -= p_owner->_size;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	891b      	ldrh	r3, [r3, #8]
 8013736:	89ba      	ldrh	r2, [r7, #12]
 8013738:	429a      	cmp	r2, r3
 801373a:	d304      	bcc.n	8013746 <_chopOff+0x6a>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	891b      	ldrh	r3, [r3, #8]
 8013740:	89ba      	ldrh	r2, [r7, #12]
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	81bb      	strh	r3, [r7, #12]
			size++;
 8013746:	89fb      	ldrh	r3, [r7, #14]
 8013748:	3301      	adds	r3, #1
 801374a:	81fb      	strh	r3, [r7, #14]
		while (tail != p_owner->__head) {
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	8a9b      	ldrh	r3, [r3, #20]
 8013750:	89ba      	ldrh	r2, [r7, #12]
 8013752:	429a      	cmp	r2, r3
 8013754:	d1d8      	bne.n	8013708 <_chopOff+0x2c>
		}
		break;
 8013756:	e037      	b.n	80137c8 <_chopOff+0xec>

	case RB_CHOP_OFF_LENGTH:
		length = pifRingBuffer_GetFillSize(p_owner);
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f000 f931 	bl	80139c0 <pifRingBuffer_GetFillSize>
 801375e:	4603      	mov	r3, r0
 8013760:	817b      	strh	r3, [r7, #10]
		size = p_owner->__ui.chop_off_length;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	8b5b      	ldrh	r3, [r3, #26]
 8013766:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013768:	e004      	b.n	8013774 <_chopOff+0x98>
			size += p_owner->__ui.chop_off_length;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	8b5a      	ldrh	r2, [r3, #26]
 801376e:	89fb      	ldrh	r3, [r7, #14]
 8013770:	4413      	add	r3, r2
 8013772:	81fb      	strh	r3, [r7, #14]
		while (count > size) {
 8013774:	887a      	ldrh	r2, [r7, #2]
 8013776:	89fb      	ldrh	r3, [r7, #14]
 8013778:	429a      	cmp	r2, r3
 801377a:	d8f6      	bhi.n	801376a <_chopOff+0x8e>
		}
		if (size < length) {
 801377c:	89fa      	ldrh	r2, [r7, #14]
 801377e:	897b      	ldrh	r3, [r7, #10]
 8013780:	429a      	cmp	r2, r3
 8013782:	d216      	bcs.n	80137b2 <_chopOff+0xd6>
			p_owner->__tail += size;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	8ada      	ldrh	r2, [r3, #22]
 8013788:	89fb      	ldrh	r3, [r7, #14]
 801378a:	4413      	add	r3, r2
 801378c:	b29a      	uxth	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	82da      	strh	r2, [r3, #22]
			if (p_owner->__tail >= p_owner->_size) p_owner->__tail -= p_owner->_size;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	8ada      	ldrh	r2, [r3, #22]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	891b      	ldrh	r3, [r3, #8]
 801379a:	429a      	cmp	r2, r3
 801379c:	d307      	bcc.n	80137ae <_chopOff+0xd2>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	8ada      	ldrh	r2, [r3, #22]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	891b      	ldrh	r3, [r3, #8]
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	b29a      	uxth	r2, r3
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	82da      	strh	r2, [r3, #22]
			return TRUE;
 80137ae:	2301      	movs	r3, #1
 80137b0:	e00b      	b.n	80137ca <_chopOff+0xee>
		}
		else if (count <= length) {
 80137b2:	887a      	ldrh	r2, [r7, #2]
 80137b4:	897b      	ldrh	r3, [r7, #10]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d805      	bhi.n	80137c6 <_chopOff+0xea>
			p_owner->__tail = p_owner->__head;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	8a9a      	ldrh	r2, [r3, #20]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	82da      	strh	r2, [r3, #22]
			return TRUE;
 80137c2:	2301      	movs	r3, #1
 80137c4:	e001      	b.n	80137ca <_chopOff+0xee>
		}
		break;
 80137c6:	bf00      	nop
	}
	return FALSE;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3710      	adds	r7, #16
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
	...

080137d4 <pifRingBuffer_CreateHeap>:

PifRingBuffer* pifRingBuffer_CreateHeap(PifId id, uint16_t size)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	4603      	mov	r3, r0
 80137dc:	460a      	mov	r2, r1
 80137de:	80fb      	strh	r3, [r7, #6]
 80137e0:	4613      	mov	r3, r2
 80137e2:	80bb      	strh	r3, [r7, #4]
	PifRingBuffer* p_owner = malloc(sizeof(PifRingBuffer));
 80137e4:	201c      	movs	r0, #28
 80137e6:	f00f fce1 	bl	80231ac <malloc>
 80137ea:	4603      	mov	r3, r0
 80137ec:	60fb      	str	r3, [r7, #12]
	if (!p_owner) {
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d104      	bne.n	80137fe <pifRingBuffer_CreateHeap+0x2a>
		pif_error = E_OUT_OF_HEAP;
 80137f4:	4b0c      	ldr	r3, [pc, #48]	; (8013828 <pifRingBuffer_CreateHeap+0x54>)
 80137f6:	2203      	movs	r2, #3
 80137f8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	e010      	b.n	8013820 <pifRingBuffer_CreateHeap+0x4c>
	}

	if (!pifRingBuffer_InitHeap(p_owner, id, size)) {
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	88ba      	ldrh	r2, [r7, #4]
 8013802:	88f9      	ldrh	r1, [r7, #6]
 8013804:	4618      	mov	r0, r3
 8013806:	f000 f829 	bl	801385c <pifRingBuffer_InitHeap>
 801380a:	4603      	mov	r3, r0
 801380c:	2b00      	cmp	r3, #0
 801380e:	d106      	bne.n	801381e <pifRingBuffer_CreateHeap+0x4a>
		pifRingBuffer_Destroy(&p_owner);
 8013810:	f107 030c 	add.w	r3, r7, #12
 8013814:	4618      	mov	r0, r3
 8013816:	f000 f809 	bl	801382c <pifRingBuffer_Destroy>
		return NULL;
 801381a:	2300      	movs	r3, #0
 801381c:	e000      	b.n	8013820 <pifRingBuffer_CreateHeap+0x4c>
	}
    return p_owner;
 801381e:	68fb      	ldr	r3, [r7, #12]
}
 8013820:	4618      	mov	r0, r3
 8013822:	3710      	adds	r7, #16
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	20001d48 	.word	0x20001d48

0801382c <pifRingBuffer_Destroy>:
	}
    return p_owner;
}

void pifRingBuffer_Destroy(PifRingBuffer** pp_owner)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
	if (pp_owner) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d00c      	beq.n	8013854 <pifRingBuffer_Destroy+0x28>
		pifRingBuffer_Clear(*pp_owner);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	4618      	mov	r0, r3
 8013840:	f000 f856 	bl	80138f0 <pifRingBuffer_Clear>
		free(*pp_owner);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	4618      	mov	r0, r3
 801384a:	f00f fcb7 	bl	80231bc <free>
		*pp_owner = NULL;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	2200      	movs	r2, #0
 8013852:	601a      	str	r2, [r3, #0]
	}
}
 8013854:	bf00      	nop
 8013856:	3708      	adds	r7, #8
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <pifRingBuffer_InitHeap>:

BOOL pifRingBuffer_InitHeap(PifRingBuffer* p_owner, PifId id, uint16_t size)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	460b      	mov	r3, r1
 8013866:	807b      	strh	r3, [r7, #2]
 8013868:	4613      	mov	r3, r2
 801386a:	803b      	strh	r3, [r7, #0]
    if (!p_owner || !size) {
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d002      	beq.n	8013878 <pifRingBuffer_InitHeap+0x1c>
 8013872:	883b      	ldrh	r3, [r7, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d104      	bne.n	8013882 <pifRingBuffer_InitHeap+0x26>
		pif_error = E_INVALID_PARAM;
 8013878:	4b1b      	ldr	r3, [pc, #108]	; (80138e8 <pifRingBuffer_InitHeap+0x8c>)
 801387a:	2201      	movs	r2, #1
 801387c:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801387e:	2300      	movs	r3, #0
 8013880:	e02e      	b.n	80138e0 <pifRingBuffer_InitHeap+0x84>
	}

	memset(p_owner, 0, sizeof(PifRingBuffer));
 8013882:	221c      	movs	r2, #28
 8013884:	2100      	movs	r1, #0
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f00f fcae 	bl	80231e8 <memset>

	p_owner->__p_buffer = calloc(sizeof(uint8_t), size);
 801388c:	883b      	ldrh	r3, [r7, #0]
 801388e:	4619      	mov	r1, r3
 8013890:	2001      	movs	r0, #1
 8013892:	f00f fc59 	bl	8023148 <calloc>
 8013896:	4603      	mov	r3, r0
 8013898:	461a      	mov	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	611a      	str	r2, [r3, #16]
	if (!p_owner->__p_buffer) {
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d108      	bne.n	80138b8 <pifRingBuffer_InitHeap+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80138a6:	4b10      	ldr	r3, [pc, #64]	; (80138e8 <pifRingBuffer_InitHeap+0x8c>)
 80138a8:	2203      	movs	r2, #3
 80138aa:	701a      	strb	r2, [r3, #0]
		goto fail;
 80138ac:	bf00      	nop
    p_owner->_size = size;
	p_owner->__backup_head = size;
    return TRUE;

fail:
	pifRingBuffer_Clear(p_owner);
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f000 f81e 	bl	80138f0 <pifRingBuffer_Clear>
    return FALSE;
 80138b4:	2300      	movs	r3, #0
 80138b6:	e013      	b.n	80138e0 <pifRingBuffer_InitHeap+0x84>
	if (id == PIF_ID_AUTO) id = pif_id++;
 80138b8:	887b      	ldrh	r3, [r7, #2]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d106      	bne.n	80138cc <pifRingBuffer_InitHeap+0x70>
 80138be:	4b0b      	ldr	r3, [pc, #44]	; (80138ec <pifRingBuffer_InitHeap+0x90>)
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	b291      	uxth	r1, r2
 80138c6:	4a09      	ldr	r2, [pc, #36]	; (80138ec <pifRingBuffer_InitHeap+0x90>)
 80138c8:	8011      	strh	r1, [r2, #0]
 80138ca:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	887a      	ldrh	r2, [r7, #2]
 80138d0:	801a      	strh	r2, [r3, #0]
    p_owner->_size = size;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	883a      	ldrh	r2, [r7, #0]
 80138d6:	811a      	strh	r2, [r3, #8]
	p_owner->__backup_head = size;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	883a      	ldrh	r2, [r7, #0]
 80138dc:	831a      	strh	r2, [r3, #24]
    return TRUE;
 80138de:	2301      	movs	r3, #1
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	20001d48 	.word	0x20001d48
 80138ec:	20000128 	.word	0x20000128

080138f0 <pifRingBuffer_Clear>:
	p_owner->__backup_head = size;
    return TRUE;
}

void pifRingBuffer_Clear(PifRingBuffer* p_owner)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
	if (p_owner->_bt.is_static == FALSE && p_owner->__p_buffer) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	791b      	ldrb	r3, [r3, #4]
 80138fc:	f003 0301 	and.w	r3, r3, #1
 8013900:	b2db      	uxtb	r3, r3
 8013902:	2b00      	cmp	r3, #0
 8013904:	d108      	bne.n	8013918 <pifRingBuffer_Clear+0x28>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	691b      	ldr	r3, [r3, #16]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d004      	beq.n	8013918 <pifRingBuffer_Clear+0x28>
        free(p_owner->__p_buffer);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	691b      	ldr	r3, [r3, #16]
 8013912:	4618      	mov	r0, r3
 8013914:	f00f fc52 	bl	80231bc <free>
    }
    p_owner->__p_buffer = NULL;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2200      	movs	r2, #0
 801391c:	611a      	str	r2, [r3, #16]
}
 801391e:	bf00      	nop
 8013920:	3708      	adds	r7, #8
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <pifRingBuffer_SetName>:
    p_owner->_size = size;
	return TRUE;
}

void pifRingBuffer_SetName(PifRingBuffer* p_owner, const char* p_name)
{
 8013926:	b480      	push	{r7}
 8013928:	b083      	sub	sp, #12
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
 801392e:	6039      	str	r1, [r7, #0]
	p_owner->__p_name = p_name;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	683a      	ldr	r2, [r7, #0]
 8013934:	60da      	str	r2, [r3, #12]
}
 8013936:	bf00      	nop
 8013938:	370c      	adds	r7, #12
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr

08013942 <pifRingBuffer_GetTailPointer>:

uint8_t *pifRingBuffer_GetTailPointer(PifRingBuffer* p_owner, uint16_t pos)
{
 8013942:	b480      	push	{r7}
 8013944:	b083      	sub	sp, #12
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
 801394a:	460b      	mov	r3, r1
 801394c:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__tail + pos) % p_owner->_size];
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6919      	ldr	r1, [r3, #16]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	8adb      	ldrh	r3, [r3, #22]
 8013956:	461a      	mov	r2, r3
 8013958:	887b      	ldrh	r3, [r7, #2]
 801395a:	4413      	add	r3, r2
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	8912      	ldrh	r2, [r2, #8]
 8013960:	fb93 f0f2 	sdiv	r0, r3, r2
 8013964:	fb00 f202 	mul.w	r2, r0, r2
 8013968:	1a9b      	subs	r3, r3, r2
 801396a:	440b      	add	r3, r1
}
 801396c:	4618      	mov	r0, r3
 801396e:	370c      	adds	r7, #12
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <pifRingBuffer_IsBuffer>:
	p_owner->_bt.chop_off = RB_CHOP_OFF_LENGTH;
	p_owner->__ui.chop_off_length = length;
}

BOOL pifRingBuffer_IsBuffer(PifRingBuffer* p_owner)
{
 8013978:	b480      	push	{r7}
 801397a:	b083      	sub	sp, #12
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
	return p_owner->__p_buffer != NULL;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	691b      	ldr	r3, [r3, #16]
 8013984:	2b00      	cmp	r3, #0
 8013986:	bf14      	ite	ne
 8013988:	2301      	movne	r3, #1
 801398a:	2300      	moveq	r3, #0
 801398c:	b2db      	uxtb	r3, r3
}
 801398e:	4618      	mov	r0, r3
 8013990:	370c      	adds	r7, #12
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr

0801399a <pifRingBuffer_IsEmpty>:

BOOL pifRingBuffer_IsEmpty(PifRingBuffer* p_owner)
{
 801399a:	b480      	push	{r7}
 801399c:	b083      	sub	sp, #12
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
	return p_owner->__head == p_owner->__tail;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	8a9a      	ldrh	r2, [r3, #20]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	8adb      	ldrh	r3, [r3, #22]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	bf0c      	ite	eq
 80139ae:	2301      	moveq	r3, #1
 80139b0:	2300      	movne	r3, #0
 80139b2:	b2db      	uxtb	r3, r3
}
 80139b4:	4618      	mov	r0, r3
 80139b6:	370c      	adds	r7, #12
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr

080139c0 <pifRingBuffer_GetFillSize>:

uint16_t pifRingBuffer_GetFillSize(PifRingBuffer* p_owner)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b085      	sub	sp, #20
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
	uint16_t usFill;

    if (p_owner->__head >= p_owner->__tail) {
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	8a9a      	ldrh	r2, [r3, #20]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	8adb      	ldrh	r3, [r3, #22]
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d306      	bcc.n	80139e2 <pifRingBuffer_GetFillSize+0x22>
    	usFill = p_owner->__head - p_owner->__tail;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	8a9a      	ldrh	r2, [r3, #20]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	8adb      	ldrh	r3, [r3, #22]
 80139dc:	1ad3      	subs	r3, r2, r3
 80139de:	81fb      	strh	r3, [r7, #14]
 80139e0:	e009      	b.n	80139f6 <pifRingBuffer_GetFillSize+0x36>
    }
    else {
    	usFill = p_owner->_size - p_owner->__tail + p_owner->__head;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	891a      	ldrh	r2, [r3, #8]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	8adb      	ldrh	r3, [r3, #22]
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	b29a      	uxth	r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	8a9b      	ldrh	r3, [r3, #20]
 80139f2:	4413      	add	r3, r2
 80139f4:	81fb      	strh	r3, [r7, #14]
    }
    return usFill;
 80139f6:	89fb      	ldrh	r3, [r7, #14]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3714      	adds	r7, #20
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <pifRingBuffer_GetLinerSize>:

uint16_t pifRingBuffer_GetLinerSize(PifRingBuffer* p_owner, uint16_t pos)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b085      	sub	sp, #20
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
 8013a0c:	460b      	mov	r3, r1
 8013a0e:	807b      	strh	r3, [r7, #2]
	uint16_t tail = (p_owner->__tail + pos) % p_owner->_size;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	8adb      	ldrh	r3, [r3, #22]
 8013a14:	461a      	mov	r2, r3
 8013a16:	887b      	ldrh	r3, [r7, #2]
 8013a18:	4413      	add	r3, r2
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	8912      	ldrh	r2, [r2, #8]
 8013a1e:	fb93 f1f2 	sdiv	r1, r3, r2
 8013a22:	fb01 f202 	mul.w	r2, r1, r2
 8013a26:	1a9b      	subs	r3, r3, r2
 8013a28:	81fb      	strh	r3, [r7, #14]

    if (p_owner->__head >= tail) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	8a9b      	ldrh	r3, [r3, #20]
 8013a2e:	89fa      	ldrh	r2, [r7, #14]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d805      	bhi.n	8013a40 <pifRingBuffer_GetLinerSize+0x3c>
    	return p_owner->__head - tail;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	8a9a      	ldrh	r2, [r3, #20]
 8013a38:	89fb      	ldrh	r3, [r7, #14]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	e004      	b.n	8013a4a <pifRingBuffer_GetLinerSize+0x46>
    }
    else {
    	return p_owner->_size - tail;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	891a      	ldrh	r2, [r3, #8]
 8013a44:	89fb      	ldrh	r3, [r7, #14]
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	b29b      	uxth	r3, r3
    }
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3714      	adds	r7, #20
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr

08013a56 <pifRingBuffer_GetRemainSize>:

uint16_t pifRingBuffer_GetRemainSize(PifRingBuffer* p_owner)
{
 8013a56:	b480      	push	{r7}
 8013a58:	b085      	sub	sp, #20
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
	uint16_t remain;

    if (p_owner->__head < p_owner->__tail) {
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	8a9a      	ldrh	r2, [r3, #20]
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	8adb      	ldrh	r3, [r3, #22]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d206      	bcs.n	8013a78 <pifRingBuffer_GetRemainSize+0x22>
    	remain = p_owner->__tail - p_owner->__head;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	8ada      	ldrh	r2, [r3, #22]
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	8a9b      	ldrh	r3, [r3, #20]
 8013a72:	1ad3      	subs	r3, r2, r3
 8013a74:	81fb      	strh	r3, [r7, #14]
 8013a76:	e009      	b.n	8013a8c <pifRingBuffer_GetRemainSize+0x36>
    }
    else {
    	remain = p_owner->_size - p_owner->__head + p_owner->__tail;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	891a      	ldrh	r2, [r3, #8]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	8a9b      	ldrh	r3, [r3, #20]
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	8adb      	ldrh	r3, [r3, #22]
 8013a88:	4413      	add	r3, r2
 8013a8a:	81fb      	strh	r3, [r7, #14]
    }
    return remain - 1;
 8013a8c:	89fb      	ldrh	r3, [r7, #14]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	b29b      	uxth	r3, r3
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <pifRingBuffer_BeginPutting>:

void pifRingBuffer_BeginPutting(PifRingBuffer* p_owner)
{
 8013a9e:	b480      	push	{r7}
 8013aa0:	b083      	sub	sp, #12
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
	if (p_owner->__backup_head < p_owner->_size) {
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	8b1a      	ldrh	r2, [r3, #24]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	891b      	ldrh	r3, [r3, #8]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d203      	bcs.n	8013aba <pifRingBuffer_BeginPutting+0x1c>
		p_owner->__head = p_owner->__backup_head;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	8b1a      	ldrh	r2, [r3, #24]
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	829a      	strh	r2, [r3, #20]
	}
	p_owner->__backup_head = p_owner->__head;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	8a9a      	ldrh	r2, [r3, #20]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	831a      	strh	r2, [r3, #24]
}
 8013ac2:	bf00      	nop
 8013ac4:	370c      	adds	r7, #12
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013acc:	4770      	bx	lr

08013ace <pifRingBuffer_CommitPutting>:

void pifRingBuffer_CommitPutting(PifRingBuffer* p_owner)
{
 8013ace:	b480      	push	{r7}
 8013ad0:	b083      	sub	sp, #12
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
	p_owner->__backup_head = p_owner->_size;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	891a      	ldrh	r2, [r3, #8]
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	831a      	strh	r2, [r3, #24]
}
 8013ade:	bf00      	nop
 8013ae0:	370c      	adds	r7, #12
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae8:	4770      	bx	lr

08013aea <pifRingBuffer_RollbackPutting>:

void pifRingBuffer_RollbackPutting(PifRingBuffer* p_owner)
{
 8013aea:	b480      	push	{r7}
 8013aec:	b083      	sub	sp, #12
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	6078      	str	r0, [r7, #4]
	p_owner->__head = p_owner->__backup_head;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	8b1a      	ldrh	r2, [r3, #24]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	829a      	strh	r2, [r3, #20]
	p_owner->__backup_head = p_owner->_size;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	891a      	ldrh	r2, [r3, #8]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	831a      	strh	r2, [r3, #24]
}
 8013b02:	bf00      	nop
 8013b04:	370c      	adds	r7, #12
 8013b06:	46bd      	mov	sp, r7
 8013b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0c:	4770      	bx	lr

08013b0e <pifRingBuffer_GetPointerPutting>:

uint8_t* pifRingBuffer_GetPointerPutting(PifRingBuffer* p_owner, uint16_t pos)
{
 8013b0e:	b480      	push	{r7}
 8013b10:	b083      	sub	sp, #12
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
 8013b16:	460b      	mov	r3, r1
 8013b18:	807b      	strh	r3, [r7, #2]
	return &p_owner->__p_buffer[(p_owner->__backup_head + pos) % p_owner->_size];
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6919      	ldr	r1, [r3, #16]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	8b1b      	ldrh	r3, [r3, #24]
 8013b22:	461a      	mov	r2, r3
 8013b24:	887b      	ldrh	r3, [r7, #2]
 8013b26:	4413      	add	r3, r2
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	8912      	ldrh	r2, [r2, #8]
 8013b2c:	fb93 f0f2 	sdiv	r0, r3, r2
 8013b30:	fb00 f202 	mul.w	r2, r0, r2
 8013b34:	1a9b      	subs	r3, r3, r2
 8013b36:	440b      	add	r3, r1
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	370c      	adds	r7, #12
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b42:	4770      	bx	lr

08013b44 <pifRingBuffer_PutByte>:

BOOL pifRingBuffer_PutByte(PifRingBuffer* p_owner, uint8_t data)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	460b      	mov	r3, r1
 8013b4e:	70fb      	strb	r3, [r7, #3]
    uint16_t next;

    next = p_owner->__head + 1;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	8a9b      	ldrh	r3, [r3, #20]
 8013b54:	3301      	adds	r3, #1
 8013b56:	81fb      	strh	r3, [r7, #14]
	if (next >= p_owner->_size) next = 0;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	891b      	ldrh	r3, [r3, #8]
 8013b5c:	89fa      	ldrh	r2, [r7, #14]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d301      	bcc.n	8013b66 <pifRingBuffer_PutByte+0x22>
 8013b62:	2300      	movs	r3, #0
 8013b64:	81fb      	strh	r3, [r7, #14]
    if (next == p_owner->__tail) {
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8adb      	ldrh	r3, [r3, #22]
 8013b6a:	89fa      	ldrh	r2, [r7, #14]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d10b      	bne.n	8013b88 <pifRingBuffer_PutByte+0x44>
    	if (!_chopOff(p_owner, 1)) {
 8013b70:	2101      	movs	r1, #1
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7ff fdb2 	bl	80136dc <_chopOff>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d104      	bne.n	8013b88 <pifRingBuffer_PutByte+0x44>
    		pif_error = E_OVERFLOW_BUFFER;
 8013b7e:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <pifRingBuffer_PutByte+0x64>)
 8013b80:	2204      	movs	r2, #4
 8013b82:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013b84:	2300      	movs	r3, #0
 8013b86:	e00a      	b.n	8013b9e <pifRingBuffer_PutByte+0x5a>
    	}
    }

    p_owner->__p_buffer[p_owner->__head] = data;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	691b      	ldr	r3, [r3, #16]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	8a92      	ldrh	r2, [r2, #20]
 8013b90:	4413      	add	r3, r2
 8013b92:	78fa      	ldrb	r2, [r7, #3]
 8013b94:	701a      	strb	r2, [r3, #0]
    p_owner->__head = next;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	89fa      	ldrh	r2, [r7, #14]
 8013b9a:	829a      	strh	r2, [r3, #20]
    return TRUE;
 8013b9c:	2301      	movs	r3, #1
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3710      	adds	r7, #16
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}
 8013ba6:	bf00      	nop
 8013ba8:	20001d48 	.word	0x20001d48

08013bac <pifRingBuffer_PutData>:

BOOL pifRingBuffer_PutData(PifRingBuffer* p_owner, uint8_t* p_data, uint16_t length)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	80fb      	strh	r3, [r7, #6]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013bba:	68f8      	ldr	r0, [r7, #12]
 8013bbc:	f7ff ff4b 	bl	8013a56 <pifRingBuffer_GetRemainSize>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	82bb      	strh	r3, [r7, #20]

    if (length > remain) {
 8013bc4:	88fa      	ldrh	r2, [r7, #6]
 8013bc6:	8abb      	ldrh	r3, [r7, #20]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d90f      	bls.n	8013bec <pifRingBuffer_PutData+0x40>
    	if (!_chopOff(p_owner, length - remain)) {
 8013bcc:	88fa      	ldrh	r2, [r7, #6]
 8013bce:	8abb      	ldrh	r3, [r7, #20]
 8013bd0:	1ad3      	subs	r3, r2, r3
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	4619      	mov	r1, r3
 8013bd6:	68f8      	ldr	r0, [r7, #12]
 8013bd8:	f7ff fd80 	bl	80136dc <_chopOff>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d104      	bne.n	8013bec <pifRingBuffer_PutData+0x40>
    		pif_error = E_OVERFLOW_BUFFER;
 8013be2:	4b16      	ldr	r3, [pc, #88]	; (8013c3c <pifRingBuffer_PutData+0x90>)
 8013be4:	2204      	movs	r2, #4
 8013be6:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013be8:	2300      	movs	r3, #0
 8013bea:	e023      	b.n	8013c34 <pifRingBuffer_PutData+0x88>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013bec:	2300      	movs	r3, #0
 8013bee:	82fb      	strh	r3, [r7, #22]
 8013bf0:	e01b      	b.n	8013c2a <pifRingBuffer_PutData+0x7e>
    	p_owner->__p_buffer[p_owner->__head] = p_data[i];
 8013bf2:	8afb      	ldrh	r3, [r7, #22]
 8013bf4:	68ba      	ldr	r2, [r7, #8]
 8013bf6:	441a      	add	r2, r3
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	691b      	ldr	r3, [r3, #16]
 8013bfc:	68f9      	ldr	r1, [r7, #12]
 8013bfe:	8a89      	ldrh	r1, [r1, #20]
 8013c00:	440b      	add	r3, r1
 8013c02:	7812      	ldrb	r2, [r2, #0]
 8013c04:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	8a9b      	ldrh	r3, [r3, #20]
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	8a9a      	ldrh	r2, [r3, #20]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	891b      	ldrh	r3, [r3, #8]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d302      	bcc.n	8013c24 <pifRingBuffer_PutData+0x78>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2200      	movs	r2, #0
 8013c22:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013c24:	8afb      	ldrh	r3, [r7, #22]
 8013c26:	3301      	adds	r3, #1
 8013c28:	82fb      	strh	r3, [r7, #22]
 8013c2a:	8afa      	ldrh	r2, [r7, #22]
 8013c2c:	88fb      	ldrh	r3, [r7, #6]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d3df      	bcc.n	8013bf2 <pifRingBuffer_PutData+0x46>
    }
    return TRUE;
 8013c32:	2301      	movs	r3, #1
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3718      	adds	r7, #24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	20001d48 	.word	0x20001d48

08013c40 <pifRingBuffer_PutString>:

BOOL pifRingBuffer_PutString(PifRingBuffer* p_owner, char* p_string)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b084      	sub	sp, #16
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6039      	str	r1, [r7, #0]
	uint16_t remain = pifRingBuffer_GetRemainSize(p_owner);
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7ff ff03 	bl	8013a56 <pifRingBuffer_GetRemainSize>
 8013c50:	4603      	mov	r3, r0
 8013c52:	81bb      	strh	r3, [r7, #12]
	uint16_t length = strlen(p_string);
 8013c54:	6838      	ldr	r0, [r7, #0]
 8013c56:	f7ec fabf 	bl	80001d8 <strlen>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	817b      	strh	r3, [r7, #10]

    if (length > remain) {
 8013c5e:	897a      	ldrh	r2, [r7, #10]
 8013c60:	89bb      	ldrh	r3, [r7, #12]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d90f      	bls.n	8013c86 <pifRingBuffer_PutString+0x46>
    	if (!_chopOff(p_owner, length - remain)) {
 8013c66:	897a      	ldrh	r2, [r7, #10]
 8013c68:	89bb      	ldrh	r3, [r7, #12]
 8013c6a:	1ad3      	subs	r3, r2, r3
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	4619      	mov	r1, r3
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f7ff fd33 	bl	80136dc <_chopOff>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d104      	bne.n	8013c86 <pifRingBuffer_PutString+0x46>
    		pif_error = E_OVERFLOW_BUFFER;
 8013c7c:	4b16      	ldr	r3, [pc, #88]	; (8013cd8 <pifRingBuffer_PutString+0x98>)
 8013c7e:	2204      	movs	r2, #4
 8013c80:	701a      	strb	r2, [r3, #0]
    		return FALSE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	e023      	b.n	8013cce <pifRingBuffer_PutString+0x8e>
    	}
    }

    for (uint16_t i = 0; i < length; i++) {
 8013c86:	2300      	movs	r3, #0
 8013c88:	81fb      	strh	r3, [r7, #14]
 8013c8a:	e01b      	b.n	8013cc4 <pifRingBuffer_PutString+0x84>
    	p_owner->__p_buffer[p_owner->__head] = p_string[i];
 8013c8c:	89fb      	ldrh	r3, [r7, #14]
 8013c8e:	683a      	ldr	r2, [r7, #0]
 8013c90:	441a      	add	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	691b      	ldr	r3, [r3, #16]
 8013c96:	6879      	ldr	r1, [r7, #4]
 8013c98:	8a89      	ldrh	r1, [r1, #20]
 8013c9a:	440b      	add	r3, r1
 8013c9c:	7812      	ldrb	r2, [r2, #0]
 8013c9e:	701a      	strb	r2, [r3, #0]
    	p_owner->__head++;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	8a9b      	ldrh	r3, [r3, #20]
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	829a      	strh	r2, [r3, #20]
    	if (p_owner->__head >= p_owner->_size) p_owner->__head = 0;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	8a9a      	ldrh	r2, [r3, #20]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	891b      	ldrh	r3, [r3, #8]
 8013cb4:	429a      	cmp	r2, r3
 8013cb6:	d302      	bcc.n	8013cbe <pifRingBuffer_PutString+0x7e>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	829a      	strh	r2, [r3, #20]
    for (uint16_t i = 0; i < length; i++) {
 8013cbe:	89fb      	ldrh	r3, [r7, #14]
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	81fb      	strh	r3, [r7, #14]
 8013cc4:	89fa      	ldrh	r2, [r7, #14]
 8013cc6:	897b      	ldrh	r3, [r7, #10]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d3df      	bcc.n	8013c8c <pifRingBuffer_PutString+0x4c>
    }
    return TRUE;
 8013ccc:	2301      	movs	r3, #1
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	20001d48 	.word	0x20001d48

08013cdc <pifRingBuffer_GetByte>:

BOOL pifRingBuffer_GetByte(PifRingBuffer* p_owner, uint8_t* p_data)
{
 8013cdc:	b480      	push	{r7}
 8013cde:	b083      	sub	sp, #12
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
	if (p_owner->__tail == p_owner->__head) return FALSE;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	8ada      	ldrh	r2, [r3, #22]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	8a9b      	ldrh	r3, [r3, #20]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d101      	bne.n	8013cf6 <pifRingBuffer_GetByte+0x1a>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	e017      	b.n	8013d26 <pifRingBuffer_GetByte+0x4a>

	*p_data = p_owner->__p_buffer[p_owner->__tail];
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	691b      	ldr	r3, [r3, #16]
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	8ad2      	ldrh	r2, [r2, #22]
 8013cfe:	4413      	add	r3, r2
 8013d00:	781a      	ldrb	r2, [r3, #0]
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	701a      	strb	r2, [r3, #0]
	p_owner->__tail++;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	8adb      	ldrh	r3, [r3, #22]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	82da      	strh	r2, [r3, #22]
	if (p_owner->__tail >= p_owner->_size) p_owner->__tail = 0;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	8ada      	ldrh	r2, [r3, #22]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	891b      	ldrh	r3, [r3, #8]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d302      	bcc.n	8013d24 <pifRingBuffer_GetByte+0x48>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2200      	movs	r2, #0
 8013d22:	82da      	strh	r2, [r3, #22]
	return TRUE;
 8013d24:	2301      	movs	r3, #1
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	370c      	adds	r7, #12
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <pifRingBuffer_CopyToArray>:

uint16_t pifRingBuffer_CopyToArray(uint8_t* p_dst, uint16_t count, PifRingBuffer* p_src, uint16_t pos)
{
 8013d32:	b480      	push	{r7}
 8013d34:	b087      	sub	sp, #28
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	60f8      	str	r0, [r7, #12]
 8013d3a:	607a      	str	r2, [r7, #4]
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	460b      	mov	r3, r1
 8013d40:	817b      	strh	r3, [r7, #10]
 8013d42:	4613      	mov	r3, r2
 8013d44:	813b      	strh	r3, [r7, #8]
	uint16_t tail = p_src->__tail + pos;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	8ada      	ldrh	r2, [r3, #22]
 8013d4a:	893b      	ldrh	r3, [r7, #8]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	82fb      	strh	r3, [r7, #22]
	if (tail >= p_src->_size) tail -= p_src->_size;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	891b      	ldrh	r3, [r3, #8]
 8013d54:	8afa      	ldrh	r2, [r7, #22]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d304      	bcc.n	8013d64 <pifRingBuffer_CopyToArray+0x32>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	891b      	ldrh	r3, [r3, #8]
 8013d5e:	8afa      	ldrh	r2, [r7, #22]
 8013d60:	1ad3      	subs	r3, r2, r3
 8013d62:	82fb      	strh	r3, [r7, #22]

	for (uint16_t i = 0; i < count; i++) {
 8013d64:	2300      	movs	r3, #0
 8013d66:	82bb      	strh	r3, [r7, #20]
 8013d68:	e01e      	b.n	8013da8 <pifRingBuffer_CopyToArray+0x76>
		p_dst[i] = p_src->__p_buffer[tail];
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	691a      	ldr	r2, [r3, #16]
 8013d6e:	8afb      	ldrh	r3, [r7, #22]
 8013d70:	441a      	add	r2, r3
 8013d72:	8abb      	ldrh	r3, [r7, #20]
 8013d74:	68f9      	ldr	r1, [r7, #12]
 8013d76:	440b      	add	r3, r1
 8013d78:	7812      	ldrb	r2, [r2, #0]
 8013d7a:	701a      	strb	r2, [r3, #0]
		tail++;
 8013d7c:	8afb      	ldrh	r3, [r7, #22]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	82fb      	strh	r3, [r7, #22]
		if (tail >= p_src->_size) tail = 0;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	891b      	ldrh	r3, [r3, #8]
 8013d86:	8afa      	ldrh	r2, [r7, #22]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d301      	bcc.n	8013d90 <pifRingBuffer_CopyToArray+0x5e>
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	82fb      	strh	r3, [r7, #22]
		if (tail == p_src->__head) return i + 1;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	8a9b      	ldrh	r3, [r3, #20]
 8013d94:	8afa      	ldrh	r2, [r7, #22]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d103      	bne.n	8013da2 <pifRingBuffer_CopyToArray+0x70>
 8013d9a:	8abb      	ldrh	r3, [r7, #20]
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	e007      	b.n	8013db2 <pifRingBuffer_CopyToArray+0x80>
	for (uint16_t i = 0; i < count; i++) {
 8013da2:	8abb      	ldrh	r3, [r7, #20]
 8013da4:	3301      	adds	r3, #1
 8013da6:	82bb      	strh	r3, [r7, #20]
 8013da8:	8aba      	ldrh	r2, [r7, #20]
 8013daa:	897b      	ldrh	r3, [r7, #10]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d3dc      	bcc.n	8013d6a <pifRingBuffer_CopyToArray+0x38>
	}
	return count;
 8013db0:	897b      	ldrh	r3, [r7, #10]
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	371c      	adds	r7, #28
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr

08013dbe <pifRingBuffer_Remove>:
	}
	return TRUE;
}

void pifRingBuffer_Remove(PifRingBuffer* p_owner, uint16_t size)
{
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b084      	sub	sp, #16
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	807b      	strh	r3, [r7, #2]
	uint16_t fill = pifRingBuffer_GetFillSize(p_owner);
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f7ff fdf8 	bl	80139c0 <pifRingBuffer_GetFillSize>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	81fb      	strh	r3, [r7, #14]

	if (size >= fill) {
 8013dd4:	887a      	ldrh	r2, [r7, #2]
 8013dd6:	89fb      	ldrh	r3, [r7, #14]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d304      	bcc.n	8013de6 <pifRingBuffer_Remove+0x28>
		p_owner->__tail = p_owner->__head;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8a9a      	ldrh	r2, [r3, #20]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	82da      	strh	r2, [r3, #22]
	}
	else {
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
	}
}
 8013de4:	e00e      	b.n	8013e04 <pifRingBuffer_Remove+0x46>
		p_owner->__tail = (p_owner->__tail + size) % p_owner->_size;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	8adb      	ldrh	r3, [r3, #22]
 8013dea:	461a      	mov	r2, r3
 8013dec:	887b      	ldrh	r3, [r7, #2]
 8013dee:	4413      	add	r3, r2
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	8912      	ldrh	r2, [r2, #8]
 8013df4:	fb93 f1f2 	sdiv	r1, r3, r2
 8013df8:	fb01 f202 	mul.w	r2, r1, r2
 8013dfc:	1a9b      	subs	r3, r3, r2
 8013dfe:	b29a      	uxth	r2, r3
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	82da      	strh	r2, [r3, #22]
}
 8013e04:	bf00      	nop
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <_setTable>:

static uint32_t s_loop_count = 0UL, s_pass_count = 0UL;


static int _setTable(uint16_t period, PifTaskMode* p_mode)
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	b089      	sub	sp, #36	; 0x24
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	4603      	mov	r3, r0
 8013e14:	6039      	str	r1, [r7, #0]
 8013e16:	80fb      	strh	r3, [r7, #6]
	uint32_t gap, index, bit;
	static int base = 0;
	int i, count, num = -1;
 8013e18:	f04f 33ff 	mov.w	r3, #4294967295
 8013e1c:	617b      	str	r3, [r7, #20]

	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013e1e:	2300      	movs	r3, #0
 8013e20:	61bb      	str	r3, [r7, #24]
 8013e22:	e00f      	b.n	8013e44 <_setTable+0x38>
		if (!(s_table_number & (1 << i))) {
 8013e24:	2201      	movs	r2, #1
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	fa02 f303 	lsl.w	r3, r2, r3
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	4b34      	ldr	r3, [pc, #208]	; (8013f00 <_setTable+0xf4>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4013      	ands	r3, r2
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d102      	bne.n	8013e3e <_setTable+0x32>
			num = i;
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	617b      	str	r3, [r7, #20]
			break;
 8013e3c:	e005      	b.n	8013e4a <_setTable+0x3e>
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	3301      	adds	r3, #1
 8013e42:	61bb      	str	r3, [r7, #24]
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	2b1f      	cmp	r3, #31
 8013e48:	ddec      	ble.n	8013e24 <_setTable+0x18>
		}
	}
	if (num == -1) {
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e50:	d105      	bne.n	8013e5e <_setTable+0x52>
		pif_error = E_OVERFLOW_BUFFER;
 8013e52:	4b2c      	ldr	r3, [pc, #176]	; (8013f04 <_setTable+0xf8>)
 8013e54:	2204      	movs	r2, #4
 8013e56:	701a      	strb	r2, [r3, #0]
		return -1;
 8013e58:	f04f 33ff 	mov.w	r3, #4294967295
 8013e5c:	e04a      	b.n	8013ef4 <_setTable+0xe8>
	}
	bit = 1 << num;
 8013e5e:	2201      	movs	r2, #1
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	fa02 f303 	lsl.w	r3, r2, r3
 8013e66:	613b      	str	r3, [r7, #16]
	s_table_number |= bit;
 8013e68:	4b25      	ldr	r3, [pc, #148]	; (8013f00 <_setTable+0xf4>)
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	4313      	orrs	r3, r2
 8013e70:	4a23      	ldr	r2, [pc, #140]	; (8013f00 <_setTable+0xf4>)
 8013e72:	6013      	str	r3, [r2, #0]

	count = PIF_TASK_TABLE_SIZE * period;
 8013e74:	88fb      	ldrh	r3, [r7, #6]
 8013e76:	015b      	lsls	r3, r3, #5
 8013e78:	60fb      	str	r3, [r7, #12]
	gap = 10000L * PIF_TASK_TABLE_SIZE / count;
 8013e7a:	4a23      	ldr	r2, [pc, #140]	; (8013f08 <_setTable+0xfc>)
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013e82:	60bb      	str	r3, [r7, #8]
	if (gap > 100) {
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	2b64      	cmp	r3, #100	; 0x64
 8013e88:	d930      	bls.n	8013eec <_setTable+0xe0>
		index = 100 * base;
 8013e8a:	4b20      	ldr	r3, [pc, #128]	; (8013f0c <_setTable+0x100>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2264      	movs	r2, #100	; 0x64
 8013e90:	fb02 f303 	mul.w	r3, r2, r3
 8013e94:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013e96:	2300      	movs	r3, #0
 8013e98:	61bb      	str	r3, [r7, #24]
 8013e9a:	e017      	b.n	8013ecc <_setTable+0xc0>
			s_table[(index / 100) & PIF_TASK_TABLE_MASK] |= bit;
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	4a1c      	ldr	r2, [pc, #112]	; (8013f10 <_setTable+0x104>)
 8013ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8013ea4:	095b      	lsrs	r3, r3, #5
 8013ea6:	f003 021f 	and.w	r2, r3, #31
 8013eaa:	491a      	ldr	r1, [pc, #104]	; (8013f14 <_setTable+0x108>)
 8013eac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013eb0:	f003 031f 	and.w	r3, r3, #31
 8013eb4:	693a      	ldr	r2, [r7, #16]
 8013eb6:	430a      	orrs	r2, r1
 8013eb8:	4916      	ldr	r1, [pc, #88]	; (8013f14 <_setTable+0x108>)
 8013eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			index += gap;
 8013ebe:	69fa      	ldr	r2, [r7, #28]
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	61fb      	str	r3, [r7, #28]
		for (i = 0; i < count / 100; i++) {
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	61bb      	str	r3, [r7, #24]
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	4a10      	ldr	r2, [pc, #64]	; (8013f10 <_setTable+0x104>)
 8013ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8013ed4:	1152      	asrs	r2, r2, #5
 8013ed6:	17db      	asrs	r3, r3, #31
 8013ed8:	1ad3      	subs	r3, r2, r3
 8013eda:	69ba      	ldr	r2, [r7, #24]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	dbdd      	blt.n	8013e9c <_setTable+0x90>
		}
		base++;
 8013ee0:	4b0a      	ldr	r3, [pc, #40]	; (8013f0c <_setTable+0x100>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	4a09      	ldr	r2, [pc, #36]	; (8013f0c <_setTable+0x100>)
 8013ee8:	6013      	str	r3, [r2, #0]
 8013eea:	e002      	b.n	8013ef2 <_setTable+0xe6>
	}
	else {
		*p_mode = TM_ALWAYS;
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	701a      	strb	r2, [r3, #0]
	}
	return num;
 8013ef2:	697b      	ldr	r3, [r7, #20]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3724      	adds	r7, #36	; 0x24
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr
 8013f00:	20001e28 	.word	0x20001e28
 8013f04:	20001d48 	.word	0x20001d48
 8013f08:	0004e200 	.word	0x0004e200
 8013f0c:	20001eb8 	.word	0x20001eb8
 8013f10:	51eb851f 	.word	0x51eb851f
 8013f14:	20001e2c 	.word	0x20001e2c

08013f18 <_resetTable>:

static void _resetTable(int number)
{
 8013f18:	b480      	push	{r7}
 8013f1a:	b085      	sub	sp, #20
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
	int i;
	uint32_t mask;

	mask = ~((uint32_t)1 << number);
 8013f20:	2201      	movs	r2, #1
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	fa02 f303 	lsl.w	r3, r2, r3
 8013f28:	43db      	mvns	r3, r3
 8013f2a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	60fb      	str	r3, [r7, #12]
 8013f30:	e00c      	b.n	8013f4c <_resetTable+0x34>
		s_table[i] &= mask;
 8013f32:	4a0e      	ldr	r2, [pc, #56]	; (8013f6c <_resetTable+0x54>)
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	401a      	ands	r2, r3
 8013f3e:	490b      	ldr	r1, [pc, #44]	; (8013f6c <_resetTable+0x54>)
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < PIF_TASK_TABLE_SIZE; i++) {
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	60fb      	str	r3, [r7, #12]
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b1f      	cmp	r3, #31
 8013f50:	ddef      	ble.n	8013f32 <_resetTable+0x1a>
	}
	s_table_number &= mask;
 8013f52:	4b07      	ldr	r3, [pc, #28]	; (8013f70 <_resetTable+0x58>)
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	4013      	ands	r3, r2
 8013f5a:	4a05      	ldr	r2, [pc, #20]	; (8013f70 <_resetTable+0x58>)
 8013f5c:	6013      	str	r3, [r2, #0]
}
 8013f5e:	bf00      	nop
 8013f60:	3714      	adds	r7, #20
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	20001e2c 	.word	0x20001e2c
 8013f70:	20001e28 	.word	0x20001e28

08013f74 <_processingAlways>:

static PifTask* _processingAlways(PifTask* p_owner)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b085      	sub	sp, #20
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
	uint32_t gap;

	if (p_owner->__delay_ms) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d010      	beq.n	8013fa6 <_processingAlways+0x32>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8013f84:	4b0b      	ldr	r3, [pc, #44]	; (8013fb4 <_processingAlways+0x40>)
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8013f94:	461a      	mov	r2, r3
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	4293      	cmp	r3, r2
 8013f9a:	d302      	bcc.n	8013fa2 <_processingAlways+0x2e>
			p_owner->__delay_ms = 0;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
		}
		return NULL;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e000      	b.n	8013fa8 <_processingAlways+0x34>
	}
	return p_owner;
 8013fa6:	687b      	ldr	r3, [r7, #4]
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3714      	adds	r7, #20
 8013fac:	46bd      	mov	sp, r7
 8013fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb2:	4770      	bx	lr
 8013fb4:	20001d60 	.word	0x20001d60

08013fb8 <_processingPeriodUs>:

static PifTask* _processingPeriodUs(PifTask* p_owner)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = (*pif_act_timer1us)();
 8013fc0:	4b0f      	ldr	r3, [pc, #60]	; (8014000 <_processingPeriodUs+0x48>)
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	4798      	blx	r3
 8013fc6:	60f8      	str	r0, [r7, #12]
	gap = current - p_owner->__pretime;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fcc:	68fa      	ldr	r2, [r7, #12]
 8013fce:	1ad3      	subs	r3, r2, r3
 8013fd0:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	895b      	ldrh	r3, [r3, #10]
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	4293      	cmp	r3, r2
 8013fdc:	d30a      	bcc.n	8013ff4 <_processingPeriodUs+0x3c>
		p_owner->__pretime = current - (gap - p_owner->_period);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	895b      	ldrh	r3, [r3, #10]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	1ad2      	subs	r2, r2, r3
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	441a      	add	r2, r3
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	e000      	b.n	8013ff6 <_processingPeriodUs+0x3e>
	}
	return NULL;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3710      	adds	r7, #16
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	20001d6c 	.word	0x20001d6c

08014004 <_processingPeriodMs>:

static PifTask* _processingPeriodMs(PifTask* p_owner)
{
 8014004:	b480      	push	{r7}
 8014006:	b085      	sub	sp, #20
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
	uint32_t current, gap;

	current = pif_cumulative_timer1ms;
 801400c:	4b0c      	ldr	r3, [pc, #48]	; (8014040 <_processingPeriodMs+0x3c>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	60fb      	str	r3, [r7, #12]
	gap = current - p_owner->__pretime;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	1ad3      	subs	r3, r2, r3
 801401a:	60bb      	str	r3, [r7, #8]
	if (gap >= p_owner->_period) {
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	895b      	ldrh	r3, [r3, #10]
 8014020:	461a      	mov	r2, r3
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	4293      	cmp	r3, r2
 8014026:	d304      	bcc.n	8014032 <_processingPeriodMs+0x2e>
		p_owner->__pretime = current;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	68fa      	ldr	r2, [r7, #12]
 801402c:	641a      	str	r2, [r3, #64]	; 0x40
		return p_owner;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	e000      	b.n	8014034 <_processingPeriodMs+0x30>
	}
	return NULL;
 8014032:	2300      	movs	r3, #0
}
 8014034:	4618      	mov	r0, r3
 8014036:	3714      	adds	r7, #20
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr
 8014040:	20001d60 	.word	0x20001d60

08014044 <_processingRatio>:

static PifTask* _processingRatio(PifTask* p_owner)
{
 8014044:	b480      	push	{r7}
 8014046:	b085      	sub	sp, #20
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
#ifdef __PIF_DEBUG__
	uint32_t time;
	static uint32_t pretime;
#endif

	if (p_owner->__delay_ms) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00f      	beq.n	8014074 <_processingRatio+0x30>
		gap = pif_cumulative_timer1ms - p_owner->__pretime;
 8014054:	4b13      	ldr	r3, [pc, #76]	; (80140a4 <_processingRatio+0x60>)
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	60fb      	str	r3, [r7, #12]
		if (gap >= p_owner->__delay_ms) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8014064:	461a      	mov	r2, r3
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	4293      	cmp	r3, r2
 801406a:	d313      	bcc.n	8014094 <_processingRatio+0x50>
			p_owner->__delay_ms = 0;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2200      	movs	r2, #0
 8014070:	879a      	strh	r2, [r3, #60]	; 0x3c
 8014072:	e00f      	b.n	8014094 <_processingRatio+0x50>
		}
	}
	else if (s_table[s_number] & (1 << p_owner->__table_number)) {
 8014074:	4b0c      	ldr	r3, [pc, #48]	; (80140a8 <_processingRatio+0x64>)
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	461a      	mov	r2, r3
 801407a:	4b0c      	ldr	r3, [pc, #48]	; (80140ac <_processingRatio+0x68>)
 801407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014080:	687a      	ldr	r2, [r7, #4]
 8014082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8014084:	2101      	movs	r1, #1
 8014086:	fa01 f202 	lsl.w	r2, r1, r2
 801408a:	4013      	ands	r3, r2
 801408c:	2b00      	cmp	r3, #0
 801408e:	d001      	beq.n	8014094 <_processingRatio+0x50>
			p_owner->__count = 0;
			pretime = time;
		}
		p_owner->__count++;
#endif
		return p_owner;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	e000      	b.n	8014096 <_processingRatio+0x52>
	}
	return NULL;
 8014094:	2300      	movs	r3, #0
}
 8014096:	4618      	mov	r0, r3
 8014098:	3714      	adds	r7, #20
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop
 80140a4:	20001d60 	.word	0x20001d60
 80140a8:	20001eac 	.word	0x20001eac
 80140ac:	20001e2c 	.word	0x20001e2c

080140b0 <_checkParam>:

static BOOL _checkParam(PifTaskMode* p_mode, uint16_t period)
{
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	807b      	strh	r3, [r7, #2]
	switch (*p_mode) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	2b09      	cmp	r3, #9
 80140c2:	d848      	bhi.n	8014156 <_checkParam+0xa6>
 80140c4:	a201      	add	r2, pc, #4	; (adr r2, 80140cc <_checkParam+0x1c>)
 80140c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ca:	bf00      	nop
 80140cc:	080140f5 	.word	0x080140f5
 80140d0:	08014161 	.word	0x08014161
 80140d4:	08014119 	.word	0x08014119
 80140d8:	08014129 	.word	0x08014129
 80140dc:	08014119 	.word	0x08014119
 80140e0:	08014129 	.word	0x08014129
 80140e4:	0801414b 	.word	0x0801414b
 80140e8:	08014161 	.word	0x08014161
 80140ec:	08014161 	.word	0x08014161
 80140f0:	08014119 	.word	0x08014119
    case TM_RATIO:
    	if (!period || period > 100) {
 80140f4:	887b      	ldrh	r3, [r7, #2]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d002      	beq.n	8014100 <_checkParam+0x50>
 80140fa:	887b      	ldrh	r3, [r7, #2]
 80140fc:	2b64      	cmp	r3, #100	; 0x64
 80140fe:	d904      	bls.n	801410a <_checkParam+0x5a>
    		pif_error = E_INVALID_PARAM;
 8014100:	4b1f      	ldr	r3, [pc, #124]	; (8014180 <_checkParam+0xd0>)
 8014102:	2201      	movs	r2, #1
 8014104:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014106:	2300      	movs	r3, #0
 8014108:	e034      	b.n	8014174 <_checkParam+0xc4>
    	}
    	else if (period == 100) {
 801410a:	887b      	ldrh	r3, [r7, #2]
 801410c:	2b64      	cmp	r3, #100	; 0x64
 801410e:	d129      	bne.n	8014164 <_checkParam+0xb4>
    		*p_mode = TM_ALWAYS;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2201      	movs	r2, #1
 8014114:	701a      	strb	r2, [r3, #0]
    	}
    	break;
 8014116:	e025      	b.n	8014164 <_checkParam+0xb4>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	if (!period) {
 8014118:	887b      	ldrh	r3, [r7, #2]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d124      	bne.n	8014168 <_checkParam+0xb8>
    		pif_error = E_INVALID_PARAM;
 801411e:	4b18      	ldr	r3, [pc, #96]	; (8014180 <_checkParam+0xd0>)
 8014120:	2201      	movs	r2, #1
 8014122:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014124:	2300      	movs	r3, #0
 8014126:	e025      	b.n	8014174 <_checkParam+0xc4>
    	}
    	break;

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	if (!period) {
 8014128:	887b      	ldrh	r3, [r7, #2]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d104      	bne.n	8014138 <_checkParam+0x88>
    		pif_error = E_INVALID_PARAM;
 801412e:	4b14      	ldr	r3, [pc, #80]	; (8014180 <_checkParam+0xd0>)
 8014130:	2201      	movs	r2, #1
 8014132:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014134:	2300      	movs	r3, #0
 8014136:	e01d      	b.n	8014174 <_checkParam+0xc4>
    	}

    	if (!pif_act_timer1us) {
 8014138:	4b12      	ldr	r3, [pc, #72]	; (8014184 <_checkParam+0xd4>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d115      	bne.n	801416c <_checkParam+0xbc>
    		pif_error = E_CANNOT_USE;
 8014140:	4b0f      	ldr	r3, [pc, #60]	; (8014180 <_checkParam+0xd0>)
 8014142:	2209      	movs	r2, #9
 8014144:	701a      	strb	r2, [r3, #0]
		    return FALSE;
 8014146:	2300      	movs	r3, #0
 8014148:	e014      	b.n	8014174 <_checkParam+0xc4>
        }
    	break;
    	
	case TM_EXTERNAL_CUTIN:
		if (s_task_cutin) return FALSE;
 801414a:	4b0f      	ldr	r3, [pc, #60]	; (8014188 <_checkParam+0xd8>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d00e      	beq.n	8014170 <_checkParam+0xc0>
 8014152:	2300      	movs	r3, #0
 8014154:	e00e      	b.n	8014174 <_checkParam+0xc4>
	case TM_ALWAYS:
	case TM_EXTERNAL_ORDER:
		break;

    default:
		pif_error = E_INVALID_PARAM;
 8014156:	4b0a      	ldr	r3, [pc, #40]	; (8014180 <_checkParam+0xd0>)
 8014158:	2201      	movs	r2, #1
 801415a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801415c:	2300      	movs	r3, #0
 801415e:	e009      	b.n	8014174 <_checkParam+0xc4>
		break;
 8014160:	bf00      	nop
 8014162:	e006      	b.n	8014172 <_checkParam+0xc2>
    	break;
 8014164:	bf00      	nop
 8014166:	e004      	b.n	8014172 <_checkParam+0xc2>
    	break;
 8014168:	bf00      	nop
 801416a:	e002      	b.n	8014172 <_checkParam+0xc2>
    	break;
 801416c:	bf00      	nop
 801416e:	e000      	b.n	8014172 <_checkParam+0xc2>
    	break;
 8014170:	bf00      	nop
    }
	return TRUE;
 8014172:	2301      	movs	r3, #1
}
 8014174:	4618      	mov	r0, r3
 8014176:	370c      	adds	r7, #12
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	4770      	bx	lr
 8014180:	20001d48 	.word	0x20001d48
 8014184:	20001d6c 	.word	0x20001d6c
 8014188:	20001e24 	.word	0x20001e24

0801418c <_setParam>:

static BOOL _setParam(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	460b      	mov	r3, r1
 8014196:	70fb      	strb	r3, [r7, #3]
 8014198:	4613      	mov	r3, r2
 801419a:	803b      	strh	r3, [r7, #0]
	int num = -1;
 801419c:	f04f 33ff 	mov.w	r3, #4294967295
 80141a0:	60fb      	str	r3, [r7, #12]

	if (mode == TM_RATIO) {
 80141a2:	78fb      	ldrb	r3, [r7, #3]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d10c      	bne.n	80141c2 <_setParam+0x36>
    	num = _setTable(period, &mode);
 80141a8:	1cfa      	adds	r2, r7, #3
 80141aa:	883b      	ldrh	r3, [r7, #0]
 80141ac:	4611      	mov	r1, r2
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7ff fe2c 	bl	8013e0c <_setTable>
 80141b4:	60f8      	str	r0, [r7, #12]
    	if (num == -1) return FALSE;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141bc:	d101      	bne.n	80141c2 <_setParam+0x36>
 80141be:	2300      	movs	r3, #0
 80141c0:	e050      	b.n	8014264 <_setParam+0xd8>
	}

    switch (mode) {
 80141c2:	78fb      	ldrb	r3, [r7, #3]
 80141c4:	2b09      	cmp	r3, #9
 80141c6:	d845      	bhi.n	8014254 <_setParam+0xc8>
 80141c8:	a201      	add	r2, pc, #4	; (adr r2, 80141d0 <_setParam+0x44>)
 80141ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ce:	bf00      	nop
 80141d0:	080141f9 	.word	0x080141f9
 80141d4:	08014207 	.word	0x08014207
 80141d8:	08014213 	.word	0x08014213
 80141dc:	08014223 	.word	0x08014223
 80141e0:	08014213 	.word	0x08014213
 80141e4:	08014223 	.word	0x08014223
 80141e8:	08014237 	.word	0x08014237
 80141ec:	08014249 	.word	0x08014249
 80141f0:	08014249 	.word	0x08014249
 80141f4:	08014213 	.word	0x08014213
    case TM_RATIO:
    	p_owner->__table_number = num;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	639a      	str	r2, [r3, #56]	; 0x38
    	p_owner->__processing = _processingRatio;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	4a1a      	ldr	r2, [pc, #104]	; (801426c <_setParam+0xe0>)
 8014202:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014204:	e027      	b.n	8014256 <_setParam+0xca>

    case TM_ALWAYS:
    	period = 100;
 8014206:	2364      	movs	r3, #100	; 0x64
 8014208:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = _processingAlways;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	4a18      	ldr	r2, [pc, #96]	; (8014270 <_setParam+0xe4>)
 801420e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014210:	e021      	b.n	8014256 <_setParam+0xca>

    case TM_PERIOD_MS:
    case TM_CHANGE_MS:
    case TM_IDLE_MS:
    	p_owner->__pretime = pif_cumulative_timer1ms;
 8014212:	4b18      	ldr	r3, [pc, #96]	; (8014274 <_setParam+0xe8>)
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodMs;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	4a16      	ldr	r2, [pc, #88]	; (8014278 <_setParam+0xec>)
 801421e:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014220:	e019      	b.n	8014256 <_setParam+0xca>

    case TM_PERIOD_US:
    case TM_CHANGE_US:
    	p_owner->__pretime = (*pif_act_timer1us)();
 8014222:	4b16      	ldr	r3, [pc, #88]	; (801427c <_setParam+0xf0>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4798      	blx	r3
 8014228:	4602      	mov	r2, r0
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	641a      	str	r2, [r3, #64]	; 0x40
    	p_owner->__processing = _processingPeriodUs;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4a13      	ldr	r2, [pc, #76]	; (8014280 <_setParam+0xf4>)
 8014232:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014234:	e00f      	b.n	8014256 <_setParam+0xca>

	case TM_EXTERNAL_CUTIN:
		s_task_cutin = p_owner;
 8014236:	4a13      	ldr	r2, [pc, #76]	; (8014284 <_setParam+0xf8>)
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6013      	str	r3, [r2, #0]
    	period = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2200      	movs	r2, #0
 8014244:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8014246:	e006      	b.n	8014256 <_setParam+0xca>

	case TM_TIMER:
    case TM_EXTERNAL_ORDER:
    	period = 0;
 8014248:	2300      	movs	r3, #0
 801424a:	803b      	strh	r3, [r7, #0]
    	p_owner->__processing = NULL;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2200      	movs	r2, #0
 8014250:	631a      	str	r2, [r3, #48]	; 0x30
    	break;
 8014252:	e000      	b.n	8014256 <_setParam+0xca>

    default:
    	break;
 8014254:	bf00      	nop
    }

    p_owner->_mode = mode;
 8014256:	78fa      	ldrb	r2, [r7, #3]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	721a      	strb	r2, [r3, #8]
    p_owner->_period = period;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	883a      	ldrh	r2, [r7, #0]
 8014260:	815a      	strh	r2, [r3, #10]
	return TRUE;
 8014262:	2301      	movs	r3, #1
}
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	08014045 	.word	0x08014045
 8014270:	08013f75 	.word	0x08013f75
 8014274:	20001d60 	.word	0x20001d60
 8014278:	08014005 	.word	0x08014005
 801427c:	20001d6c 	.word	0x20001d6c
 8014280:	08013fb9 	.word	0x08013fb9
 8014284:	20001e24 	.word	0x20001e24

08014288 <_processingTask>:

static BOOL _processingTask(PifTask* p_owner)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b086      	sub	sp, #24
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
	uint16_t period;
	uint32_t start_time, execute_time;

	if (s_task_stack_ptr >= PIF_TASK_STACK_SIZE) return FALSE;
 8014290:	4b3b      	ldr	r3, [pc, #236]	; (8014380 <_processingTask+0xf8>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b04      	cmp	r3, #4
 8014296:	dd01      	ble.n	801429c <_processingTask+0x14>
 8014298:	2300      	movs	r3, #0
 801429a:	e06d      	b.n	8014378 <_processingTask+0xf0>

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(TRUE);
#endif

    s_task_stack[s_task_stack_ptr] = p_owner;
 801429c:	4b38      	ldr	r3, [pc, #224]	; (8014380 <_processingTask+0xf8>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4938      	ldr	r1, [pc, #224]	; (8014384 <_processingTask+0xfc>)
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	s_task_stack_ptr++;
 80142a8:	4b35      	ldr	r3, [pc, #212]	; (8014380 <_processingTask+0xf8>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	3301      	adds	r3, #1
 80142ae:	4a34      	ldr	r2, [pc, #208]	; (8014380 <_processingTask+0xf8>)
 80142b0:	6013      	str	r3, [r2, #0]
	p_owner->_running = TRUE;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2201      	movs	r2, #1
 80142b6:	725a      	strb	r2, [r3, #9]
	if (pif_act_timer1us) {
 80142b8:	4b33      	ldr	r3, [pc, #204]	; (8014388 <_processingTask+0x100>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d024      	beq.n	801430a <_processingTask+0x82>
		start_time = (*pif_act_timer1us)();
 80142c0:	4b31      	ldr	r3, [pc, #196]	; (8014388 <_processingTask+0x100>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4798      	blx	r3
 80142c6:	6138      	str	r0, [r7, #16]
		period = (*p_owner->__evt_loop)(p_owner);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	4798      	blx	r3
 80142d0:	4603      	mov	r3, r0
 80142d2:	82fb      	strh	r3, [r7, #22]
		execute_time = (*pif_act_timer1us)() - start_time;
 80142d4:	4b2c      	ldr	r3, [pc, #176]	; (8014388 <_processingTask+0x100>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	4798      	blx	r3
 80142da:	4602      	mov	r2, r0
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	1ad3      	subs	r3, r2, r3
 80142e0:	60fb      	str	r3, [r7, #12]
		p_owner->_execution_count++;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	699b      	ldr	r3, [r3, #24]
 80142e6:	1c5a      	adds	r2, r3, #1
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	619a      	str	r2, [r3, #24]
		if (execute_time > p_owner->_max_execution_time) p_owner->_max_execution_time = execute_time;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	691b      	ldr	r3, [r3, #16]
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d902      	bls.n	80142fc <_processingTask+0x74>
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	611a      	str	r2, [r3, #16]
		p_owner->_total_execution_time += execute_time;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	695a      	ldr	r2, [r3, #20]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	441a      	add	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	615a      	str	r2, [r3, #20]
 8014308:	e005      	b.n	8014316 <_processingTask+0x8e>
	}
	else {
		period = (*p_owner->__evt_loop)(p_owner);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	4798      	blx	r3
 8014312:	4603      	mov	r3, r0
 8014314:	82fb      	strh	r3, [r7, #22]
	}
	p_owner->_running = FALSE;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	2200      	movs	r2, #0
 801431a:	725a      	strb	r2, [r3, #9]
	s_task_stack_ptr--;
 801431c:	4b18      	ldr	r3, [pc, #96]	; (8014380 <_processingTask+0xf8>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	3b01      	subs	r3, #1
 8014322:	4a17      	ldr	r2, [pc, #92]	; (8014380 <_processingTask+0xf8>)
 8014324:	6013      	str	r3, [r2, #0]
	s_task_stack[s_task_stack_ptr] = NULL;
 8014326:	4b16      	ldr	r3, [pc, #88]	; (8014380 <_processingTask+0xf8>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4a16      	ldr	r2, [pc, #88]	; (8014384 <_processingTask+0xfc>)
 801432c:	2100      	movs	r1, #0
 801432e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#ifdef __PIF_DEBUG__
    if (pif_act_task_signal) (*pif_act_task_signal)(FALSE);
#endif

	switch (p_owner->_mode) {
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	7a1b      	ldrb	r3, [r3, #8]
 8014336:	2b04      	cmp	r3, #4
 8014338:	d002      	beq.n	8014340 <_processingTask+0xb8>
 801433a:	2b05      	cmp	r3, #5
 801433c:	d00b      	beq.n	8014356 <_processingTask+0xce>
			p_owner->__pretime = (*pif_act_timer1us)();
		}
		break;

	default:
		break;
 801433e:	e01a      	b.n	8014376 <_processingTask+0xee>
		if (period > 0) {
 8014340:	8afb      	ldrh	r3, [r7, #22]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d014      	beq.n	8014370 <_processingTask+0xe8>
			p_owner->_period = period;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	8afa      	ldrh	r2, [r7, #22]
 801434a:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = pif_cumulative_timer1ms;
 801434c:	4b0f      	ldr	r3, [pc, #60]	; (801438c <_processingTask+0x104>)
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8014354:	e00c      	b.n	8014370 <_processingTask+0xe8>
		if (period > 0) {
 8014356:	8afb      	ldrh	r3, [r7, #22]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d00b      	beq.n	8014374 <_processingTask+0xec>
			p_owner->_period = period;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	8afa      	ldrh	r2, [r7, #22]
 8014360:	815a      	strh	r2, [r3, #10]
			p_owner->__pretime = (*pif_act_timer1us)();
 8014362:	4b09      	ldr	r3, [pc, #36]	; (8014388 <_processingTask+0x100>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4798      	blx	r3
 8014368:	4602      	mov	r2, r0
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 801436e:	e001      	b.n	8014374 <_processingTask+0xec>
		break;
 8014370:	bf00      	nop
 8014372:	e000      	b.n	8014376 <_processingTask+0xee>
		break;
 8014374:	bf00      	nop
	}
	return TRUE;
 8014376:	2301      	movs	r3, #1
}
 8014378:	4618      	mov	r0, r3
 801437a:	3718      	adds	r7, #24
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	20001e20 	.word	0x20001e20
 8014384:	20001e0c 	.word	0x20001e0c
 8014388:	20001d6c 	.word	0x20001d6c
 801438c:	20001d60 	.word	0x20001d60

08014390 <_checkLoopTime>:

static void _checkLoopTime()
{
 8014390:	b480      	push	{r7}
 8014392:	af00      	add	r7, sp, #0
		}
		pretime = (*pif_act_timer1us)();
	}
#endif

	pif_performance._count++;
 8014394:	4b1f      	ldr	r3, [pc, #124]	; (8014414 <_checkLoopTime+0x84>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	3301      	adds	r3, #1
 801439a:	4a1e      	ldr	r2, [pc, #120]	; (8014414 <_checkLoopTime+0x84>)
 801439c:	6013      	str	r3, [r2, #0]

	if (pif_performance.__state & 1) {		// 1ms
 801439e:	4b1d      	ldr	r3, [pc, #116]	; (8014414 <_checkLoopTime+0x84>)
 80143a0:	795b      	ldrb	r3, [r3, #5]
 80143a2:	f003 0301 	and.w	r3, r3, #1
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d022      	beq.n	80143f0 <_checkLoopTime+0x60>
		if (timer_10ms) timer_10ms--;
 80143aa:	4b1b      	ldr	r3, [pc, #108]	; (8014418 <_checkLoopTime+0x88>)
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d006      	beq.n	80143c0 <_checkLoopTime+0x30>
 80143b2:	4b19      	ldr	r3, [pc, #100]	; (8014418 <_checkLoopTime+0x88>)
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	3b01      	subs	r3, #1
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	4b17      	ldr	r3, [pc, #92]	; (8014418 <_checkLoopTime+0x88>)
 80143bc:	701a      	strb	r2, [r3, #0]
 80143be:	e017      	b.n	80143f0 <_checkLoopTime+0x60>
		else {
			timer_10ms = 9;
 80143c0:	4b15      	ldr	r3, [pc, #84]	; (8014418 <_checkLoopTime+0x88>)
 80143c2:	2209      	movs	r2, #9
 80143c4:	701a      	strb	r2, [r3, #0]

			pif_performance._use_rate = 100 - 100 * s_pass_count / s_loop_count;
 80143c6:	4b15      	ldr	r3, [pc, #84]	; (801441c <_checkLoopTime+0x8c>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	2264      	movs	r2, #100	; 0x64
 80143cc:	fb03 f202 	mul.w	r2, r3, r2
 80143d0:	4b13      	ldr	r3, [pc, #76]	; (8014420 <_checkLoopTime+0x90>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80143de:	b2da      	uxtb	r2, r3
 80143e0:	4b0c      	ldr	r3, [pc, #48]	; (8014414 <_checkLoopTime+0x84>)
 80143e2:	711a      	strb	r2, [r3, #4]
			s_loop_count = 0UL;
 80143e4:	4b0e      	ldr	r3, [pc, #56]	; (8014420 <_checkLoopTime+0x90>)
 80143e6:	2200      	movs	r2, #0
 80143e8:	601a      	str	r2, [r3, #0]
			s_pass_count = 0UL;
 80143ea:	4b0c      	ldr	r3, [pc, #48]	; (801441c <_checkLoopTime+0x8c>)
 80143ec:	2200      	movs	r2, #0
 80143ee:	601a      	str	r2, [r3, #0]
		}
	}

	if (pif_performance.__state & 2) {		// 1sec
 80143f0:	4b08      	ldr	r3, [pc, #32]	; (8014414 <_checkLoopTime+0x84>)
 80143f2:	795b      	ldrb	r3, [r3, #5]
 80143f4:	f003 0302 	and.w	r3, r3, #2
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <_checkLoopTime+0x72>
			value = 1000000L / pif_performance._count;
        	pifLog_Printf(LT_INFO, "LT:%uns(%lur/s)", value, pif_performance._count);
        }
	#endif
#endif
    	pif_performance._count = 0;
 80143fc:	4b05      	ldr	r3, [pc, #20]	; (8014414 <_checkLoopTime+0x84>)
 80143fe:	2200      	movs	r2, #0
 8014400:	601a      	str	r2, [r3, #0]
	#endif
		max_loop = 0UL;
    }
#endif

	pif_performance.__state = 0;
 8014402:	4b04      	ldr	r3, [pc, #16]	; (8014414 <_checkLoopTime+0x84>)
 8014404:	2200      	movs	r2, #0
 8014406:	715a      	strb	r2, [r3, #5]
}
 8014408:	bf00      	nop
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop
 8014414:	20001d64 	.word	0x20001d64
 8014418:	20001ebc 	.word	0x20001ebc
 801441c:	20001eb4 	.word	0x20001eb4
 8014420:	20001eb0 	.word	0x20001eb0

08014424 <pifTask_Init>:


void pifTask_Init(PifTask* p_owner)
{
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
    pif_id++;
 801442c:	4b07      	ldr	r3, [pc, #28]	; (801444c <pifTask_Init+0x28>)
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	3301      	adds	r3, #1
 8014432:	b29a      	uxth	r2, r3
 8014434:	4b05      	ldr	r3, [pc, #20]	; (801444c <pifTask_Init+0x28>)
 8014436:	801a      	strh	r2, [r3, #0]
    p_owner->_id = pif_id;
 8014438:	4b04      	ldr	r3, [pc, #16]	; (801444c <pifTask_Init+0x28>)
 801443a:	881a      	ldrh	r2, [r3, #0]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	80da      	strh	r2, [r3, #6]
}
 8014440:	bf00      	nop
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	20000128 	.word	0x20000128

08014450 <pifTask_ChangeMode>:

BOOL pifTask_ChangeMode(PifTask* p_owner, PifTaskMode mode, uint16_t period)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	460b      	mov	r3, r1
 801445a:	70fb      	strb	r3, [r7, #3]
 801445c:	4613      	mov	r3, r2
 801445e:	803b      	strh	r3, [r7, #0]
	if (mode == p_owner->_mode) return TRUE;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	7a1a      	ldrb	r2, [r3, #8]
 8014464:	78fb      	ldrb	r3, [r7, #3]
 8014466:	429a      	cmp	r2, r3
 8014468:	d101      	bne.n	801446e <pifTask_ChangeMode+0x1e>
 801446a:	2301      	movs	r3, #1
 801446c:	e028      	b.n	80144c0 <pifTask_ChangeMode+0x70>

	if (p_owner->_mode == TM_EXTERNAL_CUTIN) s_task_cutin = NULL;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	7a1b      	ldrb	r3, [r3, #8]
 8014472:	2b06      	cmp	r3, #6
 8014474:	d102      	bne.n	801447c <pifTask_ChangeMode+0x2c>
 8014476:	4b14      	ldr	r3, [pc, #80]	; (80144c8 <pifTask_ChangeMode+0x78>)
 8014478:	2200      	movs	r2, #0
 801447a:	601a      	str	r2, [r3, #0]

	if (!_checkParam(&mode, period)) return FALSE;
 801447c:	883a      	ldrh	r2, [r7, #0]
 801447e:	1cfb      	adds	r3, r7, #3
 8014480:	4611      	mov	r1, r2
 8014482:	4618      	mov	r0, r3
 8014484:	f7ff fe14 	bl	80140b0 <_checkParam>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d101      	bne.n	8014492 <pifTask_ChangeMode+0x42>
 801448e:	2300      	movs	r3, #0
 8014490:	e016      	b.n	80144c0 <pifTask_ChangeMode+0x70>

	switch (p_owner->_mode) {
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	7a1b      	ldrb	r3, [r3, #8]
 8014496:	2b01      	cmp	r3, #1
 8014498:	d805      	bhi.n	80144a6 <pifTask_ChangeMode+0x56>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_owner->__table_number);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801449e:	4618      	mov	r0, r3
 80144a0:	f7ff fd3a 	bl	8013f18 <_resetTable>
		break;
 80144a4:	e000      	b.n	80144a8 <pifTask_ChangeMode+0x58>

	default:
		break;
 80144a6:	bf00      	nop
	}

	if (!_setParam(p_owner, mode, period)) return FALSE;
 80144a8:	78fb      	ldrb	r3, [r7, #3]
 80144aa:	883a      	ldrh	r2, [r7, #0]
 80144ac:	4619      	mov	r1, r3
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7ff fe6c 	bl	801418c <_setParam>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d101      	bne.n	80144be <pifTask_ChangeMode+0x6e>
 80144ba:	2300      	movs	r3, #0
 80144bc:	e000      	b.n	80144c0 <pifTask_ChangeMode+0x70>

    return TRUE;
 80144be:	2301      	movs	r3, #1
}
 80144c0:	4618      	mov	r0, r3
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	20001e24 	.word	0x20001e24

080144cc <pifTask_ChangePeriod>:

BOOL pifTask_ChangePeriod(PifTask* p_owner, uint16_t period)
{
 80144cc:	b480      	push	{r7}
 80144ce:	b083      	sub	sp, #12
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	460b      	mov	r3, r1
 80144d6:	807b      	strh	r3, [r7, #2]
	switch (p_owner->_mode) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	7a1b      	ldrb	r3, [r3, #8]
 80144dc:	2b03      	cmp	r3, #3
 80144de:	dc02      	bgt.n	80144e6 <pifTask_ChangePeriod+0x1a>
 80144e0:	2b02      	cmp	r3, #2
 80144e2:	da02      	bge.n	80144ea <pifTask_ChangePeriod+0x1e>
 80144e4:	e007      	b.n	80144f6 <pifTask_ChangePeriod+0x2a>
 80144e6:	2b09      	cmp	r3, #9
 80144e8:	d105      	bne.n	80144f6 <pifTask_ChangePeriod+0x2a>
	case TM_PERIOD_MS:
	case TM_PERIOD_US:
	case TM_IDLE_MS:
		p_owner->_period = period;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	887a      	ldrh	r2, [r7, #2]
 80144ee:	815a      	strh	r2, [r3, #10]
		break;
 80144f0:	bf00      	nop

	default:
		pif_error = E_CANNOT_USE;
		return FALSE;
	}
	return TRUE;
 80144f2:	2301      	movs	r3, #1
 80144f4:	e003      	b.n	80144fe <pifTask_ChangePeriod+0x32>
		pif_error = E_CANNOT_USE;
 80144f6:	4b05      	ldr	r3, [pc, #20]	; (801450c <pifTask_ChangePeriod+0x40>)
 80144f8:	2209      	movs	r2, #9
 80144fa:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80144fc:	2300      	movs	r3, #0
}
 80144fe:	4618      	mov	r0, r3
 8014500:	370c      	adds	r7, #12
 8014502:	46bd      	mov	sp, r7
 8014504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20001d48 	.word	0x20001d48

08014510 <pifTask_SetTrigger>:

BOOL pifTask_SetTrigger(PifTask* p_owner)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
	if (p_owner) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d014      	beq.n	8014548 <pifTask_SetTrigger+0x38>
		if (pif_act_timer1us) p_owner->__trigger_time = (*pif_act_timer1us)();
 801451e:	4b0d      	ldr	r3, [pc, #52]	; (8014554 <pifTask_SetTrigger+0x44>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d006      	beq.n	8014534 <pifTask_SetTrigger+0x24>
 8014526:	4b0b      	ldr	r3, [pc, #44]	; (8014554 <pifTask_SetTrigger+0x44>)
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	4798      	blx	r3
 801452c:	4602      	mov	r2, r0
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	649a      	str	r2, [r3, #72]	; 0x48
 8014532:	e003      	b.n	801453c <pifTask_SetTrigger+0x2c>
		else p_owner->__trigger_time = pif_cumulative_timer1ms;
 8014534:	4b08      	ldr	r3, [pc, #32]	; (8014558 <pifTask_SetTrigger+0x48>)
 8014536:	681a      	ldr	r2, [r3, #0]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	649a      	str	r2, [r3, #72]	; 0x48
		p_owner->__trigger = TRUE;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2201      	movs	r2, #1
 8014540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		return TRUE;
 8014544:	2301      	movs	r3, #1
 8014546:	e000      	b.n	801454a <pifTask_SetTrigger+0x3a>
	}
	return FALSE;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	20001d6c 	.word	0x20001d6c
 8014558:	20001d60 	.word	0x20001d60

0801455c <pifTask_GetDeltaTime>:
		break;
	}
}

uint32_t pifTask_GetDeltaTime(PifTask* p_owner, BOOL reset)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	460b      	mov	r3, r1
 8014566:	70fb      	strb	r3, [r7, #3]
	uint32_t currect, delta;

    if (!pif_act_timer1us) {
 8014568:	4b17      	ldr	r3, [pc, #92]	; (80145c8 <pifTask_GetDeltaTime+0x6c>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d107      	bne.n	8014580 <pifTask_GetDeltaTime+0x24>
		currect = pif_cumulative_timer1ms * 1000;
 8014570:	4b16      	ldr	r3, [pc, #88]	; (80145cc <pifTask_GetDeltaTime+0x70>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014578:	fb02 f303 	mul.w	r3, r2, r3
 801457c:	60fb      	str	r3, [r7, #12]
 801457e:	e003      	b.n	8014588 <pifTask_GetDeltaTime+0x2c>
	}
	else {
		currect = (*pif_act_timer1us)();
 8014580:	4b11      	ldr	r3, [pc, #68]	; (80145c8 <pifTask_GetDeltaTime+0x6c>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4798      	blx	r3
 8014586:	60f8      	str	r0, [r7, #12]
	}
	delta = currect - p_owner->__last_execute_time;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801458c:	68fa      	ldr	r2, [r7, #12]
 801458e:	1ad3      	subs	r3, r2, r3
 8014590:	60bb      	str	r3, [r7, #8]
	if (reset) {
 8014592:	78fb      	ldrb	r3, [r7, #3]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d011      	beq.n	80145bc <pifTask_GetDeltaTime+0x60>
		if (p_owner->__last_execute_time) {
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801459c:	2b00      	cmp	r3, #0
 801459e:	d00a      	beq.n	80145b6 <pifTask_GetDeltaTime+0x5a>
			p_owner->_total_period_time += delta;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	69da      	ldr	r2, [r3, #28]
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	441a      	add	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	61da      	str	r2, [r3, #28]
			p_owner->_period_count++;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6a1b      	ldr	r3, [r3, #32]
 80145b0:	1c5a      	adds	r2, r3, #1
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	621a      	str	r2, [r3, #32]
		}
		p_owner->__last_execute_time = currect;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	68fa      	ldr	r2, [r7, #12]
 80145ba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return delta;
 80145bc:	68bb      	ldr	r3, [r7, #8]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3710      	adds	r7, #16
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	20001d6c 	.word	0x20001d6c
 80145cc:	20001d60 	.word	0x20001d60

080145d0 <pifTaskManager_Init>:


BOOL pifTaskManager_Init(int max_count)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
	if (!pifFixList_Init(&s_tasks, sizeof(PifTask), max_count)) return FALSE;
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	2150      	movs	r1, #80	; 0x50
 80145dc:	480b      	ldr	r0, [pc, #44]	; (801460c <pifTaskManager_Init+0x3c>)
 80145de:	f7fe f899 	bl	8012714 <pifFixList_Init>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d101      	bne.n	80145ec <pifTaskManager_Init+0x1c>
 80145e8:	2300      	movs	r3, #0
 80145ea:	e00b      	b.n	8014604 <pifTaskManager_Init+0x34>
	s_it_current = NULL;
 80145ec:	4b08      	ldr	r3, [pc, #32]	; (8014610 <pifTaskManager_Init+0x40>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	601a      	str	r2, [r3, #0]

	s_table_number = 0L;
 80145f2:	4b08      	ldr	r3, [pc, #32]	; (8014614 <pifTaskManager_Init+0x44>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	601a      	str	r2, [r3, #0]
	memset(s_table, 0, sizeof(s_table));
 80145f8:	2280      	movs	r2, #128	; 0x80
 80145fa:	2100      	movs	r1, #0
 80145fc:	4806      	ldr	r0, [pc, #24]	; (8014618 <pifTaskManager_Init+0x48>)
 80145fe:	f00e fdf3 	bl	80231e8 <memset>
	return TRUE;
 8014602:	2301      	movs	r3, #1
}
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}
 801460c:	20001df0 	.word	0x20001df0
 8014610:	20001e08 	.word	0x20001e08
 8014614:	20001e28 	.word	0x20001e28
 8014618:	20001e2c 	.word	0x20001e2c

0801461c <pifTaskManager_Add>:
{
	pifFixList_Clear(&s_tasks, NULL);
}

PifTask* pifTaskManager_Add(PifTaskMode mode, uint16_t period, PifEvtTaskLoop evt_loop, void* p_client, BOOL start)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b086      	sub	sp, #24
 8014620:	af00      	add	r7, sp, #0
 8014622:	60ba      	str	r2, [r7, #8]
 8014624:	607b      	str	r3, [r7, #4]
 8014626:	4603      	mov	r3, r0
 8014628:	73fb      	strb	r3, [r7, #15]
 801462a:	460b      	mov	r3, r1
 801462c:	81bb      	strh	r3, [r7, #12]
	if (!evt_loop) {
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d104      	bne.n	801463e <pifTaskManager_Add+0x22>
        pif_error = E_INVALID_PARAM;
 8014634:	4b2a      	ldr	r3, [pc, #168]	; (80146e0 <pifTaskManager_Add+0xc4>)
 8014636:	2201      	movs	r2, #1
 8014638:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801463a:	2300      	movs	r3, #0
 801463c:	e04b      	b.n	80146d6 <pifTaskManager_Add+0xba>
	}

	if (!_checkParam(&mode, period)) return NULL;
 801463e:	89ba      	ldrh	r2, [r7, #12]
 8014640:	f107 030f 	add.w	r3, r7, #15
 8014644:	4611      	mov	r1, r2
 8014646:	4618      	mov	r0, r3
 8014648:	f7ff fd32 	bl	80140b0 <_checkParam>
 801464c:	4603      	mov	r3, r0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d101      	bne.n	8014656 <pifTaskManager_Add+0x3a>
 8014652:	2300      	movs	r3, #0
 8014654:	e03f      	b.n	80146d6 <pifTaskManager_Add+0xba>

	PifTask* p_owner = (PifTask*)pifFixList_AddFirst(&s_tasks);
 8014656:	4823      	ldr	r0, [pc, #140]	; (80146e4 <pifTaskManager_Add+0xc8>)
 8014658:	f7fe f8ef 	bl	801283a <pifFixList_AddFirst>
 801465c:	6178      	str	r0, [r7, #20]
	if (!p_owner) return NULL;
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d101      	bne.n	8014668 <pifTaskManager_Add+0x4c>
 8014664:	2300      	movs	r3, #0
 8014666:	e036      	b.n	80146d6 <pifTaskManager_Add+0xba>

	pifTask_Init(p_owner);
 8014668:	6978      	ldr	r0, [r7, #20]
 801466a:	f7ff fedb 	bl	8014424 <pifTask_Init>

	if (!_setParam(p_owner, mode, period)) goto fail;
 801466e:	7bfb      	ldrb	r3, [r7, #15]
 8014670:	89ba      	ldrh	r2, [r7, #12]
 8014672:	4619      	mov	r1, r3
 8014674:	6978      	ldr	r0, [r7, #20]
 8014676:	f7ff fd89 	bl	801418c <_setParam>
 801467a:	4603      	mov	r3, r0
 801467c:	2b00      	cmp	r3, #0
 801467e:	d021      	beq.n	80146c4 <pifTaskManager_Add+0xa8>

    p_owner->__evt_loop = evt_loop;
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	68ba      	ldr	r2, [r7, #8]
 8014684:	64da      	str	r2, [r3, #76]	; 0x4c
    p_owner->_p_client = p_client;
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	60da      	str	r2, [r3, #12]
    p_owner->pause = (mode != TM_EXTERNAL_ORDER && mode != TM_EXTERNAL_CUTIN) ? !start : TRUE;
 801468c:	7bfb      	ldrb	r3, [r7, #15]
 801468e:	2b07      	cmp	r3, #7
 8014690:	d006      	beq.n	80146a0 <pifTaskManager_Add+0x84>
 8014692:	7bfb      	ldrb	r3, [r7, #15]
 8014694:	2b06      	cmp	r3, #6
 8014696:	d003      	beq.n	80146a0 <pifTaskManager_Add+0x84>
 8014698:	f897 3020 	ldrb.w	r3, [r7, #32]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <pifTaskManager_Add+0x88>
 80146a0:	2301      	movs	r3, #1
 80146a2:	e000      	b.n	80146a6 <pifTaskManager_Add+0x8a>
 80146a4:	2300      	movs	r3, #0
 80146a6:	b2da      	uxtb	r2, r3
 80146a8:	697b      	ldr	r3, [r7, #20]
 80146aa:	711a      	strb	r2, [r3, #4]
    if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 80146ac:	4b0e      	ldr	r3, [pc, #56]	; (80146e8 <pifTaskManager_Add+0xcc>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d105      	bne.n	80146c0 <pifTaskManager_Add+0xa4>
 80146b4:	480b      	ldr	r0, [pc, #44]	; (80146e4 <pifTaskManager_Add+0xc8>)
 80146b6:	f7fe f934 	bl	8012922 <pifFixList_Begin>
 80146ba:	4603      	mov	r3, r0
 80146bc:	4a0a      	ldr	r2, [pc, #40]	; (80146e8 <pifTaskManager_Add+0xcc>)
 80146be:	6013      	str	r3, [r2, #0]
    return p_owner;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	e008      	b.n	80146d6 <pifTaskManager_Add+0xba>
	if (!_setParam(p_owner, mode, period)) goto fail;
 80146c4:	bf00      	nop

fail:
	if (p_owner) {
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d003      	beq.n	80146d4 <pifTaskManager_Add+0xb8>
		pifFixList_Remove(&s_tasks, p_owner);
 80146cc:	6979      	ldr	r1, [r7, #20]
 80146ce:	4805      	ldr	r0, [pc, #20]	; (80146e4 <pifTaskManager_Add+0xc8>)
 80146d0:	f7fe f8e7 	bl	80128a2 <pifFixList_Remove>
	}
	return NULL;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3718      	adds	r7, #24
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	20001d48 	.word	0x20001d48
 80146e4:	20001df0 	.word	0x20001df0
 80146e8:	20001e08 	.word	0x20001e08

080146ec <pifTaskManager_Remove>:

void pifTaskManager_Remove(PifTask* p_task)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	b082      	sub	sp, #8
 80146f0:	af00      	add	r7, sp, #0
 80146f2:	6078      	str	r0, [r7, #4]
	if (p_task == (PifTask*)s_it_current->data) s_it_current = NULL;
 80146f4:	4b17      	ldr	r3, [pc, #92]	; (8014754 <pifTaskManager_Remove+0x68>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	3308      	adds	r3, #8
 80146fa:	687a      	ldr	r2, [r7, #4]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d102      	bne.n	8014706 <pifTaskManager_Remove+0x1a>
 8014700:	4b14      	ldr	r3, [pc, #80]	; (8014754 <pifTaskManager_Remove+0x68>)
 8014702:	2200      	movs	r2, #0
 8014704:	601a      	str	r2, [r3, #0]

	switch (p_task->_mode) {
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	7a1b      	ldrb	r3, [r3, #8]
 801470a:	2b01      	cmp	r3, #1
 801470c:	d805      	bhi.n	801471a <pifTaskManager_Remove+0x2e>
	case TM_RATIO:
	case TM_ALWAYS:
		_resetTable(p_task->__table_number);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014712:	4618      	mov	r0, r3
 8014714:	f7ff fc00 	bl	8013f18 <_resetTable>
		break;
 8014718:	e000      	b.n	801471c <pifTaskManager_Remove+0x30>

	default:
		break;
 801471a:	bf00      	nop
	}
	pifFixList_Remove(&s_tasks, p_task);
 801471c:	6879      	ldr	r1, [r7, #4]
 801471e:	480e      	ldr	r0, [pc, #56]	; (8014758 <pifTaskManager_Remove+0x6c>)
 8014720:	f7fe f8bf 	bl	80128a2 <pifFixList_Remove>

	if (!pifFixList_Count(&s_tasks)) s_it_current = NULL;
 8014724:	480c      	ldr	r0, [pc, #48]	; (8014758 <pifTaskManager_Remove+0x6c>)
 8014726:	f7fe f8f0 	bl	801290a <pifFixList_Count>
 801472a:	4603      	mov	r3, r0
 801472c:	2b00      	cmp	r3, #0
 801472e:	d103      	bne.n	8014738 <pifTaskManager_Remove+0x4c>
 8014730:	4b08      	ldr	r3, [pc, #32]	; (8014754 <pifTaskManager_Remove+0x68>)
 8014732:	2200      	movs	r2, #0
 8014734:	601a      	str	r2, [r3, #0]
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
}
 8014736:	e009      	b.n	801474c <pifTaskManager_Remove+0x60>
	else if (!s_it_current) s_it_current = pifFixList_Begin(&s_tasks);
 8014738:	4b06      	ldr	r3, [pc, #24]	; (8014754 <pifTaskManager_Remove+0x68>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d105      	bne.n	801474c <pifTaskManager_Remove+0x60>
 8014740:	4805      	ldr	r0, [pc, #20]	; (8014758 <pifTaskManager_Remove+0x6c>)
 8014742:	f7fe f8ee 	bl	8012922 <pifFixList_Begin>
 8014746:	4603      	mov	r3, r0
 8014748:	4a02      	ldr	r2, [pc, #8]	; (8014754 <pifTaskManager_Remove+0x68>)
 801474a:	6013      	str	r3, [r2, #0]
}
 801474c:	bf00      	nop
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	20001e08 	.word	0x20001e08
 8014758:	20001df0 	.word	0x20001df0

0801475c <pifTaskManager_Loop>:
{
	return pifFixList_Count(&s_tasks);
}

void pifTaskManager_Loop()
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b08a      	sub	sp, #40	; 0x28
 8014760:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014762:	2300      	movs	r3, #0
 8014764:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014766:	2300      	movs	r3, #0
 8014768:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 801476a:	2300      	movs	r3, #0
 801476c:	61fb      	str	r3, [r7, #28]
	int i, n, t = 0, count = pifFixList_Count(&s_tasks);
 801476e:	2300      	movs	r3, #0
 8014770:	613b      	str	r3, [r7, #16]
 8014772:	487e      	ldr	r0, [pc, #504]	; (801496c <pifTaskManager_Loop+0x210>)
 8014774:	f7fe f8c9 	bl	801290a <pifFixList_Count>
 8014778:	60b8      	str	r0, [r7, #8]
	BOOL trigger = FALSE;
 801477a:	2300      	movs	r3, #0
 801477c:	73fb      	strb	r3, [r7, #15]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 801477e:	4b7c      	ldr	r3, [pc, #496]	; (8014970 <pifTaskManager_Loop+0x214>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d005      	beq.n	8014792 <pifTaskManager_Loop+0x36>
 8014786:	4b7a      	ldr	r3, [pc, #488]	; (8014970 <pifTaskManager_Loop+0x214>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	4798      	blx	r3
 801478c:	4603      	mov	r3, r0
 801478e:	4a79      	ldr	r2, [pc, #484]	; (8014974 <pifTaskManager_Loop+0x218>)
 8014790:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 8014792:	4b79      	ldr	r3, [pc, #484]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d109      	bne.n	80147ae <pifTaskManager_Loop+0x52>
		if (!count) return;
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	2b00      	cmp	r3, #0
 801479e:	f000 80e1 	beq.w	8014964 <pifTaskManager_Loop+0x208>
		s_it_current = pifFixList_Begin(&s_tasks);
 80147a2:	4872      	ldr	r0, [pc, #456]	; (801496c <pifTaskManager_Loop+0x210>)
 80147a4:	f7fe f8bd 	bl	8012922 <pifFixList_Begin>
 80147a8:	4603      	mov	r3, r0
 80147aa:	4a73      	ldr	r2, [pc, #460]	; (8014978 <pifTaskManager_Loop+0x21c>)
 80147ac:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80147ae:	4b73      	ldr	r3, [pc, #460]	; (801497c <pifTaskManager_Loop+0x220>)
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	4413      	add	r3, r2
 80147b6:	4a71      	ldr	r2, [pc, #452]	; (801497c <pifTaskManager_Loop+0x220>)
 80147b8:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger) {
 80147ba:	4b71      	ldr	r3, [pc, #452]	; (8014980 <pifTaskManager_Loop+0x224>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d012      	beq.n	80147e8 <pifTaskManager_Loop+0x8c>
 80147c2:	4b6f      	ldr	r3, [pc, #444]	; (8014980 <pifTaskManager_Loop+0x224>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d00c      	beq.n	80147e8 <pifTaskManager_Loop+0x8c>
		s_task_cutin->__trigger = FALSE;
 80147ce:	4b6c      	ldr	r3, [pc, #432]	; (8014980 <pifTaskManager_Loop+0x224>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 80147d8:	4b69      	ldr	r3, [pc, #420]	; (8014980 <pifTaskManager_Loop+0x224>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 80147de:	2301      	movs	r3, #1
 80147e0:	73fb      	strb	r3, [r7, #15]
		i = 1;
 80147e2:	2301      	movs	r3, #1
 80147e4:	61bb      	str	r3, [r7, #24]
 80147e6:	e062      	b.n	80148ae <pifTaskManager_Loop+0x152>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 80147e8:	2300      	movs	r3, #0
 80147ea:	617b      	str	r3, [r7, #20]
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	61bb      	str	r3, [r7, #24]
 80147f0:	e056      	b.n	80148a0 <pifTaskManager_Loop+0x144>
			p_owner = (PifTask*)s_it_current->data;
 80147f2:	4b61      	ldr	r3, [pc, #388]	; (8014978 <pifTaskManager_Loop+0x21c>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	3308      	adds	r3, #8
 80147f8:	607b      	str	r3, [r7, #4]

			if (p_owner->__trigger) {
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014800:	2b00      	cmp	r3, #0
 8014802:	d008      	beq.n	8014816 <pifTaskManager_Loop+0xba>
				p_owner->__trigger = FALSE;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2200      	movs	r2, #0
 8014808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014810:	2301      	movs	r3, #1
 8014812:	73fb      	strb	r3, [r7, #15]
 8014814:	e02d      	b.n	8014872 <pifTaskManager_Loop+0x116>
			}
			else if (!p_owner->pause) {
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	791b      	ldrb	r3, [r3, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d129      	bne.n	8014872 <pifTaskManager_Loop+0x116>
				if (p_owner->_mode == TM_TIMER) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	7a1b      	ldrb	r3, [r3, #8]
 8014822:	2b08      	cmp	r3, #8
 8014824:	d107      	bne.n	8014836 <pifTaskManager_Loop+0xda>
					(*p_owner->__evt_loop)(p_owner);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	4798      	blx	r3
					t++;
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	3301      	adds	r3, #1
 8014832:	613b      	str	r3, [r7, #16]
 8014834:	e01d      	b.n	8014872 <pifTaskManager_Loop+0x116>
				}
				else if (p_owner->__processing) {
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801483a:	2b00      	cmp	r3, #0
 801483c:	d019      	beq.n	8014872 <pifTaskManager_Loop+0x116>
					if (p_owner->_mode == TM_IDLE_MS) {
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	7a1b      	ldrb	r3, [r3, #8]
 8014842:	2b09      	cmp	r3, #9
 8014844:	d110      	bne.n	8014868 <pifTaskManager_Loop+0x10c>
						if (!p_idle) {
 8014846:	6a3b      	ldr	r3, [r7, #32]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d112      	bne.n	8014872 <pifTaskManager_Loop+0x116>
							p_idle = (*p_owner->__processing)(p_owner);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	4798      	blx	r3
 8014854:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014856:	6a3b      	ldr	r3, [r7, #32]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d00a      	beq.n	8014872 <pifTaskManager_Loop+0x116>
								it_idle = s_it_current;
 801485c:	4b46      	ldr	r3, [pc, #280]	; (8014978 <pifTaskManager_Loop+0x21c>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	61fb      	str	r3, [r7, #28]
								n = i;
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	617b      	str	r3, [r7, #20]
 8014866:	e004      	b.n	8014872 <pifTaskManager_Loop+0x116>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	4798      	blx	r3
 8014870:	6278      	str	r0, [r7, #36]	; 0x24
					}
				}
			}

			s_it_current = pifFixList_Next(s_it_current);
 8014872:	4b41      	ldr	r3, [pc, #260]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	4618      	mov	r0, r3
 8014878:	f7fe f85f 	bl	801293a <pifFixList_Next>
 801487c:	4603      	mov	r3, r0
 801487e:	4a3e      	ldr	r2, [pc, #248]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014880:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8014882:	4b3d      	ldr	r3, [pc, #244]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d107      	bne.n	801489a <pifTaskManager_Loop+0x13e>
				s_it_current = pifFixList_Begin(&s_tasks);
 801488a:	4838      	ldr	r0, [pc, #224]	; (801496c <pifTaskManager_Loop+0x210>)
 801488c:	f7fe f849 	bl	8012922 <pifFixList_Begin>
 8014890:	4603      	mov	r3, r0
 8014892:	4a39      	ldr	r2, [pc, #228]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014894:	6013      	str	r3, [r2, #0]
				_checkLoopTime();
 8014896:	f7ff fd7b 	bl	8014390 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	3301      	adds	r3, #1
 801489e:	61bb      	str	r3, [r7, #24]
 80148a0:	69ba      	ldr	r2, [r7, #24]
 80148a2:	68bb      	ldr	r3, [r7, #8]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	da02      	bge.n	80148ae <pifTaskManager_Loop+0x152>
 80148a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d0a1      	beq.n	80147f2 <pifTaskManager_Loop+0x96>
			}
		}
	}

	if (p_select) {
 80148ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d034      	beq.n	801491e <pifTaskManager_Loop+0x1c2>
		if (trigger) {
 80148b4:	7bfb      	ldrb	r3, [r7, #15]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d02d      	beq.n	8014916 <pifTaskManager_Loop+0x1ba>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 80148ba:	4b2d      	ldr	r3, [pc, #180]	; (8014970 <pifTaskManager_Loop+0x214>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d00c      	beq.n	80148dc <pifTaskManager_Loop+0x180>
 80148c2:	4b2b      	ldr	r3, [pc, #172]	; (8014970 <pifTaskManager_Loop+0x214>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4798      	blx	r3
 80148c8:	4603      	mov	r3, r0
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148d0:	b29b      	uxth	r3, r3
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	b29a      	uxth	r2, r3
 80148d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80148da:	e009      	b.n	80148f0 <pifTaskManager_Loop+0x194>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 80148dc:	4b29      	ldr	r3, [pc, #164]	; (8014984 <pifTaskManager_Loop+0x228>)
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	1ad3      	subs	r3, r2, r3
 80148ea:	b29a      	uxth	r2, r3
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 80148f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80148f4:	461a      	mov	r2, r3
 80148f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d904      	bls.n	8014908 <pifTaskManager_Loop+0x1ac>
 80148fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014902:	461a      	mov	r2, r3
 8014904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014906:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801490e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014910:	441a      	add	r2, r3
 8014912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014914:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    _processingTask(p_select);
 8014916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014918:	f7ff fcb6 	bl	8014288 <_processingTask>
 801491c:	e018      	b.n	8014950 <pifTaskManager_Loop+0x1f4>
	}
	else if (p_idle) {
 801491e:	6a3b      	ldr	r3, [r7, #32]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d015      	beq.n	8014950 <pifTaskManager_Loop+0x1f4>
		i = n;
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014928:	69f8      	ldr	r0, [r7, #28]
 801492a:	f7fe f806 	bl	801293a <pifFixList_Next>
 801492e:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d106      	bne.n	8014944 <pifTaskManager_Loop+0x1e8>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014936:	480d      	ldr	r0, [pc, #52]	; (801496c <pifTaskManager_Loop+0x210>)
 8014938:	f7fd fff3 	bl	8012922 <pifFixList_Begin>
 801493c:	4603      	mov	r3, r0
 801493e:	4a0e      	ldr	r2, [pc, #56]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014940:	6013      	str	r3, [r2, #0]
 8014942:	e002      	b.n	801494a <pifTaskManager_Loop+0x1ee>
		}
		else {
			s_it_current = it_idle;
 8014944:	4a0c      	ldr	r2, [pc, #48]	; (8014978 <pifTaskManager_Loop+0x21c>)
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	6013      	str	r3, [r2, #0]
		}
	    _processingTask(p_idle);
 801494a:	6a38      	ldr	r0, [r7, #32]
 801494c:	f7ff fc9c 	bl	8014288 <_processingTask>
	}
	s_pass_count += i - t;
 8014950:	69ba      	ldr	r2, [r7, #24]
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	1ad3      	subs	r3, r2, r3
 8014956:	461a      	mov	r2, r3
 8014958:	4b0b      	ldr	r3, [pc, #44]	; (8014988 <pifTaskManager_Loop+0x22c>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4413      	add	r3, r2
 801495e:	4a0a      	ldr	r2, [pc, #40]	; (8014988 <pifTaskManager_Loop+0x22c>)
 8014960:	6013      	str	r3, [r2, #0]
 8014962:	e000      	b.n	8014966 <pifTaskManager_Loop+0x20a>
		if (!count) return;
 8014964:	bf00      	nop
}
 8014966:	3728      	adds	r7, #40	; 0x28
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	20001df0 	.word	0x20001df0
 8014970:	20001d6c 	.word	0x20001d6c
 8014974:	20001d4c 	.word	0x20001d4c
 8014978:	20001e08 	.word	0x20001e08
 801497c:	20001eb0 	.word	0x20001eb0
 8014980:	20001e24 	.word	0x20001e24
 8014984:	20001d60 	.word	0x20001d60
 8014988:	20001eb4 	.word	0x20001eb4

0801498c <pifTaskManager_Yield>:

BOOL pifTaskManager_Yield()
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b08a      	sub	sp, #40	; 0x28
 8014990:	af00      	add	r7, sp, #0
	PifTask* p_owner;
	PifTask* p_select = NULL;
 8014992:	2300      	movs	r3, #0
 8014994:	627b      	str	r3, [r7, #36]	; 0x24
	PifTask* p_idle = NULL;
 8014996:	2300      	movs	r3, #0
 8014998:	623b      	str	r3, [r7, #32]
	PifFixListIterator it_idle = NULL;
 801499a:	2300      	movs	r3, #0
 801499c:	61fb      	str	r3, [r7, #28]
	int i, k, n, t = 0, count = pifFixList_Count(&s_tasks);
 801499e:	2300      	movs	r3, #0
 80149a0:	60fb      	str	r3, [r7, #12]
 80149a2:	488c      	ldr	r0, [pc, #560]	; (8014bd4 <pifTaskManager_Yield+0x248>)
 80149a4:	f7fd ffb1 	bl	801290a <pifFixList_Count>
 80149a8:	6078      	str	r0, [r7, #4]
	BOOL trigger = FALSE;
 80149aa:	2300      	movs	r3, #0
 80149ac:	72fb      	strb	r3, [r7, #11]
	BOOL rtn = TRUE;
 80149ae:	2301      	movs	r3, #1
 80149b0:	72bb      	strb	r3, [r7, #10]

	if (pif_act_timer1us) pif_timer1us = (*pif_act_timer1us)();
 80149b2:	4b89      	ldr	r3, [pc, #548]	; (8014bd8 <pifTaskManager_Yield+0x24c>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d005      	beq.n	80149c6 <pifTaskManager_Yield+0x3a>
 80149ba:	4b87      	ldr	r3, [pc, #540]	; (8014bd8 <pifTaskManager_Yield+0x24c>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	4798      	blx	r3
 80149c0:	4603      	mov	r3, r0
 80149c2:	4a86      	ldr	r2, [pc, #536]	; (8014bdc <pifTaskManager_Yield+0x250>)
 80149c4:	6013      	str	r3, [r2, #0]

	if (!s_it_current) {
 80149c6:	4b86      	ldr	r3, [pc, #536]	; (8014be0 <pifTaskManager_Yield+0x254>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d10a      	bne.n	80149e4 <pifTaskManager_Yield+0x58>
		if (!count) return FALSE;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d101      	bne.n	80149d8 <pifTaskManager_Yield+0x4c>
 80149d4:	2300      	movs	r3, #0
 80149d6:	e134      	b.n	8014c42 <pifTaskManager_Yield+0x2b6>
		s_it_current = pifFixList_Begin(&s_tasks);
 80149d8:	487e      	ldr	r0, [pc, #504]	; (8014bd4 <pifTaskManager_Yield+0x248>)
 80149da:	f7fd ffa2 	bl	8012922 <pifFixList_Begin>
 80149de:	4603      	mov	r3, r0
 80149e0:	4a7f      	ldr	r2, [pc, #508]	; (8014be0 <pifTaskManager_Yield+0x254>)
 80149e2:	6013      	str	r3, [r2, #0]
	}

	s_loop_count += count;
 80149e4:	4b7f      	ldr	r3, [pc, #508]	; (8014be4 <pifTaskManager_Yield+0x258>)
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	4413      	add	r3, r2
 80149ec:	4a7d      	ldr	r2, [pc, #500]	; (8014be4 <pifTaskManager_Yield+0x258>)
 80149ee:	6013      	str	r3, [r2, #0]
	if (s_task_cutin && s_task_cutin->__trigger && !s_task_cutin->_running) {
 80149f0:	4b7d      	ldr	r3, [pc, #500]	; (8014be8 <pifTaskManager_Yield+0x25c>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d017      	beq.n	8014a28 <pifTaskManager_Yield+0x9c>
 80149f8:	4b7b      	ldr	r3, [pc, #492]	; (8014be8 <pifTaskManager_Yield+0x25c>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d011      	beq.n	8014a28 <pifTaskManager_Yield+0x9c>
 8014a04:	4b78      	ldr	r3, [pc, #480]	; (8014be8 <pifTaskManager_Yield+0x25c>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	7a5b      	ldrb	r3, [r3, #9]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d10c      	bne.n	8014a28 <pifTaskManager_Yield+0x9c>
		s_task_cutin->__trigger = FALSE;
 8014a0e:	4b76      	ldr	r3, [pc, #472]	; (8014be8 <pifTaskManager_Yield+0x25c>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	2200      	movs	r2, #0
 8014a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		p_select = s_task_cutin;
 8014a18:	4b73      	ldr	r3, [pc, #460]	; (8014be8 <pifTaskManager_Yield+0x25c>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	627b      	str	r3, [r7, #36]	; 0x24
		trigger = TRUE;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	72fb      	strb	r3, [r7, #11]
		i = 1;
 8014a22:	2301      	movs	r3, #1
 8014a24:	61bb      	str	r3, [r7, #24]
 8014a26:	e097      	b.n	8014b58 <pifTaskManager_Yield+0x1cc>
	}
	else {
		for (i = n = 0; i < count && !p_select; i++) {
 8014a28:	2300      	movs	r3, #0
 8014a2a:	613b      	str	r3, [r7, #16]
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	61bb      	str	r3, [r7, #24]
 8014a30:	e08a      	b.n	8014b48 <pifTaskManager_Yield+0x1bc>
			p_owner = (PifTask*)s_it_current->data;
 8014a32:	4b6b      	ldr	r3, [pc, #428]	; (8014be0 <pifTaskManager_Yield+0x254>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	3308      	adds	r3, #8
 8014a38:	603b      	str	r3, [r7, #0]

			if (p_owner->_running) goto next;
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	7a5b      	ldrb	r3, [r3, #9]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d162      	bne.n	8014b08 <pifTaskManager_Yield+0x17c>
			if (s_task_stack_ptr) {
 8014a42:	4b6a      	ldr	r3, [pc, #424]	; (8014bec <pifTaskManager_Yield+0x260>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d021      	beq.n	8014a8e <pifTaskManager_Yield+0x102>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	617b      	str	r3, [r7, #20]
 8014a4e:	e012      	b.n	8014a76 <pifTaskManager_Yield+0xea>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014a50:	4a67      	ldr	r2, [pc, #412]	; (8014bf0 <pifTaskManager_Yield+0x264>)
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a58:	795b      	ldrb	r3, [r3, #5]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d008      	beq.n	8014a70 <pifTaskManager_Yield+0xe4>
 8014a5e:	4a64      	ldr	r2, [pc, #400]	; (8014bf0 <pifTaskManager_Yield+0x264>)
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a66:	795a      	ldrb	r2, [r3, #5]
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	795b      	ldrb	r3, [r3, #5]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d008      	beq.n	8014a82 <pifTaskManager_Yield+0xf6>
				for (k = 0; k < s_task_stack_ptr; k++) {
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	3301      	adds	r3, #1
 8014a74:	617b      	str	r3, [r7, #20]
 8014a76:	4b5d      	ldr	r3, [pc, #372]	; (8014bec <pifTaskManager_Yield+0x260>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	697a      	ldr	r2, [r7, #20]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	dbe7      	blt.n	8014a50 <pifTaskManager_Yield+0xc4>
 8014a80:	e000      	b.n	8014a84 <pifTaskManager_Yield+0xf8>
					if (s_task_stack[k]->disallow_yield_id && s_task_stack[k]->disallow_yield_id == p_owner->disallow_yield_id) break;
 8014a82:	bf00      	nop
				}
				if (k < s_task_stack_ptr) goto next;
 8014a84:	4b59      	ldr	r3, [pc, #356]	; (8014bec <pifTaskManager_Yield+0x260>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	697a      	ldr	r2, [r7, #20]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	db3e      	blt.n	8014b0c <pifTaskManager_Yield+0x180>
			}

			if (p_owner->__trigger) {
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d008      	beq.n	8014aaa <pifTaskManager_Yield+0x11e>
				p_owner->__trigger = FALSE;
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				p_select = p_owner;
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	627b      	str	r3, [r7, #36]	; 0x24
				trigger = TRUE;
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	72fb      	strb	r3, [r7, #11]
 8014aa8:	e033      	b.n	8014b12 <pifTaskManager_Yield+0x186>
			}
			else if (!p_owner->pause) {
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	791b      	ldrb	r3, [r3, #4]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d12e      	bne.n	8014b10 <pifTaskManager_Yield+0x184>
				if (p_owner->_mode == TM_TIMER) {
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	7a1b      	ldrb	r3, [r3, #8]
 8014ab6:	2b08      	cmp	r3, #8
 8014ab8:	d107      	bne.n	8014aca <pifTaskManager_Yield+0x13e>
					(*p_owner->__evt_loop)(p_owner);
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014abe:	6838      	ldr	r0, [r7, #0]
 8014ac0:	4798      	blx	r3
					t++;
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	60fb      	str	r3, [r7, #12]
 8014ac8:	e023      	b.n	8014b12 <pifTaskManager_Yield+0x186>
				}
				else if (p_owner->__processing) {
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d01e      	beq.n	8014b10 <pifTaskManager_Yield+0x184>
					if (p_owner->_mode == TM_IDLE_MS) {
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	7a1b      	ldrb	r3, [r3, #8]
 8014ad6:	2b09      	cmp	r3, #9
 8014ad8:	d110      	bne.n	8014afc <pifTaskManager_Yield+0x170>
						if (!p_idle) {
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d118      	bne.n	8014b12 <pifTaskManager_Yield+0x186>
							p_idle = (*p_owner->__processing)(p_owner);
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ae4:	6838      	ldr	r0, [r7, #0]
 8014ae6:	4798      	blx	r3
 8014ae8:	6238      	str	r0, [r7, #32]
							if (p_idle) {
 8014aea:	6a3b      	ldr	r3, [r7, #32]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d010      	beq.n	8014b12 <pifTaskManager_Yield+0x186>
								it_idle = s_it_current;
 8014af0:	4b3b      	ldr	r3, [pc, #236]	; (8014be0 <pifTaskManager_Yield+0x254>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	61fb      	str	r3, [r7, #28]
								n = i;
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	613b      	str	r3, [r7, #16]
 8014afa:	e00a      	b.n	8014b12 <pifTaskManager_Yield+0x186>
							}
						}
					}
					else {
						p_select = (*p_owner->__processing)(p_owner);
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b00:	6838      	ldr	r0, [r7, #0]
 8014b02:	4798      	blx	r3
 8014b04:	6278      	str	r0, [r7, #36]	; 0x24
 8014b06:	e004      	b.n	8014b12 <pifTaskManager_Yield+0x186>
			if (p_owner->_running) goto next;
 8014b08:	bf00      	nop
 8014b0a:	e002      	b.n	8014b12 <pifTaskManager_Yield+0x186>
				if (k < s_task_stack_ptr) goto next;
 8014b0c:	bf00      	nop
 8014b0e:	e000      	b.n	8014b12 <pifTaskManager_Yield+0x186>
					}
				}
			}

next:
 8014b10:	bf00      	nop
			s_it_current = pifFixList_Next(s_it_current);
 8014b12:	4b33      	ldr	r3, [pc, #204]	; (8014be0 <pifTaskManager_Yield+0x254>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7fd ff0f 	bl	801293a <pifFixList_Next>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	4a30      	ldr	r2, [pc, #192]	; (8014be0 <pifTaskManager_Yield+0x254>)
 8014b20:	6013      	str	r3, [r2, #0]
			if (!s_it_current) {
 8014b22:	4b2f      	ldr	r3, [pc, #188]	; (8014be0 <pifTaskManager_Yield+0x254>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d10b      	bne.n	8014b42 <pifTaskManager_Yield+0x1b6>
				s_it_current = pifFixList_Begin(&s_tasks);
 8014b2a:	482a      	ldr	r0, [pc, #168]	; (8014bd4 <pifTaskManager_Yield+0x248>)
 8014b2c:	f7fd fef9 	bl	8012922 <pifFixList_Begin>
 8014b30:	4603      	mov	r3, r0
 8014b32:	4a2b      	ldr	r2, [pc, #172]	; (8014be0 <pifTaskManager_Yield+0x254>)
 8014b34:	6013      	str	r3, [r2, #0]
				if (s_task_stack_ptr) _checkLoopTime();
 8014b36:	4b2d      	ldr	r3, [pc, #180]	; (8014bec <pifTaskManager_Yield+0x260>)
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d001      	beq.n	8014b42 <pifTaskManager_Yield+0x1b6>
 8014b3e:	f7ff fc27 	bl	8014390 <_checkLoopTime>
		for (i = n = 0; i < count && !p_select; i++) {
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	3301      	adds	r3, #1
 8014b46:	61bb      	str	r3, [r7, #24]
 8014b48:	69ba      	ldr	r2, [r7, #24]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	da03      	bge.n	8014b58 <pifTaskManager_Yield+0x1cc>
 8014b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	f43f af6d 	beq.w	8014a32 <pifTaskManager_Yield+0xa6>
			}
		}
	}

	if (p_select) {
 8014b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d04c      	beq.n	8014bf8 <pifTaskManager_Yield+0x26c>
		if (trigger && s_task_stack_ptr) {
 8014b5e:	7afb      	ldrb	r3, [r7, #11]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d031      	beq.n	8014bc8 <pifTaskManager_Yield+0x23c>
 8014b64:	4b21      	ldr	r3, [pc, #132]	; (8014bec <pifTaskManager_Yield+0x260>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d02d      	beq.n	8014bc8 <pifTaskManager_Yield+0x23c>
			if (pif_act_timer1us) p_select->_trigger_delay = (*pif_act_timer1us)() - p_select->__trigger_time;
 8014b6c:	4b1a      	ldr	r3, [pc, #104]	; (8014bd8 <pifTaskManager_Yield+0x24c>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d00c      	beq.n	8014b8e <pifTaskManager_Yield+0x202>
 8014b74:	4b18      	ldr	r3, [pc, #96]	; (8014bd8 <pifTaskManager_Yield+0x24c>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4798      	blx	r3
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	1ad3      	subs	r3, r2, r3
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014b8c:	e009      	b.n	8014ba2 <pifTaskManager_Yield+0x216>
			else p_select->_trigger_delay = pif_cumulative_timer1ms - p_select->__trigger_time;
 8014b8e:	4b19      	ldr	r3, [pc, #100]	; (8014bf4 <pifTaskManager_Yield+0x268>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (p_select->_trigger_delay > p_select->_max_trigger_delay) p_select->_max_trigger_delay = p_select->_trigger_delay;
 8014ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014ba6:	461a      	mov	r2, r3
 8014ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d904      	bls.n	8014bba <pifTaskManager_Yield+0x22e>
 8014bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb8:	625a      	str	r2, [r3, #36]	; 0x24
			p_select->_total_trigger_delay += p_select->_trigger_delay;
 8014bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bc0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8014bc2:	441a      	add	r2, r3
 8014bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc6:	629a      	str	r2, [r3, #40]	; 0x28
		}
	    rtn = _processingTask(p_select);
 8014bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bca:	f7ff fb5d 	bl	8014288 <_processingTask>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	72bb      	strb	r3, [r7, #10]
 8014bd2:	e02c      	b.n	8014c2e <pifTaskManager_Yield+0x2a2>
 8014bd4:	20001df0 	.word	0x20001df0
 8014bd8:	20001d6c 	.word	0x20001d6c
 8014bdc:	20001d4c 	.word	0x20001d4c
 8014be0:	20001e08 	.word	0x20001e08
 8014be4:	20001eb0 	.word	0x20001eb0
 8014be8:	20001e24 	.word	0x20001e24
 8014bec:	20001e20 	.word	0x20001e20
 8014bf0:	20001e0c 	.word	0x20001e0c
 8014bf4:	20001d60 	.word	0x20001d60
	}
	else if (p_idle) {
 8014bf8:	6a3b      	ldr	r3, [r7, #32]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d017      	beq.n	8014c2e <pifTaskManager_Yield+0x2a2>
		i = n;
 8014bfe:	693b      	ldr	r3, [r7, #16]
 8014c00:	61bb      	str	r3, [r7, #24]
		it_idle = pifFixList_Next(it_idle);
 8014c02:	69f8      	ldr	r0, [r7, #28]
 8014c04:	f7fd fe99 	bl	801293a <pifFixList_Next>
 8014c08:	61f8      	str	r0, [r7, #28]
		if (!it_idle) {
 8014c0a:	69fb      	ldr	r3, [r7, #28]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d106      	bne.n	8014c1e <pifTaskManager_Yield+0x292>
			s_it_current = pifFixList_Begin(&s_tasks);
 8014c10:	480e      	ldr	r0, [pc, #56]	; (8014c4c <pifTaskManager_Yield+0x2c0>)
 8014c12:	f7fd fe86 	bl	8012922 <pifFixList_Begin>
 8014c16:	4603      	mov	r3, r0
 8014c18:	4a0d      	ldr	r2, [pc, #52]	; (8014c50 <pifTaskManager_Yield+0x2c4>)
 8014c1a:	6013      	str	r3, [r2, #0]
 8014c1c:	e002      	b.n	8014c24 <pifTaskManager_Yield+0x298>
		}
		else {
			s_it_current = it_idle;
 8014c1e:	4a0c      	ldr	r2, [pc, #48]	; (8014c50 <pifTaskManager_Yield+0x2c4>)
 8014c20:	69fb      	ldr	r3, [r7, #28]
 8014c22:	6013      	str	r3, [r2, #0]
		}
	    rtn = _processingTask(p_idle);
 8014c24:	6a38      	ldr	r0, [r7, #32]
 8014c26:	f7ff fb2f 	bl	8014288 <_processingTask>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	72bb      	strb	r3, [r7, #10]
	}
	s_pass_count += i - t;
 8014c2e:	69ba      	ldr	r2, [r7, #24]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	461a      	mov	r2, r3
 8014c36:	4b07      	ldr	r3, [pc, #28]	; (8014c54 <pifTaskManager_Yield+0x2c8>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	4a05      	ldr	r2, [pc, #20]	; (8014c54 <pifTaskManager_Yield+0x2c8>)
 8014c3e:	6013      	str	r3, [r2, #0]
    return rtn;
 8014c40:	7abb      	ldrb	r3, [r7, #10]
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3728      	adds	r7, #40	; 0x28
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	20001df0 	.word	0x20001df0
 8014c50:	20001e08 	.word	0x20001e08
 8014c54:	20001eb4 	.word	0x20001eb4

08014c58 <pifTaskManager_YieldMs>:

BOOL pifTaskManager_YieldMs(uint32_t time)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
    uint32_t start;

    if (!time) return FALSE;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d101      	bne.n	8014c6a <pifTaskManager_YieldMs+0x12>
 8014c66:	2300      	movs	r3, #0
 8014c68:	e011      	b.n	8014c8e <pifTaskManager_YieldMs+0x36>

    start = pif_cumulative_timer1ms;
 8014c6a:	4b0b      	ldr	r3, [pc, #44]	; (8014c98 <pifTaskManager_YieldMs+0x40>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	60fb      	str	r3, [r7, #12]
    do {
		if (!pifTaskManager_Yield()) return FALSE;
 8014c70:	f7ff fe8c 	bl	801498c <pifTaskManager_Yield>
 8014c74:	4603      	mov	r3, r0
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d101      	bne.n	8014c7e <pifTaskManager_YieldMs+0x26>
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	e007      	b.n	8014c8e <pifTaskManager_YieldMs+0x36>
    } while (pif_cumulative_timer1ms - start <= time);
 8014c7e:	4b06      	ldr	r3, [pc, #24]	; (8014c98 <pifTaskManager_YieldMs+0x40>)
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	429a      	cmp	r2, r3
 8014c8a:	d2f1      	bcs.n	8014c70 <pifTaskManager_YieldMs+0x18>
    return TRUE;
 8014c8c:	2301      	movs	r3, #1
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3710      	adds	r7, #16
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	20001d60 	.word	0x20001d60

08014c9c <pifTaskManager_Print>:
    }
    return TRUE;
}

void pifTaskManager_Print()
{
 8014c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c9e:	b091      	sub	sp, #68	; 0x44
 8014ca0:	af04      	add	r7, sp, #16
	PifFixListIterator it;
	const char* mode[] = { "Ratio", "Always", "PeriodMs", "PeriodUs", "ChangeMs", "ChangeUs", "ExtCutin", "ExtOrder", "Timer", "IdleMs" };
 8014ca2:	4b40      	ldr	r3, [pc, #256]	; (8014da4 <pifTaskManager_Print+0x108>)
 8014ca4:	463c      	mov	r4, r7
 8014ca6:	461d      	mov	r5, r3
 8014ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014cb4:	e884 0003 	stmia.w	r4, {r0, r1}

   	pifLog_Printf(LT_NONE, "Task count: %d\n", pifFixList_Count(&s_tasks));
 8014cb8:	483b      	ldr	r0, [pc, #236]	; (8014da8 <pifTaskManager_Print+0x10c>)
 8014cba:	f7fd fe26 	bl	801290a <pifFixList_Count>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	493a      	ldr	r1, [pc, #232]	; (8014dac <pifTaskManager_Print+0x110>)
 8014cc4:	2000      	movs	r0, #0
 8014cc6:	f7fe fc55 	bl	8013574 <pifLog_Printf>
	it = pifFixList_Begin(&s_tasks);
 8014cca:	4837      	ldr	r0, [pc, #220]	; (8014da8 <pifTaskManager_Print+0x10c>)
 8014ccc:	f7fd fe29 	bl	8012922 <pifFixList_Begin>
 8014cd0:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014cd2:	e05f      	b.n	8014d94 <pifTaskManager_Print+0xf8>
		PifTask* p_owner = (PifTask*)it->data;
 8014cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd6:	3308      	adds	r3, #8
 8014cd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (p_owner->name) {
 8014cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d007      	beq.n	8014cf2 <pifTaskManager_Print+0x56>
			pifLog_Printf(LT_NONE, "  %s", p_owner->name);
 8014ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	4931      	ldr	r1, [pc, #196]	; (8014db0 <pifTaskManager_Print+0x114>)
 8014cea:	2000      	movs	r0, #0
 8014cec:	f7fe fc42 	bl	8013574 <pifLog_Printf>
 8014cf0:	e003      	b.n	8014cfa <pifTaskManager_Print+0x5e>
		}
		else {
			pifLog_Print(LT_NONE, "  ---");
 8014cf2:	4930      	ldr	r1, [pc, #192]	; (8014db4 <pifTaskManager_Print+0x118>)
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	f7fe fbaf 	bl	8013458 <pifLog_Print>
		}
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cfc:	88db      	ldrh	r3, [r3, #6]
 8014cfe:	461e      	mov	r6, r3
 8014d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d02:	7a1b      	ldrb	r3, [r3, #8]
 8014d04:	009b      	lsls	r3, r3, #2
 8014d06:	3330      	adds	r3, #48	; 0x30
 8014d08:	443b      	add	r3, r7
 8014d0a:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8014d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d10:	895b      	ldrh	r3, [r3, #10]
 8014d12:	461d      	mov	r5, r3
 8014d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d16:	691b      	ldr	r3, [r3, #16]
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d1a:	6951      	ldr	r1, [r2, #20]
 8014d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d1e:	6992      	ldr	r2, [r2, #24]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014d20:	fbb1 f2f2 	udiv	r2, r1, r2
				p_owner->_max_execution_time, p_owner->_total_execution_time / p_owner->_execution_count, p_owner->_total_execution_time / 1000);
 8014d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014d26:	6949      	ldr	r1, [r1, #20]
		pifLog_Printf(LT_NONE, " (%d): %s-%d,  proc: M=%dus, A=%dus T=%dms", p_owner->_id, mode[p_owner->_mode], p_owner->_period,
 8014d28:	4c23      	ldr	r4, [pc, #140]	; (8014db8 <pifTaskManager_Print+0x11c>)
 8014d2a:	fba4 4101 	umull	r4, r1, r4, r1
 8014d2e:	0989      	lsrs	r1, r1, #6
 8014d30:	9103      	str	r1, [sp, #12]
 8014d32:	9202      	str	r2, [sp, #8]
 8014d34:	9301      	str	r3, [sp, #4]
 8014d36:	9500      	str	r5, [sp, #0]
 8014d38:	4603      	mov	r3, r0
 8014d3a:	4632      	mov	r2, r6
 8014d3c:	491f      	ldr	r1, [pc, #124]	; (8014dbc <pifTaskManager_Print+0x120>)
 8014d3e:	2000      	movs	r0, #0
 8014d40:	f7fe fc18 	bl	8013574 <pifLog_Printf>
		if (p_owner->_total_period_time) {
 8014d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d46:	69db      	ldr	r3, [r3, #28]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d00a      	beq.n	8014d62 <pifTaskManager_Print+0xc6>
			pifLog_Printf(LT_NONE, ",  period: %dus", p_owner->_total_period_time / p_owner->_period_count);
 8014d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4e:	69da      	ldr	r2, [r3, #28]
 8014d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d52:	6a1b      	ldr	r3, [r3, #32]
 8014d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d58:	461a      	mov	r2, r3
 8014d5a:	4919      	ldr	r1, [pc, #100]	; (8014dc0 <pifTaskManager_Print+0x124>)
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	f7fe fc09 	bl	8013574 <pifLog_Printf>
		}
		if (p_owner->_total_trigger_delay) {
 8014d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00c      	beq.n	8014d84 <pifTaskManager_Print+0xe8>
			pifLog_Printf(LT_NONE, ",  delay: M=%dus A=%dus", p_owner->_max_trigger_delay, p_owner->_total_trigger_delay / p_owner->_execution_count);
 8014d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d74:	699b      	ldr	r3, [r3, #24]
 8014d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d7a:	460a      	mov	r2, r1
 8014d7c:	4911      	ldr	r1, [pc, #68]	; (8014dc4 <pifTaskManager_Print+0x128>)
 8014d7e:	2000      	movs	r0, #0
 8014d80:	f7fe fbf8 	bl	8013574 <pifLog_Printf>
		}
		pifLog_Print(LT_NONE, "\n");
 8014d84:	4910      	ldr	r1, [pc, #64]	; (8014dc8 <pifTaskManager_Print+0x12c>)
 8014d86:	2000      	movs	r0, #0
 8014d88:	f7fe fb66 	bl	8013458 <pifLog_Print>
		it = pifFixList_Next(it);
 8014d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d8e:	f7fd fdd4 	bl	801293a <pifFixList_Next>
 8014d92:	62f8      	str	r0, [r7, #44]	; 0x2c
	while (it) {
 8014d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d19c      	bne.n	8014cd4 <pifTaskManager_Print+0x38>
	}
}
 8014d9a:	bf00      	nop
 8014d9c:	bf00      	nop
 8014d9e:	3734      	adds	r7, #52	; 0x34
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014da4:	08027b08 	.word	0x08027b08
 8014da8:	20001df0 	.word	0x20001df0
 8014dac:	08027a90 	.word	0x08027a90
 8014db0:	08027aa0 	.word	0x08027aa0
 8014db4:	08027aa8 	.word	0x08027aa8
 8014db8:	10624dd3 	.word	0x10624dd3
 8014dbc:	08027ab0 	.word	0x08027ab0
 8014dc0:	08027adc 	.word	0x08027adc
 8014dc4:	08027aec 	.word	0x08027aec
 8014dc8:	08027b04 	.word	0x08027b04

08014dcc <_doTask>:
#include "core/pif_timer.h"


static uint16_t _doTask(PifTask* p_task)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b086      	sub	sp, #24
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
	PifTimerManager* p_manager = p_task->_p_client;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	613b      	str	r3, [r7, #16]

	PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	3308      	adds	r3, #8
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fd fd9f 	bl	8012922 <pifFixList_Begin>
 8014de4:	6178      	str	r0, [r7, #20]
	while (it) {
 8014de6:	e017      	b.n	8014e18 <_doTask+0x4c>
		PifTimer* p_timer = (PifTimer*)it->data;
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	3308      	adds	r3, #8
 8014dec:	60fb      	str	r3, [r7, #12]

		if (p_timer->__event) {
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	7f1b      	ldrb	r3, [r3, #28]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d00c      	beq.n	8014e10 <_doTask+0x44>
			p_timer->__event = FALSE;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	771a      	strb	r2, [r3, #28]

			if (p_timer->__evt_finish) (*p_timer->__evt_finish)(p_timer->__p_finish_issuer);
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6a1b      	ldr	r3, [r3, #32]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d005      	beq.n	8014e10 <_doTask+0x44>
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	6a1b      	ldr	r3, [r3, #32]
 8014e08:	68fa      	ldr	r2, [r7, #12]
 8014e0a:	6912      	ldr	r2, [r2, #16]
 8014e0c:	4610      	mov	r0, r2
 8014e0e:	4798      	blx	r3
		}

		it = pifFixList_Next(it);
 8014e10:	6978      	ldr	r0, [r7, #20]
 8014e12:	f7fd fd92 	bl	801293a <pifFixList_Next>
 8014e16:	6178      	str	r0, [r7, #20]
	while (it) {
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d1e4      	bne.n	8014de8 <_doTask+0x1c>
	}
	return 0;
 8014e1e:	2300      	movs	r3, #0
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	3718      	adds	r7, #24
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <pifTimerManager_Init>:

BOOL pifTimerManager_Init(PifTimerManager* p_manager, PifId id, uint32_t period1us, int max_count)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b086      	sub	sp, #24
 8014e2c:	af02      	add	r7, sp, #8
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	607a      	str	r2, [r7, #4]
 8014e32:	603b      	str	r3, [r7, #0]
 8014e34:	460b      	mov	r3, r1
 8014e36:	817b      	strh	r3, [r7, #10]
    if (!p_manager || !period1us) {
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d002      	beq.n	8014e44 <pifTimerManager_Init+0x1c>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d104      	bne.n	8014e4e <pifTimerManager_Init+0x26>
        pif_error = E_INVALID_PARAM;
 8014e44:	4b21      	ldr	r3, [pc, #132]	; (8014ecc <pifTimerManager_Init+0xa4>)
 8014e46:	2201      	movs	r2, #1
 8014e48:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	e03a      	b.n	8014ec4 <pifTimerManager_Init+0x9c>
    }

	memset(p_manager, 0, sizeof(PifTimerManager));
 8014e4e:	2224      	movs	r2, #36	; 0x24
 8014e50:	2100      	movs	r1, #0
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f00e f9c8 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8014e58:	897b      	ldrh	r3, [r7, #10]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d106      	bne.n	8014e6c <pifTimerManager_Init+0x44>
 8014e5e:	4b1c      	ldr	r3, [pc, #112]	; (8014ed0 <pifTimerManager_Init+0xa8>)
 8014e60:	881b      	ldrh	r3, [r3, #0]
 8014e62:	1c5a      	adds	r2, r3, #1
 8014e64:	b291      	uxth	r1, r2
 8014e66:	4a1a      	ldr	r2, [pc, #104]	; (8014ed0 <pifTimerManager_Init+0xa8>)
 8014e68:	8011      	strh	r1, [r2, #0]
 8014e6a:	817b      	strh	r3, [r7, #10]
    p_manager->_id = id;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	897a      	ldrh	r2, [r7, #10]
 8014e70:	801a      	strh	r2, [r3, #0]
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	3308      	adds	r3, #8
 8014e76:	683a      	ldr	r2, [r7, #0]
 8014e78:	2128      	movs	r1, #40	; 0x28
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fd fc4a 	bl	8012714 <pifFixList_Init>
 8014e80:	4603      	mov	r3, r0
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d017      	beq.n	8014eb6 <pifTimerManager_Init+0x8e>
    p_manager->_period1us = period1us;
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	605a      	str	r2, [r3, #4]

    p_manager->__p_task = pifTaskManager_Add(TM_TIMER, 0, _doTask, p_manager, TRUE);
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	9300      	str	r3, [sp, #0]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	4a10      	ldr	r2, [pc, #64]	; (8014ed4 <pifTimerManager_Init+0xac>)
 8014e94:	2100      	movs	r1, #0
 8014e96:	2008      	movs	r0, #8
 8014e98:	f7ff fbc0 	bl	801461c <pifTaskManager_Add>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	621a      	str	r2, [r3, #32]
    if (!p_manager->__p_task) goto fail;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	6a1b      	ldr	r3, [r3, #32]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d007      	beq.n	8014eba <pifTimerManager_Init+0x92>
    p_manager->__p_task->name = "Timer";
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	6a1b      	ldr	r3, [r3, #32]
 8014eae:	4a0a      	ldr	r2, [pc, #40]	; (8014ed8 <pifTimerManager_Init+0xb0>)
 8014eb0:	601a      	str	r2, [r3, #0]
    return TRUE;
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	e006      	b.n	8014ec4 <pifTimerManager_Init+0x9c>
    if (!pifFixList_Init(&p_manager->__timers, sizeof(PifTimer), max_count)) goto fail;
 8014eb6:	bf00      	nop
 8014eb8:	e000      	b.n	8014ebc <pifTimerManager_Init+0x94>
    if (!p_manager->__p_task) goto fail;
 8014eba:	bf00      	nop

fail:
	pifTimerManager_Clear(p_manager);
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f000 f80d 	bl	8014edc <pifTimerManager_Clear>
    return FALSE;
 8014ec2:	2300      	movs	r3, #0
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	20001d48 	.word	0x20001d48
 8014ed0:	20000128 	.word	0x20000128
 8014ed4:	08014dcd 	.word	0x08014dcd
 8014ed8:	08027b30 	.word	0x08027b30

08014edc <pifTimerManager_Clear>:

void pifTimerManager_Clear(PifTimerManager* p_manager)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
	if (p_manager->__p_task) {
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a1b      	ldr	r3, [r3, #32]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d007      	beq.n	8014efc <pifTimerManager_Clear+0x20>
		pifTaskManager_Remove(p_manager->__p_task);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6a1b      	ldr	r3, [r3, #32]
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f7ff fbfb 	bl	80146ec <pifTaskManager_Remove>
		p_manager->__p_task = NULL;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	621a      	str	r2, [r3, #32]
	}
	pifFixList_Clear(&p_manager->__timers, NULL);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	3308      	adds	r3, #8
 8014f00:	2100      	movs	r1, #0
 8014f02:	4618      	mov	r0, r3
 8014f04:	f7fd fc66 	bl	80127d4 <pifFixList_Clear>
}
 8014f08:	bf00      	nop
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <pifTimerManager_Add>:

PifTimer* pifTimerManager_Add(PifTimerManager* p_manager, PifTimerType type)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	70fb      	strb	r3, [r7, #3]
	PifTimer* p_timer = (PifTimer*)pifFixList_AddFirst(&p_manager->__timers);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	3308      	adds	r3, #8
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7fd fc8a 	bl	801283a <pifFixList_AddFirst>
 8014f26:	60f8      	str	r0, [r7, #12]
    if (!p_timer) return NULL;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d101      	bne.n	8014f32 <pifTimerManager_Add+0x22>
 8014f2e:	2300      	movs	r3, #0
 8014f30:	e006      	b.n	8014f40 <pifTimerManager_Add+0x30>

    p_timer->_type = type;
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	78fa      	ldrb	r2, [r7, #3]
 8014f36:	721a      	strb	r2, [r3, #8]
    p_timer->_step = TS_STOP;
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	725a      	strb	r2, [r3, #9]
    return p_timer;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <pifTimerManager_Remove>:

void pifTimerManager_Remove(PifTimer* p_timer)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
	p_timer->_step = TS_REMOVE;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2202      	movs	r2, #2
 8014f54:	725a      	strb	r2, [r3, #9]
}
 8014f56:	bf00      	nop
 8014f58:	370c      	adds	r7, #12
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f60:	4770      	bx	lr

08014f62 <pifTimerManager_Count>:

int pifTimerManager_Count(PifTimerManager* p_manager)
{
 8014f62:	b580      	push	{r7, lr}
 8014f64:	b082      	sub	sp, #8
 8014f66:	af00      	add	r7, sp, #0
 8014f68:	6078      	str	r0, [r7, #4]
	return pifFixList_Count(&p_manager->__timers);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	3308      	adds	r3, #8
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7fd fccb 	bl	801290a <pifFixList_Count>
 8014f74:	4603      	mov	r3, r0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3708      	adds	r7, #8
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
	...

08014f80 <pifTimer_Start>:

BOOL pifTimer_Start(PifTimer* p_owner, uint32_t target)
{
 8014f80:	b480      	push	{r7}
 8014f82:	b083      	sub	sp, #12
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
	if (!target) {
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d104      	bne.n	8014f9a <pifTimer_Start+0x1a>
		pif_error = E_INVALID_PARAM;
 8014f90:	4b11      	ldr	r3, [pc, #68]	; (8014fd8 <pifTimer_Start+0x58>)
 8014f92:	2201      	movs	r2, #1
 8014f94:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8014f96:	2300      	movs	r3, #0
 8014f98:	e017      	b.n	8014fca <pifTimer_Start+0x4a>
    }

    if (p_owner->_step == TS_STOP) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	7a5b      	ldrb	r3, [r3, #9]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d105      	bne.n	8014fae <pifTimer_Start+0x2e>
    	p_owner->_step = TS_RUNNING;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	725a      	strb	r2, [r3, #9]
    	p_owner->__event = FALSE;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2200      	movs	r2, #0
 8014fac:	771a      	strb	r2, [r3, #28]
    }
    p_owner->target = target;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	683a      	ldr	r2, [r7, #0]
 8014fb2:	601a      	str	r2, [r3, #0]
    p_owner->__current = target;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	683a      	ldr	r2, [r7, #0]
 8014fb8:	60da      	str	r2, [r3, #12]

    if (p_owner->_type == TT_PWM) {
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	7a1b      	ldrb	r3, [r3, #8]
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	d102      	bne.n	8014fc8 <pifTimer_Start+0x48>
    	p_owner->__pwm_duty = 0;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	619a      	str	r2, [r3, #24]
    }
    return TRUE;
 8014fc8:	2301      	movs	r3, #1
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	370c      	adds	r7, #12
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd4:	4770      	bx	lr
 8014fd6:	bf00      	nop
 8014fd8:	20001d48 	.word	0x20001d48

08014fdc <pifTimer_Stop>:

void pifTimer_Stop(PifTimer* p_owner)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
	p_owner->__current = 0;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_STOP;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	725a      	strb	r2, [r3, #9]
	if (p_owner->_type == TT_PWM) {
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	7a1b      	ldrb	r3, [r3, #8]
 8014ff4:	2b02      	cmp	r3, #2
 8014ff6:	d103      	bne.n	8015000 <pifTimer_Stop+0x24>
		(*p_owner->act_pwm)(OFF);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	2000      	movs	r0, #0
 8014ffe:	4798      	blx	r3
	}
}
 8015000:	bf00      	nop
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <pifTimer_Reset>:

void pifTimer_Reset(PifTimer* p_owner)
{
 8015008:	b480      	push	{r7}
 801500a:	b083      	sub	sp, #12
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
	p_owner->__current = p_owner->target;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	60da      	str	r2, [r3, #12]
	p_owner->_step = TS_RUNNING;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2201      	movs	r2, #1
 801501c:	725a      	strb	r2, [r3, #9]
}
 801501e:	bf00      	nop
 8015020:	370c      	adds	r7, #12
 8015022:	46bd      	mov	sp, r7
 8015024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015028:	4770      	bx	lr

0801502a <pifTimerManager_sigTick>:
	if (p_owner->_step != TS_RUNNING) return 0;
	else return p_owner->target - p_owner->__current;
}

void pifTimerManager_sigTick(PifTimerManager* p_manager)
{
 801502a:	b580      	push	{r7, lr}
 801502c:	b086      	sub	sp, #24
 801502e:	af00      	add	r7, sp, #0
 8015030:	6078      	str	r0, [r7, #4]
	PifTimer* p_remove = NULL;
 8015032:	2300      	movs	r3, #0
 8015034:	617b      	str	r3, [r7, #20]

    if (!p_manager) return;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2b00      	cmp	r3, #0
 801503a:	f000 8092 	beq.w	8015162 <pifTimerManager_sigTick+0x138>

    PifFixListIterator it = pifFixList_Begin(&p_manager->__timers);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	3308      	adds	r3, #8
 8015042:	4618      	mov	r0, r3
 8015044:	f7fd fc6d 	bl	8012922 <pifFixList_Begin>
 8015048:	6138      	str	r0, [r7, #16]
	while (it) {
 801504a:	e07c      	b.n	8015146 <pifTimerManager_sigTick+0x11c>
		PifTimer* p_timer = (PifTimer*)it->data;
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	3308      	adds	r3, #8
 8015050:	60fb      	str	r3, [r7, #12]

		if (p_timer->_step == TS_REMOVE) {
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	7a5b      	ldrb	r3, [r3, #9]
 8015056:	2b02      	cmp	r3, #2
 8015058:	d105      	bne.n	8015066 <pifTimerManager_sigTick+0x3c>
			if (!p_remove) p_remove = p_timer;
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d16e      	bne.n	801513e <pifTimerManager_sigTick+0x114>
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	617b      	str	r3, [r7, #20]
 8015064:	e06b      	b.n	801513e <pifTimerManager_sigTick+0x114>
		}
		else if (p_timer->__current) {
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d060      	beq.n	8015130 <pifTimerManager_sigTick+0x106>
			p_timer->__current--;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	1e5a      	subs	r2, r3, #1
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	60da      	str	r2, [r3, #12]
			switch (p_timer->_type) {
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	7a1b      	ldrb	r3, [r3, #8]
 801507c:	2b02      	cmp	r3, #2
 801507e:	d031      	beq.n	80150e4 <pifTimerManager_sigTick+0xba>
 8015080:	2b02      	cmp	r3, #2
 8015082:	dc5c      	bgt.n	801513e <pifTimerManager_sigTick+0x114>
 8015084:	2b00      	cmp	r3, #0
 8015086:	d002      	beq.n	801508e <pifTimerManager_sigTick+0x64>
 8015088:	2b01      	cmp	r3, #1
 801508a:	d015      	beq.n	80150b8 <pifTimerManager_sigTick+0x8e>
 801508c:	e057      	b.n	801513e <pifTimerManager_sigTick+0x114>
			case TT_ONCE:
				if (!p_timer->__current) {
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d14e      	bne.n	8015134 <pifTimerManager_sigTick+0x10a>
					p_timer->_step = TS_STOP;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2200      	movs	r2, #0
 801509a:	725a      	strb	r2, [r3, #9]
					p_timer->__event = TRUE;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2201      	movs	r2, #1
 80150a0:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d044      	beq.n	8015134 <pifTimerManager_sigTick+0x10a>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	6952      	ldr	r2, [r2, #20]
 80150b2:	4610      	mov	r0, r2
 80150b4:	4798      	blx	r3
					}
				}
				break;
 80150b6:	e03d      	b.n	8015134 <pifTimerManager_sigTick+0x10a>

			case TT_REPEAT:
				if (!p_timer->__current) {
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d13b      	bne.n	8015138 <pifTimerManager_sigTick+0x10e>
					p_timer->__current = p_timer->target;
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681a      	ldr	r2, [r3, #0]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	60da      	str	r2, [r3, #12]
					p_timer->__event = TRUE;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2201      	movs	r2, #1
 80150cc:	771a      	strb	r2, [r3, #28]
					if (p_timer->__evt_int_finish) {
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d030      	beq.n	8015138 <pifTimerManager_sigTick+0x10e>
						(*p_timer->__evt_int_finish)(p_timer->__p_int_finish_issuer);
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	6952      	ldr	r2, [r2, #20]
 80150de:	4610      	mov	r0, r2
 80150e0:	4798      	blx	r3
					}
				}
				break;
 80150e2:	e029      	b.n	8015138 <pifTimerManager_sigTick+0x10e>

			case TT_PWM:
				if (p_timer->__pwm_duty != p_timer->target) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	699a      	ldr	r2, [r3, #24]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d016      	beq.n	801511e <pifTimerManager_sigTick+0xf4>
					if (!p_timer->__current) {
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d107      	bne.n	8015108 <pifTimerManager_sigTick+0xde>
						(*p_timer->act_pwm)(OFF);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	2000      	movs	r0, #0
 80150fe:	4798      	blx	r3
						p_timer->__current = p_timer->target;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	60da      	str	r2, [r3, #12]
					}
					if (p_timer->__current == p_timer->__pwm_duty) {
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	68da      	ldr	r2, [r3, #12]
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	699b      	ldr	r3, [r3, #24]
 8015110:	429a      	cmp	r2, r3
 8015112:	d113      	bne.n	801513c <pifTimerManager_sigTick+0x112>
						(*p_timer->act_pwm)(ON);
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	2001      	movs	r0, #1
 801511a:	4798      	blx	r3
				else {
					if (!p_timer->__current) {
						p_timer->__current = p_timer->target;
					}
				}
				break;
 801511c:	e00e      	b.n	801513c <pifTimerManager_sigTick+0x112>
					if (!p_timer->__current) {
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d10a      	bne.n	801513c <pifTimerManager_sigTick+0x112>
						p_timer->__current = p_timer->target;
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	60da      	str	r2, [r3, #12]
				break;
 801512e:	e005      	b.n	801513c <pifTimerManager_sigTick+0x112>
			}
		}
 8015130:	bf00      	nop
 8015132:	e004      	b.n	801513e <pifTimerManager_sigTick+0x114>
				break;
 8015134:	bf00      	nop
 8015136:	e002      	b.n	801513e <pifTimerManager_sigTick+0x114>
				break;
 8015138:	bf00      	nop
 801513a:	e000      	b.n	801513e <pifTimerManager_sigTick+0x114>
				break;
 801513c:	bf00      	nop

		it = pifFixList_Next(it);
 801513e:	6938      	ldr	r0, [r7, #16]
 8015140:	f7fd fbfb 	bl	801293a <pifFixList_Next>
 8015144:	6138      	str	r0, [r7, #16]
	while (it) {
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	2b00      	cmp	r3, #0
 801514a:	f47f af7f 	bne.w	801504c <pifTimerManager_sigTick+0x22>
	}

	if (p_remove) pifFixList_Remove(&p_manager->__timers, p_remove);
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d007      	beq.n	8015164 <pifTimerManager_sigTick+0x13a>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	3308      	adds	r3, #8
 8015158:	6979      	ldr	r1, [r7, #20]
 801515a:	4618      	mov	r0, r3
 801515c:	f7fd fba1 	bl	80128a2 <pifFixList_Remove>
 8015160:	e000      	b.n	8015164 <pifTimerManager_sigTick+0x13a>
    if (!p_manager) return;
 8015162:	bf00      	nop
}
 8015164:	3718      	adds	r7, #24
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <pifTimer_AttachEvtFinish>:

void pifTimer_AttachEvtFinish(PifTimer* p_owner, PifEvtTimerFinish evt_finish, PifIssuerP p_issuer)
{
 801516a:	b480      	push	{r7}
 801516c:	b085      	sub	sp, #20
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	60b9      	str	r1, [r7, #8]
 8015174:	607a      	str	r2, [r7, #4]
	p_owner->__evt_finish = evt_finish;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	68ba      	ldr	r2, [r7, #8]
 801517a:	621a      	str	r2, [r3, #32]
	p_owner->__p_finish_issuer = p_issuer;
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	611a      	str	r2, [r3, #16]
}
 8015182:	bf00      	nop
 8015184:	3714      	adds	r7, #20
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr
	...

08015190 <pifNoiseFilter_Init>:
#include "filter/pif_noise_filter.h"


BOOL pifNoiseFilter_Init(PifNoiseFilter* p_owner, PifNoiseFilterType type)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	460b      	mov	r3, r1
 801519a:	70fb      	strb	r3, [r7, #3]
	if (!p_owner) {
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d104      	bne.n	80151ac <pifNoiseFilter_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 80151a2:	4b09      	ldr	r3, [pc, #36]	; (80151c8 <pifNoiseFilter_Init+0x38>)
 80151a4:	2201      	movs	r2, #1
 80151a6:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80151a8:	2300      	movs	r3, #0
 80151aa:	e008      	b.n	80151be <pifNoiseFilter_Init+0x2e>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilter));
 80151ac:	2208      	movs	r2, #8
 80151ae:	2100      	movs	r1, #0
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f00e f819 	bl	80231e8 <memset>

    p_owner->_type = type;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	78fa      	ldrb	r2, [r7, #3]
 80151ba:	701a      	strb	r2, [r3, #0]
    return TRUE;
 80151bc:	2301      	movs	r3, #1
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	20001d48 	.word	0x20001d48

080151cc <pifNoiseFilter_Process>:

#ifdef __PIF_NO_USE_INLINE__

PifNoiseFilterValueP pifNoiseFilter_Process(PifNoiseFilter* p_owner, PifNoiseFilterValueP p_value)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	6039      	str	r1, [r7, #0]
	return (*p_owner->__fn_process)(p_owner, p_value);
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	6839      	ldr	r1, [r7, #0]
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	4798      	blx	r3
 80151e0:	4603      	mov	r3, r0
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	3708      	adds	r7, #8
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}

080151ea <_clear>:
#include "filter/pif_noise_filter_int32.h"


static void _clear(PifNoiseFilterInt32* p_owner)
{
 80151ea:	b580      	push	{r7, lr}
 80151ec:	b082      	sub	sp, #8
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	6078      	str	r0, [r7, #4]
	switch (p_owner->parent._type) {
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	781b      	ldrb	r3, [r3, #0]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d002      	beq.n	8015200 <_clear+0x16>
 80151fa:	2b02      	cmp	r3, #2
 80151fc:	d00d      	beq.n	801521a <_clear+0x30>
			p_owner->__nc.diff = NULL;
		}
		break;

	default:
		break;
 80151fe:	e01c      	b.n	801523a <_clear+0x50>
		if (p_owner->__wf.value) {
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	699b      	ldr	r3, [r3, #24]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d015      	beq.n	8015234 <_clear+0x4a>
			free(p_owner->__wf.value);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	699b      	ldr	r3, [r3, #24]
 801520c:	4618      	mov	r0, r3
 801520e:	f00d ffd5 	bl	80231bc <free>
			p_owner->__wf.value = NULL;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2200      	movs	r2, #0
 8015216:	619a      	str	r2, [r3, #24]
		break;
 8015218:	e00c      	b.n	8015234 <_clear+0x4a>
		if (p_owner->__nc.diff) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	69db      	ldr	r3, [r3, #28]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d00a      	beq.n	8015238 <_clear+0x4e>
			free(p_owner->__nc.diff);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	69db      	ldr	r3, [r3, #28]
 8015226:	4618      	mov	r0, r3
 8015228:	f00d ffc8 	bl	80231bc <free>
			p_owner->__nc.diff = NULL;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2200      	movs	r2, #0
 8015230:	61da      	str	r2, [r3, #28]
		break;
 8015232:	e001      	b.n	8015238 <_clear+0x4e>
		break;
 8015234:	bf00      	nop
 8015236:	e000      	b.n	801523a <_clear+0x50>
		break;
 8015238:	bf00      	nop
	}
}
 801523a:	bf00      	nop
 801523c:	3708      	adds	r7, #8
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}

08015242 <_processAverage>:

static PifNoiseFilterValueP _processAverage(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 8015242:	b480      	push	{r7}
 8015244:	b085      	sub	sp, #20
 8015246:	af00      	add	r7, sp, #0
 8015248:	6078      	str	r0, [r7, #4]
 801524a:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	60fb      	str	r3, [r7, #12]

	p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015256:	3301      	adds	r3, #1
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	f992 2008 	ldrsb.w	r2, [r2, #8]
 801525e:	fb93 f1f2 	sdiv	r1, r3, r2
 8015262:	fb01 f202 	mul.w	r2, r1, r2
 8015266:	1a9b      	subs	r3, r3, r2
 8015268:	b25a      	sxtb	r2, r3
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	751a      	strb	r2, [r3, #20]
	p_owner->__avg.sum -= p_owner->__buffer[p_owner->__current];
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	699a      	ldr	r2, [r3, #24]
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	6919      	ldr	r1, [r3, #16]
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	440b      	add	r3, r1
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	1ad2      	subs	r2, r2, r3
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	619a      	str	r2, [r3, #24]
	p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	691a      	ldr	r2, [r3, #16]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015292:	009b      	lsls	r3, r3, #2
 8015294:	4413      	add	r3, r2
 8015296:	683a      	ldr	r2, [r7, #0]
 8015298:	6812      	ldr	r2, [r2, #0]
 801529a:	601a      	str	r2, [r3, #0]

	p_owner->__avg.sum += p_owner->__buffer[p_owner->__current];
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	699a      	ldr	r2, [r3, #24]
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	6919      	ldr	r1, [r3, #16]
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80152aa:	009b      	lsls	r3, r3, #2
 80152ac:	440b      	add	r3, r1
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	441a      	add	r2, r3
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	619a      	str	r2, [r3, #24]
	p_owner->_result = p_owner->__avg.sum / p_owner->_size;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	699b      	ldr	r3, [r3, #24]
 80152ba:	68fa      	ldr	r2, [r7, #12]
 80152bc:	f992 2008 	ldrsb.w	r2, [r2, #8]
 80152c0:	fb93 f2f2 	sdiv	r2, r3, r2
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	60da      	str	r2, [r3, #12]
	return &p_owner->_result;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	330c      	adds	r3, #12
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	3714      	adds	r7, #20
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr

080152d8 <_processNoiseCancel>:
	p_owner->_result = sum / p_owner->__wf.total;
	return &p_owner->_result;
}

static PifNoiseFilterValueP _processNoiseCancel(PifNoiseFilter* p_parent, PifNoiseFilterValueP p_value)
{
 80152d8:	b480      	push	{r7}
 80152da:	b08b      	sub	sp, #44	; 0x2c
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	6039      	str	r1, [r7, #0]
	PifNoiseFilterInt32* p_owner = (PifNoiseFilterInt32*)p_parent;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	61bb      	str	r3, [r7, #24]
	int32_t sum;
	int16_t* p_current;
	int16_t* p_before;
	int16_t current[3];

	p_before = p_owner->__nc.diff + p_owner->__current * 3;
 80152e6:	69bb      	ldr	r3, [r7, #24]
 80152e8:	69da      	ldr	r2, [r3, #28]
 80152ea:	69bb      	ldr	r3, [r7, #24]
 80152ec:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80152f0:	4619      	mov	r1, r3
 80152f2:	460b      	mov	r3, r1
 80152f4:	005b      	lsls	r3, r3, #1
 80152f6:	440b      	add	r3, r1
 80152f8:	005b      	lsls	r3, r3, #1
 80152fa:	4413      	add	r3, r2
 80152fc:	617b      	str	r3, [r7, #20]

	current[0] = *(int32_t*)p_value - p_owner->__buffer[p_owner->__current];
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	b29a      	uxth	r2, r3
 8015304:	69bb      	ldr	r3, [r7, #24]
 8015306:	6919      	ldr	r1, [r3, #16]
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801530e:	009b      	lsls	r3, r3, #2
 8015310:	440b      	add	r3, r1
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	b29b      	uxth	r3, r3
 8015316:	1ad3      	subs	r3, r2, r3
 8015318:	b29b      	uxth	r3, r3
 801531a:	b21b      	sxth	r3, r3
 801531c:	813b      	strh	r3, [r7, #8]

	current[1] = current[0] - p_before[0];
 801531e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8015322:	b29a      	uxth	r2, r3
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	f9b3 3000 	ldrsh.w	r3, [r3]
 801532a:	b29b      	uxth	r3, r3
 801532c:	1ad3      	subs	r3, r2, r3
 801532e:	b29b      	uxth	r3, r3
 8015330:	b21b      	sxth	r3, r3
 8015332:	817b      	strh	r3, [r7, #10]
	if (current[1] < 0) current[1] = -current[1];
 8015334:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015338:	2b00      	cmp	r3, #0
 801533a:	da06      	bge.n	801534a <_processNoiseCancel+0x72>
 801533c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015340:	b29b      	uxth	r3, r3
 8015342:	425b      	negs	r3, r3
 8015344:	b29b      	uxth	r3, r3
 8015346:	b21b      	sxth	r3, r3
 8015348:	817b      	strh	r3, [r7, #10]

	current[2] = current[0] + p_before[0];
 801534a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801534e:	b29a      	uxth	r2, r3
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015356:	b29b      	uxth	r3, r3
 8015358:	4413      	add	r3, r2
 801535a:	b29b      	uxth	r3, r3
 801535c:	b21b      	sxth	r3, r3
 801535e:	81bb      	strh	r3, [r7, #12]
	if (current[2] < 0) current[2] = -current[2];
 8015360:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015364:	2b00      	cmp	r3, #0
 8015366:	da06      	bge.n	8015376 <_processNoiseCancel+0x9e>
 8015368:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801536c:	b29b      	uxth	r3, r3
 801536e:	425b      	negs	r3, r3
 8015370:	b29b      	uxth	r3, r3
 8015372:	b21b      	sxth	r3, r3
 8015374:	81bb      	strh	r3, [r7, #12]

	if (current[1] > current[2]) {
 8015376:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801537a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801537e:	429a      	cmp	r2, r3
 8015380:	dd6d      	ble.n	801545e <_processNoiseCancel+0x186>
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	691a      	ldr	r2, [r3, #16]
 8015386:	69bb      	ldr	r3, [r7, #24]
 8015388:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	4413      	add	r3, r2
 8015390:	683a      	ldr	r2, [r7, #0]
 8015392:	6812      	ldr	r2, [r2, #0]
 8015394:	601a      	str	r2, [r3, #0]

		p_current = p_before;
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	613b      	str	r3, [r7, #16]
		p_before = p_owner->__nc.diff + p_owner->__nc.before * 3;
 801539a:	69bb      	ldr	r3, [r7, #24]
 801539c:	69da      	ldr	r2, [r3, #28]
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80153a4:	4619      	mov	r1, r3
 80153a6:	460b      	mov	r3, r1
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	440b      	add	r3, r1
 80153ac:	005b      	lsls	r3, r3, #1
 80153ae:	4413      	add	r3, r2
 80153b0:	617b      	str	r3, [r7, #20]

		p_current[0] = p_owner->__buffer[p_owner->__current] - p_owner->__buffer[p_owner->__nc.before];
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	691a      	ldr	r2, [r3, #16]
 80153b6:	69bb      	ldr	r3, [r7, #24]
 80153b8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80153bc:	009b      	lsls	r3, r3, #2
 80153be:	4413      	add	r3, r2
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	b29a      	uxth	r2, r3
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	6919      	ldr	r1, [r3, #16]
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80153ce:	009b      	lsls	r3, r3, #2
 80153d0:	440b      	add	r3, r1
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	1ad3      	subs	r3, r2, r3
 80153d8:	b29b      	uxth	r3, r3
 80153da:	b21a      	sxth	r2, r3
 80153dc:	693b      	ldr	r3, [r7, #16]
 80153de:	801a      	strh	r2, [r3, #0]

		p_current[1] = p_current[0] - p_before[0];
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	1ad3      	subs	r3, r2, r3
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	3302      	adds	r3, #2
 80153f8:	b212      	sxth	r2, r2
 80153fa:	801a      	strh	r2, [r3, #0]
		if (p_current[1] < 0) p_current[1] = -p_current[1];
 80153fc:	693b      	ldr	r3, [r7, #16]
 80153fe:	3302      	adds	r3, #2
 8015400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015404:	2b00      	cmp	r3, #0
 8015406:	da0a      	bge.n	801541e <_processNoiseCancel+0x146>
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	3302      	adds	r3, #2
 801540c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015410:	b29b      	uxth	r3, r3
 8015412:	425b      	negs	r3, r3
 8015414:	b29a      	uxth	r2, r3
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	3302      	adds	r3, #2
 801541a:	b212      	sxth	r2, r2
 801541c:	801a      	strh	r2, [r3, #0]

		p_current[2] = p_current[0] + p_before[0];
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015424:	b29a      	uxth	r2, r3
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	f9b3 3000 	ldrsh.w	r3, [r3]
 801542c:	b29b      	uxth	r3, r3
 801542e:	4413      	add	r3, r2
 8015430:	b29a      	uxth	r2, r3
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	3304      	adds	r3, #4
 8015436:	b212      	sxth	r2, r2
 8015438:	801a      	strh	r2, [r3, #0]
		if (p_current[2] < 0) p_current[2] = -p_current[2];
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	3304      	adds	r3, #4
 801543e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015442:	2b00      	cmp	r3, #0
 8015444:	da43      	bge.n	80154ce <_processNoiseCancel+0x1f6>
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	3304      	adds	r3, #4
 801544a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801544e:	b29b      	uxth	r3, r3
 8015450:	425b      	negs	r3, r3
 8015452:	b29a      	uxth	r2, r3
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	3304      	adds	r3, #4
 8015458:	b212      	sxth	r2, r2
 801545a:	801a      	strh	r2, [r3, #0]
 801545c:	e037      	b.n	80154ce <_processNoiseCancel+0x1f6>
	}
	else {
		p_owner->__nc.before = p_owner->__current;
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	f993 2014 	ldrsb.w	r2, [r3, #20]
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	761a      	strb	r2, [r3, #24]
		p_owner->__current = (p_owner->__current + 1) % p_owner->_size;
 8015468:	69bb      	ldr	r3, [r7, #24]
 801546a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 801546e:	3301      	adds	r3, #1
 8015470:	69ba      	ldr	r2, [r7, #24]
 8015472:	f992 2008 	ldrsb.w	r2, [r2, #8]
 8015476:	fb93 f1f2 	sdiv	r1, r3, r2
 801547a:	fb01 f202 	mul.w	r2, r1, r2
 801547e:	1a9b      	subs	r3, r3, r2
 8015480:	b25a      	sxtb	r2, r3
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	751a      	strb	r2, [r3, #20]
		p_owner->__buffer[p_owner->__current] = *(int32_t*)p_value;
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	691a      	ldr	r2, [r3, #16]
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	4413      	add	r3, r2
 8015494:	683a      	ldr	r2, [r7, #0]
 8015496:	6812      	ldr	r2, [r2, #0]
 8015498:	601a      	str	r2, [r3, #0]

		p_current = p_owner->__nc.diff + p_owner->__current * 3;
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	69da      	ldr	r2, [r3, #28]
 801549e:	69bb      	ldr	r3, [r7, #24]
 80154a0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80154a4:	4619      	mov	r1, r3
 80154a6:	460b      	mov	r3, r1
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	440b      	add	r3, r1
 80154ac:	005b      	lsls	r3, r3, #1
 80154ae:	4413      	add	r3, r2
 80154b0:	613b      	str	r3, [r7, #16]

		p_current[0] = current[0];
 80154b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	801a      	strh	r2, [r3, #0]
		p_current[1] = current[1];
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	3302      	adds	r3, #2
 80154be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80154c2:	801a      	strh	r2, [r3, #0]
		p_current[2] = current[2];
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	3304      	adds	r3, #4
 80154c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80154cc:	801a      	strh	r2, [r3, #0]
	}

	sum = 0;
 80154ce:	2300      	movs	r3, #0
 80154d0:	61fb      	str	r3, [r7, #28]
	count = 0;
 80154d2:	2300      	movs	r3, #0
 80154d4:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80154d6:	2300      	movs	r3, #0
 80154d8:	627b      	str	r3, [r7, #36]	; 0x24
 80154da:	e00e      	b.n	80154fa <_processNoiseCancel+0x222>
		sum += p_owner->__buffer[i];
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	691a      	ldr	r2, [r3, #16]
 80154e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e2:	009b      	lsls	r3, r3, #2
 80154e4:	4413      	add	r3, r2
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	69fa      	ldr	r2, [r7, #28]
 80154ea:	4413      	add	r3, r2
 80154ec:	61fb      	str	r3, [r7, #28]
		count++;
 80154ee:	6a3b      	ldr	r3, [r7, #32]
 80154f0:	3301      	adds	r3, #1
 80154f2:	623b      	str	r3, [r7, #32]
	for (i = 0; i < p_owner->_size; i++) {
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	3301      	adds	r3, #1
 80154f8:	627b      	str	r3, [r7, #36]	; 0x24
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015500:	461a      	mov	r2, r3
 8015502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015504:	4293      	cmp	r3, r2
 8015506:	dbe9      	blt.n	80154dc <_processNoiseCancel+0x204>
	}
	if (count > 0) {
 8015508:	6a3b      	ldr	r3, [r7, #32]
 801550a:	2b00      	cmp	r3, #0
 801550c:	dd05      	ble.n	801551a <_processNoiseCancel+0x242>
		p_owner->_result = sum / count;
 801550e:	69fa      	ldr	r2, [r7, #28]
 8015510:	6a3b      	ldr	r3, [r7, #32]
 8015512:	fb92 f2f3 	sdiv	r2, r2, r3
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	60da      	str	r2, [r3, #12]
	}
	return &p_owner->_result;
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	330c      	adds	r3, #12
}
 801551e:	4618      	mov	r0, r3
 8015520:	372c      	adds	r7, #44	; 0x2c
 8015522:	46bd      	mov	sp, r7
 8015524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015528:	4770      	bx	lr
	...

0801552c <pifNoiseFilterInt32_Init>:

BOOL pifNoiseFilterInt32_Init(PifNoiseFilterInt32* p_owner, uint8_t size)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	460b      	mov	r3, r1
 8015536:	70fb      	strb	r3, [r7, #3]
	if (!p_owner || !size) {
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d002      	beq.n	8015544 <pifNoiseFilterInt32_Init+0x18>
 801553e:	78fb      	ldrb	r3, [r7, #3]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d104      	bne.n	801554e <pifNoiseFilterInt32_Init+0x22>
		pif_error = E_INVALID_PARAM;
 8015544:	4b17      	ldr	r3, [pc, #92]	; (80155a4 <pifNoiseFilterInt32_Init+0x78>)
 8015546:	2201      	movs	r2, #1
 8015548:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801554a:	2300      	movs	r3, #0
 801554c:	e026      	b.n	801559c <pifNoiseFilterInt32_Init+0x70>
	}

    memset(p_owner, 0, sizeof(PifNoiseFilterInt32));
 801554e:	2220      	movs	r2, #32
 8015550:	2100      	movs	r1, #0
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f00d fe48 	bl	80231e8 <memset>

	p_owner->__buffer = calloc(size, sizeof(int32_t));
 8015558:	78fb      	ldrb	r3, [r7, #3]
 801555a:	2104      	movs	r1, #4
 801555c:	4618      	mov	r0, r3
 801555e:	f00d fdf3 	bl	8023148 <calloc>
 8015562:	4603      	mov	r3, r0
 8015564:	461a      	mov	r2, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	611a      	str	r2, [r3, #16]
	if (!p_owner->__buffer) {
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	691b      	ldr	r3, [r3, #16]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d104      	bne.n	801557c <pifNoiseFilterInt32_Init+0x50>
		pif_error = E_OUT_OF_HEAP;
 8015572:	4b0c      	ldr	r3, [pc, #48]	; (80155a4 <pifNoiseFilterInt32_Init+0x78>)
 8015574:	2203      	movs	r2, #3
 8015576:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015578:	2300      	movs	r3, #0
 801557a:	e00f      	b.n	801559c <pifNoiseFilterInt32_Init+0x70>
	}

	pifNoiseFilter_Init(&p_owner->parent, NFT_AVERAGE);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2100      	movs	r1, #0
 8015580:	4618      	mov	r0, r3
 8015582:	f7ff fe05 	bl	8015190 <pifNoiseFilter_Init>
    p_owner->_size = size;
 8015586:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	721a      	strb	r2, [r3, #8]
	p_owner->__current = 0;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2200      	movs	r2, #0
 8015592:	751a      	strb	r2, [r3, #20]

	p_owner->parent.__fn_process = _processAverage;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	4a04      	ldr	r2, [pc, #16]	; (80155a8 <pifNoiseFilterInt32_Init+0x7c>)
 8015598:	605a      	str	r2, [r3, #4]
    return TRUE;
 801559a:	2301      	movs	r3, #1
}
 801559c:	4618      	mov	r0, r3
 801559e:	3708      	adds	r7, #8
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	20001d48 	.word	0x20001d48
 80155a8:	08015243 	.word	0x08015243

080155ac <pifNoiseFilterInt32_SetNoiseCancel>:
	p_owner->parent.__fn_process = _processWeightFactor;
	return TRUE;
}

BOOL pifNoiseFilterInt32_SetNoiseCancel(PifNoiseFilterInt32* p_owner)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
	_clear(p_owner);
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f7ff fe18 	bl	80151ea <_clear>

	if (p_owner->_size < 3 || p_owner->_size > 32) {
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155c0:	2b02      	cmp	r3, #2
 80155c2:	dd04      	ble.n	80155ce <pifNoiseFilterInt32_SetNoiseCancel+0x22>
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155ca:	2b20      	cmp	r3, #32
 80155cc:	dd04      	ble.n	80155d8 <pifNoiseFilterInt32_SetNoiseCancel+0x2c>
		pif_error = E_INVALID_PARAM;
 80155ce:	4b15      	ldr	r3, [pc, #84]	; (8015624 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 80155d0:	2201      	movs	r2, #1
 80155d2:	701a      	strb	r2, [r3, #0]
		return FALSE;
 80155d4:	2300      	movs	r3, #0
 80155d6:	e021      	b.n	801561c <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.diff = calloc(p_owner->_size * 3, sizeof(int16_t));
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80155de:	461a      	mov	r2, r3
 80155e0:	4613      	mov	r3, r2
 80155e2:	005b      	lsls	r3, r3, #1
 80155e4:	4413      	add	r3, r2
 80155e6:	2102      	movs	r1, #2
 80155e8:	4618      	mov	r0, r3
 80155ea:	f00d fdad 	bl	8023148 <calloc>
 80155ee:	4603      	mov	r3, r0
 80155f0:	461a      	mov	r2, r3
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	61da      	str	r2, [r3, #28]
	if (!p_owner->__nc.diff) {
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	69db      	ldr	r3, [r3, #28]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d104      	bne.n	8015608 <pifNoiseFilterInt32_SetNoiseCancel+0x5c>
		pif_error = E_OUT_OF_HEAP;
 80155fe:	4b09      	ldr	r3, [pc, #36]	; (8015624 <pifNoiseFilterInt32_SetNoiseCancel+0x78>)
 8015600:	2203      	movs	r2, #3
 8015602:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8015604:	2300      	movs	r3, #0
 8015606:	e009      	b.n	801561c <pifNoiseFilterInt32_SetNoiseCancel+0x70>
	}

	p_owner->__nc.before = 0;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2200      	movs	r2, #0
 801560c:	761a      	strb	r2, [r3, #24]

	p_owner->parent._type = NFT_NOISE_CANCEL;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	2202      	movs	r2, #2
 8015612:	701a      	strb	r2, [r3, #0]
	p_owner->parent.__fn_process = _processNoiseCancel;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	4a04      	ldr	r2, [pc, #16]	; (8015628 <pifNoiseFilterInt32_SetNoiseCancel+0x7c>)
 8015618:	605a      	str	r2, [r3, #4]
	return TRUE;
 801561a:	2301      	movs	r3, #1
}
 801561c:	4618      	mov	r0, r3
 801561e:	3708      	adds	r7, #8
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	20001d48 	.word	0x20001d48
 8015628:	080152d9 	.word	0x080152d9

0801562c <_convertString2Date>:

#define DIGIT_TO_VAL(_x)        (_x - '0')


static void _convertString2Date(char* str, PifDateTime* p_date_time)
{
 801562c:	b480      	push	{r7}
 801562e:	b083      	sub	sp, #12
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
	p_date_time->day = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	3b30      	subs	r3, #48	; 0x30
 801563c:	b2db      	uxtb	r3, r3
 801563e:	461a      	mov	r2, r3
 8015640:	0092      	lsls	r2, r2, #2
 8015642:	4413      	add	r3, r2
 8015644:	005b      	lsls	r3, r3, #1
 8015646:	b2da      	uxtb	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	3301      	adds	r3, #1
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	4413      	add	r3, r2
 8015650:	b2db      	uxtb	r3, r3
 8015652:	3b30      	subs	r3, #48	; 0x30
 8015654:	b2da      	uxtb	r2, r3
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	709a      	strb	r2, [r3, #2]
	p_date_time->month = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	3302      	adds	r3, #2
 801565e:	781b      	ldrb	r3, [r3, #0]
 8015660:	3b30      	subs	r3, #48	; 0x30
 8015662:	b2db      	uxtb	r3, r3
 8015664:	461a      	mov	r2, r3
 8015666:	0092      	lsls	r2, r2, #2
 8015668:	4413      	add	r3, r2
 801566a:	005b      	lsls	r3, r3, #1
 801566c:	b2da      	uxtb	r2, r3
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	3303      	adds	r3, #3
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	4413      	add	r3, r2
 8015676:	b2db      	uxtb	r3, r3
 8015678:	3b30      	subs	r3, #48	; 0x30
 801567a:	b2da      	uxtb	r2, r3
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	705a      	strb	r2, [r3, #1]
	p_date_time->year = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	3304      	adds	r3, #4
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	3b30      	subs	r3, #48	; 0x30
 8015688:	b2db      	uxtb	r3, r3
 801568a:	461a      	mov	r2, r3
 801568c:	0092      	lsls	r2, r2, #2
 801568e:	4413      	add	r3, r2
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	b2da      	uxtb	r2, r3
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	3305      	adds	r3, #5
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	4413      	add	r3, r2
 801569c:	b2db      	uxtb	r3, r3
 801569e:	3b30      	subs	r3, #48	; 0x30
 80156a0:	b2da      	uxtb	r2, r3
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	701a      	strb	r2, [r3, #0]
}
 80156a6:	bf00      	nop
 80156a8:	370c      	adds	r7, #12
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr
	...

080156b4 <_convertString2Time>:

static void _convertString2Time(char* str, PifDateTime* p_date_time)
{
 80156b4:	b480      	push	{r7}
 80156b6:	b085      	sub	sp, #20
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	6039      	str	r1, [r7, #0]
	int i, digit;

	p_date_time->hour = DIGIT_TO_VAL(str[0]) * 10 + DIGIT_TO_VAL(str[1]);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	3b30      	subs	r3, #48	; 0x30
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	461a      	mov	r2, r3
 80156c8:	0092      	lsls	r2, r2, #2
 80156ca:	4413      	add	r3, r2
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	3301      	adds	r3, #1
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	4413      	add	r3, r2
 80156d8:	b2db      	uxtb	r3, r3
 80156da:	3b30      	subs	r3, #48	; 0x30
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	70da      	strb	r2, [r3, #3]
	p_date_time->minute = DIGIT_TO_VAL(str[2]) * 10 + DIGIT_TO_VAL(str[3]);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	3302      	adds	r3, #2
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	3b30      	subs	r3, #48	; 0x30
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	461a      	mov	r2, r3
 80156ee:	0092      	lsls	r2, r2, #2
 80156f0:	4413      	add	r3, r2
 80156f2:	005b      	lsls	r3, r3, #1
 80156f4:	b2da      	uxtb	r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	3303      	adds	r3, #3
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	4413      	add	r3, r2
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	3b30      	subs	r3, #48	; 0x30
 8015702:	b2da      	uxtb	r2, r3
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	711a      	strb	r2, [r3, #4]
	p_date_time->second = DIGIT_TO_VAL(str[4]) * 10 + DIGIT_TO_VAL(str[5]);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	3304      	adds	r3, #4
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	3b30      	subs	r3, #48	; 0x30
 8015710:	b2db      	uxtb	r3, r3
 8015712:	461a      	mov	r2, r3
 8015714:	0092      	lsls	r2, r2, #2
 8015716:	4413      	add	r3, r2
 8015718:	005b      	lsls	r3, r3, #1
 801571a:	b2da      	uxtb	r2, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	3305      	adds	r3, #5
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	4413      	add	r3, r2
 8015724:	b2db      	uxtb	r3, r3
 8015726:	3b30      	subs	r3, #48	; 0x30
 8015728:	b2da      	uxtb	r2, r3
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	715a      	strb	r2, [r3, #5]
	if (str[6] == '.') {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	3306      	adds	r3, #6
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	2b2e      	cmp	r3, #46	; 0x2e
 8015736:	d134      	bne.n	80157a2 <_convertString2Time+0xee>
		p_date_time->millisecond = 0;
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	2200      	movs	r2, #0
 801573c:	80da      	strh	r2, [r3, #6]
		digit = 100;
 801573e:	2364      	movs	r3, #100	; 0x64
 8015740:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015742:	2307      	movs	r3, #7
 8015744:	60fb      	str	r3, [r7, #12]
 8015746:	e027      	b.n	8015798 <_convertString2Time+0xe4>
			if (!isdigit((int)str[i])) break;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	4413      	add	r3, r2
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	3301      	adds	r3, #1
 8015752:	4a17      	ldr	r2, [pc, #92]	; (80157b0 <_convertString2Time+0xfc>)
 8015754:	4413      	add	r3, r2
 8015756:	781b      	ldrb	r3, [r3, #0]
 8015758:	f003 0304 	and.w	r3, r3, #4
 801575c:	2b00      	cmp	r3, #0
 801575e:	d01f      	beq.n	80157a0 <_convertString2Time+0xec>
			p_date_time->millisecond += DIGIT_TO_VAL(str[i]) * digit;
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	88da      	ldrh	r2, [r3, #6]
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	6879      	ldr	r1, [r7, #4]
 8015768:	440b      	add	r3, r1
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	3b30      	subs	r3, #48	; 0x30
 801576e:	b299      	uxth	r1, r3
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	b29b      	uxth	r3, r3
 8015774:	fb11 f303 	smulbb	r3, r1, r3
 8015778:	b29b      	uxth	r3, r3
 801577a:	4413      	add	r3, r2
 801577c:	b29a      	uxth	r2, r3
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	80da      	strh	r2, [r3, #6]
			digit /= 10;
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	4a0b      	ldr	r2, [pc, #44]	; (80157b4 <_convertString2Time+0x100>)
 8015786:	fb82 1203 	smull	r1, r2, r2, r3
 801578a:	1092      	asrs	r2, r2, #2
 801578c:	17db      	asrs	r3, r3, #31
 801578e:	1ad3      	subs	r3, r2, r3
 8015790:	60bb      	str	r3, [r7, #8]
		for (i = 7; i < 10; i++) {
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	3301      	adds	r3, #1
 8015796:	60fb      	str	r3, [r7, #12]
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	2b09      	cmp	r3, #9
 801579c:	ddd4      	ble.n	8015748 <_convertString2Time+0x94>
		}
	}
}
 801579e:	e000      	b.n	80157a2 <_convertString2Time+0xee>
			if (!isdigit((int)str[i])) break;
 80157a0:	bf00      	nop
}
 80157a2:	bf00      	nop
 80157a4:	3714      	adds	r7, #20
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop
 80157b0:	080293b8 	.word	0x080293b8
 80157b4:	66666667 	.word	0x66666667

080157b8 <_convertString2Float>:

static double _convertString2Float(char* str)
{
 80157b8:	b5b0      	push	{r4, r5, r7, lr}
 80157ba:	b088      	sub	sp, #32
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
	char* p;
	double value = 0.0, unit;
 80157c0:	f04f 0200 	mov.w	r2, #0
 80157c4:	f04f 0300 	mov.w	r3, #0
 80157c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	p = str;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	61fb      	str	r3, [r7, #28]
	if (*p == '-') p++;
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	2b2d      	cmp	r3, #45	; 0x2d
 80157d6:	d120      	bne.n	801581a <_convertString2Float+0x62>
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	3301      	adds	r3, #1
 80157dc:	61fb      	str	r3, [r7, #28]
	while (isdigit((int)*p)) {
 80157de:	e01c      	b.n	801581a <_convertString2Float+0x62>
		value *= 10;
 80157e0:	f04f 0200 	mov.w	r2, #0
 80157e4:	4b38      	ldr	r3, [pc, #224]	; (80158c8 <_convertString2Float+0x110>)
 80157e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80157ea:	f7ea feb9 	bl	8000560 <__aeabi_dmul>
 80157ee:	4602      	mov	r2, r0
 80157f0:	460b      	mov	r3, r1
 80157f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		value += DIGIT_TO_VAL(*p++);
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	1c5a      	adds	r2, r3, #1
 80157fa:	61fa      	str	r2, [r7, #28]
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	3b30      	subs	r3, #48	; 0x30
 8015800:	4618      	mov	r0, r3
 8015802:	f7ea fe43 	bl	800048c <__aeabi_i2d>
 8015806:	4602      	mov	r2, r0
 8015808:	460b      	mov	r3, r1
 801580a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801580e:	f7ea fcf1 	bl	80001f4 <__adddf3>
 8015812:	4602      	mov	r2, r0
 8015814:	460b      	mov	r3, r1
 8015816:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (isdigit((int)*p)) {
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	3301      	adds	r3, #1
 8015820:	4a2a      	ldr	r2, [pc, #168]	; (80158cc <_convertString2Float+0x114>)
 8015822:	4413      	add	r3, r2
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	f003 0304 	and.w	r3, r3, #4
 801582a:	2b00      	cmp	r3, #0
 801582c:	d1d8      	bne.n	80157e0 <_convertString2Float+0x28>
	}
	if (*str == '-') value = -value;
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	781b      	ldrb	r3, [r3, #0]
 8015832:	2b2d      	cmp	r3, #45	; 0x2d
 8015834:	d105      	bne.n	8015842 <_convertString2Float+0x8a>
 8015836:	693c      	ldr	r4, [r7, #16]
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801583e:	e9c7 4504 	strd	r4, r5, [r7, #16]

	if (*p == '.') {
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	2b2e      	cmp	r3, #46	; 0x2e
 8015848:	d133      	bne.n	80158b2 <_convertString2Float+0xfa>
		p++;
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	3301      	adds	r3, #1
 801584e:	61fb      	str	r3, [r7, #28]
		unit = 10;
 8015850:	f04f 0200 	mov.w	r2, #0
 8015854:	4b1c      	ldr	r3, [pc, #112]	; (80158c8 <_convertString2Float+0x110>)
 8015856:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801585a:	e020      	b.n	801589e <_convertString2Float+0xe6>
			value += DIGIT_TO_VAL(*p++) / unit;
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	1c5a      	adds	r2, r3, #1
 8015860:	61fa      	str	r2, [r7, #28]
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	3b30      	subs	r3, #48	; 0x30
 8015866:	4618      	mov	r0, r3
 8015868:	f7ea fe10 	bl	800048c <__aeabi_i2d>
 801586c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015870:	f7ea ffa0 	bl	80007b4 <__aeabi_ddiv>
 8015874:	4602      	mov	r2, r0
 8015876:	460b      	mov	r3, r1
 8015878:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801587c:	f7ea fcba 	bl	80001f4 <__adddf3>
 8015880:	4602      	mov	r2, r0
 8015882:	460b      	mov	r3, r1
 8015884:	e9c7 2304 	strd	r2, r3, [r7, #16]
			unit *= 10;
 8015888:	f04f 0200 	mov.w	r2, #0
 801588c:	4b0e      	ldr	r3, [pc, #56]	; (80158c8 <_convertString2Float+0x110>)
 801588e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015892:	f7ea fe65 	bl	8000560 <__aeabi_dmul>
 8015896:	4602      	mov	r2, r0
 8015898:	460b      	mov	r3, r1
 801589a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (isdigit((int)*p)) {
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	3301      	adds	r3, #1
 80158a4:	4a09      	ldr	r2, [pc, #36]	; (80158cc <_convertString2Float+0x114>)
 80158a6:	4413      	add	r3, r2
 80158a8:	781b      	ldrb	r3, [r3, #0]
 80158aa:	f003 0304 	and.w	r3, r3, #4
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1d4      	bne.n	801585c <_convertString2Float+0xa4>
		}
	}
	return value;
 80158b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80158b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80158ba:	eeb0 0a47 	vmov.f32	s0, s14
 80158be:	eef0 0a67 	vmov.f32	s1, s15
 80158c2:	3720      	adds	r7, #32
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bdb0      	pop	{r4, r5, r7, pc}
 80158c8:	40240000 	.word	0x40240000
 80158cc:	080293b8 	.word	0x080293b8

080158d0 <_convertString2Interger>:

static int _convertString2Interger(char* str)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b085      	sub	sp, #20
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
	char* p;
	int value = 0.0;
 80158d8:	2300      	movs	r3, #0
 80158da:	60bb      	str	r3, [r7, #8]

	p = str;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	60fb      	str	r3, [r7, #12]
	if (*p == '-') p++;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	2b2d      	cmp	r3, #45	; 0x2d
 80158e6:	d111      	bne.n	801590c <_convertString2Interger+0x3c>
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	3301      	adds	r3, #1
 80158ec:	60fb      	str	r3, [r7, #12]
	while (isdigit((int)*p)) {
 80158ee:	e00d      	b.n	801590c <_convertString2Interger+0x3c>
		value *= 10;
 80158f0:	68ba      	ldr	r2, [r7, #8]
 80158f2:	4613      	mov	r3, r2
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	4413      	add	r3, r2
 80158f8:	005b      	lsls	r3, r3, #1
 80158fa:	60bb      	str	r3, [r7, #8]
		value += DIGIT_TO_VAL(*p++);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	1c5a      	adds	r2, r3, #1
 8015900:	60fa      	str	r2, [r7, #12]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	3b30      	subs	r3, #48	; 0x30
 8015906:	68ba      	ldr	r2, [r7, #8]
 8015908:	4413      	add	r3, r2
 801590a:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)*p)) {
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	3301      	adds	r3, #1
 8015912:	4a0a      	ldr	r2, [pc, #40]	; (801593c <_convertString2Interger+0x6c>)
 8015914:	4413      	add	r3, r2
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	f003 0304 	and.w	r3, r3, #4
 801591c:	2b00      	cmp	r3, #0
 801591e:	d1e7      	bne.n	80158f0 <_convertString2Interger+0x20>
	}
	if (*str == '-') value = -value;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	2b2d      	cmp	r3, #45	; 0x2d
 8015926:	d102      	bne.n	801592e <_convertString2Interger+0x5e>
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	425b      	negs	r3, r3
 801592c:	60bb      	str	r3, [r7, #8]
	return value;
 801592e:	68bb      	ldr	r3, [r7, #8]
}
 8015930:	4618      	mov	r0, r3
 8015932:	3714      	adds	r7, #20
 8015934:	46bd      	mov	sp, r7
 8015936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593a:	4770      	bx	lr
 801593c:	080293b8 	.word	0x080293b8

08015940 <_convertString2Degrees>:
 * with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is unrealistic, however increased
 * resolution also increased precision of nav calculations
*/

static double _convertString2Degrees(char* s)
{
 8015940:	b5b0      	push	{r4, r5, r7, lr}
 8015942:	b088      	sub	sp, #32
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
	char* p;
	char* q;
	uint8_t deg = 0, min = 0;
 8015948:	2300      	movs	r3, #0
 801594a:	75fb      	strb	r3, [r7, #23]
 801594c:	2300      	movs	r3, #0
 801594e:	75bb      	strb	r3, [r7, #22]
	unsigned int frac_min = 0;
 8015950:	2300      	movs	r3, #0
 8015952:	613b      	str	r3, [r7, #16]
	uint8_t i;

	// scan for decimal point or end of field
	for (p = s; isdigit((int)*p); p++);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	61fb      	str	r3, [r7, #28]
 8015958:	e002      	b.n	8015960 <_convertString2Degrees+0x20>
 801595a:	69fb      	ldr	r3, [r7, #28]
 801595c:	3301      	adds	r3, #1
 801595e:	61fb      	str	r3, [r7, #28]
 8015960:	69fb      	ldr	r3, [r7, #28]
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	3301      	adds	r3, #1
 8015966:	4a46      	ldr	r2, [pc, #280]	; (8015a80 <_convertString2Degrees+0x140>)
 8015968:	4413      	add	r3, r2
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	f003 0304 	and.w	r3, r3, #4
 8015970:	2b00      	cmp	r3, #0
 8015972:	d1f2      	bne.n	801595a <_convertString2Degrees+0x1a>
	q = s;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	61bb      	str	r3, [r7, #24]

	// convert degrees
	while ((p - q) > 2) {
 8015978:	e011      	b.n	801599e <_convertString2Degrees+0x5e>
		if (deg) deg *= 10;
 801597a:	7dfb      	ldrb	r3, [r7, #23]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d005      	beq.n	801598c <_convertString2Degrees+0x4c>
 8015980:	7dfb      	ldrb	r3, [r7, #23]
 8015982:	461a      	mov	r2, r3
 8015984:	0092      	lsls	r2, r2, #2
 8015986:	4413      	add	r3, r2
 8015988:	005b      	lsls	r3, r3, #1
 801598a:	75fb      	strb	r3, [r7, #23]
		deg += DIGIT_TO_VAL(*q++);
 801598c:	69bb      	ldr	r3, [r7, #24]
 801598e:	1c5a      	adds	r2, r3, #1
 8015990:	61ba      	str	r2, [r7, #24]
 8015992:	781b      	ldrb	r3, [r3, #0]
 8015994:	3b30      	subs	r3, #48	; 0x30
 8015996:	b2da      	uxtb	r2, r3
 8015998:	7dfb      	ldrb	r3, [r7, #23]
 801599a:	4413      	add	r3, r2
 801599c:	75fb      	strb	r3, [r7, #23]
	while ((p - q) > 2) {
 801599e:	69fa      	ldr	r2, [r7, #28]
 80159a0:	69bb      	ldr	r3, [r7, #24]
 80159a2:	1ad3      	subs	r3, r2, r3
 80159a4:	2b02      	cmp	r3, #2
 80159a6:	dce8      	bgt.n	801597a <_convertString2Degrees+0x3a>
	}
	// convert minutes
	while (p > q) {
 80159a8:	e011      	b.n	80159ce <_convertString2Degrees+0x8e>
		if (min) min *= 10;
 80159aa:	7dbb      	ldrb	r3, [r7, #22]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d005      	beq.n	80159bc <_convertString2Degrees+0x7c>
 80159b0:	7dbb      	ldrb	r3, [r7, #22]
 80159b2:	461a      	mov	r2, r3
 80159b4:	0092      	lsls	r2, r2, #2
 80159b6:	4413      	add	r3, r2
 80159b8:	005b      	lsls	r3, r3, #1
 80159ba:	75bb      	strb	r3, [r7, #22]
		min += DIGIT_TO_VAL(*q++);
 80159bc:	69bb      	ldr	r3, [r7, #24]
 80159be:	1c5a      	adds	r2, r3, #1
 80159c0:	61ba      	str	r2, [r7, #24]
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	3b30      	subs	r3, #48	; 0x30
 80159c6:	b2da      	uxtb	r2, r3
 80159c8:	7dbb      	ldrb	r3, [r7, #22]
 80159ca:	4413      	add	r3, r2
 80159cc:	75bb      	strb	r3, [r7, #22]
	while (p > q) {
 80159ce:	69fa      	ldr	r2, [r7, #28]
 80159d0:	69bb      	ldr	r3, [r7, #24]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d8e9      	bhi.n	80159aa <_convertString2Degrees+0x6a>
	}
	// convert fractional minutes
	// expect up to four digits, result is in
	// ten-thousandths of a minute
	if (*p == '.') {
 80159d6:	69fb      	ldr	r3, [r7, #28]
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	2b2e      	cmp	r3, #46	; 0x2e
 80159dc:	d124      	bne.n	8015a28 <_convertString2Degrees+0xe8>
		q = p + 1;
 80159de:	69fb      	ldr	r3, [r7, #28]
 80159e0:	3301      	adds	r3, #1
 80159e2:	61bb      	str	r3, [r7, #24]
		for (i = 0; i < 4; i++) {
 80159e4:	2300      	movs	r3, #0
 80159e6:	73fb      	strb	r3, [r7, #15]
 80159e8:	e01b      	b.n	8015a22 <_convertString2Degrees+0xe2>
			frac_min *= 10;
 80159ea:	693a      	ldr	r2, [r7, #16]
 80159ec:	4613      	mov	r3, r2
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	4413      	add	r3, r2
 80159f2:	005b      	lsls	r3, r3, #1
 80159f4:	613b      	str	r3, [r7, #16]
			if (isdigit((int)*q)) frac_min += *q++ - '0';
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	3301      	adds	r3, #1
 80159fc:	4a20      	ldr	r2, [pc, #128]	; (8015a80 <_convertString2Degrees+0x140>)
 80159fe:	4413      	add	r3, r2
 8015a00:	781b      	ldrb	r3, [r3, #0]
 8015a02:	f003 0304 	and.w	r3, r3, #4
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d008      	beq.n	8015a1c <_convertString2Degrees+0xdc>
 8015a0a:	69bb      	ldr	r3, [r7, #24]
 8015a0c:	1c5a      	adds	r2, r3, #1
 8015a0e:	61ba      	str	r2, [r7, #24]
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	3b30      	subs	r3, #48	; 0x30
 8015a14:	461a      	mov	r2, r3
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	4413      	add	r3, r2
 8015a1a:	613b      	str	r3, [r7, #16]
		for (i = 0; i < 4; i++) {
 8015a1c:	7bfb      	ldrb	r3, [r7, #15]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	73fb      	strb	r3, [r7, #15]
 8015a22:	7bfb      	ldrb	r3, [r7, #15]
 8015a24:	2b03      	cmp	r3, #3
 8015a26:	d9e0      	bls.n	80159ea <_convertString2Degrees+0xaa>
		}
	}
	return deg + (min * 10000UL + frac_min) / 600000.0;
 8015a28:	7dfb      	ldrb	r3, [r7, #23]
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7ea fd2e 	bl	800048c <__aeabi_i2d>
 8015a30:	4604      	mov	r4, r0
 8015a32:	460d      	mov	r5, r1
 8015a34:	7dbb      	ldrb	r3, [r7, #22]
 8015a36:	f242 7210 	movw	r2, #10000	; 0x2710
 8015a3a:	fb03 f202 	mul.w	r2, r3, r2
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	4413      	add	r3, r2
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7ea fd12 	bl	800046c <__aeabi_ui2d>
 8015a48:	a30b      	add	r3, pc, #44	; (adr r3, 8015a78 <_convertString2Degrees+0x138>)
 8015a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a4e:	f7ea feb1 	bl	80007b4 <__aeabi_ddiv>
 8015a52:	4602      	mov	r2, r0
 8015a54:	460b      	mov	r3, r1
 8015a56:	4620      	mov	r0, r4
 8015a58:	4629      	mov	r1, r5
 8015a5a:	f7ea fbcb 	bl	80001f4 <__adddf3>
 8015a5e:	4602      	mov	r2, r0
 8015a60:	460b      	mov	r3, r1
 8015a62:	ec43 2b17 	vmov	d7, r2, r3
}
 8015a66:	eeb0 0a47 	vmov.f32	s0, s14
 8015a6a:	eef0 0a67 	vmov.f32	s1, s15
 8015a6e:	3720      	adds	r7, #32
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bdb0      	pop	{r4, r5, r7, pc}
 8015a74:	f3af 8000 	nop.w
 8015a78:	00000000 	.word	0x00000000
 8015a7c:	41224f80 	.word	0x41224f80
 8015a80:	080293b8 	.word	0x080293b8

08015a84 <_convertAscii2Hex>:

static uint8_t _convertAscii2Hex(char n)    // convert '0'..'9','A'..'F' to 0..15
{
 8015a84:	b480      	push	{r7}
 8015a86:	b083      	sub	sp, #12
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	71fb      	strb	r3, [r7, #7]
	n -= '0';
 8015a8e:	79fb      	ldrb	r3, [r7, #7]
 8015a90:	3b30      	subs	r3, #48	; 0x30
 8015a92:	71fb      	strb	r3, [r7, #7]
	if (n > 9) n -= 7;
 8015a94:	79fb      	ldrb	r3, [r7, #7]
 8015a96:	2b09      	cmp	r3, #9
 8015a98:	d902      	bls.n	8015aa0 <_convertAscii2Hex+0x1c>
 8015a9a:	79fb      	ldrb	r3, [r7, #7]
 8015a9c:	3b07      	subs	r3, #7
 8015a9e:	71fb      	strb	r3, [r7, #7]
	n &= 0x0F;
 8015aa0:	79fb      	ldrb	r3, [r7, #7]
 8015aa2:	f003 030f 	and.w	r3, r3, #15
 8015aa6:	71fb      	strb	r3, [r7, #7]
	return n;
 8015aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	370c      	adds	r7, #12
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab4:	4770      	bx	lr

08015ab6 <_evtTimerFinish>:

static void _evtTimerFinish(PifIssuerP p_issuer)
{
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b084      	sub	sp, #16
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
    PifGps* p_owner = (PifGps*)p_issuer;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	60fb      	str	r3, [r7, #12]

	p_owner->_connect = FALSE;
 8015ac2:	68fa      	ldr	r2, [r7, #12]
 8015ac4:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015ac8:	f36f 0341 	bfc	r3, #1, #1
 8015acc:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_fix = FALSE;
 8015ad0:	68fa      	ldr	r2, [r7, #12]
 8015ad2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015ad6:	f36f 0300 	bfc	r3, #0, #1
 8015ada:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
    p_owner->_num_sat = 0;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	if (p_owner->__evt_timeout) (*p_owner->__evt_timeout)(p_owner);
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d003      	beq.n	8015af6 <_evtTimerFinish+0x40>
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015af2:	68f8      	ldr	r0, [r7, #12]
 8015af4:	4798      	blx	r3
}
 8015af6:	bf00      	nop
 8015af8:	3710      	adds	r7, #16
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
	...

08015b00 <pifGps_Init>:

BOOL pifGps_Init(PifGps* p_owner, PifId id)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b082      	sub	sp, #8
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
 8015b08:	460b      	mov	r3, r1
 8015b0a:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d104      	bne.n	8015b1c <pifGps_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8015b12:	4b0e      	ldr	r3, [pc, #56]	; (8015b4c <pifGps_Init+0x4c>)
 8015b14:	2201      	movs	r2, #1
 8015b16:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	e012      	b.n	8015b42 <pifGps_Init+0x42>
	}

    memset(p_owner, 0, sizeof(PifGps));
 8015b1c:	2268      	movs	r2, #104	; 0x68
 8015b1e:	2100      	movs	r1, #0
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f00d fb61 	bl	80231e8 <memset>

	if (id == PIF_ID_AUTO) id = pif_id++;
 8015b26:	887b      	ldrh	r3, [r7, #2]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d106      	bne.n	8015b3a <pifGps_Init+0x3a>
 8015b2c:	4b08      	ldr	r3, [pc, #32]	; (8015b50 <pifGps_Init+0x50>)
 8015b2e:	881b      	ldrh	r3, [r3, #0]
 8015b30:	1c5a      	adds	r2, r3, #1
 8015b32:	b291      	uxth	r1, r2
 8015b34:	4a06      	ldr	r2, [pc, #24]	; (8015b50 <pifGps_Init+0x50>)
 8015b36:	8011      	strh	r1, [r2, #0]
 8015b38:	807b      	strh	r3, [r7, #2]
	p_owner->_id = id;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	887a      	ldrh	r2, [r7, #2]
 8015b3e:	819a      	strh	r2, [r3, #12]
	return TRUE;
 8015b40:	2301      	movs	r3, #1
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3708      	adds	r7, #8
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}
 8015b4a:	bf00      	nop
 8015b4c:	20001d48 	.word	0x20001d48
 8015b50:	20000128 	.word	0x20000128

08015b54 <pifGps_SetTimeout>:
	}
	p_owner->__evt_text = NULL;
}

BOOL pifGps_SetTimeout(PifGps* p_owner, PifTimerManager* p_timer_manager, uint32_t timeout, PifEvtGpsTimeout evt_timeout)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	60f8      	str	r0, [r7, #12]
 8015b5c:	60b9      	str	r1, [r7, #8]
 8015b5e:	607a      	str	r2, [r7, #4]
 8015b60:	603b      	str	r3, [r7, #0]
	if (timeout > 0) {
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d025      	beq.n	8015bb4 <pifGps_SetTimeout+0x60>
		if (!p_owner->__p_timer) {
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d116      	bne.n	8015b9e <pifGps_SetTimeout+0x4a>
			p_owner->__p_timer = pifTimerManager_Add(p_timer_manager, TT_ONCE);
 8015b70:	2100      	movs	r1, #0
 8015b72:	68b8      	ldr	r0, [r7, #8]
 8015b74:	f7ff f9cc 	bl	8014f10 <pifTimerManager_Add>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	655a      	str	r2, [r3, #84]	; 0x54
			if (!p_owner->__p_timer) return FALSE;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d101      	bne.n	8015b8a <pifGps_SetTimeout+0x36>
 8015b86:	2300      	movs	r3, #0
 8015b88:	e01e      	b.n	8015bc8 <pifGps_SetTimeout+0x74>
			pifTimer_AttachEvtFinish(p_owner->__p_timer, _evtTimerFinish, p_owner);
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015b8e:	68fa      	ldr	r2, [r7, #12]
 8015b90:	490f      	ldr	r1, [pc, #60]	; (8015bd0 <pifGps_SetTimeout+0x7c>)
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7ff fae9 	bl	801516a <pifTimer_AttachEvtFinish>
		    p_owner->__evt_timeout = evt_timeout;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	683a      	ldr	r2, [r7, #0]
 8015b9c:	65da      	str	r2, [r3, #92]	; 0x5c
		}
	    if (!pifTimer_Start(p_owner->__p_timer, timeout)) return FALSE;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015ba2:	6879      	ldr	r1, [r7, #4]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7ff f9eb 	bl	8014f80 <pifTimer_Start>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d10a      	bne.n	8015bc6 <pifGps_SetTimeout+0x72>
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	e009      	b.n	8015bc8 <pifGps_SetTimeout+0x74>
	}
	else {
		if (p_owner->__p_timer) pifTimer_Stop(p_owner->__p_timer);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d004      	beq.n	8015bc6 <pifGps_SetTimeout+0x72>
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7ff fa0b 	bl	8014fdc <pifTimer_Stop>
	}
    return TRUE;
 8015bc6:	2301      	movs	r3, #1
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	3710      	adds	r7, #16
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	bd80      	pop	{r7, pc}
 8015bd0:	08015ab7 	.word	0x08015ab7

08015bd4 <pifGps_SendEvent>:

void pifGps_SendEvent(PifGps* p_owner)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
	p_owner->_connect = TRUE;
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015be2:	f043 0302 	orr.w	r3, r3, #2
 8015be6:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
	if (p_owner->evt_receive) (*p_owner->evt_receive)(p_owner);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d003      	beq.n	8015bfa <pifGps_SendEvent+0x26>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	685b      	ldr	r3, [r3, #4]
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	4798      	blx	r3
	if (p_owner->__p_timer) pifTimer_Reset(p_owner->__p_timer);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d004      	beq.n	8015c0c <pifGps_SendEvent+0x38>
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff f9fe 	bl	8015008 <pifTimer_Reset>
}
 8015c0c:	bf00      	nop
 8015c0e:	3708      	adds	r7, #8
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	0000      	movs	r0, r0
	...

08015c18 <pifGps_ParsingNmea>:
	p_owner->__evt_text = evt_text;
	return TRUE;
}

BOOL pifGps_ParsingNmea(PifGps* p_owner, uint8_t c)
{
 8015c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015c1c:	b08e      	sub	sp, #56	; 0x38
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8015c22:	460b      	mov	r3, r1
 8015c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	BOOL rtn = FALSE;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t frame_ok = 0;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t param = 0, offset = 0, parity = 0;
	static char string[PIF_GPS_NMEA_VALUE_SIZE];
	static uint8_t checksum_param = 0;
	static uint16_t msg_id = PIF_GPS_NMEA_MSG_ID_NONE;

	if (c == '$') {
 8015c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c38:	2b24      	cmp	r3, #36	; 0x24
 8015c3a:	d11a      	bne.n	8015c72 <pifGps_ParsingNmea+0x5a>
		param = 0;
 8015c3c:	4b80      	ldr	r3, [pc, #512]	; (8015e40 <pifGps_ParsingNmea+0x228>)
 8015c3e:	2200      	movs	r2, #0
 8015c40:	701a      	strb	r2, [r3, #0]
		offset = 0;
 8015c42:	4b80      	ldr	r3, [pc, #512]	; (8015e44 <pifGps_ParsingNmea+0x22c>)
 8015c44:	2200      	movs	r2, #0
 8015c46:	701a      	strb	r2, [r3, #0]
		parity = 0;
 8015c48:	4b7f      	ldr	r3, [pc, #508]	; (8015e48 <pifGps_ParsingNmea+0x230>)
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8015c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c50:	689b      	ldr	r3, [r3, #8]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d00a      	beq.n	8015c6c <pifGps_ParsingNmea+0x54>
			string[0] = c;
 8015c56:	4a7d      	ldr	r2, [pc, #500]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c5c:	7013      	strb	r3, [r2, #0]
			string[1] = 0;
 8015c5e:	4b7b      	ldr	r3, [pc, #492]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015c60:	2200      	movs	r2, #0
 8015c62:	705a      	strb	r2, [r3, #1]
			(p_owner->evt_frame)(string);
 8015c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c66:	689b      	ldr	r3, [r3, #8]
 8015c68:	4878      	ldr	r0, [pc, #480]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015c6a:	4798      	blx	r3
		}
		return TRUE;
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	f000 bc7e 	b.w	801656e <pifGps_ParsingNmea+0x956>
	}
	else if (c == ',' || c == '*') {
 8015c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c76:	2b2c      	cmp	r3, #44	; 0x2c
 8015c78:	d004      	beq.n	8015c84 <pifGps_ParsingNmea+0x6c>
 8015c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8015c80:	f040 83e2 	bne.w	8016448 <pifGps_ParsingNmea+0x830>
		string[offset] = 0;
 8015c84:	4b6f      	ldr	r3, [pc, #444]	; (8015e44 <pifGps_ParsingNmea+0x22c>)
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	4619      	mov	r1, r3
 8015c8a:	4a70      	ldr	r2, [pc, #448]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	5453      	strb	r3, [r2, r1]
		if (param == 0) { //frame identification
 8015c90:	4b6b      	ldr	r3, [pc, #428]	; (8015e40 <pifGps_ParsingNmea+0x228>)
 8015c92:	781b      	ldrb	r3, [r3, #0]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f040 8100 	bne.w	8015e9a <pifGps_ParsingNmea+0x282>
			msg_id = PIF_GPS_NMEA_MSG_ID_NONE;
 8015c9a:	4b6d      	ldr	r3, [pc, #436]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	801a      	strh	r2, [r3, #0]
			if (string[2] == 'D' && string[3] == 'T' && string[4] == 'M') msg_id = PIF_GPS_NMEA_MSG_ID_DTM;
 8015ca0:	4b6a      	ldr	r3, [pc, #424]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015ca2:	789b      	ldrb	r3, [r3, #2]
 8015ca4:	2b44      	cmp	r3, #68	; 0x44
 8015ca6:	d10b      	bne.n	8015cc0 <pifGps_ParsingNmea+0xa8>
 8015ca8:	4b68      	ldr	r3, [pc, #416]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015caa:	78db      	ldrb	r3, [r3, #3]
 8015cac:	2b54      	cmp	r3, #84	; 0x54
 8015cae:	d107      	bne.n	8015cc0 <pifGps_ParsingNmea+0xa8>
 8015cb0:	4b66      	ldr	r3, [pc, #408]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015cb2:	791b      	ldrb	r3, [r3, #4]
 8015cb4:	2b4d      	cmp	r3, #77	; 0x4d
 8015cb6:	d103      	bne.n	8015cc0 <pifGps_ParsingNmea+0xa8>
 8015cb8:	4b65      	ldr	r3, [pc, #404]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015cba:	2201      	movs	r2, #1
 8015cbc:	801a      	strh	r2, [r3, #0]
 8015cbe:	e38c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'B' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GBS;
 8015cc0:	4b62      	ldr	r3, [pc, #392]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015cc2:	789b      	ldrb	r3, [r3, #2]
 8015cc4:	2b47      	cmp	r3, #71	; 0x47
 8015cc6:	d10b      	bne.n	8015ce0 <pifGps_ParsingNmea+0xc8>
 8015cc8:	4b60      	ldr	r3, [pc, #384]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015cca:	78db      	ldrb	r3, [r3, #3]
 8015ccc:	2b42      	cmp	r3, #66	; 0x42
 8015cce:	d107      	bne.n	8015ce0 <pifGps_ParsingNmea+0xc8>
 8015cd0:	4b5e      	ldr	r3, [pc, #376]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015cd2:	791b      	ldrb	r3, [r3, #4]
 8015cd4:	2b53      	cmp	r3, #83	; 0x53
 8015cd6:	d103      	bne.n	8015ce0 <pifGps_ParsingNmea+0xc8>
 8015cd8:	4b5d      	ldr	r3, [pc, #372]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015cda:	2202      	movs	r2, #2
 8015cdc:	801a      	strh	r2, [r3, #0]
 8015cde:	e37c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'G' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GGA;
 8015ce0:	4b5a      	ldr	r3, [pc, #360]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015ce2:	789b      	ldrb	r3, [r3, #2]
 8015ce4:	2b47      	cmp	r3, #71	; 0x47
 8015ce6:	d10b      	bne.n	8015d00 <pifGps_ParsingNmea+0xe8>
 8015ce8:	4b58      	ldr	r3, [pc, #352]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015cea:	78db      	ldrb	r3, [r3, #3]
 8015cec:	2b47      	cmp	r3, #71	; 0x47
 8015cee:	d107      	bne.n	8015d00 <pifGps_ParsingNmea+0xe8>
 8015cf0:	4b56      	ldr	r3, [pc, #344]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015cf2:	791b      	ldrb	r3, [r3, #4]
 8015cf4:	2b41      	cmp	r3, #65	; 0x41
 8015cf6:	d103      	bne.n	8015d00 <pifGps_ParsingNmea+0xe8>
 8015cf8:	4b55      	ldr	r3, [pc, #340]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015cfa:	2203      	movs	r2, #3
 8015cfc:	801a      	strh	r2, [r3, #0]
 8015cfe:	e36c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'L' && string[4] == 'L') msg_id = PIF_GPS_NMEA_MSG_ID_GLL;
 8015d00:	4b52      	ldr	r3, [pc, #328]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d02:	789b      	ldrb	r3, [r3, #2]
 8015d04:	2b47      	cmp	r3, #71	; 0x47
 8015d06:	d10b      	bne.n	8015d20 <pifGps_ParsingNmea+0x108>
 8015d08:	4b50      	ldr	r3, [pc, #320]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d0a:	78db      	ldrb	r3, [r3, #3]
 8015d0c:	2b4c      	cmp	r3, #76	; 0x4c
 8015d0e:	d107      	bne.n	8015d20 <pifGps_ParsingNmea+0x108>
 8015d10:	4b4e      	ldr	r3, [pc, #312]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d12:	791b      	ldrb	r3, [r3, #4]
 8015d14:	2b4c      	cmp	r3, #76	; 0x4c
 8015d16:	d103      	bne.n	8015d20 <pifGps_ParsingNmea+0x108>
 8015d18:	4b4d      	ldr	r3, [pc, #308]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015d1a:	2204      	movs	r2, #4
 8015d1c:	801a      	strh	r2, [r3, #0]
 8015d1e:	e35c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'N' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GNS;
 8015d20:	4b4a      	ldr	r3, [pc, #296]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d22:	789b      	ldrb	r3, [r3, #2]
 8015d24:	2b47      	cmp	r3, #71	; 0x47
 8015d26:	d10b      	bne.n	8015d40 <pifGps_ParsingNmea+0x128>
 8015d28:	4b48      	ldr	r3, [pc, #288]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d2a:	78db      	ldrb	r3, [r3, #3]
 8015d2c:	2b4e      	cmp	r3, #78	; 0x4e
 8015d2e:	d107      	bne.n	8015d40 <pifGps_ParsingNmea+0x128>
 8015d30:	4b46      	ldr	r3, [pc, #280]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d32:	791b      	ldrb	r3, [r3, #4]
 8015d34:	2b53      	cmp	r3, #83	; 0x53
 8015d36:	d103      	bne.n	8015d40 <pifGps_ParsingNmea+0x128>
 8015d38:	4b45      	ldr	r3, [pc, #276]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015d3a:	2205      	movs	r2, #5
 8015d3c:	801a      	strh	r2, [r3, #0]
 8015d3e:	e34c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'R' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_GRS;
 8015d40:	4b42      	ldr	r3, [pc, #264]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d42:	789b      	ldrb	r3, [r3, #2]
 8015d44:	2b47      	cmp	r3, #71	; 0x47
 8015d46:	d10b      	bne.n	8015d60 <pifGps_ParsingNmea+0x148>
 8015d48:	4b40      	ldr	r3, [pc, #256]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d4a:	78db      	ldrb	r3, [r3, #3]
 8015d4c:	2b52      	cmp	r3, #82	; 0x52
 8015d4e:	d107      	bne.n	8015d60 <pifGps_ParsingNmea+0x148>
 8015d50:	4b3e      	ldr	r3, [pc, #248]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d52:	791b      	ldrb	r3, [r3, #4]
 8015d54:	2b53      	cmp	r3, #83	; 0x53
 8015d56:	d103      	bne.n	8015d60 <pifGps_ParsingNmea+0x148>
 8015d58:	4b3d      	ldr	r3, [pc, #244]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015d5a:	2206      	movs	r2, #6
 8015d5c:	801a      	strh	r2, [r3, #0]
 8015d5e:	e33c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_GSA;
 8015d60:	4b3a      	ldr	r3, [pc, #232]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d62:	789b      	ldrb	r3, [r3, #2]
 8015d64:	2b47      	cmp	r3, #71	; 0x47
 8015d66:	d10b      	bne.n	8015d80 <pifGps_ParsingNmea+0x168>
 8015d68:	4b38      	ldr	r3, [pc, #224]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d6a:	78db      	ldrb	r3, [r3, #3]
 8015d6c:	2b53      	cmp	r3, #83	; 0x53
 8015d6e:	d107      	bne.n	8015d80 <pifGps_ParsingNmea+0x168>
 8015d70:	4b36      	ldr	r3, [pc, #216]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d72:	791b      	ldrb	r3, [r3, #4]
 8015d74:	2b41      	cmp	r3, #65	; 0x41
 8015d76:	d103      	bne.n	8015d80 <pifGps_ParsingNmea+0x168>
 8015d78:	4b35      	ldr	r3, [pc, #212]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015d7a:	2207      	movs	r2, #7
 8015d7c:	801a      	strh	r2, [r3, #0]
 8015d7e:	e32c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_GST;
 8015d80:	4b32      	ldr	r3, [pc, #200]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d82:	789b      	ldrb	r3, [r3, #2]
 8015d84:	2b47      	cmp	r3, #71	; 0x47
 8015d86:	d10b      	bne.n	8015da0 <pifGps_ParsingNmea+0x188>
 8015d88:	4b30      	ldr	r3, [pc, #192]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d8a:	78db      	ldrb	r3, [r3, #3]
 8015d8c:	2b53      	cmp	r3, #83	; 0x53
 8015d8e:	d107      	bne.n	8015da0 <pifGps_ParsingNmea+0x188>
 8015d90:	4b2e      	ldr	r3, [pc, #184]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015d92:	791b      	ldrb	r3, [r3, #4]
 8015d94:	2b54      	cmp	r3, #84	; 0x54
 8015d96:	d103      	bne.n	8015da0 <pifGps_ParsingNmea+0x188>
 8015d98:	4b2d      	ldr	r3, [pc, #180]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015d9a:	2208      	movs	r2, #8
 8015d9c:	801a      	strh	r2, [r3, #0]
 8015d9e:	e31c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'G' && string[3] == 'S' && string[4] == 'V') msg_id = PIF_GPS_NMEA_MSG_ID_GSV;
 8015da0:	4b2a      	ldr	r3, [pc, #168]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015da2:	789b      	ldrb	r3, [r3, #2]
 8015da4:	2b47      	cmp	r3, #71	; 0x47
 8015da6:	d10b      	bne.n	8015dc0 <pifGps_ParsingNmea+0x1a8>
 8015da8:	4b28      	ldr	r3, [pc, #160]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015daa:	78db      	ldrb	r3, [r3, #3]
 8015dac:	2b53      	cmp	r3, #83	; 0x53
 8015dae:	d107      	bne.n	8015dc0 <pifGps_ParsingNmea+0x1a8>
 8015db0:	4b26      	ldr	r3, [pc, #152]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015db2:	791b      	ldrb	r3, [r3, #4]
 8015db4:	2b56      	cmp	r3, #86	; 0x56
 8015db6:	d103      	bne.n	8015dc0 <pifGps_ParsingNmea+0x1a8>
 8015db8:	4b25      	ldr	r3, [pc, #148]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015dba:	2209      	movs	r2, #9
 8015dbc:	801a      	strh	r2, [r3, #0]
 8015dbe:	e30c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'R' && string[3] == 'M' && string[4] == 'C') msg_id = PIF_GPS_NMEA_MSG_ID_RMC;
 8015dc0:	4b22      	ldr	r3, [pc, #136]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015dc2:	789b      	ldrb	r3, [r3, #2]
 8015dc4:	2b52      	cmp	r3, #82	; 0x52
 8015dc6:	d10b      	bne.n	8015de0 <pifGps_ParsingNmea+0x1c8>
 8015dc8:	4b20      	ldr	r3, [pc, #128]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015dca:	78db      	ldrb	r3, [r3, #3]
 8015dcc:	2b4d      	cmp	r3, #77	; 0x4d
 8015dce:	d107      	bne.n	8015de0 <pifGps_ParsingNmea+0x1c8>
 8015dd0:	4b1e      	ldr	r3, [pc, #120]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015dd2:	791b      	ldrb	r3, [r3, #4]
 8015dd4:	2b43      	cmp	r3, #67	; 0x43
 8015dd6:	d103      	bne.n	8015de0 <pifGps_ParsingNmea+0x1c8>
 8015dd8:	4b1d      	ldr	r3, [pc, #116]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015dda:	220a      	movs	r2, #10
 8015ddc:	801a      	strh	r2, [r3, #0]
 8015dde:	e2fc      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'H' && string[4] == 'S') msg_id = PIF_GPS_NMEA_MSG_ID_THS;
 8015de0:	4b1a      	ldr	r3, [pc, #104]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015de2:	789b      	ldrb	r3, [r3, #2]
 8015de4:	2b54      	cmp	r3, #84	; 0x54
 8015de6:	d10b      	bne.n	8015e00 <pifGps_ParsingNmea+0x1e8>
 8015de8:	4b18      	ldr	r3, [pc, #96]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015dea:	78db      	ldrb	r3, [r3, #3]
 8015dec:	2b48      	cmp	r3, #72	; 0x48
 8015dee:	d107      	bne.n	8015e00 <pifGps_ParsingNmea+0x1e8>
 8015df0:	4b16      	ldr	r3, [pc, #88]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015df2:	791b      	ldrb	r3, [r3, #4]
 8015df4:	2b53      	cmp	r3, #83	; 0x53
 8015df6:	d103      	bne.n	8015e00 <pifGps_ParsingNmea+0x1e8>
 8015df8:	4b15      	ldr	r3, [pc, #84]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015dfa:	220b      	movs	r2, #11
 8015dfc:	801a      	strh	r2, [r3, #0]
 8015dfe:	e2ec      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'T' && string[3] == 'X' && string[4] == 'T') msg_id = PIF_GPS_NMEA_MSG_ID_TXT;
 8015e00:	4b12      	ldr	r3, [pc, #72]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015e02:	789b      	ldrb	r3, [r3, #2]
 8015e04:	2b54      	cmp	r3, #84	; 0x54
 8015e06:	d10b      	bne.n	8015e20 <pifGps_ParsingNmea+0x208>
 8015e08:	4b10      	ldr	r3, [pc, #64]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015e0a:	78db      	ldrb	r3, [r3, #3]
 8015e0c:	2b58      	cmp	r3, #88	; 0x58
 8015e0e:	d107      	bne.n	8015e20 <pifGps_ParsingNmea+0x208>
 8015e10:	4b0e      	ldr	r3, [pc, #56]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015e12:	791b      	ldrb	r3, [r3, #4]
 8015e14:	2b54      	cmp	r3, #84	; 0x54
 8015e16:	d103      	bne.n	8015e20 <pifGps_ParsingNmea+0x208>
 8015e18:	4b0d      	ldr	r3, [pc, #52]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015e1a:	220c      	movs	r2, #12
 8015e1c:	801a      	strh	r2, [r3, #0]
 8015e1e:	e2dc      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'V' && string[3] == 'L' && string[4] == 'W') msg_id = PIF_GPS_NMEA_MSG_ID_VLW;
 8015e20:	4b0a      	ldr	r3, [pc, #40]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015e22:	789b      	ldrb	r3, [r3, #2]
 8015e24:	2b56      	cmp	r3, #86	; 0x56
 8015e26:	d115      	bne.n	8015e54 <pifGps_ParsingNmea+0x23c>
 8015e28:	4b08      	ldr	r3, [pc, #32]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015e2a:	78db      	ldrb	r3, [r3, #3]
 8015e2c:	2b4c      	cmp	r3, #76	; 0x4c
 8015e2e:	d111      	bne.n	8015e54 <pifGps_ParsingNmea+0x23c>
 8015e30:	4b06      	ldr	r3, [pc, #24]	; (8015e4c <pifGps_ParsingNmea+0x234>)
 8015e32:	791b      	ldrb	r3, [r3, #4]
 8015e34:	2b57      	cmp	r3, #87	; 0x57
 8015e36:	d10d      	bne.n	8015e54 <pifGps_ParsingNmea+0x23c>
 8015e38:	4b05      	ldr	r3, [pc, #20]	; (8015e50 <pifGps_ParsingNmea+0x238>)
 8015e3a:	220d      	movs	r2, #13
 8015e3c:	801a      	strh	r2, [r3, #0]
 8015e3e:	e2cc      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
 8015e40:	20001ebd 	.word	0x20001ebd
 8015e44:	20001ebe 	.word	0x20001ebe
 8015e48:	20001ebf 	.word	0x20001ebf
 8015e4c:	20001ec0 	.word	0x20001ec0
 8015e50:	20001ee0 	.word	0x20001ee0
			else if (string[2] == 'V' && string[3] == 'T' && string[4] == 'G') msg_id = PIF_GPS_NMEA_MSG_ID_VTG;
 8015e54:	4ba1      	ldr	r3, [pc, #644]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015e56:	789b      	ldrb	r3, [r3, #2]
 8015e58:	2b56      	cmp	r3, #86	; 0x56
 8015e5a:	d10b      	bne.n	8015e74 <pifGps_ParsingNmea+0x25c>
 8015e5c:	4b9f      	ldr	r3, [pc, #636]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015e5e:	78db      	ldrb	r3, [r3, #3]
 8015e60:	2b54      	cmp	r3, #84	; 0x54
 8015e62:	d107      	bne.n	8015e74 <pifGps_ParsingNmea+0x25c>
 8015e64:	4b9d      	ldr	r3, [pc, #628]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015e66:	791b      	ldrb	r3, [r3, #4]
 8015e68:	2b47      	cmp	r3, #71	; 0x47
 8015e6a:	d103      	bne.n	8015e74 <pifGps_ParsingNmea+0x25c>
 8015e6c:	4b9c      	ldr	r3, [pc, #624]	; (80160e0 <pifGps_ParsingNmea+0x4c8>)
 8015e6e:	220e      	movs	r2, #14
 8015e70:	801a      	strh	r2, [r3, #0]
 8015e72:	e2b2      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
			else if (string[2] == 'Z' && string[3] == 'D' && string[4] == 'A') msg_id = PIF_GPS_NMEA_MSG_ID_ZDA;
 8015e74:	4b99      	ldr	r3, [pc, #612]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015e76:	789b      	ldrb	r3, [r3, #2]
 8015e78:	2b5a      	cmp	r3, #90	; 0x5a
 8015e7a:	f040 82ae 	bne.w	80163da <pifGps_ParsingNmea+0x7c2>
 8015e7e:	4b97      	ldr	r3, [pc, #604]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015e80:	78db      	ldrb	r3, [r3, #3]
 8015e82:	2b44      	cmp	r3, #68	; 0x44
 8015e84:	f040 82a9 	bne.w	80163da <pifGps_ParsingNmea+0x7c2>
 8015e88:	4b94      	ldr	r3, [pc, #592]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015e8a:	791b      	ldrb	r3, [r3, #4]
 8015e8c:	2b41      	cmp	r3, #65	; 0x41
 8015e8e:	f040 82a4 	bne.w	80163da <pifGps_ParsingNmea+0x7c2>
 8015e92:	4b93      	ldr	r3, [pc, #588]	; (80160e0 <pifGps_ParsingNmea+0x4c8>)
 8015e94:	220f      	movs	r2, #15
 8015e96:	801a      	strh	r2, [r3, #0]
 8015e98:	e29f      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
		}
		else if (offset) {
 8015e9a:	4b92      	ldr	r3, [pc, #584]	; (80160e4 <pifGps_ParsingNmea+0x4cc>)
 8015e9c:	781b      	ldrb	r3, [r3, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	f000 828c 	beq.w	80163bc <pifGps_ParsingNmea+0x7a4>
			switch (msg_id) {
 8015ea4:	4b8e      	ldr	r3, [pc, #568]	; (80160e0 <pifGps_ParsingNmea+0x4c8>)
 8015ea6:	881b      	ldrh	r3, [r3, #0]
 8015ea8:	3b01      	subs	r3, #1
 8015eaa:	2b0e      	cmp	r3, #14
 8015eac:	f200 8295 	bhi.w	80163da <pifGps_ParsingNmea+0x7c2>
 8015eb0:	a201      	add	r2, pc, #4	; (adr r2, 8015eb8 <pifGps_ParsingNmea+0x2a0>)
 8015eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eb6:	bf00      	nop
 8015eb8:	080163db 	.word	0x080163db
 8015ebc:	080163db 	.word	0x080163db
 8015ec0:	08015ef5 	.word	0x08015ef5
 8015ec4:	08015ffd 	.word	0x08015ffd
 8015ec8:	080160a7 	.word	0x080160a7
 8015ecc:	080163db 	.word	0x080163db
 8015ed0:	080163db 	.word	0x080163db
 8015ed4:	080163db 	.word	0x080163db
 8015ed8:	080163db 	.word	0x080163db
 8015edc:	08016195 	.word	0x08016195
 8015ee0:	080163db 	.word	0x080163db
 8015ee4:	0801628f 	.word	0x0801628f
 8015ee8:	080163db 	.word	0x080163db
 8015eec:	08016301 	.word	0x08016301
 8015ef0:	08016347 	.word	0x08016347

			case PIF_GPS_NMEA_MSG_ID_GBS:
				break;

			case PIF_GPS_NMEA_MSG_ID_GGA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8015ef4:	4b7c      	ldr	r3, [pc, #496]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	2b01      	cmp	r3, #1
 8015efa:	d106      	bne.n	8015f0a <pifGps_ParsingNmea+0x2f2>
 8015efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efe:	330e      	adds	r3, #14
 8015f00:	4619      	mov	r1, r3
 8015f02:	4876      	ldr	r0, [pc, #472]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015f04:	f7ff fbd6 	bl	80156b4 <_convertString2Time>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 8015f08:	e25a      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015f0a:	4b77      	ldr	r3, [pc, #476]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015f0c:	781b      	ldrb	r3, [r3, #0]
 8015f0e:	2b02      	cmp	r3, #2
 8015f10:	d10a      	bne.n	8015f28 <pifGps_ParsingNmea+0x310>
 8015f12:	4872      	ldr	r0, [pc, #456]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015f14:	f7ff fd14 	bl	8015940 <_convertString2Degrees>
 8015f18:	eeb0 7a40 	vmov.f32	s14, s0
 8015f1c:	eef0 7a60 	vmov.f32	s15, s1
 8015f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f22:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 8015f26:	e24b      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 8015f28:	4b6f      	ldr	r3, [pc, #444]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015f2a:	781b      	ldrb	r3, [r3, #0]
 8015f2c:	2b03      	cmp	r3, #3
 8015f2e:	d110      	bne.n	8015f52 <pifGps_ParsingNmea+0x33a>
 8015f30:	4b6a      	ldr	r3, [pc, #424]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b53      	cmp	r3, #83	; 0x53
 8015f36:	d10c      	bne.n	8015f52 <pifGps_ParsingNmea+0x33a>
 8015f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015f3e:	623a      	str	r2, [r7, #32]
 8015f40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f44:	627b      	str	r3, [r7, #36]	; 0x24
 8015f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f48:	ed97 7b08 	vldr	d7, [r7, #32]
 8015f4c:	ed83 7b06 	vstr	d7, [r3, #24]
 8015f50:	e053      	b.n	8015ffa <pifGps_ParsingNmea+0x3e2>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8015f52:	4b65      	ldr	r3, [pc, #404]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b04      	cmp	r3, #4
 8015f58:	d10a      	bne.n	8015f70 <pifGps_ParsingNmea+0x358>
 8015f5a:	4860      	ldr	r0, [pc, #384]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015f5c:	f7ff fcf0 	bl	8015940 <_convertString2Degrees>
 8015f60:	eeb0 7a40 	vmov.f32	s14, s0
 8015f64:	eef0 7a60 	vmov.f32	s15, s1
 8015f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6a:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8015f6e:	e227      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8015f70:	4b5d      	ldr	r3, [pc, #372]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	2b05      	cmp	r3, #5
 8015f76:	d110      	bne.n	8015f9a <pifGps_ParsingNmea+0x382>
 8015f78:	4b58      	ldr	r3, [pc, #352]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	2b57      	cmp	r3, #87	; 0x57
 8015f7e:	d10c      	bne.n	8015f9a <pifGps_ParsingNmea+0x382>
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f86:	61ba      	str	r2, [r7, #24]
 8015f88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8015f8c:	61fb      	str	r3, [r7, #28]
 8015f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f90:	ed97 7b06 	vldr	d7, [r7, #24]
 8015f94:	ed83 7b08 	vstr	d7, [r3, #32]
 8015f98:	e02f      	b.n	8015ffa <pifGps_ParsingNmea+0x3e2>
				else if (param == 6) p_owner->_fix = (string[0]  > '0');
 8015f9a:	4b53      	ldr	r3, [pc, #332]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	2b06      	cmp	r3, #6
 8015fa0:	d10e      	bne.n	8015fc0 <pifGps_ParsingNmea+0x3a8>
 8015fa2:	4b4e      	ldr	r3, [pc, #312]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	2b30      	cmp	r3, #48	; 0x30
 8015fa8:	bf8c      	ite	hi
 8015faa:	2301      	movhi	r3, #1
 8015fac:	2300      	movls	r3, #0
 8015fae:	b2d9      	uxtb	r1, r3
 8015fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fb2:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8015fb6:	f361 0300 	bfi	r3, r1, #0, #1
 8015fba:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
				break;
 8015fbe:	e1ff      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8015fc0:	4b49      	ldr	r3, [pc, #292]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2b07      	cmp	r3, #7
 8015fc6:	d108      	bne.n	8015fda <pifGps_ParsingNmea+0x3c2>
 8015fc8:	4844      	ldr	r0, [pc, #272]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015fca:	f7ff fc81 	bl	80158d0 <_convertString2Interger>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8015fd8:	e1f2      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8015fda:	4b43      	ldr	r3, [pc, #268]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	2b09      	cmp	r3, #9
 8015fe0:	f040 81ee 	bne.w	80163c0 <pifGps_ParsingNmea+0x7a8>
 8015fe4:	483d      	ldr	r0, [pc, #244]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8015fe6:	f7ff fbe7 	bl	80157b8 <_convertString2Float>
 8015fea:	eeb0 7a40 	vmov.f32	s14, s0
 8015fee:	eef0 7a60 	vmov.f32	s15, s1
 8015ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8015ff8:	e1e2      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>
 8015ffa:	e1e1      	b.n	80163c0 <pifGps_ParsingNmea+0x7a8>

			case PIF_GPS_NMEA_MSG_ID_GLL:
				if (param == 1) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 8015ffc:	4b3a      	ldr	r3, [pc, #232]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	2b01      	cmp	r3, #1
 8016002:	d10a      	bne.n	801601a <pifGps_ParsingNmea+0x402>
 8016004:	4835      	ldr	r0, [pc, #212]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8016006:	f7ff fc9b 	bl	8015940 <_convertString2Degrees>
 801600a:	eeb0 7a40 	vmov.f32	s14, s0
 801600e:	eef0 7a60 	vmov.f32	s15, s1
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	ed83 7b06 	vstr	d7, [r3, #24]
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
				break;
 8016018:	e1d4      	b.n	80163c4 <pifGps_ParsingNmea+0x7ac>
				else if (param == 2 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 801601a:	4b33      	ldr	r3, [pc, #204]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	2b02      	cmp	r3, #2
 8016020:	d110      	bne.n	8016044 <pifGps_ParsingNmea+0x42c>
 8016022:	4b2e      	ldr	r3, [pc, #184]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 8016024:	781b      	ldrb	r3, [r3, #0]
 8016026:	2b53      	cmp	r3, #83	; 0x53
 8016028:	d10c      	bne.n	8016044 <pifGps_ParsingNmea+0x42c>
 801602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016030:	613a      	str	r2, [r7, #16]
 8016032:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016036:	617b      	str	r3, [r7, #20]
 8016038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801603a:	ed97 7b04 	vldr	d7, [r7, #16]
 801603e:	ed83 7b06 	vstr	d7, [r3, #24]
 8016042:	e02f      	b.n	80160a4 <pifGps_ParsingNmea+0x48c>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016044:	4b28      	ldr	r3, [pc, #160]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	2b03      	cmp	r3, #3
 801604a:	d10a      	bne.n	8016062 <pifGps_ParsingNmea+0x44a>
 801604c:	4823      	ldr	r0, [pc, #140]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 801604e:	f7ff fc77 	bl	8015940 <_convertString2Degrees>
 8016052:	eeb0 7a40 	vmov.f32	s14, s0
 8016056:	eef0 7a60 	vmov.f32	s15, s1
 801605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801605c:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016060:	e1b0      	b.n	80163c4 <pifGps_ParsingNmea+0x7ac>
				else if (param == 4 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016062:	4b21      	ldr	r3, [pc, #132]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	2b04      	cmp	r3, #4
 8016068:	d110      	bne.n	801608c <pifGps_ParsingNmea+0x474>
 801606a:	4b1c      	ldr	r3, [pc, #112]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 801606c:	781b      	ldrb	r3, [r3, #0]
 801606e:	2b57      	cmp	r3, #87	; 0x57
 8016070:	d10c      	bne.n	801608c <pifGps_ParsingNmea+0x474>
 8016072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016078:	60ba      	str	r2, [r7, #8]
 801607a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801607e:	60fb      	str	r3, [r7, #12]
 8016080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016082:	ed97 7b02 	vldr	d7, [r7, #8]
 8016086:	ed83 7b08 	vstr	d7, [r3, #32]
 801608a:	e00b      	b.n	80160a4 <pifGps_ParsingNmea+0x48c>
				else if (param == 5) _convertString2Time(string, &p_owner->_utc);
 801608c:	4b16      	ldr	r3, [pc, #88]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	2b05      	cmp	r3, #5
 8016092:	f040 8197 	bne.w	80163c4 <pifGps_ParsingNmea+0x7ac>
 8016096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016098:	330e      	adds	r3, #14
 801609a:	4619      	mov	r1, r3
 801609c:	480f      	ldr	r0, [pc, #60]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 801609e:	f7ff fb09 	bl	80156b4 <_convertString2Time>
				break;
 80160a2:	e18f      	b.n	80163c4 <pifGps_ParsingNmea+0x7ac>
 80160a4:	e18e      	b.n	80163c4 <pifGps_ParsingNmea+0x7ac>

			case PIF_GPS_NMEA_MSG_ID_GNS:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 80160a6:	4b10      	ldr	r3, [pc, #64]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	d106      	bne.n	80160bc <pifGps_ParsingNmea+0x4a4>
 80160ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b0:	330e      	adds	r3, #14
 80160b2:	4619      	mov	r1, r3
 80160b4:	4809      	ldr	r0, [pc, #36]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 80160b6:	f7ff fafd 	bl	80156b4 <_convertString2Time>
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
				break;
 80160ba:	e185      	b.n	80163c8 <pifGps_ParsingNmea+0x7b0>
				else if (param == 2) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80160bc:	4b0a      	ldr	r3, [pc, #40]	; (80160e8 <pifGps_ParsingNmea+0x4d0>)
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	2b02      	cmp	r3, #2
 80160c2:	d113      	bne.n	80160ec <pifGps_ParsingNmea+0x4d4>
 80160c4:	4805      	ldr	r0, [pc, #20]	; (80160dc <pifGps_ParsingNmea+0x4c4>)
 80160c6:	f7ff fc3b 	bl	8015940 <_convertString2Degrees>
 80160ca:	eeb0 7a40 	vmov.f32	s14, s0
 80160ce:	eef0 7a60 	vmov.f32	s15, s1
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 80160d8:	e176      	b.n	80163c8 <pifGps_ParsingNmea+0x7b0>
 80160da:	bf00      	nop
 80160dc:	20001ec0 	.word	0x20001ec0
 80160e0:	20001ee0 	.word	0x20001ee0
 80160e4:	20001ebe 	.word	0x20001ebe
 80160e8:	20001ebd 	.word	0x20001ebd
				else if (param == 3 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80160ec:	4b9e      	ldr	r3, [pc, #632]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	2b03      	cmp	r3, #3
 80160f2:	d110      	bne.n	8016116 <pifGps_ParsingNmea+0x4fe>
 80160f4:	4b9d      	ldr	r3, [pc, #628]	; (801636c <pifGps_ParsingNmea+0x754>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b53      	cmp	r3, #83	; 0x53
 80160fa:	d10c      	bne.n	8016116 <pifGps_ParsingNmea+0x4fe>
 80160fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016102:	603a      	str	r2, [r7, #0]
 8016104:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016108:	607b      	str	r3, [r7, #4]
 801610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610c:	ed97 7b00 	vldr	d7, [r7]
 8016110:	ed83 7b06 	vstr	d7, [r3, #24]
 8016114:	e03d      	b.n	8016192 <pifGps_ParsingNmea+0x57a>
				else if (param == 4) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 8016116:	4b94      	ldr	r3, [pc, #592]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b04      	cmp	r3, #4
 801611c:	d10a      	bne.n	8016134 <pifGps_ParsingNmea+0x51c>
 801611e:	4893      	ldr	r0, [pc, #588]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016120:	f7ff fc0e 	bl	8015940 <_convertString2Degrees>
 8016124:	eeb0 7a40 	vmov.f32	s14, s0
 8016128:	eef0 7a60 	vmov.f32	s15, s1
 801612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612e:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016132:	e149      	b.n	80163c8 <pifGps_ParsingNmea+0x7b0>
				else if (param == 5 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 8016134:	4b8c      	ldr	r3, [pc, #560]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016136:	781b      	ldrb	r3, [r3, #0]
 8016138:	2b05      	cmp	r3, #5
 801613a:	d10d      	bne.n	8016158 <pifGps_ParsingNmea+0x540>
 801613c:	4b8b      	ldr	r3, [pc, #556]	; (801636c <pifGps_ParsingNmea+0x754>)
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	2b57      	cmp	r3, #87	; 0x57
 8016142:	d109      	bne.n	8016158 <pifGps_ParsingNmea+0x540>
 8016144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016146:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801614a:	4692      	mov	sl, r2
 801614c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8016150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016152:	e9c3 ab08 	strd	sl, fp, [r3, #32]
 8016156:	e01c      	b.n	8016192 <pifGps_ParsingNmea+0x57a>
				else if (param == 7) p_owner->_num_sat = _convertString2Interger(string);
 8016158:	4b83      	ldr	r3, [pc, #524]	; (8016368 <pifGps_ParsingNmea+0x750>)
 801615a:	781b      	ldrb	r3, [r3, #0]
 801615c:	2b07      	cmp	r3, #7
 801615e:	d108      	bne.n	8016172 <pifGps_ParsingNmea+0x55a>
 8016160:	4882      	ldr	r0, [pc, #520]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016162:	f7ff fbb5 	bl	80158d0 <_convertString2Interger>
 8016166:	4603      	mov	r3, r0
 8016168:	b2da      	uxtb	r2, r3
 801616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				break;
 8016170:	e12a      	b.n	80163c8 <pifGps_ParsingNmea+0x7b0>
				else if (param == 9) p_owner->_altitude = _convertString2Float(string);
 8016172:	4b7d      	ldr	r3, [pc, #500]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016174:	781b      	ldrb	r3, [r3, #0]
 8016176:	2b09      	cmp	r3, #9
 8016178:	f040 8126 	bne.w	80163c8 <pifGps_ParsingNmea+0x7b0>
 801617c:	487b      	ldr	r0, [pc, #492]	; (801636c <pifGps_ParsingNmea+0x754>)
 801617e:	f7ff fb1b 	bl	80157b8 <_convertString2Float>
 8016182:	eeb0 7a40 	vmov.f32	s14, s0
 8016186:	eef0 7a60 	vmov.f32	s15, s1
 801618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				break;
 8016190:	e11a      	b.n	80163c8 <pifGps_ParsingNmea+0x7b0>
 8016192:	e119      	b.n	80163c8 <pifGps_ParsingNmea+0x7b0>

			case PIF_GPS_NMEA_MSG_ID_GSV:
				break;

			case PIF_GPS_NMEA_MSG_ID_RMC:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8016194:	4b74      	ldr	r3, [pc, #464]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	2b01      	cmp	r3, #1
 801619a:	d106      	bne.n	80161aa <pifGps_ParsingNmea+0x592>
 801619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619e:	330e      	adds	r3, #14
 80161a0:	4619      	mov	r1, r3
 80161a2:	4872      	ldr	r0, [pc, #456]	; (801636c <pifGps_ParsingNmea+0x754>)
 80161a4:	f7ff fa86 	bl	80156b4 <_convertString2Time>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
				break;
 80161a8:	e110      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>
				else if (param == 3) p_owner->_coord_deg[PIF_GPS_LAT] = _convertString2Degrees(string);
 80161aa:	4b6f      	ldr	r3, [pc, #444]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80161ac:	781b      	ldrb	r3, [r3, #0]
 80161ae:	2b03      	cmp	r3, #3
 80161b0:	d10a      	bne.n	80161c8 <pifGps_ParsingNmea+0x5b0>
 80161b2:	486e      	ldr	r0, [pc, #440]	; (801636c <pifGps_ParsingNmea+0x754>)
 80161b4:	f7ff fbc4 	bl	8015940 <_convertString2Degrees>
 80161b8:	eeb0 7a40 	vmov.f32	s14, s0
 80161bc:	eef0 7a60 	vmov.f32	s15, s1
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	ed83 7b06 	vstr	d7, [r3, #24]
				break;
 80161c6:	e101      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>
				else if (param == 4 && string[0] == 'S') p_owner->_coord_deg[PIF_GPS_LAT] = -p_owner->_coord_deg[PIF_GPS_LAT];
 80161c8:	4b67      	ldr	r3, [pc, #412]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	2b04      	cmp	r3, #4
 80161ce:	d10d      	bne.n	80161ec <pifGps_ParsingNmea+0x5d4>
 80161d0:	4b66      	ldr	r3, [pc, #408]	; (801636c <pifGps_ParsingNmea+0x754>)
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	2b53      	cmp	r3, #83	; 0x53
 80161d6:	d109      	bne.n	80161ec <pifGps_ParsingNmea+0x5d4>
 80161d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80161de:	4690      	mov	r8, r2
 80161e0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80161e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e6:	e9c3 8906 	strd	r8, r9, [r3, #24]
 80161ea:	e04f      	b.n	801628c <pifGps_ParsingNmea+0x674>
				else if (param == 5) p_owner->_coord_deg[PIF_GPS_LON] = _convertString2Degrees(string);
 80161ec:	4b5e      	ldr	r3, [pc, #376]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80161ee:	781b      	ldrb	r3, [r3, #0]
 80161f0:	2b05      	cmp	r3, #5
 80161f2:	d10a      	bne.n	801620a <pifGps_ParsingNmea+0x5f2>
 80161f4:	485d      	ldr	r0, [pc, #372]	; (801636c <pifGps_ParsingNmea+0x754>)
 80161f6:	f7ff fba3 	bl	8015940 <_convertString2Degrees>
 80161fa:	eeb0 7a40 	vmov.f32	s14, s0
 80161fe:	eef0 7a60 	vmov.f32	s15, s1
 8016202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016204:	ed83 7b08 	vstr	d7, [r3, #32]
				break;
 8016208:	e0e0      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>
				else if (param == 6 && string[0] == 'W') p_owner->_coord_deg[PIF_GPS_LON] = -p_owner->_coord_deg[PIF_GPS_LON];
 801620a:	4b57      	ldr	r3, [pc, #348]	; (8016368 <pifGps_ParsingNmea+0x750>)
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	2b06      	cmp	r3, #6
 8016210:	d10d      	bne.n	801622e <pifGps_ParsingNmea+0x616>
 8016212:	4b56      	ldr	r3, [pc, #344]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	2b57      	cmp	r3, #87	; 0x57
 8016218:	d109      	bne.n	801622e <pifGps_ParsingNmea+0x616>
 801621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016220:	4614      	mov	r4, r2
 8016222:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8016226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016228:	e9c3 4508 	strd	r4, r5, [r3, #32]
 801622c:	e02e      	b.n	801628c <pifGps_ParsingNmea+0x674>
				else if (param == 7) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 801622e:	4b4e      	ldr	r3, [pc, #312]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	2b07      	cmp	r3, #7
 8016234:	d10f      	bne.n	8016256 <pifGps_ParsingNmea+0x63e>
 8016236:	484d      	ldr	r0, [pc, #308]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016238:	f7ff fabe 	bl	80157b8 <_convertString2Float>
 801623c:	ec51 0b10 	vmov	r0, r1, d0
 8016240:	a347      	add	r3, pc, #284	; (adr r3, 8016360 <pifGps_ParsingNmea+0x748>)
 8016242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016246:	f7ea f98b 	bl	8000560 <__aeabi_dmul>
 801624a:	4602      	mov	r2, r0
 801624c:	460b      	mov	r3, r1
 801624e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016250:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 8016254:	e0ba      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>
				else if (param == 8) p_owner->_ground_course = _convertString2Float(string);
 8016256:	4b44      	ldr	r3, [pc, #272]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	2b08      	cmp	r3, #8
 801625c:	d10a      	bne.n	8016274 <pifGps_ParsingNmea+0x65c>
 801625e:	4843      	ldr	r0, [pc, #268]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016260:	f7ff faaa 	bl	80157b8 <_convertString2Float>
 8016264:	eeb0 7a40 	vmov.f32	s14, s0
 8016268:	eef0 7a60 	vmov.f32	s15, s1
 801626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				break;
 8016272:	e0ab      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>
				else if (param == 9) _convertString2Date(string, &p_owner->_utc);
 8016274:	4b3c      	ldr	r3, [pc, #240]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	2b09      	cmp	r3, #9
 801627a:	f040 80a7 	bne.w	80163cc <pifGps_ParsingNmea+0x7b4>
 801627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016280:	330e      	adds	r3, #14
 8016282:	4619      	mov	r1, r3
 8016284:	4839      	ldr	r0, [pc, #228]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016286:	f7ff f9d1 	bl	801562c <_convertString2Date>
				break;
 801628a:	e09f      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>
 801628c:	e09e      	b.n	80163cc <pifGps_ParsingNmea+0x7b4>

			case PIF_GPS_NMEA_MSG_ID_THS:
				break;

			case PIF_GPS_NMEA_MSG_ID_TXT:
				if (p_owner->__evt_text) {
 801628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016292:	2b00      	cmp	r3, #0
 8016294:	f000 809c 	beq.w	80163d0 <pifGps_ParsingNmea+0x7b8>
					if (param == 1) p_owner->__p_txt->total = _convertString2Interger(string);
 8016298:	4b33      	ldr	r3, [pc, #204]	; (8016368 <pifGps_ParsingNmea+0x750>)
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	2b01      	cmp	r3, #1
 801629e:	d108      	bne.n	80162b2 <pifGps_ParsingNmea+0x69a>
 80162a0:	4832      	ldr	r0, [pc, #200]	; (801636c <pifGps_ParsingNmea+0x754>)
 80162a2:	f7ff fb15 	bl	80158d0 <_convertString2Interger>
 80162a6:	4602      	mov	r2, r0
 80162a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162ac:	b2d2      	uxtb	r2, r2
 80162ae:	701a      	strb	r2, [r3, #0]
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
				}
				break;
 80162b0:	e08e      	b.n	80163d0 <pifGps_ParsingNmea+0x7b8>
					else if (param == 2) p_owner->__p_txt->num = _convertString2Interger(string);
 80162b2:	4b2d      	ldr	r3, [pc, #180]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	2b02      	cmp	r3, #2
 80162b8:	d108      	bne.n	80162cc <pifGps_ParsingNmea+0x6b4>
 80162ba:	482c      	ldr	r0, [pc, #176]	; (801636c <pifGps_ParsingNmea+0x754>)
 80162bc:	f7ff fb08 	bl	80158d0 <_convertString2Interger>
 80162c0:	4602      	mov	r2, r0
 80162c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162c6:	b2d2      	uxtb	r2, r2
 80162c8:	705a      	strb	r2, [r3, #1]
				break;
 80162ca:	e081      	b.n	80163d0 <pifGps_ParsingNmea+0x7b8>
					else if (param == 3) p_owner->__p_txt->type = _convertString2Interger(string);
 80162cc:	4b26      	ldr	r3, [pc, #152]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	2b03      	cmp	r3, #3
 80162d2:	d108      	bne.n	80162e6 <pifGps_ParsingNmea+0x6ce>
 80162d4:	4825      	ldr	r0, [pc, #148]	; (801636c <pifGps_ParsingNmea+0x754>)
 80162d6:	f7ff fafb 	bl	80158d0 <_convertString2Interger>
 80162da:	4602      	mov	r2, r0
 80162dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162e0:	b2d2      	uxtb	r2, r2
 80162e2:	709a      	strb	r2, [r3, #2]
				break;
 80162e4:	e074      	b.n	80163d0 <pifGps_ParsingNmea+0x7b8>
					else if (param == 4) strncpy(p_owner->__p_txt->text, string, PIF_GPS_NMEA_TEXT_SIZE - 1);
 80162e6:	4b20      	ldr	r3, [pc, #128]	; (8016368 <pifGps_ParsingNmea+0x750>)
 80162e8:	781b      	ldrb	r3, [r3, #0]
 80162ea:	2b04      	cmp	r3, #4
 80162ec:	d170      	bne.n	80163d0 <pifGps_ParsingNmea+0x7b8>
 80162ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162f2:	3303      	adds	r3, #3
 80162f4:	223f      	movs	r2, #63	; 0x3f
 80162f6:	491d      	ldr	r1, [pc, #116]	; (801636c <pifGps_ParsingNmea+0x754>)
 80162f8:	4618      	mov	r0, r3
 80162fa:	f00d f8e3 	bl	80234c4 <strncpy>
				break;
 80162fe:	e067      	b.n	80163d0 <pifGps_ParsingNmea+0x7b8>

			case PIF_GPS_NMEA_MSG_ID_VLW:
				break;

			case PIF_GPS_NMEA_MSG_ID_VTG:
				if (param == 1) p_owner->_ground_course = _convertString2Float(string);
 8016300:	4b19      	ldr	r3, [pc, #100]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	2b01      	cmp	r3, #1
 8016306:	d10a      	bne.n	801631e <pifGps_ParsingNmea+0x706>
 8016308:	4818      	ldr	r0, [pc, #96]	; (801636c <pifGps_ParsingNmea+0x754>)
 801630a:	f7ff fa55 	bl	80157b8 <_convertString2Float>
 801630e:	eeb0 7a40 	vmov.f32	s14, s0
 8016312:	eef0 7a60 	vmov.f32	s15, s1
 8016316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016318:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
				break;
 801631c:	e05a      	b.n	80163d4 <pifGps_ParsingNmea+0x7bc>
				else if (param == 5) p_owner->_ground_speed = _convertString2Float(string) * 51444L;	// knots -> cm/s
 801631e:	4b12      	ldr	r3, [pc, #72]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	2b05      	cmp	r3, #5
 8016324:	d156      	bne.n	80163d4 <pifGps_ParsingNmea+0x7bc>
 8016326:	4811      	ldr	r0, [pc, #68]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016328:	f7ff fa46 	bl	80157b8 <_convertString2Float>
 801632c:	ec51 0b10 	vmov	r0, r1, d0
 8016330:	a30b      	add	r3, pc, #44	; (adr r3, 8016360 <pifGps_ParsingNmea+0x748>)
 8016332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016336:	f7ea f913 	bl	8000560 <__aeabi_dmul>
 801633a:	4602      	mov	r2, r0
 801633c:	460b      	mov	r3, r1
 801633e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016340:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				break;
 8016344:	e046      	b.n	80163d4 <pifGps_ParsingNmea+0x7bc>

			case PIF_GPS_NMEA_MSG_ID_ZDA:
				if (param == 1) _convertString2Time(string, &p_owner->_utc);
 8016346:	4b08      	ldr	r3, [pc, #32]	; (8016368 <pifGps_ParsingNmea+0x750>)
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d110      	bne.n	8016370 <pifGps_ParsingNmea+0x758>
 801634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016350:	330e      	adds	r3, #14
 8016352:	4619      	mov	r1, r3
 8016354:	4805      	ldr	r0, [pc, #20]	; (801636c <pifGps_ParsingNmea+0x754>)
 8016356:	f7ff f9ad 	bl	80156b4 <_convertString2Time>
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
				break;
 801635a:	e03d      	b.n	80163d8 <pifGps_ParsingNmea+0x7c0>
 801635c:	f3af 8000 	nop.w
 8016360:	00000000 	.word	0x00000000
 8016364:	40e91e80 	.word	0x40e91e80
 8016368:	20001ebd 	.word	0x20001ebd
 801636c:	20001ec0 	.word	0x20001ec0
				else if (param == 2) p_owner->_utc.day = _convertString2Interger(string);
 8016370:	4b81      	ldr	r3, [pc, #516]	; (8016578 <pifGps_ParsingNmea+0x960>)
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	2b02      	cmp	r3, #2
 8016376:	d107      	bne.n	8016388 <pifGps_ParsingNmea+0x770>
 8016378:	4880      	ldr	r0, [pc, #512]	; (801657c <pifGps_ParsingNmea+0x964>)
 801637a:	f7ff faa9 	bl	80158d0 <_convertString2Interger>
 801637e:	4603      	mov	r3, r0
 8016380:	b2da      	uxtb	r2, r3
 8016382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016384:	741a      	strb	r2, [r3, #16]
				break;
 8016386:	e027      	b.n	80163d8 <pifGps_ParsingNmea+0x7c0>
				else if (param == 3) p_owner->_utc.month = _convertString2Interger(string);
 8016388:	4b7b      	ldr	r3, [pc, #492]	; (8016578 <pifGps_ParsingNmea+0x960>)
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	2b03      	cmp	r3, #3
 801638e:	d107      	bne.n	80163a0 <pifGps_ParsingNmea+0x788>
 8016390:	487a      	ldr	r0, [pc, #488]	; (801657c <pifGps_ParsingNmea+0x964>)
 8016392:	f7ff fa9d 	bl	80158d0 <_convertString2Interger>
 8016396:	4603      	mov	r3, r0
 8016398:	b2da      	uxtb	r2, r3
 801639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639c:	73da      	strb	r2, [r3, #15]
				break;
 801639e:	e01b      	b.n	80163d8 <pifGps_ParsingNmea+0x7c0>
				else if (param == 4) p_owner->_utc.year = _convertString2Interger(string) - 2000;
 80163a0:	4b75      	ldr	r3, [pc, #468]	; (8016578 <pifGps_ParsingNmea+0x960>)
 80163a2:	781b      	ldrb	r3, [r3, #0]
 80163a4:	2b04      	cmp	r3, #4
 80163a6:	d117      	bne.n	80163d8 <pifGps_ParsingNmea+0x7c0>
 80163a8:	4874      	ldr	r0, [pc, #464]	; (801657c <pifGps_ParsingNmea+0x964>)
 80163aa:	f7ff fa91 	bl	80158d0 <_convertString2Interger>
 80163ae:	4603      	mov	r3, r0
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	3330      	adds	r3, #48	; 0x30
 80163b4:	b2da      	uxtb	r2, r3
 80163b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163b8:	739a      	strb	r2, [r3, #14]
				break;
 80163ba:	e00d      	b.n	80163d8 <pifGps_ParsingNmea+0x7c0>
			}
		}
 80163bc:	bf00      	nop
 80163be:	e00c      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163c0:	bf00      	nop
 80163c2:	e00a      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163c4:	bf00      	nop
 80163c6:	e008      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163c8:	bf00      	nop
 80163ca:	e006      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163cc:	bf00      	nop
 80163ce:	e004      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163d0:	bf00      	nop
 80163d2:	e002      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163d4:	bf00      	nop
 80163d6:	e000      	b.n	80163da <pifGps_ParsingNmea+0x7c2>
				break;
 80163d8:	bf00      	nop
		param++;
 80163da:	4b67      	ldr	r3, [pc, #412]	; (8016578 <pifGps_ParsingNmea+0x960>)
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	3301      	adds	r3, #1
 80163e0:	b2da      	uxtb	r2, r3
 80163e2:	4b65      	ldr	r3, [pc, #404]	; (8016578 <pifGps_ParsingNmea+0x960>)
 80163e4:	701a      	strb	r2, [r3, #0]
		if (c == '*') checksum_param = 1;
 80163e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80163ea:	2b2a      	cmp	r3, #42	; 0x2a
 80163ec:	d103      	bne.n	80163f6 <pifGps_ParsingNmea+0x7de>
 80163ee:	4b64      	ldr	r3, [pc, #400]	; (8016580 <pifGps_ParsingNmea+0x968>)
 80163f0:	2201      	movs	r2, #1
 80163f2:	701a      	strb	r2, [r3, #0]
 80163f4:	e007      	b.n	8016406 <pifGps_ParsingNmea+0x7ee>
		else parity ^= c;
 80163f6:	4b63      	ldr	r3, [pc, #396]	; (8016584 <pifGps_ParsingNmea+0x96c>)
 80163f8:	781a      	ldrb	r2, [r3, #0]
 80163fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80163fe:	4053      	eors	r3, r2
 8016400:	b2da      	uxtb	r2, r3
 8016402:	4b60      	ldr	r3, [pc, #384]	; (8016584 <pifGps_ParsingNmea+0x96c>)
 8016404:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 8016406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016408:	689b      	ldr	r3, [r3, #8]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d018      	beq.n	8016440 <pifGps_ParsingNmea+0x828>
			string[offset++] = c;
 801640e:	4b5e      	ldr	r3, [pc, #376]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	1c5a      	adds	r2, r3, #1
 8016414:	b2d1      	uxtb	r1, r2
 8016416:	4a5c      	ldr	r2, [pc, #368]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016418:	7011      	strb	r1, [r2, #0]
 801641a:	4619      	mov	r1, r3
 801641c:	4a57      	ldr	r2, [pc, #348]	; (801657c <pifGps_ParsingNmea+0x964>)
 801641e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016422:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016424:	4b58      	ldr	r3, [pc, #352]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016426:	781b      	ldrb	r3, [r3, #0]
 8016428:	1c5a      	adds	r2, r3, #1
 801642a:	b2d1      	uxtb	r1, r2
 801642c:	4a56      	ldr	r2, [pc, #344]	; (8016588 <pifGps_ParsingNmea+0x970>)
 801642e:	7011      	strb	r1, [r2, #0]
 8016430:	461a      	mov	r2, r3
 8016432:	4b52      	ldr	r3, [pc, #328]	; (801657c <pifGps_ParsingNmea+0x964>)
 8016434:	2100      	movs	r1, #0
 8016436:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643a:	689b      	ldr	r3, [r3, #8]
 801643c:	484f      	ldr	r0, [pc, #316]	; (801657c <pifGps_ParsingNmea+0x964>)
 801643e:	4798      	blx	r3
		}
		offset = 0;
 8016440:	4b51      	ldr	r3, [pc, #324]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016442:	2200      	movs	r2, #0
 8016444:	701a      	strb	r2, [r3, #0]
 8016446:	e091      	b.n	801656c <pifGps_ParsingNmea+0x954>
	}
	else if (c == '\r' || c == '\n') {
 8016448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801644c:	2b0d      	cmp	r3, #13
 801644e:	d003      	beq.n	8016458 <pifGps_ParsingNmea+0x840>
 8016450:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016454:	2b0a      	cmp	r3, #10
 8016456:	d16e      	bne.n	8016536 <pifGps_ParsingNmea+0x91e>
		if (msg_id && checksum_param) { //parity checksum
 8016458:	4b4c      	ldr	r3, [pc, #304]	; (801658c <pifGps_ParsingNmea+0x974>)
 801645a:	881b      	ldrh	r3, [r3, #0]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d03d      	beq.n	80164dc <pifGps_ParsingNmea+0x8c4>
 8016460:	4b47      	ldr	r3, [pc, #284]	; (8016580 <pifGps_ParsingNmea+0x968>)
 8016462:	781b      	ldrb	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d039      	beq.n	80164dc <pifGps_ParsingNmea+0x8c4>
			uint8_t checksum = _convertAscii2Hex(string[0]);
 8016468:	4b44      	ldr	r3, [pc, #272]	; (801657c <pifGps_ParsingNmea+0x964>)
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	4618      	mov	r0, r3
 801646e:	f7ff fb09 	bl	8015a84 <_convertAscii2Hex>
 8016472:	4603      	mov	r3, r0
 8016474:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum <<= 4;
 8016478:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801647c:	011b      	lsls	r3, r3, #4
 801647e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			checksum += _convertAscii2Hex(string[1]);
 8016482:	4b3e      	ldr	r3, [pc, #248]	; (801657c <pifGps_ParsingNmea+0x964>)
 8016484:	785b      	ldrb	r3, [r3, #1]
 8016486:	4618      	mov	r0, r3
 8016488:	f7ff fafc 	bl	8015a84 <_convertAscii2Hex>
 801648c:	4603      	mov	r3, r0
 801648e:	461a      	mov	r2, r3
 8016490:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016494:	4413      	add	r3, r2
 8016496:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (checksum == parity) {
 801649a:	4b3a      	ldr	r3, [pc, #232]	; (8016584 <pifGps_ParsingNmea+0x96c>)
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d117      	bne.n	80164d6 <pifGps_ParsingNmea+0x8be>
				if (msg_id == p_owner->evt_nmea_msg_id) frame_ok = 1;
 80164a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	b29a      	uxth	r2, r3
 80164ac:	4b37      	ldr	r3, [pc, #220]	; (801658c <pifGps_ParsingNmea+0x974>)
 80164ae:	881b      	ldrh	r3, [r3, #0]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	d102      	bne.n	80164ba <pifGps_ParsingNmea+0x8a2>
 80164b4:	2301      	movs	r3, #1
 80164b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				if (msg_id == PIF_GPS_NMEA_MSG_ID_TXT && p_owner->__evt_text) {
 80164ba:	4b34      	ldr	r3, [pc, #208]	; (801658c <pifGps_ParsingNmea+0x974>)
 80164bc:	881b      	ldrh	r3, [r3, #0]
 80164be:	2b0c      	cmp	r3, #12
 80164c0:	d109      	bne.n	80164d6 <pifGps_ParsingNmea+0x8be>
 80164c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d005      	beq.n	80164d6 <pifGps_ParsingNmea+0x8be>
					(p_owner->__evt_text)(p_owner->__p_txt);
 80164ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80164ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80164d2:	4610      	mov	r0, r2
 80164d4:	4798      	blx	r3
#ifndef __PIF_NO_LOG__
			else {
				pifLog_Printf(LT_ERROR, "GN(%u): MsgId=%u CS=%x:%x", __LINE__, msg_id, checksum, parity);
			}
#endif
			rtn = TRUE;
 80164d6:	2301      	movs	r3, #1
 80164d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		checksum_param = 0;
 80164dc:	4b28      	ldr	r3, [pc, #160]	; (8016580 <pifGps_ParsingNmea+0x968>)
 80164de:	2200      	movs	r2, #0
 80164e0:	701a      	strb	r2, [r3, #0]
		if (p_owner->evt_frame) {
 80164e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e4:	689b      	ldr	r3, [r3, #8]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d018      	beq.n	801651c <pifGps_ParsingNmea+0x904>
			string[offset++] = c;
 80164ea:	4b27      	ldr	r3, [pc, #156]	; (8016588 <pifGps_ParsingNmea+0x970>)
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	1c5a      	adds	r2, r3, #1
 80164f0:	b2d1      	uxtb	r1, r2
 80164f2:	4a25      	ldr	r2, [pc, #148]	; (8016588 <pifGps_ParsingNmea+0x970>)
 80164f4:	7011      	strb	r1, [r2, #0]
 80164f6:	4619      	mov	r1, r3
 80164f8:	4a20      	ldr	r2, [pc, #128]	; (801657c <pifGps_ParsingNmea+0x964>)
 80164fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80164fe:	5453      	strb	r3, [r2, r1]
			string[offset++] = 0;
 8016500:	4b21      	ldr	r3, [pc, #132]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	1c5a      	adds	r2, r3, #1
 8016506:	b2d1      	uxtb	r1, r2
 8016508:	4a1f      	ldr	r2, [pc, #124]	; (8016588 <pifGps_ParsingNmea+0x970>)
 801650a:	7011      	strb	r1, [r2, #0]
 801650c:	461a      	mov	r2, r3
 801650e:	4b1b      	ldr	r3, [pc, #108]	; (801657c <pifGps_ParsingNmea+0x964>)
 8016510:	2100      	movs	r1, #0
 8016512:	5499      	strb	r1, [r3, r2]
			(p_owner->evt_frame)(string);
 8016514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016516:	689b      	ldr	r3, [r3, #8]
 8016518:	4818      	ldr	r0, [pc, #96]	; (801657c <pifGps_ParsingNmea+0x964>)
 801651a:	4798      	blx	r3
		}
		offset = 0;
 801651c:	4b1a      	ldr	r3, [pc, #104]	; (8016588 <pifGps_ParsingNmea+0x970>)
 801651e:	2200      	movs	r2, #0
 8016520:	701a      	strb	r2, [r3, #0]
		if (frame_ok) {
 8016522:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8016526:	2b00      	cmp	r3, #0
 8016528:	d002      	beq.n	8016530 <pifGps_ParsingNmea+0x918>
			pifGps_SendEvent(p_owner);
 801652a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801652c:	f7ff fb52 	bl	8015bd4 <pifGps_SendEvent>
		}
		return rtn;
 8016530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016534:	e01b      	b.n	801656e <pifGps_ParsingNmea+0x956>
	}
	else {
		if (offset < PIF_GPS_NMEA_VALUE_SIZE) string[offset++] = c;
 8016536:	4b14      	ldr	r3, [pc, #80]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b1f      	cmp	r3, #31
 801653c:	d80a      	bhi.n	8016554 <pifGps_ParsingNmea+0x93c>
 801653e:	4b12      	ldr	r3, [pc, #72]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	1c5a      	adds	r2, r3, #1
 8016544:	b2d1      	uxtb	r1, r2
 8016546:	4a10      	ldr	r2, [pc, #64]	; (8016588 <pifGps_ParsingNmea+0x970>)
 8016548:	7011      	strb	r1, [r2, #0]
 801654a:	4619      	mov	r1, r3
 801654c:	4a0b      	ldr	r2, [pc, #44]	; (801657c <pifGps_ParsingNmea+0x964>)
 801654e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016552:	5453      	strb	r3, [r2, r1]
		if (!checksum_param) parity ^= c;
 8016554:	4b0a      	ldr	r3, [pc, #40]	; (8016580 <pifGps_ParsingNmea+0x968>)
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d107      	bne.n	801656c <pifGps_ParsingNmea+0x954>
 801655c:	4b09      	ldr	r3, [pc, #36]	; (8016584 <pifGps_ParsingNmea+0x96c>)
 801655e:	781a      	ldrb	r2, [r3, #0]
 8016560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016564:	4053      	eors	r3, r2
 8016566:	b2da      	uxtb	r2, r3
 8016568:	4b06      	ldr	r3, [pc, #24]	; (8016584 <pifGps_ParsingNmea+0x96c>)
 801656a:	701a      	strb	r2, [r3, #0]
	}
	return FALSE;
 801656c:	2300      	movs	r3, #0
}
 801656e:	4618      	mov	r0, r3
 8016570:	3738      	adds	r7, #56	; 0x38
 8016572:	46bd      	mov	sp, r7
 8016574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016578:	20001ebd 	.word	0x20001ebd
 801657c:	20001ec0 	.word	0x20001ec0
 8016580:	20001ee2 	.word	0x20001ee2
 8016584:	20001ebf 	.word	0x20001ebf
 8016588:	20001ebe 	.word	0x20001ebe
 801658c:	20001ee0 	.word	0x20001ee0

08016590 <_checksumUbx>:

#endif


static uint16_t _checksumUbx(uint8_t* p_header, uint8_t* p_payload, uint16_t len)
{
 8016590:	b480      	push	{r7}
 8016592:	b087      	sub	sp, #28
 8016594:	af00      	add	r7, sp, #0
 8016596:	60f8      	str	r0, [r7, #12]
 8016598:	60b9      	str	r1, [r7, #8]
 801659a:	4613      	mov	r3, r2
 801659c:	80fb      	strh	r3, [r7, #6]
	uint8_t ck_a = 0, ck_b = 0;
 801659e:	2300      	movs	r3, #0
 80165a0:	75fb      	strb	r3, [r7, #23]
 80165a2:	2300      	movs	r3, #0
 80165a4:	75bb      	strb	r3, [r7, #22]
	uint16_t i;

	for (i = 0; i < 4; i++) {
 80165a6:	2300      	movs	r3, #0
 80165a8:	82bb      	strh	r3, [r7, #20]
 80165aa:	e00d      	b.n	80165c8 <_checksumUbx+0x38>
		ck_a += p_header[i];
 80165ac:	8abb      	ldrh	r3, [r7, #20]
 80165ae:	68fa      	ldr	r2, [r7, #12]
 80165b0:	4413      	add	r3, r2
 80165b2:	781a      	ldrb	r2, [r3, #0]
 80165b4:	7dfb      	ldrb	r3, [r7, #23]
 80165b6:	4413      	add	r3, r2
 80165b8:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80165ba:	7dba      	ldrb	r2, [r7, #22]
 80165bc:	7dfb      	ldrb	r3, [r7, #23]
 80165be:	4413      	add	r3, r2
 80165c0:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < 4; i++) {
 80165c2:	8abb      	ldrh	r3, [r7, #20]
 80165c4:	3301      	adds	r3, #1
 80165c6:	82bb      	strh	r3, [r7, #20]
 80165c8:	8abb      	ldrh	r3, [r7, #20]
 80165ca:	2b03      	cmp	r3, #3
 80165cc:	d9ee      	bls.n	80165ac <_checksumUbx+0x1c>
	}
	for (i = 0; i < len; i++) {
 80165ce:	2300      	movs	r3, #0
 80165d0:	82bb      	strh	r3, [r7, #20]
 80165d2:	e00d      	b.n	80165f0 <_checksumUbx+0x60>
		ck_a += p_payload[i];
 80165d4:	8abb      	ldrh	r3, [r7, #20]
 80165d6:	68ba      	ldr	r2, [r7, #8]
 80165d8:	4413      	add	r3, r2
 80165da:	781a      	ldrb	r2, [r3, #0]
 80165dc:	7dfb      	ldrb	r3, [r7, #23]
 80165de:	4413      	add	r3, r2
 80165e0:	75fb      	strb	r3, [r7, #23]
		ck_b += ck_a;
 80165e2:	7dba      	ldrb	r2, [r7, #22]
 80165e4:	7dfb      	ldrb	r3, [r7, #23]
 80165e6:	4413      	add	r3, r2
 80165e8:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < len; i++) {
 80165ea:	8abb      	ldrh	r3, [r7, #20]
 80165ec:	3301      	adds	r3, #1
 80165ee:	82bb      	strh	r3, [r7, #20]
 80165f0:	8aba      	ldrh	r2, [r7, #20]
 80165f2:	88fb      	ldrh	r3, [r7, #6]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d3ed      	bcc.n	80165d4 <_checksumUbx+0x44>
	}
	return ck_a + (ck_b << 8);
 80165f8:	7dfb      	ldrb	r3, [r7, #23]
 80165fa:	b29a      	uxth	r2, r3
 80165fc:	7dbb      	ldrb	r3, [r7, #22]
 80165fe:	b29b      	uxth	r3, r3
 8016600:	021b      	lsls	r3, r3, #8
 8016602:	b29b      	uxth	r3, r3
 8016604:	4413      	add	r3, r2
 8016606:	b29b      	uxth	r3, r3
}
 8016608:	4618      	mov	r0, r3
 801660a:	371c      	adds	r7, #28
 801660c:	46bd      	mov	sp, r7
 801660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016612:	4770      	bx	lr

08016614 <_parsingPacket>:

static void _parsingPacket(PifGpsUblox *p_owner, PifActCommReceiveData act_receive_data)
{
 8016614:	b590      	push	{r4, r7, lr}
 8016616:	b085      	sub	sp, #20
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	6039      	str	r1, [r7, #0]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	33cc      	adds	r3, #204	; 0xcc
 8016622:	60fb      	str	r3, [r7, #12]
	uint8_t pkt_err;
	int line;
	static uint8_t pre_err = PKT_ERR_NONE;
#endif

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8016624:	e0c6      	b.n	80167b4 <_parsingPacket+0x1a0>
		switch (p_owner->__rx.state) {
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 801662c:	2b09      	cmp	r3, #9
 801662e:	f200 80c0 	bhi.w	80167b2 <_parsingPacket+0x19e>
 8016632:	a201      	add	r2, pc, #4	; (adr r2, 8016638 <_parsingPacket+0x24>)
 8016634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016638:	08016661 	.word	0x08016661
 801663c:	08016691 	.word	0x08016691
 8016640:	080166a3 	.word	0x080166a3
 8016644:	080166b3 	.word	0x080166b3
 8016648:	080166c3 	.word	0x080166c3
 801664c:	080166d5 	.word	0x080166d5
 8016650:	08016707 	.word	0x08016707
 8016654:	08016741 	.word	0x08016741
 8016658:	08016755 	.word	0x08016755
 801665c:	08016795 	.word	0x08016795
		case GURS_SYNC_CHAR_1:
			if (data == 0xB5) {
 8016660:	7afb      	ldrb	r3, [r7, #11]
 8016662:	2bb5      	cmp	r3, #181	; 0xb5
 8016664:	d104      	bne.n	8016670 <_parsingPacket+0x5c>
				p_owner->__rx.state = GURS_SYNC_CHAR_2;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2201      	movs	r2, #1
 801666a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 801666e:	e0a1      	b.n	80167b4 <_parsingPacket+0x1a0>
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
#endif
			}
			else if (pifGps_ParsingNmea(&p_owner->_gps, data)) {
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	3310      	adds	r3, #16
 8016674:	7afa      	ldrb	r2, [r7, #11]
 8016676:	4611      	mov	r1, r2
 8016678:	4618      	mov	r0, r3
 801667a:	f7ff facd 	bl	8015c18 <pifGps_ParsingNmea>
 801667e:	4603      	mov	r3, r0
 8016680:	2b00      	cmp	r3, #0
 8016682:	f000 8097 	beq.w	80167b4 <_parsingPacket+0x1a0>
				p_owner->__rx.state = GURS_NMEA;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	2209      	movs	r2, #9
 801668a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
#ifndef __PIF_NO_LOG__
				pre_err = PKT_ERR_NONE;
#endif
			}
			break;
 801668e:	e091      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_SYNC_CHAR_2:
			if (data == 0x62) {
 8016690:	7afb      	ldrb	r3, [r7, #11]
 8016692:	2b62      	cmp	r3, #98	; 0x62
 8016694:	f040 809b 	bne.w	80167ce <_parsingPacket+0x1ba>
				p_owner->__rx.state = GURS_CLASS;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2202      	movs	r2, #2
 801669c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_INVALID_DATA;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80166a0:	e088      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_CLASS:
			p_packet->class_id = data;
 80166a2:	7afa      	ldrb	r2, [r7, #11]
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.state = GURS_ID;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2203      	movs	r2, #3
 80166ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80166b0:	e080      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_ID:
			p_packet->msg_id = data;
 80166b2:	7afa      	ldrb	r2, [r7, #11]
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	705a      	strb	r2, [r3, #1]
			p_owner->__rx.state = GURS_LENGTH_LOW;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2204      	movs	r2, #4
 80166bc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80166c0:	e078      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_LENGTH_LOW:
			p_packet->length = data;
 80166c2:	7afb      	ldrb	r3, [r7, #11]
 80166c4:	b29a      	uxth	r2, r3
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	805a      	strh	r2, [r3, #2]
			p_owner->__rx.state = GURS_LENGTH_HIGH;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2205      	movs	r2, #5
 80166ce:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 80166d2:	e06f      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_LENGTH_HIGH:
			p_packet->length |= data << 8;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	885b      	ldrh	r3, [r3, #2]
 80166d8:	b21a      	sxth	r2, r3
 80166da:	7afb      	ldrb	r3, [r7, #11]
 80166dc:	021b      	lsls	r3, r3, #8
 80166de:	b21b      	sxth	r3, r3
 80166e0:	4313      	orrs	r3, r2
 80166e2:	b21b      	sxth	r3, r3
 80166e4:	b29a      	uxth	r2, r3
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	805a      	strh	r2, [r3, #2]
			if (p_packet->length < sizeof(PifGpsUbxPacket) - 4) {
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	885b      	ldrh	r3, [r3, #2]
 80166ee:	f5b3 7fc4 	cmp.w	r3, #392	; 0x188
 80166f2:	d26e      	bcs.n	80167d2 <_parsingPacket+0x1be>
				p_owner->__rx.payload_count = 0;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2200      	movs	r2, #0
 80166f8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				p_owner->__rx.state = GURS_PAYLOAD;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2206      	movs	r2, #6
 8016700:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				pkt_err = PKT_ERR_BIG_LENGHT;
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8016704:	e056      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_PAYLOAD:
			p_packet->payload.bytes[p_owner->__rx.payload_count] = data;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801670c:	4619      	mov	r1, r3
 801670e:	7afa      	ldrb	r2, [r7, #11]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	440b      	add	r3, r1
 8016714:	711a      	strb	r2, [r3, #4]
			p_owner->__rx.payload_count++;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801671c:	3301      	adds	r3, #1
 801671e:	b2da      	uxtb	r2, r3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			if (p_owner->__rx.payload_count >= p_packet->length) {
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 801672c:	b29a      	uxth	r2, r3
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	885b      	ldrh	r3, [r3, #2]
 8016732:	429a      	cmp	r2, r3
 8016734:	d33e      	bcc.n	80167b4 <_parsingPacket+0x1a0>
				p_owner->__rx.state = GURS_CK_A;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2207      	movs	r2, #7
 801673a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			}
			break;
 801673e:	e039      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_CK_A:
			p_owner->__rx.checksum = data;
 8016740:	7afb      	ldrb	r3, [r7, #11]
 8016742:	b29a      	uxth	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			p_owner->__rx.state = GURS_CK_B;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2208      	movs	r2, #8
 801674e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
			break;
 8016752:	e02f      	b.n	80167b4 <_parsingPacket+0x1a0>

		case GURS_CK_B:
			p_owner->__rx.checksum |= data << 8;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8b3 3258 	ldrh.w	r3, [r3, #600]	; 0x258
 801675a:	b21a      	sxth	r2, r3
 801675c:	7afb      	ldrb	r3, [r7, #11]
 801675e:	021b      	lsls	r3, r3, #8
 8016760:	b21b      	sxth	r3, r3
 8016762:	4313      	orrs	r3, r2
 8016764:	b21b      	sxth	r3, r3
 8016766:	b29a      	uxth	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
			if (p_owner->__rx.checksum == _checksumUbx((uint8_t*)p_packet, p_packet->payload.bytes, p_packet->length)) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8b3 4258 	ldrh.w	r4, [r3, #600]	; 0x258
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	1d19      	adds	r1, r3, #4
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	885b      	ldrh	r3, [r3, #2]
 801677c:	461a      	mov	r2, r3
 801677e:	68f8      	ldr	r0, [r7, #12]
 8016780:	f7ff ff06 	bl	8016590 <_checksumUbx>
 8016784:	4603      	mov	r3, r0
 8016786:	429c      	cmp	r4, r3
 8016788:	d125      	bne.n	80167d6 <_parsingPacket+0x1c2>
				p_owner->__rx.state = GURS_DONE;
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	220a      	movs	r2, #10
 801678e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 8016792:	e025      	b.n	80167e0 <_parsingPacket+0x1cc>
				goto fail;
			}
			break;

		case GURS_NMEA:
			if (pifGps_ParsingNmea(&p_owner->_gps, data))	{
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	3310      	adds	r3, #16
 8016798:	7afa      	ldrb	r2, [r7, #11]
 801679a:	4611      	mov	r1, r2
 801679c:	4618      	mov	r0, r3
 801679e:	f7ff fa3b 	bl	8015c18 <pifGps_ParsingNmea>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d005      	beq.n	80167b4 <_parsingPacket+0x1a0>
				p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2200      	movs	r2, #0
 80167ac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return;
 80167b0:	e016      	b.n	80167e0 <_parsingPacket+0x1cc>
			}
			break;

		default:
			break;
 80167b2:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80167ba:	f107 010b 	add.w	r1, r7, #11
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	4610      	mov	r0, r2
 80167c2:	4798      	blx	r3
 80167c4:	4603      	mov	r3, r0
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	f47f af2d 	bne.w	8016626 <_parsingPacket+0x12>
		}
	}
	return;
 80167cc:	e008      	b.n	80167e0 <_parsingPacket+0x1cc>
				goto fail;
 80167ce:	bf00      	nop
 80167d0:	e002      	b.n	80167d8 <_parsingPacket+0x1c4>
				goto fail;
 80167d2:	bf00      	nop
 80167d4:	e000      	b.n	80167d8 <_parsingPacket+0x1c4>
				goto fail;
 80167d6:	bf00      	nop
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_packet->payload.bytes[0], p_packet->payload.bytes[1],	p_packet->payload.bytes[2],
			p_packet->payload.bytes[3], p_packet->payload.bytes[4], p_packet->payload.bytes[5], p_packet->payload.bytes[6], p_packet->payload.bytes[7]);
#endif
#endif

	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2200      	movs	r2, #0
 80167dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 80167e0:	3714      	adds	r7, #20
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd90      	pop	{r4, r7, pc}
 80167e6:	bf00      	nop

080167e8 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b088      	sub	sp, #32
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
 80167f0:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	617b      	str	r3, [r7, #20]
	PifGpsUbxPacket* p_packet = &p_owner->__rx.packet;
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	33cc      	adds	r3, #204	; 0xcc
 80167fa:	613b      	str	r3, [r7, #16]
	PifGps *p_parent = &p_owner->_gps;
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	3310      	adds	r3, #16
 8016800:	60fb      	str	r3, [r7, #12]
    int i;
    static BOOL _new_position = FALSE;
    static BOOL next_fix = FALSE;
    static BOOL _new_speed = FALSE;
    BOOL error = FALSE;
 8016802:	2300      	movs	r3, #0
 8016804:	76fb      	strb	r3, [r7, #27]

    if (!p_owner->_gps.evt_receive) return;
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	695b      	ldr	r3, [r3, #20]
 801680a:	2b00      	cmp	r3, #0
 801680c:	f000 8233 	beq.w	8016c76 <_evtParsing+0x48e>

    if (p_owner->__rx.state < GURS_DONE) {
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016816:	2b09      	cmp	r3, #9
 8016818:	d803      	bhi.n	8016822 <_evtParsing+0x3a>
    	_parsingPacket(p_owner, act_receive_data);
 801681a:	6839      	ldr	r1, [r7, #0]
 801681c:	6978      	ldr	r0, [r7, #20]
 801681e:	f7ff fef9 	bl	8016614 <_parsingPacket>
    }

    if (p_owner->__rx.state == GURS_DONE) {
 8016822:	697b      	ldr	r3, [r7, #20]
 8016824:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8016828:	2b0a      	cmp	r3, #10
 801682a:	f040 8225 	bne.w	8016c78 <_evtParsing+0x490>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x %x %x %x", p_owner->_gps._id, p_packet->class_id, p_packet->msg_id, p_packet->length,
    			p_packet->payload.bytes[0], p_packet->payload.bytes[1], p_packet->payload.bytes[2], p_packet->payload.bytes[3], p_packet->payload.bytes[4]);
#endif
#endif

        switch (p_packet->class_id) {
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	2b01      	cmp	r3, #1
 8016834:	d017      	beq.n	8016866 <_evtParsing+0x7e>
 8016836:	2b05      	cmp	r3, #5
 8016838:	f040 81f6 	bne.w	8016c28 <_evtParsing+0x440>
        case GUCI_ACK:
        	switch (p_packet->msg_id) {
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	785b      	ldrb	r3, [r3, #1]
 8016840:	2b01      	cmp	r3, #1
 8016842:	d80b      	bhi.n	801685c <_evtParsing+0x74>
        	case GUMI_ACK_ACK:
        	case GUMI_ACK_NAK:
        		if (p_owner->evt_ubx_cfg_result) (*p_owner->evt_ubx_cfg_result)(p_owner, p_packet->msg_id);
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d00a      	beq.n	8016862 <_evtParsing+0x7a>
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	693a      	ldr	r2, [r7, #16]
 8016852:	7852      	ldrb	r2, [r2, #1]
 8016854:	4611      	mov	r1, r2
 8016856:	6978      	ldr	r0, [r7, #20]
 8016858:	4798      	blx	r3
        		break;
 801685a:	e002      	b.n	8016862 <_evtParsing+0x7a>

            default:
            	error = TRUE;
 801685c:	2301      	movs	r3, #1
 801685e:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
        		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
#endif
                break;
 8016860:	e000      	b.n	8016864 <_evtParsing+0x7c>
        		break;
 8016862:	bf00      	nop
        	}
        	break;
 8016864:	e1e3      	b.n	8016c2e <_evtParsing+0x446>

        case GUCI_NAV:
            switch (p_packet->msg_id) {
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	785b      	ldrb	r3, [r3, #1]
 801686a:	3b02      	subs	r3, #2
 801686c:	2b2e      	cmp	r3, #46	; 0x2e
 801686e:	f200 81bf 	bhi.w	8016bf0 <_evtParsing+0x408>
 8016872:	a201      	add	r2, pc, #4	; (adr r2, 8016878 <_evtParsing+0x90>)
 8016874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016878:	08016935 	.word	0x08016935
 801687c:	08016a5f 	.word	0x08016a5f
 8016880:	08016bf1 	.word	0x08016bf1
 8016884:	08016bf1 	.word	0x08016bf1
 8016888:	08016a1b 	.word	0x08016a1b
 801688c:	080169cf 	.word	0x080169cf
 8016890:	08016bf1 	.word	0x08016bf1
 8016894:	08016bf1 	.word	0x08016bf1
 8016898:	08016bf1 	.word	0x08016bf1
 801689c:	08016bf1 	.word	0x08016bf1
 80168a0:	08016bf1 	.word	0x08016bf1
 80168a4:	08016bf1 	.word	0x08016bf1
 80168a8:	08016bf1 	.word	0x08016bf1
 80168ac:	08016bf1 	.word	0x08016bf1
 80168b0:	08016bf1 	.word	0x08016bf1
 80168b4:	08016bf1 	.word	0x08016bf1
 80168b8:	08016bb7 	.word	0x08016bb7
 80168bc:	08016bf1 	.word	0x08016bf1
 80168c0:	08016bf1 	.word	0x08016bf1
 80168c4:	08016bf1 	.word	0x08016bf1
 80168c8:	08016bf1 	.word	0x08016bf1
 80168cc:	08016bf1 	.word	0x08016bf1
 80168d0:	08016bf1 	.word	0x08016bf1
 80168d4:	08016bf1 	.word	0x08016bf1
 80168d8:	08016bf1 	.word	0x08016bf1
 80168dc:	08016bf1 	.word	0x08016bf1
 80168e0:	08016bf1 	.word	0x08016bf1
 80168e4:	08016bf1 	.word	0x08016bf1
 80168e8:	08016bf1 	.word	0x08016bf1
 80168ec:	08016bf1 	.word	0x08016bf1
 80168f0:	08016bf1 	.word	0x08016bf1
 80168f4:	08016b5f 	.word	0x08016b5f
 80168f8:	08016bf1 	.word	0x08016bf1
 80168fc:	08016bf1 	.word	0x08016bf1
 8016900:	08016bf1 	.word	0x08016bf1
 8016904:	08016bf1 	.word	0x08016bf1
 8016908:	08016bf1 	.word	0x08016bf1
 801690c:	08016bf1 	.word	0x08016bf1
 8016910:	08016bf1 	.word	0x08016bf1
 8016914:	08016bf1 	.word	0x08016bf1
 8016918:	08016bf1 	.word	0x08016bf1
 801691c:	08016bf1 	.word	0x08016bf1
 8016920:	08016bf1 	.word	0x08016bf1
 8016924:	08016bf1 	.word	0x08016bf1
 8016928:	08016bf1 	.word	0x08016bf1
 801692c:	08016bf1 	.word	0x08016bf1
 8016930:	08016a99 	.word	0x08016a99
                case GUMI_NAV_POSLLH:
                	p_parent->_coord_deg[PIF_GPS_LON] = p_packet->payload.posllh.lon / 10000000.0;
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	689b      	ldr	r3, [r3, #8]
 8016938:	4618      	mov	r0, r3
 801693a:	f7e9 fda7 	bl	800048c <__aeabi_i2d>
 801693e:	a3b8      	add	r3, pc, #736	; (adr r3, 8016c20 <_evtParsing+0x438>)
 8016940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016944:	f7e9 ff36 	bl	80007b4 <__aeabi_ddiv>
 8016948:	4602      	mov	r2, r0
 801694a:	460b      	mov	r3, r1
 801694c:	68f9      	ldr	r1, [r7, #12]
 801694e:	e9c1 2308 	strd	r2, r3, [r1, #32]
                	p_parent->_coord_deg[PIF_GPS_LAT] = p_packet->payload.posllh.lat / 10000000.0;
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	4618      	mov	r0, r3
 8016958:	f7e9 fd98 	bl	800048c <__aeabi_i2d>
 801695c:	a3b0      	add	r3, pc, #704	; (adr r3, 8016c20 <_evtParsing+0x438>)
 801695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016962:	f7e9 ff27 	bl	80007b4 <__aeabi_ddiv>
 8016966:	4602      	mov	r2, r0
 8016968:	460b      	mov	r3, r1
 801696a:	68f9      	ldr	r1, [r7, #12]
 801696c:	e9c1 2306 	strd	r2, r3, [r1, #24]
                	p_parent->_altitude = p_packet->payload.posllh.h_msl / 1000.0;
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	695b      	ldr	r3, [r3, #20]
 8016974:	4618      	mov	r0, r3
 8016976:	f7e9 fd89 	bl	800048c <__aeabi_i2d>
 801697a:	f04f 0200 	mov.w	r2, #0
 801697e:	4ba2      	ldr	r3, [pc, #648]	; (8016c08 <_evtParsing+0x420>)
 8016980:	f7e9 ff18 	bl	80007b4 <__aeabi_ddiv>
 8016984:	4602      	mov	r2, r0
 8016986:	460b      	mov	r3, r1
 8016988:	68f9      	ldr	r1, [r7, #12]
 801698a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
                	p_parent->_horizontal_acc = p_packet->payload.posllh.h_acc;
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	699a      	ldr	r2, [r3, #24]
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	641a      	str	r2, [r3, #64]	; 0x40
                	p_parent->_vertical_acc = p_packet->payload.posllh.v_acc;
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	69da      	ldr	r2, [r3, #28]
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	645a      	str	r2, [r3, #68]	; 0x44
                    p_parent->_fix = next_fix;
 801699e:	4b9b      	ldr	r3, [pc, #620]	; (8016c0c <_evtParsing+0x424>)
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	f003 0301 	and.w	r3, r3, #1
 80169a6:	b2d9      	uxtb	r1, r3
 80169a8:	68fa      	ldr	r2, [r7, #12]
 80169aa:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 80169ae:	f361 0300 	bfi	r3, r1, #0, #1
 80169b2:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    _new_position = TRUE;
 80169b6:	4b96      	ldr	r3, [pc, #600]	; (8016c10 <_evtParsing+0x428>)
 80169b8:	2201      	movs	r2, #1
 80169ba:	701a      	strb	r2, [r3, #0]
                    // Update GPS update rate table.
                    p_parent->_update_rate[0] = p_parent->_update_rate[1];
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	649a      	str	r2, [r3, #72]	; 0x48
                    p_parent->_update_rate[1] = pif_cumulative_timer1ms;
 80169c4:	4b93      	ldr	r3, [pc, #588]	; (8016c14 <_evtParsing+0x42c>)
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	64da      	str	r2, [r3, #76]	; 0x4c
                    break;
 80169cc:	e116      	b.n	8016bfc <_evtParsing+0x414>

                case GUMI_NAV_PVT:
                	p_parent->_utc.year = 20 + p_packet->payload.pvt.year - 2000;
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	891b      	ldrh	r3, [r3, #8]
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	3344      	adds	r3, #68	; 0x44
 80169d6:	b2da      	uxtb	r2, r3
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	739a      	strb	r2, [r3, #14]
                	p_parent->_utc.month = p_packet->payload.pvt.month;
 80169dc:	693b      	ldr	r3, [r7, #16]
 80169de:	7a9a      	ldrb	r2, [r3, #10]
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	73da      	strb	r2, [r3, #15]
                	p_parent->_utc.day = p_packet->payload.pvt.day;
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	7ada      	ldrb	r2, [r3, #11]
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	741a      	strb	r2, [r3, #16]
                	p_parent->_utc.hour = p_packet->payload.pvt.hour;
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	7b1a      	ldrb	r2, [r3, #12]
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	745a      	strb	r2, [r3, #17]
                	p_parent->_utc.minute = p_packet->payload.pvt.min;
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	7b5a      	ldrb	r2, [r3, #13]
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	749a      	strb	r2, [r3, #18]
                	p_parent->_utc.second = p_packet->payload.pvt.sec;
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	7b9a      	ldrb	r2, [r3, #14]
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	74da      	strb	r2, [r3, #19]
                	p_parent->_utc.millisecond = p_packet->payload.pvt.nano / 1000000UL;
 8016a04:	693b      	ldr	r3, [r7, #16]
 8016a06:	695b      	ldr	r3, [r3, #20]
 8016a08:	461a      	mov	r2, r3
 8016a0a:	4b83      	ldr	r3, [pc, #524]	; (8016c18 <_evtParsing+0x430>)
 8016a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8016a10:	0c9b      	lsrs	r3, r3, #18
 8016a12:	b29a      	uxth	r2, r3
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	829a      	strh	r2, [r3, #20]
                    break;
 8016a18:	e0f0      	b.n	8016bfc <_evtParsing+0x414>

                case GUMI_NAV_SOL:
                    next_fix = (p_packet->payload.sol.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.sol.gps_fix == FIX_3D);
 8016a1a:	693b      	ldr	r3, [r7, #16]
 8016a1c:	7bdb      	ldrb	r3, [r3, #15]
 8016a1e:	f003 0301 	and.w	r3, r3, #1
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d005      	beq.n	8016a32 <_evtParsing+0x24a>
 8016a26:	693b      	ldr	r3, [r7, #16]
 8016a28:	7b9b      	ldrb	r3, [r3, #14]
 8016a2a:	2b03      	cmp	r3, #3
 8016a2c:	d101      	bne.n	8016a32 <_evtParsing+0x24a>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	e000      	b.n	8016a34 <_evtParsing+0x24c>
 8016a32:	2300      	movs	r3, #0
 8016a34:	b2da      	uxtb	r2, r3
 8016a36:	4b75      	ldr	r3, [pc, #468]	; (8016c0c <_evtParsing+0x424>)
 8016a38:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016a3a:	4b74      	ldr	r3, [pc, #464]	; (8016c0c <_evtParsing+0x424>)
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d106      	bne.n	8016a50 <_evtParsing+0x268>
                    	p_parent->_fix = FALSE;
 8016a42:	68fa      	ldr	r2, [r7, #12]
 8016a44:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a48:	f36f 0300 	bfc	r3, #0, #1
 8016a4c:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    p_parent->_num_sat = p_packet->payload.sol.num_sv;
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
                    break;
 8016a5c:	e0ce      	b.n	8016bfc <_evtParsing+0x414>

                case GUMI_NAV_STATUS:
                    next_fix = (p_packet->payload.status.flags & NAV_STATUS_FIX_VALID) && (p_packet->payload.status.gps_fix == FIX_3D);
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	7a5b      	ldrb	r3, [r3, #9]
 8016a62:	f003 0301 	and.w	r3, r3, #1
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d005      	beq.n	8016a76 <_evtParsing+0x28e>
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	7a1b      	ldrb	r3, [r3, #8]
 8016a6e:	2b03      	cmp	r3, #3
 8016a70:	d101      	bne.n	8016a76 <_evtParsing+0x28e>
 8016a72:	2301      	movs	r3, #1
 8016a74:	e000      	b.n	8016a78 <_evtParsing+0x290>
 8016a76:	2300      	movs	r3, #0
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	4b64      	ldr	r3, [pc, #400]	; (8016c0c <_evtParsing+0x424>)
 8016a7c:	701a      	strb	r2, [r3, #0]
                    if (!next_fix)
 8016a7e:	4b63      	ldr	r3, [pc, #396]	; (8016c0c <_evtParsing+0x424>)
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	f040 80b7 	bne.w	8016bf6 <_evtParsing+0x40e>
                    	p_parent->_fix = FALSE;
 8016a88:	68fa      	ldr	r2, [r7, #12]
 8016a8a:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8016a8e:	f36f 0300 	bfc	r3, #0, #1
 8016a92:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
                    break;
 8016a96:	e0ae      	b.n	8016bf6 <_evtParsing+0x40e>

                case GUMI_NAV_SVINFO:
                	p_owner->_num_ch = p_packet->payload.sv_info.num_ch;
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	7a1a      	ldrb	r2, [r3, #8]
 8016a9c:	697b      	ldr	r3, [r7, #20]
 8016a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    if (p_owner->_num_ch > 16)
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016aa8:	2b10      	cmp	r3, #16
 8016aaa:	d903      	bls.n	8016ab4 <_evtParsing+0x2cc>
                    	p_owner->_num_ch = 16;
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	2210      	movs	r2, #16
 8016ab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	61fb      	str	r3, [r7, #28]
 8016ab8:	e03e      	b.n	8016b38 <_evtParsing+0x350>
                    	p_owner->_svinfo_chn[i] = p_packet->payload.sv_info.channel[i].chn;
 8016aba:	6939      	ldr	r1, [r7, #16]
 8016abc:	69fa      	ldr	r2, [r7, #28]
 8016abe:	4613      	mov	r3, r2
 8016ac0:	005b      	lsls	r3, r3, #1
 8016ac2:	4413      	add	r3, r2
 8016ac4:	009b      	lsls	r3, r3, #2
 8016ac6:	440b      	add	r3, r1
 8016ac8:	330c      	adds	r3, #12
 8016aca:	7819      	ldrb	r1, [r3, #0]
 8016acc:	697a      	ldr	r2, [r7, #20]
 8016ace:	69fb      	ldr	r3, [r7, #28]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	3379      	adds	r3, #121	; 0x79
 8016ad4:	460a      	mov	r2, r1
 8016ad6:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_svid[i] = p_packet->payload.sv_info.channel[i].svid;
 8016ad8:	6939      	ldr	r1, [r7, #16]
 8016ada:	69fa      	ldr	r2, [r7, #28]
 8016adc:	4613      	mov	r3, r2
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	4413      	add	r3, r2
 8016ae2:	009b      	lsls	r3, r3, #2
 8016ae4:	440b      	add	r3, r1
 8016ae6:	330d      	adds	r3, #13
 8016ae8:	7819      	ldrb	r1, [r3, #0]
 8016aea:	697a      	ldr	r2, [r7, #20]
 8016aec:	69fb      	ldr	r3, [r7, #28]
 8016aee:	4413      	add	r3, r2
 8016af0:	3389      	adds	r3, #137	; 0x89
 8016af2:	460a      	mov	r2, r1
 8016af4:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_quality[i] = p_packet->payload.sv_info.channel[i].quality;
 8016af6:	6939      	ldr	r1, [r7, #16]
 8016af8:	69fa      	ldr	r2, [r7, #28]
 8016afa:	4613      	mov	r3, r2
 8016afc:	005b      	lsls	r3, r3, #1
 8016afe:	4413      	add	r3, r2
 8016b00:	009b      	lsls	r3, r3, #2
 8016b02:	440b      	add	r3, r1
 8016b04:	330f      	adds	r3, #15
 8016b06:	7819      	ldrb	r1, [r3, #0]
 8016b08:	697a      	ldr	r2, [r7, #20]
 8016b0a:	69fb      	ldr	r3, [r7, #28]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	3399      	adds	r3, #153	; 0x99
 8016b10:	460a      	mov	r2, r1
 8016b12:	701a      	strb	r2, [r3, #0]
                    	p_owner->_svinfo_cno[i] = p_packet->payload.sv_info.channel[i].cno;
 8016b14:	6939      	ldr	r1, [r7, #16]
 8016b16:	69fa      	ldr	r2, [r7, #28]
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	440b      	add	r3, r1
 8016b22:	3310      	adds	r3, #16
 8016b24:	7819      	ldrb	r1, [r3, #0]
 8016b26:	697a      	ldr	r2, [r7, #20]
 8016b28:	69fb      	ldr	r3, [r7, #28]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	33a9      	adds	r3, #169	; 0xa9
 8016b2e:	460a      	mov	r2, r1
 8016b30:	701a      	strb	r2, [r3, #0]
                    for (i = 0; i < p_owner->_num_ch; i++) {
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	3301      	adds	r3, #1
 8016b36:	61fb      	str	r3, [r7, #28]
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8016b3e:	461a      	mov	r2, r3
 8016b40:	69fb      	ldr	r3, [r7, #28]
 8016b42:	4293      	cmp	r3, r2
 8016b44:	dbb9      	blt.n	8016aba <_evtParsing+0x2d2>
                    }
                    // Update GPS SVIFO update rate table.
                    p_owner->_svinfo_rate[0] = p_owner->_svinfo_rate[1];
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    p_owner->_svinfo_rate[1] = pif_cumulative_timer1ms;
 8016b52:	4b30      	ldr	r3, [pc, #192]	; (8016c14 <_evtParsing+0x42c>)
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
                    break;
 8016b5c:	e04e      	b.n	8016bfc <_evtParsing+0x414>

                case GUMI_NAV_TIMEUTC:
                	if (p_packet->payload.time_utc.valid & 4) {
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	7ddb      	ldrb	r3, [r3, #23]
 8016b62:	f003 0304 	and.w	r3, r3, #4
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d047      	beq.n	8016bfa <_evtParsing+0x412>
						p_parent->_utc.year = p_packet->payload.time_utc.year - 2000;
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	8a1b      	ldrh	r3, [r3, #16]
 8016b6e:	b2db      	uxtb	r3, r3
 8016b70:	3330      	adds	r3, #48	; 0x30
 8016b72:	b2da      	uxtb	r2, r3
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	739a      	strb	r2, [r3, #14]
						p_parent->_utc.month = p_packet->payload.time_utc.month;
 8016b78:	693b      	ldr	r3, [r7, #16]
 8016b7a:	7c9a      	ldrb	r2, [r3, #18]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	73da      	strb	r2, [r3, #15]
						p_parent->_utc.day = p_packet->payload.time_utc.day;
 8016b80:	693b      	ldr	r3, [r7, #16]
 8016b82:	7cda      	ldrb	r2, [r3, #19]
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	741a      	strb	r2, [r3, #16]
						p_parent->_utc.hour = p_packet->payload.time_utc.hour;
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	7d1a      	ldrb	r2, [r3, #20]
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	745a      	strb	r2, [r3, #17]
						p_parent->_utc.minute = p_packet->payload.time_utc.min;
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	7d5a      	ldrb	r2, [r3, #21]
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	749a      	strb	r2, [r3, #18]
						p_parent->_utc.second = p_packet->payload.time_utc.sec;
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	7d9a      	ldrb	r2, [r3, #22]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	74da      	strb	r2, [r3, #19]
						p_parent->_utc.millisecond = p_packet->payload.time_utc.nano / 1000000UL;
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	68db      	ldr	r3, [r3, #12]
 8016ba4:	461a      	mov	r2, r3
 8016ba6:	4b1c      	ldr	r3, [pc, #112]	; (8016c18 <_evtParsing+0x430>)
 8016ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8016bac:	0c9b      	lsrs	r3, r3, #18
 8016bae:	b29a      	uxth	r2, r3
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	829a      	strh	r2, [r3, #20]
                	}
                	break;
 8016bb4:	e021      	b.n	8016bfa <_evtParsing+0x412>

                case GUMI_NAV_VELNED:
                	p_parent->_ground_speed = p_packet->payload.velned.speed;
 8016bb6:	693b      	ldr	r3, [r7, #16]
 8016bb8:	695b      	ldr	r3, [r3, #20]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7e9 fc56 	bl	800046c <__aeabi_ui2d>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	460b      	mov	r3, r1
 8016bc4:	68f9      	ldr	r1, [r7, #12]
 8016bc6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
                	p_parent->_ground_course = p_packet->payload.velned.heading / 100000.0;
 8016bca:	693b      	ldr	r3, [r7, #16]
 8016bcc:	69db      	ldr	r3, [r3, #28]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7e9 fc5c 	bl	800048c <__aeabi_i2d>
 8016bd4:	a30a      	add	r3, pc, #40	; (adr r3, 8016c00 <_evtParsing+0x418>)
 8016bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bda:	f7e9 fdeb 	bl	80007b4 <__aeabi_ddiv>
 8016bde:	4602      	mov	r2, r0
 8016be0:	460b      	mov	r3, r1
 8016be2:	68f9      	ldr	r1, [r7, #12]
 8016be4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
                    _new_speed = TRUE;
 8016be8:	4b0c      	ldr	r3, [pc, #48]	; (8016c1c <_evtParsing+0x434>)
 8016bea:	2201      	movs	r2, #1
 8016bec:	701a      	strb	r2, [r3, #0]
                    break;
 8016bee:	e005      	b.n	8016bfc <_evtParsing+0x414>

                default:
                	error = TRUE;
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
            		pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x MID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id, p_packet->msg_id);
#endif
                    break;
 8016bf4:	e002      	b.n	8016bfc <_evtParsing+0x414>
                    break;
 8016bf6:	bf00      	nop
 8016bf8:	e019      	b.n	8016c2e <_evtParsing+0x446>
                	break;
 8016bfa:	bf00      	nop
            }
        	break;
 8016bfc:	e017      	b.n	8016c2e <_evtParsing+0x446>
 8016bfe:	bf00      	nop
 8016c00:	00000000 	.word	0x00000000
 8016c04:	40f86a00 	.word	0x40f86a00
 8016c08:	408f4000 	.word	0x408f4000
 8016c0c:	20001ee3 	.word	0x20001ee3
 8016c10:	20001ee4 	.word	0x20001ee4
 8016c14:	20001d60 	.word	0x20001d60
 8016c18:	431bde83 	.word	0x431bde83
 8016c1c:	20001ee5 	.word	0x20001ee5
 8016c20:	00000000 	.word	0x00000000
 8016c24:	416312d0 	.word	0x416312d0

		default:
        	error = TRUE;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	76fb      	strb	r3, [r7, #27]
#ifndef __PIF_NO_LOG__
			pifLog_Printf(LT_ERROR, "GU:%u(%u) %s CID:%x", __LINE__, p_owner->_gps._id, kPktErr[PKT_ERR_UNKNOWE_ID], p_packet->class_id);
#endif
			break;
 8016c2c:	bf00      	nop
        }

    	if (!error && p_owner->evt_ubx_receive) (*p_owner->evt_ubx_receive)(p_packet);
 8016c2e:	7efb      	ldrb	r3, [r7, #27]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d107      	bne.n	8016c44 <_evtParsing+0x45c>
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d003      	beq.n	8016c44 <_evtParsing+0x45c>
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	6938      	ldr	r0, [r7, #16]
 8016c42:	4798      	blx	r3

        if (_new_position && _new_speed) {
 8016c44:	4b0e      	ldr	r3, [pc, #56]	; (8016c80 <_evtParsing+0x498>)
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00f      	beq.n	8016c6c <_evtParsing+0x484>
 8016c4c:	4b0d      	ldr	r3, [pc, #52]	; (8016c84 <_evtParsing+0x49c>)
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d00b      	beq.n	8016c6c <_evtParsing+0x484>
			pifGps_SendEvent(&p_owner->_gps);
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	3310      	adds	r3, #16
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7fe ffbb 	bl	8015bd4 <pifGps_SendEvent>
            _new_speed = _new_position = FALSE;
 8016c5e:	4b08      	ldr	r3, [pc, #32]	; (8016c80 <_evtParsing+0x498>)
 8016c60:	2200      	movs	r2, #0
 8016c62:	701a      	strb	r2, [r3, #0]
 8016c64:	4b06      	ldr	r3, [pc, #24]	; (8016c80 <_evtParsing+0x498>)
 8016c66:	781a      	ldrb	r2, [r3, #0]
 8016c68:	4b06      	ldr	r3, [pc, #24]	; (8016c84 <_evtParsing+0x49c>)
 8016c6a:	701a      	strb	r2, [r3, #0]
        }
    	p_owner->__rx.state = GURS_SYNC_CHAR_1;
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8016c74:	e000      	b.n	8016c78 <_evtParsing+0x490>
    if (!p_owner->_gps.evt_receive) return;
 8016c76:	bf00      	nop
    }
}
 8016c78:	3720      	adds	r7, #32
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	20001ee4 	.word	0x20001ee4
 8016c84:	20001ee5 	.word	0x20001ee5

08016c88 <_makeNmeaPacket>:

static BOOL _makeNmeaPacket(PifGpsUblox* p_owner, char* p_data, BOOL blocking)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b088      	sub	sp, #32
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	60f8      	str	r0, [r7, #12]
 8016c90:	60b9      	str	r1, [r7, #8]
 8016c92:	4613      	mov	r3, r2
 8016c94:	71fb      	strb	r3, [r7, #7]
	uint8_t header[4];
	uint8_t parity = 0;
 8016c96:	2300      	movs	r3, #0
 8016c98:	77fb      	strb	r3, [r7, #31]
	int i;

	i = 1;
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	61bb      	str	r3, [r7, #24]
	while (TRUE) {
		if (p_data[i] == '*') {
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	68ba      	ldr	r2, [r7, #8]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	781b      	ldrb	r3, [r3, #0]
 8016ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8016ca8:	d13a      	bne.n	8016d20 <_makeNmeaPacket+0x98>
			i++;
 8016caa:	69bb      	ldr	r3, [r7, #24]
 8016cac:	3301      	adds	r3, #1
 8016cae:	61bb      	str	r3, [r7, #24]
			break;
 8016cb0:	bf00      	nop
		else {
			parity ^= p_data[i];
			i++;
		}
	}
	p_data[i] = kPifHexUpperChar[(parity >> 4) & 0x0F]; i++;
 8016cb2:	4b4b      	ldr	r3, [pc, #300]	; (8016de0 <_makeNmeaPacket+0x158>)
 8016cb4:	681a      	ldr	r2, [r3, #0]
 8016cb6:	7ffb      	ldrb	r3, [r7, #31]
 8016cb8:	091b      	lsrs	r3, r3, #4
 8016cba:	b2db      	uxtb	r3, r3
 8016cbc:	f003 030f 	and.w	r3, r3, #15
 8016cc0:	441a      	add	r2, r3
 8016cc2:	69bb      	ldr	r3, [r7, #24]
 8016cc4:	68b9      	ldr	r1, [r7, #8]
 8016cc6:	440b      	add	r3, r1
 8016cc8:	7812      	ldrb	r2, [r2, #0]
 8016cca:	701a      	strb	r2, [r3, #0]
 8016ccc:	69bb      	ldr	r3, [r7, #24]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	61bb      	str	r3, [r7, #24]
	p_data[i] = kPifHexUpperChar[parity & 0x0F]; i++;
 8016cd2:	4b43      	ldr	r3, [pc, #268]	; (8016de0 <_makeNmeaPacket+0x158>)
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	7ffb      	ldrb	r3, [r7, #31]
 8016cd8:	f003 030f 	and.w	r3, r3, #15
 8016cdc:	441a      	add	r2, r3
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	68b9      	ldr	r1, [r7, #8]
 8016ce2:	440b      	add	r3, r1
 8016ce4:	7812      	ldrb	r2, [r2, #0]
 8016ce6:	701a      	strb	r2, [r3, #0]
 8016ce8:	69bb      	ldr	r3, [r7, #24]
 8016cea:	3301      	adds	r3, #1
 8016cec:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\r'; i++;
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	68ba      	ldr	r2, [r7, #8]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	220d      	movs	r2, #13
 8016cf6:	701a      	strb	r2, [r3, #0]
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	61bb      	str	r3, [r7, #24]
	p_data[i] = '\n'; i++;
 8016cfe:	69bb      	ldr	r3, [r7, #24]
 8016d00:	68ba      	ldr	r2, [r7, #8]
 8016d02:	4413      	add	r3, r2
 8016d04:	220a      	movs	r2, #10
 8016d06:	701a      	strb	r2, [r3, #0]
 8016d08:	69bb      	ldr	r3, [r7, #24]
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	61bb      	str	r3, [r7, #24]
	p_data[i] = 0;
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	68ba      	ldr	r2, [r7, #8]
 8016d12:	4413      	add	r3, r2
 8016d14:	2200      	movs	r2, #0
 8016d16:	701a      	strb	r2, [r3, #0]

	if (blocking) {
 8016d18:	79fb      	ldrb	r3, [r7, #7]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d01b      	beq.n	8016d56 <_makeNmeaPacket+0xce>
 8016d1e:	e00f      	b.n	8016d40 <_makeNmeaPacket+0xb8>
			parity ^= p_data[i];
 8016d20:	69bb      	ldr	r3, [r7, #24]
 8016d22:	68ba      	ldr	r2, [r7, #8]
 8016d24:	4413      	add	r3, r2
 8016d26:	781a      	ldrb	r2, [r3, #0]
 8016d28:	7ffb      	ldrb	r3, [r7, #31]
 8016d2a:	4053      	eors	r3, r2
 8016d2c:	77fb      	strb	r3, [r7, #31]
			i++;
 8016d2e:	69bb      	ldr	r3, [r7, #24]
 8016d30:	3301      	adds	r3, #1
 8016d32:	61bb      	str	r3, [r7, #24]
		if (p_data[i] == '*') {
 8016d34:	e7b3      	b.n	8016c9e <_makeNmeaPacket+0x16>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
			if (!pifTaskManager_Yield()) break;
 8016d36:	f7fd fe29 	bl	801498c <pifTaskManager_Yield>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d009      	beq.n	8016d54 <_makeNmeaPacket+0xcc>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d46:	4618      	mov	r0, r3
 8016d48:	f7fc fe27 	bl	801399a <pifRingBuffer_IsEmpty>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d0f1      	beq.n	8016d36 <_makeNmeaPacket+0xae>
 8016d52:	e000      	b.n	8016d56 <_makeNmeaPacket+0xce>
			if (!pifTaskManager_Yield()) break;
 8016d54:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	f7fc fe9e 	bl	8013a9e <pifRingBuffer_BeginPutting>

	header[0] = i;
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	b2db      	uxtb	r3, r3
 8016d66:	753b      	strb	r3, [r7, #20]
	header[1] = 0;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	757b      	strb	r3, [r7, #21]
	header[2] = 0;
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	75bb      	strb	r3, [r7, #22]
	header[3] = 0;
 8016d70:	2300      	movs	r3, #0
 8016d72:	75fb      	strb	r3, [r7, #23]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d7a:	f107 0114 	add.w	r1, r7, #20
 8016d7e:	2204      	movs	r2, #4
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7fc ff13 	bl	8013bac <pifRingBuffer_PutData>
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d01a      	beq.n	8016dc2 <_makeNmeaPacket+0x13a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016d92:	7d3a      	ldrb	r2, [r7, #20]
 8016d94:	b292      	uxth	r2, r2
 8016d96:	68b9      	ldr	r1, [r7, #8]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7fc ff07 	bl	8013bac <pifRingBuffer_PutData>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d010      	beq.n	8016dc6 <_makeNmeaPacket+0x13e>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7fc fe8f 	bl	8013ace <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016db6:	69db      	ldr	r3, [r3, #28]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f7fd fba9 	bl	8014510 <pifTask_SetTrigger>
	return TRUE;
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	e009      	b.n	8016dd6 <_makeNmeaPacket+0x14e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, header, 4)) goto fail;
 8016dc2:	bf00      	nop
 8016dc4:	e000      	b.n	8016dc8 <_makeNmeaPacket+0x140>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, (uint8_t *)p_data, header[0])) goto fail;
 8016dc6:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7fc fe8b 	bl	8013aea <pifRingBuffer_RollbackPutting>
	return FALSE;
 8016dd4:	2300      	movs	r3, #0
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3720      	adds	r7, #32
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
 8016dde:	bf00      	nop
 8016de0:	2000012c 	.word	0x2000012c

08016de4 <_makeUbxPacket>:

static BOOL _makeUbxPacket(PifGpsUblox* p_owner, uint8_t* p_header, uint16_t length, uint8_t* p_payload, BOOL blocking)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b088      	sub	sp, #32
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	60f8      	str	r0, [r7, #12]
 8016dec:	60b9      	str	r1, [r7, #8]
 8016dee:	603b      	str	r3, [r7, #0]
 8016df0:	4613      	mov	r3, r2
 8016df2:	80fb      	strh	r3, [r7, #6]
	uint8_t info[4];
	uint8_t tailer[2];
	uint16_t checksum;

	checksum = _checksumUbx(p_header + 2, p_payload, length);
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	3302      	adds	r3, #2
 8016df8:	88fa      	ldrh	r2, [r7, #6]
 8016dfa:	6839      	ldr	r1, [r7, #0]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7ff fbc7 	bl	8016590 <_checksumUbx>
 8016e02:	4603      	mov	r3, r0
 8016e04:	83fb      	strh	r3, [r7, #30]
	tailer[0] = checksum & 0xFF;
 8016e06:	8bfb      	ldrh	r3, [r7, #30]
 8016e08:	b2db      	uxtb	r3, r3
 8016e0a:	753b      	strb	r3, [r7, #20]
	tailer[1] = checksum >> 8;
 8016e0c:	8bfb      	ldrh	r3, [r7, #30]
 8016e0e:	0a1b      	lsrs	r3, r3, #8
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	b2db      	uxtb	r3, r3
 8016e14:	757b      	strb	r3, [r7, #21]

	if (blocking) {
 8016e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d010      	beq.n	8016e40 <_makeUbxPacket+0x5c>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e1e:	e004      	b.n	8016e2a <_makeUbxPacket+0x46>
			if (!pifTaskManager_Yield()) break;
 8016e20:	f7fd fdb4 	bl	801498c <pifTaskManager_Yield>
 8016e24:	4603      	mov	r3, r0
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d009      	beq.n	8016e3e <_makeUbxPacket+0x5a>
		while (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7fc fdb2 	bl	801399a <pifRingBuffer_IsEmpty>
 8016e36:	4603      	mov	r3, r0
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d0f1      	beq.n	8016e20 <_makeUbxPacket+0x3c>
 8016e3c:	e000      	b.n	8016e40 <_makeUbxPacket+0x5c>
			if (!pifTaskManager_Yield()) break;
 8016e3e:	bf00      	nop
		}
	}

	pifRingBuffer_BeginPutting(&p_owner->__tx.buffer);
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7fc fe29 	bl	8013a9e <pifRingBuffer_BeginPutting>

	info[0] = length + 8;
 8016e4c:	88fb      	ldrh	r3, [r7, #6]
 8016e4e:	b2db      	uxtb	r3, r3
 8016e50:	3308      	adds	r3, #8
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	763b      	strb	r3, [r7, #24]
	info[1] = 0;
 8016e56:	2300      	movs	r3, #0
 8016e58:	767b      	strb	r3, [r7, #25]
	info[2] = 0;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	76bb      	strb	r3, [r7, #26]
	info[3] = 0;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	76fb      	strb	r3, [r7, #27]
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e68:	f107 0118 	add.w	r1, r7, #24
 8016e6c:	2204      	movs	r2, #4
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7fc fe9c 	bl	8013bac <pifRingBuffer_PutData>
 8016e74:	4603      	mov	r3, r0
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d033      	beq.n	8016ee2 <_makeUbxPacket+0xfe>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e80:	2206      	movs	r2, #6
 8016e82:	68b9      	ldr	r1, [r7, #8]
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7fc fe91 	bl	8013bac <pifRingBuffer_PutData>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d02a      	beq.n	8016ee6 <_makeUbxPacket+0x102>
	if (length > 0) {
 8016e90:	88fb      	ldrh	r3, [r7, #6]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d00a      	beq.n	8016eac <_makeUbxPacket+0xc8>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016e9c:	88fa      	ldrh	r2, [r7, #6]
 8016e9e:	6839      	ldr	r1, [r7, #0]
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7fc fe83 	bl	8013bac <pifRingBuffer_PutData>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d01e      	beq.n	8016eea <_makeUbxPacket+0x106>
	}
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016eb2:	f107 0114 	add.w	r1, r7, #20
 8016eb6:	2202      	movs	r2, #2
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fc fe77 	bl	8013bac <pifRingBuffer_PutData>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d014      	beq.n	8016eee <_makeUbxPacket+0x10a>

	pifRingBuffer_CommitPutting(&p_owner->__tx.buffer);
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7fc fdff 	bl	8013ace <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016ed6:	69db      	ldr	r3, [r3, #28]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fd fb19 	bl	8014510 <pifTask_SetTrigger>
	return TRUE;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e00d      	b.n	8016efe <_makeUbxPacket+0x11a>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, info, 4)) goto fail;
 8016ee2:	bf00      	nop
 8016ee4:	e004      	b.n	8016ef0 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_header, 6)) goto fail;
 8016ee6:	bf00      	nop
 8016ee8:	e002      	b.n	8016ef0 <_makeUbxPacket+0x10c>
		if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, p_payload, length)) goto fail;
 8016eea:	bf00      	nop
 8016eec:	e000      	b.n	8016ef0 <_makeUbxPacket+0x10c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.buffer, tailer, 2)) goto fail;
 8016eee:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.buffer);
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7fc fdf7 	bl	8013aea <pifRingBuffer_RollbackPutting>
	return FALSE;
 8016efc:	2300      	movs	r3, #0
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3720      	adds	r7, #32
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bd80      	pop	{r7, pc}

08016f06 <_evtSending>:

BOOL _evtSending(void* p_client, PifActCommSendData act_send_data)
{
 8016f06:	b5b0      	push	{r4, r5, r7, lr}
 8016f08:	b084      	sub	sp, #16
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
 8016f0e:	6039      	str	r1, [r7, #0]
	PifGpsUblox *p_owner = (PifGpsUblox *)p_client;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	switch (p_owner->__tx.state) {
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8016f1a:	2b02      	cmp	r3, #2
 8016f1c:	d05d      	beq.n	8016fda <_evtSending+0xd4>
 8016f1e:	2b02      	cmp	r3, #2
 8016f20:	dc72      	bgt.n	8017008 <_evtSending+0x102>
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d002      	beq.n	8016f2c <_evtSending+0x26>
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d01c      	beq.n	8016f64 <_evtSending+0x5e>
			p_owner->__tx.state = GUTS_IDLE;
		}
		break;

	default:
		break;
 8016f2a:	e06d      	b.n	8017008 <_evtSending+0x102>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.buffer)) {
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7fc fd31 	bl	801399a <pifRingBuffer_IsEmpty>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d166      	bne.n	801700c <_evtSending+0x106>
			pifRingBuffer_CopyToArray(p_owner->__tx.ui.info, 4, &p_owner->__tx.buffer, 0);
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	f203 207a 	addw	r0, r3, #634	; 0x27a
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	2104      	movs	r1, #4
 8016f4e:	f7fc fef0 	bl	8013d32 <pifRingBuffer_CopyToArray>
			p_owner->__tx.pos = 4;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	2204      	movs	r2, #4
 8016f56:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
			p_owner->__tx.state = GUTS_SENDING;
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8016f62:	e053      	b.n	801700c <_evtSending+0x106>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
 8016f76:	b29b      	uxth	r3, r3
 8016f78:	4619      	mov	r1, r3
 8016f7a:	4610      	mov	r0, r2
 8016f7c:	f7fc fce1 	bl	8013942 <pifRingBuffer_GetTailPointer>
 8016f80:	4605      	mov	r5, r0
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	f503 7217 	add.w	r2, r3, #604	; 0x25c
				pifRingBuffer_GetLinerSize(&p_owner->__tx.buffer, p_owner->__tx.pos));
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.buffer, p_owner->__tx.pos),
 8016f8e:	b29b      	uxth	r3, r3
 8016f90:	4619      	mov	r1, r3
 8016f92:	4610      	mov	r0, r2
 8016f94:	f7fc fd36 	bl	8013a04 <pifRingBuffer_GetLinerSize>
 8016f98:	4603      	mov	r3, r0
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	4629      	mov	r1, r5
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	4798      	blx	r3
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	817b      	strh	r3, [r7, #10]
		p_owner->__tx.pos += length;
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	f893 227e 	ldrb.w	r2, [r3, #638]	; 0x27e
 8016fae:	897b      	ldrh	r3, [r7, #10]
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	4413      	add	r3, r2
 8016fb4:	b2da      	uxtb	r2, r3
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
		if (p_owner->__tx.pos >= 4 + p_owner->__tx.ui.st.length) {
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8016fc2:	3303      	adds	r3, #3
 8016fc4:	68fa      	ldr	r2, [r7, #12]
 8016fc6:	f892 227e 	ldrb.w	r2, [r2, #638]	; 0x27e
 8016fca:	4293      	cmp	r3, r2
 8016fcc:	da03      	bge.n	8016fd6 <_evtSending+0xd0>
			p_owner->__tx.state = GUTS_WAIT_SENDED;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	2202      	movs	r2, #2
 8016fd2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		return TRUE;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	e01c      	b.n	8017014 <_evtSending+0x10e>
		if (!p_owner->__tx.ui.st.response) {
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d115      	bne.n	8017010 <_evtSending+0x10a>
			pifRingBuffer_Remove(&p_owner->__tx.buffer, 4 + p_owner->__tx.ui.st.length);
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f503 7217 	add.w	r2, r3, #604	; 0x25c
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	3304      	adds	r3, #4
 8016ff4:	b29b      	uxth	r3, r3
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	4610      	mov	r0, r2
 8016ffa:	f7fc fee0 	bl	8013dbe <pifRingBuffer_Remove>
			p_owner->__tx.state = GUTS_IDLE;
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	2200      	movs	r2, #0
 8017002:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
		break;
 8017006:	e003      	b.n	8017010 <_evtSending+0x10a>
		break;
 8017008:	bf00      	nop
 801700a:	e002      	b.n	8017012 <_evtSending+0x10c>
		break;
 801700c:	bf00      	nop
 801700e:	e000      	b.n	8017012 <_evtSending+0x10c>
		break;
 8017010:	bf00      	nop
	}
	return FALSE;
 8017012:	2300      	movs	r3, #0
}
 8017014:	4618      	mov	r0, r3
 8017016:	3710      	adds	r7, #16
 8017018:	46bd      	mov	sp, r7
 801701a:	bdb0      	pop	{r4, r5, r7, pc}

0801701c <pifGpsUblox_Init>:

BOOL pifGpsUblox_Init(PifGpsUblox* p_owner, PifId id)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
 8017024:	460b      	mov	r3, r1
 8017026:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d103      	bne.n	8017036 <pifGpsUblox_Init+0x1a>
		pif_error = E_INVALID_PARAM;
 801702e:	4b19      	ldr	r3, [pc, #100]	; (8017094 <pifGpsUblox_Init+0x78>)
 8017030:	2201      	movs	r2, #1
 8017032:	701a      	strb	r2, [r3, #0]
		goto fail;
 8017034:	e026      	b.n	8017084 <pifGpsUblox_Init+0x68>
	}

	memset(p_owner, 0, sizeof(PifGpsUblox));
 8017036:	f44f 7220 	mov.w	r2, #640	; 0x280
 801703a:	2100      	movs	r1, #0
 801703c:	6878      	ldr	r0, [r7, #4]
 801703e:	f00c f8d3 	bl	80231e8 <memset>

    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	3310      	adds	r3, #16
 8017046:	887a      	ldrh	r2, [r7, #2]
 8017048:	4611      	mov	r1, r2
 801704a:	4618      	mov	r0, r3
 801704c:	f7fe fd58 	bl	8015b00 <pifGps_Init>
 8017050:	4603      	mov	r3, r0
 8017052:	2b00      	cmp	r3, #0
 8017054:	d013      	beq.n	801707e <pifGpsUblox_Init+0x62>

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 801705c:	2240      	movs	r2, #64	; 0x40
 801705e:	2100      	movs	r1, #0
 8017060:	4618      	mov	r0, r3
 8017062:	f7fc fbfb 	bl	801385c <pifRingBuffer_InitHeap>
 8017066:	4603      	mov	r3, r0
 8017068:	2b00      	cmp	r3, #0
 801706a:	d00a      	beq.n	8017082 <pifGpsUblox_Init+0x66>
    pifRingBuffer_SetName(&p_owner->__tx.buffer, "TxB");
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8017072:	4909      	ldr	r1, [pc, #36]	; (8017098 <pifGpsUblox_Init+0x7c>)
 8017074:	4618      	mov	r0, r3
 8017076:	f7fc fc56 	bl	8013926 <pifRingBuffer_SetName>
    return TRUE;
 801707a:	2301      	movs	r3, #1
 801707c:	e006      	b.n	801708c <pifGpsUblox_Init+0x70>
    if (!pifGps_Init(&p_owner->_gps, id)) goto fail;
 801707e:	bf00      	nop
 8017080:	e000      	b.n	8017084 <pifGpsUblox_Init+0x68>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.buffer, PIF_ID_AUTO, PIF_GPS_UBLOX_TX_SIZE)) goto fail;
 8017082:	bf00      	nop

fail:
	pifGpsUblox_Clear(p_owner);
 8017084:	6878      	ldr	r0, [r7, #4]
 8017086:	f000 f809 	bl	801709c <pifGpsUblox_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
#endif
    return FALSE;
 801708a:	2300      	movs	r3, #0
}
 801708c:	4618      	mov	r0, r3
 801708e:	3708      	adds	r7, #8
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	20001d48 	.word	0x20001d48
 8017098:	08027b38 	.word	0x08027b38

0801709c <pifGpsUblox_Clear>:

void pifGpsUblox_Clear(PifGpsUblox* p_owner)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b082      	sub	sp, #8
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
	pifRingBuffer_Clear(&p_owner->__tx.buffer);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fc fc20 	bl	80138f0 <pifRingBuffer_Clear>
}
 80170b0:	bf00      	nop
 80170b2:	3708      	adds	r7, #8
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}

080170b8 <pifGpsUblox_AttachComm>:

void pifGpsUblox_AttachComm(PifGpsUblox* p_owner, PifComm *p_comm)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	683a      	ldr	r2, [r7, #0]
 80170c6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 80170ca:	4b05      	ldr	r3, [pc, #20]	; (80170e0 <pifGpsUblox_AttachComm+0x28>)
 80170cc:	4a05      	ldr	r2, [pc, #20]	; (80170e4 <pifGpsUblox_AttachComm+0x2c>)
 80170ce:	6879      	ldr	r1, [r7, #4]
 80170d0:	6838      	ldr	r0, [r7, #0]
 80170d2:	f7fa ff4f 	bl	8011f74 <pifComm_AttachClient>
}
 80170d6:	bf00      	nop
 80170d8:	3708      	adds	r7, #8
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	08016f07 	.word	0x08016f07
 80170e4:	080167e9 	.word	0x080167e9

080170e8 <pifGpsUblox_SetPubxConfig>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SetPubxConfig(PifGpsUblox* p_owner, uint8_t port_id, uint16_t in_proto, uint16_t out_proto, uint32_t baudrate, BOOL blocking)
{
 80170e8:	b590      	push	{r4, r7, lr}
 80170ea:	b091      	sub	sp, #68	; 0x44
 80170ec:	af02      	add	r7, sp, #8
 80170ee:	60f8      	str	r0, [r7, #12]
 80170f0:	4608      	mov	r0, r1
 80170f2:	4611      	mov	r1, r2
 80170f4:	461a      	mov	r2, r3
 80170f6:	4603      	mov	r3, r0
 80170f8:	72fb      	strb	r3, [r7, #11]
 80170fa:	460b      	mov	r3, r1
 80170fc:	813b      	strh	r3, [r7, #8]
 80170fe:	4613      	mov	r3, r2
 8017100:	80fb      	strh	r3, [r7, #6]
	char data[40];

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8017108:	2b00      	cmp	r3, #0
 801710a:	d004      	beq.n	8017116 <pifGpsUblox_SetPubxConfig+0x2e>
		pif_error = E_INVALID_STATE;
 801710c:	4b0f      	ldr	r3, [pc, #60]	; (801714c <pifGpsUblox_SetPubxConfig+0x64>)
 801710e:	2202      	movs	r2, #2
 8017110:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017112:	2300      	movs	r3, #0
 8017114:	e015      	b.n	8017142 <pifGpsUblox_SetPubxConfig+0x5a>
	}

	pif_Printf(data, "$PUBX,41,%u,%4X,%4X,%lu,0*", port_id, in_proto, out_proto, baudrate);
 8017116:	7af9      	ldrb	r1, [r7, #11]
 8017118:	893c      	ldrh	r4, [r7, #8]
 801711a:	88fb      	ldrh	r3, [r7, #6]
 801711c:	f107 0010 	add.w	r0, r7, #16
 8017120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017122:	9201      	str	r2, [sp, #4]
 8017124:	9300      	str	r3, [sp, #0]
 8017126:	4623      	mov	r3, r4
 8017128:	460a      	mov	r2, r1
 801712a:	4909      	ldr	r1, [pc, #36]	; (8017150 <pifGpsUblox_SetPubxConfig+0x68>)
 801712c:	f7fa fd40 	bl	8011bb0 <pif_Printf>

	return _makeNmeaPacket(p_owner, data, blocking);
 8017130:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017134:	f107 0310 	add.w	r3, r7, #16
 8017138:	4619      	mov	r1, r3
 801713a:	68f8      	ldr	r0, [r7, #12]
 801713c:	f7ff fda4 	bl	8016c88 <_makeNmeaPacket>
 8017140:	4603      	mov	r3, r0
}
 8017142:	4618      	mov	r0, r3
 8017144:	373c      	adds	r7, #60	; 0x3c
 8017146:	46bd      	mov	sp, r7
 8017148:	bd90      	pop	{r4, r7, pc}
 801714a:	bf00      	nop
 801714c:	20001d48 	.word	0x20001d48
 8017150:	08027b7c 	.word	0x08027b7c

08017154 <pifGpsUblox_SendUbxMsg>:

	return _makeNmeaPacket(p_owner, data, blocking);
}

BOOL pifGpsUblox_SendUbxMsg(PifGpsUblox* p_owner, uint8_t class_id, uint8_t msg_id, uint16_t length, uint8_t* payload, BOOL blocking)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b086      	sub	sp, #24
 8017158:	af02      	add	r7, sp, #8
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	4608      	mov	r0, r1
 801715e:	4611      	mov	r1, r2
 8017160:	461a      	mov	r2, r3
 8017162:	4603      	mov	r3, r0
 8017164:	70fb      	strb	r3, [r7, #3]
 8017166:	460b      	mov	r3, r1
 8017168:	70bb      	strb	r3, [r7, #2]
 801716a:	4613      	mov	r3, r2
 801716c:	803b      	strh	r3, [r7, #0]
	uint8_t header[6] = { 0xB5, 0x62 };
 801716e:	f246 23b5 	movw	r3, #25269	; 0x62b5
 8017172:	60bb      	str	r3, [r7, #8]
 8017174:	2300      	movs	r3, #0
 8017176:	81bb      	strh	r3, [r7, #12]

	if (p_owner->__tx.state != GUTS_IDLE) {
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 801717e:	2b00      	cmp	r3, #0
 8017180:	d004      	beq.n	801718c <pifGpsUblox_SendUbxMsg+0x38>
		pif_error = E_INVALID_STATE;
 8017182:	4b0f      	ldr	r3, [pc, #60]	; (80171c0 <pifGpsUblox_SendUbxMsg+0x6c>)
 8017184:	2202      	movs	r2, #2
 8017186:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8017188:	2300      	movs	r3, #0
 801718a:	e015      	b.n	80171b8 <pifGpsUblox_SendUbxMsg+0x64>
	}

	header[2] = class_id;
 801718c:	78fb      	ldrb	r3, [r7, #3]
 801718e:	72bb      	strb	r3, [r7, #10]
	header[3] = msg_id;
 8017190:	78bb      	ldrb	r3, [r7, #2]
 8017192:	72fb      	strb	r3, [r7, #11]
	header[4] = length & 0xFF;
 8017194:	883b      	ldrh	r3, [r7, #0]
 8017196:	b2db      	uxtb	r3, r3
 8017198:	733b      	strb	r3, [r7, #12]
	header[5] = length >> 8;
 801719a:	883b      	ldrh	r3, [r7, #0]
 801719c:	0a1b      	lsrs	r3, r3, #8
 801719e:	b29b      	uxth	r3, r3
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	737b      	strb	r3, [r7, #13]

	return _makeUbxPacket(p_owner, header, length, payload, blocking);
 80171a4:	883a      	ldrh	r2, [r7, #0]
 80171a6:	f107 0108 	add.w	r1, r7, #8
 80171aa:	7f3b      	ldrb	r3, [r7, #28]
 80171ac:	9300      	str	r3, [sp, #0]
 80171ae:	69bb      	ldr	r3, [r7, #24]
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f7ff fe17 	bl	8016de4 <_makeUbxPacket>
 80171b6:	4603      	mov	r3, r0
}
 80171b8:	4618      	mov	r0, r3
 80171ba:	3710      	adds	r7, #16
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}
 80171c0:	20001d48 	.word	0x20001d48

080171c4 <_evtTimerRxTimeout>:

#if PIF_MSP_RECEIVE_TIMEOUT


static void _evtTimerRxTimeout(PifIssuerP p_issuer)
{
 80171c4:	b480      	push	{r7}
 80171c6:	b085      	sub	sp, #20
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
	if (!p_issuer) {
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d103      	bne.n	80171da <_evtTimerRxTimeout+0x16>
		pif_error = E_INVALID_PARAM;
 80171d2:	4b07      	ldr	r3, [pc, #28]	; (80171f0 <_evtTimerRxTimeout+0x2c>)
 80171d4:	2201      	movs	r2, #1
 80171d6:	701a      	strb	r2, [r3, #0]
		return;
 80171d8:	e004      	b.n	80171e4 <_evtTimerRxTimeout+0x20>
	}

	PifMsp* p_owner = (PifMsp *)p_issuer;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	60fb      	str	r3, [r7, #12]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1],
			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4], p_owner->__rx.p_packet[5],
			p_owner->__rx.p_packet[6], p_owner->__rx.p_packet[7]);
#endif
#endif
	p_owner->__rx.state = MRS_IDLE;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	2200      	movs	r2, #0
 80171e2:	721a      	strb	r2, [r3, #8]
}
 80171e4:	3714      	adds	r7, #20
 80171e6:	46bd      	mov	sp, r7
 80171e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ec:	4770      	bx	lr
 80171ee:	bf00      	nop
 80171f0:	20001d48 	.word	0x20001d48

080171f4 <_parsingPacket>:
};

#endif

static void _parsingPacket(PifMsp *p_owner, PifActCommReceiveData act_receive_data)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b086      	sub	sp, #24
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
 80171fc:	6039      	str	r1, [r7, #0]
	PifMspPacket* p_packet = &p_owner->__rx.packet;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	3314      	adds	r3, #20
 8017202:	613b      	str	r3, [r7, #16]
#ifndef __PIF_NO_LOG__
	int line;
#endif
	static uint8_t pre_error = PKT_ERR_NONE;

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017204:	e0a7      	b.n	8017356 <_parsingPacket+0x162>
		switch (p_owner->__rx.state) {
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	7a1b      	ldrb	r3, [r3, #8]
 801720a:	2b05      	cmp	r3, #5
 801720c:	f200 80a2 	bhi.w	8017354 <_parsingPacket+0x160>
 8017210:	a201      	add	r2, pc, #4	; (adr r2, 8017218 <_parsingPacket+0x24>)
 8017212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017216:	bf00      	nop
 8017218:	08017231 	.word	0x08017231
 801721c:	08017273 	.word	0x08017273
 8017220:	08017287 	.word	0x08017287
 8017224:	0801729b 	.word	0x0801729b
 8017228:	080172c3 	.word	0x080172c3
 801722c:	080172eb 	.word	0x080172eb
		case MRS_IDLE:
			if (data == '$') {
 8017230:	7bfb      	ldrb	r3, [r7, #15]
 8017232:	2b24      	cmp	r3, #36	; 0x24
 8017234:	d109      	bne.n	801724a <_parsingPacket+0x56>
				p_owner->__rx.state = MRS_HEADER_CHAR_1;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2201      	movs	r2, #1
 801723a:	721a      	strb	r2, [r3, #8]
#if PIF_MSP_RECEIVE_TIMEOUT
				pifTimer_Start(p_owner->__rx.p_timer, PIF_MSP_RECEIVE_TIMEOUT);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	6a1b      	ldr	r3, [r3, #32]
 8017240:	21c8      	movs	r1, #200	; 0xc8
 8017242:	4618      	mov	r0, r3
 8017244:	f7fd fe9c 	bl	8014f80 <pifTimer_Start>
 8017248:	e085      	b.n	8017356 <_parsingPacket+0x162>
#endif
			}
			else if (pre_error == PKT_ERR_NONE && p_owner->__evt_other_packet) {
 801724a:	4b54      	ldr	r3, [pc, #336]	; (801739c <_parsingPacket+0x1a8>)
 801724c:	781b      	ldrb	r3, [r3, #0]
 801724e:	2b03      	cmp	r3, #3
 8017250:	d10b      	bne.n	801726a <_parsingPacket+0x76>
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017256:	2b00      	cmp	r3, #0
 8017258:	d007      	beq.n	801726a <_parsingPacket+0x76>
				(*p_owner->__evt_other_packet)(p_owner, data, p_owner->__p_issuer);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801725e:	7bf9      	ldrb	r1, [r7, #15]
 8017260:	687a      	ldr	r2, [r7, #4]
 8017262:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	4798      	blx	r3
 8017268:	e002      	b.n	8017270 <_parsingPacket+0x7c>
			}
			else {
				pkt_err = PKT_ERR_INVALID_DATA;
 801726a:	2301      	movs	r3, #1
 801726c:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
 801726e:	e081      	b.n	8017374 <_parsingPacket+0x180>
			}
			break;
 8017270:	e071      	b.n	8017356 <_parsingPacket+0x162>

		case MRS_HEADER_CHAR_1:
			if (data == 'M') {
 8017272:	7bfb      	ldrb	r3, [r7, #15]
 8017274:	2b4d      	cmp	r3, #77	; 0x4d
 8017276:	d103      	bne.n	8017280 <_parsingPacket+0x8c>
				p_owner->__rx.state = MRS_HEADER_CHAR_2;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2202      	movs	r2, #2
 801727c:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 801727e:	e06a      	b.n	8017356 <_parsingPacket+0x162>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017280:	2301      	movs	r3, #1
 8017282:	75fb      	strb	r3, [r7, #23]
				goto fail;
 8017284:	e076      	b.n	8017374 <_parsingPacket+0x180>

		case MRS_HEADER_CHAR_2:
			if (data == '<') {
 8017286:	7bfb      	ldrb	r3, [r7, #15]
 8017288:	2b3c      	cmp	r3, #60	; 0x3c
 801728a:	d103      	bne.n	8017294 <_parsingPacket+0xa0>
				p_owner->__rx.state = MRS_DIRECTION;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2203      	movs	r2, #3
 8017290:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 8017292:	e060      	b.n	8017356 <_parsingPacket+0x162>
				pkt_err = PKT_ERR_INVALID_DATA;
 8017294:	2301      	movs	r3, #1
 8017296:	75fb      	strb	r3, [r7, #23]
				goto fail;
 8017298:	e06c      	b.n	8017374 <_parsingPacket+0x180>

		case MRS_DIRECTION:
			if (data < PIF_MSP_RX_PACKET_SIZE - 3) {
 801729a:	7bfb      	ldrb	r3, [r7, #15]
 801729c:	2b7c      	cmp	r3, #124	; 0x7c
 801729e:	d80d      	bhi.n	80172bc <_parsingPacket+0xc8>
				p_packet->data_count = data;
 80172a0:	7bfa      	ldrb	r2, [r7, #15]
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	705a      	strb	r2, [r3, #1]
				p_owner->__rx.p_packet[0] = data;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	68db      	ldr	r3, [r3, #12]
 80172aa:	7bfa      	ldrb	r2, [r7, #15]
 80172ac:	701a      	strb	r2, [r3, #0]
				p_owner->__rx.packet_count = 1;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2201      	movs	r2, #1
 80172b2:	741a      	strb	r2, [r3, #16]
				p_owner->__rx.state = MRS_LENGTH;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2204      	movs	r2, #4
 80172b8:	721a      	strb	r2, [r3, #8]
#ifndef __PIF_NO_LOG__
				line = __LINE__;
#endif
				goto fail;
			}
			break;
 80172ba:	e04c      	b.n	8017356 <_parsingPacket+0x162>
				pkt_err = PKT_ERR_BIG_LENGHT;
 80172bc:	2300      	movs	r3, #0
 80172be:	75fb      	strb	r3, [r7, #23]
				goto fail;
 80172c0:	e058      	b.n	8017374 <_parsingPacket+0x180>

		case MRS_LENGTH:
			p_packet->command = data;
 80172c2:	7bfa      	ldrb	r2, [r7, #15]
 80172c4:	693b      	ldr	r3, [r7, #16]
 80172c6:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	68db      	ldr	r3, [r3, #12]
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	7c12      	ldrb	r2, [r2, #16]
 80172d0:	4413      	add	r3, r2
 80172d2:	7bfa      	ldrb	r2, [r7, #15]
 80172d4:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	7c1b      	ldrb	r3, [r3, #16]
 80172da:	3301      	adds	r3, #1
 80172dc:	b2da      	uxtb	r2, r3
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	741a      	strb	r2, [r3, #16]
			p_owner->__rx.state = MRS_MESSAGE_TYPE;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2205      	movs	r2, #5
 80172e6:	721a      	strb	r2, [r3, #8]
			break;
 80172e8:	e035      	b.n	8017356 <_parsingPacket+0x162>

		case MRS_MESSAGE_TYPE:
			p_owner->__rx.p_packet[p_owner->__rx.packet_count] = data;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	68db      	ldr	r3, [r3, #12]
 80172ee:	687a      	ldr	r2, [r7, #4]
 80172f0:	7c12      	ldrb	r2, [r2, #16]
 80172f2:	4413      	add	r3, r2
 80172f4:	7bfa      	ldrb	r2, [r7, #15]
 80172f6:	701a      	strb	r2, [r3, #0]
			p_owner->__rx.packet_count++;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	7c1b      	ldrb	r3, [r3, #16]
 80172fc:	3301      	adds	r3, #1
 80172fe:	b2da      	uxtb	r2, r3
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	741a      	strb	r2, [r3, #16]
			if (p_owner->__rx.packet_count >= 3 + p_packet->data_count) {
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	785b      	ldrb	r3, [r3, #1]
 8017308:	3302      	adds	r3, #2
 801730a:	687a      	ldr	r2, [r7, #4]
 801730c:	7c12      	ldrb	r2, [r2, #16]
 801730e:	4293      	cmp	r3, r2
 8017310:	da21      	bge.n	8017356 <_parsingPacket+0x162>
				if (data == pifCheckXor(p_owner->__rx.p_packet, 2 + p_packet->data_count)) {
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	68da      	ldr	r2, [r3, #12]
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	785b      	ldrb	r3, [r3, #1]
 801731a:	b29b      	uxth	r3, r3
 801731c:	3302      	adds	r3, #2
 801731e:	b29b      	uxth	r3, r3
 8017320:	4619      	mov	r1, r3
 8017322:	4610      	mov	r0, r2
 8017324:	f7fa fcce 	bl	8011cc4 <pifCheckXor>
 8017328:	4603      	mov	r3, r0
 801732a:	461a      	mov	r2, r3
 801732c:	7bfb      	ldrb	r3, [r7, #15]
 801732e:	429a      	cmp	r2, r3
 8017330:	d10d      	bne.n	801734e <_parsingPacket+0x15a>
#if PIF_MSP_RECEIVE_TIMEOUT
					pifTimer_Stop(p_owner->__rx.p_timer);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6a1b      	ldr	r3, [r3, #32]
 8017336:	4618      	mov	r0, r3
 8017338:	f7fd fe50 	bl	8014fdc <pifTimer_Stop>
#endif
					p_packet->p_data = p_owner->__rx.p_packet + 2;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	68db      	ldr	r3, [r3, #12]
 8017340:	1c9a      	adds	r2, r3, #2
 8017342:	693b      	ldr	r3, [r7, #16]
 8017344:	605a      	str	r2, [r3, #4]
					p_owner->__rx.state = MRS_DONE;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2206      	movs	r2, #6
 801734a:	721a      	strb	r2, [r3, #8]
					return;
 801734c:	e022      	b.n	8017394 <_parsingPacket+0x1a0>
				}
				else {
					pkt_err = PKT_ERR_WRONG_CRC;
 801734e:	2302      	movs	r3, #2
 8017350:	75fb      	strb	r3, [r7, #23]
#ifndef __PIF_NO_LOG__
					line = __LINE__;
#endif
					goto fail;
 8017352:	e00f      	b.n	8017374 <_parsingPacket+0x180>
				}
			}
			break;

		default:
			break;
 8017354:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	685a      	ldr	r2, [r3, #4]
 801735a:	f107 010f 	add.w	r1, r7, #15
 801735e:	683b      	ldr	r3, [r7, #0]
 8017360:	4610      	mov	r0, r2
 8017362:	4798      	blx	r3
 8017364:	4603      	mov	r3, r0
 8017366:	2b00      	cmp	r3, #0
 8017368:	f47f af4d 	bne.w	8017206 <_parsingPacket+0x12>
		}
	}
	pre_error = PKT_ERR_NONE;
 801736c:	4b0b      	ldr	r3, [pc, #44]	; (801739c <_parsingPacket+0x1a8>)
 801736e:	2203      	movs	r2, #3
 8017370:	701a      	strb	r2, [r3, #0]
	return;
 8017372:	e00f      	b.n	8017394 <_parsingPacket+0x1a0>

fail:
	if (pkt_err != pre_error) {
 8017374:	4b09      	ldr	r3, [pc, #36]	; (801739c <_parsingPacket+0x1a8>)
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	7dfa      	ldrb	r2, [r7, #23]
 801737a:	429a      	cmp	r2, r3
 801737c:	d002      	beq.n	8017384 <_parsingPacket+0x190>
#ifndef __PIF_NO_LOG__
		pifLog_Printf(LT_ERROR, "MWP:%u(%u) %s D:%xh RS:%u Cnt:%u", line, p_owner->_id, kPktErr[pkt_err], data,
				p_owner->__rx.state, p_packet->data_count);
#endif
		pre_error = pkt_err;
 801737e:	4a07      	ldr	r2, [pc, #28]	; (801739c <_parsingPacket+0x1a8>)
 8017380:	7dfb      	ldrb	r3, [r7, #23]
 8017382:	7013      	strb	r3, [r2, #0]
	pifLog_Printf(LT_NONE, "\n%x %x %x %x %x", p_owner->__rx.p_packet[0], p_owner->__rx.p_packet[1], p_owner->__rx.p_packet[2],
			p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif

#if PIF_MSP_RECEIVE_TIMEOUT
   	pifTimer_Stop(p_owner->__rx.p_timer);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6a1b      	ldr	r3, [r3, #32]
 8017388:	4618      	mov	r0, r3
 801738a:	f7fd fe27 	bl	8014fdc <pifTimer_Stop>
#endif
	p_owner->__rx.state = MRS_IDLE;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2200      	movs	r2, #0
 8017392:	721a      	strb	r2, [r3, #8]
}
 8017394:	3718      	adds	r7, #24
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
 801739a:	bf00      	nop
 801739c:	20000135 	.word	0x20000135

080173a0 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b084      	sub	sp, #16
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	60fb      	str	r3, [r7, #12]

    if (p_owner->__rx.state < MRS_DONE) {
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	7a1b      	ldrb	r3, [r3, #8]
 80173b2:	2b05      	cmp	r3, #5
 80173b4:	d803      	bhi.n	80173be <_evtParsing+0x1e>
    	_parsingPacket(p_owner, act_receive_data);
 80173b6:	6839      	ldr	r1, [r7, #0]
 80173b8:	68f8      	ldr	r0, [r7, #12]
 80173ba:	f7ff ff1b 	bl	80171f4 <_parsingPacket>
    }

    if (p_owner->__rx.state == MRS_DONE) {
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	7a1b      	ldrb	r3, [r3, #8]
 80173c2:	2b06      	cmp	r3, #6
 80173c4:	d119      	bne.n	80173fa <_evtParsing+0x5a>
    	pifLog_Printf(LT_NONE, "\n%u> %x %x %x %x %x", p_owner->_id, p_owner->__rx.p_packet[0],	p_owner->__rx.p_packet[1],
    			p_owner->__rx.p_packet[2], p_owner->__rx.p_packet[3], p_owner->__rx.p_packet[4]);
#endif
#endif

		p_owner->__rx.packet.p_pointer = p_owner->__rx.packet.p_data;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	699a      	ldr	r2, [r3, #24]
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	61da      	str	r2, [r3, #28]
    	if (p_owner->__evt_receive) (*p_owner->__evt_receive)(p_owner, &p_owner->__rx.packet, p_owner->__p_issuer);
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d008      	beq.n	80173e8 <_evtParsing+0x48>
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173da:	68fa      	ldr	r2, [r7, #12]
 80173dc:	f102 0114 	add.w	r1, r2, #20
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80173e4:	68f8      	ldr	r0, [r7, #12]
 80173e6:	4798      	blx	r3
    	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	69db      	ldr	r3, [r3, #28]
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7fd f88e 	bl	8014510 <pifTask_SetTrigger>
    	p_owner->__rx.state = MRS_IDLE;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	2200      	movs	r2, #0
 80173f8:	721a      	strb	r2, [r3, #8]
    }
}
 80173fa:	bf00      	nop
 80173fc:	3710      	adds	r7, #16
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}

08017402 <_evtSending>:

static BOOL _evtSending(void *p_client, PifActCommSendData act_send_data)
{
 8017402:	b5b0      	push	{r4, r5, r7, lr}
 8017404:	b084      	sub	sp, #16
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
 801740a:	6039      	str	r1, [r7, #0]
	PifMsp *p_owner = (PifMsp *)p_client;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	60fb      	str	r3, [r7, #12]
	uint16_t length;

	if (p_owner->__rx.state != MRS_IDLE) return FALSE;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	7a1b      	ldrb	r3, [r3, #8]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d001      	beq.n	801741c <_evtSending+0x1a>
 8017418:	2300      	movs	r3, #0
 801741a:	e06f      	b.n	80174fc <_evtSending+0xfa>

	switch (p_owner->__tx.state) {
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017422:	2b00      	cmp	r3, #0
 8017424:	d002      	beq.n	801742c <_evtSending+0x2a>
 8017426:	2b01      	cmp	r3, #1
 8017428:	d021      	beq.n	801746e <_evtSending+0x6c>
			p_owner->__tx.state = MTS_IDLE;
		}
		return TRUE;

	default:
		break;
 801742a:	e066      	b.n	80174fa <_evtSending+0xf8>
		if (!pifRingBuffer_IsEmpty(&p_owner->__tx.answer_buffer)) {
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	3324      	adds	r3, #36	; 0x24
 8017430:	4618      	mov	r0, r3
 8017432:	f7fc fab2 	bl	801399a <pifRingBuffer_IsEmpty>
 8017436:	4603      	mov	r3, r0
 8017438:	2b00      	cmp	r3, #0
 801743a:	d15d      	bne.n	80174f8 <_evtSending+0xf6>
			p_owner->__tx.length = pifRingBuffer_GetFillSize(&p_owner->__tx.answer_buffer);
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	3324      	adds	r3, #36	; 0x24
 8017440:	4618      	mov	r0, r3
 8017442:	f7fc fabd 	bl	80139c0 <pifRingBuffer_GetFillSize>
 8017446:	4603      	mov	r3, r0
 8017448:	461a      	mov	r2, r3
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			p_owner->__tx.pos = 0;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2200      	movs	r2, #0
 8017454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			p_owner->__tx.state = MTS_SENDING;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	2201      	movs	r2, #1
 801745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	685b      	ldr	r3, [r3, #4]
 8017464:	69db      	ldr	r3, [r3, #28]
 8017466:	4618      	mov	r0, r3
 8017468:	f7fd f852 	bl	8014510 <pifTask_SetTrigger>
		break;
 801746c:	e044      	b.n	80174f8 <_evtSending+0xf6>
		length = (*act_send_data)(p_owner->__p_comm, pifRingBuffer_GetTailPointer(&p_owner->__tx.answer_buffer, p_owner->__tx.pos),
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	685c      	ldr	r4, [r3, #4]
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801747e:	4619      	mov	r1, r3
 8017480:	4610      	mov	r0, r2
 8017482:	f7fc fa5e 	bl	8013942 <pifRingBuffer_GetTailPointer>
 8017486:	4605      	mov	r5, r0
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8017494:	4619      	mov	r1, r3
 8017496:	4610      	mov	r0, r2
 8017498:	f7fc fab4 	bl	8013a04 <pifRingBuffer_GetLinerSize>
 801749c:	4603      	mov	r3, r0
 801749e:	461a      	mov	r2, r3
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	4629      	mov	r1, r5
 80174a4:	4620      	mov	r0, r4
 80174a6:	4798      	blx	r3
 80174a8:	4603      	mov	r3, r0
 80174aa:	817b      	strh	r3, [r7, #10]
		if (!length) return FALSE;
 80174ac:	897b      	ldrh	r3, [r7, #10]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d101      	bne.n	80174b6 <_evtSending+0xb4>
 80174b2:	2300      	movs	r3, #0
 80174b4:	e022      	b.n	80174fc <_evtSending+0xfa>
		p_owner->__tx.pos += length;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80174bc:	897b      	ldrh	r3, [r7, #10]
 80174be:	4413      	add	r3, r2
 80174c0:	b29a      	uxth	r2, r3
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (p_owner->__tx.pos >= p_owner->__tx.length) {
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d30d      	bcc.n	80174f4 <_evtSending+0xf2>
			pifRingBuffer_Remove(&p_owner->__tx.answer_buffer, p_owner->__tx.pos);
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80174de:	68fb      	ldr	r3, [r7, #12]
 80174e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80174e4:	4619      	mov	r1, r3
 80174e6:	4610      	mov	r0, r2
 80174e8:	f7fc fc69 	bl	8013dbe <pifRingBuffer_Remove>
			p_owner->__tx.state = MTS_IDLE;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	2200      	movs	r2, #0
 80174f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		return TRUE;
 80174f4:	2301      	movs	r3, #1
 80174f6:	e001      	b.n	80174fc <_evtSending+0xfa>
		break;
 80174f8:	bf00      	nop
	}
	return FALSE;
 80174fa:	2300      	movs	r3, #0
}
 80174fc:	4618      	mov	r0, r3
 80174fe:	3710      	adds	r7, #16
 8017500:	46bd      	mov	sp, r7
 8017502:	bdb0      	pop	{r4, r5, r7, pc}

08017504 <pifMsp_Init>:

BOOL pifMsp_Init(PifMsp* p_owner, PifTimerManager* p_timer, PifId id)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b084      	sub	sp, #16
 8017508:	af00      	add	r7, sp, #0
 801750a:	60f8      	str	r0, [r7, #12]
 801750c:	60b9      	str	r1, [r7, #8]
 801750e:	4613      	mov	r3, r2
 8017510:	80fb      	strh	r3, [r7, #6]
    if (!p_timer) {
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d103      	bne.n	8017520 <pifMsp_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017518:	4b27      	ldr	r3, [pc, #156]	; (80175b8 <pifMsp_Init+0xb4>)
 801751a:	2201      	movs	r2, #1
 801751c:	701a      	strb	r2, [r3, #0]
		goto fail;
 801751e:	e042      	b.n	80175a6 <pifMsp_Init+0xa2>
	}

	memset(p_owner, 0, sizeof(PifMsp));
 8017520:	2258      	movs	r2, #88	; 0x58
 8017522:	2100      	movs	r1, #0
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	f00b fe5f 	bl	80231e8 <memset>

    p_owner->__rx.p_packet = calloc(sizeof(uint8_t), PIF_MSP_RX_PACKET_SIZE);
 801752a:	2180      	movs	r1, #128	; 0x80
 801752c:	2001      	movs	r0, #1
 801752e:	f00b fe0b 	bl	8023148 <calloc>
 8017532:	4603      	mov	r3, r0
 8017534:	461a      	mov	r2, r3
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	60da      	str	r2, [r3, #12]
    if (!p_owner->__rx.p_packet) {
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	68db      	ldr	r3, [r3, #12]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d103      	bne.n	801754a <pifMsp_Init+0x46>
        pif_error = E_OUT_OF_HEAP;
 8017542:	4b1d      	ldr	r3, [pc, #116]	; (80175b8 <pifMsp_Init+0xb4>)
 8017544:	2203      	movs	r2, #3
 8017546:	701a      	strb	r2, [r3, #0]
        goto fail;
 8017548:	e02d      	b.n	80175a6 <pifMsp_Init+0xa2>
    }

    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	3324      	adds	r3, #36	; 0x24
 801754e:	2280      	movs	r2, #128	; 0x80
 8017550:	2100      	movs	r1, #0
 8017552:	4618      	mov	r0, r3
 8017554:	f7fc f982 	bl	801385c <pifRingBuffer_InitHeap>
 8017558:	4603      	mov	r3, r0
 801755a:	2b00      	cmp	r3, #0
 801755c:	d020      	beq.n	80175a0 <pifMsp_Init+0x9c>

#if PIF_MSP_RECEIVE_TIMEOUT
    p_owner->__rx.p_timer = pifTimerManager_Add(p_timer, TT_ONCE);
 801755e:	2100      	movs	r1, #0
 8017560:	68b8      	ldr	r0, [r7, #8]
 8017562:	f7fd fcd5 	bl	8014f10 <pifTimerManager_Add>
 8017566:	4602      	mov	r2, r0
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	621a      	str	r2, [r3, #32]
    if (!p_owner->__rx.p_timer) goto fail;
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	6a1b      	ldr	r3, [r3, #32]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d017      	beq.n	80175a4 <pifMsp_Init+0xa0>
    pifTimer_AttachEvtFinish(p_owner->__rx.p_timer, _evtTimerRxTimeout, p_owner);
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	6a1b      	ldr	r3, [r3, #32]
 8017578:	68fa      	ldr	r2, [r7, #12]
 801757a:	4910      	ldr	r1, [pc, #64]	; (80175bc <pifMsp_Init+0xb8>)
 801757c:	4618      	mov	r0, r3
 801757e:	f7fd fdf4 	bl	801516a <pifTimer_AttachEvtFinish>
#endif

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017582:	88fb      	ldrh	r3, [r7, #6]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d106      	bne.n	8017596 <pifMsp_Init+0x92>
 8017588:	4b0d      	ldr	r3, [pc, #52]	; (80175c0 <pifMsp_Init+0xbc>)
 801758a:	881b      	ldrh	r3, [r3, #0]
 801758c:	1c5a      	adds	r2, r3, #1
 801758e:	b291      	uxth	r1, r2
 8017590:	4a0b      	ldr	r2, [pc, #44]	; (80175c0 <pifMsp_Init+0xbc>)
 8017592:	8011      	strh	r1, [r2, #0]
 8017594:	80fb      	strh	r3, [r7, #6]
    p_owner->_id = id;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	88fa      	ldrh	r2, [r7, #6]
 801759a:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801759c:	2301      	movs	r3, #1
 801759e:	e006      	b.n	80175ae <pifMsp_Init+0xaa>
    if (!pifRingBuffer_InitHeap(&p_owner->__tx.answer_buffer, PIF_ID_AUTO, PIF_MSP_TX_ANSWER_SIZE)) goto fail;
 80175a0:	bf00      	nop
 80175a2:	e000      	b.n	80175a6 <pifMsp_Init+0xa2>
    if (!p_owner->__rx.p_timer) goto fail;
 80175a4:	bf00      	nop

fail:
	pifMsp_Clear(p_owner);
 80175a6:	68f8      	ldr	r0, [r7, #12]
 80175a8:	f000 f80c 	bl	80175c4 <pifMsp_Clear>
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, id, pif_error);
#endif
    return FALSE;
 80175ac:	2300      	movs	r3, #0
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3710      	adds	r7, #16
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}
 80175b6:	bf00      	nop
 80175b8:	20001d48 	.word	0x20001d48
 80175bc:	080171c5 	.word	0x080171c5
 80175c0:	20000128 	.word	0x20000128

080175c4 <pifMsp_Clear>:

void pifMsp_Clear(PifMsp* p_owner)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b082      	sub	sp, #8
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
	if (p_owner->__rx.p_packet) {
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	68db      	ldr	r3, [r3, #12]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d007      	beq.n	80175e4 <pifMsp_Clear+0x20>
		free(p_owner->__rx.p_packet);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	4618      	mov	r0, r3
 80175da:	f00b fdef 	bl	80231bc <free>
		p_owner->__rx.p_packet = NULL;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2200      	movs	r2, #0
 80175e2:	60da      	str	r2, [r3, #12]
	}
	pifRingBuffer_Clear(&p_owner->__tx.answer_buffer);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	3324      	adds	r3, #36	; 0x24
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7fc f981 	bl	80138f0 <pifRingBuffer_Clear>
#if PIF_MSP_RECEIVE_TIMEOUT
	if (p_owner->__rx.p_timer) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6a1b      	ldr	r3, [r3, #32]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d004      	beq.n	8017600 <pifMsp_Clear+0x3c>
		pifTimerManager_Remove(p_owner->__rx.p_timer);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6a1b      	ldr	r3, [r3, #32]
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7fd fca4 	bl	8014f48 <pifTimerManager_Remove>
	}
#endif
}
 8017600:	bf00      	nop
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}

08017608 <pifMsp_AttachComm>:

void pifMsp_AttachComm(PifMsp* p_owner, PifComm *p_comm)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
 8017610:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	683a      	ldr	r2, [r7, #0]
 8017616:	605a      	str	r2, [r3, #4]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, _evtSending);
 8017618:	4b04      	ldr	r3, [pc, #16]	; (801762c <pifMsp_AttachComm+0x24>)
 801761a:	4a05      	ldr	r2, [pc, #20]	; (8017630 <pifMsp_AttachComm+0x28>)
 801761c:	6879      	ldr	r1, [r7, #4]
 801761e:	6838      	ldr	r0, [r7, #0]
 8017620:	f7fa fca8 	bl	8011f74 <pifComm_AttachClient>
}
 8017624:	bf00      	nop
 8017626:	3708      	adds	r7, #8
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}
 801762c:	08017403 	.word	0x08017403
 8017630:	080173a1 	.word	0x080173a1

08017634 <pifMsp_DetachComm>:

void pifMsp_DetachComm(PifMsp* p_owner)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b082      	sub	sp, #8
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
	pifComm_DetachClient(p_owner->__p_comm);
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	685b      	ldr	r3, [r3, #4]
 8017640:	4618      	mov	r0, r3
 8017642:	f7fa fcad 	bl	8011fa0 <pifComm_DetachClient>
	p_owner->__p_comm = NULL;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2200      	movs	r2, #0
 801764a:	605a      	str	r2, [r3, #4]
}
 801764c:	bf00      	nop
 801764e:	3708      	adds	r7, #8
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <pifMsp_AttachEvtReceive>:

void pifMsp_AttachEvtReceive(PifMsp* p_owner, PifEvtMspReceive evt_receive, PifEvtMspOtherPacket evt_other_packet, PifIssuerP p_issuer)
{
 8017654:	b480      	push	{r7}
 8017656:	b085      	sub	sp, #20
 8017658:	af00      	add	r7, sp, #0
 801765a:	60f8      	str	r0, [r7, #12]
 801765c:	60b9      	str	r1, [r7, #8]
 801765e:	607a      	str	r2, [r7, #4]
 8017660:	603b      	str	r3, [r7, #0]
	p_owner->__evt_receive = evt_receive;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	651a      	str	r2, [r3, #80]	; 0x50
	p_owner->__evt_other_packet = evt_other_packet;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	687a      	ldr	r2, [r7, #4]
 801766c:	655a      	str	r2, [r3, #84]	; 0x54
	p_owner->__p_issuer = p_issuer;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	683a      	ldr	r2, [r7, #0]
 8017672:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8017674:	bf00      	nop
 8017676:	3714      	adds	r7, #20
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <pifMsp_ReadData8>:

uint8_t pifMsp_ReadData8(PifMspPacket* p_packet)
{
 8017680:	b480      	push	{r7}
 8017682:	b085      	sub	sp, #20
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
	uint8_t data;

	data = p_packet->p_pointer[0];
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	689b      	ldr	r3, [r3, #8]
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	73fb      	strb	r3, [r7, #15]
	p_packet->p_pointer++;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	1c5a      	adds	r2, r3, #1
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	609a      	str	r2, [r3, #8]
	return data;
 801769a:	7bfb      	ldrb	r3, [r7, #15]
}
 801769c:	4618      	mov	r0, r3
 801769e:	3714      	adds	r7, #20
 80176a0:	46bd      	mov	sp, r7
 80176a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a6:	4770      	bx	lr

080176a8 <pifMsp_ReadData16>:

uint16_t pifMsp_ReadData16(PifMspPacket* p_packet)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b085      	sub	sp, #20
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8);
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	689b      	ldr	r3, [r3, #8]
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	b21a      	sxth	r2, r3
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	689b      	ldr	r3, [r3, #8]
 80176bc:	3301      	adds	r3, #1
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	021b      	lsls	r3, r3, #8
 80176c2:	b21b      	sxth	r3, r3
 80176c4:	4313      	orrs	r3, r2
 80176c6:	b21b      	sxth	r3, r3
 80176c8:	81fb      	strh	r3, [r7, #14]
	p_packet->p_pointer += 2;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	689b      	ldr	r3, [r3, #8]
 80176ce:	1c9a      	adds	r2, r3, #2
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	609a      	str	r2, [r3, #8]
	return data;
 80176d4:	89fb      	ldrh	r3, [r7, #14]
}
 80176d6:	4618      	mov	r0, r3
 80176d8:	3714      	adds	r7, #20
 80176da:	46bd      	mov	sp, r7
 80176dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e0:	4770      	bx	lr

080176e2 <pifMsp_ReadData32>:

uint32_t pifMsp_ReadData32(PifMspPacket* p_packet)
{
 80176e2:	b480      	push	{r7}
 80176e4:	b085      	sub	sp, #20
 80176e6:	af00      	add	r7, sp, #0
 80176e8:	6078      	str	r0, [r7, #4]
	uint32_t data;

	data = p_packet->p_pointer[0] | (p_packet->p_pointer[1] << 8) | (p_packet->p_pointer[2] << 16) | (p_packet->p_pointer[3] << 24);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	689b      	ldr	r3, [r3, #8]
 80176ee:	781b      	ldrb	r3, [r3, #0]
 80176f0:	461a      	mov	r2, r3
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	689b      	ldr	r3, [r3, #8]
 80176f6:	3301      	adds	r3, #1
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	021b      	lsls	r3, r3, #8
 80176fc:	431a      	orrs	r2, r3
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	689b      	ldr	r3, [r3, #8]
 8017702:	3302      	adds	r3, #2
 8017704:	781b      	ldrb	r3, [r3, #0]
 8017706:	041b      	lsls	r3, r3, #16
 8017708:	431a      	orrs	r2, r3
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	689b      	ldr	r3, [r3, #8]
 801770e:	3303      	adds	r3, #3
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	061b      	lsls	r3, r3, #24
 8017714:	4313      	orrs	r3, r2
 8017716:	60fb      	str	r3, [r7, #12]
	p_packet->p_pointer += 4;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	689b      	ldr	r3, [r3, #8]
 801771c:	1d1a      	adds	r2, r3, #4
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	609a      	str	r2, [r3, #8]
	return data;
 8017722:	68fb      	ldr	r3, [r7, #12]
}
 8017724:	4618      	mov	r0, r3
 8017726:	3714      	adds	r7, #20
 8017728:	46bd      	mov	sp, r7
 801772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772e:	4770      	bx	lr

08017730 <pifMsp_MakeAnswer>:
	}
	p_packet->p_pointer += size;
}

BOOL pifMsp_MakeAnswer(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b084      	sub	sp, #16
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
 8017738:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	3324      	adds	r3, #36	; 0x24
 801773e:	4618      	mov	r0, r3
 8017740:	f7fc f9ad 	bl	8013a9e <pifRingBuffer_BeginPutting>

	header[0] = '$';
 8017744:	2324      	movs	r3, #36	; 0x24
 8017746:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 8017748:	234d      	movs	r3, #77	; 0x4d
 801774a:	727b      	strb	r3, [r7, #9]
	header[2] = '>';
 801774c:	233e      	movs	r3, #62	; 0x3e
 801774e:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 8017750:	2300      	movs	r3, #0
 8017752:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 8017754:	683b      	ldr	r3, [r7, #0]
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	3324      	adds	r3, #36	; 0x24
 801775e:	f107 0108 	add.w	r1, r7, #8
 8017762:	2205      	movs	r2, #5
 8017764:	4618      	mov	r0, r3
 8017766:	f7fc fa21 	bl	8013bac <pifRingBuffer_PutData>
 801776a:	4603      	mov	r3, r0
 801776c:	2b00      	cmp	r3, #0
 801776e:	d009      	beq.n	8017784 <pifMsp_MakeAnswer+0x54>
	p_owner->__check_xor = header[4];
 8017770:	7b3a      	ldrb	r2, [r7, #12]
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	2200      	movs	r2, #0
 801777c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 8017780:	2301      	movs	r3, #1
 8017782:	e00d      	b.n	80177a0 <pifMsp_MakeAnswer+0x70>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 8017784:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	3324      	adds	r3, #36	; 0x24
 801778a:	4618      	mov	r0, r3
 801778c:	f7fc f9ad 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017790:	4b05      	ldr	r3, [pc, #20]	; (80177a8 <pifMsp_MakeAnswer+0x78>)
 8017792:	781b      	ldrb	r3, [r3, #0]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d102      	bne.n	801779e <pifMsp_MakeAnswer+0x6e>
 8017798:	4b03      	ldr	r3, [pc, #12]	; (80177a8 <pifMsp_MakeAnswer+0x78>)
 801779a:	2204      	movs	r2, #4
 801779c:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
#endif
	return FALSE;
 801779e:	2300      	movs	r3, #0
}
 80177a0:	4618      	mov	r0, r3
 80177a2:	3710      	adds	r7, #16
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}
 80177a8:	20001d48 	.word	0x20001d48

080177ac <pifMsp_AddAnswer8>:

BOOL pifMsp_AddAnswer8(PifMsp* p_owner, uint8_t data)
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b082      	sub	sp, #8
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
 80177b4:	460b      	mov	r3, r1
 80177b6:	70fb      	strb	r3, [r7, #3]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	3324      	adds	r3, #36	; 0x24
 80177bc:	1cf9      	adds	r1, r7, #3
 80177be:	2201      	movs	r2, #1
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7fc f9f3 	bl	8013bac <pifRingBuffer_PutData>
 80177c6:	4603      	mov	r3, r0
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d012      	beq.n	80177f2 <pifMsp_AddAnswer8+0x46>
	p_owner->__check_xor ^= data;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80177d2:	78fb      	ldrb	r3, [r7, #3]
 80177d4:	4053      	eors	r3, r2
 80177d6:	b2da      	uxtb	r2, r3
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 1;
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80177e4:	3301      	adds	r3, #1
 80177e6:	b29a      	uxth	r2, r3
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80177ee:	2301      	movs	r3, #1
 80177f0:	e00d      	b.n	801780e <pifMsp_AddAnswer8+0x62>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, &data, 1)) goto fail;
 80177f2:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	3324      	adds	r3, #36	; 0x24
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fc f976 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80177fe:	4b06      	ldr	r3, [pc, #24]	; (8017818 <pifMsp_AddAnswer8+0x6c>)
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d102      	bne.n	801780c <pifMsp_AddAnswer8+0x60>
 8017806:	4b04      	ldr	r3, [pc, #16]	; (8017818 <pifMsp_AddAnswer8+0x6c>)
 8017808:	2204      	movs	r2, #4
 801780a:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 801780c:	2300      	movs	r3, #0
}
 801780e:	4618      	mov	r0, r3
 8017810:	3708      	adds	r7, #8
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	20001d48 	.word	0x20001d48

0801781c <pifMsp_AddAnswer16>:

BOOL pifMsp_AddAnswer16(PifMsp* p_owner, uint16_t data)
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	460b      	mov	r3, r1
 8017826:	807b      	strh	r3, [r7, #2]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	3324      	adds	r3, #36	; 0x24
 801782c:	1cb9      	adds	r1, r7, #2
 801782e:	2202      	movs	r2, #2
 8017830:	4618      	mov	r0, r3
 8017832:	f7fc f9bb 	bl	8013bac <pifRingBuffer_PutData>
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d018      	beq.n	801786e <pifMsp_AddAnswer16+0x52>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 2);
 801783c:	1cbb      	adds	r3, r7, #2
 801783e:	2102      	movs	r1, #2
 8017840:	4618      	mov	r0, r3
 8017842:	f7fa fa3f 	bl	8011cc4 <pifCheckXor>
 8017846:	4603      	mov	r3, r0
 8017848:	461a      	mov	r2, r3
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017850:	4053      	eors	r3, r2
 8017852:	b2da      	uxtb	r2, r3
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 2;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017860:	3302      	adds	r3, #2
 8017862:	b29a      	uxth	r2, r3
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 801786a:	2301      	movs	r3, #1
 801786c:	e00d      	b.n	801788a <pifMsp_AddAnswer16+0x6e>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 2)) goto fail;
 801786e:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	3324      	adds	r3, #36	; 0x24
 8017874:	4618      	mov	r0, r3
 8017876:	f7fc f938 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 801787a:	4b06      	ldr	r3, [pc, #24]	; (8017894 <pifMsp_AddAnswer16+0x78>)
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d102      	bne.n	8017888 <pifMsp_AddAnswer16+0x6c>
 8017882:	4b04      	ldr	r3, [pc, #16]	; (8017894 <pifMsp_AddAnswer16+0x78>)
 8017884:	2204      	movs	r2, #4
 8017886:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017888:	2300      	movs	r3, #0
}
 801788a:	4618      	mov	r0, r3
 801788c:	3708      	adds	r7, #8
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	20001d48 	.word	0x20001d48

08017898 <pifMsp_AddAnswer32>:

BOOL pifMsp_AddAnswer32(PifMsp* p_owner, uint32_t data)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b082      	sub	sp, #8
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
 80178a0:	6039      	str	r1, [r7, #0]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	3324      	adds	r3, #36	; 0x24
 80178a6:	4639      	mov	r1, r7
 80178a8:	2204      	movs	r2, #4
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7fc f97e 	bl	8013bac <pifRingBuffer_PutData>
 80178b0:	4603      	mov	r3, r0
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d018      	beq.n	80178e8 <pifMsp_AddAnswer32+0x50>
	p_owner->__check_xor ^= pifCheckXor((uint8_t*)&data, 4);
 80178b6:	463b      	mov	r3, r7
 80178b8:	2104      	movs	r1, #4
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7fa fa02 	bl	8011cc4 <pifCheckXor>
 80178c0:	4603      	mov	r3, r0
 80178c2:	461a      	mov	r2, r3
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80178ca:	4053      	eors	r3, r2
 80178cc:	b2da      	uxtb	r2, r3
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size += 4;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80178da:	3304      	adds	r3, #4
 80178dc:	b29a      	uxth	r2, r3
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80178e4:	2301      	movs	r3, #1
 80178e6:	e00d      	b.n	8017904 <pifMsp_AddAnswer32+0x6c>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, (uint8_t*)&data, 4)) goto fail;
 80178e8:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	3324      	adds	r3, #36	; 0x24
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7fc f8fb 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80178f4:	4b05      	ldr	r3, [pc, #20]	; (801790c <pifMsp_AddAnswer32+0x74>)
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d102      	bne.n	8017902 <pifMsp_AddAnswer32+0x6a>
 80178fc:	4b03      	ldr	r3, [pc, #12]	; (801790c <pifMsp_AddAnswer32+0x74>)
 80178fe:	2204      	movs	r2, #4
 8017900:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017902:	2300      	movs	r3, #0
}
 8017904:	4618      	mov	r0, r3
 8017906:	3708      	adds	r7, #8
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}
 801790c:	20001d48 	.word	0x20001d48

08017910 <pifMsp_AddAnswer>:

BOOL pifMsp_AddAnswer(PifMsp* p_owner, uint8_t* p_data, uint16_t size)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b084      	sub	sp, #16
 8017914:	af00      	add	r7, sp, #0
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	4613      	mov	r3, r2
 801791c:	80fb      	strh	r3, [r7, #6]
	if (size > 0) {
 801791e:	88fb      	ldrh	r3, [r7, #6]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d021      	beq.n	8017968 <pifMsp_AddAnswer+0x58>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	3324      	adds	r3, #36	; 0x24
 8017928:	88fa      	ldrh	r2, [r7, #6]
 801792a:	68b9      	ldr	r1, [r7, #8]
 801792c:	4618      	mov	r0, r3
 801792e:	f7fc f93d 	bl	8013bac <pifRingBuffer_PutData>
 8017932:	4603      	mov	r3, r0
 8017934:	2b00      	cmp	r3, #0
 8017936:	d019      	beq.n	801796c <pifMsp_AddAnswer+0x5c>
		p_owner->__check_xor ^= pifCheckXor(p_data, size);
 8017938:	88fb      	ldrh	r3, [r7, #6]
 801793a:	4619      	mov	r1, r3
 801793c:	68b8      	ldr	r0, [r7, #8]
 801793e:	f7fa f9c1 	bl	8011cc4 <pifCheckXor>
 8017942:	4603      	mov	r3, r0
 8017944:	461a      	mov	r2, r3
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801794c:	4053      	eors	r3, r2
 801794e:	b2da      	uxtb	r2, r3
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		p_owner->__data_size += size;
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801795c:	88fb      	ldrh	r3, [r7, #6]
 801795e:	4413      	add	r3, r2
 8017960:	b29a      	uxth	r2, r3
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	}
	return TRUE;
 8017968:	2301      	movs	r3, #1
 801796a:	e00d      	b.n	8017988 <pifMsp_AddAnswer+0x78>
		if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, p_data, size)) goto fail;
 801796c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	3324      	adds	r3, #36	; 0x24
 8017972:	4618      	mov	r0, r3
 8017974:	f7fc f8b9 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017978:	4b05      	ldr	r3, [pc, #20]	; (8017990 <pifMsp_AddAnswer+0x80>)
 801797a:	781b      	ldrb	r3, [r3, #0]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <pifMsp_AddAnswer+0x76>
 8017980:	4b03      	ldr	r3, [pc, #12]	; (8017990 <pifMsp_AddAnswer+0x80>)
 8017982:	2204      	movs	r2, #4
 8017984:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017986:	2300      	movs	r3, #0
}
 8017988:	4618      	mov	r0, r3
 801798a:	3710      	adds	r7, #16
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	20001d48 	.word	0x20001d48

08017994 <pifMsp_MakeError>:

BOOL pifMsp_MakeError(PifMsp* p_owner, PifMspPacket* p_question)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	6039      	str	r1, [r7, #0]
	uint8_t header[5];

	pifRingBuffer_BeginPutting(&p_owner->__tx.answer_buffer);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	3324      	adds	r3, #36	; 0x24
 80179a2:	4618      	mov	r0, r3
 80179a4:	f7fc f87b 	bl	8013a9e <pifRingBuffer_BeginPutting>

	header[0] = '$';
 80179a8:	2324      	movs	r3, #36	; 0x24
 80179aa:	723b      	strb	r3, [r7, #8]
	header[1] = 'M';
 80179ac:	234d      	movs	r3, #77	; 0x4d
 80179ae:	727b      	strb	r3, [r7, #9]
	header[2] = '!';
 80179b0:	2321      	movs	r3, #33	; 0x21
 80179b2:	72bb      	strb	r3, [r7, #10]
	header[3] = 0;
 80179b4:	2300      	movs	r3, #0
 80179b6:	72fb      	strb	r3, [r7, #11]
	header[4] = p_question->command;
 80179b8:	683b      	ldr	r3, [r7, #0]
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	733b      	strb	r3, [r7, #12]
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	3324      	adds	r3, #36	; 0x24
 80179c2:	f107 0108 	add.w	r1, r7, #8
 80179c6:	2205      	movs	r2, #5
 80179c8:	4618      	mov	r0, r3
 80179ca:	f7fc f8ef 	bl	8013bac <pifRingBuffer_PutData>
 80179ce:	4603      	mov	r3, r0
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d009      	beq.n	80179e8 <pifMsp_MakeError+0x54>
	p_owner->__check_xor = header[4];
 80179d4:	7b3a      	ldrb	r2, [r7, #12]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	p_owner->__data_size = 0;
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	2200      	movs	r2, #0
 80179e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	return TRUE;
 80179e4:	2301      	movs	r3, #1
 80179e6:	e00d      	b.n	8017a04 <pifMsp_MakeError+0x70>
	if (!pifRingBuffer_PutData(&p_owner->__tx.answer_buffer, header, 5)) goto fail;
 80179e8:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	3324      	adds	r3, #36	; 0x24
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7fc f87b 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 80179f4:	4b05      	ldr	r3, [pc, #20]	; (8017a0c <pifMsp_MakeError+0x78>)
 80179f6:	781b      	ldrb	r3, [r3, #0]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d102      	bne.n	8017a02 <pifMsp_MakeError+0x6e>
 80179fc:	4b03      	ldr	r3, [pc, #12]	; (8017a0c <pifMsp_MakeError+0x78>)
 80179fe:	2204      	movs	r2, #4
 8017a00:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) C:%u EC:%d", __LINE__, p_owner->_id, p_question->command, pif_error);
#endif
	return FALSE;
 8017a02:	2300      	movs	r3, #0
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}
 8017a0c:	20001d48 	.word	0x20001d48

08017a10 <pifMsp_SendAnswer>:

BOOL pifMsp_SendAnswer(PifMsp* p_owner)
{
 8017a10:	b590      	push	{r4, r7, lr}
 8017a12:	b083      	sub	sp, #12
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
	*pifRingBuffer_GetPointerPutting(&p_owner->__tx.answer_buffer, 3) = p_owner->__data_size;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	3324      	adds	r3, #36	; 0x24
 8017a22:	2103      	movs	r1, #3
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7fc f872 	bl	8013b0e <pifRingBuffer_GetPointerPutting>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	b2e2      	uxtb	r2, r4
 8017a2e:	701a      	strb	r2, [r3, #0]
	p_owner->__check_xor ^= p_owner->__data_size;
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017a3c:	b2db      	uxtb	r3, r3
 8017a3e:	4053      	eors	r3, r2
 8017a40:	b2da      	uxtb	r2, r3
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017a54:	4619      	mov	r1, r3
 8017a56:	4610      	mov	r0, r2
 8017a58:	f7fc f874 	bl	8013b44 <pifRingBuffer_PutByte>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d00c      	beq.n	8017a7c <pifMsp_SendAnswer+0x6c>

	pifRingBuffer_CommitPutting(&p_owner->__tx.answer_buffer);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	3324      	adds	r3, #36	; 0x24
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7fc f831 	bl	8013ace <pifRingBuffer_CommitPutting>

	pifTask_SetTrigger(p_owner->__p_comm->_p_task);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	69db      	ldr	r3, [r3, #28]
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7fc fd4c 	bl	8014510 <pifTask_SetTrigger>
	return TRUE;
 8017a78:	2301      	movs	r3, #1
 8017a7a:	e00d      	b.n	8017a98 <pifMsp_SendAnswer+0x88>
	if (!pifRingBuffer_PutByte(&p_owner->__tx.answer_buffer, p_owner->__check_xor)) goto fail;
 8017a7c:	bf00      	nop

fail:
	pifRingBuffer_RollbackPutting(&p_owner->__tx.answer_buffer);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	3324      	adds	r3, #36	; 0x24
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7fc f831 	bl	8013aea <pifRingBuffer_RollbackPutting>
	if (!pif_error) pif_error = E_OVERFLOW_BUFFER;
 8017a88:	4b05      	ldr	r3, [pc, #20]	; (8017aa0 <pifMsp_SendAnswer+0x90>)
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d102      	bne.n	8017a96 <pifMsp_SendAnswer+0x86>
 8017a90:	4b03      	ldr	r3, [pc, #12]	; (8017aa0 <pifMsp_SendAnswer+0x90>)
 8017a92:	2204      	movs	r2, #4
 8017a94:	701a      	strb	r2, [r3, #0]
#ifndef __PIF_NO_LOG__
	pifLog_Printf(LT_ERROR, "MWP:%u(%u) EC:%d", __LINE__, p_owner->_id, pif_error);
#endif
	return FALSE;
 8017a96:	2300      	movs	r3, #0
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	370c      	adds	r7, #12
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd90      	pop	{r4, r7, pc}
 8017aa0:	20001d48 	.word	0x20001d48

08017aa4 <pifRc_AttachEvtReceive>:
#include "rc/pif_rc.h"


void pifRc_AttachEvtReceive(PifRc* p_owner, PifEvtRcReceive evt_receive, PifIssuerP p_issuer)
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	b085      	sub	sp, #20
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
	p_owner->__evt_receive = evt_receive;
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	68ba      	ldr	r2, [r7, #8]
 8017ab4:	619a      	str	r2, [r3, #24]
	p_owner->__p_issuer = p_issuer;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	687a      	ldr	r2, [r7, #4]
 8017aba:	61da      	str	r2, [r3, #28]
}
 8017abc:	bf00      	nop
 8017abe:	3714      	adds	r7, #20
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac6:	4770      	bx	lr

08017ac8 <pifRc_CheckFailSafe>:
	long loss_frames = p_owner->_lost_frames + p_owner->_error_frames;
	return (int)(loss_frames * 100 / (p_owner->_good_frames + loss_frames));
}

BOOL pifRc_CheckFailSafe(PifRc* p_owner) 
{
 8017ac8:	b480      	push	{r7}
 8017aca:	b085      	sub	sp, #20
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
	BOOL timeout = FALSE;
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	73fb      	strb	r3, [r7, #15]

	if (p_owner->_max_frame_period) {
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	889b      	ldrh	r3, [r3, #4]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d00c      	beq.n	8017af6 <pifRc_CheckFailSafe+0x2e>
		timeout = (pif_cumulative_timer1ms - p_owner->_last_frame_time) > p_owner->_max_frame_period;
 8017adc:	4b0e      	ldr	r3, [pc, #56]	; (8017b18 <pifRc_CheckFailSafe+0x50>)
 8017ade:	681a      	ldr	r2, [r3, #0]
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	689b      	ldr	r3, [r3, #8]
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	8892      	ldrh	r2, [r2, #4]
 8017aea:	4293      	cmp	r3, r2
 8017aec:	bf8c      	ite	hi
 8017aee:	2301      	movhi	r3, #1
 8017af0:	2300      	movls	r3, #0
 8017af2:	b2db      	uxtb	r3, r3
 8017af4:	73fb      	strb	r3, [r7, #15]
	}
	return p_owner->_failsafe || timeout;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	78db      	ldrb	r3, [r3, #3]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d102      	bne.n	8017b04 <pifRc_CheckFailSafe+0x3c>
 8017afe:	7bfb      	ldrb	r3, [r7, #15]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d001      	beq.n	8017b08 <pifRc_CheckFailSafe+0x40>
 8017b04:	2301      	movs	r3, #1
 8017b06:	e000      	b.n	8017b0a <pifRc_CheckFailSafe+0x42>
 8017b08:	2300      	movs	r3, #0
 8017b0a:	b2db      	uxtb	r3, r3
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3714      	adds	r7, #20
 8017b10:	46bd      	mov	sp, r7
 8017b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b16:	4770      	bx	lr
 8017b18:	20001d60 	.word	0x20001d60

08017b1c <_ParsingPacket>:

#define IBUS_RETRY_TIMEOUT		3		// 3ms, Packets are received very ~7ms so use ~half that for the gap


static void _ParsingPacket(PifRcIbus *p_owner, PifActCommReceiveData act_receive_data)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b084      	sub	sp, #16
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
 8017b24:	6039      	str	r1, [r7, #0]
	uint8_t data;
	static uint8_t ptr;                      // pointer in buffer
	static uint16_t chksum;                  // checksum calculation
	static uint8_t lchksum;                  // checksum lower byte received

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017b26:	e070      	b.n	8017c0a <_ParsingPacket+0xee>
		switch (p_owner->__rx_state) {
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017b2e:	2b03      	cmp	r3, #3
 8017b30:	d86a      	bhi.n	8017c08 <_ParsingPacket+0xec>
 8017b32:	a201      	add	r2, pc, #4	; (adr r2, 8017b38 <_ParsingPacket+0x1c>)
 8017b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b38:	08017b49 	.word	0x08017b49
 8017b3c:	08017b7d 	.word	0x08017b7d
 8017b40:	08017bbd 	.word	0x08017bbd
 8017b44:	08017bcd 	.word	0x08017bcd
		case IRS_GET_LENGTH:
			if (data <= IBUS_FRAME_SIZE && data > IBUS_OVERHEAD) {
 8017b48:	7bfb      	ldrb	r3, [r7, #15]
 8017b4a:	2b20      	cmp	r3, #32
 8017b4c:	d85d      	bhi.n	8017c0a <_ParsingPacket+0xee>
 8017b4e:	7bfb      	ldrb	r3, [r7, #15]
 8017b50:	2b03      	cmp	r3, #3
 8017b52:	d95a      	bls.n	8017c0a <_ParsingPacket+0xee>
				ptr = 0;
 8017b54:	4b34      	ldr	r3, [pc, #208]	; (8017c28 <_ParsingPacket+0x10c>)
 8017b56:	2200      	movs	r2, #0
 8017b58:	701a      	strb	r2, [r3, #0]
				p_owner->__rx_length = data - IBUS_OVERHEAD;
 8017b5a:	7bfb      	ldrb	r3, [r7, #15]
 8017b5c:	3b03      	subs	r3, #3
 8017b5e:	b2da      	uxtb	r2, r3
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				chksum = 0xFFFF - data;
 8017b66:	7bfb      	ldrb	r3, [r7, #15]
 8017b68:	b29b      	uxth	r3, r3
 8017b6a:	43db      	mvns	r3, r3
 8017b6c:	b29a      	uxth	r2, r3
 8017b6e:	4b2f      	ldr	r3, [pc, #188]	; (8017c2c <_ParsingPacket+0x110>)
 8017b70:	801a      	strh	r2, [r3, #0]
				p_owner->__rx_state = IRS_GET_DATA;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2201      	movs	r2, #1
 8017b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017b7a:	e046      	b.n	8017c0a <_ParsingPacket+0xee>

		case IRS_GET_DATA:
			p_owner->__rx_buffer[ptr++] = data;
 8017b7c:	4b2a      	ldr	r3, [pc, #168]	; (8017c28 <_ParsingPacket+0x10c>)
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	1c5a      	adds	r2, r3, #1
 8017b82:	b2d1      	uxtb	r1, r2
 8017b84:	4a28      	ldr	r2, [pc, #160]	; (8017c28 <_ParsingPacket+0x10c>)
 8017b86:	7011      	strb	r1, [r2, #0]
 8017b88:	4619      	mov	r1, r3
 8017b8a:	7bfa      	ldrb	r2, [r7, #15]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	440b      	add	r3, r1
 8017b90:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
			chksum -= data;
 8017b94:	4b25      	ldr	r3, [pc, #148]	; (8017c2c <_ParsingPacket+0x110>)
 8017b96:	881a      	ldrh	r2, [r3, #0]
 8017b98:	7bfb      	ldrb	r3, [r7, #15]
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	1ad3      	subs	r3, r2, r3
 8017b9e:	b29a      	uxth	r2, r3
 8017ba0:	4b22      	ldr	r3, [pc, #136]	; (8017c2c <_ParsingPacket+0x110>)
 8017ba2:	801a      	strh	r2, [r3, #0]
			if (ptr == p_owner->__rx_length) {
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8017baa:	4b1f      	ldr	r3, [pc, #124]	; (8017c28 <_ParsingPacket+0x10c>)
 8017bac:	781b      	ldrb	r3, [r3, #0]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	d12b      	bne.n	8017c0a <_ParsingPacket+0xee>
				p_owner->__rx_state = IRS_GET_CHKSUML;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2202      	movs	r2, #2
 8017bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017bba:	e026      	b.n	8017c0a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUML:
			lchksum = data;
 8017bbc:	7bfa      	ldrb	r2, [r7, #15]
 8017bbe:	4b1c      	ldr	r3, [pc, #112]	; (8017c30 <_ParsingPacket+0x114>)
 8017bc0:	701a      	strb	r2, [r3, #0]
			p_owner->__rx_state = IRS_GET_CHKSUMH;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2203      	movs	r2, #3
 8017bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			break;
 8017bca:	e01e      	b.n	8017c0a <_ParsingPacket+0xee>

		case IRS_GET_CHKSUMH:
			// Validate checksum
			if (chksum == ((uint16_t)data << 8) + lchksum) {
 8017bcc:	4b17      	ldr	r3, [pc, #92]	; (8017c2c <_ParsingPacket+0x110>)
 8017bce:	881b      	ldrh	r3, [r3, #0]
 8017bd0:	4619      	mov	r1, r3
 8017bd2:	7bfb      	ldrb	r3, [r7, #15]
 8017bd4:	021b      	lsls	r3, r3, #8
 8017bd6:	4a16      	ldr	r2, [pc, #88]	; (8017c30 <_ParsingPacket+0x114>)
 8017bd8:	7812      	ldrb	r2, [r2, #0]
 8017bda:	4413      	add	r3, r2
 8017bdc:	4299      	cmp	r1, r3
 8017bde:	d109      	bne.n	8017bf4 <_ParsingPacket+0xd8>
				p_owner->parent._good_frames++;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	68db      	ldr	r3, [r3, #12]
 8017be4:	1c5a      	adds	r2, r3, #1
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	60da      	str	r2, [r3, #12]
				p_owner->__rx_state = IRS_DONE;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2204      	movs	r2, #4
 8017bee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8017bf2:	e00a      	b.n	8017c0a <_ParsingPacket+0xee>
			}
			else {
				p_owner->parent._error_frames++;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	691b      	ldr	r3, [r3, #16]
 8017bf8:	1c5a      	adds	r2, r3, #1
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	611a      	str	r2, [r3, #16]
				p_owner->__rx_state = IRS_GET_LENGTH;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	2200      	movs	r2, #0
 8017c02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			break;
 8017c06:	e000      	b.n	8017c0a <_ParsingPacket+0xee>

		default:
			break;
 8017c08:	bf00      	nop
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017c0e:	f107 010f 	add.w	r1, r7, #15
 8017c12:	683b      	ldr	r3, [r7, #0]
 8017c14:	4610      	mov	r0, r2
 8017c16:	4798      	blx	r3
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d184      	bne.n	8017b28 <_ParsingPacket+0xc>
		}
	}
}
 8017c1e:	bf00      	nop
 8017c20:	bf00      	nop
 8017c22:	3710      	adds	r7, #16
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}
 8017c28:	20001ee6 	.word	0x20001ee6
 8017c2c:	20001ee8 	.word	0x20001ee8
 8017c30:	20001eea 	.word	0x20001eea

08017c34 <_evtParsing>:

static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b090      	sub	sp, #64	; 0x40
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	6078      	str	r0, [r7, #4]
 8017c3c:	6039      	str	r1, [r7, #0]
	PifRcIbus *p_owner = (PifRcIbus *)p_client;
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	637b      	str	r3, [r7, #52]	; 0x34
	PifRcIbusSensorinfo* p_sensor;
    int i;
	uint16_t p = 0;
 8017c42:	2300      	movs	r3, #0
 8017c44:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t tx_buffer[8];					// tx message buffer
	uint16_t channel[PIF_IBUS_CHANNEL_COUNT]; 	// servo data received
	uint16_t chksum;

    if (!p_owner->parent.__evt_receive) return;
 8017c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c48:	699b      	ldr	r3, [r3, #24]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	f000 8151 	beq.w	8017ef2 <_evtParsing+0x2be>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= IBUS_RETRY_TIMEOUT) {
 8017c50:	4baa      	ldr	r3, [pc, #680]	; (8017efc <_evtParsing+0x2c8>)
 8017c52:	681a      	ldr	r2, [r3, #0]
 8017c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017c5a:	1ad3      	subs	r3, r2, r3
 8017c5c:	2b02      	cmp	r3, #2
 8017c5e:	d903      	bls.n	8017c68 <_evtParsing+0x34>
		p_owner->__rx_state = IRS_GET_LENGTH;
 8017c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c62:	2200      	movs	r2, #0
 8017c64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8017c68:	4ba4      	ldr	r3, [pc, #656]	; (8017efc <_evtParsing+0x2c8>)
 8017c6a:	681a      	ldr	r2, [r3, #0]
 8017c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    if (p_owner->__rx_state < IRS_DONE) {
 8017c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c74:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017c78:	2b03      	cmp	r3, #3
 8017c7a:	d803      	bhi.n	8017c84 <_evtParsing+0x50>
    	_ParsingPacket(p_owner, act_receive_data);
 8017c7c:	6839      	ldr	r1, [r7, #0]
 8017c7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017c80:	f7ff ff4c 	bl	8017b1c <_ParsingPacket>
    }

    if (p_owner->__rx_state == IRS_DONE) {
 8017c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c86:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8017c8a:	2b04      	cmp	r3, #4
 8017c8c:	f040 8132 	bne.w	8017ef4 <_evtParsing+0x2c0>
		p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8017c90:	4b9a      	ldr	r3, [pc, #616]	; (8017efc <_evtParsing+0x2c8>)
 8017c92:	681a      	ldr	r2, [r3, #0]
 8017c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c96:	609a      	str	r2, [r3, #8]

		// Checksum is all fine Execute command - 
		uint8_t adr = p_owner->__rx_buffer[0] & 0x0f;
 8017c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c9a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017c9e:	f003 030f 	and.w	r3, r3, #15
 8017ca2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if (p_owner->__rx_buffer[0] == IBUS_COMMAND_SERVO) {
 8017ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ca8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017cac:	2b40      	cmp	r3, #64	; 0x40
 8017cae:	d130      	bne.n	8017d12 <_evtParsing+0xde>
			// Valid servo command received - extract channel data
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 8017cb0:	2301      	movs	r3, #1
 8017cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cb4:	e01c      	b.n	8017cf0 <_evtParsing+0xbc>
				channel[i / 2] = p_owner->__rx_buffer[i] | (p_owner->__rx_buffer[i + 1] << 8);
 8017cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cba:	4413      	add	r3, r2
 8017cbc:	337a      	adds	r3, #122	; 0x7a
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	b21a      	sxth	r2, r3
 8017cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cc4:	3301      	adds	r3, #1
 8017cc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017cc8:	440b      	add	r3, r1
 8017cca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017cce:	021b      	lsls	r3, r3, #8
 8017cd0:	b21b      	sxth	r3, r3
 8017cd2:	4313      	orrs	r3, r2
 8017cd4:	b219      	sxth	r1, r3
 8017cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cd8:	0fda      	lsrs	r2, r3, #31
 8017cda:	4413      	add	r3, r2
 8017cdc:	105b      	asrs	r3, r3, #1
 8017cde:	b28a      	uxth	r2, r1
 8017ce0:	005b      	lsls	r3, r3, #1
 8017ce2:	3340      	adds	r3, #64	; 0x40
 8017ce4:	443b      	add	r3, r7
 8017ce6:	f823 2c38 	strh.w	r2, [r3, #-56]
			for (i = 1; i < PIF_IBUS_CHANNEL_COUNT * 2 + 1; i += 2) {
 8017cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cec:	3302      	adds	r3, #2
 8017cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cf2:	2b1c      	cmp	r3, #28
 8017cf4:	dddf      	ble.n	8017cb6 <_evtParsing+0x82>
			}

	    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8017cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cf8:	699b      	ldr	r3, [r3, #24]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f000 80f4 	beq.w	8017ee8 <_evtParsing+0x2b4>
 8017d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d02:	699b      	ldr	r3, [r3, #24]
 8017d04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017d06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d08:	69d2      	ldr	r2, [r2, #28]
 8017d0a:	f107 0108 	add.w	r1, r7, #8
 8017d0e:	4798      	blx	r3
 8017d10:	e0ea      	b.n	8017ee8 <_evtParsing+0x2b4>
		} 
		else if (p_owner->__p_comm->_p_tx_buffer && adr <= p_owner->_number_sensors && adr > 0 && p_owner->__rx_length == 1) {
 8017d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d16:	695b      	ldr	r3, [r3, #20]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	f000 80e5 	beq.w	8017ee8 <_evtParsing+0x2b4>
 8017d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017d24:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	f200 80dd 	bhi.w	8017ee8 <_evtParsing+0x2b4>
 8017d2e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	f000 80d8 	beq.w	8017ee8 <_evtParsing+0x2b4>
 8017d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d3a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8017d3e:	2b01      	cmp	r3, #1
 8017d40:	f040 80d2 	bne.w	8017ee8 <_evtParsing+0x2b4>
			// all sensor data commands go here
			// we only process the length==1 commands (=message length is 4 bytes incl overhead) to prevent the case the
			// return messages from the UART TX port loop back to the RX port and are processed again. This is extra
			// precaution as it will also be prevented by the IBUS_TIMEGAP required
			p_sensor = &p_owner->__sensors[adr - 1];
 8017d44:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017d48:	3b01      	subs	r3, #1
 8017d4a:	3305      	adds	r3, #5
 8017d4c:	00db      	lsls	r3, r3, #3
 8017d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d50:	4413      	add	r3, r2
 8017d52:	633b      	str	r3, [r7, #48]	; 0x30
			switch (p_owner->__rx_buffer[0] & 0x0f0) {
 8017d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d56:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8017d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d5e:	2ba0      	cmp	r3, #160	; 0xa0
 8017d60:	d049      	beq.n	8017df6 <_evtParsing+0x1c2>
 8017d62:	2ba0      	cmp	r3, #160	; 0xa0
 8017d64:	f300 808f 	bgt.w	8017e86 <_evtParsing+0x252>
 8017d68:	2b80      	cmp	r3, #128	; 0x80
 8017d6a:	d002      	beq.n	8017d72 <_evtParsing+0x13e>
 8017d6c:	2b90      	cmp	r3, #144	; 0x90
 8017d6e:	d016      	beq.n	8017d9e <_evtParsing+0x16a>
 8017d70:	e089      	b.n	8017e86 <_evtParsing+0x252>
			case IBUS_COMMAND_DISCOVER:
				// echo discover command: 0x04, 0x81, 0x7A, 0xFF 
				tx_buffer[p++] = 0x04;
 8017d72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d74:	1c5a      	adds	r2, r3, #1
 8017d76:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017d78:	3340      	adds	r3, #64	; 0x40
 8017d7a:	443b      	add	r3, r7
 8017d7c:	2204      	movs	r2, #4
 8017d7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_DISCOVER + adr;
 8017d82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d84:	1c5a      	adds	r2, r3, #1
 8017d86:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017d88:	4619      	mov	r1, r3
 8017d8a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017d8e:	3b80      	subs	r3, #128	; 0x80
 8017d90:	b2da      	uxtb	r2, r3
 8017d92:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017d96:	443b      	add	r3, r7
 8017d98:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8017d9c:	e078      	b.n	8017e90 <_evtParsing+0x25c>

			case IBUS_COMMAND_TYPE:
				// echo sensor type command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x06;
 8017d9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017da0:	1c5a      	adds	r2, r3, #1
 8017da2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017da4:	3340      	adds	r3, #64	; 0x40
 8017da6:	443b      	add	r3, r7
 8017da8:	2206      	movs	r2, #6
 8017daa:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_TYPE + adr;
 8017dae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017db0:	1c5a      	adds	r2, r3, #1
 8017db2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017db4:	4619      	mov	r1, r3
 8017db6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017dba:	3b70      	subs	r3, #112	; 0x70
 8017dbc:	b2da      	uxtb	r2, r3
 8017dbe:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017dc2:	443b      	add	r3, r7
 8017dc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->type;
 8017dc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017dca:	1c5a      	adds	r2, r3, #1
 8017dcc:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017dce:	4619      	mov	r1, r3
 8017dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd2:	781a      	ldrb	r2, [r3, #0]
 8017dd4:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017dd8:	443b      	add	r3, r7
 8017dda:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->length;
 8017dde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017de0:	1c5a      	adds	r2, r3, #1
 8017de2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017de4:	4619      	mov	r1, r3
 8017de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de8:	785a      	ldrb	r2, [r3, #1]
 8017dea:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017dee:	443b      	add	r3, r7
 8017df0:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8017df4:	e04c      	b.n	8017e90 <_evtParsing+0x25c>

			case IBUS_COMMAND_VALUE:
				// echo sensor value command: 0x06 0x91 0x00 0x02 0x66 0xFF 
				tx_buffer[p++] = 0x04 + p_sensor->length;
 8017df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df8:	785a      	ldrb	r2, [r3, #1]
 8017dfa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017dfc:	1c59      	adds	r1, r3, #1
 8017dfe:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017e00:	3204      	adds	r2, #4
 8017e02:	b2d2      	uxtb	r2, r2
 8017e04:	3340      	adds	r3, #64	; 0x40
 8017e06:	443b      	add	r3, r7
 8017e08:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = IBUS_COMMAND_VALUE + adr;
 8017e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e0e:	1c5a      	adds	r2, r3, #1
 8017e10:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017e12:	4619      	mov	r1, r3
 8017e14:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017e18:	3b60      	subs	r3, #96	; 0x60
 8017e1a:	b2da      	uxtb	r2, r3
 8017e1c:	f101 0340 	add.w	r3, r1, #64	; 0x40
 8017e20:	443b      	add	r3, r7
 8017e22:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = p_sensor->value & 0x0ff;
 8017e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e28:	685a      	ldr	r2, [r3, #4]
 8017e2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e2c:	1c59      	adds	r1, r3, #1
 8017e2e:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017e30:	b2d2      	uxtb	r2, r2
 8017e32:	3340      	adds	r3, #64	; 0x40
 8017e34:	443b      	add	r3, r7
 8017e36:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = (p_sensor->value >> 8) & 0x0ff; 
 8017e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	121a      	asrs	r2, r3, #8
 8017e40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e42:	1c59      	adds	r1, r3, #1
 8017e44:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017e46:	b2d2      	uxtb	r2, r2
 8017e48:	3340      	adds	r3, #64	; 0x40
 8017e4a:	443b      	add	r3, r7
 8017e4c:	f803 2c1c 	strb.w	r2, [r3, #-28]
				if (p_sensor->length == 4) {
 8017e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e52:	785b      	ldrb	r3, [r3, #1]
 8017e54:	2b04      	cmp	r3, #4
 8017e56:	d11a      	bne.n	8017e8e <_evtParsing+0x25a>
					tx_buffer[p++] = (p_sensor->value >> 16) & 0x0ff; 
 8017e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e5a:	685b      	ldr	r3, [r3, #4]
 8017e5c:	141a      	asrs	r2, r3, #16
 8017e5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e60:	1c59      	adds	r1, r3, #1
 8017e62:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017e64:	b2d2      	uxtb	r2, r2
 8017e66:	3340      	adds	r3, #64	; 0x40
 8017e68:	443b      	add	r3, r7
 8017e6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
					tx_buffer[p++] = (p_sensor->value >> 24) & 0x0ff; 
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	685b      	ldr	r3, [r3, #4]
 8017e72:	0e1a      	lsrs	r2, r3, #24
 8017e74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e76:	1c59      	adds	r1, r3, #1
 8017e78:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017e7a:	b2d2      	uxtb	r2, r2
 8017e7c:	3340      	adds	r3, #64	; 0x40
 8017e7e:	443b      	add	r3, r7
 8017e80:	f803 2c1c 	strb.w	r2, [r3, #-28]
				}
				break;
 8017e84:	e003      	b.n	8017e8e <_evtParsing+0x25a>

			default:
				adr = 0; // unknown command, prevent sending chksum
 8017e86:	2300      	movs	r3, #0
 8017e88:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				break;
 8017e8c:	e000      	b.n	8017e90 <_evtParsing+0x25c>
				break;
 8017e8e:	bf00      	nop
			}
			if (adr > 0) {
 8017e90:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d027      	beq.n	8017ee8 <_evtParsing+0x2b4>
				chksum = 0xFFFF - pifCheckSum(tx_buffer, p);
 8017e98:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017e9e:	4611      	mov	r1, r2
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7f9 feee 	bl	8011c82 <pifCheckSum>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	b29b      	uxth	r3, r3
 8017eaa:	43db      	mvns	r3, r3
 8017eac:	85fb      	strh	r3, [r7, #46]	; 0x2e
				tx_buffer[p++] = chksum & 0x0ff;
 8017eae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017eb0:	1c5a      	adds	r2, r3, #1
 8017eb2:	877a      	strh	r2, [r7, #58]	; 0x3a
 8017eb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017eb6:	b2d2      	uxtb	r2, r2
 8017eb8:	3340      	adds	r3, #64	; 0x40
 8017eba:	443b      	add	r3, r7
 8017ebc:	f803 2c1c 	strb.w	r2, [r3, #-28]
				tx_buffer[p++] = chksum >> 8;
 8017ec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017ec2:	0a1b      	lsrs	r3, r3, #8
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017ec8:	1c59      	adds	r1, r3, #1
 8017eca:	8779      	strh	r1, [r7, #58]	; 0x3a
 8017ecc:	b2d2      	uxtb	r2, r2
 8017ece:	3340      	adds	r3, #64	; 0x40
 8017ed0:	443b      	add	r3, r7
 8017ed2:	f803 2c1c 	strb.w	r2, [r3, #-28]

				pifRingBuffer_PutData(p_owner->__p_comm->_p_tx_buffer, tx_buffer, p);
 8017ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017eda:	695b      	ldr	r3, [r3, #20]
 8017edc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ede:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7fb fe62 	bl	8013bac <pifRingBuffer_PutData>
			}
		}

    	p_owner->__rx_state = IRS_GET_LENGTH;
 8017ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017eea:	2200      	movs	r2, #0
 8017eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8017ef0:	e000      	b.n	8017ef4 <_evtParsing+0x2c0>
    if (!p_owner->parent.__evt_receive) return;
 8017ef2:	bf00      	nop
    }
}
 8017ef4:	3740      	adds	r7, #64	; 0x40
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}
 8017efa:	bf00      	nop
 8017efc:	20001d60 	.word	0x20001d60

08017f00 <pifRcIbus_Init>:

BOOL pifRcIbus_Init(PifRcIbus* p_owner, PifId id)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b082      	sub	sp, #8
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
 8017f08:	460b      	mov	r3, r1
 8017f0a:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d104      	bne.n	8017f1c <pifRcIbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8017f12:	4b11      	ldr	r3, [pc, #68]	; (8017f58 <pifRcIbus_Init+0x58>)
 8017f14:	2201      	movs	r2, #1
 8017f16:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	e018      	b.n	8017f4e <pifRcIbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcIbus));
 8017f1c:	22a0      	movs	r2, #160	; 0xa0
 8017f1e:	2100      	movs	r1, #0
 8017f20:	6878      	ldr	r0, [r7, #4]
 8017f22:	f00b f961 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8017f26:	887b      	ldrh	r3, [r7, #2]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d106      	bne.n	8017f3a <pifRcIbus_Init+0x3a>
 8017f2c:	4b0b      	ldr	r3, [pc, #44]	; (8017f5c <pifRcIbus_Init+0x5c>)
 8017f2e:	881b      	ldrh	r3, [r3, #0]
 8017f30:	1c5a      	adds	r2, r3, #1
 8017f32:	b291      	uxth	r1, r2
 8017f34:	4a09      	ldr	r2, [pc, #36]	; (8017f5c <pifRcIbus_Init+0x5c>)
 8017f36:	8011      	strh	r1, [r2, #0]
 8017f38:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	887a      	ldrh	r2, [r7, #2]
 8017f3e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_IBUS_CHANNEL_COUNT;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	220e      	movs	r2, #14
 8017f44:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = FALSE;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2200      	movs	r2, #0
 8017f4a:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8017f4c:	2301      	movs	r3, #1
}
 8017f4e:	4618      	mov	r0, r3
 8017f50:	3708      	adds	r7, #8
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}
 8017f56:	bf00      	nop
 8017f58:	20001d48 	.word	0x20001d48
 8017f5c:	20000128 	.word	0x20000128

08017f60 <pifRcIbus_AttachComm>:

void pifRcIbus_AttachComm(PifRcIbus* p_owner, PifComm *p_comm)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	683a      	ldr	r2, [r7, #0]
 8017f6e:	625a      	str	r2, [r3, #36]	; 0x24
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8017f70:	2300      	movs	r3, #0
 8017f72:	4a04      	ldr	r2, [pc, #16]	; (8017f84 <pifRcIbus_AttachComm+0x24>)
 8017f74:	6879      	ldr	r1, [r7, #4]
 8017f76:	6838      	ldr	r0, [r7, #0]
 8017f78:	f7f9 fffc 	bl	8011f74 <pifComm_AttachClient>
}
 8017f7c:	bf00      	nop
 8017f7e:	3708      	adds	r7, #8
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	08017c35 	.word	0x08017c35

08017f88 <_processRcPpm>:
#include "core/pif_list.h"
#include "rc/pif_rc_ppm.h"


static uint16_t _processRcPpm(PifRcPpm* p_owner, uint16_t diff)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b084      	sub	sp, #16
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
 8017f90:	460b      	mov	r3, r1
 8017f92:	807b      	strh	r3, [r7, #2]
	uint16_t rtn = 0;
 8017f94:	2300      	movs	r3, #0
 8017f96:	81fb      	strh	r3, [r7, #14]

	switch (p_owner->__process_step) {
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017f9e:	2b02      	cmp	r3, #2
 8017fa0:	d04f      	beq.n	8018042 <_processRcPpm+0xba>
 8017fa2:	2b02      	cmp	r3, #2
 8017fa4:	f300 80b5 	bgt.w	8018112 <_processRcPpm+0x18a>
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d002      	beq.n	8017fb2 <_processRcPpm+0x2a>
 8017fac:	2b01      	cmp	r3, #1
 8017fae:	d010      	beq.n	8017fd2 <_processRcPpm+0x4a>
 8017fb0:	e0af      	b.n	8018112 <_processRcPpm+0x18a>
	case 0:
		if (diff >= p_owner->__threshold_1us) p_owner->__process_step++;
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017fb8:	887a      	ldrh	r2, [r7, #2]
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	f0c0 80a4 	bcc.w	8018108 <_processRcPpm+0x180>
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017fc6:	3301      	adds	r3, #1
 8017fc8:	b2da      	uxtb	r2, r3
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8017fd0:	e09a      	b.n	8018108 <_processRcPpm+0x180>

	case 1:
		if (diff < p_owner->__threshold_1us) {
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8017fd8:	887a      	ldrh	r2, [r7, #2]
 8017fda:	429a      	cmp	r2, r3
 8017fdc:	d224      	bcs.n	8018028 <_processRcPpm+0xa0>
			p_owner->_channel++;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017fe4:	b2db      	uxtb	r3, r3
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	b2db      	uxtb	r3, r3
 8017fea:	b25a      	sxtb	r2, r3
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018000:	429a      	cmp	r2, r3
 8018002:	f280 8083 	bge.w	801810c <_processRcPpm+0x184>
				if (p_owner->_channel + 1 > p_owner->parent._channel_count) p_owner->parent._channel_count = p_owner->_channel + 1;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801800c:	461a      	mov	r2, r3
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	789b      	ldrb	r3, [r3, #2]
 8018012:	429a      	cmp	r2, r3
 8018014:	db7a      	blt.n	801810c <_processRcPpm+0x184>
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801801c:	b2db      	uxtb	r3, r3
 801801e:	3301      	adds	r3, #1
 8018020:	b2da      	uxtb	r2, r3
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	709a      	strb	r2, [r3, #2]
		}
		else {
			p_owner->_channel = -1;
			p_owner->__process_step++;
		}
		break;
 8018026:	e071      	b.n	801810c <_processRcPpm+0x184>
			p_owner->_channel = -1;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	22ff      	movs	r2, #255	; 0xff
 801802c:	f883 2020 	strb.w	r2, [r3, #32]
			p_owner->__process_step++;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8018036:	3301      	adds	r3, #1
 8018038:	b2da      	uxtb	r2, r3
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8018040:	e064      	b.n	801810c <_processRcPpm+0x184>

	case 2:
		if (diff < p_owner->__threshold_1us) {
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8018048:	887a      	ldrh	r2, [r7, #2]
 801804a:	429a      	cmp	r2, r3
 801804c:	d257      	bcs.n	80180fe <_processRcPpm+0x176>
			p_owner->_channel++;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018054:	b2db      	uxtb	r3, r3
 8018056:	3301      	adds	r3, #1
 8018058:	b2db      	uxtb	r3, r3
 801805a:	b25a      	sxtb	r2, r3
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f883 2020 	strb.w	r2, [r3, #32]
			if (p_owner->_channel < p_owner->__max_channel) {
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8018068:	461a      	mov	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8018070:	429a      	cmp	r2, r3
 8018072:	da4d      	bge.n	8018110 <_processRcPpm+0x188>
				if (p_owner->__valid_range.check) {
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801807a:	f003 0301 	and.w	r3, r3, #1
 801807e:	b2db      	uxtb	r3, r3
 8018080:	2b00      	cmp	r3, #0
 8018082:	d019      	beq.n	80180b8 <_processRcPpm+0x130>
					if (diff >= p_owner->__valid_range.min && diff <= p_owner->__valid_range.max) {
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018088:	f3c3 034e 	ubfx	r3, r3, #1, #15
 801808c:	b29b      	uxth	r3, r3
 801808e:	461a      	mov	r2, r3
 8018090:	887b      	ldrh	r3, [r7, #2]
 8018092:	4293      	cmp	r3, r2
 8018094:	d31b      	bcc.n	80180ce <_processRcPpm+0x146>
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801809a:	887a      	ldrh	r2, [r7, #2]
 801809c:	429a      	cmp	r2, r3
 801809e:	d816      	bhi.n	80180ce <_processRcPpm+0x146>
						p_owner->__p_channel[p_owner->_channel] = diff;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80180aa:	005b      	lsls	r3, r3, #1
 80180ac:	4413      	add	r3, r2
 80180ae:	887a      	ldrh	r2, [r7, #2]
 80180b0:	801a      	strh	r2, [r3, #0]
						rtn = diff;
 80180b2:	887b      	ldrh	r3, [r7, #2]
 80180b4:	81fb      	strh	r3, [r7, #14]
 80180b6:	e00a      	b.n	80180ce <_processRcPpm+0x146>
					}
				}
				else {
					p_owner->__p_channel[p_owner->_channel] = diff;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80180c2:	005b      	lsls	r3, r3, #1
 80180c4:	4413      	add	r3, r2
 80180c6:	887a      	ldrh	r2, [r7, #2]
 80180c8:	801a      	strh	r2, [r3, #0]
					rtn = diff;
 80180ca:	887b      	ldrh	r3, [r7, #2]
 80180cc:	81fb      	strh	r3, [r7, #14]
				}

				if (rtn && p_owner->_channel + 1 >= p_owner->parent._channel_count) {
 80180ce:	89fb      	ldrh	r3, [r7, #14]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d01d      	beq.n	8018110 <_processRcPpm+0x188>
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80180da:	3301      	adds	r3, #1
 80180dc:	687a      	ldr	r2, [r7, #4]
 80180de:	7892      	ldrb	r2, [r2, #2]
 80180e0:	4293      	cmp	r3, r2
 80180e2:	db15      	blt.n	8018110 <_processRcPpm+0x188>
					if (p_owner->parent.__evt_receive) {
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	699b      	ldr	r3, [r3, #24]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d011      	beq.n	8018110 <_processRcPpm+0x188>
						(*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__p_channel, p_owner->parent.__p_issuer);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	699b      	ldr	r3, [r3, #24]
 80180f0:	6878      	ldr	r0, [r7, #4]
 80180f2:	687a      	ldr	r2, [r7, #4]
 80180f4:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80180f6:	687a      	ldr	r2, [r7, #4]
 80180f8:	69d2      	ldr	r2, [r2, #28]
 80180fa:	4798      	blx	r3
			}
		}
		else {
			p_owner->_channel = -1;
		}
		break;
 80180fc:	e008      	b.n	8018110 <_processRcPpm+0x188>
			p_owner->_channel = -1;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	22ff      	movs	r2, #255	; 0xff
 8018102:	f883 2020 	strb.w	r2, [r3, #32]
		break;
 8018106:	e003      	b.n	8018110 <_processRcPpm+0x188>
		break;
 8018108:	bf00      	nop
 801810a:	e002      	b.n	8018112 <_processRcPpm+0x18a>
		break;
 801810c:	bf00      	nop
 801810e:	e000      	b.n	8018112 <_processRcPpm+0x18a>
		break;
 8018110:	bf00      	nop
	}
	return rtn;
 8018112:	89fb      	ldrh	r3, [r7, #14]
}
 8018114:	4618      	mov	r0, r3
 8018116:	3710      	adds	r7, #16
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}

0801811c <pifRcPpm_Init>:


BOOL pifRcPpm_Init(PifRcPpm* p_owner, PifId id, uint8_t channel_count, uint16_t threshold_1us)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b084      	sub	sp, #16
 8018120:	af00      	add	r7, sp, #0
 8018122:	60f8      	str	r0, [r7, #12]
 8018124:	4608      	mov	r0, r1
 8018126:	4611      	mov	r1, r2
 8018128:	461a      	mov	r2, r3
 801812a:	4603      	mov	r3, r0
 801812c:	817b      	strh	r3, [r7, #10]
 801812e:	460b      	mov	r3, r1
 8018130:	727b      	strb	r3, [r7, #9]
 8018132:	4613      	mov	r3, r2
 8018134:	80fb      	strh	r3, [r7, #6]
    if (!p_owner) {
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d104      	bne.n	8018146 <pifRcPpm_Init+0x2a>
        pif_error = E_INVALID_PARAM;
 801813c:	4b1e      	ldr	r3, [pc, #120]	; (80181b8 <pifRcPpm_Init+0x9c>)
 801813e:	2201      	movs	r2, #1
 8018140:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018142:	2300      	movs	r3, #0
 8018144:	e033      	b.n	80181ae <pifRcPpm_Init+0x92>
    }

	memset(p_owner, 0, sizeof(PifRcPpm));
 8018146:	2254      	movs	r2, #84	; 0x54
 8018148:	2100      	movs	r1, #0
 801814a:	68f8      	ldr	r0, [r7, #12]
 801814c:	f00b f84c 	bl	80231e8 <memset>

    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 8018150:	7a7b      	ldrb	r3, [r7, #9]
 8018152:	4619      	mov	r1, r3
 8018154:	2002      	movs	r0, #2
 8018156:	f00a fff7 	bl	8023148 <calloc>
 801815a:	4603      	mov	r3, r0
 801815c:	461a      	mov	r2, r3
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	651a      	str	r2, [r3, #80]	; 0x50
    if (!p_owner->__p_channel) {
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018166:	2b00      	cmp	r3, #0
 8018168:	d104      	bne.n	8018174 <pifRcPpm_Init+0x58>
		pif_error = E_OUT_OF_HEAP;
 801816a:	4b13      	ldr	r3, [pc, #76]	; (80181b8 <pifRcPpm_Init+0x9c>)
 801816c:	2203      	movs	r2, #3
 801816e:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018170:	2300      	movs	r3, #0
 8018172:	e01c      	b.n	80181ae <pifRcPpm_Init+0x92>
	}

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018174:	897b      	ldrh	r3, [r7, #10]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d106      	bne.n	8018188 <pifRcPpm_Init+0x6c>
 801817a:	4b10      	ldr	r3, [pc, #64]	; (80181bc <pifRcPpm_Init+0xa0>)
 801817c:	881b      	ldrh	r3, [r3, #0]
 801817e:	1c5a      	adds	r2, r3, #1
 8018180:	b291      	uxth	r1, r2
 8018182:	4a0e      	ldr	r2, [pc, #56]	; (80181bc <pifRcPpm_Init+0xa0>)
 8018184:	8011      	strh	r1, [r2, #0]
 8018186:	817b      	strh	r3, [r7, #10]
    p_owner->parent._id = id;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	897a      	ldrh	r2, [r7, #10]
 801818c:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	2200      	movs	r2, #0
 8018192:	70da      	strb	r2, [r3, #3]
	p_owner->_channel = -1;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	22ff      	movs	r2, #255	; 0xff
 8018198:	f883 2020 	strb.w	r2, [r3, #32]
	p_owner->__max_channel = channel_count;
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	7a7a      	ldrb	r2, [r7, #9]
 80181a0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    p_owner->__threshold_1us = threshold_1us;
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	88fa      	ldrh	r2, [r7, #6]
 80181a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    return TRUE;
 80181ac:	2301      	movs	r3, #1
}
 80181ae:	4618      	mov	r0, r3
 80181b0:	3710      	adds	r7, #16
 80181b2:	46bd      	mov	sp, r7
 80181b4:	bd80      	pop	{r7, pc}
 80181b6:	bf00      	nop
 80181b8:	20001d48 	.word	0x20001d48
 80181bc:	20000128 	.word	0x20000128

080181c0 <pifRcPpm_SetValidRange>:
		p_owner->__p_channel = NULL;
	}
}

BOOL pifRcPpm_SetValidRange(PifRcPpm* p_owner, uint32_t min, uint32_t max)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b085      	sub	sp, #20
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	60f8      	str	r0, [r7, #12]
 80181c8:	60b9      	str	r1, [r7, #8]
 80181ca:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80181d2:	f043 0301 	orr.w	r3, r3, #1
 80181d6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.min = min;
 80181da:	68bb      	ldr	r3, [r7, #8]
 80181dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80181e0:	b299      	uxth	r1, r3
 80181e2:	68fa      	ldr	r2, [r7, #12]
 80181e4:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 80181e6:	f361 034f 	bfi	r3, r1, #1, #15
 80181ea:	8453      	strh	r3, [r2, #34]	; 0x22
	p_owner->__valid_range.max = max;
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	b29a      	uxth	r2, r3
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	849a      	strh	r2, [r3, #36]	; 0x24
	return TRUE;
 80181f4:	2301      	movs	r3, #1
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	3714      	adds	r7, #20
 80181fa:	46bd      	mov	sp, r7
 80181fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018200:	4770      	bx	lr

08018202 <pifRcPpm_sigTick>:
	p_owner->__last_ptr = 0;
	p_owner->__count = 0;
}

uint16_t pifRcPpm_sigTick(PifRcPpm* p_owner, uint32_t time_us)
{
 8018202:	b580      	push	{r7, lr}
 8018204:	b084      	sub	sp, #16
 8018206:	af00      	add	r7, sp, #0
 8018208:	6078      	str	r0, [r7, #4]
 801820a:	6039      	str	r1, [r7, #0]
	uint16_t rtn = 0;
 801820c:	2300      	movs	r3, #0
 801820e:	81fb      	strh	r3, [r7, #14]

	p_owner->__pulse[p_owner->__ptr].falling = time_us;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018216:	687a      	ldr	r2, [r7, #4]
 8018218:	3305      	adds	r3, #5
 801821a:	00db      	lsls	r3, r3, #3
 801821c:	4413      	add	r3, r2
 801821e:	683a      	ldr	r2, [r7, #0]
 8018220:	605a      	str	r2, [r3, #4]
	rtn = _processRcPpm(p_owner, p_owner->__pulse[p_owner->__ptr].falling - p_owner->__pulse[p_owner->__last_ptr].falling);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018228:	687a      	ldr	r2, [r7, #4]
 801822a:	3305      	adds	r3, #5
 801822c:	00db      	lsls	r3, r3, #3
 801822e:	4413      	add	r3, r2
 8018230:	685b      	ldr	r3, [r3, #4]
 8018232:	b29a      	uxth	r2, r3
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801823a:	6879      	ldr	r1, [r7, #4]
 801823c:	3305      	adds	r3, #5
 801823e:	00db      	lsls	r3, r3, #3
 8018240:	440b      	add	r3, r1
 8018242:	685b      	ldr	r3, [r3, #4]
 8018244:	b29b      	uxth	r3, r3
 8018246:	1ad3      	subs	r3, r2, r3
 8018248:	b29b      	uxth	r3, r3
 801824a:	4619      	mov	r1, r3
 801824c:	6878      	ldr	r0, [r7, #4]
 801824e:	f7ff fe9b 	bl	8017f88 <_processRcPpm>
 8018252:	4603      	mov	r3, r0
 8018254:	81fb      	strh	r3, [r7, #14]
	p_owner->__last_ptr = p_owner->__ptr;
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	p_owner->__ptr = (p_owner->__ptr + 1) & PIF_RC_PPM_DATA_MASK;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8018268:	3301      	adds	r3, #1
 801826a:	b2db      	uxtb	r3, r3
 801826c:	f003 0303 	and.w	r3, r3, #3
 8018270:	b2da      	uxtb	r2, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (p_owner->__count < PIF_RC_PPM_DATA_SIZE) p_owner->__count++;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801827e:	2b03      	cmp	r3, #3
 8018280:	d807      	bhi.n	8018292 <pifRcPpm_sigTick+0x90>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8018288:	3301      	adds	r3, #1
 801828a:	b2da      	uxtb	r2, r3
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	return rtn;
 8018292:	89fb      	ldrh	r3, [r7, #14]
}
 8018294:	4618      	mov	r0, r3
 8018296:	3710      	adds	r7, #16
 8018298:	46bd      	mov	sp, r7
 801829a:	bd80      	pop	{r7, pc}

0801829c <pifRcPwm_Init>:
	return rtn;
}


BOOL pifRcPwm_Init(PifRcPwm* p_owner, PifId id, uint8_t channel_count)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
 80182a4:	460b      	mov	r3, r1
 80182a6:	807b      	strh	r3, [r7, #2]
 80182a8:	4613      	mov	r3, r2
 80182aa:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d104      	bne.n	80182bc <pifRcPwm_Init+0x20>
        pif_error = E_INVALID_PARAM;
 80182b2:	4b25      	ldr	r3, [pc, #148]	; (8018348 <pifRcPwm_Init+0xac>)
 80182b4:	2201      	movs	r2, #1
 80182b6:	701a      	strb	r2, [r3, #0]
        return FALSE;
 80182b8:	2300      	movs	r3, #0
 80182ba:	e041      	b.n	8018340 <pifRcPwm_Init+0xa4>
    }

	memset(p_owner, 0, sizeof(PifRcPwm));
 80182bc:	2230      	movs	r2, #48	; 0x30
 80182be:	2100      	movs	r1, #0
 80182c0:	6878      	ldr	r0, [r7, #4]
 80182c2:	f00a ff91 	bl	80231e8 <memset>

	p_owner->__p_data = calloc(sizeof(PifRcPwmData), channel_count);
 80182c6:	787b      	ldrb	r3, [r7, #1]
 80182c8:	4619      	mov	r1, r3
 80182ca:	2024      	movs	r0, #36	; 0x24
 80182cc:	f00a ff3c 	bl	8023148 <calloc>
 80182d0:	4603      	mov	r3, r0
 80182d2:	461a      	mov	r2, r3
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	629a      	str	r2, [r3, #40]	; 0x28
    if (!p_owner->__p_data) {
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d108      	bne.n	80182f2 <pifRcPwm_Init+0x56>
		pif_error = E_OUT_OF_HEAP;
 80182e0:	4b19      	ldr	r3, [pc, #100]	; (8018348 <pifRcPwm_Init+0xac>)
 80182e2:	2203      	movs	r2, #3
 80182e4:	701a      	strb	r2, [r3, #0]
        goto fail;
 80182e6:	bf00      	nop
	p_owner->parent._failsafe = FALSE;
	p_owner->__max_channel = channel_count;
    return TRUE;

fail:
	pifRcPwm_Clear(p_owner);
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f000 f831 	bl	8018350 <pifRcPwm_Clear>
	return FALSE;
 80182ee:	2300      	movs	r3, #0
 80182f0:	e026      	b.n	8018340 <pifRcPwm_Init+0xa4>
    p_owner->__p_channel = calloc(sizeof(uint16_t), channel_count);
 80182f2:	787b      	ldrb	r3, [r7, #1]
 80182f4:	4619      	mov	r1, r3
 80182f6:	2002      	movs	r0, #2
 80182f8:	f00a ff26 	bl	8023148 <calloc>
 80182fc:	4603      	mov	r3, r0
 80182fe:	461a      	mov	r2, r3
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	62da      	str	r2, [r3, #44]	; 0x2c
    if (!p_owner->__p_channel) {
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018308:	2b00      	cmp	r3, #0
 801830a:	d104      	bne.n	8018316 <pifRcPwm_Init+0x7a>
		pif_error = E_OUT_OF_HEAP;
 801830c:	4b0e      	ldr	r3, [pc, #56]	; (8018348 <pifRcPwm_Init+0xac>)
 801830e:	2203      	movs	r2, #3
 8018310:	701a      	strb	r2, [r3, #0]
        return FALSE;
 8018312:	2300      	movs	r3, #0
 8018314:	e014      	b.n	8018340 <pifRcPwm_Init+0xa4>
    if (id == PIF_ID_AUTO) id = pif_id++;
 8018316:	887b      	ldrh	r3, [r7, #2]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d106      	bne.n	801832a <pifRcPwm_Init+0x8e>
 801831c:	4b0b      	ldr	r3, [pc, #44]	; (801834c <pifRcPwm_Init+0xb0>)
 801831e:	881b      	ldrh	r3, [r3, #0]
 8018320:	1c5a      	adds	r2, r3, #1
 8018322:	b291      	uxth	r1, r2
 8018324:	4a09      	ldr	r2, [pc, #36]	; (801834c <pifRcPwm_Init+0xb0>)
 8018326:	8011      	strh	r1, [r2, #0]
 8018328:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	887a      	ldrh	r2, [r7, #2]
 801832e:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2200      	movs	r2, #0
 8018334:	70da      	strb	r2, [r3, #3]
	p_owner->__max_channel = channel_count;
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	787a      	ldrb	r2, [r7, #1]
 801833a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    return TRUE;
 801833e:	2301      	movs	r3, #1
}
 8018340:	4618      	mov	r0, r3
 8018342:	3708      	adds	r7, #8
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}
 8018348:	20001d48 	.word	0x20001d48
 801834c:	20000128 	.word	0x20000128

08018350 <pifRcPwm_Clear>:

void pifRcPwm_Clear(PifRcPwm* p_owner)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b082      	sub	sp, #8
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]
	if (p_owner->__p_channel) {
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801835c:	2b00      	cmp	r3, #0
 801835e:	d007      	beq.n	8018370 <pifRcPwm_Clear+0x20>
		free(p_owner->__p_channel);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018364:	4618      	mov	r0, r3
 8018366:	f00a ff29 	bl	80231bc <free>
		p_owner->__p_channel = NULL;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	2200      	movs	r2, #0
 801836e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (p_owner->__p_data) {
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018374:	2b00      	cmp	r3, #0
 8018376:	d007      	beq.n	8018388 <pifRcPwm_Clear+0x38>
		free(p_owner->__p_data);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801837c:	4618      	mov	r0, r3
 801837e:	f00a ff1d 	bl	80231bc <free>
		p_owner->__p_data = NULL;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	2200      	movs	r2, #0
 8018386:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8018388:	bf00      	nop
 801838a:	3708      	adds	r7, #8
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}

08018390 <pifRcPwm_SetValidRange>:

BOOL pifRcPwm_SetValidRange(PifRcPwm* p_owner, uint32_t min, uint32_t max)
{
 8018390:	b480      	push	{r7}
 8018392:	b085      	sub	sp, #20
 8018394:	af00      	add	r7, sp, #0
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	60b9      	str	r1, [r7, #8]
 801839a:	607a      	str	r2, [r7, #4]
	p_owner->__valid_range.check = TRUE;
 801839c:	68fa      	ldr	r2, [r7, #12]
 801839e:	f892 3020 	ldrb.w	r3, [r2, #32]
 80183a2:	f043 0301 	orr.w	r3, r3, #1
 80183a6:	f882 3020 	strb.w	r3, [r2, #32]
	p_owner->__valid_range.min = min;
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80183b0:	b299      	uxth	r1, r3
 80183b2:	68fa      	ldr	r2, [r7, #12]
 80183b4:	8c13      	ldrh	r3, [r2, #32]
 80183b6:	f361 034f 	bfi	r3, r1, #1, #15
 80183ba:	8413      	strh	r3, [r2, #32]
	p_owner->__valid_range.max = max;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	b29a      	uxth	r2, r3
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	845a      	strh	r2, [r3, #34]	; 0x22
	return TRUE;
 80183c4:	2301      	movs	r3, #1
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3714      	adds	r7, #20
 80183ca:	46bd      	mov	sp, r7
 80183cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d0:	4770      	bx	lr
	...

080183d4 <_evtParsing>:

#define SBUS_RETRY_TIMEOUT		3		// 3ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b090      	sub	sp, #64	; 0x40
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	6039      	str	r1, [r7, #0]
	PifRcSbus *p_owner = (PifRcSbus *)p_client;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t i, data;
	uint8_t* p_buffer;
	uint16_t channels[PIF_SBUS_CHANNEL_COUNT]; 	// servo data received

    if (!p_owner->parent.__evt_receive) return;
 80183e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e4:	699b      	ldr	r3, [r3, #24]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	f000 8206 	beq.w	80187f8 <_evtParsing+0x424>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SBUS_RETRY_TIMEOUT) {
 80183ec:	4b1f      	ldr	r3, [pc, #124]	; (801846c <_evtParsing+0x98>)
 80183ee:	681a      	ldr	r2, [r3, #0]
 80183f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183f4:	1ad3      	subs	r3, r2, r3
 80183f6:	2b02      	cmp	r3, #2
 80183f8:	d903      	bls.n	8018402 <_evtParsing+0x2e>
		p_owner->__index = 0;
 80183fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183fc:	2200      	movs	r2, #0
 80183fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018402:	4b1a      	ldr	r3, [pc, #104]	; (801846c <_evtParsing+0x98>)
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018408:	641a      	str	r2, [r3, #64]	; 0x40

	p_buffer = p_owner->__buffer;
 801840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801840c:	3325      	adds	r3, #37	; 0x25
 801840e:	637b      	str	r3, [r7, #52]	; 0x34

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018410:	e1e6      	b.n	80187e0 <_evtParsing+0x40c>
		if (p_owner->__index == 0 && data != SBUS_STARTBYTE) {
 8018412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018418:	2b00      	cmp	r3, #0
 801841a:	d104      	bne.n	8018426 <_evtParsing+0x52>
 801841c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018420:	2b0f      	cmp	r3, #15
 8018422:	d000      	beq.n	8018426 <_evtParsing+0x52>
			continue;
 8018424:	e1dc      	b.n	80187e0 <_evtParsing+0x40c>
		}

		p_buffer[p_owner->__index++] = data;
 8018426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018428:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801842c:	1c5a      	adds	r2, r3, #1
 801842e:	b2d1      	uxtb	r1, r2
 8018430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018432:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8018436:	461a      	mov	r2, r3
 8018438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801843a:	4413      	add	r3, r2
 801843c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8018440:	701a      	strb	r2, [r3, #0]

	    if (p_owner->__index == SBUS_FRAME_SIZE) {
 8018442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018448:	2b19      	cmp	r3, #25
 801844a:	f040 81c9 	bne.w	80187e0 <_evtParsing+0x40c>
			p_owner->__index = 0;
 801844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018450:	2200      	movs	r2, #0
 8018452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if (p_buffer[24] != SBUS_ENDBYTE) {
 8018456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018458:	3318      	adds	r3, #24
 801845a:	781b      	ldrb	r3, [r3, #0]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d007      	beq.n	8018470 <_evtParsing+0x9c>
				//incorrect end byte, out of sync
				p_owner->parent._error_frames++;
 8018460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018462:	691b      	ldr	r3, [r3, #16]
 8018464:	1c5a      	adds	r2, r3, #1
 8018466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018468:	611a      	str	r2, [r3, #16]
				continue;
 801846a:	e1b9      	b.n	80187e0 <_evtParsing+0x40c>
 801846c:	20001d60 	.word	0x20001d60
			}

			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018470:	4b9d      	ldr	r3, [pc, #628]	; (80186e8 <_evtParsing+0x314>)
 8018472:	681a      	ldr	r2, [r3, #0]
 8018474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018476:	609a      	str	r2, [r3, #8]

			channels[0]  = (p_buffer[1]       | p_buffer[2] << 8)                       & 0x07FF;
 8018478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801847a:	3301      	adds	r3, #1
 801847c:	781b      	ldrb	r3, [r3, #0]
 801847e:	b21a      	sxth	r2, r3
 8018480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018482:	3302      	adds	r3, #2
 8018484:	781b      	ldrb	r3, [r3, #0]
 8018486:	021b      	lsls	r3, r3, #8
 8018488:	b21b      	sxth	r3, r3
 801848a:	4313      	orrs	r3, r2
 801848c:	b21b      	sxth	r3, r3
 801848e:	b29b      	uxth	r3, r3
 8018490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018494:	b29b      	uxth	r3, r3
 8018496:	81bb      	strh	r3, [r7, #12]
			channels[1]  = (p_buffer[2] >> 3  | p_buffer[3] << 5)                 	    & 0x07FF;
 8018498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801849a:	3302      	adds	r3, #2
 801849c:	781b      	ldrb	r3, [r3, #0]
 801849e:	08db      	lsrs	r3, r3, #3
 80184a0:	b2db      	uxtb	r3, r3
 80184a2:	b21a      	sxth	r2, r3
 80184a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184a6:	3303      	adds	r3, #3
 80184a8:	781b      	ldrb	r3, [r3, #0]
 80184aa:	015b      	lsls	r3, r3, #5
 80184ac:	b21b      	sxth	r3, r3
 80184ae:	4313      	orrs	r3, r2
 80184b0:	b21b      	sxth	r3, r3
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	81fb      	strh	r3, [r7, #14]
			channels[2]  = (p_buffer[3] >> 6  | p_buffer[4] << 2  | p_buffer[5] << 10)  & 0x07FF;
 80184bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184be:	3303      	adds	r3, #3
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	099b      	lsrs	r3, r3, #6
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	b21a      	sxth	r2, r3
 80184c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184ca:	3304      	adds	r3, #4
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	009b      	lsls	r3, r3, #2
 80184d0:	b21b      	sxth	r3, r3
 80184d2:	4313      	orrs	r3, r2
 80184d4:	b21a      	sxth	r2, r3
 80184d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184d8:	3305      	adds	r3, #5
 80184da:	781b      	ldrb	r3, [r3, #0]
 80184dc:	029b      	lsls	r3, r3, #10
 80184de:	b21b      	sxth	r3, r3
 80184e0:	4313      	orrs	r3, r2
 80184e2:	b21b      	sxth	r3, r3
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80184ea:	b29b      	uxth	r3, r3
 80184ec:	823b      	strh	r3, [r7, #16]
			channels[3]  = (p_buffer[5] >> 1  | p_buffer[6] << 7)                 	    & 0x07FF;
 80184ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184f0:	3305      	adds	r3, #5
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	085b      	lsrs	r3, r3, #1
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	b21a      	sxth	r2, r3
 80184fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184fc:	3306      	adds	r3, #6
 80184fe:	781b      	ldrb	r3, [r3, #0]
 8018500:	01db      	lsls	r3, r3, #7
 8018502:	b21b      	sxth	r3, r3
 8018504:	4313      	orrs	r3, r2
 8018506:	b21b      	sxth	r3, r3
 8018508:	b29b      	uxth	r3, r3
 801850a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801850e:	b29b      	uxth	r3, r3
 8018510:	827b      	strh	r3, [r7, #18]
			channels[4]  = (p_buffer[6] >> 4  | p_buffer[7] << 4)                 	    & 0x07FF;
 8018512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018514:	3306      	adds	r3, #6
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	091b      	lsrs	r3, r3, #4
 801851a:	b2db      	uxtb	r3, r3
 801851c:	b21a      	sxth	r2, r3
 801851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018520:	3307      	adds	r3, #7
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	011b      	lsls	r3, r3, #4
 8018526:	b21b      	sxth	r3, r3
 8018528:	4313      	orrs	r3, r2
 801852a:	b21b      	sxth	r3, r3
 801852c:	b29b      	uxth	r3, r3
 801852e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018532:	b29b      	uxth	r3, r3
 8018534:	82bb      	strh	r3, [r7, #20]
			channels[5]  = (p_buffer[7] >> 7  | p_buffer[8] << 1  | p_buffer[9] << 9)   & 0x07FF;
 8018536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018538:	3307      	adds	r3, #7
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	09db      	lsrs	r3, r3, #7
 801853e:	b2db      	uxtb	r3, r3
 8018540:	b21a      	sxth	r2, r3
 8018542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018544:	3308      	adds	r3, #8
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	b21b      	sxth	r3, r3
 801854c:	4313      	orrs	r3, r2
 801854e:	b21a      	sxth	r2, r3
 8018550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018552:	3309      	adds	r3, #9
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	025b      	lsls	r3, r3, #9
 8018558:	b21b      	sxth	r3, r3
 801855a:	4313      	orrs	r3, r2
 801855c:	b21b      	sxth	r3, r3
 801855e:	b29b      	uxth	r3, r3
 8018560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018564:	b29b      	uxth	r3, r3
 8018566:	82fb      	strh	r3, [r7, #22]
			channels[6]  = (p_buffer[9] >> 2  | p_buffer[10] << 6)                	    & 0x07FF;
 8018568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801856a:	3309      	adds	r3, #9
 801856c:	781b      	ldrb	r3, [r3, #0]
 801856e:	089b      	lsrs	r3, r3, #2
 8018570:	b2db      	uxtb	r3, r3
 8018572:	b21a      	sxth	r2, r3
 8018574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018576:	330a      	adds	r3, #10
 8018578:	781b      	ldrb	r3, [r3, #0]
 801857a:	019b      	lsls	r3, r3, #6
 801857c:	b21b      	sxth	r3, r3
 801857e:	4313      	orrs	r3, r2
 8018580:	b21b      	sxth	r3, r3
 8018582:	b29b      	uxth	r3, r3
 8018584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018588:	b29b      	uxth	r3, r3
 801858a:	833b      	strh	r3, [r7, #24]
			channels[7]  = (p_buffer[10] >> 5 | p_buffer[11] << 3)                	    & 0x07FF;
 801858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801858e:	330a      	adds	r3, #10
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	095b      	lsrs	r3, r3, #5
 8018594:	b2db      	uxtb	r3, r3
 8018596:	b21a      	sxth	r2, r3
 8018598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801859a:	330b      	adds	r3, #11
 801859c:	781b      	ldrb	r3, [r3, #0]
 801859e:	00db      	lsls	r3, r3, #3
 80185a0:	b21b      	sxth	r3, r3
 80185a2:	4313      	orrs	r3, r2
 80185a4:	b21b      	sxth	r3, r3
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80185ac:	b29b      	uxth	r3, r3
 80185ae:	837b      	strh	r3, [r7, #26]
			channels[8]  = (p_buffer[12]      | p_buffer[13] << 8)                	    & 0x07FF;
 80185b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185b2:	330c      	adds	r3, #12
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	b21a      	sxth	r2, r3
 80185b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ba:	330d      	adds	r3, #13
 80185bc:	781b      	ldrb	r3, [r3, #0]
 80185be:	021b      	lsls	r3, r3, #8
 80185c0:	b21b      	sxth	r3, r3
 80185c2:	4313      	orrs	r3, r2
 80185c4:	b21b      	sxth	r3, r3
 80185c6:	b29b      	uxth	r3, r3
 80185c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80185cc:	b29b      	uxth	r3, r3
 80185ce:	83bb      	strh	r3, [r7, #28]
			channels[9]  = (p_buffer[13] >> 3 | p_buffer[14] << 5)                	    & 0x07FF;
 80185d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185d2:	330d      	adds	r3, #13
 80185d4:	781b      	ldrb	r3, [r3, #0]
 80185d6:	08db      	lsrs	r3, r3, #3
 80185d8:	b2db      	uxtb	r3, r3
 80185da:	b21a      	sxth	r2, r3
 80185dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185de:	330e      	adds	r3, #14
 80185e0:	781b      	ldrb	r3, [r3, #0]
 80185e2:	015b      	lsls	r3, r3, #5
 80185e4:	b21b      	sxth	r3, r3
 80185e6:	4313      	orrs	r3, r2
 80185e8:	b21b      	sxth	r3, r3
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	83fb      	strh	r3, [r7, #30]
			channels[10] = (p_buffer[14] >> 6 | p_buffer[15] << 2 | p_buffer[16] << 10) & 0x07FF;
 80185f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185f6:	330e      	adds	r3, #14
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	099b      	lsrs	r3, r3, #6
 80185fc:	b2db      	uxtb	r3, r3
 80185fe:	b21a      	sxth	r2, r3
 8018600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018602:	330f      	adds	r3, #15
 8018604:	781b      	ldrb	r3, [r3, #0]
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	b21b      	sxth	r3, r3
 801860a:	4313      	orrs	r3, r2
 801860c:	b21a      	sxth	r2, r3
 801860e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018610:	3310      	adds	r3, #16
 8018612:	781b      	ldrb	r3, [r3, #0]
 8018614:	029b      	lsls	r3, r3, #10
 8018616:	b21b      	sxth	r3, r3
 8018618:	4313      	orrs	r3, r2
 801861a:	b21b      	sxth	r3, r3
 801861c:	b29b      	uxth	r3, r3
 801861e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018622:	b29b      	uxth	r3, r3
 8018624:	843b      	strh	r3, [r7, #32]
			channels[11] = (p_buffer[16] >> 1 | p_buffer[17] << 7)                	    & 0x07FF;
 8018626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018628:	3310      	adds	r3, #16
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	085b      	lsrs	r3, r3, #1
 801862e:	b2db      	uxtb	r3, r3
 8018630:	b21a      	sxth	r2, r3
 8018632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018634:	3311      	adds	r3, #17
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	01db      	lsls	r3, r3, #7
 801863a:	b21b      	sxth	r3, r3
 801863c:	4313      	orrs	r3, r2
 801863e:	b21b      	sxth	r3, r3
 8018640:	b29b      	uxth	r3, r3
 8018642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018646:	b29b      	uxth	r3, r3
 8018648:	847b      	strh	r3, [r7, #34]	; 0x22
			channels[12] = (p_buffer[17] >> 4 | p_buffer[18] << 4)                	    & 0x07FF;
 801864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801864c:	3311      	adds	r3, #17
 801864e:	781b      	ldrb	r3, [r3, #0]
 8018650:	091b      	lsrs	r3, r3, #4
 8018652:	b2db      	uxtb	r3, r3
 8018654:	b21a      	sxth	r2, r3
 8018656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018658:	3312      	adds	r3, #18
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	011b      	lsls	r3, r3, #4
 801865e:	b21b      	sxth	r3, r3
 8018660:	4313      	orrs	r3, r2
 8018662:	b21b      	sxth	r3, r3
 8018664:	b29b      	uxth	r3, r3
 8018666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801866a:	b29b      	uxth	r3, r3
 801866c:	84bb      	strh	r3, [r7, #36]	; 0x24
			channels[13] = (p_buffer[18] >> 7 | p_buffer[19] << 1 | p_buffer[20] << 9)  & 0x07FF;
 801866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018670:	3312      	adds	r3, #18
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	09db      	lsrs	r3, r3, #7
 8018676:	b2db      	uxtb	r3, r3
 8018678:	b21a      	sxth	r2, r3
 801867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801867c:	3313      	adds	r3, #19
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	b21b      	sxth	r3, r3
 8018684:	4313      	orrs	r3, r2
 8018686:	b21a      	sxth	r2, r3
 8018688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801868a:	3314      	adds	r3, #20
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	025b      	lsls	r3, r3, #9
 8018690:	b21b      	sxth	r3, r3
 8018692:	4313      	orrs	r3, r2
 8018694:	b21b      	sxth	r3, r3
 8018696:	b29b      	uxth	r3, r3
 8018698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801869c:	b29b      	uxth	r3, r3
 801869e:	84fb      	strh	r3, [r7, #38]	; 0x26
			channels[14] = (p_buffer[20] >> 2 | p_buffer[21] << 6)                	    & 0x07FF;
 80186a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186a2:	3314      	adds	r3, #20
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	089b      	lsrs	r3, r3, #2
 80186a8:	b2db      	uxtb	r3, r3
 80186aa:	b21a      	sxth	r2, r3
 80186ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186ae:	3315      	adds	r3, #21
 80186b0:	781b      	ldrb	r3, [r3, #0]
 80186b2:	019b      	lsls	r3, r3, #6
 80186b4:	b21b      	sxth	r3, r3
 80186b6:	4313      	orrs	r3, r2
 80186b8:	b21b      	sxth	r3, r3
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	853b      	strh	r3, [r7, #40]	; 0x28
			channels[15] = (p_buffer[21] >> 5 | p_buffer[22] << 3)                	    & 0x07FF;
 80186c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186c6:	3315      	adds	r3, #21
 80186c8:	781b      	ldrb	r3, [r3, #0]
 80186ca:	095b      	lsrs	r3, r3, #5
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	b21a      	sxth	r2, r3
 80186d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186d2:	3316      	adds	r3, #22
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	00db      	lsls	r3, r3, #3
 80186d8:	b21b      	sxth	r3, r3
 80186da:	4313      	orrs	r3, r2
 80186dc:	b21b      	sxth	r3, r3
 80186de:	b29b      	uxth	r3, r3
 80186e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80186e4:	b29b      	uxth	r3, r3
 80186e6:	e003      	b.n	80186f0 <_evtParsing+0x31c>
 80186e8:	20001d60 	.word	0x20001d60
 80186ec:	445c0000 	.word	0x445c0000
 80186f0:	857b      	strh	r3, [r7, #42]	; 0x2a

			channels[16] = ((p_buffer[23])      & 0x0001) ? 2047 : 0;
 80186f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186f4:	3317      	adds	r3, #23
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	f003 0301 	and.w	r3, r3, #1
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d002      	beq.n	8018706 <_evtParsing+0x332>
 8018700:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018704:	e000      	b.n	8018708 <_evtParsing+0x334>
 8018706:	2300      	movs	r3, #0
 8018708:	85bb      	strh	r3, [r7, #44]	; 0x2c
			channels[17] = ((p_buffer[23] >> 1) & 0x0001) ? 2047 : 0;
 801870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801870c:	3317      	adds	r3, #23
 801870e:	781b      	ldrb	r3, [r3, #0]
 8018710:	085b      	lsrs	r3, r3, #1
 8018712:	b2db      	uxtb	r3, r3
 8018714:	f003 0301 	and.w	r3, r3, #1
 8018718:	2b00      	cmp	r3, #0
 801871a:	d002      	beq.n	8018722 <_evtParsing+0x34e>
 801871c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018720:	e000      	b.n	8018724 <_evtParsing+0x350>
 8018722:	2300      	movs	r3, #0
 8018724:	85fb      	strh	r3, [r7, #46]	; 0x2e

			if ((p_buffer[23] >> 3) & 0x0001) {
 8018726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018728:	3317      	adds	r3, #23
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	08db      	lsrs	r3, r3, #3
 801872e:	b2db      	uxtb	r3, r3
 8018730:	f003 0301 	and.w	r3, r3, #1
 8018734:	2b00      	cmp	r3, #0
 8018736:	d003      	beq.n	8018740 <_evtParsing+0x36c>
				p_owner->parent._failsafe = TRUE;
 8018738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801873a:	2201      	movs	r2, #1
 801873c:	70da      	strb	r2, [r3, #3]
 801873e:	e002      	b.n	8018746 <_evtParsing+0x372>
			} else {
				p_owner->parent._failsafe = FALSE;
 8018740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018742:	2200      	movs	r2, #0
 8018744:	70da      	strb	r2, [r3, #3]
			}

			if ((p_buffer[23] >> 2) & 0x0001) {
 8018746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018748:	3317      	adds	r3, #23
 801874a:	781b      	ldrb	r3, [r3, #0]
 801874c:	089b      	lsrs	r3, r3, #2
 801874e:	b2db      	uxtb	r3, r3
 8018750:	f003 0301 	and.w	r3, r3, #1
 8018754:	2b00      	cmp	r3, #0
 8018756:	d005      	beq.n	8018764 <_evtParsing+0x390>
				p_owner->parent._lost_frames++;
 8018758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801875a:	695b      	ldr	r3, [r3, #20]
 801875c:	1c5a      	adds	r2, r3, #1
 801875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018760:	615a      	str	r2, [r3, #20]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
					channels[i] = 0.625f * channels[i] + 880;
				}
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
			}
			break;
 8018762:	e04b      	b.n	80187fc <_evtParsing+0x428>
				p_owner->parent._good_frames++;
 8018764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018766:	68db      	ldr	r3, [r3, #12]
 8018768:	1c5a      	adds	r2, r3, #1
 801876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801876c:	60da      	str	r2, [r3, #12]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 801876e:	2300      	movs	r3, #0
 8018770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8018774:	e023      	b.n	80187be <_evtParsing+0x3ea>
					channels[i] = 0.625f * channels[i] + 880;
 8018776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801877a:	005b      	lsls	r3, r3, #1
 801877c:	3340      	adds	r3, #64	; 0x40
 801877e:	443b      	add	r3, r7
 8018780:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8018784:	ee07 3a90 	vmov	s15, r3
 8018788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801878c:	eeb6 7a04 	vmov.f32	s14, #100	; 0x3f200000  0.625
 8018790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018794:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 80186ec <_evtParsing+0x318>
 8018798:	ee77 7a87 	vadd.f32	s15, s15, s14
 801879c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80187a4:	ee17 2a90 	vmov	r2, s15
 80187a8:	b292      	uxth	r2, r2
 80187aa:	005b      	lsls	r3, r3, #1
 80187ac:	3340      	adds	r3, #64	; 0x40
 80187ae:	443b      	add	r3, r7
 80187b0:	f823 2c34 	strh.w	r2, [r3, #-52]
				for (i = 0; i < PIF_SBUS_CHANNEL_COUNT; i++) {
 80187b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187b8:	3301      	adds	r3, #1
 80187ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80187be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187c2:	2b11      	cmp	r3, #17
 80187c4:	d9d7      	bls.n	8018776 <_evtParsing+0x3a2>
		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channels, p_owner->parent.__p_issuer);
 80187c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187c8:	699b      	ldr	r3, [r3, #24]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d016      	beq.n	80187fc <_evtParsing+0x428>
 80187ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187d0:	699b      	ldr	r3, [r3, #24]
 80187d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80187d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80187d6:	69d2      	ldr	r2, [r2, #28]
 80187d8:	f107 010c 	add.w	r1, r7, #12
 80187dc:	4798      	blx	r3
			break;
 80187de:	e00d      	b.n	80187fc <_evtParsing+0x428>
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80187e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187e2:	6a1a      	ldr	r2, [r3, #32]
 80187e4:	f107 0133 	add.w	r1, r7, #51	; 0x33
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	4610      	mov	r0, r2
 80187ec:	4798      	blx	r3
 80187ee:	4603      	mov	r3, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f47f ae0e 	bne.w	8018412 <_evtParsing+0x3e>
 80187f6:	e002      	b.n	80187fe <_evtParsing+0x42a>
    if (!p_owner->parent.__evt_receive) return;
 80187f8:	bf00      	nop
 80187fa:	e000      	b.n	80187fe <_evtParsing+0x42a>
			break;
 80187fc:	bf00      	nop
		}
	}
}
 80187fe:	3740      	adds	r7, #64	; 0x40
 8018800:	46bd      	mov	sp, r7
 8018802:	bd80      	pop	{r7, pc}

08018804 <pifRcSbus_Init>:

BOOL pifRcSbus_Init(PifRcSbus* p_owner, PifId id)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b082      	sub	sp, #8
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
 801880c:	460b      	mov	r3, r1
 801880e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d104      	bne.n	8018820 <pifRcSbus_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018816:	4b11      	ldr	r3, [pc, #68]	; (801885c <pifRcSbus_Init+0x58>)
 8018818:	2201      	movs	r2, #1
 801881a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801881c:	2300      	movs	r3, #0
 801881e:	e018      	b.n	8018852 <pifRcSbus_Init+0x4e>
	}

	memset(p_owner, 0, sizeof(PifRcSbus));
 8018820:	2244      	movs	r2, #68	; 0x44
 8018822:	2100      	movs	r1, #0
 8018824:	6878      	ldr	r0, [r7, #4]
 8018826:	f00a fcdf 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801882a:	887b      	ldrh	r3, [r7, #2]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d106      	bne.n	801883e <pifRcSbus_Init+0x3a>
 8018830:	4b0b      	ldr	r3, [pc, #44]	; (8018860 <pifRcSbus_Init+0x5c>)
 8018832:	881b      	ldrh	r3, [r3, #0]
 8018834:	1c5a      	adds	r2, r3, #1
 8018836:	b291      	uxth	r1, r2
 8018838:	4a09      	ldr	r2, [pc, #36]	; (8018860 <pifRcSbus_Init+0x5c>)
 801883a:	8011      	strh	r1, [r2, #0]
 801883c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	887a      	ldrh	r2, [r7, #2]
 8018842:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SBUS_CHANNEL_COUNT;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2212      	movs	r2, #18
 8018848:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2201      	movs	r2, #1
 801884e:	70da      	strb	r2, [r3, #3]
    return TRUE;
 8018850:	2301      	movs	r3, #1
}
 8018852:	4618      	mov	r0, r3
 8018854:	3708      	adds	r7, #8
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
 801885a:	bf00      	nop
 801885c:	20001d48 	.word	0x20001d48
 8018860:	20000128 	.word	0x20000128

08018864 <pifRcSbus_AttachComm>:

void pifRcSbus_AttachComm(PifRcSbus* p_owner, PifComm *p_comm)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b082      	sub	sp, #8
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	683a      	ldr	r2, [r7, #0]
 8018872:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018874:	2300      	movs	r3, #0
 8018876:	4a04      	ldr	r2, [pc, #16]	; (8018888 <pifRcSbus_AttachComm+0x24>)
 8018878:	6879      	ldr	r1, [r7, #4]
 801887a:	6838      	ldr	r0, [r7, #0]
 801887c:	f7f9 fb7a 	bl	8011f74 <pifComm_AttachClient>
}
 8018880:	bf00      	nop
 8018882:	3708      	adds	r7, #8
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}
 8018888:	080183d5 	.word	0x080183d5

0801888c <_evtParsing>:

#define SPEKTRUM_RETRY_TIMEOUT		5	// 5ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 801888c:	b590      	push	{r4, r7, lr}
 801888e:	b087      	sub	sp, #28
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
 8018894:	6039      	str	r1, [r7, #0]
	PifRcSpektrum *p_owner = (PifRcSpektrum *)p_client;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	613b      	str	r3, [r7, #16]
	uint8_t data, id;
	uint8_t* p_buffer;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 801889a:	693b      	ldr	r3, [r7, #16]
 801889c:	699b      	ldr	r3, [r3, #24]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	f000 80b9 	beq.w	8018a16 <_evtParsing+0x18a>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SPEKTRUM_RETRY_TIMEOUT) {
 80188a4:	4b5e      	ldr	r3, [pc, #376]	; (8018a20 <_evtParsing+0x194>)
 80188a6:	681a      	ldr	r2, [r3, #0]
 80188a8:	693b      	ldr	r3, [r7, #16]
 80188aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80188ac:	1ad3      	subs	r3, r2, r3
 80188ae:	2b04      	cmp	r3, #4
 80188b0:	d903      	bls.n	80188ba <_evtParsing+0x2e>
		p_owner->__index = 0;
 80188b2:	693b      	ldr	r3, [r7, #16]
 80188b4:	2200      	movs	r2, #0
 80188b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 80188ba:	4b59      	ldr	r3, [pc, #356]	; (8018a20 <_evtParsing+0x194>)
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	693b      	ldr	r3, [r7, #16]
 80188c0:	659a      	str	r2, [r3, #88]	; 0x58

	p_buffer = p_owner->__p_buffer;
 80188c2:	693b      	ldr	r3, [r7, #16]
 80188c4:	3334      	adds	r3, #52	; 0x34
 80188c6:	60fb      	str	r3, [r7, #12]

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80188c8:	e099      	b.n	80189fe <_evtParsing+0x172>
		p_buffer[p_owner->__index++] = data;
 80188ca:	693b      	ldr	r3, [r7, #16]
 80188cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188d0:	1c5a      	adds	r2, r3, #1
 80188d2:	b2d1      	uxtb	r1, r2
 80188d4:	693a      	ldr	r2, [r7, #16]
 80188d6:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 80188da:	461a      	mov	r2, r3
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	4413      	add	r3, r2
 80188e0:	7aba      	ldrb	r2, [r7, #10]
 80188e2:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 2) {
 80188e4:	693b      	ldr	r3, [r7, #16]
 80188e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188ea:	2b02      	cmp	r3, #2
 80188ec:	d119      	bne.n	8018922 <_evtParsing+0x96>
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	3301      	adds	r3, #1
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	2b01      	cmp	r3, #1
 80188f6:	f000 8082 	beq.w	80189fe <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 80188fa:	68fb      	ldr	r3, [r7, #12]
 80188fc:	3301      	adds	r3, #1
 80188fe:	781b      	ldrb	r3, [r3, #0]
			if (p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2 && 
 8018900:	2b12      	cmp	r3, #18
 8018902:	d07c      	beq.n	80189fe <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	3301      	adds	r3, #1
 8018908:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2 && 
 801890a:	2bb2      	cmp	r3, #178	; 0xb2
 801890c:	d077      	beq.n	80189fe <_evtParsing+0x172>
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS) {
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	3301      	adds	r3, #1
 8018912:	781b      	ldrb	r3, [r3, #0]
					p_buffer[1] != PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX && 
 8018914:	2ba2      	cmp	r3, #162	; 0xa2
 8018916:	d072      	beq.n	80189fe <_evtParsing+0x172>
				p_owner->__index = 0;
 8018918:	693b      	ldr	r3, [r7, #16]
 801891a:	2200      	movs	r2, #0
 801891c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
				continue;
 8018920:	e06d      	b.n	80189fe <_evtParsing+0x172>
			}
		}
		else if (p_owner->__index >= SPEKTRUM_FRAME_SIZE) {
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018928:	2b0f      	cmp	r3, #15
 801892a:	d968      	bls.n	80189fe <_evtParsing+0x172>
			p_owner->parent._good_frames++;
 801892c:	693b      	ldr	r3, [r7, #16]
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	1c5a      	adds	r2, r3, #1
 8018932:	693b      	ldr	r3, [r7, #16]
 8018934:	60da      	str	r2, [r3, #12]

			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 8018936:	2302      	movs	r3, #2
 8018938:	617b      	str	r3, [r7, #20]
 801893a:	e048      	b.n	80189ce <_evtParsing+0x142>
				id = (p_buffer[index] >> p_owner->__id_shift) & p_owner->__id_mask;
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	68fa      	ldr	r2, [r7, #12]
 8018940:	4413      	add	r3, r2
 8018942:	781b      	ldrb	r3, [r3, #0]
 8018944:	461a      	mov	r2, r3
 8018946:	693b      	ldr	r3, [r7, #16]
 8018948:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801894c:	fa42 f303 	asr.w	r3, r2, r3
 8018950:	b25a      	sxtb	r2, r3
 8018952:	693b      	ldr	r3, [r7, #16]
 8018954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018958:	b25b      	sxtb	r3, r3
 801895a:	4013      	ands	r3, r2
 801895c:	b25b      	sxtb	r3, r3
 801895e:	72fb      	strb	r3, [r7, #11]
				if (id < p_owner->parent._channel_count) {
 8018960:	693b      	ldr	r3, [r7, #16]
 8018962:	789b      	ldrb	r3, [r3, #2]
 8018964:	7afa      	ldrb	r2, [r7, #11]
 8018966:	429a      	cmp	r2, r3
 8018968:	d22e      	bcs.n	80189c8 <_evtParsing+0x13c>
					p_owner->__channel[id] = 988 + (((uint16_t)(p_buffer[index] & p_owner->__pos_mask) << 8) + p_buffer[index + 1]) / p_owner->_pos_factor;
 801896a:	697b      	ldr	r3, [r7, #20]
 801896c:	68fa      	ldr	r2, [r7, #12]
 801896e:	4413      	add	r3, r2
 8018970:	781a      	ldrb	r2, [r3, #0]
 8018972:	693b      	ldr	r3, [r7, #16]
 8018974:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8018978:	4013      	ands	r3, r2
 801897a:	b2db      	uxtb	r3, r3
 801897c:	021b      	lsls	r3, r3, #8
 801897e:	697a      	ldr	r2, [r7, #20]
 8018980:	3201      	adds	r2, #1
 8018982:	68f9      	ldr	r1, [r7, #12]
 8018984:	440a      	add	r2, r1
 8018986:	7812      	ldrb	r2, [r2, #0]
 8018988:	4413      	add	r3, r2
 801898a:	4618      	mov	r0, r3
 801898c:	f7e7 fd7e 	bl	800048c <__aeabi_i2d>
 8018990:	693b      	ldr	r3, [r7, #16]
 8018992:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8018996:	f7e7 ff0d 	bl	80007b4 <__aeabi_ddiv>
 801899a:	4602      	mov	r2, r0
 801899c:	460b      	mov	r3, r1
 801899e:	4610      	mov	r0, r2
 80189a0:	4619      	mov	r1, r3
 80189a2:	f04f 0200 	mov.w	r2, #0
 80189a6:	4b1f      	ldr	r3, [pc, #124]	; (8018a24 <_evtParsing+0x198>)
 80189a8:	f7e7 fc24 	bl	80001f4 <__adddf3>
 80189ac:	4602      	mov	r2, r0
 80189ae:	460b      	mov	r3, r1
 80189b0:	7afc      	ldrb	r4, [r7, #11]
 80189b2:	4610      	mov	r0, r2
 80189b4:	4619      	mov	r1, r3
 80189b6:	f7e8 f895 	bl	8000ae4 <__aeabi_d2uiz>
 80189ba:	4603      	mov	r3, r0
 80189bc:	b299      	uxth	r1, r3
 80189be:	693b      	ldr	r3, [r7, #16]
 80189c0:	f104 0224 	add.w	r2, r4, #36	; 0x24
 80189c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (index = 2; index < SPEKTRUM_FRAME_SIZE; index += 2) {
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	3302      	adds	r3, #2
 80189cc:	617b      	str	r3, [r7, #20]
 80189ce:	697b      	ldr	r3, [r7, #20]
 80189d0:	2b0f      	cmp	r3, #15
 80189d2:	ddb3      	ble.n	801893c <_evtParsing+0xb0>
				}
			}
			p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 80189d4:	4b12      	ldr	r3, [pc, #72]	; (8018a20 <_evtParsing+0x194>)
 80189d6:	681a      	ldr	r2, [r3, #0]
 80189d8:	693b      	ldr	r3, [r7, #16]
 80189da:	609a      	str	r2, [r3, #8]

			p_owner->__index = 0;
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	2200      	movs	r2, #0
 80189e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

			if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, p_owner->__channel, p_owner->parent.__p_issuer);
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	699b      	ldr	r3, [r3, #24]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d008      	beq.n	80189fe <_evtParsing+0x172>
 80189ec:	693b      	ldr	r3, [r7, #16]
 80189ee:	699b      	ldr	r3, [r3, #24]
 80189f0:	6938      	ldr	r0, [r7, #16]
 80189f2:	693a      	ldr	r2, [r7, #16]
 80189f4:	f102 0148 	add.w	r1, r2, #72	; 0x48
 80189f8:	693a      	ldr	r2, [r7, #16]
 80189fa:	69d2      	ldr	r2, [r2, #28]
 80189fc:	4798      	blx	r3
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 80189fe:	693b      	ldr	r3, [r7, #16]
 8018a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018a02:	f107 010a 	add.w	r1, r7, #10
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	4610      	mov	r0, r2
 8018a0a:	4798      	blx	r3
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	f47f af5b 	bne.w	80188ca <_evtParsing+0x3e>
 8018a14:	e000      	b.n	8018a18 <_evtParsing+0x18c>
    if (!p_owner->parent.__evt_receive) return;
 8018a16:	bf00      	nop
		}
	}
}
 8018a18:	371c      	adds	r7, #28
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd90      	pop	{r4, r7, pc}
 8018a1e:	bf00      	nop
 8018a20:	20001d60 	.word	0x20001d60
 8018a24:	408ee000 	.word	0x408ee000

08018a28 <pifRcSpektrum_Init>:

BOOL pifRcSpektrum_Init(PifRcSpektrum* p_owner, PifId id, uint8_t protocol_id)
{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b082      	sub	sp, #8
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
 8018a30:	460b      	mov	r3, r1
 8018a32:	807b      	strh	r3, [r7, #2]
 8018a34:	4613      	mov	r3, r2
 8018a36:	707b      	strb	r3, [r7, #1]
    if (!p_owner) {
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d104      	bne.n	8018a48 <pifRcSpektrum_Init+0x20>
		pif_error = E_INVALID_PARAM;
 8018a3e:	4b41      	ldr	r3, [pc, #260]	; (8018b44 <pifRcSpektrum_Init+0x11c>)
 8018a40:	2201      	movs	r2, #1
 8018a42:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018a44:	2300      	movs	r3, #0
 8018a46:	e079      	b.n	8018b3c <pifRcSpektrum_Init+0x114>
	}

	memset(p_owner, 0, sizeof(PifRcSpektrum));
 8018a48:	2260      	movs	r2, #96	; 0x60
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	f00a fbcb 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018a52:	887b      	ldrh	r3, [r7, #2]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d106      	bne.n	8018a66 <pifRcSpektrum_Init+0x3e>
 8018a58:	4b3b      	ldr	r3, [pc, #236]	; (8018b48 <pifRcSpektrum_Init+0x120>)
 8018a5a:	881b      	ldrh	r3, [r3, #0]
 8018a5c:	1c5a      	adds	r2, r3, #1
 8018a5e:	b291      	uxth	r1, r2
 8018a60:	4a39      	ldr	r2, [pc, #228]	; (8018b48 <pifRcSpektrum_Init+0x120>)
 8018a62:	8011      	strh	r1, [r2, #0]
 8018a64:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	887a      	ldrh	r2, [r7, #2]
 8018a6a:	801a      	strh	r2, [r3, #0]
	p_owner->parent._failsafe = FALSE;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	2200      	movs	r2, #0
 8018a70:	70da      	strb	r2, [r3, #3]
	p_owner->_protocol_id = protocol_id;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	787a      	ldrb	r2, [r7, #1]
 8018a76:	f883 2020 	strb.w	r2, [r3, #32]
	switch (protocol_id) {
 8018a7a:	787b      	ldrb	r3, [r7, #1]
 8018a7c:	2bb2      	cmp	r3, #178	; 0xb2
 8018a7e:	d023      	beq.n	8018ac8 <pifRcSpektrum_Init+0xa0>
 8018a80:	2bb2      	cmp	r3, #178	; 0xb2
 8018a82:	dc55      	bgt.n	8018b30 <pifRcSpektrum_Init+0x108>
 8018a84:	2ba2      	cmp	r3, #162	; 0xa2
 8018a86:	d039      	beq.n	8018afc <pifRcSpektrum_Init+0xd4>
 8018a88:	2ba2      	cmp	r3, #162	; 0xa2
 8018a8a:	dc51      	bgt.n	8018b30 <pifRcSpektrum_Init+0x108>
 8018a8c:	2b01      	cmp	r3, #1
 8018a8e:	d002      	beq.n	8018a96 <pifRcSpektrum_Init+0x6e>
 8018a90:	2b12      	cmp	r3, #18
 8018a92:	d019      	beq.n	8018ac8 <pifRcSpektrum_Init+0xa0>
 8018a94:	e04c      	b.n	8018b30 <pifRcSpektrum_Init+0x108>
	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_1024_DSM2:
		p_owner->parent._channel_count = 7;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2207      	movs	r2, #7
 8018a9a:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2219      	movs	r2, #25
 8018aa0:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x3F;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	223f      	movs	r2, #63	; 0x3f
 8018aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 2;
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	2202      	movs	r2, #2
 8018aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x03;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2203      	movs	r2, #3
 8018ab6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 1;
 8018aba:	6879      	ldr	r1, [r7, #4]
 8018abc:	f04f 0200 	mov.w	r2, #0
 8018ac0:	4b22      	ldr	r3, [pc, #136]	; (8018b4c <pifRcSpektrum_Init+0x124>)
 8018ac2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018ac6:	e038      	b.n	8018b3a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSM2:
	case PIF_SPEKTRUM_PROTOCOL_ID_11MS_2048_DSMX:
		p_owner->parent._channel_count = 8;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	2208      	movs	r2, #8
 8018acc:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 15;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	220f      	movs	r2, #15
 8018ad2:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	220f      	movs	r2, #15
 8018ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2203      	movs	r2, #3
 8018ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	2207      	movs	r2, #7
 8018ae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8018aec:	6879      	ldr	r1, [r7, #4]
 8018aee:	f04f 0200 	mov.w	r2, #0
 8018af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018af6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018afa:	e01e      	b.n	8018b3a <pifRcSpektrum_Init+0x112>

	case PIF_SPEKTRUM_PROTOCOL_ID_22MS_2048_DSMS:
		p_owner->parent._channel_count = 8;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	2208      	movs	r2, #8
 8018b00:	709a      	strb	r2, [r3, #2]
		p_owner->parent._max_frame_period = 25;
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	2219      	movs	r2, #25
 8018b06:	809a      	strh	r2, [r3, #4]
		p_owner->__id_mask = 0x0F;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	220f      	movs	r2, #15
 8018b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		p_owner->__id_shift = 3;
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	2203      	movs	r2, #3
 8018b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		p_owner->__pos_mask = 0x07;
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	2207      	movs	r2, #7
 8018b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		p_owner->_pos_factor = 2;
 8018b20:	6879      	ldr	r1, [r7, #4]
 8018b22:	f04f 0200 	mov.w	r2, #0
 8018b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018b2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		break;
 8018b2e:	e004      	b.n	8018b3a <pifRcSpektrum_Init+0x112>

	default:
		pif_error = E_INVALID_PARAM;
 8018b30:	4b04      	ldr	r3, [pc, #16]	; (8018b44 <pifRcSpektrum_Init+0x11c>)
 8018b32:	2201      	movs	r2, #1
 8018b34:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8018b36:	2300      	movs	r3, #0
 8018b38:	e000      	b.n	8018b3c <pifRcSpektrum_Init+0x114>
	}
	return TRUE;
 8018b3a:	2301      	movs	r3, #1
}
 8018b3c:	4618      	mov	r0, r3
 8018b3e:	3708      	adds	r7, #8
 8018b40:	46bd      	mov	sp, r7
 8018b42:	bd80      	pop	{r7, pc}
 8018b44:	20001d48 	.word	0x20001d48
 8018b48:	20000128 	.word	0x20000128
 8018b4c:	3ff00000 	.word	0x3ff00000

08018b50 <pifRcSpektrum_AttachComm>:

void pifRcSpektrum_AttachComm(PifRcSpektrum* p_owner, PifComm *p_comm)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	683a      	ldr	r2, [r7, #0]
 8018b5e:	631a      	str	r2, [r3, #48]	; 0x30
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018b60:	2300      	movs	r3, #0
 8018b62:	4a04      	ldr	r2, [pc, #16]	; (8018b74 <pifRcSpektrum_AttachComm+0x24>)
 8018b64:	6879      	ldr	r1, [r7, #4]
 8018b66:	6838      	ldr	r0, [r7, #0]
 8018b68:	f7f9 fa04 	bl	8011f74 <pifComm_AttachClient>
}
 8018b6c:	bf00      	nop
 8018b6e:	3708      	adds	r7, #8
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}
 8018b74:	0801888d 	.word	0x0801888d

08018b78 <_evtParsing>:
#define SUMD_MAX_FRAME_PERIOD   750 	// 750ms, above this delay, switch to failsafe
#define SUMD_RETRY_TIMEOUT		4		// 4ms


static void _evtParsing(void *p_client, PifActCommReceiveData act_receive_data)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b096      	sub	sp, #88	; 0x58
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
 8018b80:	6039      	str	r1, [r7, #0]
	PifRcSumd *p_owner = (PifRcSumd *)p_client;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t* p_buffer;
    uint16_t channel[PIF_SUMD_CHANNEL_COUNT];
	uint16_t crc;
	int index;

    if (!p_owner->parent.__evt_receive) return;
 8018b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b88:	699b      	ldr	r3, [r3, #24]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	f000 80e4 	beq.w	8018d58 <_evtParsing+0x1e0>

	if (pif_cumulative_timer1ms - p_owner->__last_time >= SUMD_RETRY_TIMEOUT) {
 8018b90:	4b73      	ldr	r3, [pc, #460]	; (8018d60 <_evtParsing+0x1e8>)
 8018b92:	681a      	ldr	r2, [r3, #0]
 8018b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018b98:	1ad3      	subs	r3, r2, r3
 8018b9a:	2b03      	cmp	r3, #3
 8018b9c:	d903      	bls.n	8018ba6 <_evtParsing+0x2e>
		p_owner->__index = 0;
 8018b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	}
	p_owner->__last_time = pif_cumulative_timer1ms;
 8018ba6:	4b6e      	ldr	r3, [pc, #440]	; (8018d60 <_evtParsing+0x1e8>)
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bac:	66da      	str	r2, [r3, #108]	; 0x6c

	p_buffer = p_owner->__p_buffer;
 8018bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bb0:	3324      	adds	r3, #36	; 0x24
 8018bb2:	64fb      	str	r3, [r7, #76]	; 0x4c

	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018bb4:	e0c4      	b.n	8018d40 <_evtParsing+0x1c8>
		//add byte to the ring buffer
		p_buffer[p_owner->__index++] = data;
 8018bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bb8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018bbc:	1c5a      	adds	r2, r3, #1
 8018bbe:	b2d1      	uxtb	r1, r2
 8018bc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018bc2:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 8018bc6:	461a      	mov	r2, r3
 8018bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bca:	4413      	add	r3, r2
 8018bcc:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8018bd0:	701a      	strb	r2, [r3, #0]

		if (p_owner->__index == 1) {
 8018bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bd4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d109      	bne.n	8018bf0 <_evtParsing+0x78>
			if (p_buffer[0] != SUMD_VENDOR_ID) {
 8018bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bde:	781b      	ldrb	r3, [r3, #0]
 8018be0:	2ba8      	cmp	r3, #168	; 0xa8
 8018be2:	f000 80ad 	beq.w	8018d40 <_evtParsing+0x1c8>
				p_owner->__index = 0;
 8018be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018be8:	2200      	movs	r2, #0
 8018bea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018bee:	e0a7      	b.n	8018d40 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 2) {
 8018bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018bf2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018bf6:	2b02      	cmp	r3, #2
 8018bf8:	d11f      	bne.n	8018c3a <_evtParsing+0xc2>
			if (p_buffer[1] != SUMD_STATUS_VALID && p_buffer[1] != SUMD_STATUS_FAILSAFE) {
 8018bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018bfc:	3301      	adds	r3, #1
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	2b01      	cmp	r3, #1
 8018c02:	d00e      	beq.n	8018c22 <_evtParsing+0xaa>
 8018c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c06:	3301      	adds	r3, #1
 8018c08:	781b      	ldrb	r3, [r3, #0]
 8018c0a:	2b81      	cmp	r3, #129	; 0x81
 8018c0c:	d009      	beq.n	8018c22 <_evtParsing+0xaa>
				p_owner->parent._error_frames++;
 8018c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c10:	691b      	ldr	r3, [r3, #16]
 8018c12:	1c5a      	adds	r2, r3, #1
 8018c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c16:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c1a:	2200      	movs	r2, #0
 8018c1c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018c20:	e08e      	b.n	8018d40 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._failsafe = (p_buffer[1] == SUMD_STATUS_FAILSAFE);
 8018c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c24:	3301      	adds	r3, #1
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	2b81      	cmp	r3, #129	; 0x81
 8018c2a:	bf0c      	ite	eq
 8018c2c:	2301      	moveq	r3, #1
 8018c2e:	2300      	movne	r3, #0
 8018c30:	b2db      	uxtb	r3, r3
 8018c32:	461a      	mov	r2, r3
 8018c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c36:	70da      	strb	r2, [r3, #3]
 8018c38:	e082      	b.n	8018d40 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index == 3) {
 8018c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c3c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8018c40:	2b03      	cmp	r3, #3
 8018c42:	d118      	bne.n	8018c76 <_evtParsing+0xfe>
			if (p_buffer[2] < 2 || p_buffer[2] > PIF_SUMD_CHANNEL_COUNT) {		// 2 < channels < PIF_SUMD_CHANNEL_COUNT
 8018c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c46:	3302      	adds	r3, #2
 8018c48:	781b      	ldrb	r3, [r3, #0]
 8018c4a:	2b01      	cmp	r3, #1
 8018c4c:	d904      	bls.n	8018c58 <_evtParsing+0xe0>
 8018c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c50:	3302      	adds	r3, #2
 8018c52:	781b      	ldrb	r3, [r3, #0]
 8018c54:	2b20      	cmp	r3, #32
 8018c56:	d909      	bls.n	8018c6c <_evtParsing+0xf4>
				p_owner->parent._error_frames++;
 8018c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c5a:	691b      	ldr	r3, [r3, #16]
 8018c5c:	1c5a      	adds	r2, r3, #1
 8018c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c60:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c64:	2200      	movs	r2, #0
 8018c66:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				continue;
 8018c6a:	e069      	b.n	8018d40 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._channel_count = p_buffer[2];
 8018c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c6e:	789a      	ldrb	r2, [r3, #2]
 8018c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c72:	709a      	strb	r2, [r3, #2]
 8018c74:	e064      	b.n	8018d40 <_evtParsing+0x1c8>
			}
		}
		else if (p_owner->__index >= SUMD_HEADER_SIZE + p_buffer[2] * 2 + SUMD_CRC_SIZE) {
 8018c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c78:	3302      	adds	r3, #2
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	3302      	adds	r3, #2
 8018c7e:	005b      	lsls	r3, r3, #1
 8018c80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018c82:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 8018c86:	4293      	cmp	r3, r2
 8018c88:	da5a      	bge.n	8018d40 <_evtParsing+0x1c8>
			//compute CRC with header and data
			crc = pifCrc16(p_buffer, SUMD_HEADER_SIZE + 2 * p_owner->parent._channel_count + SUMD_CRC_SIZE);
 8018c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018c8c:	789b      	ldrb	r3, [r3, #2]
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	005b      	lsls	r3, r3, #1
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	3305      	adds	r3, #5
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	4619      	mov	r1, r3
 8018c9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018c9c:	f7f8 ffcf 	bl	8011c3e <pifCrc16>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			//if frame is valid
			if (crc == 0) {
 8018ca6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d13f      	bne.n	8018d2e <_evtParsing+0x1b6>
				p_owner->parent._good_frames++;
 8018cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018cb0:	68db      	ldr	r3, [r3, #12]
 8018cb2:	1c5a      	adds	r2, r3, #1
 8018cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018cb6:	60da      	str	r2, [r3, #12]

				//update channel output values
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8018cb8:	2300      	movs	r3, #0
 8018cba:	657b      	str	r3, [r7, #84]	; 0x54
 8018cbc:	e01c      	b.n	8018cf8 <_evtParsing+0x180>
					channel[index] = ((p_buffer[SUMD_HEADER_SIZE + 2 * index] << 8) + p_buffer[SUMD_HEADER_SIZE + 2 * index + 1]) / 8;
 8018cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cc0:	005b      	lsls	r3, r3, #1
 8018cc2:	3303      	adds	r3, #3
 8018cc4:	461a      	mov	r2, r3
 8018cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018cc8:	4413      	add	r3, r2
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	021b      	lsls	r3, r3, #8
 8018cce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018cd0:	0052      	lsls	r2, r2, #1
 8018cd2:	3204      	adds	r2, #4
 8018cd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018cd6:	440a      	add	r2, r1
 8018cd8:	7812      	ldrb	r2, [r2, #0]
 8018cda:	4413      	add	r3, r2
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	da00      	bge.n	8018ce2 <_evtParsing+0x16a>
 8018ce0:	3307      	adds	r3, #7
 8018ce2:	10db      	asrs	r3, r3, #3
 8018ce4:	b29a      	uxth	r2, r3
 8018ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ce8:	005b      	lsls	r3, r3, #1
 8018cea:	3358      	adds	r3, #88	; 0x58
 8018cec:	443b      	add	r3, r7
 8018cee:	f823 2c50 	strh.w	r2, [r3, #-80]
				for (index = 0; index < p_owner->parent._channel_count; index++) {
 8018cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018cf4:	3301      	adds	r3, #1
 8018cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8018cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018cfa:	789b      	ldrb	r3, [r3, #2]
 8018cfc:	461a      	mov	r2, r3
 8018cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018d00:	4293      	cmp	r3, r2
 8018d02:	dbdc      	blt.n	8018cbe <_evtParsing+0x146>
				}
				p_owner->parent._last_frame_time = pif_cumulative_timer1ms;
 8018d04:	4b16      	ldr	r3, [pc, #88]	; (8018d60 <_evtParsing+0x1e8>)
 8018d06:	681a      	ldr	r2, [r3, #0]
 8018d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d0a:	609a      	str	r2, [r3, #8]

				//forgot decoded bytes from the ring buffer
				p_owner->__index = 0;
 8018d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d0e:	2200      	movs	r2, #0
 8018d10:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

		    	if (p_owner->parent.__evt_receive) (*p_owner->parent.__evt_receive)(&p_owner->parent, channel, p_owner->parent.__p_issuer);
 8018d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d16:	699b      	ldr	r3, [r3, #24]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d011      	beq.n	8018d40 <_evtParsing+0x1c8>
 8018d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d1e:	699b      	ldr	r3, [r3, #24]
 8018d20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8018d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018d24:	69d2      	ldr	r2, [r2, #28]
 8018d26:	f107 0108 	add.w	r1, r7, #8
 8018d2a:	4798      	blx	r3
 8018d2c:	e008      	b.n	8018d40 <_evtParsing+0x1c8>
			}
			else {
				p_owner->parent._error_frames++;
 8018d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d30:	691b      	ldr	r3, [r3, #16]
 8018d32:	1c5a      	adds	r2, r3, #1
 8018d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d36:	611a      	str	r2, [r3, #16]
				p_owner->__index = 0;
 8018d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	while ((*act_receive_data)(p_owner->__p_comm, &data)) {
 8018d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018d42:	6a1a      	ldr	r2, [r3, #32]
 8018d44:	f107 0149 	add.w	r1, r7, #73	; 0x49
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	4610      	mov	r0, r2
 8018d4c:	4798      	blx	r3
 8018d4e:	4603      	mov	r3, r0
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	f47f af30 	bne.w	8018bb6 <_evtParsing+0x3e>
 8018d56:	e000      	b.n	8018d5a <_evtParsing+0x1e2>
    if (!p_owner->parent.__evt_receive) return;
 8018d58:	bf00      	nop
			}
		}
	}
}
 8018d5a:	3758      	adds	r7, #88	; 0x58
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	20001d60 	.word	0x20001d60

08018d64 <pifRcSumd_Init>:

BOOL pifRcSumd_Init(PifRcSumd* p_owner, PifId id)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d104      	bne.n	8018d80 <pifRcSumd_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8018d76:	4b13      	ldr	r3, [pc, #76]	; (8018dc4 <pifRcSumd_Init+0x60>)
 8018d78:	2201      	movs	r2, #1
 8018d7a:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	e01c      	b.n	8018dba <pifRcSumd_Init+0x56>
	}

	memset(p_owner, 0, sizeof(PifRcSumd));
 8018d80:	2270      	movs	r2, #112	; 0x70
 8018d82:	2100      	movs	r1, #0
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f00a fa2f 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 8018d8a:	887b      	ldrh	r3, [r7, #2]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d106      	bne.n	8018d9e <pifRcSumd_Init+0x3a>
 8018d90:	4b0d      	ldr	r3, [pc, #52]	; (8018dc8 <pifRcSumd_Init+0x64>)
 8018d92:	881b      	ldrh	r3, [r3, #0]
 8018d94:	1c5a      	adds	r2, r3, #1
 8018d96:	b291      	uxth	r1, r2
 8018d98:	4a0b      	ldr	r2, [pc, #44]	; (8018dc8 <pifRcSumd_Init+0x64>)
 8018d9a:	8011      	strh	r1, [r2, #0]
 8018d9c:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	887a      	ldrh	r2, [r7, #2]
 8018da2:	801a      	strh	r2, [r3, #0]
	p_owner->parent._channel_count = PIF_SUMD_CHANNEL_COUNT;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	2220      	movs	r2, #32
 8018da8:	709a      	strb	r2, [r3, #2]
	p_owner->parent._failsafe = TRUE;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	2201      	movs	r2, #1
 8018dae:	70da      	strb	r2, [r3, #3]
	p_owner->parent._max_frame_period = SUMD_MAX_FRAME_PERIOD;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018db6:	809a      	strh	r2, [r3, #4]
    return TRUE;
 8018db8:	2301      	movs	r3, #1
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3708      	adds	r7, #8
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}
 8018dc2:	bf00      	nop
 8018dc4:	20001d48 	.word	0x20001d48
 8018dc8:	20000128 	.word	0x20000128

08018dcc <pifRcSumd_AttachComm>:

void pifRcSumd_AttachComm(PifRcSumd* p_owner, PifComm *p_comm)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
 8018dd4:	6039      	str	r1, [r7, #0]
	p_owner->__p_comm = p_comm;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	683a      	ldr	r2, [r7, #0]
 8018dda:	621a      	str	r2, [r3, #32]
	pifComm_AttachClient(p_comm, p_owner, _evtParsing, NULL);
 8018ddc:	2300      	movs	r3, #0
 8018dde:	4a04      	ldr	r2, [pc, #16]	; (8018df0 <pifRcSumd_AttachComm+0x24>)
 8018de0:	6879      	ldr	r1, [r7, #4]
 8018de2:	6838      	ldr	r0, [r7, #0]
 8018de4:	f7f9 f8c6 	bl	8011f74 <pifComm_AttachClient>
}
 8018de8:	bf00      	nop
 8018dea:	3708      	adds	r7, #8
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	08018b79 	.word	0x08018b79

08018df4 <pifGy86_Init>:
#include "core/pif_log.h"
#include "sensor/pif_gy86.h"


BOOL pifGy86_Init(PifGy86* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor, PifGy86Config* p_config)
{
 8018df4:	b580      	push	{r7, lr}
 8018df6:	b090      	sub	sp, #64	; 0x40
 8018df8:	af02      	add	r7, sp, #8
 8018dfa:	60f8      	str	r0, [r7, #12]
 8018dfc:	607a      	str	r2, [r7, #4]
 8018dfe:	603b      	str	r3, [r7, #0]
 8018e00:	460b      	mov	r3, r1
 8018e02:	817b      	strh	r3, [r7, #10]
	PifMpu60x0IntEnable int_enable;
	PifMpu60x0IntPinCfg int_pin_cfg;
    PifMpu60x0PwrMgmt1 pwr_mgmt_1;
	PifHmc5883ConfigA config_a;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d005      	beq.n	8018e16 <pifGy86_Init+0x22>
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d002      	beq.n	8018e16 <pifGy86_Init+0x22>
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d104      	bne.n	8018e20 <pifGy86_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 8018e16:	4b48      	ldr	r3, [pc, #288]	; (8018f38 <pifGy86_Init+0x144>)
 8018e18:	2201      	movs	r2, #1
 8018e1a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	e1dd      	b.n	80191dc <pifGy86_Init+0x3e8>
	}

	memset(p_owner, 0, sizeof(PifGy86));
 8018e20:	2264      	movs	r2, #100	; 0x64
 8018e22:	2100      	movs	r1, #0
 8018e24:	68f8      	ldr	r0, [r7, #12]
 8018e26:	f00a f9df 	bl	80231e8 <memset>

    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	1d18      	adds	r0, r3, #4
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	2368      	movs	r3, #104	; 0x68
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	2100      	movs	r1, #0
 8018e38:	f001 f888 	bl	8019f4c <pifMpu60x0_Init>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	f000 81a5 	beq.w	801918e <pifGy86_Init+0x39a>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	2200      	movs	r2, #0
 8018e4a:	2119      	movs	r1, #25
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	f7f9 fbcf 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8018e52:	4603      	mov	r3, r0
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	f000 819c 	beq.w	8019192 <pifGy86_Init+0x39e>

    pwr_mgmt_1.byte = 0;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	753b      	strb	r3, [r7, #20]
    pwr_mgmt_1.bit.clksel = p_config ? p_config->mpu60x0_clksel : MPU60X0_CLKSEL_PLL_ZGYRO;
 8018e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d005      	beq.n	8018e70 <pifGy86_Init+0x7c>
 8018e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e66:	789b      	ldrb	r3, [r3, #2]
 8018e68:	f003 0307 	and.w	r3, r3, #7
 8018e6c:	b2da      	uxtb	r2, r3
 8018e6e:	e000      	b.n	8018e72 <pifGy86_Init+0x7e>
 8018e70:	2203      	movs	r2, #3
 8018e72:	7d3b      	ldrb	r3, [r7, #20]
 8018e74:	f362 0302 	bfi	r3, r2, #0, #3
 8018e78:	753b      	strb	r3, [r7, #20]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	68db      	ldr	r3, [r3, #12]
 8018e7e:	7d3a      	ldrb	r2, [r7, #20]
 8018e80:	216b      	movs	r1, #107	; 0x6b
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7f9 fbb4 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	f000 8183 	beq.w	8019196 <pifGy86_Init+0x3a2>

    if (p_config) {
 8018e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d043      	beq.n	8018f1e <pifGy86_Init+0x12a>
    	config.byte = 0;
 8018e96:	2300      	movs	r3, #0
 8018e98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   		config.bit.dlpf_cfg = p_config->mpu60x0_dlpf_cfg;
 8018e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018e9e:	78db      	ldrb	r3, [r3, #3]
 8018ea0:	f003 0307 	and.w	r3, r3, #7
 8018ea4:	b2da      	uxtb	r2, r3
 8018ea6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018eaa:	f362 0302 	bfi	r3, r2, #0, #3
 8018eae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	68db      	ldr	r3, [r3, #12]
 8018eb6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018eba:	211a      	movs	r1, #26
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7f9 fb97 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8018ec2:	4603      	mov	r3, r0
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	f000 8168 	beq.w	801919a <pifGy86_Init+0x3a6>

        gyro_config.byte = 0;
 8018eca:	2300      	movs	r3, #0
 8018ecc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        gyro_config.bit.fs_sel = p_config->mpu60x0_fs_sel;
 8018ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ed2:	791b      	ldrb	r3, [r3, #4]
 8018ed4:	f003 0303 	and.w	r3, r3, #3
 8018ed8:	b2da      	uxtb	r2, r3
 8018eda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018ede:	f362 03c4 	bfi	r3, r2, #3, #2
 8018ee2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        pifMpu60x0_SetGyroConfig(&p_owner->_mpu6050, gyro_config);
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	3304      	adds	r3, #4
 8018eea:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f001 f926 	bl	801a140 <pifMpu60x0_SetGyroConfig>

        accel_config.byte = 0;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        accel_config.bit.afs_sel = p_config->mpu60x0_afs_sel;
 8018efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018efc:	785b      	ldrb	r3, [r3, #1]
 8018efe:	f003 0303 	and.w	r3, r3, #3
 8018f02:	b2da      	uxtb	r2, r3
 8018f04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018f08:	f362 03c4 	bfi	r3, r2, #3, #2
 8018f0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        pifMpu60x0_SetAccelConfig(&p_owner->_mpu6050, accel_config);
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	3304      	adds	r3, #4
 8018f14:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f001 f931 	bl	801a180 <pifMpu60x0_SetAccelConfig>
    }

    i2c_mst_ctrl.byte = 0;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    i2c_mst_ctrl.bit.i2c_mst_clk = p_config ? p_config->mpu60x0_i2c_mst_clk : MPU60X0_I2C_MST_CLK_400KHZ;
 8018f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d008      	beq.n	8018f3c <pifGy86_Init+0x148>
 8018f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018f2c:	795b      	ldrb	r3, [r3, #5]
 8018f2e:	f003 030f 	and.w	r3, r3, #15
 8018f32:	b2da      	uxtb	r2, r3
 8018f34:	e003      	b.n	8018f3e <pifGy86_Init+0x14a>
 8018f36:	bf00      	nop
 8018f38:	20001d48 	.word	0x20001d48
 8018f3c:	220d      	movs	r2, #13
 8018f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f42:	f362 0303 	bfi	r3, r2, #0, #4
 8018f46:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	68db      	ldr	r3, [r3, #12]
 8018f4e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018f52:	2124      	movs	r1, #36	; 0x24
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7f9 fb4b 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	f000 811e 	beq.w	801919e <pifGy86_Init+0x3aa>

    int_pin_cfg.byte = 0;
 8018f62:	2300      	movs	r3, #0
 8018f64:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.int_rd_clear = TRUE;
 8018f66:	7e3b      	ldrb	r3, [r7, #24]
 8018f68:	f043 0310 	orr.w	r3, r3, #16
 8018f6c:	763b      	strb	r3, [r7, #24]
    int_pin_cfg.bit.i2c_bypass_en = TRUE;
 8018f6e:	7e3b      	ldrb	r3, [r7, #24]
 8018f70:	f043 0302 	orr.w	r3, r3, #2
 8018f74:	763b      	strb	r3, [r7, #24]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	68db      	ldr	r3, [r3, #12]
 8018f7a:	7e3a      	ldrb	r2, [r7, #24]
 8018f7c:	2137      	movs	r1, #55	; 0x37
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7f9 fb36 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8018f84:	4603      	mov	r3, r0
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	f000 810b 	beq.w	80191a2 <pifGy86_Init+0x3ae>

    int_enable.byte = 0;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	773b      	strb	r3, [r7, #28]
    int_enable.bit.data_rdy_en = TRUE;
 8018f90:	7f3b      	ldrb	r3, [r7, #28]
 8018f92:	f043 0301 	orr.w	r3, r3, #1
 8018f96:	773b      	strb	r3, [r7, #28]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	68db      	ldr	r3, [r3, #12]
 8018f9c:	7f3a      	ldrb	r2, [r7, #28]
 8018f9e:	2138      	movs	r1, #56	; 0x38
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f7f9 fb25 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	f000 80fc 	beq.w	80191a6 <pifGy86_Init+0x3b2>

    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	f103 0014 	add.w	r0, r3, #20
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	687a      	ldr	r2, [r7, #4]
 8018fb8:	2100      	movs	r1, #0
 8018fba:	f000 faff 	bl	80195bc <pifHmc5883_Init>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	f000 80f2 	beq.w	80191aa <pifGy86_Init+0x3b6>

    if (p_config) {
 8018fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d039      	beq.n	8019040 <pifGy86_Init+0x24c>
        config_a.bit.measure_mode = HMC5883_MEASURE_MODE_NORMAL;
 8018fcc:	7c3b      	ldrb	r3, [r7, #16]
 8018fce:	f36f 0301 	bfc	r3, #0, #2
 8018fd2:	743b      	strb	r3, [r7, #16]
   		config_a.bit.samples = p_config->hmc5883_samples;
 8018fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fd6:	7a5b      	ldrb	r3, [r3, #9]
 8018fd8:	f003 0303 	and.w	r3, r3, #3
 8018fdc:	b2da      	uxtb	r2, r3
 8018fde:	7c3b      	ldrb	r3, [r7, #16]
 8018fe0:	f362 1346 	bfi	r3, r2, #5, #2
 8018fe4:	743b      	strb	r3, [r7, #16]
   		config_a.bit.data_rate = p_config->hmc5883_data_rate;
 8018fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018fe8:	799b      	ldrb	r3, [r3, #6]
 8018fea:	f003 0307 	and.w	r3, r3, #7
 8018fee:	b2da      	uxtb	r2, r3
 8018ff0:	7c3b      	ldrb	r3, [r7, #16]
 8018ff2:	f362 0384 	bfi	r3, r2, #2, #3
 8018ff6:	743b      	strb	r3, [r7, #16]
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ffc:	7c3a      	ldrb	r2, [r7, #16]
 8018ffe:	2100      	movs	r1, #0
 8019000:	4618      	mov	r0, r3
 8019002:	f7f9 faf5 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8019006:	4603      	mov	r3, r0
 8019008:	2b00      	cmp	r3, #0
 801900a:	f000 80d0 	beq.w	80191ae <pifGy86_Init+0x3ba>

        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	f103 0214 	add.w	r2, r3, #20
 8019014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019016:	79db      	ldrb	r3, [r3, #7]
 8019018:	4619      	mov	r1, r3
 801901a:	4610      	mov	r0, r2
 801901c:	f000 fb72 	bl	8019704 <pifHmc5883_SetGain>
 8019020:	4603      	mov	r3, r0
 8019022:	2b00      	cmp	r3, #0
 8019024:	f000 80c5 	beq.w	80191b2 <pifGy86_Init+0x3be>

        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801902c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801902e:	7a1b      	ldrb	r3, [r3, #8]
 8019030:	2202      	movs	r2, #2
 8019032:	2102      	movs	r1, #2
 8019034:	f7f9 faf2 	bl	801261c <pifI2cDevice_WriteRegBit8>
 8019038:	4603      	mov	r3, r0
 801903a:	2b00      	cmp	r3, #0
 801903c:	f000 80bb 	beq.w	80191b6 <pifGy86_Init+0x3c2>
    }

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	68d8      	ldr	r0, [r3, #12]
 8019044:	2300      	movs	r3, #0
 8019046:	f240 1201 	movw	r2, #257	; 0x101
 801904a:	2137      	movs	r1, #55	; 0x37
 801904c:	f7f9 fae6 	bl	801261c <pifI2cDevice_WriteRegBit8>
 8019050:	4603      	mov	r3, r0
 8019052:	2b00      	cmp	r3, #0
 8019054:	f000 80b1 	beq.w	80191ba <pifGy86_Init+0x3c6>

    pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, 0x01); // DATA_RDY_EN interrupt enable
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	68db      	ldr	r3, [r3, #12]
 801905c:	2201      	movs	r2, #1
 801905e:	2138      	movs	r1, #56	; 0x38
 8019060:	4618      	mov	r0, r3
 8019062:	f7f9 fac5 	bl	80125f0 <pifI2cDevice_WriteRegByte>

    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	68d8      	ldr	r0, [r3, #12]
 801906a:	2301      	movs	r3, #1
 801906c:	f240 5201 	movw	r2, #1281	; 0x501
 8019070:	216a      	movs	r1, #106	; 0x6a
 8019072:	f7f9 fad3 	bl	801261c <pifI2cDevice_WriteRegBit8>
 8019076:	4603      	mov	r3, r0
 8019078:	2b00      	cmp	r3, #0
 801907a:	f000 80a0 	beq.w	80191be <pifGy86_Init+0x3ca>

    i2c_slv_addr.byte = 0;
 801907e:	2300      	movs	r3, #0
 8019080:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_addr = HMC5883_I2C_ADDR;
 8019084:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019088:	221e      	movs	r2, #30
 801908a:	f362 0306 	bfi	r3, r2, #0, #7
 801908e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    i2c_slv_addr.bit.i2c_slv_rw = TRUE;
 8019092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801909a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	68db      	ldr	r3, [r3, #12]
 80190a2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80190a6:	2125      	movs	r1, #37	; 0x25
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7f9 faa1 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 80190ae:	4603      	mov	r3, r0
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	f000 8086 	beq.w	80191c2 <pifGy86_Init+0x3ce>

    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	2203      	movs	r2, #3
 80190bc:	2126      	movs	r1, #38	; 0x26
 80190be:	4618      	mov	r0, r3
 80190c0:	f7f9 fa96 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 80190c4:	4603      	mov	r3, r0
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d07d      	beq.n	80191c6 <pifGy86_Init+0x3d2>

    i2c_slv_ctrl.byte = 0;
 80190ca:	2300      	movs	r3, #0
 80190cc:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_len = 6;
 80190d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80190d4:	2206      	movs	r2, #6
 80190d6:	f362 0303 	bfi	r3, r2, #0, #4
 80190da:	f887 3020 	strb.w	r3, [r7, #32]
    i2c_slv_ctrl.bit.i2c_slv_en = TRUE;
 80190de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80190e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190e6:	f887 3020 	strb.w	r3, [r7, #32]
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	68db      	ldr	r3, [r3, #12]
 80190ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80190f2:	2127      	movs	r1, #39	; 0x27
 80190f4:	4618      	mov	r0, r3
 80190f6:	f7f9 fa7b 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 80190fa:	4603      	mov	r3, r0
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d064      	beq.n	80191ca <pifGy86_Init+0x3d6>

    if (p_config && p_config->ms5611_evt_read) {
 8019100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019102:	2b00      	cmp	r3, #0
 8019104:	d02a      	beq.n	801915c <pifGy86_Init+0x368>
 8019106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019108:	691b      	ldr	r3, [r3, #16]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d026      	beq.n	801915c <pifGy86_Init+0x368>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8019114:	2377      	movs	r3, #119	; 0x77
 8019116:	687a      	ldr	r2, [r7, #4]
 8019118:	2100      	movs	r1, #0
 801911a:	f001 fd0b 	bl	801ab34 <pifMs5611_Init>
 801911e:	4603      	mov	r3, r0
 8019120:	2b00      	cmp	r3, #0
 8019122:	d054      	beq.n	80191ce <pifGy86_Init+0x3da>

        pifMs5611_SetOverSamplingRate(&p_owner->_ms5611, p_config->ms5611_osr);
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801912a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801912c:	7a9b      	ldrb	r3, [r3, #10]
 801912e:	b29b      	uxth	r3, r3
 8019130:	4619      	mov	r1, r3
 8019132:	4610      	mov	r0, r2
 8019134:	f001 fd9e 	bl	801ac74 <pifMs5611_SetOverSamplingRate>

        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801913e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019140:	8999      	ldrh	r1, [r3, #12]
 8019142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019144:	691a      	ldr	r2, [r3, #16]
 8019146:	2300      	movs	r3, #0
 8019148:	f001 fdd0 	bl	801acec <pifMs5611_AddTaskForReading>
 801914c:	4603      	mov	r3, r0
 801914e:	2b00      	cmp	r3, #0
 8019150:	d03f      	beq.n	80191d2 <pifGy86_Init+0x3de>
        p_owner->_ms5611._p_task->disallow_yield_id = p_config->disallow_yield_id;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019158:	7812      	ldrb	r2, [r2, #0]
 801915a:	715a      	strb	r2, [r3, #5]
    }

	if (id == PIF_ID_AUTO) id = pif_id++;
 801915c:	897b      	ldrh	r3, [r7, #10]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d106      	bne.n	8019170 <pifGy86_Init+0x37c>
 8019162:	4b20      	ldr	r3, [pc, #128]	; (80191e4 <pifGy86_Init+0x3f0>)
 8019164:	881b      	ldrh	r3, [r3, #0]
 8019166:	1c5a      	adds	r2, r3, #1
 8019168:	b291      	uxth	r1, r2
 801916a:	4a1e      	ldr	r2, [pc, #120]	; (80191e4 <pifGy86_Init+0x3f0>)
 801916c:	8011      	strh	r1, [r2, #0]
 801916e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	897a      	ldrh	r2, [r7, #10]
 8019174:	801a      	strh	r2, [r3, #0]
    p_owner->__mag_start_reg = 0;
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	2200      	movs	r2, #0
 801917a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifGy86_ReadMag;
 801917e:	683b      	ldr	r3, [r7, #0]
 8019180:	4a19      	ldr	r2, [pc, #100]	; (80191e8 <pifGy86_Init+0x3f4>)
 8019182:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	68fa      	ldr	r2, [r7, #12]
 8019188:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 801918a:	2301      	movs	r3, #1
 801918c:	e026      	b.n	80191dc <pifGy86_Init+0x3e8>
    if (!pifMpu60x0_Init(&p_owner->_mpu6050, PIF_ID_AUTO, p_i2c, MPU60X0_I2C_ADDR(0), p_imu_sensor)) goto fail;
 801918e:	bf00      	nop
 8019190:	e020      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_SMPLRT_DIV, 0)) goto fail;
 8019192:	bf00      	nop
 8019194:	e01e      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019196:	bf00      	nop
 8019198:	e01c      	b.n	80191d4 <pifGy86_Init+0x3e0>
    	if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_CONFIG, config.byte)) goto fail;
 801919a:	bf00      	nop
 801919c:	e01a      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_MST_CTRL, i2c_mst_ctrl.byte)) goto fail;
 801919e:	bf00      	nop
 80191a0:	e018      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, int_pin_cfg.byte)) goto fail;
 80191a2:	bf00      	nop
 80191a4:	e016      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_ENABLE, int_enable.byte)) goto fail;
 80191a6:	bf00      	nop
 80191a8:	e014      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifHmc5883_Init(&p_owner->_hmc5883, PIF_ID_AUTO, p_i2c, p_imu_sensor)) goto fail;
 80191aa:	bf00      	nop
 80191ac:	e012      	b.n	80191d4 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegByte(p_owner->_hmc5883._p_i2c, HMC5883_REG_CONFIG_A, config_a.byte)) goto fail;
 80191ae:	bf00      	nop
 80191b0:	e010      	b.n	80191d4 <pifGy86_Init+0x3e0>
        if (!pifHmc5883_SetGain(&p_owner->_hmc5883, p_config->hmc5883_gain)) goto fail;
 80191b2:	bf00      	nop
 80191b4:	e00e      	b.n	80191d4 <pifGy86_Init+0x3e0>
        if (!pifI2cDevice_WriteRegBit8(p_owner->_hmc5883._p_i2c, HMC5883_REG_MODE, HMC5883_MODE_MODE, p_config->hmc5883_mode)) goto fail;
 80191b6:	bf00      	nop
 80191b8:	e00c      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_INT_PIN_CFG, MPU60X0_INT_PIN_CFG_I2C_BYPASS_EN, FALSE)) goto fail;
 80191ba:	bf00      	nop
 80191bc:	e00a      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegBit8(p_owner->_mpu6050._p_i2c, MPU60X0_REG_USER_CTRL, MPU60X0_USER_CTRL_I2C_MST_EN, TRUE)) goto fail;
 80191be:	bf00      	nop
 80191c0:	e008      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_ADDR, i2c_slv_addr.byte)) goto fail;
 80191c2:	bf00      	nop
 80191c4:	e006      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_REG, HMC5883_REG_OUT_X_M)) goto fail;
 80191c6:	bf00      	nop
 80191c8:	e004      	b.n	80191d4 <pifGy86_Init+0x3e0>
    if (!pifI2cDevice_WriteRegByte(p_owner->_mpu6050._p_i2c, MPU60X0_REG_I2C_SLV0_CTRL, i2c_slv_ctrl.byte)) goto fail;
 80191ca:	bf00      	nop
 80191cc:	e002      	b.n	80191d4 <pifGy86_Init+0x3e0>
    	if (!pifMs5611_Init(&p_owner->_ms5611, PIF_ID_AUTO, p_i2c, MS5611_I2C_ADDR(1))) goto fail;
 80191ce:	bf00      	nop
 80191d0:	e000      	b.n	80191d4 <pifGy86_Init+0x3e0>
        if (!pifMs5611_AddTaskForReading(&p_owner->_ms5611, p_config->ms5611_read_period, p_config->ms5611_evt_read, FALSE)) goto fail;
 80191d2:	bf00      	nop

fail:
	pifGy86_Clear(p_owner);
 80191d4:	68f8      	ldr	r0, [r7, #12]
 80191d6:	f000 f809 	bl	80191ec <pifGy86_Clear>
	return FALSE;
 80191da:	2300      	movs	r3, #0
}
 80191dc:	4618      	mov	r0, r3
 80191de:	3738      	adds	r7, #56	; 0x38
 80191e0:	46bd      	mov	sp, r7
 80191e2:	bd80      	pop	{r7, pc}
 80191e4:	20000128 	.word	0x20000128
 80191e8:	0801921b 	.word	0x0801921b

080191ec <pifGy86_Clear>:

void pifGy86_Clear(PifGy86* p_owner)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b082      	sub	sp, #8
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
    pifMs5611_Clear(&p_owner->_ms5611);
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	332c      	adds	r3, #44	; 0x2c
 80191f8:	4618      	mov	r0, r3
 80191fa:	f001 fd17 	bl	801ac2c <pifMs5611_Clear>
    pifHmc5883_Clear(&p_owner->_hmc5883);
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	3314      	adds	r3, #20
 8019202:	4618      	mov	r0, r3
 8019204:	f000 fa66 	bl	80196d4 <pifHmc5883_Clear>
    pifMpu60x0_Clear(&p_owner->_mpu6050);
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	3304      	adds	r3, #4
 801920c:	4618      	mov	r0, r3
 801920e:	f000 ff7f 	bl	801a110 <pifMpu60x0_Clear>
}
 8019212:	bf00      	nop
 8019214:	3708      	adds	r7, #8
 8019216:	46bd      	mov	sp, r7
 8019218:	bd80      	pop	{r7, pc}

0801921a <pifGy86_ReadMag>:

BOOL pifGy86_ReadMag(PifGy86* p_owner, int16_t* p_mag)
{
 801921a:	b580      	push	{r7, lr}
 801921c:	b084      	sub	sp, #16
 801921e:	af00      	add	r7, sp, #0
 8019220:	6078      	str	r0, [r7, #4]
 8019222:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_mpu6050._p_i2c, MPU60X0_REG_EXT_SENS_DATA_00 + p_owner->__mag_start_reg, data, 6)) return FALSE;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	68d8      	ldr	r0, [r3, #12]
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801922e:	3349      	adds	r3, #73	; 0x49
 8019230:	b2d9      	uxtb	r1, r3
 8019232:	f107 0208 	add.w	r2, r7, #8
 8019236:	2306      	movs	r3, #6
 8019238:	f7f9 f908 	bl	801244c <pifI2cDevice_ReadRegBytes>
 801923c:	4603      	mov	r3, r0
 801923e:	2b00      	cmp	r3, #0
 8019240:	d101      	bne.n	8019246 <pifGy86_ReadMag+0x2c>
 8019242:	2300      	movs	r3, #0
 8019244:	e04d      	b.n	80192e2 <pifGy86_ReadMag+0xc8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->_hmc5883.scale[AXIS_X];
 8019246:	7a3b      	ldrb	r3, [r7, #8]
 8019248:	b29b      	uxth	r3, r3
 801924a:	021b      	lsls	r3, r3, #8
 801924c:	b29a      	uxth	r2, r3
 801924e:	7a7b      	ldrb	r3, [r7, #9]
 8019250:	b29b      	uxth	r3, r3
 8019252:	4413      	add	r3, r2
 8019254:	b29b      	uxth	r3, r3
 8019256:	b21b      	sxth	r3, r3
 8019258:	ee07 3a90 	vmov	s15, r3
 801925c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	edd3 7a05 	vldr	s15, [r3, #20]
 8019266:	ee67 7a27 	vmul.f32	s15, s14, s15
 801926a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801926e:	ee17 3a90 	vmov	r3, s15
 8019272:	b21a      	sxth	r2, r3
 8019274:	683b      	ldr	r3, [r7, #0]
 8019276:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->_hmc5883.scale[AXIS_Z];
 8019278:	7abb      	ldrb	r3, [r7, #10]
 801927a:	b29b      	uxth	r3, r3
 801927c:	021b      	lsls	r3, r3, #8
 801927e:	b29a      	uxth	r2, r3
 8019280:	7afb      	ldrb	r3, [r7, #11]
 8019282:	b29b      	uxth	r3, r3
 8019284:	4413      	add	r3, r2
 8019286:	b29b      	uxth	r3, r3
 8019288:	b21b      	sxth	r3, r3
 801928a:	ee07 3a90 	vmov	s15, r3
 801928e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	edd3 7a07 	vldr	s15, [r3, #28]
 8019298:	ee67 7a27 	vmul.f32	s15, s14, s15
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	3304      	adds	r3, #4
 80192a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192a4:	ee17 2a90 	vmov	r2, s15
 80192a8:	b212      	sxth	r2, r2
 80192aa:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->_hmc5883.scale[AXIS_Y];
 80192ac:	7b3b      	ldrb	r3, [r7, #12]
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	021b      	lsls	r3, r3, #8
 80192b2:	b29a      	uxth	r2, r3
 80192b4:	7b7b      	ldrb	r3, [r7, #13]
 80192b6:	b29b      	uxth	r3, r3
 80192b8:	4413      	add	r3, r2
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	b21b      	sxth	r3, r3
 80192be:	ee07 3a90 	vmov	s15, r3
 80192c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80192cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	3302      	adds	r3, #2
 80192d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80192d8:	ee17 2a90 	vmov	r2, s15
 80192dc:	b212      	sxth	r2, r2
 80192de:	801a      	strh	r2, [r3, #0]
	return TRUE;
 80192e0:	2301      	movs	r3, #1
}
 80192e2:	4618      	mov	r0, r3
 80192e4:	3710      	adds	r7, #16
 80192e6:	46bd      	mov	sp, r7
 80192e8:	bd80      	pop	{r7, pc}

080192ea <_doTask>:
#include "core/pif_task.h"
#include "sensor/pif_hc_sr04.h"


static uint16_t _doTask(PifTask* p_task)
{
 80192ea:	b580      	push	{r7, lr}
 80192ec:	b084      	sub	sp, #16
 80192ee:	af00      	add	r7, sp, #0
 80192f0:	6078      	str	r0, [r7, #4]
	PifHcSr04* p_owner = (PifHcSr04*)p_task->_p_client;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	68db      	ldr	r3, [r3, #12]
 80192f6:	60fb      	str	r3, [r7, #12]

	switch (p_owner->__state) {
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	7d1b      	ldrb	r3, [r3, #20]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d002      	beq.n	8019306 <_doTask+0x1c>
 8019300:	2b03      	cmp	r3, #3
 8019302:	d004      	beq.n	801930e <_doTask+0x24>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
		p_owner->__state = HSS_READY;
		break;

	default:
		break;
 8019304:	e011      	b.n	801932a <_doTask+0x40>
		pifHcSr04_Trigger(p_owner);
 8019306:	68f8      	ldr	r0, [r7, #12]
 8019308:	f000 f866 	bl	80193d8 <pifHcSr04_Trigger>
		break;
 801930c:	e00d      	b.n	801932a <_doTask+0x40>
		if (p_owner->evt_read) (*p_owner->evt_read)(p_owner->__distance);
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	685b      	ldr	r3, [r3, #4]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d005      	beq.n	8019322 <_doTask+0x38>
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	685b      	ldr	r3, [r3, #4]
 801931a:	68fa      	ldr	r2, [r7, #12]
 801931c:	69d2      	ldr	r2, [r2, #28]
 801931e:	4610      	mov	r0, r2
 8019320:	4798      	blx	r3
		p_owner->__state = HSS_READY;
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	2200      	movs	r2, #0
 8019326:	751a      	strb	r2, [r3, #20]
		break;
 8019328:	bf00      	nop
	}
	return 0;
 801932a:	2300      	movs	r3, #0
}
 801932c:	4618      	mov	r0, r3
 801932e:	3710      	adds	r7, #16
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}

08019334 <pifHcSr04_Init>:

BOOL pifHcSr04_Init(PifHcSr04* p_owner, PifId id)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b084      	sub	sp, #16
 8019338:	af02      	add	r7, sp, #8
 801933a:	6078      	str	r0, [r7, #4]
 801933c:	460b      	mov	r3, r1
 801933e:	807b      	strh	r3, [r7, #2]
	if (!p_owner) {
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d104      	bne.n	8019350 <pifHcSr04_Init+0x1c>
		pif_error = E_INVALID_PARAM;
 8019346:	4b1f      	ldr	r3, [pc, #124]	; (80193c4 <pifHcSr04_Init+0x90>)
 8019348:	2201      	movs	r2, #1
 801934a:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801934c:	2300      	movs	r3, #0
 801934e:	e035      	b.n	80193bc <pifHcSr04_Init+0x88>
	}

	if (!pif_act_timer1us) {
 8019350:	4b1d      	ldr	r3, [pc, #116]	; (80193c8 <pifHcSr04_Init+0x94>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d104      	bne.n	8019362 <pifHcSr04_Init+0x2e>
		pif_error = E_CANNOT_USE;
 8019358:	4b1a      	ldr	r3, [pc, #104]	; (80193c4 <pifHcSr04_Init+0x90>)
 801935a:	2209      	movs	r2, #9
 801935c:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801935e:	2300      	movs	r3, #0
 8019360:	e02c      	b.n	80193bc <pifHcSr04_Init+0x88>
	}

	memset(p_owner, 0, sizeof(PifHcSr04));
 8019362:	2220      	movs	r2, #32
 8019364:	2100      	movs	r1, #0
 8019366:	6878      	ldr	r0, [r7, #4]
 8019368:	f009 ff3e 	bl	80231e8 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_PERIOD_MS, 50, _doTask, p_owner, FALSE);
 801936c:	2300      	movs	r3, #0
 801936e:	9300      	str	r3, [sp, #0]
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	4a16      	ldr	r2, [pc, #88]	; (80193cc <pifHcSr04_Init+0x98>)
 8019374:	2132      	movs	r1, #50	; 0x32
 8019376:	2002      	movs	r0, #2
 8019378:	f7fb f950 	bl	801461c <pifTaskManager_Add>
 801937c:	4602      	mov	r2, r0
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	60da      	str	r2, [r3, #12]
	if (!p_owner->_p_task) return FALSE;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	68db      	ldr	r3, [r3, #12]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d101      	bne.n	801938e <pifHcSr04_Init+0x5a>
 801938a:	2300      	movs	r3, #0
 801938c:	e016      	b.n	80193bc <pifHcSr04_Init+0x88>
	p_owner->_p_task->name = "HC_SR04";
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	68db      	ldr	r3, [r3, #12]
 8019392:	4a0f      	ldr	r2, [pc, #60]	; (80193d0 <pifHcSr04_Init+0x9c>)
 8019394:	601a      	str	r2, [r3, #0]

	if (id == PIF_ID_AUTO) id = pif_id++;
 8019396:	887b      	ldrh	r3, [r7, #2]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d106      	bne.n	80193aa <pifHcSr04_Init+0x76>
 801939c:	4b0d      	ldr	r3, [pc, #52]	; (80193d4 <pifHcSr04_Init+0xa0>)
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	1c5a      	adds	r2, r3, #1
 80193a2:	b291      	uxth	r1, r2
 80193a4:	4a0b      	ldr	r2, [pc, #44]	; (80193d4 <pifHcSr04_Init+0xa0>)
 80193a6:	8011      	strh	r1, [r2, #0]
 80193a8:	807b      	strh	r3, [r7, #2]
    p_owner->_id = id;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	887a      	ldrh	r2, [r7, #2]
 80193ae:	811a      	strh	r2, [r3, #8]

    pifHcSr04_SetTemperature(p_owner, 20);
 80193b0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f000 f849 	bl	801944c <pifHcSr04_SetTemperature>

    return TRUE;
 80193ba:	2301      	movs	r3, #1
}
 80193bc:	4618      	mov	r0, r3
 80193be:	3708      	adds	r7, #8
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	20001d48 	.word	0x20001d48
 80193c8:	20001d6c 	.word	0x20001d6c
 80193cc:	080192eb 	.word	0x080192eb
 80193d0:	08027bb8 	.word	0x08027bb8
 80193d4:	20000128 	.word	0x20000128

080193d8 <pifHcSr04_Trigger>:
		p_owner->_p_task = NULL;
	}
}

void pifHcSr04_Trigger(PifHcSr04* p_owner)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
	(*p_owner->act_trigger)(ON);
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	2001      	movs	r0, #1
 80193e6:	4798      	blx	r3
	pif_Delay1us(11);
 80193e8:	200b      	movs	r0, #11
 80193ea:	f7f7 ff7d 	bl	80112e8 <pif_Delay1us>
	(*p_owner->act_trigger)(OFF);
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	2000      	movs	r0, #0
 80193f4:	4798      	blx	r3
	p_owner->__state = HSS_TRIGGER;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2201      	movs	r2, #1
 80193fa:	751a      	strb	r2, [r3, #20]
}
 80193fc:	bf00      	nop
 80193fe:	3708      	adds	r7, #8
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}

08019404 <pifHcSr04_StartTrigger>:

BOOL pifHcSr04_StartTrigger(PifHcSr04* p_owner, uint16_t period)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	460b      	mov	r3, r1
 801940e:	807b      	strh	r3, [r7, #2]
	if (!p_owner || !period) {
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d002      	beq.n	801941c <pifHcSr04_StartTrigger+0x18>
 8019416:	887b      	ldrh	r3, [r7, #2]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d104      	bne.n	8019426 <pifHcSr04_StartTrigger+0x22>
		pif_error = E_INVALID_PARAM;
 801941c:	4b0a      	ldr	r3, [pc, #40]	; (8019448 <pifHcSr04_StartTrigger+0x44>)
 801941e:	2201      	movs	r2, #1
 8019420:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019422:	2300      	movs	r3, #0
 8019424:	e00b      	b.n	801943e <pifHcSr04_StartTrigger+0x3a>
	}

	pifTask_ChangePeriod(p_owner->_p_task, period);
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	68db      	ldr	r3, [r3, #12]
 801942a:	887a      	ldrh	r2, [r7, #2]
 801942c:	4611      	mov	r1, r2
 801942e:	4618      	mov	r0, r3
 8019430:	f7fb f84c 	bl	80144cc <pifTask_ChangePeriod>
	p_owner->_p_task->pause = FALSE;
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	2200      	movs	r2, #0
 801943a:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801943c:	2301      	movs	r3, #1
}
 801943e:	4618      	mov	r0, r3
 8019440:	3708      	adds	r7, #8
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}
 8019446:	bf00      	nop
 8019448:	20001d48 	.word	0x20001d48

0801944c <pifHcSr04_SetTemperature>:
{
	p_owner->_p_task->pause = TRUE;
}

void pifHcSr04_SetTemperature(PifHcSr04* p_owner, float temperature)
{
 801944c:	b480      	push	{r7}
 801944e:	b083      	sub	sp, #12
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
 8019454:	ed87 0a00 	vstr	s0, [r7]
	p_owner->_transform_const = 2.0f / ((331.6f + 0.6f * temperature) / 10000.0f);		// 2 : 왕복, 10000 : m/s -> cm/ms
 8019458:	edd7 7a00 	vldr	s15, [r7]
 801945c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8019490 <pifHcSr04_SetTemperature+0x44>
 8019460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019464:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8019494 <pifHcSr04_SetTemperature+0x48>
 8019468:	ee77 7a87 	vadd.f32	s15, s15, s14
 801946c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8019498 <pifHcSr04_SetTemperature+0x4c>
 8019470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019474:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8019482:	bf00      	nop
 8019484:	370c      	adds	r7, #12
 8019486:	46bd      	mov	sp, r7
 8019488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948c:	4770      	bx	lr
 801948e:	bf00      	nop
 8019490:	3f19999a 	.word	0x3f19999a
 8019494:	43a5cccd 	.word	0x43a5cccd
 8019498:	461c4000 	.word	0x461c4000

0801949c <pifHcSr04_sigReceiveEcho>:

void pifHcSr04_sigReceiveEcho(PifHcSr04* p_owner, SWITCH state)
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b082      	sub	sp, #8
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
 80194a4:	460b      	mov	r3, r1
 80194a6:	70fb      	strb	r3, [r7, #3]
	switch (p_owner->__state) {
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	7d1b      	ldrb	r3, [r3, #20]
 80194ac:	2b01      	cmp	r3, #1
 80194ae:	d002      	beq.n	80194b6 <pifHcSr04_sigReceiveEcho+0x1a>
 80194b0:	2b02      	cmp	r3, #2
 80194b2:	d00d      	beq.n	80194d0 <pifHcSr04_sigReceiveEcho+0x34>
			pifTask_SetTrigger(p_owner->_p_task);
		}
		break;

	default:
		break;
 80194b4:	e031      	b.n	801951a <pifHcSr04_sigReceiveEcho+0x7e>
		if (state) {
 80194b6:	78fb      	ldrb	r3, [r7, #3]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d02b      	beq.n	8019514 <pifHcSr04_sigReceiveEcho+0x78>
			p_owner->__tigger_time_us = (*pif_act_timer1us)();
 80194bc:	4b19      	ldr	r3, [pc, #100]	; (8019524 <pifHcSr04_sigReceiveEcho+0x88>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	4798      	blx	r3
 80194c2:	4602      	mov	r2, r0
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	619a      	str	r2, [r3, #24]
			p_owner->__state = HSS_HIGH;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2202      	movs	r2, #2
 80194cc:	751a      	strb	r2, [r3, #20]
		break;
 80194ce:	e021      	b.n	8019514 <pifHcSr04_sigReceiveEcho+0x78>
		if (!state) {
 80194d0:	78fb      	ldrb	r3, [r7, #3]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d120      	bne.n	8019518 <pifHcSr04_sigReceiveEcho+0x7c>
			p_owner->__distance = ((*pif_act_timer1us)() - p_owner->__tigger_time_us) / p_owner->_transform_const;
 80194d6:	4b13      	ldr	r3, [pc, #76]	; (8019524 <pifHcSr04_sigReceiveEcho+0x88>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4798      	blx	r3
 80194dc:	4602      	mov	r2, r0
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	699b      	ldr	r3, [r3, #24]
 80194e2:	1ad3      	subs	r3, r2, r3
 80194e4:	ee07 3a90 	vmov	s15, r3
 80194e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80194f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80194f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194fa:	ee17 2a90 	vmov	r2, s15
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	61da      	str	r2, [r3, #28]
			p_owner->__state = HSS_LOW;
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	2203      	movs	r2, #3
 8019506:	751a      	strb	r2, [r3, #20]
			pifTask_SetTrigger(p_owner->_p_task);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	68db      	ldr	r3, [r3, #12]
 801950c:	4618      	mov	r0, r3
 801950e:	f7fa ffff 	bl	8014510 <pifTask_SetTrigger>
		break;
 8019512:	e001      	b.n	8019518 <pifHcSr04_sigReceiveEcho+0x7c>
		break;
 8019514:	bf00      	nop
 8019516:	e000      	b.n	801951a <pifHcSr04_sigReceiveEcho+0x7e>
		break;
 8019518:	bf00      	nop
	}
}
 801951a:	bf00      	nop
 801951c:	3708      	adds	r7, #8
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
 8019522:	bf00      	nop
 8019524:	20001d6c 	.word	0x20001d6c

08019528 <_changeGain>:
#include "core/pif_log.h"
#include "sensor/pif_hmc5883.h"


static void _changeGain(PifImuSensor* p_imu_sensor, PifHmc5883Gain gain)
{
 8019528:	b480      	push	{r7}
 801952a:	b083      	sub	sp, #12
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
 8019530:	460b      	mov	r3, r1
 8019532:	70fb      	strb	r3, [r7, #3]
	switch (gain) {
 8019534:	78fb      	ldrb	r3, [r7, #3]
 8019536:	2b07      	cmp	r3, #7
 8019538:	d839      	bhi.n	80195ae <_changeGain+0x86>
 801953a:	a201      	add	r2, pc, #4	; (adr r2, 8019540 <_changeGain+0x18>)
 801953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019540:	08019561 	.word	0x08019561
 8019544:	0801956b 	.word	0x0801956b
 8019548:	08019575 	.word	0x08019575
 801954c:	0801957f 	.word	0x0801957f
 8019550:	08019589 	.word	0x08019589
 8019554:	08019593 	.word	0x08019593
 8019558:	0801959d 	.word	0x0801959d
 801955c:	080195a7 	.word	0x080195a7
	case HMC5883_GAIN_0_88GA:	p_imu_sensor->_mag_gain = 1370; break;
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f240 525a 	movw	r2, #1370	; 0x55a
 8019566:	825a      	strh	r2, [r3, #18]
 8019568:	e021      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_1_3GA:	p_imu_sensor->_mag_gain = 1090; break;
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	f240 4242 	movw	r2, #1090	; 0x442
 8019570:	825a      	strh	r2, [r3, #18]
 8019572:	e01c      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_1_9GA:	p_imu_sensor->_mag_gain = 820; break;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	f44f 724d 	mov.w	r2, #820	; 0x334
 801957a:	825a      	strh	r2, [r3, #18]
 801957c:	e017      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_2_5GA:	p_imu_sensor->_mag_gain = 660; break;
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	f44f 7225 	mov.w	r2, #660	; 0x294
 8019584:	825a      	strh	r2, [r3, #18]
 8019586:	e012      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_4GA:		p_imu_sensor->_mag_gain = 440; break;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801958e:	825a      	strh	r2, [r3, #18]
 8019590:	e00d      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_4_7GA:	p_imu_sensor->_mag_gain = 390; break;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8019598:	825a      	strh	r2, [r3, #18]
 801959a:	e008      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_5_6GA:	p_imu_sensor->_mag_gain = 330; break;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80195a2:	825a      	strh	r2, [r3, #18]
 80195a4:	e003      	b.n	80195ae <_changeGain+0x86>
	case HMC5883_GAIN_8_1GA:	p_imu_sensor->_mag_gain = 230; break;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	22e6      	movs	r2, #230	; 0xe6
 80195aa:	825a      	strh	r2, [r3, #18]
 80195ac:	bf00      	nop
	}
}
 80195ae:	bf00      	nop
 80195b0:	370c      	adds	r7, #12
 80195b2:	46bd      	mov	sp, r7
 80195b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b8:	4770      	bx	lr
 80195ba:	bf00      	nop

080195bc <pifHmc5883_Init>:

BOOL pifHmc5883_Init(PifHmc5883* p_owner, PifId id, PifI2cPort* p_i2c, PifImuSensor* p_imu_sensor)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b086      	sub	sp, #24
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	60f8      	str	r0, [r7, #12]
 80195c4:	607a      	str	r2, [r7, #4]
 80195c6:	603b      	str	r3, [r7, #0]
 80195c8:	460b      	mov	r3, r1
 80195ca:	817b      	strh	r3, [r7, #10]
#ifndef __PIF_NO_LOG__	
	const char ident[] = "HMC5883 Ident: ";
#endif	
	uint8_t data[4];

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d005      	beq.n	80195de <pifHmc5883_Init+0x22>
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d002      	beq.n	80195de <pifHmc5883_Init+0x22>
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d104      	bne.n	80195e8 <pifHmc5883_Init+0x2c>
		pif_error = E_INVALID_PARAM;
 80195de:	4b3a      	ldr	r3, [pc, #232]	; (80196c8 <pifHmc5883_Init+0x10c>)
 80195e0:	2201      	movs	r2, #1
 80195e2:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 80195e4:	2300      	movs	r3, #0
 80195e6:	e06b      	b.n	80196c0 <pifHmc5883_Init+0x104>
	}

	memset(p_owner, 0, sizeof(PifHmc5883));
 80195e8:	2218      	movs	r2, #24
 80195ea:	2100      	movs	r1, #0
 80195ec:	68f8      	ldr	r0, [r7, #12]
 80195ee:	f009 fdfb 	bl	80231e8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f7f8 fe32 	bl	801225c <pifI2cPort_AddDevice>
 80195f8:	4602      	mov	r2, r0
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	611a      	str	r2, [r3, #16]
    if (!p_owner->_p_i2c) return FALSE;
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	691b      	ldr	r3, [r3, #16]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d101      	bne.n	801960a <pifHmc5883_Init+0x4e>
 8019606:	2300      	movs	r3, #0
 8019608:	e05a      	b.n	80196c0 <pifHmc5883_Init+0x104>

    p_owner->_p_i2c->addr = HMC5883_I2C_ADDR;
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	691b      	ldr	r3, [r3, #16]
 801960e:	221e      	movs	r2, #30
 8019610:	701a      	strb	r2, [r3, #0]

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	6918      	ldr	r0, [r3, #16]
 8019616:	f107 0214 	add.w	r2, r7, #20
 801961a:	2303      	movs	r3, #3
 801961c:	210a      	movs	r1, #10
 801961e:	f7f8 ff15 	bl	801244c <pifI2cDevice_ReadRegBytes>
 8019622:	4603      	mov	r3, r0
 8019624:	2b00      	cmp	r3, #0
 8019626:	d044      	beq.n	80196b2 <pifHmc5883_Init+0xf6>
	if (data[0] != 'H') {
 8019628:	7d3b      	ldrb	r3, [r7, #20]
 801962a:	2b48      	cmp	r3, #72	; 0x48
 801962c:	d003      	beq.n	8019636 <pifHmc5883_Init+0x7a>
		pif_error = E_INVALID_ID;
 801962e:	4b26      	ldr	r3, [pc, #152]	; (80196c8 <pifHmc5883_Init+0x10c>)
 8019630:	2211      	movs	r2, #17
 8019632:	701a      	strb	r2, [r3, #0]
		goto fail;
 8019634:	e040      	b.n	80196b8 <pifHmc5883_Init+0xfc>
    else {
    	pifLog_Printf(LT_INFO, "%s%c%c%c", ident, data[0], data[1], data[2]);
    }
#endif

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	6918      	ldr	r0, [r3, #16]
 801963a:	f107 0314 	add.w	r3, r7, #20
 801963e:	f240 5203 	movw	r2, #1283	; 0x503
 8019642:	2101      	movs	r1, #1
 8019644:	f7f8 ff17 	bl	8012476 <pifI2cDevice_ReadRegBit8>
 8019648:	4603      	mov	r3, r0
 801964a:	2b00      	cmp	r3, #0
 801964c:	d033      	beq.n	80196b6 <pifHmc5883_Init+0xfa>
    _changeGain(p_imu_sensor, (PifHmc5883Gain)data);
 801964e:	f107 0314 	add.w	r3, r7, #20
 8019652:	b2db      	uxtb	r3, r3
 8019654:	4619      	mov	r1, r3
 8019656:	6838      	ldr	r0, [r7, #0]
 8019658:	f7ff ff66 	bl	8019528 <_changeGain>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801965c:	897b      	ldrh	r3, [r7, #10]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d106      	bne.n	8019670 <pifHmc5883_Init+0xb4>
 8019662:	4b1a      	ldr	r3, [pc, #104]	; (80196cc <pifHmc5883_Init+0x110>)
 8019664:	881b      	ldrh	r3, [r3, #0]
 8019666:	1c5a      	adds	r2, r3, #1
 8019668:	b291      	uxth	r1, r2
 801966a:	4a18      	ldr	r2, [pc, #96]	; (80196cc <pifHmc5883_Init+0x110>)
 801966c:	8011      	strh	r1, [r2, #0]
 801966e:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	897a      	ldrh	r2, [r7, #10]
 8019674:	819a      	strh	r2, [r3, #12]
	p_owner->scale[AXIS_X] = 1.0f;
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801967c:	601a      	str	r2, [r3, #0]
	p_owner->scale[AXIS_Y] = 1.0f;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019684:	605a      	str	r2, [r3, #4]
	p_owner->scale[AXIS_Z] = 1.0f;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801968c:	609a      	str	r2, [r3, #8]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	683a      	ldr	r2, [r7, #0]
 8019692:	615a      	str	r2, [r3, #20]

	p_imu_sensor->_measure |= IMU_MEASURE_MAGNETO;
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	f043 0304 	orr.w	r3, r3, #4
 801969c:	b2da      	uxtb	r2, r3
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__mag_info.read = (PifImuSensorRead)pifHmc5883_ReadMag;
 80196a2:	683b      	ldr	r3, [r7, #0]
 80196a4:	4a0a      	ldr	r2, [pc, #40]	; (80196d0 <pifHmc5883_Init+0x114>)
 80196a6:	631a      	str	r2, [r3, #48]	; 0x30
	p_imu_sensor->__mag_info.p_issuer = p_owner;
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	68fa      	ldr	r2, [r7, #12]
 80196ac:	635a      	str	r2, [r3, #52]	; 0x34
    return TRUE;
 80196ae:	2301      	movs	r3, #1
 80196b0:	e006      	b.n	80196c0 <pifHmc5883_Init+0x104>
    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_IDENT_A, data, 3)) goto fail;
 80196b2:	bf00      	nop
 80196b4:	e000      	b.n	80196b8 <pifHmc5883_Init+0xfc>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, data)) goto fail;
 80196b6:	bf00      	nop

fail:
	pifHmc5883_Clear(p_owner);
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f000 f80b 	bl	80196d4 <pifHmc5883_Clear>
	return FALSE;
 80196be:	2300      	movs	r3, #0
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3718      	adds	r7, #24
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}
 80196c8:	20001d48 	.word	0x20001d48
 80196cc:	20000128 	.word	0x20000128
 80196d0:	08019743 	.word	0x08019743

080196d4 <pifHmc5883_Clear>:

void pifHmc5883_Clear(PifHmc5883* p_owner)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b082      	sub	sp, #8
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	691b      	ldr	r3, [r3, #16]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d00b      	beq.n	80196fc <pifHmc5883_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	691b      	ldr	r3, [r3, #16]
 80196e8:	685a      	ldr	r2, [r3, #4]
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	691b      	ldr	r3, [r3, #16]
 80196ee:	4619      	mov	r1, r3
 80196f0:	4610      	mov	r0, r2
 80196f2:	f7f8 fdd7 	bl	80122a4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	2200      	movs	r2, #0
 80196fa:	611a      	str	r2, [r3, #16]
	}
}
 80196fc:	bf00      	nop
 80196fe:	3708      	adds	r7, #8
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}

08019704 <pifHmc5883_SetGain>:

BOOL pifHmc5883_SetGain(PifHmc5883* p_owner, PifHmc5883Gain gain)
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b082      	sub	sp, #8
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	460b      	mov	r3, r1
 801970e:	70fb      	strb	r3, [r7, #3]
    if (!pifI2cDevice_WriteRegBit8(p_owner->_p_i2c, HMC5883_REG_CONFIG_B, HMC5883_CONFIG_B_GAIN, gain)) return FALSE;
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	6918      	ldr	r0, [r3, #16]
 8019714:	78fb      	ldrb	r3, [r7, #3]
 8019716:	f240 5203 	movw	r2, #1283	; 0x503
 801971a:	2101      	movs	r1, #1
 801971c:	f7f8 ff7e 	bl	801261c <pifI2cDevice_WriteRegBit8>
 8019720:	4603      	mov	r3, r0
 8019722:	2b00      	cmp	r3, #0
 8019724:	d101      	bne.n	801972a <pifHmc5883_SetGain+0x26>
 8019726:	2300      	movs	r3, #0
 8019728:	e007      	b.n	801973a <pifHmc5883_SetGain+0x36>
	_changeGain(p_owner->__p_imu_sensor, gain);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	695b      	ldr	r3, [r3, #20]
 801972e:	78fa      	ldrb	r2, [r7, #3]
 8019730:	4611      	mov	r1, r2
 8019732:	4618      	mov	r0, r3
 8019734:	f7ff fef8 	bl	8019528 <_changeGain>
    return TRUE;
 8019738:	2301      	movs	r3, #1
}
 801973a:	4618      	mov	r0, r3
 801973c:	3708      	adds	r7, #8
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}

08019742 <pifHmc5883_ReadMag>:

BOOL pifHmc5883_ReadMag(PifHmc5883* p_owner, int16_t* p_mag)
{
 8019742:	b580      	push	{r7, lr}
 8019744:	b084      	sub	sp, #16
 8019746:	af00      	add	r7, sp, #0
 8019748:	6078      	str	r0, [r7, #4]
 801974a:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, HMC5883_REG_STATUS, data)) return FALSE;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	691b      	ldr	r3, [r3, #16]
 8019750:	f107 0208 	add.w	r2, r7, #8
 8019754:	2109      	movs	r1, #9
 8019756:	4618      	mov	r0, r3
 8019758:	f7f8 fe40 	bl	80123dc <pifI2cDevice_ReadRegByte>
 801975c:	4603      	mov	r3, r0
 801975e:	2b00      	cmp	r3, #0
 8019760:	d101      	bne.n	8019766 <pifHmc5883_ReadMag+0x24>
 8019762:	2300      	movs	r3, #0
 8019764:	e061      	b.n	801982a <pifHmc5883_ReadMag+0xe8>
	if (!(data[0] & 1)) return FALSE;
 8019766:	7a3b      	ldrb	r3, [r7, #8]
 8019768:	f003 0301 	and.w	r3, r3, #1
 801976c:	2b00      	cmp	r3, #0
 801976e:	d101      	bne.n	8019774 <pifHmc5883_ReadMag+0x32>
 8019770:	2300      	movs	r3, #0
 8019772:	e05a      	b.n	801982a <pifHmc5883_ReadMag+0xe8>

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, HMC5883_REG_OUT_X_M, data, 6)) return FALSE;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	6918      	ldr	r0, [r3, #16]
 8019778:	f107 0208 	add.w	r2, r7, #8
 801977c:	2306      	movs	r3, #6
 801977e:	2103      	movs	r1, #3
 8019780:	f7f8 fe64 	bl	801244c <pifI2cDevice_ReadRegBytes>
 8019784:	4603      	mov	r3, r0
 8019786:	2b00      	cmp	r3, #0
 8019788:	d101      	bne.n	801978e <pifHmc5883_ReadMag+0x4c>
 801978a:	2300      	movs	r3, #0
 801978c:	e04d      	b.n	801982a <pifHmc5883_ReadMag+0xe8>

	p_mag[AXIS_X] = (int16_t)((data[0] << 8) + data[1]) * p_owner->scale[AXIS_X];
 801978e:	7a3b      	ldrb	r3, [r7, #8]
 8019790:	b29b      	uxth	r3, r3
 8019792:	021b      	lsls	r3, r3, #8
 8019794:	b29a      	uxth	r2, r3
 8019796:	7a7b      	ldrb	r3, [r7, #9]
 8019798:	b29b      	uxth	r3, r3
 801979a:	4413      	add	r3, r2
 801979c:	b29b      	uxth	r3, r3
 801979e:	b21b      	sxth	r3, r3
 80197a0:	ee07 3a90 	vmov	s15, r3
 80197a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	edd3 7a00 	vldr	s15, [r3]
 80197ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197b6:	ee17 3a90 	vmov	r3, s15
 80197ba:	b21a      	sxth	r2, r3
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Z] = (int16_t)((data[2] << 8) + data[3]) * p_owner->scale[AXIS_Z];
 80197c0:	7abb      	ldrb	r3, [r7, #10]
 80197c2:	b29b      	uxth	r3, r3
 80197c4:	021b      	lsls	r3, r3, #8
 80197c6:	b29a      	uxth	r2, r3
 80197c8:	7afb      	ldrb	r3, [r7, #11]
 80197ca:	b29b      	uxth	r3, r3
 80197cc:	4413      	add	r3, r2
 80197ce:	b29b      	uxth	r3, r3
 80197d0:	b21b      	sxth	r3, r3
 80197d2:	ee07 3a90 	vmov	s15, r3
 80197d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80197e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	3304      	adds	r3, #4
 80197e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197ec:	ee17 2a90 	vmov	r2, s15
 80197f0:	b212      	sxth	r2, r2
 80197f2:	801a      	strh	r2, [r3, #0]
	p_mag[AXIS_Y] = (int16_t)((data[4] << 8) + data[5]) * p_owner->scale[AXIS_Y];
 80197f4:	7b3b      	ldrb	r3, [r7, #12]
 80197f6:	b29b      	uxth	r3, r3
 80197f8:	021b      	lsls	r3, r3, #8
 80197fa:	b29a      	uxth	r2, r3
 80197fc:	7b7b      	ldrb	r3, [r7, #13]
 80197fe:	b29b      	uxth	r3, r3
 8019800:	4413      	add	r3, r2
 8019802:	b29b      	uxth	r3, r3
 8019804:	b21b      	sxth	r3, r3
 8019806:	ee07 3a90 	vmov	s15, r3
 801980a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	edd3 7a01 	vldr	s15, [r3, #4]
 8019814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019818:	683b      	ldr	r3, [r7, #0]
 801981a:	3302      	adds	r3, #2
 801981c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019820:	ee17 2a90 	vmov	r2, s15
 8019824:	b212      	sxth	r2, r2
 8019826:	801a      	strh	r2, [r3, #0]
	return TRUE;
 8019828:	2301      	movs	r3, #1
}
 801982a:	4618      	mov	r0, r3
 801982c:	3710      	adds	r7, #16
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}

08019832 <_alignBoard2>:

#include <math.h>


static void _alignBoard2(PifImuSensor* p_owner, int16_t *vec)
{
 8019832:	b580      	push	{r7, lr}
 8019834:	b084      	sub	sp, #16
 8019836:	af00      	add	r7, sp, #0
 8019838:	6078      	str	r0, [r7, #4]
 801983a:	6039      	str	r1, [r7, #0]
    int16_t x = vec[AXIS_X];
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	881b      	ldrh	r3, [r3, #0]
 8019840:	81fb      	strh	r3, [r7, #14]
    int16_t y = vec[AXIS_Y];
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	885b      	ldrh	r3, [r3, #2]
 8019846:	81bb      	strh	r3, [r7, #12]
    int16_t z = vec[AXIS_Z];
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	889b      	ldrh	r3, [r3, #4]
 801984c:	817b      	strh	r3, [r7, #10]

    vec[AXIS_X] = lrintf(p_owner->__board_rotation[0][0] * x + p_owner->__board_rotation[1][0] * y + p_owner->__board_rotation[2][0] * z);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8019854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019858:	ee07 3a90 	vmov	s15, r3
 801985c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 801986a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801986e:	ee07 3a90 	vmov	s15, r3
 8019872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801987a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8019884:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019888:	ee07 3a90 	vmov	s15, r3
 801988c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019898:	eeb0 0a67 	vmov.f32	s0, s15
 801989c:	f009 ffc8 	bl	8023830 <lrintf>
 80198a0:	4603      	mov	r3, r0
 80198a2:	b21a      	sxth	r2, r3
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Y] = lrintf(p_owner->__board_rotation[0][1] * x + p_owner->__board_rotation[1][1] * y + p_owner->__board_rotation[2][1] * z);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80198ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80198b2:	ee07 3a90 	vmov	s15, r3
 80198b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80198c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80198c8:	ee07 3a90 	vmov	s15, r3
 80198cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 80198de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80198e2:	ee07 3a90 	vmov	s15, r3
 80198e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80198ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198f2:	eeb0 0a67 	vmov.f32	s0, s15
 80198f6:	f009 ff9b 	bl	8023830 <lrintf>
 80198fa:	4602      	mov	r2, r0
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	3302      	adds	r3, #2
 8019900:	b212      	sxth	r2, r2
 8019902:	801a      	strh	r2, [r3, #0]
    vec[AXIS_Z] = lrintf(p_owner->__board_rotation[0][2] * x + p_owner->__board_rotation[1][2] * y + p_owner->__board_rotation[2][2] * z);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 801990a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801990e:	ee07 3a90 	vmov	s15, r3
 8019912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019916:	ee27 7a27 	vmul.f32	s14, s14, s15
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8019920:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019924:	ee07 3a90 	vmov	s15, r3
 8019928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801992c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 801993a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801993e:	ee07 3a90 	vmov	s15, r3
 8019942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801994a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801994e:	eeb0 0a67 	vmov.f32	s0, s15
 8019952:	f009 ff6d 	bl	8023830 <lrintf>
 8019956:	4602      	mov	r2, r0
 8019958:	683b      	ldr	r3, [r7, #0]
 801995a:	3304      	adds	r3, #4
 801995c:	b212      	sxth	r2, r2
 801995e:	801a      	strh	r2, [r3, #0]
}
 8019960:	bf00      	nop
 8019962:	3710      	adds	r7, #16
 8019964:	46bd      	mov	sp, r7
 8019966:	bd80      	pop	{r7, pc}

08019968 <_alignSensors2>:

static void _alignSensors2(PifImuSensor* p_owner, int16_t* src, int16_t* dest, uint8_t rotation)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b084      	sub	sp, #16
 801996c:	af00      	add	r7, sp, #0
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	60b9      	str	r1, [r7, #8]
 8019972:	607a      	str	r2, [r7, #4]
 8019974:	70fb      	strb	r3, [r7, #3]
    switch (rotation) {
 8019976:	78fb      	ldrb	r3, [r7, #3]
 8019978:	3b02      	subs	r3, #2
 801997a:	2b06      	cmp	r3, #6
 801997c:	f200 80c8 	bhi.w	8019b10 <_alignSensors2+0x1a8>
 8019980:	a201      	add	r2, pc, #4	; (adr r2, 8019988 <_alignSensors2+0x20>)
 8019982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019986:	bf00      	nop
 8019988:	080199a5 	.word	0x080199a5
 801998c:	080199d1 	.word	0x080199d1
 8019990:	08019a07 	.word	0x08019a07
 8019994:	08019a35 	.word	0x08019a35
 8019998:	08019a6b 	.word	0x08019a6b
 801999c:	08019a99 	.word	0x08019a99
 80199a0:	08019ad1 	.word	0x08019ad1
        case IMUS_ALIGN_CW90_DEG:
            dest[AXIS_X] = src[AXIS_Y];
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 80199ae:	68bb      	ldr	r3, [r7, #8]
 80199b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199b4:	b29b      	uxth	r3, r3
 80199b6:	425b      	negs	r3, r3
 80199b8:	b29a      	uxth	r2, r3
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	3302      	adds	r3, #2
 80199be:	b212      	sxth	r2, r2
 80199c0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	3304      	adds	r3, #4
 80199c6:	68ba      	ldr	r2, [r7, #8]
 80199c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80199cc:	801a      	strh	r2, [r3, #0]
            break;
 80199ce:	e0b1      	b.n	8019b34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG:
            dest[AXIS_X] = -src[AXIS_X];
 80199d0:	68bb      	ldr	r3, [r7, #8]
 80199d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199d6:	b29b      	uxth	r3, r3
 80199d8:	425b      	negs	r3, r3
 80199da:	b29b      	uxth	r3, r3
 80199dc:	b21a      	sxth	r2, r3
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 80199e2:	68bb      	ldr	r3, [r7, #8]
 80199e4:	3302      	adds	r3, #2
 80199e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80199ea:	b29b      	uxth	r3, r3
 80199ec:	425b      	negs	r3, r3
 80199ee:	b29a      	uxth	r2, r3
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	3302      	adds	r3, #2
 80199f4:	b212      	sxth	r2, r2
 80199f6:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	3304      	adds	r3, #4
 80199fc:	68ba      	ldr	r2, [r7, #8]
 80199fe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019a02:	801a      	strh	r2, [r3, #0]
            break;
 8019a04:	e096      	b.n	8019b34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG:
            dest[AXIS_X] = -src[AXIS_Y];
 8019a06:	68bb      	ldr	r3, [r7, #8]
 8019a08:	3302      	adds	r3, #2
 8019a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a0e:	b29b      	uxth	r3, r3
 8019a10:	425b      	negs	r3, r3
 8019a12:	b29b      	uxth	r3, r3
 8019a14:	b21a      	sxth	r2, r3
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	3302      	adds	r3, #2
 8019a1e:	68ba      	ldr	r2, [r7, #8]
 8019a20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019a24:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	3304      	adds	r3, #4
 8019a2a:	68ba      	ldr	r2, [r7, #8]
 8019a2c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019a30:	801a      	strh	r2, [r3, #0]
            break;
 8019a32:	e07f      	b.n	8019b34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW0_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_X];
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a3a:	b29b      	uxth	r3, r3
 8019a3c:	425b      	negs	r3, r3
 8019a3e:	b29b      	uxth	r3, r3
 8019a40:	b21a      	sxth	r2, r3
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	3302      	adds	r3, #2
 8019a4a:	68ba      	ldr	r2, [r7, #8]
 8019a4c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019a50:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019a52:	68bb      	ldr	r3, [r7, #8]
 8019a54:	3304      	adds	r3, #4
 8019a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a5a:	b29b      	uxth	r3, r3
 8019a5c:	425b      	negs	r3, r3
 8019a5e:	b29a      	uxth	r2, r3
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	3304      	adds	r3, #4
 8019a64:	b212      	sxth	r2, r2
 8019a66:	801a      	strh	r2, [r3, #0]
            break;
 8019a68:	e064      	b.n	8019b34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW90_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_Y];
 8019a6a:	68bb      	ldr	r3, [r7, #8]
 8019a6c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_X];
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	3302      	adds	r3, #2
 8019a78:	68ba      	ldr	r2, [r7, #8]
 8019a7a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019a7e:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	3304      	adds	r3, #4
 8019a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a88:	b29b      	uxth	r3, r3
 8019a8a:	425b      	negs	r3, r3
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	3304      	adds	r3, #4
 8019a92:	b212      	sxth	r2, r2
 8019a94:	801a      	strh	r2, [r3, #0]
            break;
 8019a96:	e04d      	b.n	8019b34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW180_DEG_FLIP:
            dest[AXIS_X] = src[AXIS_X];
 8019a98:	68bb      	ldr	r3, [r7, #8]
 8019a9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_Y];
 8019aa2:	68bb      	ldr	r3, [r7, #8]
 8019aa4:	3302      	adds	r3, #2
 8019aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	425b      	negs	r3, r3
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	3302      	adds	r3, #2
 8019ab4:	b212      	sxth	r2, r2
 8019ab6:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019ab8:	68bb      	ldr	r3, [r7, #8]
 8019aba:	3304      	adds	r3, #4
 8019abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	425b      	negs	r3, r3
 8019ac4:	b29a      	uxth	r2, r3
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	3304      	adds	r3, #4
 8019aca:	b212      	sxth	r2, r2
 8019acc:	801a      	strh	r2, [r3, #0]
            break;
 8019ace:	e031      	b.n	8019b34 <_alignSensors2+0x1cc>
        case IMUS_ALIGN_CW270_DEG_FLIP:
            dest[AXIS_X] = -src[AXIS_Y];
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	3302      	adds	r3, #2
 8019ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ad8:	b29b      	uxth	r3, r3
 8019ada:	425b      	negs	r3, r3
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	b21a      	sxth	r2, r3
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = -src[AXIS_X];
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019aea:	b29b      	uxth	r3, r3
 8019aec:	425b      	negs	r3, r3
 8019aee:	b29a      	uxth	r2, r3
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	3302      	adds	r3, #2
 8019af4:	b212      	sxth	r2, r2
 8019af6:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = -src[AXIS_Z];
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	3304      	adds	r3, #4
 8019afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b00:	b29b      	uxth	r3, r3
 8019b02:	425b      	negs	r3, r3
 8019b04:	b29a      	uxth	r2, r3
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	3304      	adds	r3, #4
 8019b0a:	b212      	sxth	r2, r2
 8019b0c:	801a      	strh	r2, [r3, #0]
            break;
 8019b0e:	e011      	b.n	8019b34 <_alignSensors2+0x1cc>
        default:	// IMUS_ALIGN_CW0_DEG:
            dest[AXIS_X] = src[AXIS_X];
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Y] = src[AXIS_Y];
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	3302      	adds	r3, #2
 8019b1e:	68ba      	ldr	r2, [r7, #8]
 8019b20:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8019b24:	801a      	strh	r2, [r3, #0]
            dest[AXIS_Z] = src[AXIS_Z];
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	3304      	adds	r3, #4
 8019b2a:	68ba      	ldr	r2, [r7, #8]
 8019b2c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8019b30:	801a      	strh	r2, [r3, #0]
            break;
 8019b32:	bf00      	nop
    }

    if (p_owner->__board_alignment)
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d003      	beq.n	8019b46 <_alignSensors2+0x1de>
        _alignBoard2(p_owner, dest);
 8019b3e:	6879      	ldr	r1, [r7, #4]
 8019b40:	68f8      	ldr	r0, [r7, #12]
 8019b42:	f7ff fe76 	bl	8019832 <_alignBoard2>
}
 8019b46:	bf00      	nop
 8019b48:	3710      	adds	r7, #16
 8019b4a:	46bd      	mov	sp, r7
 8019b4c:	bd80      	pop	{r7, pc}
 8019b4e:	bf00      	nop

08019b50 <pifImuSensor_Init>:
    if (p_owner->__board_alignment)
        _alignBoard4(p_owner, dest);
}

void pifImuSensor_Init(PifImuSensor* p_owner)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
	memset(p_owner, 0, sizeof(PifImuSensor));
 8019b58:	2278      	movs	r2, #120	; 0x78
 8019b5a:	2100      	movs	r1, #0
 8019b5c:	6878      	ldr	r0, [r7, #4]
 8019b5e:	f009 fb43 	bl	80231e8 <memset>
}
 8019b62:	bf00      	nop
 8019b64:	3708      	adds	r7, #8
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bd80      	pop	{r7, pc}
	...

08019b6c <pifImuSensor_InitBoardAlignment>:

void pifImuSensor_InitBoardAlignment(PifImuSensor* p_owner, int16_t board_align_roll, int16_t board_align_pitch, int16_t board_align_yaw)
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b092      	sub	sp, #72	; 0x48
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	60f8      	str	r0, [r7, #12]
 8019b74:	4608      	mov	r0, r1
 8019b76:	4611      	mov	r1, r2
 8019b78:	461a      	mov	r2, r3
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	817b      	strh	r3, [r7, #10]
 8019b7e:	460b      	mov	r3, r1
 8019b80:	813b      	strh	r3, [r7, #8]
 8019b82:	4613      	mov	r3, r2
 8019b84:	80fb      	strh	r3, [r7, #6]
    float roll, pitch, yaw;
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, coszcosy, sinzcosx, coszsinx, sinzsinx;

    // standard alignment, nothing to calculate
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019b86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d108      	bne.n	8019ba0 <pifImuSensor_InitBoardAlignment+0x34>
 8019b8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d104      	bne.n	8019ba0 <pifImuSensor_InitBoardAlignment+0x34>
 8019b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	f000 80da 	beq.w	8019d54 <pifImuSensor_InitBoardAlignment+0x1e8>

    p_owner->__board_alignment = TRUE;
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	2201      	movs	r2, #1
 8019ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    // deg2rad
    roll = board_align_roll * PIF_PI / 180.0f;
 8019ba8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019bac:	ee07 3a90 	vmov	s15, r3
 8019bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bb4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8019d5c <pifImuSensor_InitBoardAlignment+0x1f0>
 8019bb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019bbc:	eddf 6a68 	vldr	s13, [pc, #416]	; 8019d60 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019bc4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    pitch = board_align_pitch * PIF_PI / 180.0f;
 8019bc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019bcc:	ee07 3a90 	vmov	s15, r3
 8019bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bd4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8019d5c <pifImuSensor_InitBoardAlignment+0x1f0>
 8019bd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019bdc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8019d60 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019be4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    yaw = board_align_yaw * PIF_PI / 180.0f;
 8019be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bec:	ee07 3a90 	vmov	s15, r3
 8019bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019bf4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8019d5c <pifImuSensor_InitBoardAlignment+0x1f0>
 8019bf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019bfc:	eddf 6a58 	vldr	s13, [pc, #352]	; 8019d60 <pifImuSensor_InitBoardAlignment+0x1f4>
 8019c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019c04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    cosx = cosf(roll);
 8019c08:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019c0c:	f009 fdcc 	bl	80237a8 <cosf>
 8019c10:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    sinx = sinf(roll);
 8019c14:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8019c18:	f009 fe4a 	bl	80238b0 <sinf>
 8019c1c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    cosy = cosf(pitch);
 8019c20:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019c24:	f009 fdc0 	bl	80237a8 <cosf>
 8019c28:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    siny = sinf(pitch);
 8019c2c:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8019c30:	f009 fe3e 	bl	80238b0 <sinf>
 8019c34:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    cosz = cosf(yaw);
 8019c38:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019c3c:	f009 fdb4 	bl	80237a8 <cosf>
 8019c40:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    sinz = sinf(yaw);
 8019c44:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8019c48:	f009 fe32 	bl	80238b0 <sinf>
 8019c4c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    coszcosx = cosz * cosx;
 8019c50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019c54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019c5c:	edc7 7a08 	vstr	s15, [r7, #32]
    coszcosy = cosz * cosy;
 8019c60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019c64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019c6c:	edc7 7a07 	vstr	s15, [r7, #28]
    sinzcosx = sinz * cosx;
 8019c70:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8019c74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019c7c:	edc7 7a06 	vstr	s15, [r7, #24]
    coszsinx = sinx * cosz;
 8019c80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8019c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019c8c:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzsinx = sinx * sinz;
 8019c90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8019c94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019c9c:	edc7 7a04 	vstr	s15, [r7, #16]

    // define rotation matrix
    p_owner->__board_rotation[0][0] = coszcosy;
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	69fa      	ldr	r2, [r7, #28]
 8019ca4:	655a      	str	r2, [r3, #84]	; 0x54
    p_owner->__board_rotation[0][1] = -cosy * sinz;
 8019ca6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019caa:	eeb1 7a67 	vneg.f32	s14, s15
 8019cae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8019cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    p_owner->__board_rotation[0][2] = siny;
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019cc0:	65da      	str	r2, [r3, #92]	; 0x5c

    p_owner->__board_rotation[1][0] = sinzcosx + (coszsinx * siny);
 8019cc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8019cc6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8019cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    p_owner->__board_rotation[1][1] = coszcosx - (sinzsinx * siny);
 8019cdc:	ed97 7a04 	vldr	s14, [r7, #16]
 8019ce0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8019cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    p_owner->__board_rotation[1][2] = -sinx * cosy;
 8019cf6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019cfa:	eeb1 7a67 	vneg.f32	s14, s15
 8019cfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8019d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

    p_owner->__board_rotation[2][0] = (sinzsinx) - (coszcosx * siny);
 8019d0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8019d10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d18:	ed97 7a04 	vldr	s14, [r7, #16]
 8019d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    p_owner->__board_rotation[2][1] = (coszsinx) + (sinzcosx * siny);
 8019d26:	ed97 7a06 	vldr	s14, [r7, #24]
 8019d2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8019d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8019d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    p_owner->__board_rotation[2][2] = cosy * cosx;
 8019d40:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019d44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8019d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8019d52:	e000      	b.n	8019d56 <pifImuSensor_InitBoardAlignment+0x1ea>
    if (!board_align_roll && !board_align_pitch && !board_align_yaw) return;
 8019d54:	bf00      	nop
}
 8019d56:	3748      	adds	r7, #72	; 0x48
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	40490fdb 	.word	0x40490fdb
 8019d60:	43340000 	.word	0x43340000

08019d64 <pifImuSensor_SetGyroAlign>:

void pifImuSensor_SetGyroAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019d64:	b480      	push	{r7}
 8019d66:	b083      	sub	sp, #12
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
 8019d6c:	460b      	mov	r3, r1
 8019d6e:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019d70:	78fb      	ldrb	r3, [r7, #3]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d002      	beq.n	8019d7c <pifImuSensor_SetGyroAlign+0x18>
        p_owner->__gyro_info.align = align;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	78fa      	ldrb	r2, [r7, #3]
 8019d7a:	751a      	strb	r2, [r3, #20]
}
 8019d7c:	bf00      	nop
 8019d7e:	370c      	adds	r7, #12
 8019d80:	46bd      	mov	sp, r7
 8019d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d86:	4770      	bx	lr

08019d88 <pifImuSensor_ReadGyro2>:

BOOL pifImuSensor_ReadGyro2(PifImuSensor* p_owner, int16_t* p_gyro)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b084      	sub	sp, #16
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
 8019d90:	6039      	str	r1, [r7, #0]
	int16_t gyro[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_GYROSCOPE) {
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	f003 0301 	and.w	r3, r3, #1
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d016      	beq.n	8019dcc <pifImuSensor_ReadGyro2+0x44>
		if (!(*p_owner->__gyro_info.read)(p_owner->__gyro_info.p_issuer, gyro)) return FALSE;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	699b      	ldr	r3, [r3, #24]
 8019da2:	687a      	ldr	r2, [r7, #4]
 8019da4:	69d2      	ldr	r2, [r2, #28]
 8019da6:	f107 0108 	add.w	r1, r7, #8
 8019daa:	4610      	mov	r0, r2
 8019dac:	4798      	blx	r3
 8019dae:	4603      	mov	r3, r0
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d101      	bne.n	8019db8 <pifImuSensor_ReadGyro2+0x30>
 8019db4:	2300      	movs	r3, #0
 8019db6:	e00a      	b.n	8019dce <pifImuSensor_ReadGyro2+0x46>

		_alignSensors2(p_owner, gyro, p_gyro, p_owner->__gyro_info.align);
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	7d1b      	ldrb	r3, [r3, #20]
 8019dbc:	f107 0108 	add.w	r1, r7, #8
 8019dc0:	683a      	ldr	r2, [r7, #0]
 8019dc2:	6878      	ldr	r0, [r7, #4]
 8019dc4:	f7ff fdd0 	bl	8019968 <_alignSensors2>
		return TRUE;
 8019dc8:	2301      	movs	r3, #1
 8019dca:	e000      	b.n	8019dce <pifImuSensor_ReadGyro2+0x46>
	}
	return FALSE;
 8019dcc:	2300      	movs	r3, #0
}
 8019dce:	4618      	mov	r0, r3
 8019dd0:	3710      	adds	r7, #16
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}

08019dd6 <pifImuSensor_SetAccelAlign>:
	}
	return TRUE;
}

void pifImuSensor_SetAccelAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019dd6:	b480      	push	{r7}
 8019dd8:	b083      	sub	sp, #12
 8019dda:	af00      	add	r7, sp, #0
 8019ddc:	6078      	str	r0, [r7, #4]
 8019dde:	460b      	mov	r3, r1
 8019de0:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019de2:	78fb      	ldrb	r3, [r7, #3]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d003      	beq.n	8019df0 <pifImuSensor_SetAccelAlign+0x1a>
        p_owner->__accel_info.align = align;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	78fa      	ldrb	r2, [r7, #3]
 8019dec:	f883 2020 	strb.w	r2, [r3, #32]
}
 8019df0:	bf00      	nop
 8019df2:	370c      	adds	r7, #12
 8019df4:	46bd      	mov	sp, r7
 8019df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dfa:	4770      	bx	lr

08019dfc <pifImuSensor_ReadAccel2>:

BOOL pifImuSensor_ReadAccel2(PifImuSensor* p_owner, int16_t* p_accel)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b084      	sub	sp, #16
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
 8019e04:	6039      	str	r1, [r7, #0]
	int16_t accel[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_ACCELERO) {
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	781b      	ldrb	r3, [r3, #0]
 8019e0a:	f003 0302 	and.w	r3, r3, #2
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d017      	beq.n	8019e42 <pifImuSensor_ReadAccel2+0x46>
		if (!(*p_owner->__accel_info.read)(p_owner->__accel_info.p_issuer, accel)) return FALSE;
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e16:	687a      	ldr	r2, [r7, #4]
 8019e18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8019e1a:	f107 0108 	add.w	r1, r7, #8
 8019e1e:	4610      	mov	r0, r2
 8019e20:	4798      	blx	r3
 8019e22:	4603      	mov	r3, r0
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d101      	bne.n	8019e2c <pifImuSensor_ReadAccel2+0x30>
 8019e28:	2300      	movs	r3, #0
 8019e2a:	e00b      	b.n	8019e44 <pifImuSensor_ReadAccel2+0x48>

		_alignSensors2(p_owner, accel, p_accel, p_owner->__accel_info.align);
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019e32:	f107 0108 	add.w	r1, r7, #8
 8019e36:	683a      	ldr	r2, [r7, #0]
 8019e38:	6878      	ldr	r0, [r7, #4]
 8019e3a:	f7ff fd95 	bl	8019968 <_alignSensors2>
		return TRUE;
 8019e3e:	2301      	movs	r3, #1
 8019e40:	e000      	b.n	8019e44 <pifImuSensor_ReadAccel2+0x48>
	}
	return FALSE;
 8019e42:	2300      	movs	r3, #0
}
 8019e44:	4618      	mov	r0, r3
 8019e46:	3710      	adds	r7, #16
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	bd80      	pop	{r7, pc}

08019e4c <pifImuSensor_SetMagAlign>:
	p_accel[AXIS_Z] = 9.80665f * accel[AXIS_Z] / p_owner->_accel_gain;
	return TRUE;
}

void pifImuSensor_SetMagAlign(PifImuSensor* p_owner, PifImuSensorAlign align)
{
 8019e4c:	b480      	push	{r7}
 8019e4e:	b083      	sub	sp, #12
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
 8019e54:	460b      	mov	r3, r1
 8019e56:	70fb      	strb	r3, [r7, #3]
    if (align > IMUS_ALIGN_DEFAULT)
 8019e58:	78fb      	ldrb	r3, [r7, #3]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d003      	beq.n	8019e66 <pifImuSensor_SetMagAlign+0x1a>
        p_owner->__mag_info.align = align;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	78fa      	ldrb	r2, [r7, #3]
 8019e62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8019e66:	bf00      	nop
 8019e68:	370c      	adds	r7, #12
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e70:	4770      	bx	lr

08019e72 <pifImuSensor_ReadMag2>:

BOOL pifImuSensor_ReadMag2(PifImuSensor* p_owner, int16_t* p_mag)
{
 8019e72:	b580      	push	{r7, lr}
 8019e74:	b084      	sub	sp, #16
 8019e76:	af00      	add	r7, sp, #0
 8019e78:	6078      	str	r0, [r7, #4]
 8019e7a:	6039      	str	r1, [r7, #0]
	int16_t mag[AXIS_COUNT];

	if (p_owner->_measure & IMU_MEASURE_MAGNETO) {
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	781b      	ldrb	r3, [r3, #0]
 8019e80:	f003 0304 	and.w	r3, r3, #4
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d017      	beq.n	8019eb8 <pifImuSensor_ReadMag2+0x46>
		if (!(*p_owner->__mag_info.read)(p_owner->__mag_info.p_issuer, mag)) return FALSE;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e8c:	687a      	ldr	r2, [r7, #4]
 8019e8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019e90:	f107 0108 	add.w	r1, r7, #8
 8019e94:	4610      	mov	r0, r2
 8019e96:	4798      	blx	r3
 8019e98:	4603      	mov	r3, r0
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d101      	bne.n	8019ea2 <pifImuSensor_ReadMag2+0x30>
 8019e9e:	2300      	movs	r3, #0
 8019ea0:	e00b      	b.n	8019eba <pifImuSensor_ReadMag2+0x48>

		_alignSensors2(p_owner, mag, p_mag, p_owner->__mag_info.align);
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019ea8:	f107 0108 	add.w	r1, r7, #8
 8019eac:	683a      	ldr	r2, [r7, #0]
 8019eae:	6878      	ldr	r0, [r7, #4]
 8019eb0:	f7ff fd5a 	bl	8019968 <_alignSensors2>
		return TRUE;
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	e000      	b.n	8019eba <pifImuSensor_ReadMag2+0x48>
	}
	return FALSE;
 8019eb8:	2300      	movs	r3, #0
}
 8019eba:	4618      	mov	r0, r3
 8019ebc:	3710      	adds	r7, #16
 8019ebe:	46bd      	mov	sp, r7
 8019ec0:	bd80      	pop	{r7, pc}
 8019ec2:	0000      	movs	r0, r0
 8019ec4:	0000      	movs	r0, r0
	...

08019ec8 <_changeFsSel>:

#include <math.h>


static BOOL _changeFsSel(PifImuSensor* p_imu_sensor, PifMpu60x0FsSel fs_sel)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b082      	sub	sp, #8
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
 8019ed0:	460b      	mov	r3, r1
 8019ed2:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d101      	bne.n	8019ede <_changeFsSel+0x16>
 8019eda:	2300      	movs	r3, #0
 8019edc:	e013      	b.n	8019f06 <_changeFsSel+0x3e>
	p_imu_sensor->_gyro_gain = 131.0 / (1 << fs_sel);
 8019ede:	78fb      	ldrb	r3, [r7, #3]
 8019ee0:	2201      	movs	r2, #1
 8019ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	f7e6 fad0 	bl	800048c <__aeabi_i2d>
 8019eec:	4602      	mov	r2, r0
 8019eee:	460b      	mov	r3, r1
 8019ef0:	a107      	add	r1, pc, #28	; (adr r1, 8019f10 <_changeFsSel+0x48>)
 8019ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ef6:	f7e6 fc5d 	bl	80007b4 <__aeabi_ddiv>
 8019efa:	4602      	mov	r2, r0
 8019efc:	460b      	mov	r3, r1
 8019efe:	6879      	ldr	r1, [r7, #4]
 8019f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
	return TRUE;
 8019f04:	2301      	movs	r3, #1
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	3708      	adds	r7, #8
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	bd80      	pop	{r7, pc}
 8019f0e:	bf00      	nop
 8019f10:	00000000 	.word	0x00000000
 8019f14:	40606000 	.word	0x40606000

08019f18 <_changeAfsSel>:

static BOOL _changeAfsSel(PifImuSensor* p_imu_sensor, PifMpu60x0AfsSel afs_sel)
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b083      	sub	sp, #12
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	460b      	mov	r3, r1
 8019f22:	70fb      	strb	r3, [r7, #3]
	if (!p_imu_sensor) return FALSE;
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d101      	bne.n	8019f2e <_changeAfsSel+0x16>
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	e008      	b.n	8019f40 <_changeAfsSel+0x28>
	p_imu_sensor->_accel_gain = 16384 >> afs_sel;
 8019f2e:	78fb      	ldrb	r3, [r7, #3]
 8019f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8019f34:	fa42 f303 	asr.w	r3, r2, r3
 8019f38:	b29a      	uxth	r2, r3
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	821a      	strh	r2, [r3, #16]
	return TRUE;
 8019f3e:	2301      	movs	r3, #1
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	370c      	adds	r7, #12
 8019f44:	46bd      	mov	sp, r7
 8019f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f4a:	4770      	bx	lr

08019f4c <pifMpu60x0_Init>:

BOOL pifMpu60x0_Init(PifMpu60x0* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr, PifImuSensor* p_imu_sensor)
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b086      	sub	sp, #24
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	60f8      	str	r0, [r7, #12]
 8019f54:	607a      	str	r2, [r7, #4]
 8019f56:	461a      	mov	r2, r3
 8019f58:	460b      	mov	r3, r1
 8019f5a:	817b      	strh	r3, [r7, #10]
 8019f5c:	4613      	mov	r3, r2
 8019f5e:	727b      	strb	r3, [r7, #9]
	const char ident[] = "MPU60X0 Ident: ";
#endif	
	uint8_t data;
	PifMpu60x0PwrMgmt1 pwr_mgmt_1;

	if (!p_owner || !p_i2c || !p_imu_sensor) {
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d005      	beq.n	8019f72 <pifMpu60x0_Init+0x26>
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d002      	beq.n	8019f72 <pifMpu60x0_Init+0x26>
 8019f6c:	6a3b      	ldr	r3, [r7, #32]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d104      	bne.n	8019f7c <pifMpu60x0_Init+0x30>
		pif_error = E_INVALID_PARAM;
 8019f72:	4b63      	ldr	r3, [pc, #396]	; (801a100 <pifMpu60x0_Init+0x1b4>)
 8019f74:	2201      	movs	r2, #1
 8019f76:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 8019f78:	2300      	movs	r3, #0
 8019f7a:	e0bd      	b.n	801a0f8 <pifMpu60x0_Init+0x1ac>
	}

	memset(p_owner, 0, sizeof(PifMpu60x0));
 8019f7c:	2210      	movs	r2, #16
 8019f7e:	2100      	movs	r1, #0
 8019f80:	68f8      	ldr	r0, [r7, #12]
 8019f82:	f009 f931 	bl	80231e8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 8019f86:	6878      	ldr	r0, [r7, #4]
 8019f88:	f7f8 f968 	bl	801225c <pifI2cPort_AddDevice>
 8019f8c:	4602      	mov	r2, r0
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	609a      	str	r2, [r3, #8]
    if (!p_owner->_p_i2c) return FALSE;
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	689b      	ldr	r3, [r3, #8]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d101      	bne.n	8019f9e <pifMpu60x0_Init+0x52>
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	e0ac      	b.n	801a0f8 <pifMpu60x0_Init+0x1ac>

    p_owner->_p_i2c->addr = addr;
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	689b      	ldr	r3, [r3, #8]
 8019fa2:	7a7a      	ldrb	r2, [r7, #9]
 8019fa4:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	689b      	ldr	r3, [r3, #8]
 8019faa:	f107 0217 	add.w	r2, r7, #23
 8019fae:	2175      	movs	r1, #117	; 0x75
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7f8 fa13 	bl	80123dc <pifI2cDevice_ReadRegByte>
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	f000 808e 	beq.w	801a0da <pifMpu60x0_Init+0x18e>
	if (data != addr) {
 8019fbe:	7dfb      	ldrb	r3, [r7, #23]
 8019fc0:	7a7a      	ldrb	r2, [r7, #9]
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d003      	beq.n	8019fce <pifMpu60x0_Init+0x82>
		pif_error = E_INVALID_ID;
 8019fc6:	4b4e      	ldr	r3, [pc, #312]	; (801a100 <pifMpu60x0_Init+0x1b4>)
 8019fc8:	2211      	movs	r2, #17
 8019fca:	701a      	strb	r2, [r3, #0]
		goto fail;
 8019fcc:	e090      	b.n	801a0f0 <pifMpu60x0_Init+0x1a4>
	else {
		pifLog_Printf(LT_INFO, "%s%c", ident, data >> 1);
	}
#endif

   	pwr_mgmt_1.byte = 0;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	753b      	strb	r3, [r7, #20]
	pwr_mgmt_1.bit.device_reset = TRUE;
 8019fd2:	7d3b      	ldrb	r3, [r7, #20]
 8019fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fd8:	753b      	strb	r3, [r7, #20]
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	689b      	ldr	r3, [r3, #8]
 8019fde:	7d3a      	ldrb	r2, [r7, #20]
 8019fe0:	216b      	movs	r1, #107	; 0x6b
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	f7f8 fb04 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d077      	beq.n	801a0de <pifMpu60x0_Init+0x192>
	pifTaskManager_YieldMs(100);
 8019fee:	2064      	movs	r0, #100	; 0x64
 8019ff0:	f7fa fe32 	bl	8014c58 <pifTaskManager_YieldMs>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	6898      	ldr	r0, [r3, #8]
 8019ff8:	f107 0317 	add.w	r3, r7, #23
 8019ffc:	f240 3202 	movw	r2, #770	; 0x302
 801a000:	211b      	movs	r1, #27
 801a002:	f7f8 fa38 	bl	8012476 <pifI2cDevice_ReadRegBit8>
 801a006:	4603      	mov	r3, r0
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d06a      	beq.n	801a0e2 <pifMpu60x0_Init+0x196>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801a00c:	7dfb      	ldrb	r3, [r7, #23]
 801a00e:	4619      	mov	r1, r3
 801a010:	6a38      	ldr	r0, [r7, #32]
 801a012:	f7ff ff59 	bl	8019ec8 <_changeFsSel>
 801a016:	4603      	mov	r3, r0
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d064      	beq.n	801a0e6 <pifMpu60x0_Init+0x19a>

    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	6898      	ldr	r0, [r3, #8]
 801a020:	f107 0317 	add.w	r3, r7, #23
 801a024:	f240 3202 	movw	r2, #770	; 0x302
 801a028:	211c      	movs	r1, #28
 801a02a:	f7f8 fa24 	bl	8012476 <pifI2cDevice_ReadRegBit8>
 801a02e:	4603      	mov	r3, r0
 801a030:	2b00      	cmp	r3, #0
 801a032:	d05a      	beq.n	801a0ea <pifMpu60x0_Init+0x19e>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801a034:	7dfb      	ldrb	r3, [r7, #23]
 801a036:	4619      	mov	r1, r3
 801a038:	6a38      	ldr	r0, [r7, #32]
 801a03a:	f7ff ff6d 	bl	8019f18 <_changeAfsSel>
 801a03e:	4603      	mov	r3, r0
 801a040:	2b00      	cmp	r3, #0
 801a042:	d054      	beq.n	801a0ee <pifMpu60x0_Init+0x1a2>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801a044:	897b      	ldrh	r3, [r7, #10]
 801a046:	2b00      	cmp	r3, #0
 801a048:	d106      	bne.n	801a058 <pifMpu60x0_Init+0x10c>
 801a04a:	4b2e      	ldr	r3, [pc, #184]	; (801a104 <pifMpu60x0_Init+0x1b8>)
 801a04c:	881b      	ldrh	r3, [r3, #0]
 801a04e:	1c5a      	adds	r2, r3, #1
 801a050:	b291      	uxth	r1, r2
 801a052:	4a2c      	ldr	r2, [pc, #176]	; (801a104 <pifMpu60x0_Init+0x1b8>)
 801a054:	8011      	strh	r1, [r2, #0]
 801a056:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	897a      	ldrh	r2, [r7, #10]
 801a05c:	809a      	strh	r2, [r3, #4]
	p_owner->temp_scale = 1;
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	2201      	movs	r2, #1
 801a062:	709a      	strb	r2, [r3, #2]
	p_owner->__p_imu_sensor = p_imu_sensor;
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	6a3a      	ldr	r2, [r7, #32]
 801a068:	60da      	str	r2, [r3, #12]

	p_imu_sensor->_measure |= IMU_MEASURE_GYROSCOPE | IMU_MEASURE_ACCELERO;
 801a06a:	6a3b      	ldr	r3, [r7, #32]
 801a06c:	781b      	ldrb	r3, [r3, #0]
 801a06e:	f043 0303 	orr.w	r3, r3, #3
 801a072:	b2da      	uxtb	r2, r3
 801a074:	6a3b      	ldr	r3, [r7, #32]
 801a076:	701a      	strb	r2, [r3, #0]

	p_imu_sensor->__gyro_info.align = IMUS_ALIGN_CW0_DEG;
 801a078:	6a3b      	ldr	r3, [r7, #32]
 801a07a:	2201      	movs	r2, #1
 801a07c:	751a      	strb	r2, [r3, #20]
	p_imu_sensor->__gyro_info.read = (PifImuSensorRead)pifMpu60x0_ReadGyro;
 801a07e:	6a3b      	ldr	r3, [r7, #32]
 801a080:	4a21      	ldr	r2, [pc, #132]	; (801a108 <pifMpu60x0_Init+0x1bc>)
 801a082:	619a      	str	r2, [r3, #24]
	p_imu_sensor->__gyro_info.p_issuer = p_owner;
 801a084:	6a3b      	ldr	r3, [r7, #32]
 801a086:	68fa      	ldr	r2, [r7, #12]
 801a088:	61da      	str	r2, [r3, #28]

	p_imu_sensor->__accel_info.align = IMUS_ALIGN_CW0_DEG;
 801a08a:	6a3b      	ldr	r3, [r7, #32]
 801a08c:	2201      	movs	r2, #1
 801a08e:	f883 2020 	strb.w	r2, [r3, #32]
	p_imu_sensor->__accel_info.read = (PifImuSensorRead)pifMpu60x0_ReadAccel;
 801a092:	6a3b      	ldr	r3, [r7, #32]
 801a094:	4a1d      	ldr	r2, [pc, #116]	; (801a10c <pifMpu60x0_Init+0x1c0>)
 801a096:	625a      	str	r2, [r3, #36]	; 0x24
	p_imu_sensor->__accel_info.p_issuer = p_owner;
 801a098:	6a3b      	ldr	r3, [r7, #32]
 801a09a:	68fa      	ldr	r2, [r7, #12]
 801a09c:	629a      	str	r2, [r3, #40]	; 0x28

    // Reset calibrate values
    p_imu_sensor->__delta_gyro[AXIS_X] = 0;
 801a09e:	6a3b      	ldr	r3, [r7, #32]
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	871a      	strh	r2, [r3, #56]	; 0x38
    p_imu_sensor->__delta_gyro[AXIS_Y] = 0;
 801a0a4:	6a3b      	ldr	r3, [r7, #32]
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	875a      	strh	r2, [r3, #58]	; 0x3a
    p_imu_sensor->__delta_gyro[AXIS_Z] = 0;
 801a0aa:	6a3b      	ldr	r3, [r7, #32]
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	879a      	strh	r2, [r3, #60]	; 0x3c
    p_imu_sensor->__use_calibrate = FALSE;
 801a0b0:	6a3b      	ldr	r3, [r7, #32]
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

    // Reset threshold values
    p_imu_sensor->__threshold_gyro[AXIS_X] = 0;
 801a0b8:	6a3b      	ldr	r3, [r7, #32]
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    p_imu_sensor->__threshold_gyro[AXIS_Y] = 0;
 801a0be:	6a3b      	ldr	r3, [r7, #32]
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    p_imu_sensor->__threshold_gyro[AXIS_Z] = 0;
 801a0c6:	6a3b      	ldr	r3, [r7, #32]
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    p_imu_sensor->__actual_threshold = 0;
 801a0ce:	6a3b      	ldr	r3, [r7, #32]
 801a0d0:	f04f 0200 	mov.w	r2, #0
 801a0d4:	64da      	str	r2, [r3, #76]	; 0x4c
    return TRUE;
 801a0d6:	2301      	movs	r3, #1
 801a0d8:	e00e      	b.n	801a0f8 <pifMpu60x0_Init+0x1ac>
	if (!pifI2cDevice_ReadRegByte(p_owner->_p_i2c, MPU60X0_REG_WHO_AM_I, &data)) goto fail;
 801a0da:	bf00      	nop
 801a0dc:	e008      	b.n	801a0f0 <pifMpu60x0_Init+0x1a4>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_PWR_MGMT_1, pwr_mgmt_1.byte)) goto fail;
 801a0de:	bf00      	nop
 801a0e0:	e006      	b.n	801a0f0 <pifMpu60x0_Init+0x1a4>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, MPU60X0_GYRO_CONFIG_FS_SEL, &data)) goto fail;
 801a0e2:	bf00      	nop
 801a0e4:	e004      	b.n	801a0f0 <pifMpu60x0_Init+0x1a4>
    if (!_changeFsSel(p_imu_sensor, data)) goto fail;
 801a0e6:	bf00      	nop
 801a0e8:	e002      	b.n	801a0f0 <pifMpu60x0_Init+0x1a4>
    if (!pifI2cDevice_ReadRegBit8(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, MPU60X0_ACCEL_CONFIG_AFS_SEL, &data)) goto fail;
 801a0ea:	bf00      	nop
 801a0ec:	e000      	b.n	801a0f0 <pifMpu60x0_Init+0x1a4>
    if (!_changeAfsSel(p_imu_sensor, data)) goto fail;
 801a0ee:	bf00      	nop

fail:
	pifMpu60x0_Clear(p_owner);
 801a0f0:	68f8      	ldr	r0, [r7, #12]
 801a0f2:	f000 f80d 	bl	801a110 <pifMpu60x0_Clear>
	return FALSE;
 801a0f6:	2300      	movs	r3, #0
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	3718      	adds	r7, #24
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}
 801a100:	20001d48 	.word	0x20001d48
 801a104:	20000128 	.word	0x20000128
 801a108:	0801a1c1 	.word	0x0801a1c1
 801a10c:	0801a287 	.word	0x0801a287

0801a110 <pifMpu60x0_Clear>:

void pifMpu60x0_Clear(PifMpu60x0* p_owner)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
    if (p_owner->_p_i2c) {
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	689b      	ldr	r3, [r3, #8]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d00b      	beq.n	801a138 <pifMpu60x0_Clear+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	689b      	ldr	r3, [r3, #8]
 801a124:	685a      	ldr	r2, [r3, #4]
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	689b      	ldr	r3, [r3, #8]
 801a12a:	4619      	mov	r1, r3
 801a12c:	4610      	mov	r0, r2
 801a12e:	f7f8 f8b9 	bl	80122a4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	2200      	movs	r2, #0
 801a136:	609a      	str	r2, [r3, #8]
    }
}
 801a138:	bf00      	nop
 801a13a:	3708      	adds	r7, #8
 801a13c:	46bd      	mov	sp, r7
 801a13e:	bd80      	pop	{r7, pc}

0801a140 <pifMpu60x0_SetGyroConfig>:

BOOL pifMpu60x0_SetGyroConfig(PifMpu60x0* p_owner, PifMpu60x0GyroConfig gyro_config)
{
 801a140:	b580      	push	{r7, lr}
 801a142:	b082      	sub	sp, #8
 801a144:	af00      	add	r7, sp, #0
 801a146:	6078      	str	r0, [r7, #4]
 801a148:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_GYRO_CONFIG, gyro_config.byte)) return FALSE;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	689b      	ldr	r3, [r3, #8]
 801a14e:	783a      	ldrb	r2, [r7, #0]
 801a150:	211b      	movs	r1, #27
 801a152:	4618      	mov	r0, r3
 801a154:	f7f8 fa4c 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 801a158:	4603      	mov	r3, r0
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d101      	bne.n	801a162 <pifMpu60x0_SetGyroConfig+0x22>
 801a15e:	2300      	movs	r3, #0
 801a160:	e00a      	b.n	801a178 <pifMpu60x0_SetGyroConfig+0x38>
    _changeFsSel(p_owner->__p_imu_sensor, gyro_config.bit.fs_sel);
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	68da      	ldr	r2, [r3, #12]
 801a166:	783b      	ldrb	r3, [r7, #0]
 801a168:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801a16c:	b2db      	uxtb	r3, r3
 801a16e:	4619      	mov	r1, r3
 801a170:	4610      	mov	r0, r2
 801a172:	f7ff fea9 	bl	8019ec8 <_changeFsSel>
	return TRUE;
 801a176:	2301      	movs	r3, #1
}
 801a178:	4618      	mov	r0, r3
 801a17a:	3708      	adds	r7, #8
 801a17c:	46bd      	mov	sp, r7
 801a17e:	bd80      	pop	{r7, pc}

0801a180 <pifMpu60x0_SetAccelConfig>:
    _changeFsSel(p_owner->__p_imu_sensor, fs_sel);
	return TRUE;
}

BOOL pifMpu60x0_SetAccelConfig(PifMpu60x0* p_owner, PifMpu60x0AccelConfig accel_config)
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b082      	sub	sp, #8
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
 801a188:	7039      	strb	r1, [r7, #0]
    if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MPU60X0_REG_ACCEL_CONFIG, accel_config.byte)) return FALSE;
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	689b      	ldr	r3, [r3, #8]
 801a18e:	783a      	ldrb	r2, [r7, #0]
 801a190:	211c      	movs	r1, #28
 801a192:	4618      	mov	r0, r3
 801a194:	f7f8 fa2c 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 801a198:	4603      	mov	r3, r0
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d101      	bne.n	801a1a2 <pifMpu60x0_SetAccelConfig+0x22>
 801a19e:	2300      	movs	r3, #0
 801a1a0:	e00a      	b.n	801a1b8 <pifMpu60x0_SetAccelConfig+0x38>
    _changeAfsSel(p_owner->__p_imu_sensor, accel_config.bit.afs_sel);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	68da      	ldr	r2, [r3, #12]
 801a1a6:	783b      	ldrb	r3, [r7, #0]
 801a1a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801a1ac:	b2db      	uxtb	r3, r3
 801a1ae:	4619      	mov	r1, r3
 801a1b0:	4610      	mov	r0, r2
 801a1b2:	f7ff feb1 	bl	8019f18 <_changeAfsSel>
	return TRUE;
 801a1b6:	2301      	movs	r3, #1
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3708      	adds	r7, #8
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}

0801a1c0 <pifMpu60x0_ReadGyro>:
    _changeAfsSel(p_owner->__p_imu_sensor, afs_sel);
	return TRUE;
}

BOOL pifMpu60x0_ReadGyro(PifMpu60x0* p_owner, int16_t* p_gyro)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b084      	sub	sp, #16
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

	if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_GYRO_XOUT_H, data, 6)) return FALSE;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6898      	ldr	r0, [r3, #8]
 801a1ce:	f107 0208 	add.w	r2, r7, #8
 801a1d2:	2306      	movs	r3, #6
 801a1d4:	2143      	movs	r1, #67	; 0x43
 801a1d6:	f7f8 f939 	bl	801244c <pifI2cDevice_ReadRegBytes>
 801a1da:	4603      	mov	r3, r0
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d101      	bne.n	801a1e4 <pifMpu60x0_ReadGyro+0x24>
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	e04c      	b.n	801a27e <pifMpu60x0_ReadGyro+0xbe>

	p_gyro[AXIS_X] = (data[0] << 8) + data[1];
 801a1e4:	7a3b      	ldrb	r3, [r7, #8]
 801a1e6:	b29b      	uxth	r3, r3
 801a1e8:	021b      	lsls	r3, r3, #8
 801a1ea:	b29a      	uxth	r2, r3
 801a1ec:	7a7b      	ldrb	r3, [r7, #9]
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	4413      	add	r3, r2
 801a1f2:	b29b      	uxth	r3, r3
 801a1f4:	b21a      	sxth	r2, r3
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Y] = (data[2] << 8) + data[3];
 801a1fa:	7abb      	ldrb	r3, [r7, #10]
 801a1fc:	b29b      	uxth	r3, r3
 801a1fe:	021b      	lsls	r3, r3, #8
 801a200:	b29a      	uxth	r2, r3
 801a202:	7afb      	ldrb	r3, [r7, #11]
 801a204:	b29b      	uxth	r3, r3
 801a206:	4413      	add	r3, r2
 801a208:	b29a      	uxth	r2, r3
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	3302      	adds	r3, #2
 801a20e:	b212      	sxth	r2, r2
 801a210:	801a      	strh	r2, [r3, #0]
	p_gyro[AXIS_Z] = (data[4] << 8) + data[5];
 801a212:	7b3b      	ldrb	r3, [r7, #12]
 801a214:	b29b      	uxth	r3, r3
 801a216:	021b      	lsls	r3, r3, #8
 801a218:	b29a      	uxth	r2, r3
 801a21a:	7b7b      	ldrb	r3, [r7, #13]
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	4413      	add	r3, r2
 801a220:	b29a      	uxth	r2, r3
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	3304      	adds	r3, #4
 801a226:	b212      	sxth	r2, r2
 801a228:	801a      	strh	r2, [r3, #0]
	if (p_owner->gyro_scale > 0) {
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	781b      	ldrb	r3, [r3, #0]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d024      	beq.n	801a27c <pifMpu60x0_ReadGyro+0xbc>
		p_gyro[AXIS_X] /= p_owner->gyro_scale;
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a238:	461a      	mov	r2, r3
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a242:	b21a      	sxth	r2, r3
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Y] /= p_owner->gyro_scale;
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	3302      	adds	r3, #2
 801a24c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a250:	461a      	mov	r2, r3
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	781b      	ldrb	r3, [r3, #0]
 801a256:	fb92 f2f3 	sdiv	r2, r2, r3
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	3302      	adds	r3, #2
 801a25e:	b212      	sxth	r2, r2
 801a260:	801a      	strh	r2, [r3, #0]
		p_gyro[AXIS_Z] /= p_owner->gyro_scale;
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	3304      	adds	r3, #4
 801a266:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a26a:	461a      	mov	r2, r3
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	781b      	ldrb	r3, [r3, #0]
 801a270:	fb92 f2f3 	sdiv	r2, r2, r3
 801a274:	683b      	ldr	r3, [r7, #0]
 801a276:	3304      	adds	r3, #4
 801a278:	b212      	sxth	r2, r2
 801a27a:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a27c:	2301      	movs	r3, #1
}
 801a27e:	4618      	mov	r0, r3
 801a280:	3710      	adds	r7, #16
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}

0801a286 <pifMpu60x0_ReadAccel>:

BOOL pifMpu60x0_ReadAccel(PifMpu60x0* p_owner, int16_t* p_accel)
{
 801a286:	b580      	push	{r7, lr}
 801a288:	b084      	sub	sp, #16
 801a28a:	af00      	add	r7, sp, #0
 801a28c:	6078      	str	r0, [r7, #4]
 801a28e:	6039      	str	r1, [r7, #0]
	uint8_t data[6];

    if (!pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MPU60X0_REG_ACCEL_XOUT_H, data, 6)) return FALSE;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6898      	ldr	r0, [r3, #8]
 801a294:	f107 0208 	add.w	r2, r7, #8
 801a298:	2306      	movs	r3, #6
 801a29a:	213b      	movs	r1, #59	; 0x3b
 801a29c:	f7f8 f8d6 	bl	801244c <pifI2cDevice_ReadRegBytes>
 801a2a0:	4603      	mov	r3, r0
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d101      	bne.n	801a2aa <pifMpu60x0_ReadAccel+0x24>
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	e04c      	b.n	801a344 <pifMpu60x0_ReadAccel+0xbe>

	p_accel[AXIS_X] = (data[0] << 8) + data[1];
 801a2aa:	7a3b      	ldrb	r3, [r7, #8]
 801a2ac:	b29b      	uxth	r3, r3
 801a2ae:	021b      	lsls	r3, r3, #8
 801a2b0:	b29a      	uxth	r2, r3
 801a2b2:	7a7b      	ldrb	r3, [r7, #9]
 801a2b4:	b29b      	uxth	r3, r3
 801a2b6:	4413      	add	r3, r2
 801a2b8:	b29b      	uxth	r3, r3
 801a2ba:	b21a      	sxth	r2, r3
 801a2bc:	683b      	ldr	r3, [r7, #0]
 801a2be:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Y] = (data[2] << 8) + data[3];
 801a2c0:	7abb      	ldrb	r3, [r7, #10]
 801a2c2:	b29b      	uxth	r3, r3
 801a2c4:	021b      	lsls	r3, r3, #8
 801a2c6:	b29a      	uxth	r2, r3
 801a2c8:	7afb      	ldrb	r3, [r7, #11]
 801a2ca:	b29b      	uxth	r3, r3
 801a2cc:	4413      	add	r3, r2
 801a2ce:	b29a      	uxth	r2, r3
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	3302      	adds	r3, #2
 801a2d4:	b212      	sxth	r2, r2
 801a2d6:	801a      	strh	r2, [r3, #0]
	p_accel[AXIS_Z] = (data[4] << 8) + data[5];
 801a2d8:	7b3b      	ldrb	r3, [r7, #12]
 801a2da:	b29b      	uxth	r3, r3
 801a2dc:	021b      	lsls	r3, r3, #8
 801a2de:	b29a      	uxth	r2, r3
 801a2e0:	7b7b      	ldrb	r3, [r7, #13]
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	4413      	add	r3, r2
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	683b      	ldr	r3, [r7, #0]
 801a2ea:	3304      	adds	r3, #4
 801a2ec:	b212      	sxth	r2, r2
 801a2ee:	801a      	strh	r2, [r3, #0]
	if (p_owner->accel_scale > 0) {
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	785b      	ldrb	r3, [r3, #1]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d024      	beq.n	801a342 <pifMpu60x0_ReadAccel+0xbc>
		p_accel[AXIS_X] /= p_owner->accel_scale;
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a2fe:	461a      	mov	r2, r3
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	785b      	ldrb	r3, [r3, #1]
 801a304:	fb92 f3f3 	sdiv	r3, r2, r3
 801a308:	b21a      	sxth	r2, r3
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Y] /= p_owner->accel_scale;
 801a30e:	683b      	ldr	r3, [r7, #0]
 801a310:	3302      	adds	r3, #2
 801a312:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a316:	461a      	mov	r2, r3
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	785b      	ldrb	r3, [r3, #1]
 801a31c:	fb92 f2f3 	sdiv	r2, r2, r3
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	3302      	adds	r3, #2
 801a324:	b212      	sxth	r2, r2
 801a326:	801a      	strh	r2, [r3, #0]
		p_accel[AXIS_Z] /= p_owner->accel_scale;
 801a328:	683b      	ldr	r3, [r7, #0]
 801a32a:	3304      	adds	r3, #4
 801a32c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a330:	461a      	mov	r2, r3
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	785b      	ldrb	r3, [r3, #1]
 801a336:	fb92 f2f3 	sdiv	r2, r2, r3
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	3304      	adds	r3, #4
 801a33e:	b212      	sxth	r2, r2
 801a340:	801a      	strh	r2, [r3, #0]
	}
	return TRUE;
 801a342:	2301      	movs	r3, #1
}
 801a344:	4618      	mov	r0, r3
 801a346:	3710      	adds	r7, #16
 801a348:	46bd      	mov	sp, r7
 801a34a:	bd80      	pop	{r7, pc}

0801a34c <_checkPromCrc>:

#include <math.h>


static BOOL _checkPromCrc(PifMs5611* p_owner)
{
 801a34c:	b480      	push	{r7}
 801a34e:	b087      	sub	sp, #28
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
    int32_t i, j;
    uint32_t res = 0;
 801a354:	2300      	movs	r3, #0
 801a356:	60fb      	str	r3, [r7, #12]
    uint8_t zero = 1;
 801a358:	2301      	movs	r3, #1
 801a35a:	72fb      	strb	r3, [r7, #11]
    uint8_t crc = p_owner->_prom[7] & 0xF;
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	8adb      	ldrh	r3, [r3, #22]
 801a360:	b2db      	uxtb	r3, r3
 801a362:	f003 030f 	and.w	r3, r3, #15
 801a366:	72bb      	strb	r3, [r7, #10]
    p_owner->_prom[7] &= 0xFF00;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	8adb      	ldrh	r3, [r3, #22]
 801a36c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801a370:	b29a      	uxth	r2, r3
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	82da      	strh	r2, [r3, #22]

    for (i = 0; i < 8; i++) {
 801a376:	2300      	movs	r3, #0
 801a378:	617b      	str	r3, [r7, #20]
 801a37a:	e00b      	b.n	801a394 <_checkPromCrc+0x48>
        if (p_owner->_prom[i] != 0)
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	697a      	ldr	r2, [r7, #20]
 801a380:	3204      	adds	r2, #4
 801a382:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d001      	beq.n	801a38e <_checkPromCrc+0x42>
            zero = 0;
 801a38a:	2300      	movs	r3, #0
 801a38c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++) {
 801a38e:	697b      	ldr	r3, [r7, #20]
 801a390:	3301      	adds	r3, #1
 801a392:	617b      	str	r3, [r7, #20]
 801a394:	697b      	ldr	r3, [r7, #20]
 801a396:	2b07      	cmp	r3, #7
 801a398:	ddf0      	ble.n	801a37c <_checkPromCrc+0x30>
    }
    if (zero)
 801a39a:	7afb      	ldrb	r3, [r7, #11]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d001      	beq.n	801a3a4 <_checkPromCrc+0x58>
        return FALSE;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	e04b      	b.n	801a43c <_checkPromCrc+0xf0>

    for (i = 0; i < 16; i++) {
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	617b      	str	r3, [r7, #20]
 801a3a8:	e033      	b.n	801a412 <_checkPromCrc+0xc6>
        if (i & 1)
 801a3aa:	697b      	ldr	r3, [r7, #20]
 801a3ac:	f003 0301 	and.w	r3, r3, #1
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d00a      	beq.n	801a3ca <_checkPromCrc+0x7e>
            res ^= ((p_owner->_prom[i >> 1]) & 0x00FF);
 801a3b4:	697b      	ldr	r3, [r7, #20]
 801a3b6:	105a      	asrs	r2, r3, #1
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	3204      	adds	r2, #4
 801a3bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a3c0:	b2db      	uxtb	r3, r3
 801a3c2:	68fa      	ldr	r2, [r7, #12]
 801a3c4:	4053      	eors	r3, r2
 801a3c6:	60fb      	str	r3, [r7, #12]
 801a3c8:	e00b      	b.n	801a3e2 <_checkPromCrc+0x96>
        else
            res ^= (p_owner->_prom[i >> 1] >> 8);
 801a3ca:	697b      	ldr	r3, [r7, #20]
 801a3cc:	105a      	asrs	r2, r3, #1
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	3204      	adds	r2, #4
 801a3d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801a3d6:	0a1b      	lsrs	r3, r3, #8
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	461a      	mov	r2, r3
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	4053      	eors	r3, r2
 801a3e0:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a3e2:	2308      	movs	r3, #8
 801a3e4:	613b      	str	r3, [r7, #16]
 801a3e6:	e00e      	b.n	801a406 <_checkPromCrc+0xba>
            if (res & 0x8000)
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d003      	beq.n	801a3fa <_checkPromCrc+0xae>
                res ^= 0x1800;
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	f483 53c0 	eor.w	r3, r3, #6144	; 0x1800
 801a3f8:	60fb      	str	r3, [r7, #12]
            res <<= 1;
 801a3fa:	68fb      	ldr	r3, [r7, #12]
 801a3fc:	005b      	lsls	r3, r3, #1
 801a3fe:	60fb      	str	r3, [r7, #12]
        for (j = 8; j > 0; j--) {
 801a400:	693b      	ldr	r3, [r7, #16]
 801a402:	3b01      	subs	r3, #1
 801a404:	613b      	str	r3, [r7, #16]
 801a406:	693b      	ldr	r3, [r7, #16]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	dced      	bgt.n	801a3e8 <_checkPromCrc+0x9c>
    for (i = 0; i < 16; i++) {
 801a40c:	697b      	ldr	r3, [r7, #20]
 801a40e:	3301      	adds	r3, #1
 801a410:	617b      	str	r3, [r7, #20]
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	2b0f      	cmp	r3, #15
 801a416:	ddc8      	ble.n	801a3aa <_checkPromCrc+0x5e>
        }
    }
    p_owner->_prom[7] |= crc;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	8ada      	ldrh	r2, [r3, #22]
 801a41c:	7abb      	ldrb	r3, [r7, #10]
 801a41e:	b29b      	uxth	r3, r3
 801a420:	4313      	orrs	r3, r2
 801a422:	b29a      	uxth	r2, r3
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	82da      	strh	r2, [r3, #22]
    if (crc == ((res >> 12) & 0xF))
 801a428:	7aba      	ldrb	r2, [r7, #10]
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	0b1b      	lsrs	r3, r3, #12
 801a42e:	f003 030f 	and.w	r3, r3, #15
 801a432:	429a      	cmp	r2, r3
 801a434:	d101      	bne.n	801a43a <_checkPromCrc+0xee>
        return TRUE;
 801a436:	2301      	movs	r3, #1
 801a438:	e000      	b.n	801a43c <_checkPromCrc+0xf0>

    return FALSE;
 801a43a:	2300      	movs	r3, #0
}
 801a43c:	4618      	mov	r0, r3
 801a43e:	371c      	adds	r7, #28
 801a440:	46bd      	mov	sp, r7
 801a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a446:	4770      	bx	lr

0801a448 <_calcurateBarometric>:

static void _calcurateBarometric(PifMs5611* p_owner, float* p_pressure, float* p_temperature)
{
 801a448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a44c:	b0d2      	sub	sp, #328	; 0x148
 801a44e:	af00      	add	r7, sp, #0
 801a450:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 801a454:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801a458:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
	int32_t dT;
	int64_t temp;
	int64_t off, sens;
	int64_t delt;

	dT = (int64_t)p_owner->__D2 - ((int64_t)p_owner->_prom[5] * 256);
 801a45c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a466:	8a5b      	ldrh	r3, [r3, #18]
 801a468:	021b      	lsls	r3, r3, #8
 801a46a:	1ad3      	subs	r3, r2, r3
 801a46c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	temp = 2000 + ((dT * (int64_t)p_owner->_prom[6]) >> 23);
 801a470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a474:	17da      	asrs	r2, r3, #31
 801a476:	469a      	mov	sl, r3
 801a478:	4693      	mov	fp, r2
 801a47a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a47e:	8a9b      	ldrh	r3, [r3, #20]
 801a480:	b29b      	uxth	r3, r3
 801a482:	2200      	movs	r2, #0
 801a484:	4698      	mov	r8, r3
 801a486:	4691      	mov	r9, r2
 801a488:	fb08 f20b 	mul.w	r2, r8, fp
 801a48c:	fb0a f309 	mul.w	r3, sl, r9
 801a490:	4413      	add	r3, r2
 801a492:	fbaa 4508 	umull	r4, r5, sl, r8
 801a496:	442b      	add	r3, r5
 801a498:	461d      	mov	r5, r3
 801a49a:	f04f 0200 	mov.w	r2, #0
 801a49e:	f04f 0300 	mov.w	r3, #0
 801a4a2:	0de2      	lsrs	r2, r4, #23
 801a4a4:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 801a4a8:	15eb      	asrs	r3, r5, #23
 801a4aa:	f512 61fa 	adds.w	r1, r2, #2000	; 0x7d0
 801a4ae:	6739      	str	r1, [r7, #112]	; 0x70
 801a4b0:	f143 0300 	adc.w	r3, r3, #0
 801a4b4:	677b      	str	r3, [r7, #116]	; 0x74
 801a4b6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 801a4ba:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	off = ((int64_t)p_owner->_prom[2] << 16) + (((int64_t)p_owner->_prom[4] * dT) >> 7);
 801a4be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a4c2:	899b      	ldrh	r3, [r3, #12]
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801a4cc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801a4d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801a4d4:	460b      	mov	r3, r1
 801a4d6:	0c1b      	lsrs	r3, r3, #16
 801a4d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801a4dc:	460b      	mov	r3, r1
 801a4de:	041b      	lsls	r3, r3, #16
 801a4e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a4e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a4e8:	8a1b      	ldrh	r3, [r3, #16]
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a4f2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801a4f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a4fa:	17da      	asrs	r2, r3, #31
 801a4fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801a504:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801a508:	462b      	mov	r3, r5
 801a50a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 801a50e:	4642      	mov	r2, r8
 801a510:	fb02 f203 	mul.w	r2, r2, r3
 801a514:	464b      	mov	r3, r9
 801a516:	4621      	mov	r1, r4
 801a518:	fb01 f303 	mul.w	r3, r1, r3
 801a51c:	4413      	add	r3, r2
 801a51e:	4622      	mov	r2, r4
 801a520:	4641      	mov	r1, r8
 801a522:	fba2 1201 	umull	r1, r2, r2, r1
 801a526:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801a52a:	460a      	mov	r2, r1
 801a52c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801a530:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801a534:	4413      	add	r3, r2
 801a536:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801a53a:	f04f 0200 	mov.w	r2, #0
 801a53e:	f04f 0300 	mov.w	r3, #0
 801a542:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801a546:	4621      	mov	r1, r4
 801a548:	09ca      	lsrs	r2, r1, #7
 801a54a:	4629      	mov	r1, r5
 801a54c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801a550:	4629      	mov	r1, r5
 801a552:	11cb      	asrs	r3, r1, #7
 801a554:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 801a558:	4621      	mov	r1, r4
 801a55a:	1889      	adds	r1, r1, r2
 801a55c:	66b9      	str	r1, [r7, #104]	; 0x68
 801a55e:	4629      	mov	r1, r5
 801a560:	eb43 0101 	adc.w	r1, r3, r1
 801a564:	66f9      	str	r1, [r7, #108]	; 0x6c
 801a566:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801a56a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	sens = ((int64_t)p_owner->_prom[1] << 15) + (((int64_t)p_owner->_prom[3] * dT) >> 8);
 801a56e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a572:	895b      	ldrh	r3, [r3, #10]
 801a574:	b29b      	uxth	r3, r3
 801a576:	2200      	movs	r2, #0
 801a578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a57c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801a580:	f04f 0000 	mov.w	r0, #0
 801a584:	f04f 0100 	mov.w	r1, #0
 801a588:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 801a58c:	462b      	mov	r3, r5
 801a58e:	03d9      	lsls	r1, r3, #15
 801a590:	4623      	mov	r3, r4
 801a592:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 801a596:	4623      	mov	r3, r4
 801a598:	03d8      	lsls	r0, r3, #15
 801a59a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a59e:	89db      	ldrh	r3, [r3, #14]
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a5a8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801a5ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a5b0:	17da      	asrs	r2, r3, #31
 801a5b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801a5b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801a5ba:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 801a5be:	464b      	mov	r3, r9
 801a5c0:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 801a5c4:	4652      	mov	r2, sl
 801a5c6:	fb02 f203 	mul.w	r2, r2, r3
 801a5ca:	465b      	mov	r3, fp
 801a5cc:	4644      	mov	r4, r8
 801a5ce:	fb04 f303 	mul.w	r3, r4, r3
 801a5d2:	4413      	add	r3, r2
 801a5d4:	4642      	mov	r2, r8
 801a5d6:	4654      	mov	r4, sl
 801a5d8:	fba2 4204 	umull	r4, r2, r2, r4
 801a5dc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 801a5e0:	4622      	mov	r2, r4
 801a5e2:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801a5e6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801a5ea:	4413      	add	r3, r2
 801a5ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801a5f0:	f04f 0200 	mov.w	r2, #0
 801a5f4:	f04f 0300 	mov.w	r3, #0
 801a5f8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 801a5fc:	4644      	mov	r4, r8
 801a5fe:	0a22      	lsrs	r2, r4, #8
 801a600:	464c      	mov	r4, r9
 801a602:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801a606:	464c      	mov	r4, r9
 801a608:	1223      	asrs	r3, r4, #8
 801a60a:	1884      	adds	r4, r0, r2
 801a60c:	663c      	str	r4, [r7, #96]	; 0x60
 801a60e:	eb41 0303 	adc.w	r3, r1, r3
 801a612:	667b      	str	r3, [r7, #100]	; 0x64
 801a614:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801a618:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

	if (temp < 2000) {
 801a61c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a620:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 801a624:	f173 0300 	sbcs.w	r3, r3, #0
 801a628:	f280 8150 	bge.w	801a8cc <_calcurateBarometric+0x484>
		temp -= ((int64_t)dT * dT) / 2147483648L;
 801a62c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a630:	17da      	asrs	r2, r3, #31
 801a632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801a636:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801a63a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801a63e:	17da      	asrs	r2, r3, #31
 801a640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801a644:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 801a648:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 801a64c:	462b      	mov	r3, r5
 801a64e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801a652:	4642      	mov	r2, r8
 801a654:	fb02 f203 	mul.w	r2, r2, r3
 801a658:	464b      	mov	r3, r9
 801a65a:	4621      	mov	r1, r4
 801a65c:	fb01 f303 	mul.w	r3, r1, r3
 801a660:	4413      	add	r3, r2
 801a662:	4622      	mov	r2, r4
 801a664:	4641      	mov	r1, r8
 801a666:	fba2 1201 	umull	r1, r2, r2, r1
 801a66a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801a66e:	460a      	mov	r2, r1
 801a670:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801a674:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801a678:	4413      	add	r3, r2
 801a67a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801a67e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 801a682:	2b00      	cmp	r3, #0
 801a684:	da08      	bge.n	801a698 <_calcurateBarometric+0x250>
 801a686:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a68a:	1851      	adds	r1, r2, r1
 801a68c:	65b9      	str	r1, [r7, #88]	; 0x58
 801a68e:	f143 0300 	adc.w	r3, r3, #0
 801a692:	65fb      	str	r3, [r7, #92]	; 0x5c
 801a694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801a698:	f04f 0000 	mov.w	r0, #0
 801a69c:	f04f 0100 	mov.w	r1, #0
 801a6a0:	0fd0      	lsrs	r0, r2, #31
 801a6a2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801a6a6:	17d9      	asrs	r1, r3, #31
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	4242      	negs	r2, r0
 801a6ac:	653a      	str	r2, [r7, #80]	; 0x50
 801a6ae:	eb63 0301 	sbc.w	r3, r3, r1
 801a6b2:	657b      	str	r3, [r7, #84]	; 0x54
 801a6b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801a6b8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a6bc:	1814      	adds	r4, r2, r0
 801a6be:	64bc      	str	r4, [r7, #72]	; 0x48
 801a6c0:	414b      	adcs	r3, r1
 801a6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a6c4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 801a6c8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

		delt = temp - 2000;
 801a6cc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a6d0:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 801a6d4:	6439      	str	r1, [r7, #64]	; 0x40
 801a6d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 801a6da:	647b      	str	r3, [r7, #68]	; 0x44
 801a6dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 801a6e0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		delt = 5 * delt * delt;
 801a6e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a6e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a6ec:	fb03 f102 	mul.w	r1, r3, r2
 801a6f0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a6f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a6f8:	fb02 f303 	mul.w	r3, r2, r3
 801a6fc:	18ca      	adds	r2, r1, r3
 801a6fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a702:	fba3 1303 	umull	r1, r3, r3, r3
 801a706:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a70a:	460b      	mov	r3, r1
 801a70c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801a710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801a714:	18d3      	adds	r3, r2, r3
 801a716:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801a71a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 801a71e:	4622      	mov	r2, r4
 801a720:	462b      	mov	r3, r5
 801a722:	f04f 0000 	mov.w	r0, #0
 801a726:	f04f 0100 	mov.w	r1, #0
 801a72a:	0099      	lsls	r1, r3, #2
 801a72c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801a730:	0090      	lsls	r0, r2, #2
 801a732:	4602      	mov	r2, r0
 801a734:	460b      	mov	r3, r1
 801a736:	4621      	mov	r1, r4
 801a738:	1851      	adds	r1, r2, r1
 801a73a:	63b9      	str	r1, [r7, #56]	; 0x38
 801a73c:	4629      	mov	r1, r5
 801a73e:	eb43 0101 	adc.w	r1, r3, r1
 801a742:	63f9      	str	r1, [r7, #60]	; 0x3c
 801a744:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801a748:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		off -= delt >> 1;
 801a74c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a750:	f04f 0000 	mov.w	r0, #0
 801a754:	f04f 0100 	mov.w	r1, #0
 801a758:	0850      	lsrs	r0, r2, #1
 801a75a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801a75e:	1059      	asrs	r1, r3, #1
 801a760:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a764:	1a14      	subs	r4, r2, r0
 801a766:	633c      	str	r4, [r7, #48]	; 0x30
 801a768:	eb63 0301 	sbc.w	r3, r3, r1
 801a76c:	637b      	str	r3, [r7, #52]	; 0x34
 801a76e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 801a772:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		sens -= delt >> 2;
 801a776:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a77a:	f04f 0000 	mov.w	r0, #0
 801a77e:	f04f 0100 	mov.w	r1, #0
 801a782:	0890      	lsrs	r0, r2, #2
 801a784:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 801a788:	1099      	asrs	r1, r3, #2
 801a78a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 801a78e:	1a14      	subs	r4, r2, r0
 801a790:	62bc      	str	r4, [r7, #40]	; 0x28
 801a792:	eb63 0301 	sbc.w	r3, r3, r1
 801a796:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a798:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801a79c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130

		if (temp < -1500) {
 801a7a0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a7a4:	497c      	ldr	r1, [pc, #496]	; (801a998 <_calcurateBarometric+0x550>)
 801a7a6:	428a      	cmp	r2, r1
 801a7a8:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801a7ac:	f280 808e 	bge.w	801a8cc <_calcurateBarometric+0x484>
			delt = temp + 1500;
 801a7b0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 801a7b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 801a7b8:	1851      	adds	r1, r2, r1
 801a7ba:	6239      	str	r1, [r7, #32]
 801a7bc:	f143 0300 	adc.w	r3, r3, #0
 801a7c0:	627b      	str	r3, [r7, #36]	; 0x24
 801a7c2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801a7c6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			delt = delt * delt;
 801a7ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a7ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7d2:	fb03 f102 	mul.w	r1, r3, r2
 801a7d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801a7da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7de:	fb02 f303 	mul.w	r3, r2, r3
 801a7e2:	18ca      	adds	r2, r1, r3
 801a7e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801a7e8:	fba3 1303 	umull	r1, r3, r3, r3
 801a7ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a7f0:	460b      	mov	r3, r1
 801a7f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801a7f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a7fa:	18d3      	adds	r3, r2, r3
 801a7fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801a800:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 801a804:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 801a808:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			off -= 7 * delt;
 801a80c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 801a810:	4614      	mov	r4, r2
 801a812:	461d      	mov	r5, r3
 801a814:	f04f 0000 	mov.w	r0, #0
 801a818:	f04f 0100 	mov.w	r1, #0
 801a81c:	00d9      	lsls	r1, r3, #3
 801a81e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801a822:	00d0      	lsls	r0, r2, #3
 801a824:	1a23      	subs	r3, r4, r0
 801a826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801a82a:	eb65 0301 	sbc.w	r3, r5, r1
 801a82e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a832:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801a836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801a83a:	4621      	mov	r1, r4
 801a83c:	1851      	adds	r1, r2, r1
 801a83e:	61b9      	str	r1, [r7, #24]
 801a840:	4629      	mov	r1, r5
 801a842:	eb43 0101 	adc.w	r1, r3, r1
 801a846:	61f9      	str	r1, [r7, #28]
 801a848:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801a84c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			sens -= (11 * delt) >> 1;
 801a850:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 801a854:	4602      	mov	r2, r0
 801a856:	460b      	mov	r3, r1
 801a858:	1894      	adds	r4, r2, r2
 801a85a:	613c      	str	r4, [r7, #16]
 801a85c:	415b      	adcs	r3, r3
 801a85e:	617b      	str	r3, [r7, #20]
 801a860:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a864:	1814      	adds	r4, r2, r0
 801a866:	60bc      	str	r4, [r7, #8]
 801a868:	414b      	adcs	r3, r1
 801a86a:	60fb      	str	r3, [r7, #12]
 801a86c:	f04f 0200 	mov.w	r2, #0
 801a870:	f04f 0300 	mov.w	r3, #0
 801a874:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 801a878:	464c      	mov	r4, r9
 801a87a:	00a3      	lsls	r3, r4, #2
 801a87c:	4644      	mov	r4, r8
 801a87e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801a882:	4644      	mov	r4, r8
 801a884:	00a2      	lsls	r2, r4, #2
 801a886:	4614      	mov	r4, r2
 801a888:	461d      	mov	r5, r3
 801a88a:	4623      	mov	r3, r4
 801a88c:	1a1b      	subs	r3, r3, r0
 801a88e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801a892:	462b      	mov	r3, r5
 801a894:	eb63 0301 	sbc.w	r3, r3, r1
 801a898:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801a89c:	f04f 0200 	mov.w	r2, #0
 801a8a0:	f04f 0300 	mov.w	r3, #0
 801a8a4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801a8a8:	4621      	mov	r1, r4
 801a8aa:	084a      	lsrs	r2, r1, #1
 801a8ac:	4629      	mov	r1, r5
 801a8ae:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801a8b2:	4629      	mov	r1, r5
 801a8b4:	104b      	asrs	r3, r1, #1
 801a8b6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 801a8ba:	1a84      	subs	r4, r0, r2
 801a8bc:	603c      	str	r4, [r7, #0]
 801a8be:	eb61 0303 	sbc.w	r3, r1, r3
 801a8c2:	607b      	str	r3, [r7, #4]
 801a8c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a8c8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
		}
	}

    *p_temperature = temp / 100.0;
 801a8cc:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 801a8d0:	f7e5 fe18 	bl	8000504 <__aeabi_l2d>
 801a8d4:	f04f 0200 	mov.w	r2, #0
 801a8d8:	4b30      	ldr	r3, [pc, #192]	; (801a99c <_calcurateBarometric+0x554>)
 801a8da:	f7e5 ff6b 	bl	80007b4 <__aeabi_ddiv>
 801a8de:	4602      	mov	r2, r0
 801a8e0:	460b      	mov	r3, r1
 801a8e2:	4610      	mov	r0, r2
 801a8e4:	4619      	mov	r1, r3
 801a8e6:	f7e6 f91d 	bl	8000b24 <__aeabi_d2f>
 801a8ea:	4602      	mov	r2, r0
 801a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801a8f0:	601a      	str	r2, [r3, #0]
	*p_pressure = (float)(((((int64_t)p_owner->__D1 * sens) >> 21) - off) >> 15);
 801a8f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801a8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8f8:	2200      	movs	r2, #0
 801a8fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801a8fe:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 801a902:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801a906:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801a90a:	462a      	mov	r2, r5
 801a90c:	fb02 f203 	mul.w	r2, r2, r3
 801a910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801a914:	4621      	mov	r1, r4
 801a916:	fb01 f303 	mul.w	r3, r1, r3
 801a91a:	4413      	add	r3, r2
 801a91c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a920:	4621      	mov	r1, r4
 801a922:	fba2 1201 	umull	r1, r2, r2, r1
 801a926:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801a92a:	460a      	mov	r2, r1
 801a92c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801a930:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a934:	4413      	add	r3, r2
 801a936:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a93a:	f04f 0200 	mov.w	r2, #0
 801a93e:	f04f 0300 	mov.w	r3, #0
 801a942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801a946:	4621      	mov	r1, r4
 801a948:	0d4a      	lsrs	r2, r1, #21
 801a94a:	4629      	mov	r1, r5
 801a94c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 801a950:	4629      	mov	r1, r5
 801a952:	154b      	asrs	r3, r1, #21
 801a954:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 801a958:	1a14      	subs	r4, r2, r0
 801a95a:	67bc      	str	r4, [r7, #120]	; 0x78
 801a95c:	eb63 0301 	sbc.w	r3, r3, r1
 801a960:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a962:	f04f 0200 	mov.w	r2, #0
 801a966:	f04f 0300 	mov.w	r3, #0
 801a96a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 801a96e:	4621      	mov	r1, r4
 801a970:	0bca      	lsrs	r2, r1, #15
 801a972:	4629      	mov	r1, r5
 801a974:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 801a978:	4629      	mov	r1, r5
 801a97a:	13cb      	asrs	r3, r1, #15
 801a97c:	4610      	mov	r0, r2
 801a97e:	4619      	mov	r1, r3
 801a980:	f7e6 f9f0 	bl	8000d64 <__aeabi_l2f>
 801a984:	4602      	mov	r2, r0
 801a986:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801a98a:	601a      	str	r2, [r3, #0]
}
 801a98c:	bf00      	nop
 801a98e:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801a992:	46bd      	mov	sp, r7
 801a994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a998:	fffffa24 	.word	0xfffffa24
 801a99c:	40590000 	.word	0x40590000

0801a9a0 <_doTask>:

static uint16_t _doTask(PifTask* p_task)
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b08a      	sub	sp, #40	; 0x28
 801a9a4:	af02      	add	r7, sp, #8
 801a9a6:	6078      	str	r0, [r7, #4]
	PifMs5611* p_owner = p_task->_p_client;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	68db      	ldr	r3, [r3, #12]
 801a9ac:	61bb      	str	r3, [r7, #24]
	uint8_t value[3];
	uint16_t delay = 1;
 801a9ae:	2301      	movs	r3, #1
 801a9b0:	83fb      	strh	r3, [r7, #30]
	uint16_t gap;
	float pressure;
	float temperature;

	switch (p_owner->__state) {
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	2b04      	cmp	r3, #4
 801a9bc:	f200 80a9 	bhi.w	801ab12 <_doTask+0x172>
 801a9c0:	a201      	add	r2, pc, #4	; (adr r2, 801a9c8 <_doTask+0x28>)
 801a9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a9c6:	bf00      	nop
 801a9c8:	0801a9dd 	.word	0x0801a9dd
 801a9cc:	0801aa1d 	.word	0x0801aa1d
 801a9d0:	0801aa4f 	.word	0x0801aa4f
 801a9d4:	0801aa85 	.word	0x0801aa85
 801a9d8:	0801aab7 	.word	0x0801aab7
	case MS5611_STATE_TEMPERATURE_START:
		p_owner->__start_time = pif_cumulative_timer1ms;
 801a9dc:	4b54      	ldr	r3, [pc, #336]	; (801ab30 <_doTask+0x190>)
 801a9de:	681a      	ldr	r2, [r3, #0]
 801a9e0:	69bb      	ldr	r3, [r7, #24]
 801a9e2:	62da      	str	r2, [r3, #44]	; 0x2c
		value[0] = MS5611_REG_CONV_D2 + p_owner->_over_sampling_rate;
 801a9e4:	69bb      	ldr	r3, [r7, #24]
 801a9e6:	8b1b      	ldrh	r3, [r3, #24]
 801a9e8:	b2db      	uxtb	r3, r3
 801a9ea:	3350      	adds	r3, #80	; 0x50
 801a9ec:	b2db      	uxtb	r3, r3
 801a9ee:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801a9f0:	69bb      	ldr	r3, [r7, #24]
 801a9f2:	6858      	ldr	r0, [r3, #4]
 801a9f4:	f107 0310 	add.w	r3, r7, #16
 801a9f8:	2201      	movs	r2, #1
 801a9fa:	9200      	str	r2, [sp, #0]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	2100      	movs	r1, #0
 801aa00:	f7f7 fd6e 	bl	80124e0 <pifI2cDevice_Write>
 801aa04:	4603      	mov	r3, r0
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f000 8085 	beq.w	801ab16 <_doTask+0x176>
			p_owner->__state = MS5611_STATE_TEMPERATURE_WAIT;
 801aa0c:	69bb      	ldr	r3, [r7, #24]
 801aa0e:	2202      	movs	r2, #2
 801aa10:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801aa14:	69bb      	ldr	r3, [r7, #24]
 801aa16:	7e9b      	ldrb	r3, [r3, #26]
 801aa18:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801aa1a:	e07c      	b.n	801ab16 <_doTask+0x176>

	case MS5611_STATE_TEMPERATURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801aa1c:	69bb      	ldr	r3, [r7, #24]
 801aa1e:	6858      	ldr	r0, [r3, #4]
 801aa20:	f107 0210 	add.w	r2, r7, #16
 801aa24:	2303      	movs	r3, #3
 801aa26:	2100      	movs	r1, #0
 801aa28:	f7f7 fd10 	bl	801244c <pifI2cDevice_ReadRegBytes>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d073      	beq.n	801ab1a <_doTask+0x17a>
			p_owner->__D2 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801aa32:	7c3b      	ldrb	r3, [r7, #16]
 801aa34:	041b      	lsls	r3, r3, #16
 801aa36:	7c7a      	ldrb	r2, [r7, #17]
 801aa38:	0212      	lsls	r2, r2, #8
 801aa3a:	4413      	add	r3, r2
 801aa3c:	7cba      	ldrb	r2, [r7, #18]
 801aa3e:	441a      	add	r2, r3
 801aa40:	69bb      	ldr	r3, [r7, #24]
 801aa42:	629a      	str	r2, [r3, #40]	; 0x28
			p_owner->__state = MS5611_STATE_PRESSURE_START;
 801aa44:	69bb      	ldr	r3, [r7, #24]
 801aa46:	2203      	movs	r2, #3
 801aa48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801aa4c:	e065      	b.n	801ab1a <_doTask+0x17a>

	case MS5611_STATE_PRESSURE_START:
		value[0] = MS5611_REG_CONV_D1 + p_owner->_over_sampling_rate;
 801aa4e:	69bb      	ldr	r3, [r7, #24]
 801aa50:	8b1b      	ldrh	r3, [r3, #24]
 801aa52:	b2db      	uxtb	r3, r3
 801aa54:	3340      	adds	r3, #64	; 0x40
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	743b      	strb	r3, [r7, #16]
		if (pifI2cDevice_Write(p_owner->_p_i2c, 0, 0, value, 1)) {
 801aa5a:	69bb      	ldr	r3, [r7, #24]
 801aa5c:	6858      	ldr	r0, [r3, #4]
 801aa5e:	f107 0310 	add.w	r3, r7, #16
 801aa62:	2201      	movs	r2, #1
 801aa64:	9200      	str	r2, [sp, #0]
 801aa66:	2200      	movs	r2, #0
 801aa68:	2100      	movs	r1, #0
 801aa6a:	f7f7 fd39 	bl	80124e0 <pifI2cDevice_Write>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d054      	beq.n	801ab1e <_doTask+0x17e>
			p_owner->__state = MS5611_STATE_PRESSURE_WAIT;
 801aa74:	69bb      	ldr	r3, [r7, #24]
 801aa76:	2204      	movs	r2, #4
 801aa78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			delay = p_owner->_conversion_time;
 801aa7c:	69bb      	ldr	r3, [r7, #24]
 801aa7e:	7e9b      	ldrb	r3, [r3, #26]
 801aa80:	83fb      	strh	r3, [r7, #30]
		}
		break;
 801aa82:	e04c      	b.n	801ab1e <_doTask+0x17e>

	case MS5611_STATE_PRESSURE_WAIT:
		if (pifI2cDevice_ReadRegBytes(p_owner->_p_i2c, MS5611_REG_ADC_READ, value, 3)) {
 801aa84:	69bb      	ldr	r3, [r7, #24]
 801aa86:	6858      	ldr	r0, [r3, #4]
 801aa88:	f107 0210 	add.w	r2, r7, #16
 801aa8c:	2303      	movs	r3, #3
 801aa8e:	2100      	movs	r1, #0
 801aa90:	f7f7 fcdc 	bl	801244c <pifI2cDevice_ReadRegBytes>
 801aa94:	4603      	mov	r3, r0
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d043      	beq.n	801ab22 <_doTask+0x182>
			p_owner->__D1 = ((uint32_t)value[0] << 16) + (value[1] << 8) + value[2];
 801aa9a:	7c3b      	ldrb	r3, [r7, #16]
 801aa9c:	041b      	lsls	r3, r3, #16
 801aa9e:	7c7a      	ldrb	r2, [r7, #17]
 801aaa0:	0212      	lsls	r2, r2, #8
 801aaa2:	4413      	add	r3, r2
 801aaa4:	7cba      	ldrb	r2, [r7, #18]
 801aaa6:	441a      	add	r2, r3
 801aaa8:	69bb      	ldr	r3, [r7, #24]
 801aaaa:	625a      	str	r2, [r3, #36]	; 0x24
			p_owner->__state = MS5611_STATE_CALCURATE;
 801aaac:	69bb      	ldr	r3, [r7, #24]
 801aaae:	2205      	movs	r2, #5
 801aab0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}
		break;
 801aab4:	e035      	b.n	801ab22 <_doTask+0x182>

	case MS5611_STATE_CALCURATE:
		_calcurateBarometric(p_owner, &pressure, &temperature);
 801aab6:	f107 0208 	add.w	r2, r7, #8
 801aaba:	f107 030c 	add.w	r3, r7, #12
 801aabe:	4619      	mov	r1, r3
 801aac0:	69b8      	ldr	r0, [r7, #24]
 801aac2:	f7ff fcc1 	bl	801a448 <_calcurateBarometric>
		if (p_owner->__evt_read) (*p_owner->__evt_read)(pressure, temperature);
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d00a      	beq.n	801aae4 <_doTask+0x144>
 801aace:	69bb      	ldr	r3, [r7, #24]
 801aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aad2:	edd7 7a03 	vldr	s15, [r7, #12]
 801aad6:	ed97 7a02 	vldr	s14, [r7, #8]
 801aada:	eef0 0a47 	vmov.f32	s1, s14
 801aade:	eeb0 0a67 	vmov.f32	s0, s15
 801aae2:	4798      	blx	r3
		gap = pif_cumulative_timer1ms - p_owner->__start_time;
 801aae4:	4b12      	ldr	r3, [pc, #72]	; (801ab30 <_doTask+0x190>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	b29a      	uxth	r2, r3
 801aaea:	69bb      	ldr	r3, [r7, #24]
 801aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	1ad3      	subs	r3, r2, r3
 801aaf2:	82fb      	strh	r3, [r7, #22]
		if (gap < p_owner->__read_period) {
 801aaf4:	69bb      	ldr	r3, [r7, #24]
 801aaf6:	8c1b      	ldrh	r3, [r3, #32]
 801aaf8:	8afa      	ldrh	r2, [r7, #22]
 801aafa:	429a      	cmp	r2, r3
 801aafc:	d204      	bcs.n	801ab08 <_doTask+0x168>
			delay = p_owner->__read_period - gap;
 801aafe:	69bb      	ldr	r3, [r7, #24]
 801ab00:	8c1a      	ldrh	r2, [r3, #32]
 801ab02:	8afb      	ldrh	r3, [r7, #22]
 801ab04:	1ad3      	subs	r3, r2, r3
 801ab06:	83fb      	strh	r3, [r7, #30]
		}
		p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801ab08:	69bb      	ldr	r3, [r7, #24]
 801ab0a:	2201      	movs	r2, #1
 801ab0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		break;
 801ab10:	e008      	b.n	801ab24 <_doTask+0x184>

	default:
		break;
 801ab12:	bf00      	nop
 801ab14:	e006      	b.n	801ab24 <_doTask+0x184>
		break;
 801ab16:	bf00      	nop
 801ab18:	e004      	b.n	801ab24 <_doTask+0x184>
		break;
 801ab1a:	bf00      	nop
 801ab1c:	e002      	b.n	801ab24 <_doTask+0x184>
		break;
 801ab1e:	bf00      	nop
 801ab20:	e000      	b.n	801ab24 <_doTask+0x184>
		break;
 801ab22:	bf00      	nop
	}
	return delay;
 801ab24:	8bfb      	ldrh	r3, [r7, #30]
}
 801ab26:	4618      	mov	r0, r3
 801ab28:	3720      	adds	r7, #32
 801ab2a:	46bd      	mov	sp, r7
 801ab2c:	bd80      	pop	{r7, pc}
 801ab2e:	bf00      	nop
 801ab30:	20001d60 	.word	0x20001d60

0801ab34 <pifMs5611_Init>:

BOOL pifMs5611_Init(PifMs5611* p_owner, PifId id, PifI2cPort* p_i2c, uint8_t addr)
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b086      	sub	sp, #24
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	60f8      	str	r0, [r7, #12]
 801ab3c:	607a      	str	r2, [r7, #4]
 801ab3e:	461a      	mov	r2, r3
 801ab40:	460b      	mov	r3, r1
 801ab42:	817b      	strh	r3, [r7, #10]
 801ab44:	4613      	mov	r3, r2
 801ab46:	727b      	strb	r3, [r7, #9]
	int i;

	if (!p_owner || !p_i2c) {
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d002      	beq.n	801ab54 <pifMs5611_Init+0x20>
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d104      	bne.n	801ab5e <pifMs5611_Init+0x2a>
		pif_error = E_INVALID_PARAM;
 801ab54:	4b33      	ldr	r3, [pc, #204]	; (801ac24 <pifMs5611_Init+0xf0>)
 801ab56:	2201      	movs	r2, #1
 801ab58:	701a      	strb	r2, [r3, #0]
    	return FALSE;
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	e05e      	b.n	801ac1c <pifMs5611_Init+0xe8>
	}

	memset(p_owner, 0, sizeof(PifMs5611));
 801ab5e:	2234      	movs	r2, #52	; 0x34
 801ab60:	2100      	movs	r1, #0
 801ab62:	68f8      	ldr	r0, [r7, #12]
 801ab64:	f008 fb40 	bl	80231e8 <memset>

    p_owner->_p_i2c = pifI2cPort_AddDevice(p_i2c);
 801ab68:	6878      	ldr	r0, [r7, #4]
 801ab6a:	f7f7 fb77 	bl	801225c <pifI2cPort_AddDevice>
 801ab6e:	4602      	mov	r2, r0
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	685b      	ldr	r3, [r3, #4]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d101      	bne.n	801ab80 <pifMs5611_Init+0x4c>
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	e04d      	b.n	801ac1c <pifMs5611_Init+0xe8>

    p_owner->_p_i2c->addr = addr;
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	685b      	ldr	r3, [r3, #4]
 801ab84:	7a7a      	ldrb	r2, [r7, #9]
 801ab86:	701a      	strb	r2, [r3, #0]

	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	685b      	ldr	r3, [r3, #4]
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	211e      	movs	r1, #30
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7f7 fd2d 	bl	80125f0 <pifI2cDevice_WriteRegByte>
 801ab96:	4603      	mov	r3, r0
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d036      	beq.n	801ac0a <pifMs5611_Init+0xd6>
	pifTaskManager_YieldMs(100);
 801ab9c:	2064      	movs	r0, #100	; 0x64
 801ab9e:	f7fa f85b 	bl	8014c58 <pifTaskManager_YieldMs>

	for (i = 0; i < 8; i++) {
 801aba2:	2300      	movs	r3, #0
 801aba4:	617b      	str	r3, [r7, #20]
 801aba6:	e014      	b.n	801abd2 <pifMs5611_Init+0x9e>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	6858      	ldr	r0, [r3, #4]
 801abac:	697b      	ldr	r3, [r7, #20]
 801abae:	3350      	adds	r3, #80	; 0x50
 801abb0:	b2db      	uxtb	r3, r3
 801abb2:	005b      	lsls	r3, r3, #1
 801abb4:	b2d9      	uxtb	r1, r3
 801abb6:	697b      	ldr	r3, [r7, #20]
 801abb8:	3304      	adds	r3, #4
 801abba:	005b      	lsls	r3, r3, #1
 801abbc:	68fa      	ldr	r2, [r7, #12]
 801abbe:	4413      	add	r3, r2
 801abc0:	461a      	mov	r2, r3
 801abc2:	f7f7 fc1f 	bl	8012404 <pifI2cDevice_ReadRegWord>
 801abc6:	4603      	mov	r3, r0
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d020      	beq.n	801ac0e <pifMs5611_Init+0xda>
	for (i = 0; i < 8; i++) {
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	3301      	adds	r3, #1
 801abd0:	617b      	str	r3, [r7, #20]
 801abd2:	697b      	ldr	r3, [r7, #20]
 801abd4:	2b07      	cmp	r3, #7
 801abd6:	dde7      	ble.n	801aba8 <pifMs5611_Init+0x74>
	}
	if (!_checkPromCrc(p_owner)) goto fail;
 801abd8:	68f8      	ldr	r0, [r7, #12]
 801abda:	f7ff fbb7 	bl	801a34c <_checkPromCrc>
 801abde:	4603      	mov	r3, r0
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d016      	beq.n	801ac12 <pifMs5611_Init+0xde>

    pifMs5611_SetOverSamplingRate(p_owner, MS5611_OSR_1024);
 801abe4:	2104      	movs	r1, #4
 801abe6:	68f8      	ldr	r0, [r7, #12]
 801abe8:	f000 f844 	bl	801ac74 <pifMs5611_SetOverSamplingRate>

	if (id == PIF_ID_AUTO) id = pif_id++;
 801abec:	897b      	ldrh	r3, [r7, #10]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d106      	bne.n	801ac00 <pifMs5611_Init+0xcc>
 801abf2:	4b0d      	ldr	r3, [pc, #52]	; (801ac28 <pifMs5611_Init+0xf4>)
 801abf4:	881b      	ldrh	r3, [r3, #0]
 801abf6:	1c5a      	adds	r2, r3, #1
 801abf8:	b291      	uxth	r1, r2
 801abfa:	4a0b      	ldr	r2, [pc, #44]	; (801ac28 <pifMs5611_Init+0xf4>)
 801abfc:	8011      	strh	r1, [r2, #0]
 801abfe:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	897a      	ldrh	r2, [r7, #10]
 801ac04:	801a      	strh	r2, [r3, #0]
    return TRUE;
 801ac06:	2301      	movs	r3, #1
 801ac08:	e008      	b.n	801ac1c <pifMs5611_Init+0xe8>
	if (!pifI2cDevice_WriteRegByte(p_owner->_p_i2c, MS5611_REG_RESET, 0)) goto fail;
 801ac0a:	bf00      	nop
 801ac0c:	e002      	b.n	801ac14 <pifMs5611_Init+0xe0>
		if (!pifI2cDevice_ReadRegWord(p_owner->_p_i2c, MS5611_REG_READ_PROM + i * 2, (uint16_t*)&p_owner->_prom[i])) goto fail;
 801ac0e:	bf00      	nop
 801ac10:	e000      	b.n	801ac14 <pifMs5611_Init+0xe0>
	if (!_checkPromCrc(p_owner)) goto fail;
 801ac12:	bf00      	nop

fail:
	pifMs5611_Clear(p_owner);
 801ac14:	68f8      	ldr	r0, [r7, #12]
 801ac16:	f000 f809 	bl	801ac2c <pifMs5611_Clear>
	return FALSE;
 801ac1a:	2300      	movs	r3, #0
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3718      	adds	r7, #24
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd80      	pop	{r7, pc}
 801ac24:	20001d48 	.word	0x20001d48
 801ac28:	20000128 	.word	0x20000128

0801ac2c <pifMs5611_Clear>:

void pifMs5611_Clear(PifMs5611* p_owner)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b082      	sub	sp, #8
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_task) {
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	69db      	ldr	r3, [r3, #28]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d007      	beq.n	801ac4c <pifMs5611_Clear+0x20>
		pifTaskManager_Remove(p_owner->_p_task);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	69db      	ldr	r3, [r3, #28]
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7f9 fd53 	bl	80146ec <pifTaskManager_Remove>
		p_owner->_p_task = NULL;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2200      	movs	r2, #0
 801ac4a:	61da      	str	r2, [r3, #28]
	}
	if (p_owner->_p_i2c) {
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	685b      	ldr	r3, [r3, #4]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d00b      	beq.n	801ac6c <pifMs5611_Clear+0x40>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	685b      	ldr	r3, [r3, #4]
 801ac58:	685a      	ldr	r2, [r3, #4]
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	685b      	ldr	r3, [r3, #4]
 801ac5e:	4619      	mov	r1, r3
 801ac60:	4610      	mov	r0, r2
 801ac62:	f7f7 fb1f 	bl	80122a4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	2200      	movs	r2, #0
 801ac6a:	605a      	str	r2, [r3, #4]
	}
}
 801ac6c:	bf00      	nop
 801ac6e:	3708      	adds	r7, #8
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}

0801ac74 <pifMs5611_SetOverSamplingRate>:

void pifMs5611_SetOverSamplingRate(PifMs5611* p_owner, uint16_t osr)
{
 801ac74:	b480      	push	{r7}
 801ac76:	b083      	sub	sp, #12
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
 801ac7c:	460b      	mov	r3, r1
 801ac7e:	807b      	strh	r3, [r7, #2]
	p_owner->_over_sampling_rate = osr;
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	887a      	ldrh	r2, [r7, #2]
 801ac84:	831a      	strh	r2, [r3, #24]
	switch (osr) {
 801ac86:	887b      	ldrh	r3, [r7, #2]
 801ac88:	2b08      	cmp	r3, #8
 801ac8a:	d829      	bhi.n	801ace0 <pifMs5611_SetOverSamplingRate+0x6c>
 801ac8c:	a201      	add	r2, pc, #4	; (adr r2, 801ac94 <pifMs5611_SetOverSamplingRate+0x20>)
 801ac8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac92:	bf00      	nop
 801ac94:	0801acb9 	.word	0x0801acb9
 801ac98:	0801ace1 	.word	0x0801ace1
 801ac9c:	0801acc1 	.word	0x0801acc1
 801aca0:	0801ace1 	.word	0x0801ace1
 801aca4:	0801acc9 	.word	0x0801acc9
 801aca8:	0801ace1 	.word	0x0801ace1
 801acac:	0801acd1 	.word	0x0801acd1
 801acb0:	0801ace1 	.word	0x0801ace1
 801acb4:	0801acd9 	.word	0x0801acd9
	case MS5611_OSR_256: p_owner->_conversion_time = 1 + 1; break;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	2202      	movs	r2, #2
 801acbc:	769a      	strb	r2, [r3, #26]
 801acbe:	e00f      	b.n	801ace0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_512: p_owner->_conversion_time = 2 + 1; break;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	2203      	movs	r2, #3
 801acc4:	769a      	strb	r2, [r3, #26]
 801acc6:	e00b      	b.n	801ace0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_1024: p_owner->_conversion_time = 3 + 1; break;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	2204      	movs	r2, #4
 801accc:	769a      	strb	r2, [r3, #26]
 801acce:	e007      	b.n	801ace0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_2048: p_owner->_conversion_time = 5 + 1; break;
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	2206      	movs	r2, #6
 801acd4:	769a      	strb	r2, [r3, #26]
 801acd6:	e003      	b.n	801ace0 <pifMs5611_SetOverSamplingRate+0x6c>
	case MS5611_OSR_4096: p_owner->_conversion_time = 10 + 1; break;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	220b      	movs	r2, #11
 801acdc:	769a      	strb	r2, [r3, #26]
 801acde:	bf00      	nop
	}
}
 801ace0:	bf00      	nop
 801ace2:	370c      	adds	r7, #12
 801ace4:	46bd      	mov	sp, r7
 801ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acea:	4770      	bx	lr

0801acec <pifMs5611_AddTaskForReading>:
	_calcurateBarometric(p_owner, p_pressure, p_temperature);
	return TRUE;
}

BOOL pifMs5611_AddTaskForReading(PifMs5611* p_owner, uint16_t read_period, PifEvtBaroRead evt_read, BOOL start)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b086      	sub	sp, #24
 801acf0:	af02      	add	r7, sp, #8
 801acf2:	60f8      	str	r0, [r7, #12]
 801acf4:	607a      	str	r2, [r7, #4]
 801acf6:	461a      	mov	r2, r3
 801acf8:	460b      	mov	r3, r1
 801acfa:	817b      	strh	r3, [r7, #10]
 801acfc:	4613      	mov	r3, r2
 801acfe:	727b      	strb	r3, [r7, #9]
	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, read_period, _doTask, p_owner, start);
 801ad00:	8979      	ldrh	r1, [r7, #10]
 801ad02:	7a7b      	ldrb	r3, [r7, #9]
 801ad04:	9300      	str	r3, [sp, #0]
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	4a0f      	ldr	r2, [pc, #60]	; (801ad48 <pifMs5611_AddTaskForReading+0x5c>)
 801ad0a:	2004      	movs	r0, #4
 801ad0c:	f7f9 fc86 	bl	801461c <pifTaskManager_Add>
 801ad10:	4602      	mov	r2, r0
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	61da      	str	r2, [r3, #28]
    if (!p_owner->_p_task) return FALSE;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	69db      	ldr	r3, [r3, #28]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d101      	bne.n	801ad22 <pifMs5611_AddTaskForReading+0x36>
 801ad1e:	2300      	movs	r3, #0
 801ad20:	e00e      	b.n	801ad40 <pifMs5611_AddTaskForReading+0x54>
    p_owner->_p_task->name = "MS5611";
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	69db      	ldr	r3, [r3, #28]
 801ad26:	4a09      	ldr	r2, [pc, #36]	; (801ad4c <pifMs5611_AddTaskForReading+0x60>)
 801ad28:	601a      	str	r2, [r3, #0]

    p_owner->__read_period = read_period;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	897a      	ldrh	r2, [r7, #10]
 801ad2e:	841a      	strh	r2, [r3, #32]
    p_owner->__evt_read = evt_read;
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	687a      	ldr	r2, [r7, #4]
 801ad34:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__state = MS5611_STATE_TEMPERATURE_START;
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	2201      	movs	r2, #1
 801ad3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return TRUE;
 801ad3e:	2301      	movs	r3, #1
}
 801ad40:	4618      	mov	r0, r3
 801ad42:	3710      	adds	r7, #16
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd80      	pop	{r7, pc}
 801ad48:	0801a9a1 	.word	0x0801a9a1
 801ad4c:	08027bc0 	.word	0x08027bc0

0801ad50 <_doTask>:
#include "sound/pif_buzzer.h"


static uint16_t _doTask(PifTask* p_task)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b086      	sub	sp, #24
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	6078      	str	r0, [r7, #4]
	PifBuzzer* p_owner = (PifBuzzer*)p_task->_p_client;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	68db      	ldr	r3, [r3, #12]
 801ad5c:	613b      	str	r3, [r7, #16]
	uint8_t repeat;
	uint16_t sound_10ms, delay = 0;
 801ad5e:	2300      	movs	r3, #0
 801ad60:	82fb      	strh	r3, [r7, #22]

	sound_10ms = p_owner->__p_sound_10ms[p_owner->__pos];
 801ad62:	693b      	ldr	r3, [r7, #16]
 801ad64:	691b      	ldr	r3, [r3, #16]
 801ad66:	693a      	ldr	r2, [r7, #16]
 801ad68:	7d12      	ldrb	r2, [r2, #20]
 801ad6a:	4413      	add	r3, r2
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	81fb      	strh	r3, [r7, #14]
	switch (p_owner->_state) {
 801ad70:	693b      	ldr	r3, [r7, #16]
 801ad72:	7b1b      	ldrb	r3, [r3, #12]
 801ad74:	3b01      	subs	r3, #1
 801ad76:	2b03      	cmp	r3, #3
 801ad78:	d87f      	bhi.n	801ae7a <_doTask+0x12a>
 801ad7a:	a201      	add	r2, pc, #4	; (adr r2, 801ad80 <_doTask+0x30>)
 801ad7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad80:	0801ad91 	.word	0x0801ad91
 801ad84:	0801adb3 	.word	0x0801adb3
 801ad88:	0801add5 	.word	0x0801add5
 801ad8c:	0801ae47 	.word	0x0801ae47
	case BS_START:
		(*p_owner->__act_action)(p_owner->_id, ON);
 801ad90:	693b      	ldr	r3, [r7, #16]
 801ad92:	699b      	ldr	r3, [r3, #24]
 801ad94:	693a      	ldr	r2, [r7, #16]
 801ad96:	8892      	ldrh	r2, [r2, #4]
 801ad98:	2101      	movs	r1, #1
 801ad9a:	4610      	mov	r0, r2
 801ad9c:	4798      	blx	r3
		p_owner->__pos++;
 801ad9e:	693b      	ldr	r3, [r7, #16]
 801ada0:	7d1b      	ldrb	r3, [r3, #20]
 801ada2:	3301      	adds	r3, #1
 801ada4:	b2da      	uxtb	r2, r3
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_ON;
 801adaa:	693b      	ldr	r3, [r7, #16]
 801adac:	2202      	movs	r2, #2
 801adae:	731a      	strb	r2, [r3, #12]
		break;
 801adb0:	e064      	b.n	801ae7c <_doTask+0x12c>

	case BS_ON:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801adb2:	693b      	ldr	r3, [r7, #16]
 801adb4:	699b      	ldr	r3, [r3, #24]
 801adb6:	693a      	ldr	r2, [r7, #16]
 801adb8:	8892      	ldrh	r2, [r2, #4]
 801adba:	2100      	movs	r1, #0
 801adbc:	4610      	mov	r0, r2
 801adbe:	4798      	blx	r3
		p_owner->__pos++;
 801adc0:	693b      	ldr	r3, [r7, #16]
 801adc2:	7d1b      	ldrb	r3, [r3, #20]
 801adc4:	3301      	adds	r3, #1
 801adc6:	b2da      	uxtb	r2, r3
 801adc8:	693b      	ldr	r3, [r7, #16]
 801adca:	751a      	strb	r2, [r3, #20]
		p_owner->_state = BS_OFF;
 801adcc:	693b      	ldr	r3, [r7, #16]
 801adce:	2203      	movs	r2, #3
 801add0:	731a      	strb	r2, [r3, #12]
		break;
 801add2:	e053      	b.n	801ae7c <_doTask+0x12c>

	case BS_OFF:
		if (sound_10ms < 0xF0) {
 801add4:	89fb      	ldrh	r3, [r7, #14]
 801add6:	2bef      	cmp	r3, #239	; 0xef
 801add8:	d810      	bhi.n	801adfc <_doTask+0xac>
			(*p_owner->__act_action)(p_owner->_id, ON);
 801adda:	693b      	ldr	r3, [r7, #16]
 801addc:	699b      	ldr	r3, [r3, #24]
 801adde:	693a      	ldr	r2, [r7, #16]
 801ade0:	8892      	ldrh	r2, [r2, #4]
 801ade2:	2101      	movs	r1, #1
 801ade4:	4610      	mov	r0, r2
 801ade6:	4798      	blx	r3
			p_owner->__pos++;
 801ade8:	693b      	ldr	r3, [r7, #16]
 801adea:	7d1b      	ldrb	r3, [r3, #20]
 801adec:	3301      	adds	r3, #1
 801adee:	b2da      	uxtb	r2, r3
 801adf0:	693b      	ldr	r3, [r7, #16]
 801adf2:	751a      	strb	r2, [r3, #20]
			p_owner->_state = BS_ON;
 801adf4:	693b      	ldr	r3, [r7, #16]
 801adf6:	2202      	movs	r2, #2
 801adf8:	731a      	strb	r2, [r3, #12]
			else {
				p_owner->_state = BS_STOP;
			}
			delay = 1;
		}
		break;
 801adfa:	e03f      	b.n	801ae7c <_doTask+0x12c>
		else if (sound_10ms == 0xF0) {
 801adfc:	89fb      	ldrh	r3, [r7, #14]
 801adfe:	2bf0      	cmp	r3, #240	; 0xf0
 801ae00:	d105      	bne.n	801ae0e <_doTask+0xbe>
			p_owner->_state = BS_STOP;
 801ae02:	693b      	ldr	r3, [r7, #16]
 801ae04:	2204      	movs	r2, #4
 801ae06:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801ae08:	2301      	movs	r3, #1
 801ae0a:	82fb      	strh	r3, [r7, #22]
		break;
 801ae0c:	e036      	b.n	801ae7c <_doTask+0x12c>
			repeat = sound_10ms - 0xF0;
 801ae0e:	89fb      	ldrh	r3, [r7, #14]
 801ae10:	b2db      	uxtb	r3, r3
 801ae12:	3310      	adds	r3, #16
 801ae14:	737b      	strb	r3, [r7, #13]
			if (p_owner->__repeat < repeat) {
 801ae16:	693b      	ldr	r3, [r7, #16]
 801ae18:	7d5b      	ldrb	r3, [r3, #21]
 801ae1a:	7b7a      	ldrb	r2, [r7, #13]
 801ae1c:	429a      	cmp	r2, r3
 801ae1e:	d90c      	bls.n	801ae3a <_doTask+0xea>
				p_owner->__pos = 0;
 801ae20:	693b      	ldr	r3, [r7, #16]
 801ae22:	2200      	movs	r2, #0
 801ae24:	751a      	strb	r2, [r3, #20]
				p_owner->__repeat++;
 801ae26:	693b      	ldr	r3, [r7, #16]
 801ae28:	7d5b      	ldrb	r3, [r3, #21]
 801ae2a:	3301      	adds	r3, #1
 801ae2c:	b2da      	uxtb	r2, r3
 801ae2e:	693b      	ldr	r3, [r7, #16]
 801ae30:	755a      	strb	r2, [r3, #21]
				p_owner->_state = BS_START;
 801ae32:	693b      	ldr	r3, [r7, #16]
 801ae34:	2201      	movs	r2, #1
 801ae36:	731a      	strb	r2, [r3, #12]
 801ae38:	e002      	b.n	801ae40 <_doTask+0xf0>
				p_owner->_state = BS_STOP;
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	2204      	movs	r2, #4
 801ae3e:	731a      	strb	r2, [r3, #12]
			delay = 1;
 801ae40:	2301      	movs	r3, #1
 801ae42:	82fb      	strh	r3, [r7, #22]
		break;
 801ae44:	e01a      	b.n	801ae7c <_doTask+0x12c>

	case BS_STOP:
		(*p_owner->__act_action)(p_owner->_id, OFF);
 801ae46:	693b      	ldr	r3, [r7, #16]
 801ae48:	699b      	ldr	r3, [r3, #24]
 801ae4a:	693a      	ldr	r2, [r7, #16]
 801ae4c:	8892      	ldrh	r2, [r2, #4]
 801ae4e:	2100      	movs	r1, #0
 801ae50:	4610      	mov	r0, r2
 801ae52:	4798      	blx	r3
		p_owner->_state = BS_IDLE;
 801ae54:	693b      	ldr	r3, [r7, #16]
 801ae56:	2200      	movs	r2, #0
 801ae58:	731a      	strb	r2, [r3, #12]
		if (p_owner->evt_finish) (*p_owner->evt_finish)(p_owner->_id);
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d005      	beq.n	801ae6e <_doTask+0x11e>
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	693a      	ldr	r2, [r7, #16]
 801ae68:	8892      	ldrh	r2, [r2, #4]
 801ae6a:	4610      	mov	r0, r2
 801ae6c:	4798      	blx	r3
		delay = 1;
 801ae6e:	2301      	movs	r3, #1
 801ae70:	82fb      	strh	r3, [r7, #22]
		p_task->pause = TRUE;
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	2201      	movs	r2, #1
 801ae76:	711a      	strb	r2, [r3, #4]
		break;
 801ae78:	e000      	b.n	801ae7c <_doTask+0x12c>

	default:
		break;
 801ae7a:	bf00      	nop
	}
	return delay ? delay : sound_10ms * 10;
 801ae7c:	8afb      	ldrh	r3, [r7, #22]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d106      	bne.n	801ae90 <_doTask+0x140>
 801ae82:	89fb      	ldrh	r3, [r7, #14]
 801ae84:	461a      	mov	r2, r3
 801ae86:	0092      	lsls	r2, r2, #2
 801ae88:	4413      	add	r3, r2
 801ae8a:	005b      	lsls	r3, r3, #1
 801ae8c:	b29b      	uxth	r3, r3
 801ae8e:	e000      	b.n	801ae92 <_doTask+0x142>
 801ae90:	8afb      	ldrh	r3, [r7, #22]
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	3718      	adds	r7, #24
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}
 801ae9a:	bf00      	nop

0801ae9c <pifBuzzer_Init>:

BOOL pifBuzzer_Init(PifBuzzer* p_owner, PifId id, PifActBuzzerAction act_action)
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b086      	sub	sp, #24
 801aea0:	af02      	add	r7, sp, #8
 801aea2:	60f8      	str	r0, [r7, #12]
 801aea4:	460b      	mov	r3, r1
 801aea6:	607a      	str	r2, [r7, #4]
 801aea8:	817b      	strh	r3, [r7, #10]
	if (!p_owner || !act_action) {
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d002      	beq.n	801aeb6 <pifBuzzer_Init+0x1a>
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d104      	bne.n	801aec0 <pifBuzzer_Init+0x24>
		pif_error = E_INVALID_PARAM;
 801aeb6:	4b1a      	ldr	r3, [pc, #104]	; (801af20 <pifBuzzer_Init+0x84>)
 801aeb8:	2201      	movs	r2, #1
 801aeba:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801aebc:	2300      	movs	r3, #0
 801aebe:	e02a      	b.n	801af16 <pifBuzzer_Init+0x7a>
	}

	memset(p_owner, 0, sizeof(PifBuzzer));
 801aec0:	221c      	movs	r2, #28
 801aec2:	2100      	movs	r1, #0
 801aec4:	68f8      	ldr	r0, [r7, #12]
 801aec6:	f008 f98f 	bl	80231e8 <memset>

	p_owner->_p_task = pifTaskManager_Add(TM_CHANGE_MS, 1, _doTask, p_owner, FALSE);
 801aeca:	2300      	movs	r3, #0
 801aecc:	9300      	str	r3, [sp, #0]
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	4a14      	ldr	r2, [pc, #80]	; (801af24 <pifBuzzer_Init+0x88>)
 801aed2:	2101      	movs	r1, #1
 801aed4:	2004      	movs	r0, #4
 801aed6:	f7f9 fba1 	bl	801461c <pifTaskManager_Add>
 801aeda:	4602      	mov	r2, r0
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	609a      	str	r2, [r3, #8]
	if (!p_owner->_p_task) return FALSE;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	689b      	ldr	r3, [r3, #8]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d101      	bne.n	801aeec <pifBuzzer_Init+0x50>
 801aee8:	2300      	movs	r3, #0
 801aeea:	e014      	b.n	801af16 <pifBuzzer_Init+0x7a>
	p_owner->_p_task->name = "Buzzer";
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	689b      	ldr	r3, [r3, #8]
 801aef0:	4a0d      	ldr	r2, [pc, #52]	; (801af28 <pifBuzzer_Init+0x8c>)
 801aef2:	601a      	str	r2, [r3, #0]

    if (id == PIF_ID_AUTO) id = pif_id++;
 801aef4:	897b      	ldrh	r3, [r7, #10]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d106      	bne.n	801af08 <pifBuzzer_Init+0x6c>
 801aefa:	4b0c      	ldr	r3, [pc, #48]	; (801af2c <pifBuzzer_Init+0x90>)
 801aefc:	881b      	ldrh	r3, [r3, #0]
 801aefe:	1c5a      	adds	r2, r3, #1
 801af00:	b291      	uxth	r1, r2
 801af02:	4a0a      	ldr	r2, [pc, #40]	; (801af2c <pifBuzzer_Init+0x90>)
 801af04:	8011      	strh	r1, [r2, #0]
 801af06:	817b      	strh	r3, [r7, #10]
    p_owner->_id = id;
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	897a      	ldrh	r2, [r7, #10]
 801af0c:	809a      	strh	r2, [r3, #4]
    p_owner->__act_action = act_action;
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	687a      	ldr	r2, [r7, #4]
 801af12:	619a      	str	r2, [r3, #24]
    return TRUE;
 801af14:	2301      	movs	r3, #1
}
 801af16:	4618      	mov	r0, r3
 801af18:	3710      	adds	r7, #16
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	20001d48 	.word	0x20001d48
 801af24:	0801ad51 	.word	0x0801ad51
 801af28:	08027bc8 	.word	0x08027bc8
 801af2c:	20000128 	.word	0x20000128

0801af30 <pifBuzzer_Start>:
		p_owner->_p_task = NULL;
	}
}

BOOL pifBuzzer_Start(PifBuzzer* p_owner, const uint8_t* p_sound_10ms)
{
 801af30:	b480      	push	{r7}
 801af32:	b083      	sub	sp, #12
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6039      	str	r1, [r7, #0]
	if (!p_owner->_p_task) return FALSE;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	689b      	ldr	r3, [r3, #8]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d101      	bne.n	801af46 <pifBuzzer_Start+0x16>
 801af42:	2300      	movs	r3, #0
 801af44:	e010      	b.n	801af68 <pifBuzzer_Start+0x38>

	p_owner->__p_sound_10ms = p_sound_10ms;
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	683a      	ldr	r2, [r7, #0]
 801af4a:	611a      	str	r2, [r3, #16]
	p_owner->__pos = 0;
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	2200      	movs	r2, #0
 801af50:	751a      	strb	r2, [r3, #20]
	p_owner->__repeat = 0;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	2200      	movs	r2, #0
 801af56:	755a      	strb	r2, [r3, #21]
	p_owner->_state = BS_START;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	2201      	movs	r2, #1
 801af5c:	731a      	strb	r2, [r3, #12]
	p_owner->_p_task->pause = FALSE;
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	689b      	ldr	r3, [r3, #8]
 801af62:	2200      	movs	r2, #0
 801af64:	711a      	strb	r2, [r3, #4]
	return TRUE;
 801af66:	2301      	movs	r3, #1
}
 801af68:	4618      	mov	r0, r3
 801af6a:	370c      	adds	r7, #12
 801af6c:	46bd      	mov	sp, r7
 801af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af72:	4770      	bx	lr

0801af74 <pifBuzzer_Stop>:

void pifBuzzer_Stop(PifBuzzer* p_owner)
{
 801af74:	b480      	push	{r7}
 801af76:	b083      	sub	sp, #12
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
	p_owner->_state = BS_STOP;
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	2204      	movs	r2, #4
 801af80:	731a      	strb	r2, [r3, #12]
}
 801af82:	bf00      	nop
 801af84:	370c      	adds	r7, #12
 801af86:	46bd      	mov	sp, r7
 801af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af8c:	4770      	bx	lr

0801af8e <_actStorageI2c_Read_1>:
#include "core/pif_task.h"
#include "storage/pif_storage.h"


static BOOL _actStorageI2c_Read_1(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801af8e:	b580      	push	{r7, lr}
 801af90:	b086      	sub	sp, #24
 801af92:	af02      	add	r7, sp, #8
 801af94:	60f8      	str	r0, [r7, #12]
 801af96:	60b9      	str	r1, [r7, #8]
 801af98:	607a      	str	r2, [r7, #4]
 801af9a:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 8);
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	7a19      	ldrb	r1, [r3, #8]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	0a1b      	lsrs	r3, r3, #8
 801afa4:	b2da      	uxtb	r2, r3
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	685b      	ldr	r3, [r3, #4]
 801afaa:	430a      	orrs	r2, r1
 801afac:	b2d2      	uxtb	r2, r2
 801afae:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFF, 1, dst, size)) return FALSE;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	6858      	ldr	r0, [r3, #4]
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	b2d9      	uxtb	r1, r3
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	9300      	str	r3, [sp, #0]
 801afbc:	68bb      	ldr	r3, [r7, #8]
 801afbe:	2201      	movs	r2, #1
 801afc0:	f7f7 f984 	bl	80122cc <pifI2cDevice_Read>
 801afc4:	4603      	mov	r3, r0
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d101      	bne.n	801afce <_actStorageI2c_Read_1+0x40>
 801afca:	2300      	movs	r3, #0
 801afcc:	e000      	b.n	801afd0 <_actStorageI2c_Read_1+0x42>
	return TRUE;
 801afce:	2301      	movs	r3, #1
}
 801afd0:	4618      	mov	r0, r3
 801afd2:	3710      	adds	r7, #16
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bd80      	pop	{r7, pc}

0801afd8 <_actStorageI2c_Write_1>:

static BOOL _actStorageI2c_Write_1(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b086      	sub	sp, #24
 801afdc:	af02      	add	r7, sp, #8
 801afde:	60f8      	str	r0, [r7, #12]
 801afe0:	60b9      	str	r1, [r7, #8]
 801afe2:	607a      	str	r2, [r7, #4]
 801afe4:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 8);
 801afe6:	68fb      	ldr	r3, [r7, #12]
 801afe8:	7a19      	ldrb	r1, [r3, #8]
 801afea:	68bb      	ldr	r3, [r7, #8]
 801afec:	0a1b      	lsrs	r3, r3, #8
 801afee:	b2da      	uxtb	r2, r3
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	685b      	ldr	r3, [r3, #4]
 801aff4:	430a      	orrs	r2, r1
 801aff6:	b2d2      	uxtb	r2, r2
 801aff8:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFF, 1, src, size)) return FALSE;
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	6858      	ldr	r0, [r3, #4]
 801affe:	68bb      	ldr	r3, [r7, #8]
 801b000:	b2d9      	uxtb	r1, r3
 801b002:	683b      	ldr	r3, [r7, #0]
 801b004:	9300      	str	r3, [sp, #0]
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2201      	movs	r2, #1
 801b00a:	f7f7 fa69 	bl	80124e0 <pifI2cDevice_Write>
 801b00e:	4603      	mov	r3, r0
 801b010:	2b00      	cmp	r3, #0
 801b012:	d101      	bne.n	801b018 <_actStorageI2c_Write_1+0x40>
 801b014:	2300      	movs	r3, #0
 801b016:	e009      	b.n	801b02c <_actStorageI2c_Write_1+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	7a5b      	ldrb	r3, [r3, #9]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d004      	beq.n	801b02a <_actStorageI2c_Write_1+0x52>
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	7a5b      	ldrb	r3, [r3, #9]
 801b024:	4618      	mov	r0, r3
 801b026:	f7f9 fe17 	bl	8014c58 <pifTaskManager_YieldMs>
	return TRUE;
 801b02a:	2301      	movs	r3, #1
}
 801b02c:	4618      	mov	r0, r3
 801b02e:	3710      	adds	r7, #16
 801b030:	46bd      	mov	sp, r7
 801b032:	bd80      	pop	{r7, pc}

0801b034 <_actStorageI2c_Read_2>:

static BOOL _actStorageI2c_Read_2(PifStorage* p_owner, uint8_t* dst, uint32_t src, size_t size)
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b086      	sub	sp, #24
 801b038:	af02      	add	r7, sp, #8
 801b03a:	60f8      	str	r0, [r7, #12]
 801b03c:	60b9      	str	r1, [r7, #8]
 801b03e:	607a      	str	r2, [r7, #4]
 801b040:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (src >> 16);
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	7a19      	ldrb	r1, [r3, #8]
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	0c1b      	lsrs	r3, r3, #16
 801b04a:	b2da      	uxtb	r2, r3
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	685b      	ldr	r3, [r3, #4]
 801b050:	430a      	orrs	r2, r1
 801b052:	b2d2      	uxtb	r2, r2
 801b054:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Read(p_owner->_p_i2c, src & 0xFFFF, 2, dst, size)) return FALSE;
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	6858      	ldr	r0, [r3, #4]
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	b299      	uxth	r1, r3
 801b05e:	683b      	ldr	r3, [r7, #0]
 801b060:	9300      	str	r3, [sp, #0]
 801b062:	68bb      	ldr	r3, [r7, #8]
 801b064:	2202      	movs	r2, #2
 801b066:	f7f7 f931 	bl	80122cc <pifI2cDevice_Read>
 801b06a:	4603      	mov	r3, r0
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d101      	bne.n	801b074 <_actStorageI2c_Read_2+0x40>
 801b070:	2300      	movs	r3, #0
 801b072:	e000      	b.n	801b076 <_actStorageI2c_Read_2+0x42>
	return TRUE;
 801b074:	2301      	movs	r3, #1
}
 801b076:	4618      	mov	r0, r3
 801b078:	3710      	adds	r7, #16
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd80      	pop	{r7, pc}

0801b07e <_actStorageI2c_Write_2>:

static BOOL _actStorageI2c_Write_2(PifStorage* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b07e:	b580      	push	{r7, lr}
 801b080:	b086      	sub	sp, #24
 801b082:	af02      	add	r7, sp, #8
 801b084:	60f8      	str	r0, [r7, #12]
 801b086:	60b9      	str	r1, [r7, #8]
 801b088:	607a      	str	r2, [r7, #4]
 801b08a:	603b      	str	r3, [r7, #0]
	p_owner->_p_i2c->addr = p_owner->__addr | (dst >> 16);
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	7a19      	ldrb	r1, [r3, #8]
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	0c1b      	lsrs	r3, r3, #16
 801b094:	b2da      	uxtb	r2, r3
 801b096:	68fb      	ldr	r3, [r7, #12]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	430a      	orrs	r2, r1
 801b09c:	b2d2      	uxtb	r2, r2
 801b09e:	701a      	strb	r2, [r3, #0]
	if (!pifI2cDevice_Write(p_owner->_p_i2c, dst & 0xFFFF, 2, src, size)) return FALSE;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	6858      	ldr	r0, [r3, #4]
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	b299      	uxth	r1, r3
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	9300      	str	r3, [sp, #0]
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	2202      	movs	r2, #2
 801b0b0:	f7f7 fa16 	bl	80124e0 <pifI2cDevice_Write>
 801b0b4:	4603      	mov	r3, r0
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d101      	bne.n	801b0be <_actStorageI2c_Write_2+0x40>
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	e009      	b.n	801b0d2 <_actStorageI2c_Write_2+0x54>
	if (p_owner->__write_delay_ms) pifTaskManager_YieldMs(p_owner->__write_delay_ms);
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	7a5b      	ldrb	r3, [r3, #9]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d004      	beq.n	801b0d0 <_actStorageI2c_Write_2+0x52>
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	7a5b      	ldrb	r3, [r3, #9]
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f7f9 fdc4 	bl	8014c58 <pifTaskManager_YieldMs>
	return TRUE;
 801b0d0:	2301      	movs	r3, #1
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3710      	adds	r7, #16
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}
	...

0801b0dc <pifStorage_AttachI2c>:
	p_owner->__act_write = act_write;
	return TRUE;
}

BOOL pifStorage_AttachI2c(PifStorage* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b084      	sub	sp, #16
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	60f8      	str	r0, [r7, #12]
 801b0e4:	60b9      	str	r1, [r7, #8]
 801b0e6:	4611      	mov	r1, r2
 801b0e8:	461a      	mov	r2, r3
 801b0ea:	460b      	mov	r3, r1
 801b0ec:	71fb      	strb	r3, [r7, #7]
 801b0ee:	4613      	mov	r3, r2
 801b0f0:	71bb      	strb	r3, [r7, #6]
    if (!p_owner || !p_port) {
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d002      	beq.n	801b0fe <pifStorage_AttachI2c+0x22>
 801b0f8:	68bb      	ldr	r3, [r7, #8]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d104      	bne.n	801b108 <pifStorage_AttachI2c+0x2c>
    	pif_error = E_INVALID_PARAM;
 801b0fe:	4b1c      	ldr	r3, [pc, #112]	; (801b170 <pifStorage_AttachI2c+0x94>)
 801b100:	2201      	movs	r2, #1
 801b102:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b104:	2300      	movs	r3, #0
 801b106:	e02f      	b.n	801b168 <pifStorage_AttachI2c+0x8c>
    }

	p_owner->_p_i2c = pifI2cPort_AddDevice(p_port);
 801b108:	68b8      	ldr	r0, [r7, #8]
 801b10a:	f7f7 f8a7 	bl	801225c <pifI2cPort_AddDevice>
 801b10e:	4602      	mov	r2, r0
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	605a      	str	r2, [r3, #4]
    if (!p_owner->_p_i2c) return FALSE;
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	685b      	ldr	r3, [r3, #4]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d101      	bne.n	801b120 <pifStorage_AttachI2c+0x44>
 801b11c:	2300      	movs	r3, #0
 801b11e:	e023      	b.n	801b168 <pifStorage_AttachI2c+0x8c>

    p_owner->__addr = addr;
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	79fa      	ldrb	r2, [r7, #7]
 801b124:	721a      	strb	r2, [r3, #8]
    p_owner->_p_i2c->addr = addr;
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	685b      	ldr	r3, [r3, #4]
 801b12a:	79fa      	ldrb	r2, [r7, #7]
 801b12c:	701a      	strb	r2, [r3, #0]
    p_owner->__write_delay_ms = write_delay_ms;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	7e3a      	ldrb	r2, [r7, #24]
 801b132:	725a      	strb	r2, [r3, #9]

    switch (i_addr_size) {
 801b134:	79bb      	ldrb	r3, [r7, #6]
 801b136:	2b01      	cmp	r3, #1
 801b138:	d007      	beq.n	801b14a <pifStorage_AttachI2c+0x6e>
 801b13a:	2b02      	cmp	r3, #2
 801b13c:	d00c      	beq.n	801b158 <pifStorage_AttachI2c+0x7c>
		p_owner->__act_read = _actStorageI2c_Read_2;
		p_owner->__act_write = _actStorageI2c_Write_2;
    	break;

    default:
    	goto fail;
 801b13e:	bf00      	nop
    }
	return TRUE;

fail:
	pifStorage_DetachI2c(p_owner);
 801b140:	68f8      	ldr	r0, [r7, #12]
 801b142:	f000 f81f 	bl	801b184 <pifStorage_DetachI2c>
	return FALSE;
 801b146:	2300      	movs	r3, #0
 801b148:	e00e      	b.n	801b168 <pifStorage_AttachI2c+0x8c>
		p_owner->__act_read = _actStorageI2c_Read_1;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	4a09      	ldr	r2, [pc, #36]	; (801b174 <pifStorage_AttachI2c+0x98>)
 801b14e:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_1;
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	4a09      	ldr	r2, [pc, #36]	; (801b178 <pifStorage_AttachI2c+0x9c>)
 801b154:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801b156:	e006      	b.n	801b166 <pifStorage_AttachI2c+0x8a>
		p_owner->__act_read = _actStorageI2c_Read_2;
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	4a08      	ldr	r2, [pc, #32]	; (801b17c <pifStorage_AttachI2c+0xa0>)
 801b15c:	629a      	str	r2, [r3, #40]	; 0x28
		p_owner->__act_write = _actStorageI2c_Write_2;
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	4a07      	ldr	r2, [pc, #28]	; (801b180 <pifStorage_AttachI2c+0xa4>)
 801b162:	62da      	str	r2, [r3, #44]	; 0x2c
    	break;
 801b164:	bf00      	nop
	return TRUE;
 801b166:	2301      	movs	r3, #1
}
 801b168:	4618      	mov	r0, r3
 801b16a:	3710      	adds	r7, #16
 801b16c:	46bd      	mov	sp, r7
 801b16e:	bd80      	pop	{r7, pc}
 801b170:	20001d48 	.word	0x20001d48
 801b174:	0801af8f 	.word	0x0801af8f
 801b178:	0801afd9 	.word	0x0801afd9
 801b17c:	0801b035 	.word	0x0801b035
 801b180:	0801b07f 	.word	0x0801b07f

0801b184 <pifStorage_DetachI2c>:

void pifStorage_DetachI2c(PifStorage* p_owner)
{
 801b184:	b580      	push	{r7, lr}
 801b186:	b082      	sub	sp, #8
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
	if (p_owner->_p_i2c) {
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	685b      	ldr	r3, [r3, #4]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d00b      	beq.n	801b1ac <pifStorage_DetachI2c+0x28>
		pifI2cPort_RemoveDevice(p_owner->_p_i2c->__p_port, p_owner->_p_i2c);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	685b      	ldr	r3, [r3, #4]
 801b198:	685a      	ldr	r2, [r3, #4]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	685b      	ldr	r3, [r3, #4]
 801b19e:	4619      	mov	r1, r3
 801b1a0:	4610      	mov	r0, r2
 801b1a2:	f7f7 f87f 	bl	80122a4 <pifI2cPort_RemoveDevice>
    	p_owner->_p_i2c = NULL;
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	605a      	str	r2, [r3, #4]
	}
	p_owner->__act_read = NULL;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	2200      	movs	r2, #0
 801b1b0:	629a      	str	r2, [r3, #40]	; 0x28
	p_owner->__act_write = NULL;
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801b1b8:	bf00      	nop
 801b1ba:	3708      	adds	r7, #8
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}

0801b1c0 <pifStorage_IsFormat>:

#ifdef __PIF_NO_USE_INLINE__

BOOL pifStorage_IsFormat(PifStorage* p_owner)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b082      	sub	sp, #8
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_is_format)(p_owner);
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	68db      	ldr	r3, [r3, #12]
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	4798      	blx	r3
 801b1d0:	4603      	mov	r3, r0
}
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	3708      	adds	r7, #8
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bd80      	pop	{r7, pc}

0801b1da <pifStorage_Format>:

BOOL pifStorage_Format(PifStorage* p_owner)
{
 801b1da:	b580      	push	{r7, lr}
 801b1dc:	b082      	sub	sp, #8
 801b1de:	af00      	add	r7, sp, #0
 801b1e0:	6078      	str	r0, [r7, #4]
	return (*p_owner->__fn_format)(p_owner);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	691b      	ldr	r3, [r3, #16]
 801b1e6:	6878      	ldr	r0, [r7, #4]
 801b1e8:	4798      	blx	r3
 801b1ea:	4603      	mov	r3, r0
}
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	3708      	adds	r7, #8
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <pifStorage_Create>:

PifStorageDataInfoP pifStorage_Create(PifStorage* p_owner, uint16_t id, uint16_t size)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	460b      	mov	r3, r1
 801b1fe:	807b      	strh	r3, [r7, #2]
 801b200:	4613      	mov	r3, r2
 801b202:	803b      	strh	r3, [r7, #0]
	return (*p_owner->__fn_create)(p_owner, id, size);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	695b      	ldr	r3, [r3, #20]
 801b208:	883a      	ldrh	r2, [r7, #0]
 801b20a:	8879      	ldrh	r1, [r7, #2]
 801b20c:	6878      	ldr	r0, [r7, #4]
 801b20e:	4798      	blx	r3
 801b210:	4603      	mov	r3, r0
}
 801b212:	4618      	mov	r0, r3
 801b214:	3708      	adds	r7, #8
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}

0801b21a <pifStorage_Open>:
{
	return (*p_owner->__fn_delete)(p_owner, id);
}

PifStorageDataInfoP pifStorage_Open(PifStorage* p_owner, uint16_t id)
{
 801b21a:	b580      	push	{r7, lr}
 801b21c:	b082      	sub	sp, #8
 801b21e:	af00      	add	r7, sp, #0
 801b220:	6078      	str	r0, [r7, #4]
 801b222:	460b      	mov	r3, r1
 801b224:	807b      	strh	r3, [r7, #2]
	return (*p_owner->__fn_open)(p_owner, id);
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	69db      	ldr	r3, [r3, #28]
 801b22a:	887a      	ldrh	r2, [r7, #2]
 801b22c:	4611      	mov	r1, r2
 801b22e:	6878      	ldr	r0, [r7, #4]
 801b230:	4798      	blx	r3
 801b232:	4603      	mov	r3, r0
}
 801b234:	4618      	mov	r0, r3
 801b236:	3708      	adds	r7, #8
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}

0801b23c <pifStorage_Read>:

BOOL pifStorage_Read(PifStorage* p_owner, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801b23c:	b590      	push	{r4, r7, lr}
 801b23e:	b085      	sub	sp, #20
 801b240:	af00      	add	r7, sp, #0
 801b242:	60f8      	str	r0, [r7, #12]
 801b244:	60b9      	str	r1, [r7, #8]
 801b246:	607a      	str	r2, [r7, #4]
 801b248:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_read)(p_owner, p_dst, p_src, size);
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	6a1c      	ldr	r4, [r3, #32]
 801b24e:	683b      	ldr	r3, [r7, #0]
 801b250:	687a      	ldr	r2, [r7, #4]
 801b252:	68b9      	ldr	r1, [r7, #8]
 801b254:	68f8      	ldr	r0, [r7, #12]
 801b256:	47a0      	blx	r4
 801b258:	4603      	mov	r3, r0
}
 801b25a:	4618      	mov	r0, r3
 801b25c:	3714      	adds	r7, #20
 801b25e:	46bd      	mov	sp, r7
 801b260:	bd90      	pop	{r4, r7, pc}

0801b262 <pifStorage_Write>:

BOOL pifStorage_Write(PifStorage* p_owner, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801b262:	b590      	push	{r4, r7, lr}
 801b264:	b085      	sub	sp, #20
 801b266:	af00      	add	r7, sp, #0
 801b268:	60f8      	str	r0, [r7, #12]
 801b26a:	60b9      	str	r1, [r7, #8]
 801b26c:	607a      	str	r2, [r7, #4]
 801b26e:	603b      	str	r3, [r7, #0]
	return (*p_owner->__fn_write)(p_owner, p_dst, p_src, size);
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	68b9      	ldr	r1, [r7, #8]
 801b27a:	68f8      	ldr	r0, [r7, #12]
 801b27c:	47a0      	blx	r4
 801b27e:	4603      	mov	r3, r0
}
 801b280:	4618      	mov	r0, r3
 801b282:	3714      	adds	r7, #20
 801b284:	46bd      	mov	sp, r7
 801b286:	bd90      	pop	{r4, r7, pc}

0801b288 <_getNewDataNode>:

#define DATA_NODE_NULL	0xFFFF


static uint16_t _getNewDataNode(PifStorageVar* p_owner)
{
 801b288:	b480      	push	{r7}
 801b28a:	b085      	sub	sp, #20
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
	uint16_t node;

	node = p_owner->_p_info->free_node;
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b294:	899b      	ldrh	r3, [r3, #12]
 801b296:	81fb      	strh	r3, [r7, #14]
	if (node == DATA_NODE_NULL) {
 801b298:	89fb      	ldrh	r3, [r7, #14]
 801b29a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b29e:	4293      	cmp	r3, r2
 801b2a0:	d105      	bne.n	801b2ae <_getNewDataNode+0x26>
		pif_error = E_OVERFLOW_BUFFER;
 801b2a2:	4b0c      	ldr	r3, [pc, #48]	; (801b2d4 <_getNewDataNode+0x4c>)
 801b2a4:	2204      	movs	r2, #4
 801b2a6:	701a      	strb	r2, [r3, #0]
		return DATA_NODE_NULL;
 801b2a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b2ac:	e00c      	b.n	801b2c8 <_getNewDataNode+0x40>
	}

	p_owner->_p_info->free_node = p_owner->__p_data_info[node].next_node;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b2b2:	89fa      	ldrh	r2, [r7, #14]
 801b2b4:	4613      	mov	r3, r2
 801b2b6:	005b      	lsls	r3, r3, #1
 801b2b8:	4413      	add	r3, r2
 801b2ba:	009b      	lsls	r3, r3, #2
 801b2bc:	18ca      	adds	r2, r1, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2c2:	88d2      	ldrh	r2, [r2, #6]
 801b2c4:	819a      	strh	r2, [r3, #12]
	return node;
 801b2c6:	89fb      	ldrh	r3, [r7, #14]
}
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	3714      	adds	r7, #20
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d2:	4770      	bx	lr
 801b2d4:	20001d48 	.word	0x20001d48

0801b2d8 <_readData>:

static BOOL _readData(PifStorageVar* p_owner, uint8_t* dst, uint32_t src, size_t size, uint16_t sector_size)
{
 801b2d8:	b590      	push	{r4, r7, lr}
 801b2da:	b087      	sub	sp, #28
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	60f8      	str	r0, [r7, #12]
 801b2e0:	60b9      	str	r1, [r7, #8]
 801b2e2:	607a      	str	r2, [r7, #4]
 801b2e4:	603b      	str	r3, [r7, #0]
	uint32_t ptr, len;

	ptr = 0;
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	617b      	str	r3, [r7, #20]
	while (size) {
 801b2ea:	e01d      	b.n	801b328 <_readData+0x50>
		len = size > sector_size ? sector_size : size;
 801b2ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801b2ee:	683a      	ldr	r2, [r7, #0]
 801b2f0:	4293      	cmp	r3, r2
 801b2f2:	bf28      	it	cs
 801b2f4:	4613      	movcs	r3, r2
 801b2f6:	613b      	str	r3, [r7, #16]
		if (!(*p_owner->parent.__act_read)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b2fc:	68f8      	ldr	r0, [r7, #12]
 801b2fe:	68ba      	ldr	r2, [r7, #8]
 801b300:	697b      	ldr	r3, [r7, #20]
 801b302:	18d1      	adds	r1, r2, r3
 801b304:	687a      	ldr	r2, [r7, #4]
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	441a      	add	r2, r3
 801b30a:	693b      	ldr	r3, [r7, #16]
 801b30c:	47a0      	blx	r4
 801b30e:	4603      	mov	r3, r0
 801b310:	2b00      	cmp	r3, #0
 801b312:	d101      	bne.n	801b318 <_readData+0x40>
 801b314:	2300      	movs	r3, #0
 801b316:	e00b      	b.n	801b330 <_readData+0x58>

		ptr += len;
 801b318:	697a      	ldr	r2, [r7, #20]
 801b31a:	693b      	ldr	r3, [r7, #16]
 801b31c:	4413      	add	r3, r2
 801b31e:	617b      	str	r3, [r7, #20]
		size -= len;
 801b320:	683a      	ldr	r2, [r7, #0]
 801b322:	693b      	ldr	r3, [r7, #16]
 801b324:	1ad3      	subs	r3, r2, r3
 801b326:	603b      	str	r3, [r7, #0]
	while (size) {
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d1de      	bne.n	801b2ec <_readData+0x14>
	}
	return TRUE;
 801b32e:	2301      	movs	r3, #1
}
 801b330:	4618      	mov	r0, r3
 801b332:	371c      	adds	r7, #28
 801b334:	46bd      	mov	sp, r7
 801b336:	bd90      	pop	{r4, r7, pc}

0801b338 <_writeData>:

static BOOL _writeData(PifStorageVar* p_owner, uint32_t dst, uint8_t* src, size_t size)
{
 801b338:	b590      	push	{r4, r7, lr}
 801b33a:	b089      	sub	sp, #36	; 0x24
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	60f8      	str	r0, [r7, #12]
 801b340:	60b9      	str	r1, [r7, #8]
 801b342:	607a      	str	r2, [r7, #4]
 801b344:	603b      	str	r3, [r7, #0]
	uint16_t sector_size = p_owner->_p_info->sector_size;
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b34a:	88db      	ldrh	r3, [r3, #6]
 801b34c:	837b      	strh	r3, [r7, #26]
	uint32_t ptr, len;

	ptr = 0;
 801b34e:	2300      	movs	r3, #0
 801b350:	61fb      	str	r3, [r7, #28]
	while (size) {
 801b352:	e01d      	b.n	801b390 <_writeData+0x58>
		len = size > sector_size ? sector_size : size;
 801b354:	8b7b      	ldrh	r3, [r7, #26]
 801b356:	683a      	ldr	r2, [r7, #0]
 801b358:	4293      	cmp	r3, r2
 801b35a:	bf28      	it	cs
 801b35c:	4613      	movcs	r3, r2
 801b35e:	617b      	str	r3, [r7, #20]
		if (!(*p_owner->parent.__act_write)(&p_owner->parent, dst + ptr, src + ptr, len)) return FALSE;
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801b364:	68f8      	ldr	r0, [r7, #12]
 801b366:	68ba      	ldr	r2, [r7, #8]
 801b368:	69fb      	ldr	r3, [r7, #28]
 801b36a:	18d1      	adds	r1, r2, r3
 801b36c:	687a      	ldr	r2, [r7, #4]
 801b36e:	69fb      	ldr	r3, [r7, #28]
 801b370:	441a      	add	r2, r3
 801b372:	697b      	ldr	r3, [r7, #20]
 801b374:	47a0      	blx	r4
 801b376:	4603      	mov	r3, r0
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d101      	bne.n	801b380 <_writeData+0x48>
 801b37c:	2300      	movs	r3, #0
 801b37e:	e00b      	b.n	801b398 <_writeData+0x60>

		ptr += len;
 801b380:	69fa      	ldr	r2, [r7, #28]
 801b382:	697b      	ldr	r3, [r7, #20]
 801b384:	4413      	add	r3, r2
 801b386:	61fb      	str	r3, [r7, #28]
		size -= len;
 801b388:	683a      	ldr	r2, [r7, #0]
 801b38a:	697b      	ldr	r3, [r7, #20]
 801b38c:	1ad3      	subs	r3, r2, r3
 801b38e:	603b      	str	r3, [r7, #0]
	while (size) {
 801b390:	683b      	ldr	r3, [r7, #0]
 801b392:	2b00      	cmp	r3, #0
 801b394:	d1de      	bne.n	801b354 <_writeData+0x1c>
	}
	return TRUE;
 801b396:	2301      	movs	r3, #1
}
 801b398:	4618      	mov	r0, r3
 801b39a:	3724      	adds	r7, #36	; 0x24
 801b39c:	46bd      	mov	sp, r7
 801b39e:	bd90      	pop	{r4, r7, pc}

0801b3a0 <pifStorageVar_Init>:

BOOL pifStorageVar_Init(PifStorageVar* p_owner, PifId id)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	460b      	mov	r3, r1
 801b3aa:	807b      	strh	r3, [r7, #2]
    if (!p_owner) {
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d104      	bne.n	801b3bc <pifStorageVar_Init+0x1c>
    	pif_error = E_INVALID_PARAM;
 801b3b2:	4b18      	ldr	r3, [pc, #96]	; (801b414 <pifStorageVar_Init+0x74>)
 801b3b4:	2201      	movs	r2, #1
 801b3b6:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	e027      	b.n	801b40c <pifStorageVar_Init+0x6c>
    }

	memset(p_owner, 0, sizeof(PifStorageVar));
 801b3bc:	2248      	movs	r2, #72	; 0x48
 801b3be:	2100      	movs	r1, #0
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f007 ff11 	bl	80231e8 <memset>

    if (id == PIF_ID_AUTO) id = pif_id++;
 801b3c6:	887b      	ldrh	r3, [r7, #2]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d106      	bne.n	801b3da <pifStorageVar_Init+0x3a>
 801b3cc:	4b12      	ldr	r3, [pc, #72]	; (801b418 <pifStorageVar_Init+0x78>)
 801b3ce:	881b      	ldrh	r3, [r3, #0]
 801b3d0:	1c5a      	adds	r2, r3, #1
 801b3d2:	b291      	uxth	r1, r2
 801b3d4:	4a10      	ldr	r2, [pc, #64]	; (801b418 <pifStorageVar_Init+0x78>)
 801b3d6:	8011      	strh	r1, [r2, #0]
 801b3d8:	807b      	strh	r3, [r7, #2]
    p_owner->parent._id = id;
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	887a      	ldrh	r2, [r7, #2]
 801b3de:	801a      	strh	r2, [r3, #0]

	p_owner->parent.__fn_is_format = pifStorageVar_IsFormat;
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	4a0e      	ldr	r2, [pc, #56]	; (801b41c <pifStorageVar_Init+0x7c>)
 801b3e4:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = pifStorageVar_Format;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	4a0d      	ldr	r2, [pc, #52]	; (801b420 <pifStorageVar_Init+0x80>)
 801b3ea:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = pifStorageVar_Create;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	4a0d      	ldr	r2, [pc, #52]	; (801b424 <pifStorageVar_Init+0x84>)
 801b3f0:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = pifStorageVar_Delete;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	4a0c      	ldr	r2, [pc, #48]	; (801b428 <pifStorageVar_Init+0x88>)
 801b3f6:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = pifStorageVar_Open;
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	4a0c      	ldr	r2, [pc, #48]	; (801b42c <pifStorageVar_Init+0x8c>)
 801b3fc:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = pifStorageVar_Read;
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	4a0b      	ldr	r2, [pc, #44]	; (801b430 <pifStorageVar_Init+0x90>)
 801b402:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = pifStorageVar_Write;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	4a0b      	ldr	r2, [pc, #44]	; (801b434 <pifStorageVar_Init+0x94>)
 801b408:	625a      	str	r2, [r3, #36]	; 0x24
	return TRUE;
 801b40a:	2301      	movs	r3, #1
}
 801b40c:	4618      	mov	r0, r3
 801b40e:	3708      	adds	r7, #8
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}
 801b414:	20001d48 	.word	0x20001d48
 801b418:	20000128 	.word	0x20000128
 801b41c:	0801b663 	.word	0x0801b663
 801b420:	0801b67d 	.word	0x0801b67d
 801b424:	0801b81d 	.word	0x0801b81d
 801b428:	0801bac9 	.word	0x0801bac9
 801b42c:	0801bbe5 	.word	0x0801bbe5
 801b430:	0801bc79 	.word	0x0801bc79
 801b434:	0801bcd1 	.word	0x0801bcd1

0801b438 <pifStorageVar_Clear>:

void pifStorageVar_Clear(PifStorageVar* p_owner)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
    if (p_owner->__p_info_buffer) {
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b444:	2b00      	cmp	r3, #0
 801b446:	d007      	beq.n	801b458 <pifStorageVar_Clear+0x20>
        free(p_owner->__p_info_buffer);
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b44c:	4618      	mov	r0, r3
 801b44e:	f007 feb5 	bl	80231bc <free>
        p_owner->__p_info_buffer = NULL;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	2200      	movs	r2, #0
 801b456:	641a      	str	r2, [r3, #64]	; 0x40
    }
	p_owner->parent.__fn_is_format = NULL;
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	2200      	movs	r2, #0
 801b45c:	60da      	str	r2, [r3, #12]
	p_owner->parent.__fn_format = NULL;
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	2200      	movs	r2, #0
 801b462:	611a      	str	r2, [r3, #16]
	p_owner->parent.__fn_create = NULL;
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	2200      	movs	r2, #0
 801b468:	615a      	str	r2, [r3, #20]
	p_owner->parent.__fn_delete = NULL;
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	2200      	movs	r2, #0
 801b46e:	619a      	str	r2, [r3, #24]
	p_owner->parent.__fn_open = NULL;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	2200      	movs	r2, #0
 801b474:	61da      	str	r2, [r3, #28]
	p_owner->parent.__fn_read = NULL;
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	2200      	movs	r2, #0
 801b47a:	621a      	str	r2, [r3, #32]
	p_owner->parent.__fn_write = NULL;
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	2200      	movs	r2, #0
 801b480:	625a      	str	r2, [r3, #36]	; 0x24
}
 801b482:	bf00      	nop
 801b484:	3708      	adds	r7, #8
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
	...

0801b48c <pifStorageVar_SetMedia>:

BOOL pifStorageVar_SetMedia(PifStorageVar* p_owner, uint16_t sector_size, uint32_t storage_volume, uint8_t data_info_count)
{
 801b48c:	b590      	push	{r4, r7, lr}
 801b48e:	b089      	sub	sp, #36	; 0x24
 801b490:	af02      	add	r7, sp, #8
 801b492:	60f8      	str	r0, [r7, #12]
 801b494:	607a      	str	r2, [r7, #4]
 801b496:	461a      	mov	r2, r3
 801b498:	460b      	mov	r3, r1
 801b49a:	817b      	strh	r3, [r7, #10]
 801b49c:	4613      	mov	r3, r2
 801b49e:	727b      	strb	r3, [r7, #9]
    PifStorageVarInfo* p_info;

    if (!p_owner || sector_size < 16 || !storage_volume || !data_info_count) {
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d008      	beq.n	801b4b8 <pifStorageVar_SetMedia+0x2c>
 801b4a6:	897b      	ldrh	r3, [r7, #10]
 801b4a8:	2b0f      	cmp	r3, #15
 801b4aa:	d905      	bls.n	801b4b8 <pifStorageVar_SetMedia+0x2c>
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d002      	beq.n	801b4b8 <pifStorageVar_SetMedia+0x2c>
 801b4b2:	7a7b      	ldrb	r3, [r7, #9]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d104      	bne.n	801b4c2 <pifStorageVar_SetMedia+0x36>
    	pif_error = E_INVALID_PARAM;
 801b4b8:	4b5c      	ldr	r3, [pc, #368]	; (801b62c <pifStorageVar_SetMedia+0x1a0>)
 801b4ba:	2201      	movs	r2, #1
 801b4bc:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b4be:	2300      	movs	r3, #0
 801b4c0:	e0af      	b.n	801b622 <pifStorageVar_SetMedia+0x196>
    }

    uint32_t max_sector_count = storage_volume / sector_size;
 801b4c2:	897b      	ldrh	r3, [r7, #10]
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b4ca:	617b      	str	r3, [r7, #20]
    if (!max_sector_count || max_sector_count > 65535) {
 801b4cc:	697b      	ldr	r3, [r7, #20]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d003      	beq.n	801b4da <pifStorageVar_SetMedia+0x4e>
 801b4d2:	697b      	ldr	r3, [r7, #20]
 801b4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b4d8:	d304      	bcc.n	801b4e4 <pifStorageVar_SetMedia+0x58>
    	pif_error = E_INVALID_PARAM;
 801b4da:	4b54      	ldr	r3, [pc, #336]	; (801b62c <pifStorageVar_SetMedia+0x1a0>)
 801b4dc:	2201      	movs	r2, #1
 801b4de:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	e09e      	b.n	801b622 <pifStorageVar_SetMedia+0x196>
    }

	p_owner->__info_sectors = (sizeof(PifStorageVarInfo) + sizeof(PifStorageVarDataInfo) * data_info_count + sector_size - 1) / sector_size;
 801b4e4:	7a7a      	ldrb	r2, [r7, #9]
 801b4e6:	4613      	mov	r3, r2
 801b4e8:	005b      	lsls	r3, r3, #1
 801b4ea:	4413      	add	r3, r2
 801b4ec:	009b      	lsls	r3, r3, #2
 801b4ee:	461a      	mov	r2, r3
 801b4f0:	897b      	ldrh	r3, [r7, #10]
 801b4f2:	4413      	add	r3, r2
 801b4f4:	f103 020f 	add.w	r2, r3, #15
 801b4f8:	897b      	ldrh	r3, [r7, #10]
 801b4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801b4fe:	b29a      	uxth	r2, r3
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	879a      	strh	r2, [r3, #60]	; 0x3c
	p_owner->__info_bytes = p_owner->__info_sectors * sector_size;
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b508:	461a      	mov	r2, r3
 801b50a:	897b      	ldrh	r3, [r7, #10]
 801b50c:	fb02 f303 	mul.w	r3, r2, r3
 801b510:	461a      	mov	r2, r3
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	639a      	str	r2, [r3, #56]	; 0x38

    p_owner->__p_info_buffer = calloc(1, p_owner->__info_bytes);
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b51a:	4619      	mov	r1, r3
 801b51c:	2001      	movs	r0, #1
 801b51e:	f007 fe13 	bl	8023148 <calloc>
 801b522:	4603      	mov	r3, r0
 801b524:	461a      	mov	r2, r3
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	641a      	str	r2, [r3, #64]	; 0x40
    if (!p_owner->__p_info_buffer) {
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d104      	bne.n	801b53c <pifStorageVar_SetMedia+0xb0>
		pif_error = E_OUT_OF_HEAP;
 801b532:	4b3e      	ldr	r3, [pc, #248]	; (801b62c <pifStorageVar_SetMedia+0x1a0>)
 801b534:	2203      	movs	r2, #3
 801b536:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b538:	2300      	movs	r3, #0
 801b53a:	e072      	b.n	801b622 <pifStorageVar_SetMedia+0x196>
	}

    if (!_readData(p_owner, p_owner->__p_info_buffer, 0, p_owner->__info_bytes, sector_size)) {
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b544:	897b      	ldrh	r3, [r7, #10]
 801b546:	9300      	str	r3, [sp, #0]
 801b548:	4613      	mov	r3, r2
 801b54a:	2200      	movs	r2, #0
 801b54c:	68f8      	ldr	r0, [r7, #12]
 801b54e:	f7ff fec3 	bl	801b2d8 <_readData>
 801b552:	4603      	mov	r3, r0
 801b554:	2b00      	cmp	r3, #0
 801b556:	d108      	bne.n	801b56a <pifStorageVar_SetMedia+0xde>
    	pif_error = E_ACCESS_FAILED;
 801b558:	4b34      	ldr	r3, [pc, #208]	; (801b62c <pifStorageVar_SetMedia+0x1a0>)
 801b55a:	220d      	movs	r2, #13
 801b55c:	701a      	strb	r2, [r3, #0]
    	goto fail;
 801b55e:	bf00      	nop
	p_info->sector_size = sector_size;
	p_info->max_sector_count = max_sector_count;
	return TRUE;

fail:
	if (p_owner->__p_info_buffer) {
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b564:	2b00      	cmp	r3, #0
 801b566:	d05b      	beq.n	801b620 <pifStorageVar_SetMedia+0x194>
 801b568:	e052      	b.n	801b610 <pifStorageVar_SetMedia+0x184>
    p_owner->_p_info = (PifStorageVarInfo*)p_owner->__p_info_buffer;
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	631a      	str	r2, [r3, #48]	; 0x30
    p_owner->__p_data_info = (PifStorageVarDataInfo*)(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo));
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b576:	f103 0210 	add.w	r2, r3, #16
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	645a      	str	r2, [r3, #68]	; 0x44
    p_info = p_owner->_p_info;
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b582:	613b      	str	r3, [r7, #16]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b584:	693b      	ldr	r3, [r7, #16]
 801b586:	781b      	ldrb	r3, [r3, #0]
 801b588:	2b70      	cmp	r3, #112	; 0x70
 801b58a:	d121      	bne.n	801b5d0 <pifStorageVar_SetMedia+0x144>
 801b58c:	693b      	ldr	r3, [r7, #16]
 801b58e:	785b      	ldrb	r3, [r3, #1]
 801b590:	2b69      	cmp	r3, #105	; 0x69
 801b592:	d11d      	bne.n	801b5d0 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b594:	693b      	ldr	r3, [r7, #16]
 801b596:	789b      	ldrb	r3, [r3, #2]
    if (p_info->magin_code[0] != 'p' || p_info->magin_code[1] != 'i' ||
 801b598:	2b66      	cmp	r3, #102	; 0x66
 801b59a:	d119      	bne.n	801b5d0 <pifStorageVar_SetMedia+0x144>
            p_info->magin_code[2] != 'f' || p_info->magin_code[3] != 's') {
 801b59c:	693b      	ldr	r3, [r7, #16]
 801b59e:	78db      	ldrb	r3, [r3, #3]
 801b5a0:	2b73      	cmp	r3, #115	; 0x73
 801b5a2:	d115      	bne.n	801b5d0 <pifStorageVar_SetMedia+0x144>
    if (p_info->data_info_count != data_info_count) {
 801b5a4:	693b      	ldr	r3, [r7, #16]
 801b5a6:	795b      	ldrb	r3, [r3, #5]
 801b5a8:	7a7a      	ldrb	r2, [r7, #9]
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d112      	bne.n	801b5d4 <pifStorageVar_SetMedia+0x148>
    if (p_info->crc_16 != pifCrc16(p_owner->__p_info_buffer, sizeof(PifStorageVarInfo) - 6)) {
 801b5ae:	693b      	ldr	r3, [r7, #16]
 801b5b0:	89dc      	ldrh	r4, [r3, #14]
 801b5b2:	68fb      	ldr	r3, [r7, #12]
 801b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5b6:	210a      	movs	r1, #10
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	f7f6 fb40 	bl	8011c3e <pifCrc16>
 801b5be:	4603      	mov	r3, r0
 801b5c0:	429c      	cmp	r4, r3
 801b5c2:	d109      	bne.n	801b5d8 <pifStorageVar_SetMedia+0x14c>
	p_owner->__is_format = TRUE;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	2201      	movs	r2, #1
 801b5c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b5cc:	2301      	movs	r3, #1
 801b5ce:	e028      	b.n	801b622 <pifStorageVar_SetMedia+0x196>
        goto set;
 801b5d0:	bf00      	nop
 801b5d2:	e002      	b.n	801b5da <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b5d4:	bf00      	nop
 801b5d6:	e000      	b.n	801b5da <pifStorageVar_SetMedia+0x14e>
        goto set;
 801b5d8:	bf00      	nop
	p_info->magin_code[0] = 'p';
 801b5da:	693b      	ldr	r3, [r7, #16]
 801b5dc:	2270      	movs	r2, #112	; 0x70
 801b5de:	701a      	strb	r2, [r3, #0]
	p_info->magin_code[1] = 'i';
 801b5e0:	693b      	ldr	r3, [r7, #16]
 801b5e2:	2269      	movs	r2, #105	; 0x69
 801b5e4:	705a      	strb	r2, [r3, #1]
	p_info->magin_code[2] = 'f';
 801b5e6:	693b      	ldr	r3, [r7, #16]
 801b5e8:	2266      	movs	r2, #102	; 0x66
 801b5ea:	709a      	strb	r2, [r3, #2]
	p_info->magin_code[3] = 's';
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	2273      	movs	r2, #115	; 0x73
 801b5f0:	70da      	strb	r2, [r3, #3]
	p_info->verion = 1;
 801b5f2:	693b      	ldr	r3, [r7, #16]
 801b5f4:	2201      	movs	r2, #1
 801b5f6:	711a      	strb	r2, [r3, #4]
	p_info->data_info_count = data_info_count;
 801b5f8:	693b      	ldr	r3, [r7, #16]
 801b5fa:	7a7a      	ldrb	r2, [r7, #9]
 801b5fc:	715a      	strb	r2, [r3, #5]
	p_info->sector_size = sector_size;
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	897a      	ldrh	r2, [r7, #10]
 801b602:	80da      	strh	r2, [r3, #6]
	p_info->max_sector_count = max_sector_count;
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	b29a      	uxth	r2, r3
 801b608:	693b      	ldr	r3, [r7, #16]
 801b60a:	811a      	strh	r2, [r3, #8]
	return TRUE;
 801b60c:	2301      	movs	r3, #1
 801b60e:	e008      	b.n	801b622 <pifStorageVar_SetMedia+0x196>
		free(p_owner->__p_info_buffer);
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b614:	4618      	mov	r0, r3
 801b616:	f007 fdd1 	bl	80231bc <free>
		p_owner->__p_info_buffer = NULL;
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	2200      	movs	r2, #0
 801b61e:	641a      	str	r2, [r3, #64]	; 0x40
	}
    return FALSE;
 801b620:	2300      	movs	r3, #0
}
 801b622:	4618      	mov	r0, r3
 801b624:	371c      	adds	r7, #28
 801b626:	46bd      	mov	sp, r7
 801b628:	bd90      	pop	{r4, r7, pc}
 801b62a:	bf00      	nop
 801b62c:	20001d48 	.word	0x20001d48

0801b630 <pifStorageVar_AttachI2c>:
{
	return pifStorage_AttachActStorage(&p_owner->parent, act_read, act_write);
}

BOOL pifStorageVar_AttachI2c(PifStorageVar* p_owner, PifI2cPort* p_port, uint8_t addr, PifStorageI2cIAddrSize i_addr_size, uint8_t write_delay_ms)
{
 801b630:	b580      	push	{r7, lr}
 801b632:	b086      	sub	sp, #24
 801b634:	af02      	add	r7, sp, #8
 801b636:	60f8      	str	r0, [r7, #12]
 801b638:	60b9      	str	r1, [r7, #8]
 801b63a:	4611      	mov	r1, r2
 801b63c:	461a      	mov	r2, r3
 801b63e:	460b      	mov	r3, r1
 801b640:	71fb      	strb	r3, [r7, #7]
 801b642:	4613      	mov	r3, r2
 801b644:	71bb      	strb	r3, [r7, #6]
	return pifStorage_AttachI2c(&p_owner->parent, p_port, addr, i_addr_size, write_delay_ms);
 801b646:	68f8      	ldr	r0, [r7, #12]
 801b648:	79b9      	ldrb	r1, [r7, #6]
 801b64a:	79fa      	ldrb	r2, [r7, #7]
 801b64c:	7e3b      	ldrb	r3, [r7, #24]
 801b64e:	9300      	str	r3, [sp, #0]
 801b650:	460b      	mov	r3, r1
 801b652:	68b9      	ldr	r1, [r7, #8]
 801b654:	f7ff fd42 	bl	801b0dc <pifStorage_AttachI2c>
 801b658:	4603      	mov	r3, r0
}
 801b65a:	4618      	mov	r0, r3
 801b65c:	3710      	adds	r7, #16
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd80      	pop	{r7, pc}

0801b662 <pifStorageVar_IsFormat>:

#endif

BOOL pifStorageVar_IsFormat(PifStorage* p_parent)
{
 801b662:	b480      	push	{r7}
 801b664:	b083      	sub	sp, #12
 801b666:	af00      	add	r7, sp, #0
 801b668:	6078      	str	r0, [r7, #4]
	return ((PifStorageVar*)p_parent)->__is_format;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801b670:	4618      	mov	r0, r3
 801b672:	370c      	adds	r7, #12
 801b674:	46bd      	mov	sp, r7
 801b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67a:	4770      	bx	lr

0801b67c <pifStorageVar_Format>:

BOOL pifStorageVar_Format(PifStorage* p_parent)
{
 801b67c:	b590      	push	{r4, r7, lr}
 801b67e:	b08d      	sub	sp, #52	; 0x34
 801b680:	af00      	add	r7, sp, #0
 801b682:	6078      	str	r0, [r7, #4]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	627b      	str	r3, [r7, #36]	; 0x24
    PifStorageVarInfo* p_info = p_owner->_p_info;
 801b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b68c:	623b      	str	r3, [r7, #32]
    PifStorageVarDataInfo* p_data_info;
    uint8_t ptr, remain, k, len, data[16];

    if (!p_owner) {
 801b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b690:	2b00      	cmp	r3, #0
 801b692:	d104      	bne.n	801b69e <pifStorageVar_Format+0x22>
    	pif_error = E_INVALID_PARAM;
 801b694:	4b60      	ldr	r3, [pc, #384]	; (801b818 <pifStorageVar_Format+0x19c>)
 801b696:	2201      	movs	r2, #1
 801b698:	701a      	strb	r2, [r3, #0]
	    return FALSE;
 801b69a:	2300      	movs	r3, #0
 801b69c:	e0b8      	b.n	801b810 <pifStorageVar_Format+0x194>
    }

	p_info->first_node = DATA_NODE_NULL;
 801b69e:	6a3b      	ldr	r3, [r7, #32]
 801b6a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b6a4:	815a      	strh	r2, [r3, #10]
	p_info->free_node = 0;
 801b6a6:	6a3b      	ldr	r3, [r7, #32]
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	819a      	strh	r2, [r3, #12]
    p_info->crc_16 = pifCrc16((uint8_t*)p_info, sizeof(PifStorageVarInfo) - 6);
 801b6ac:	210a      	movs	r1, #10
 801b6ae:	6a38      	ldr	r0, [r7, #32]
 801b6b0:	f7f6 fac5 	bl	8011c3e <pifCrc16>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	461a      	mov	r2, r3
 801b6b8:	6a3b      	ldr	r3, [r7, #32]
 801b6ba:	81da      	strh	r2, [r3, #14]

    memset(p_owner->__p_info_buffer + sizeof(PifStorageVarInfo), 0xFF, p_owner->__info_bytes - sizeof(PifStorageVarInfo));
 801b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6c0:	f103 0010 	add.w	r0, r3, #16
 801b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6c8:	3b10      	subs	r3, #16
 801b6ca:	461a      	mov	r2, r3
 801b6cc:	21ff      	movs	r1, #255	; 0xff
 801b6ce:	f007 fd8b 	bl	80231e8 <memset>

    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	62bb      	str	r3, [r7, #40]	; 0x28
 801b6d6:	e019      	b.n	801b70c <pifStorageVar_Format+0x90>
    	p_data_info = &p_owner->__p_data_info[i];
 801b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b6dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b6de:	4613      	mov	r3, r2
 801b6e0:	005b      	lsls	r3, r3, #1
 801b6e2:	4413      	add	r3, r2
 801b6e4:	009b      	lsls	r3, r3, #2
 801b6e6:	440b      	add	r3, r1
 801b6e8:	61fb      	str	r3, [r7, #28]
    	p_data_info->next_node = i + 1;
 801b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	3301      	adds	r3, #1
 801b6f0:	b29a      	uxth	r2, r3
 801b6f2:	69fb      	ldr	r3, [r7, #28]
 801b6f4:	80da      	strh	r2, [r3, #6]
    	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b6f6:	2106      	movs	r1, #6
 801b6f8:	69f8      	ldr	r0, [r7, #28]
 801b6fa:	f7f6 faa0 	bl	8011c3e <pifCrc16>
 801b6fe:	4603      	mov	r3, r0
 801b700:	461a      	mov	r2, r3
 801b702:	69fb      	ldr	r3, [r7, #28]
 801b704:	815a      	strh	r2, [r3, #10]
    for (int i = 0; i < p_info->data_info_count - 1; i++) {
 801b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b708:	3301      	adds	r3, #1
 801b70a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b70c:	6a3b      	ldr	r3, [r7, #32]
 801b70e:	795b      	ldrb	r3, [r3, #5]
 801b710:	3b01      	subs	r3, #1
 801b712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b714:	429a      	cmp	r2, r3
 801b716:	dbdf      	blt.n	801b6d8 <pifStorageVar_Format+0x5c>
	}
	p_data_info = &p_owner->__p_data_info[p_info->data_info_count - 1];
 801b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b71a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b71c:	6a3b      	ldr	r3, [r7, #32]
 801b71e:	795b      	ldrb	r3, [r3, #5]
 801b720:	4619      	mov	r1, r3
 801b722:	460b      	mov	r3, r1
 801b724:	005b      	lsls	r3, r3, #1
 801b726:	440b      	add	r3, r1
 801b728:	009b      	lsls	r3, r3, #2
 801b72a:	3b0c      	subs	r3, #12
 801b72c:	4413      	add	r3, r2
 801b72e:	61fb      	str	r3, [r7, #28]
	p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801b730:	2106      	movs	r1, #6
 801b732:	69f8      	ldr	r0, [r7, #28]
 801b734:	f7f6 fa83 	bl	8011c3e <pifCrc16>
 801b738:	4603      	mov	r3, r0
 801b73a:	461a      	mov	r2, r3
 801b73c:	69fb      	ldr	r3, [r7, #28]
 801b73e:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b748:	2100      	movs	r1, #0
 801b74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b74c:	f7ff fdf4 	bl	801b338 <_writeData>
 801b750:	4603      	mov	r3, r0
 801b752:	2b00      	cmp	r3, #0
 801b754:	d104      	bne.n	801b760 <pifStorageVar_Format+0xe4>
    	pif_error = E_ACCESS_FAILED;
 801b756:	4b30      	ldr	r3, [pc, #192]	; (801b818 <pifStorageVar_Format+0x19c>)
 801b758:	220d      	movs	r2, #13
 801b75a:	701a      	strb	r2, [r3, #0]
        return FALSE;
 801b75c:	2300      	movs	r3, #0
 801b75e:	e057      	b.n	801b810 <pifStorageVar_Format+0x194>
    }

    ptr = 0;
 801b760:	2300      	movs	r3, #0
 801b762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    remain = p_owner->__info_bytes;
 801b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b76a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b76e:	e046      	b.n	801b7fe <pifStorageVar_Format+0x182>
    	len = remain > 16 ? 16 : remain;
 801b770:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b774:	2b10      	cmp	r3, #16
 801b776:	bf28      	it	cs
 801b778:	2310      	movcs	r3, #16
 801b77a:	76fb      	strb	r3, [r7, #27]
        if (!(*p_owner->parent.__act_read)(p_parent, data, ptr, len)) {
 801b77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b77e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801b780:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b784:	7efb      	ldrb	r3, [r7, #27]
 801b786:	f107 0108 	add.w	r1, r7, #8
 801b78a:	6878      	ldr	r0, [r7, #4]
 801b78c:	47a0      	blx	r4
 801b78e:	4603      	mov	r3, r0
 801b790:	2b00      	cmp	r3, #0
 801b792:	d104      	bne.n	801b79e <pifStorageVar_Format+0x122>
        	pif_error = E_ACCESS_FAILED;
 801b794:	4b20      	ldr	r3, [pc, #128]	; (801b818 <pifStorageVar_Format+0x19c>)
 801b796:	220d      	movs	r2, #13
 801b798:	701a      	strb	r2, [r3, #0]
            return FALSE;
 801b79a:	2300      	movs	r3, #0
 801b79c:	e038      	b.n	801b810 <pifStorageVar_Format+0x194>
        }
        for (k = 0; k < len; k++) {
 801b79e:	2300      	movs	r3, #0
 801b7a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b7a4:	e01a      	b.n	801b7dc <pifStorageVar_Format+0x160>
        	if (p_owner->__p_info_buffer[ptr + k] != data[k]) {
 801b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7aa:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 801b7ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b7b2:	440a      	add	r2, r1
 801b7b4:	4413      	add	r3, r2
 801b7b6:	781a      	ldrb	r2, [r3, #0]
 801b7b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b7bc:	3330      	adds	r3, #48	; 0x30
 801b7be:	443b      	add	r3, r7
 801b7c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 801b7c4:	429a      	cmp	r2, r3
 801b7c6:	d004      	beq.n	801b7d2 <pifStorageVar_Format+0x156>
            	pif_error = E_IS_NOT_FORMATED;
 801b7c8:	4b13      	ldr	r3, [pc, #76]	; (801b818 <pifStorageVar_Format+0x19c>)
 801b7ca:	220f      	movs	r2, #15
 801b7cc:	701a      	strb	r2, [r3, #0]
        		return FALSE;
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	e01e      	b.n	801b810 <pifStorageVar_Format+0x194>
        for (k = 0; k < len; k++) {
 801b7d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b7d6:	3301      	adds	r3, #1
 801b7d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801b7dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801b7e0:	7efb      	ldrb	r3, [r7, #27]
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	d3df      	bcc.n	801b7a6 <pifStorageVar_Format+0x12a>
        	}
        }
        ptr += len;
 801b7e6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801b7ea:	7efb      	ldrb	r3, [r7, #27]
 801b7ec:	4413      	add	r3, r2
 801b7ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        remain -= len;
 801b7f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801b7f6:	7efb      	ldrb	r3, [r7, #27]
 801b7f8:	1ad3      	subs	r3, r2, r3
 801b7fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    while (remain) {
 801b7fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801b802:	2b00      	cmp	r3, #0
 801b804:	d1b4      	bne.n	801b770 <pifStorageVar_Format+0xf4>
    }

    p_owner->__is_format = TRUE;
 801b806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b808:	2201      	movs	r2, #1
 801b80a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	return TRUE;
 801b80e:	2301      	movs	r3, #1
}
 801b810:	4618      	mov	r0, r3
 801b812:	3734      	adds	r7, #52	; 0x34
 801b814:	46bd      	mov	sp, r7
 801b816:	bd90      	pop	{r4, r7, pc}
 801b818:	20001d48 	.word	0x20001d48

0801b81c <pifStorageVar_Create>:

PifStorageDataInfoP pifStorageVar_Create(PifStorage* p_parent, uint16_t id, uint16_t size)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b08a      	sub	sp, #40	; 0x28
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
 801b824:	460b      	mov	r3, r1
 801b826:	807b      	strh	r3, [r7, #2]
 801b828:	4613      	mov	r3, r2
 801b82a:	803b      	strh	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	61fb      	str	r3, [r7, #28]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801b830:	69fb      	ldr	r3, [r7, #28]
 801b832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b834:	61bb      	str	r3, [r7, #24]
	PifStorageVarDataInfo* p_cur_data;
	PifStorageVarDataInfo* p_new_data;
	uint16_t cur_node, new_node, last, sector_size = p_info->sector_size;
 801b836:	69bb      	ldr	r3, [r7, #24]
 801b838:	88db      	ldrh	r3, [r3, #6]
 801b83a:	82fb      	strh	r3, [r7, #22]
	uint16_t sectors = (size + sector_size - 1) / sector_size;
 801b83c:	883a      	ldrh	r2, [r7, #0]
 801b83e:	8afb      	ldrh	r3, [r7, #22]
 801b840:	4413      	add	r3, r2
 801b842:	1e5a      	subs	r2, r3, #1
 801b844:	8afb      	ldrh	r3, [r7, #22]
 801b846:	fb92 f3f3 	sdiv	r3, r2, r3
 801b84a:	82bb      	strh	r3, [r7, #20]

    if (!p_owner || id == 0xFF) {
 801b84c:	69fb      	ldr	r3, [r7, #28]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d002      	beq.n	801b858 <pifStorageVar_Create+0x3c>
 801b852:	887b      	ldrh	r3, [r7, #2]
 801b854:	2bff      	cmp	r3, #255	; 0xff
 801b856:	d104      	bne.n	801b862 <pifStorageVar_Create+0x46>
    	pif_error = E_INVALID_PARAM;
 801b858:	4b9a      	ldr	r3, [pc, #616]	; (801bac4 <pifStorageVar_Create+0x2a8>)
 801b85a:	2201      	movs	r2, #1
 801b85c:	701a      	strb	r2, [r3, #0]
	    return NULL;
 801b85e:	2300      	movs	r3, #0
 801b860:	e12b      	b.n	801baba <pifStorageVar_Create+0x29e>
    }

	if (!p_owner->__is_format) {
 801b862:	69fb      	ldr	r3, [r7, #28]
 801b864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d104      	bne.n	801b876 <pifStorageVar_Create+0x5a>
		pif_error = E_IS_NOT_FORMATED;
 801b86c:	4b95      	ldr	r3, [pc, #596]	; (801bac4 <pifStorageVar_Create+0x2a8>)
 801b86e:	220f      	movs	r2, #15
 801b870:	701a      	strb	r2, [r3, #0]
		return NULL;
 801b872:	2300      	movs	r3, #0
 801b874:	e121      	b.n	801baba <pifStorageVar_Create+0x29e>
	}

	if (p_info->first_node == DATA_NODE_NULL) {
 801b876:	69bb      	ldr	r3, [r7, #24]
 801b878:	895b      	ldrh	r3, [r3, #10]
 801b87a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b87e:	4293      	cmp	r3, r2
 801b880:	d127      	bne.n	801b8d2 <pifStorageVar_Create+0xb6>
		if (sectors > p_owner->_p_info->max_sector_count) {
 801b882:	69fb      	ldr	r3, [r7, #28]
 801b884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b886:	891b      	ldrh	r3, [r3, #8]
 801b888:	8aba      	ldrh	r2, [r7, #20]
 801b88a:	429a      	cmp	r2, r3
 801b88c:	d904      	bls.n	801b898 <pifStorageVar_Create+0x7c>
			pif_error = E_OVERFLOW_BUFFER;
 801b88e:	4b8d      	ldr	r3, [pc, #564]	; (801bac4 <pifStorageVar_Create+0x2a8>)
 801b890:	2204      	movs	r2, #4
 801b892:	701a      	strb	r2, [r3, #0]
			return NULL;
 801b894:	2300      	movs	r3, #0
 801b896:	e110      	b.n	801baba <pifStorageVar_Create+0x29e>
		}

		last = p_owner->__info_sectors;
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b89c:	843b      	strh	r3, [r7, #32]

		new_node = _getNewDataNode(p_owner);
 801b89e:	69f8      	ldr	r0, [r7, #28]
 801b8a0:	f7ff fcf2 	bl	801b288 <_getNewDataNode>
 801b8a4:	4603      	mov	r3, r0
 801b8a6:	81fb      	strh	r3, [r7, #14]

		p_new_data = &p_owner->__p_data_info[new_node];
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b8ac:	89fa      	ldrh	r2, [r7, #14]
 801b8ae:	4613      	mov	r3, r2
 801b8b0:	005b      	lsls	r3, r3, #1
 801b8b2:	4413      	add	r3, r2
 801b8b4:	009b      	lsls	r3, r3, #2
 801b8b6:	440b      	add	r3, r1
 801b8b8:	627b      	str	r3, [r7, #36]	; 0x24
		p_new_data->next_node = p_info->first_node;
 801b8ba:	69bb      	ldr	r3, [r7, #24]
 801b8bc:	895a      	ldrh	r2, [r3, #10]
 801b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8c0:	80da      	strh	r2, [r3, #6]
		p_new_data->prev_node = DATA_NODE_NULL;
 801b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b8c8:	811a      	strh	r2, [r3, #8]

		p_info->first_node = new_node;
 801b8ca:	69bb      	ldr	r3, [r7, #24]
 801b8cc:	89fa      	ldrh	r2, [r7, #14]
 801b8ce:	815a      	strh	r2, [r3, #10]
		goto save;
 801b8d0:	e0d1      	b.n	801ba76 <pifStorageVar_Create+0x25a>
	}
	else {
		cur_node = p_info->first_node;
 801b8d2:	69bb      	ldr	r3, [r7, #24]
 801b8d4:	895b      	ldrh	r3, [r3, #10]
 801b8d6:	847b      	strh	r3, [r7, #34]	; 0x22
		p_cur_data = &p_owner->__p_data_info[cur_node];
 801b8d8:	69fb      	ldr	r3, [r7, #28]
 801b8da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b8dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b8de:	4613      	mov	r3, r2
 801b8e0:	005b      	lsls	r3, r3, #1
 801b8e2:	4413      	add	r3, r2
 801b8e4:	009b      	lsls	r3, r3, #2
 801b8e6:	440b      	add	r3, r1
 801b8e8:	613b      	str	r3, [r7, #16]
		last = p_owner->__info_sectors;
 801b8ea:	69fb      	ldr	r3, [r7, #28]
 801b8ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b8ee:	843b      	strh	r3, [r7, #32]
		if (p_cur_data->first_sector != last) {
 801b8f0:	693b      	ldr	r3, [r7, #16]
 801b8f2:	889b      	ldrh	r3, [r3, #4]
 801b8f4:	8c3a      	ldrh	r2, [r7, #32]
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	f000 80b2 	beq.w	801ba60 <pifStorageVar_Create+0x244>
			if (p_cur_data->first_sector - last >= sectors) {
 801b8fc:	693b      	ldr	r3, [r7, #16]
 801b8fe:	889b      	ldrh	r3, [r3, #4]
 801b900:	461a      	mov	r2, r3
 801b902:	8c3b      	ldrh	r3, [r7, #32]
 801b904:	1ad2      	subs	r2, r2, r3
 801b906:	8abb      	ldrh	r3, [r7, #20]
 801b908:	429a      	cmp	r2, r3
 801b90a:	f2c0 80a9 	blt.w	801ba60 <pifStorageVar_Create+0x244>
				new_node = _getNewDataNode(p_owner);
 801b90e:	69f8      	ldr	r0, [r7, #28]
 801b910:	f7ff fcba 	bl	801b288 <_getNewDataNode>
 801b914:	4603      	mov	r3, r0
 801b916:	81fb      	strh	r3, [r7, #14]
				if (new_node == DATA_NODE_NULL) return NULL;
 801b918:	89fb      	ldrh	r3, [r7, #14]
 801b91a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b91e:	4293      	cmp	r3, r2
 801b920:	d101      	bne.n	801b926 <pifStorageVar_Create+0x10a>
 801b922:	2300      	movs	r3, #0
 801b924:	e0c9      	b.n	801baba <pifStorageVar_Create+0x29e>

				p_new_data = &p_owner->__p_data_info[new_node];
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b92a:	89fa      	ldrh	r2, [r7, #14]
 801b92c:	4613      	mov	r3, r2
 801b92e:	005b      	lsls	r3, r3, #1
 801b930:	4413      	add	r3, r2
 801b932:	009b      	lsls	r3, r3, #2
 801b934:	440b      	add	r3, r1
 801b936:	627b      	str	r3, [r7, #36]	; 0x24
				p_new_data->next_node = p_info->first_node;
 801b938:	69bb      	ldr	r3, [r7, #24]
 801b93a:	895a      	ldrh	r2, [r3, #10]
 801b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b93e:	80da      	strh	r2, [r3, #6]
				p_new_data->prev_node = DATA_NODE_NULL;
 801b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b946:	811a      	strh	r2, [r3, #8]

				p_info->first_node = new_node;
 801b948:	69bb      	ldr	r3, [r7, #24]
 801b94a:	89fa      	ldrh	r2, [r7, #14]
 801b94c:	815a      	strh	r2, [r3, #10]
				p_cur_data->prev_node = new_node;
 801b94e:	693b      	ldr	r3, [r7, #16]
 801b950:	89fa      	ldrh	r2, [r7, #14]
 801b952:	811a      	strh	r2, [r3, #8]
				goto save;
 801b954:	e08f      	b.n	801ba76 <pifStorageVar_Create+0x25a>
			}
		}
		while (cur_node != DATA_NODE_NULL) {
			p_cur_data = &p_owner->__p_data_info[cur_node];
 801b956:	69fb      	ldr	r3, [r7, #28]
 801b958:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b95a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b95c:	4613      	mov	r3, r2
 801b95e:	005b      	lsls	r3, r3, #1
 801b960:	4413      	add	r3, r2
 801b962:	009b      	lsls	r3, r3, #2
 801b964:	440b      	add	r3, r1
 801b966:	613b      	str	r3, [r7, #16]
			last = p_cur_data->first_sector + (p_cur_data->size + sector_size - 1) / sector_size;
 801b968:	693b      	ldr	r3, [r7, #16]
 801b96a:	889a      	ldrh	r2, [r3, #4]
 801b96c:	693b      	ldr	r3, [r7, #16]
 801b96e:	885b      	ldrh	r3, [r3, #2]
 801b970:	4619      	mov	r1, r3
 801b972:	8afb      	ldrh	r3, [r7, #22]
 801b974:	440b      	add	r3, r1
 801b976:	1e59      	subs	r1, r3, #1
 801b978:	8afb      	ldrh	r3, [r7, #22]
 801b97a:	fb91 f3f3 	sdiv	r3, r1, r3
 801b97e:	b29b      	uxth	r3, r3
 801b980:	4413      	add	r3, r2
 801b982:	843b      	strh	r3, [r7, #32]
			if (p_cur_data->next_node == DATA_NODE_NULL) {
 801b984:	693b      	ldr	r3, [r7, #16]
 801b986:	88db      	ldrh	r3, [r3, #6]
 801b988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b98c:	4293      	cmp	r3, r2
 801b98e:	d127      	bne.n	801b9e0 <pifStorageVar_Create+0x1c4>
				if (p_info->max_sector_count - last >= sectors) {
 801b990:	69bb      	ldr	r3, [r7, #24]
 801b992:	891b      	ldrh	r3, [r3, #8]
 801b994:	461a      	mov	r2, r3
 801b996:	8c3b      	ldrh	r3, [r7, #32]
 801b998:	1ad2      	subs	r2, r2, r3
 801b99a:	8abb      	ldrh	r3, [r7, #20]
 801b99c:	429a      	cmp	r2, r3
 801b99e:	db5c      	blt.n	801ba5a <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801b9a0:	69f8      	ldr	r0, [r7, #28]
 801b9a2:	f7ff fc71 	bl	801b288 <_getNewDataNode>
 801b9a6:	4603      	mov	r3, r0
 801b9a8:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801b9aa:	89fb      	ldrh	r3, [r7, #14]
 801b9ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9b0:	4293      	cmp	r3, r2
 801b9b2:	d101      	bne.n	801b9b8 <pifStorageVar_Create+0x19c>
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	e080      	b.n	801baba <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801b9b8:	69fb      	ldr	r3, [r7, #28]
 801b9ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801b9bc:	89fa      	ldrh	r2, [r7, #14]
 801b9be:	4613      	mov	r3, r2
 801b9c0:	005b      	lsls	r3, r3, #1
 801b9c2:	4413      	add	r3, r2
 801b9c4:	009b      	lsls	r3, r3, #2
 801b9c6:	440b      	add	r3, r1
 801b9c8:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	88da      	ldrh	r2, [r3, #6]
 801b9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9d0:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b9d6:	811a      	strh	r2, [r3, #8]

					p_cur_data->next_node = new_node;
 801b9d8:	693b      	ldr	r3, [r7, #16]
 801b9da:	89fa      	ldrh	r2, [r7, #14]
 801b9dc:	80da      	strh	r2, [r3, #6]
					goto save;
 801b9de:	e04a      	b.n	801ba76 <pifStorageVar_Create+0x25a>
				}
			}
			else {
				if (p_owner->__p_data_info[p_cur_data->next_node].first_sector - last >= sectors) {
 801b9e0:	69fb      	ldr	r3, [r7, #28]
 801b9e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b9e4:	693b      	ldr	r3, [r7, #16]
 801b9e6:	88db      	ldrh	r3, [r3, #6]
 801b9e8:	4619      	mov	r1, r3
 801b9ea:	460b      	mov	r3, r1
 801b9ec:	005b      	lsls	r3, r3, #1
 801b9ee:	440b      	add	r3, r1
 801b9f0:	009b      	lsls	r3, r3, #2
 801b9f2:	4413      	add	r3, r2
 801b9f4:	889b      	ldrh	r3, [r3, #4]
 801b9f6:	461a      	mov	r2, r3
 801b9f8:	8c3b      	ldrh	r3, [r7, #32]
 801b9fa:	1ad2      	subs	r2, r2, r3
 801b9fc:	8abb      	ldrh	r3, [r7, #20]
 801b9fe:	429a      	cmp	r2, r3
 801ba00:	db2b      	blt.n	801ba5a <pifStorageVar_Create+0x23e>
					new_node = _getNewDataNode(p_owner);
 801ba02:	69f8      	ldr	r0, [r7, #28]
 801ba04:	f7ff fc40 	bl	801b288 <_getNewDataNode>
 801ba08:	4603      	mov	r3, r0
 801ba0a:	81fb      	strh	r3, [r7, #14]
					if (new_node == DATA_NODE_NULL) return NULL;
 801ba0c:	89fb      	ldrh	r3, [r7, #14]
 801ba0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba12:	4293      	cmp	r3, r2
 801ba14:	d101      	bne.n	801ba1a <pifStorageVar_Create+0x1fe>
 801ba16:	2300      	movs	r3, #0
 801ba18:	e04f      	b.n	801baba <pifStorageVar_Create+0x29e>

					p_new_data = &p_owner->__p_data_info[new_node];
 801ba1a:	69fb      	ldr	r3, [r7, #28]
 801ba1c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801ba1e:	89fa      	ldrh	r2, [r7, #14]
 801ba20:	4613      	mov	r3, r2
 801ba22:	005b      	lsls	r3, r3, #1
 801ba24:	4413      	add	r3, r2
 801ba26:	009b      	lsls	r3, r3, #2
 801ba28:	440b      	add	r3, r1
 801ba2a:	627b      	str	r3, [r7, #36]	; 0x24
					p_new_data->next_node = p_cur_data->next_node;
 801ba2c:	693b      	ldr	r3, [r7, #16]
 801ba2e:	88da      	ldrh	r2, [r3, #6]
 801ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba32:	80da      	strh	r2, [r3, #6]
					p_new_data->prev_node = cur_node;
 801ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ba38:	811a      	strh	r2, [r3, #8]

					p_owner->__p_data_info[p_cur_data->next_node].prev_node = new_node;
 801ba3a:	69fb      	ldr	r3, [r7, #28]
 801ba3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ba3e:	693b      	ldr	r3, [r7, #16]
 801ba40:	88db      	ldrh	r3, [r3, #6]
 801ba42:	4619      	mov	r1, r3
 801ba44:	460b      	mov	r3, r1
 801ba46:	005b      	lsls	r3, r3, #1
 801ba48:	440b      	add	r3, r1
 801ba4a:	009b      	lsls	r3, r3, #2
 801ba4c:	4413      	add	r3, r2
 801ba4e:	89fa      	ldrh	r2, [r7, #14]
 801ba50:	811a      	strh	r2, [r3, #8]
					p_cur_data->next_node = new_node;
 801ba52:	693b      	ldr	r3, [r7, #16]
 801ba54:	89fa      	ldrh	r2, [r7, #14]
 801ba56:	80da      	strh	r2, [r3, #6]
					goto save;
 801ba58:	e00d      	b.n	801ba76 <pifStorageVar_Create+0x25a>
				}
			}
			cur_node = p_cur_data->next_node;
 801ba5a:	693b      	ldr	r3, [r7, #16]
 801ba5c:	88db      	ldrh	r3, [r3, #6]
 801ba5e:	847b      	strh	r3, [r7, #34]	; 0x22
		while (cur_node != DATA_NODE_NULL) {
 801ba60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ba62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba66:	4293      	cmp	r3, r2
 801ba68:	f47f af75 	bne.w	801b956 <pifStorageVar_Create+0x13a>
		}
	}
	pif_error = E_OVERFLOW_BUFFER;
 801ba6c:	4b15      	ldr	r3, [pc, #84]	; (801bac4 <pifStorageVar_Create+0x2a8>)
 801ba6e:	2204      	movs	r2, #4
 801ba70:	701a      	strb	r2, [r3, #0]
	return NULL;
 801ba72:	2300      	movs	r3, #0
 801ba74:	e021      	b.n	801baba <pifStorageVar_Create+0x29e>

save:
	p_new_data->id = id;
 801ba76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba78:	887a      	ldrh	r2, [r7, #2]
 801ba7a:	801a      	strh	r2, [r3, #0]
	p_new_data->size = size;
 801ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba7e:	883a      	ldrh	r2, [r7, #0]
 801ba80:	805a      	strh	r2, [r3, #2]
	p_new_data->first_sector = last;
 801ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba84:	8c3a      	ldrh	r2, [r7, #32]
 801ba86:	809a      	strh	r2, [r3, #4]
	p_new_data->crc_16 = pifCrc16((uint8_t*)p_new_data, sizeof(PifStorageVarDataInfo) - 6);
 801ba88:	2106      	movs	r1, #6
 801ba8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ba8c:	f7f6 f8d7 	bl	8011c3e <pifCrc16>
 801ba90:	4603      	mov	r3, r0
 801ba92:	461a      	mov	r2, r3
 801ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba96:	815a      	strh	r2, [r3, #10]

    if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801ba98:	69fb      	ldr	r3, [r7, #28]
 801ba9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801baa0:	2100      	movs	r1, #0
 801baa2:	69f8      	ldr	r0, [r7, #28]
 801baa4:	f7ff fc48 	bl	801b338 <_writeData>
 801baa8:	4603      	mov	r3, r0
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d104      	bne.n	801bab8 <pifStorageVar_Create+0x29c>
    	pif_error = E_ACCESS_FAILED;
 801baae:	4b05      	ldr	r3, [pc, #20]	; (801bac4 <pifStorageVar_Create+0x2a8>)
 801bab0:	220d      	movs	r2, #13
 801bab2:	701a      	strb	r2, [r3, #0]
        return NULL;
 801bab4:	2300      	movs	r3, #0
 801bab6:	e000      	b.n	801baba <pifStorageVar_Create+0x29e>
    }
	return (PifStorageDataInfoP)p_new_data;
 801bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801baba:	4618      	mov	r0, r3
 801babc:	3728      	adds	r7, #40	; 0x28
 801babe:	46bd      	mov	sp, r7
 801bac0:	bd80      	pop	{r7, pc}
 801bac2:	bf00      	nop
 801bac4:	20001d48 	.word	0x20001d48

0801bac8 <pifStorageVar_Delete>:

BOOL pifStorageVar_Delete(PifStorage* p_parent, uint16_t id)
{
 801bac8:	b580      	push	{r7, lr}
 801baca:	b086      	sub	sp, #24
 801bacc:	af00      	add	r7, sp, #0
 801bace:	6078      	str	r0, [r7, #4]
 801bad0:	460b      	mov	r3, r1
 801bad2:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801bad8:	693b      	ldr	r3, [r7, #16]
 801bada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801badc:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801bade:	693b      	ldr	r3, [r7, #16]
 801bae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d104      	bne.n	801baf2 <pifStorageVar_Delete+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801bae8:	4b3d      	ldr	r3, [pc, #244]	; (801bbe0 <pifStorageVar_Delete+0x118>)
 801baea:	220f      	movs	r2, #15
 801baec:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801baee:	2300      	movs	r3, #0
 801baf0:	e072      	b.n	801bbd8 <pifStorageVar_Delete+0x110>
	}

	node = p_info->first_node;
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	895b      	ldrh	r3, [r3, #10]
 801baf6:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801baf8:	e065      	b.n	801bbc6 <pifStorageVar_Delete+0xfe>
		p_data_info = &p_owner->__p_data_info[node];
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bafe:	8afa      	ldrh	r2, [r7, #22]
 801bb00:	4613      	mov	r3, r2
 801bb02:	005b      	lsls	r3, r3, #1
 801bb04:	4413      	add	r3, r2
 801bb06:	009b      	lsls	r3, r3, #2
 801bb08:	440b      	add	r3, r1
 801bb0a:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	881b      	ldrh	r3, [r3, #0]
 801bb10:	887a      	ldrh	r2, [r7, #2]
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d154      	bne.n	801bbc0 <pifStorageVar_Delete+0xf8>
			memset(p_data_info, 0xFF, sizeof(PifStorageVarDataInfo) - 6);
 801bb16:	2206      	movs	r2, #6
 801bb18:	21ff      	movs	r1, #255	; 0xff
 801bb1a:	68b8      	ldr	r0, [r7, #8]
 801bb1c:	f007 fb64 	bl	80231e8 <memset>
			if (p_data_info->prev_node != DATA_NODE_NULL) {
 801bb20:	68bb      	ldr	r3, [r7, #8]
 801bb22:	891b      	ldrh	r3, [r3, #8]
 801bb24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	d00d      	beq.n	801bb48 <pifStorageVar_Delete+0x80>
				p_owner->__p_data_info[p_data_info->prev_node].next_node = p_data_info->next_node;
 801bb2c:	693b      	ldr	r3, [r7, #16]
 801bb2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bb30:	68bb      	ldr	r3, [r7, #8]
 801bb32:	891b      	ldrh	r3, [r3, #8]
 801bb34:	4619      	mov	r1, r3
 801bb36:	460b      	mov	r3, r1
 801bb38:	005b      	lsls	r3, r3, #1
 801bb3a:	440b      	add	r3, r1
 801bb3c:	009b      	lsls	r3, r3, #2
 801bb3e:	4413      	add	r3, r2
 801bb40:	68ba      	ldr	r2, [r7, #8]
 801bb42:	88d2      	ldrh	r2, [r2, #6]
 801bb44:	80da      	strh	r2, [r3, #6]
 801bb46:	e003      	b.n	801bb50 <pifStorageVar_Delete+0x88>
			}
			else {
				p_info->first_node = p_data_info->next_node;
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	88da      	ldrh	r2, [r3, #6]
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	815a      	strh	r2, [r3, #10]
			}
			if (p_data_info->next_node != DATA_NODE_NULL) {
 801bb50:	68bb      	ldr	r3, [r7, #8]
 801bb52:	88db      	ldrh	r3, [r3, #6]
 801bb54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	d00c      	beq.n	801bb76 <pifStorageVar_Delete+0xae>
				p_owner->__p_data_info[p_data_info->next_node].prev_node = p_data_info->prev_node;
 801bb5c:	693b      	ldr	r3, [r7, #16]
 801bb5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bb60:	68bb      	ldr	r3, [r7, #8]
 801bb62:	88db      	ldrh	r3, [r3, #6]
 801bb64:	4619      	mov	r1, r3
 801bb66:	460b      	mov	r3, r1
 801bb68:	005b      	lsls	r3, r3, #1
 801bb6a:	440b      	add	r3, r1
 801bb6c:	009b      	lsls	r3, r3, #2
 801bb6e:	4413      	add	r3, r2
 801bb70:	68ba      	ldr	r2, [r7, #8]
 801bb72:	8912      	ldrh	r2, [r2, #8]
 801bb74:	811a      	strh	r2, [r3, #8]
			}
			p_data_info->next_node = p_info->free_node;
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	899a      	ldrh	r2, [r3, #12]
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	80da      	strh	r2, [r3, #6]
			p_data_info->prev_node = DATA_NODE_NULL;
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bb84:	811a      	strh	r2, [r3, #8]
			p_data_info->crc_16 = pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6);
 801bb86:	2106      	movs	r1, #6
 801bb88:	68b8      	ldr	r0, [r7, #8]
 801bb8a:	f7f6 f858 	bl	8011c3e <pifCrc16>
 801bb8e:	4603      	mov	r3, r0
 801bb90:	461a      	mov	r2, r3
 801bb92:	68bb      	ldr	r3, [r7, #8]
 801bb94:	815a      	strh	r2, [r3, #10]
			p_info->free_node = node;
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	8afa      	ldrh	r2, [r7, #22]
 801bb9a:	819a      	strh	r2, [r3, #12]

			if (!_writeData(p_owner, 0, p_owner->__p_info_buffer, p_owner->__info_bytes)) {
 801bb9c:	693b      	ldr	r3, [r7, #16]
 801bb9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bba4:	2100      	movs	r1, #0
 801bba6:	6938      	ldr	r0, [r7, #16]
 801bba8:	f7ff fbc6 	bl	801b338 <_writeData>
 801bbac:	4603      	mov	r3, r0
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d104      	bne.n	801bbbc <pifStorageVar_Delete+0xf4>
		    	pif_error = E_ACCESS_FAILED;
 801bbb2:	4b0b      	ldr	r3, [pc, #44]	; (801bbe0 <pifStorageVar_Delete+0x118>)
 801bbb4:	220d      	movs	r2, #13
 801bbb6:	701a      	strb	r2, [r3, #0]
				return FALSE;
 801bbb8:	2300      	movs	r3, #0
 801bbba:	e00d      	b.n	801bbd8 <pifStorageVar_Delete+0x110>
			}
			return TRUE;
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	e00b      	b.n	801bbd8 <pifStorageVar_Delete+0x110>
		}
		node = p_data_info->next_node;
 801bbc0:	68bb      	ldr	r3, [r7, #8]
 801bbc2:	88db      	ldrh	r3, [r3, #6]
 801bbc4:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bbc6:	8afb      	ldrh	r3, [r7, #22]
 801bbc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbcc:	4293      	cmp	r3, r2
 801bbce:	d194      	bne.n	801bafa <pifStorageVar_Delete+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801bbd0:	4b03      	ldr	r3, [pc, #12]	; (801bbe0 <pifStorageVar_Delete+0x118>)
 801bbd2:	220e      	movs	r2, #14
 801bbd4:	701a      	strb	r2, [r3, #0]
	return FALSE;
 801bbd6:	2300      	movs	r3, #0
}
 801bbd8:	4618      	mov	r0, r3
 801bbda:	3718      	adds	r7, #24
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	20001d48 	.word	0x20001d48

0801bbe4 <pifStorageVar_Open>:

PifStorageDataInfoP pifStorageVar_Open(PifStorage* p_parent, uint16_t id)
{
 801bbe4:	b590      	push	{r4, r7, lr}
 801bbe6:	b087      	sub	sp, #28
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
 801bbec:	460b      	mov	r3, r1
 801bbee:	807b      	strh	r3, [r7, #2]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	613b      	str	r3, [r7, #16]
	PifStorageVarInfo* p_info = p_owner->_p_info;
 801bbf4:	693b      	ldr	r3, [r7, #16]
 801bbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbf8:	60fb      	str	r3, [r7, #12]
	PifStorageVarDataInfo* p_data_info;
	uint16_t node;

	if (!p_owner->__is_format) {
 801bbfa:	693b      	ldr	r3, [r7, #16]
 801bbfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d104      	bne.n	801bc0e <pifStorageVar_Open+0x2a>
		pif_error = E_IS_NOT_FORMATED;
 801bc04:	4b1b      	ldr	r3, [pc, #108]	; (801bc74 <pifStorageVar_Open+0x90>)
 801bc06:	220f      	movs	r2, #15
 801bc08:	701a      	strb	r2, [r3, #0]
		return NULL;
 801bc0a:	2300      	movs	r3, #0
 801bc0c:	e02d      	b.n	801bc6a <pifStorageVar_Open+0x86>
	}

	node = p_info->first_node;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	895b      	ldrh	r3, [r3, #10]
 801bc12:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bc14:	e020      	b.n	801bc58 <pifStorageVar_Open+0x74>
		p_data_info = &p_owner->__p_data_info[node];
 801bc16:	693b      	ldr	r3, [r7, #16]
 801bc18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801bc1a:	8afa      	ldrh	r2, [r7, #22]
 801bc1c:	4613      	mov	r3, r2
 801bc1e:	005b      	lsls	r3, r3, #1
 801bc20:	4413      	add	r3, r2
 801bc22:	009b      	lsls	r3, r3, #2
 801bc24:	440b      	add	r3, r1
 801bc26:	60bb      	str	r3, [r7, #8]
		if (id == p_data_info->id) {
 801bc28:	68bb      	ldr	r3, [r7, #8]
 801bc2a:	881b      	ldrh	r3, [r3, #0]
 801bc2c:	887a      	ldrh	r2, [r7, #2]
 801bc2e:	429a      	cmp	r2, r3
 801bc30:	d10f      	bne.n	801bc52 <pifStorageVar_Open+0x6e>
			if (p_data_info->crc_16 != pifCrc16((uint8_t*)p_data_info, sizeof(PifStorageVarDataInfo) - 6)) {
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	895c      	ldrh	r4, [r3, #10]
 801bc36:	2106      	movs	r1, #6
 801bc38:	68b8      	ldr	r0, [r7, #8]
 801bc3a:	f7f6 f800 	bl	8011c3e <pifCrc16>
 801bc3e:	4603      	mov	r3, r0
 801bc40:	429c      	cmp	r4, r3
 801bc42:	d004      	beq.n	801bc4e <pifStorageVar_Open+0x6a>
		        pif_error = E_MISMATCH_CRC;
 801bc44:	4b0b      	ldr	r3, [pc, #44]	; (801bc74 <pifStorageVar_Open+0x90>)
 801bc46:	220c      	movs	r2, #12
 801bc48:	701a      	strb	r2, [r3, #0]
				return NULL;
 801bc4a:	2300      	movs	r3, #0
 801bc4c:	e00d      	b.n	801bc6a <pifStorageVar_Open+0x86>
			}
			return (PifStorageDataInfoP)p_data_info;
 801bc4e:	68bb      	ldr	r3, [r7, #8]
 801bc50:	e00b      	b.n	801bc6a <pifStorageVar_Open+0x86>
		}
		node = p_data_info->next_node;
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	88db      	ldrh	r3, [r3, #6]
 801bc56:	82fb      	strh	r3, [r7, #22]
	while (node != DATA_NODE_NULL) {
 801bc58:	8afb      	ldrh	r3, [r7, #22]
 801bc5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc5e:	4293      	cmp	r3, r2
 801bc60:	d1d9      	bne.n	801bc16 <pifStorageVar_Open+0x32>
	}
	pif_error = E_CANNOT_FOUND;
 801bc62:	4b04      	ldr	r3, [pc, #16]	; (801bc74 <pifStorageVar_Open+0x90>)
 801bc64:	220e      	movs	r2, #14
 801bc66:	701a      	strb	r2, [r3, #0]
	return NULL;
 801bc68:	2300      	movs	r3, #0
}
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	371c      	adds	r7, #28
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	bd90      	pop	{r4, r7, pc}
 801bc72:	bf00      	nop
 801bc74:	20001d48 	.word	0x20001d48

0801bc78 <pifStorageVar_Read>:

BOOL pifStorageVar_Read(PifStorage* p_parent, uint8_t* p_dst, PifStorageDataInfoP p_src, size_t size)
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b088      	sub	sp, #32
 801bc7c:	af02      	add	r7, sp, #8
 801bc7e:	60f8      	str	r0, [r7, #12]
 801bc80:	60b9      	str	r1, [r7, #8]
 801bc82:	607a      	str	r2, [r7, #4]
 801bc84:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d104      	bne.n	801bc9e <pifStorageVar_Read+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801bc94:	4b0d      	ldr	r3, [pc, #52]	; (801bccc <pifStorageVar_Read+0x54>)
 801bc96:	220f      	movs	r2, #15
 801bc98:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	e012      	b.n	801bcc4 <pifStorageVar_Read+0x4c>
	}

	return _readData(p_owner, p_dst, ((PifStorageVarDataInfo*)p_src)->first_sector * p_owner->_p_info->sector_size, size, p_owner->_p_info->sector_size);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	889b      	ldrh	r3, [r3, #4]
 801bca2:	461a      	mov	r2, r3
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bca8:	88db      	ldrh	r3, [r3, #6]
 801bcaa:	fb02 f303 	mul.w	r3, r2, r3
 801bcae:	461a      	mov	r2, r3
 801bcb0:	697b      	ldr	r3, [r7, #20]
 801bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcb4:	88db      	ldrh	r3, [r3, #6]
 801bcb6:	9300      	str	r3, [sp, #0]
 801bcb8:	683b      	ldr	r3, [r7, #0]
 801bcba:	68b9      	ldr	r1, [r7, #8]
 801bcbc:	6978      	ldr	r0, [r7, #20]
 801bcbe:	f7ff fb0b 	bl	801b2d8 <_readData>
 801bcc2:	4603      	mov	r3, r0
}
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	3718      	adds	r7, #24
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	bd80      	pop	{r7, pc}
 801bccc:	20001d48 	.word	0x20001d48

0801bcd0 <pifStorageVar_Write>:

BOOL pifStorageVar_Write(PifStorage* p_parent, PifStorageDataInfoP p_dst, uint8_t* p_src, size_t size)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b086      	sub	sp, #24
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	60f8      	str	r0, [r7, #12]
 801bcd8:	60b9      	str	r1, [r7, #8]
 801bcda:	607a      	str	r2, [r7, #4]
 801bcdc:	603b      	str	r3, [r7, #0]
	PifStorageVar* p_owner = (PifStorageVar*)p_parent;
 801bcde:	68fb      	ldr	r3, [r7, #12]
 801bce0:	617b      	str	r3, [r7, #20]

	if (!p_owner->__is_format) {
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d104      	bne.n	801bcf6 <pifStorageVar_Write+0x26>
		pif_error = E_IS_NOT_FORMATED;
 801bcec:	4b0b      	ldr	r3, [pc, #44]	; (801bd1c <pifStorageVar_Write+0x4c>)
 801bcee:	220f      	movs	r2, #15
 801bcf0:	701a      	strb	r2, [r3, #0]
		return FALSE;
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	e00e      	b.n	801bd14 <pifStorageVar_Write+0x44>
	}

	return _writeData(p_owner, ((PifStorageVarDataInfo*)p_dst)->first_sector * p_owner->_p_info->sector_size, p_src, size);
 801bcf6:	68bb      	ldr	r3, [r7, #8]
 801bcf8:	889b      	ldrh	r3, [r3, #4]
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	697b      	ldr	r3, [r7, #20]
 801bcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd00:	88db      	ldrh	r3, [r3, #6]
 801bd02:	fb02 f303 	mul.w	r3, r2, r3
 801bd06:	4619      	mov	r1, r3
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	687a      	ldr	r2, [r7, #4]
 801bd0c:	6978      	ldr	r0, [r7, #20]
 801bd0e:	f7ff fb13 	bl	801b338 <_writeData>
 801bd12:	4603      	mov	r3, r0
}
 801bd14:	4618      	mov	r0, r3
 801bd16:	3718      	adds	r7, #24
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}
 801bd1c:	20001d48 	.word	0x20001d48

0801bd20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bd24:	4b0e      	ldr	r3, [pc, #56]	; (801bd60 <HAL_Init+0x40>)
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	4a0d      	ldr	r2, [pc, #52]	; (801bd60 <HAL_Init+0x40>)
 801bd2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bd2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801bd30:	4b0b      	ldr	r3, [pc, #44]	; (801bd60 <HAL_Init+0x40>)
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	4a0a      	ldr	r2, [pc, #40]	; (801bd60 <HAL_Init+0x40>)
 801bd36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bd3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801bd3c:	4b08      	ldr	r3, [pc, #32]	; (801bd60 <HAL_Init+0x40>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	4a07      	ldr	r2, [pc, #28]	; (801bd60 <HAL_Init+0x40>)
 801bd42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bd46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bd48:	2003      	movs	r0, #3
 801bd4a:	f000 fd51 	bl	801c7f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801bd4e:	2000      	movs	r0, #0
 801bd50:	f000 f808 	bl	801bd64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801bd54:	f7e7 fb30 	bl	80033b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bd58:	2300      	movs	r3, #0
}
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	bd80      	pop	{r7, pc}
 801bd5e:	bf00      	nop
 801bd60:	40023c00 	.word	0x40023c00

0801bd64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b082      	sub	sp, #8
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801bd6c:	4b12      	ldr	r3, [pc, #72]	; (801bdb8 <HAL_InitTick+0x54>)
 801bd6e:	681a      	ldr	r2, [r3, #0]
 801bd70:	4b12      	ldr	r3, [pc, #72]	; (801bdbc <HAL_InitTick+0x58>)
 801bd72:	781b      	ldrb	r3, [r3, #0]
 801bd74:	4619      	mov	r1, r3
 801bd76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bd7a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd7e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd82:	4618      	mov	r0, r3
 801bd84:	f000 fd77 	bl	801c876 <HAL_SYSTICK_Config>
 801bd88:	4603      	mov	r3, r0
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d001      	beq.n	801bd92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801bd8e:	2301      	movs	r3, #1
 801bd90:	e00e      	b.n	801bdb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2b0f      	cmp	r3, #15
 801bd96:	d80a      	bhi.n	801bdae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bd98:	2200      	movs	r2, #0
 801bd9a:	6879      	ldr	r1, [r7, #4]
 801bd9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bda0:	f000 fd31 	bl	801c806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bda4:	4a06      	ldr	r2, [pc, #24]	; (801bdc0 <HAL_InitTick+0x5c>)
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bdaa:	2300      	movs	r3, #0
 801bdac:	e000      	b.n	801bdb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801bdae:	2301      	movs	r3, #1
}
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	3708      	adds	r7, #8
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}
 801bdb8:	20000020 	.word	0x20000020
 801bdbc:	2000013c 	.word	0x2000013c
 801bdc0:	20000138 	.word	0x20000138

0801bdc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bdc4:	b480      	push	{r7}
 801bdc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801bdc8:	4b06      	ldr	r3, [pc, #24]	; (801bde4 <HAL_IncTick+0x20>)
 801bdca:	781b      	ldrb	r3, [r3, #0]
 801bdcc:	461a      	mov	r2, r3
 801bdce:	4b06      	ldr	r3, [pc, #24]	; (801bde8 <HAL_IncTick+0x24>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	4413      	add	r3, r2
 801bdd4:	4a04      	ldr	r2, [pc, #16]	; (801bde8 <HAL_IncTick+0x24>)
 801bdd6:	6013      	str	r3, [r2, #0]
}
 801bdd8:	bf00      	nop
 801bdda:	46bd      	mov	sp, r7
 801bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bde0:	4770      	bx	lr
 801bde2:	bf00      	nop
 801bde4:	2000013c 	.word	0x2000013c
 801bde8:	20001eec 	.word	0x20001eec

0801bdec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bdec:	b480      	push	{r7}
 801bdee:	af00      	add	r7, sp, #0
  return uwTick;
 801bdf0:	4b03      	ldr	r3, [pc, #12]	; (801be00 <HAL_GetTick+0x14>)
 801bdf2:	681b      	ldr	r3, [r3, #0]
}
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdfc:	4770      	bx	lr
 801bdfe:	bf00      	nop
 801be00:	20001eec 	.word	0x20001eec

0801be04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b084      	sub	sp, #16
 801be08:	af00      	add	r7, sp, #0
 801be0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801be0c:	2300      	movs	r3, #0
 801be0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d101      	bne.n	801be1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801be16:	2301      	movs	r3, #1
 801be18:	e033      	b.n	801be82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d109      	bne.n	801be36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	f7e7 faf0 	bl	8003408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	2200      	movs	r2, #0
 801be2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	2200      	movs	r2, #0
 801be32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be3a:	f003 0310 	and.w	r3, r3, #16
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d118      	bne.n	801be74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801be4a:	f023 0302 	bic.w	r3, r3, #2
 801be4e:	f043 0202 	orr.w	r2, r3, #2
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801be56:	6878      	ldr	r0, [r7, #4]
 801be58:	f000 fa58 	bl	801c30c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	2200      	movs	r2, #0
 801be60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be66:	f023 0303 	bic.w	r3, r3, #3
 801be6a:	f043 0201 	orr.w	r2, r3, #1
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	641a      	str	r2, [r3, #64]	; 0x40
 801be72:	e001      	b.n	801be78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801be74:	2301      	movs	r3, #1
 801be76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2200      	movs	r2, #0
 801be7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801be80:	7bfb      	ldrb	r3, [r7, #15]
}
 801be82:	4618      	mov	r0, r3
 801be84:	3710      	adds	r7, #16
 801be86:	46bd      	mov	sp, r7
 801be88:	bd80      	pop	{r7, pc}
	...

0801be8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b086      	sub	sp, #24
 801be90:	af00      	add	r7, sp, #0
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801be98:	2300      	movs	r3, #0
 801be9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bea2:	2b01      	cmp	r3, #1
 801bea4:	d101      	bne.n	801beaa <HAL_ADC_Start_DMA+0x1e>
 801bea6:	2302      	movs	r3, #2
 801bea8:	e0ce      	b.n	801c048 <HAL_ADC_Start_DMA+0x1bc>
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	2201      	movs	r2, #1
 801beae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	689b      	ldr	r3, [r3, #8]
 801beb8:	f003 0301 	and.w	r3, r3, #1
 801bebc:	2b01      	cmp	r3, #1
 801bebe:	d018      	beq.n	801bef2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	689a      	ldr	r2, [r3, #8]
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	f042 0201 	orr.w	r2, r2, #1
 801bece:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801bed0:	4b5f      	ldr	r3, [pc, #380]	; (801c050 <HAL_ADC_Start_DMA+0x1c4>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	4a5f      	ldr	r2, [pc, #380]	; (801c054 <HAL_ADC_Start_DMA+0x1c8>)
 801bed6:	fba2 2303 	umull	r2, r3, r2, r3
 801beda:	0c9a      	lsrs	r2, r3, #18
 801bedc:	4613      	mov	r3, r2
 801bede:	005b      	lsls	r3, r3, #1
 801bee0:	4413      	add	r3, r2
 801bee2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801bee4:	e002      	b.n	801beec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801bee6:	693b      	ldr	r3, [r7, #16]
 801bee8:	3b01      	subs	r3, #1
 801beea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801beec:	693b      	ldr	r3, [r7, #16]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d1f9      	bne.n	801bee6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	689b      	ldr	r3, [r3, #8]
 801bef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801befc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf00:	d107      	bne.n	801bf12 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	689a      	ldr	r2, [r3, #8]
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bf10:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	689b      	ldr	r3, [r3, #8]
 801bf18:	f003 0301 	and.w	r3, r3, #1
 801bf1c:	2b01      	cmp	r3, #1
 801bf1e:	f040 8086 	bne.w	801c02e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801bf2a:	f023 0301 	bic.w	r3, r3, #1
 801bf2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	685b      	ldr	r3, [r3, #4]
 801bf3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d007      	beq.n	801bf54 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801bf4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801bf5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bf60:	d106      	bne.n	801bf70 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf66:	f023 0206 	bic.w	r2, r3, #6
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	645a      	str	r2, [r3, #68]	; 0x44
 801bf6e:	e002      	b.n	801bf76 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	2200      	movs	r2, #0
 801bf74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	2200      	movs	r2, #0
 801bf7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801bf7e:	4b36      	ldr	r3, [pc, #216]	; (801c058 <HAL_ADC_Start_DMA+0x1cc>)
 801bf80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf86:	4a35      	ldr	r2, [pc, #212]	; (801c05c <HAL_ADC_Start_DMA+0x1d0>)
 801bf88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf8e:	4a34      	ldr	r2, [pc, #208]	; (801c060 <HAL_ADC_Start_DMA+0x1d4>)
 801bf90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf96:	4a33      	ldr	r2, [pc, #204]	; (801c064 <HAL_ADC_Start_DMA+0x1d8>)
 801bf98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801bfa2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	685a      	ldr	r2, [r3, #4]
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801bfb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	689a      	ldr	r2, [r3, #8]
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801bfc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	334c      	adds	r3, #76	; 0x4c
 801bfce:	4619      	mov	r1, r3
 801bfd0:	68ba      	ldr	r2, [r7, #8]
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	f000 fd0a 	bl	801c9ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801bfd8:	697b      	ldr	r3, [r7, #20]
 801bfda:	685b      	ldr	r3, [r3, #4]
 801bfdc:	f003 031f 	and.w	r3, r3, #31
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d10f      	bne.n	801c004 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	689b      	ldr	r3, [r3, #8]
 801bfea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d129      	bne.n	801c046 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	689a      	ldr	r2, [r3, #8]
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c000:	609a      	str	r2, [r3, #8]
 801c002:	e020      	b.n	801c046 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	4a17      	ldr	r2, [pc, #92]	; (801c068 <HAL_ADC_Start_DMA+0x1dc>)
 801c00a:	4293      	cmp	r3, r2
 801c00c:	d11b      	bne.n	801c046 <HAL_ADC_Start_DMA+0x1ba>
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	689b      	ldr	r3, [r3, #8]
 801c014:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d114      	bne.n	801c046 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	689a      	ldr	r2, [r3, #8]
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801c02a:	609a      	str	r2, [r3, #8]
 801c02c:	e00b      	b.n	801c046 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c032:	f043 0210 	orr.w	r2, r3, #16
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c03e:	f043 0201 	orr.w	r2, r3, #1
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 801c046:	2300      	movs	r3, #0
}
 801c048:	4618      	mov	r0, r3
 801c04a:	3718      	adds	r7, #24
 801c04c:	46bd      	mov	sp, r7
 801c04e:	bd80      	pop	{r7, pc}
 801c050:	20000020 	.word	0x20000020
 801c054:	431bde83 	.word	0x431bde83
 801c058:	40012300 	.word	0x40012300
 801c05c:	0801c505 	.word	0x0801c505
 801c060:	0801c5bf 	.word	0x0801c5bf
 801c064:	0801c5db 	.word	0x0801c5db
 801c068:	40012000 	.word	0x40012000

0801c06c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c06c:	b480      	push	{r7}
 801c06e:	b083      	sub	sp, #12
 801c070:	af00      	add	r7, sp, #0
 801c072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801c074:	bf00      	nop
 801c076:	370c      	adds	r7, #12
 801c078:	46bd      	mov	sp, r7
 801c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07e:	4770      	bx	lr

0801c080 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801c080:	b480      	push	{r7}
 801c082:	b083      	sub	sp, #12
 801c084:	af00      	add	r7, sp, #0
 801c086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801c088:	bf00      	nop
 801c08a:	370c      	adds	r7, #12
 801c08c:	46bd      	mov	sp, r7
 801c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c092:	4770      	bx	lr

0801c094 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801c094:	b480      	push	{r7}
 801c096:	b083      	sub	sp, #12
 801c098:	af00      	add	r7, sp, #0
 801c09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801c09c:	bf00      	nop
 801c09e:	370c      	adds	r7, #12
 801c0a0:	46bd      	mov	sp, r7
 801c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a6:	4770      	bx	lr

0801c0a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801c0a8:	b480      	push	{r7}
 801c0aa:	b085      	sub	sp, #20
 801c0ac:	af00      	add	r7, sp, #0
 801c0ae:	6078      	str	r0, [r7, #4]
 801c0b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c0bc:	2b01      	cmp	r3, #1
 801c0be:	d101      	bne.n	801c0c4 <HAL_ADC_ConfigChannel+0x1c>
 801c0c0:	2302      	movs	r3, #2
 801c0c2:	e113      	b.n	801c2ec <HAL_ADC_ConfigChannel+0x244>
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	2201      	movs	r2, #1
 801c0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801c0cc:	683b      	ldr	r3, [r7, #0]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	2b09      	cmp	r3, #9
 801c0d2:	d925      	bls.n	801c120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	68d9      	ldr	r1, [r3, #12]
 801c0da:	683b      	ldr	r3, [r7, #0]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	b29b      	uxth	r3, r3
 801c0e0:	461a      	mov	r2, r3
 801c0e2:	4613      	mov	r3, r2
 801c0e4:	005b      	lsls	r3, r3, #1
 801c0e6:	4413      	add	r3, r2
 801c0e8:	3b1e      	subs	r3, #30
 801c0ea:	2207      	movs	r2, #7
 801c0ec:	fa02 f303 	lsl.w	r3, r2, r3
 801c0f0:	43da      	mvns	r2, r3
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	400a      	ands	r2, r1
 801c0f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	68d9      	ldr	r1, [r3, #12]
 801c100:	683b      	ldr	r3, [r7, #0]
 801c102:	689a      	ldr	r2, [r3, #8]
 801c104:	683b      	ldr	r3, [r7, #0]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	b29b      	uxth	r3, r3
 801c10a:	4618      	mov	r0, r3
 801c10c:	4603      	mov	r3, r0
 801c10e:	005b      	lsls	r3, r3, #1
 801c110:	4403      	add	r3, r0
 801c112:	3b1e      	subs	r3, #30
 801c114:	409a      	lsls	r2, r3
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	430a      	orrs	r2, r1
 801c11c:	60da      	str	r2, [r3, #12]
 801c11e:	e022      	b.n	801c166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	6919      	ldr	r1, [r3, #16]
 801c126:	683b      	ldr	r3, [r7, #0]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	b29b      	uxth	r3, r3
 801c12c:	461a      	mov	r2, r3
 801c12e:	4613      	mov	r3, r2
 801c130:	005b      	lsls	r3, r3, #1
 801c132:	4413      	add	r3, r2
 801c134:	2207      	movs	r2, #7
 801c136:	fa02 f303 	lsl.w	r3, r2, r3
 801c13a:	43da      	mvns	r2, r3
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	400a      	ands	r2, r1
 801c142:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	6919      	ldr	r1, [r3, #16]
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	689a      	ldr	r2, [r3, #8]
 801c14e:	683b      	ldr	r3, [r7, #0]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	b29b      	uxth	r3, r3
 801c154:	4618      	mov	r0, r3
 801c156:	4603      	mov	r3, r0
 801c158:	005b      	lsls	r3, r3, #1
 801c15a:	4403      	add	r3, r0
 801c15c:	409a      	lsls	r2, r3
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	430a      	orrs	r2, r1
 801c164:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801c166:	683b      	ldr	r3, [r7, #0]
 801c168:	685b      	ldr	r3, [r3, #4]
 801c16a:	2b06      	cmp	r3, #6
 801c16c:	d824      	bhi.n	801c1b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c174:	683b      	ldr	r3, [r7, #0]
 801c176:	685a      	ldr	r2, [r3, #4]
 801c178:	4613      	mov	r3, r2
 801c17a:	009b      	lsls	r3, r3, #2
 801c17c:	4413      	add	r3, r2
 801c17e:	3b05      	subs	r3, #5
 801c180:	221f      	movs	r2, #31
 801c182:	fa02 f303 	lsl.w	r3, r2, r3
 801c186:	43da      	mvns	r2, r3
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	400a      	ands	r2, r1
 801c18e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c196:	683b      	ldr	r3, [r7, #0]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	b29b      	uxth	r3, r3
 801c19c:	4618      	mov	r0, r3
 801c19e:	683b      	ldr	r3, [r7, #0]
 801c1a0:	685a      	ldr	r2, [r3, #4]
 801c1a2:	4613      	mov	r3, r2
 801c1a4:	009b      	lsls	r3, r3, #2
 801c1a6:	4413      	add	r3, r2
 801c1a8:	3b05      	subs	r3, #5
 801c1aa:	fa00 f203 	lsl.w	r2, r0, r3
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	430a      	orrs	r2, r1
 801c1b4:	635a      	str	r2, [r3, #52]	; 0x34
 801c1b6:	e04c      	b.n	801c252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801c1b8:	683b      	ldr	r3, [r7, #0]
 801c1ba:	685b      	ldr	r3, [r3, #4]
 801c1bc:	2b0c      	cmp	r3, #12
 801c1be:	d824      	bhi.n	801c20a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c1c6:	683b      	ldr	r3, [r7, #0]
 801c1c8:	685a      	ldr	r2, [r3, #4]
 801c1ca:	4613      	mov	r3, r2
 801c1cc:	009b      	lsls	r3, r3, #2
 801c1ce:	4413      	add	r3, r2
 801c1d0:	3b23      	subs	r3, #35	; 0x23
 801c1d2:	221f      	movs	r2, #31
 801c1d4:	fa02 f303 	lsl.w	r3, r2, r3
 801c1d8:	43da      	mvns	r2, r3
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	400a      	ands	r2, r1
 801c1e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801c1e8:	683b      	ldr	r3, [r7, #0]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	b29b      	uxth	r3, r3
 801c1ee:	4618      	mov	r0, r3
 801c1f0:	683b      	ldr	r3, [r7, #0]
 801c1f2:	685a      	ldr	r2, [r3, #4]
 801c1f4:	4613      	mov	r3, r2
 801c1f6:	009b      	lsls	r3, r3, #2
 801c1f8:	4413      	add	r3, r2
 801c1fa:	3b23      	subs	r3, #35	; 0x23
 801c1fc:	fa00 f203 	lsl.w	r2, r0, r3
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	430a      	orrs	r2, r1
 801c206:	631a      	str	r2, [r3, #48]	; 0x30
 801c208:	e023      	b.n	801c252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c210:	683b      	ldr	r3, [r7, #0]
 801c212:	685a      	ldr	r2, [r3, #4]
 801c214:	4613      	mov	r3, r2
 801c216:	009b      	lsls	r3, r3, #2
 801c218:	4413      	add	r3, r2
 801c21a:	3b41      	subs	r3, #65	; 0x41
 801c21c:	221f      	movs	r2, #31
 801c21e:	fa02 f303 	lsl.w	r3, r2, r3
 801c222:	43da      	mvns	r2, r3
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	400a      	ands	r2, r1
 801c22a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c232:	683b      	ldr	r3, [r7, #0]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	b29b      	uxth	r3, r3
 801c238:	4618      	mov	r0, r3
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	685a      	ldr	r2, [r3, #4]
 801c23e:	4613      	mov	r3, r2
 801c240:	009b      	lsls	r3, r3, #2
 801c242:	4413      	add	r3, r2
 801c244:	3b41      	subs	r3, #65	; 0x41
 801c246:	fa00 f203 	lsl.w	r2, r0, r3
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	430a      	orrs	r2, r1
 801c250:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c252:	4b29      	ldr	r3, [pc, #164]	; (801c2f8 <HAL_ADC_ConfigChannel+0x250>)
 801c254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	4a28      	ldr	r2, [pc, #160]	; (801c2fc <HAL_ADC_ConfigChannel+0x254>)
 801c25c:	4293      	cmp	r3, r2
 801c25e:	d10f      	bne.n	801c280 <HAL_ADC_ConfigChannel+0x1d8>
 801c260:	683b      	ldr	r3, [r7, #0]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	2b12      	cmp	r3, #18
 801c266:	d10b      	bne.n	801c280 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801c268:	68fb      	ldr	r3, [r7, #12]
 801c26a:	685b      	ldr	r3, [r3, #4]
 801c26c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	685b      	ldr	r3, [r3, #4]
 801c278:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	4a1d      	ldr	r2, [pc, #116]	; (801c2fc <HAL_ADC_ConfigChannel+0x254>)
 801c286:	4293      	cmp	r3, r2
 801c288:	d12b      	bne.n	801c2e2 <HAL_ADC_ConfigChannel+0x23a>
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	4a1c      	ldr	r2, [pc, #112]	; (801c300 <HAL_ADC_ConfigChannel+0x258>)
 801c290:	4293      	cmp	r3, r2
 801c292:	d003      	beq.n	801c29c <HAL_ADC_ConfigChannel+0x1f4>
 801c294:	683b      	ldr	r3, [r7, #0]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	2b11      	cmp	r3, #17
 801c29a:	d122      	bne.n	801c2e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	685b      	ldr	r3, [r3, #4]
 801c2a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	685b      	ldr	r3, [r3, #4]
 801c2ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801c2b4:	683b      	ldr	r3, [r7, #0]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	4a11      	ldr	r2, [pc, #68]	; (801c300 <HAL_ADC_ConfigChannel+0x258>)
 801c2ba:	4293      	cmp	r3, r2
 801c2bc:	d111      	bne.n	801c2e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801c2be:	4b11      	ldr	r3, [pc, #68]	; (801c304 <HAL_ADC_ConfigChannel+0x25c>)
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	4a11      	ldr	r2, [pc, #68]	; (801c308 <HAL_ADC_ConfigChannel+0x260>)
 801c2c4:	fba2 2303 	umull	r2, r3, r2, r3
 801c2c8:	0c9a      	lsrs	r2, r3, #18
 801c2ca:	4613      	mov	r3, r2
 801c2cc:	009b      	lsls	r3, r3, #2
 801c2ce:	4413      	add	r3, r2
 801c2d0:	005b      	lsls	r3, r3, #1
 801c2d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c2d4:	e002      	b.n	801c2dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	3b01      	subs	r3, #1
 801c2da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801c2dc:	68bb      	ldr	r3, [r7, #8]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d1f9      	bne.n	801c2d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	2200      	movs	r2, #0
 801c2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801c2ea:	2300      	movs	r3, #0
}
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	3714      	adds	r7, #20
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f6:	4770      	bx	lr
 801c2f8:	40012300 	.word	0x40012300
 801c2fc:	40012000 	.word	0x40012000
 801c300:	10000012 	.word	0x10000012
 801c304:	20000020 	.word	0x20000020
 801c308:	431bde83 	.word	0x431bde83

0801c30c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801c30c:	b480      	push	{r7}
 801c30e:	b085      	sub	sp, #20
 801c310:	af00      	add	r7, sp, #0
 801c312:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801c314:	4b79      	ldr	r3, [pc, #484]	; (801c4fc <ADC_Init+0x1f0>)
 801c316:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	685b      	ldr	r3, [r3, #4]
 801c31c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801c320:	68fb      	ldr	r3, [r7, #12]
 801c322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	685a      	ldr	r2, [r3, #4]
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	685b      	ldr	r3, [r3, #4]
 801c32c:	431a      	orrs	r2, r3
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	685a      	ldr	r2, [r3, #4]
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	6859      	ldr	r1, [r3, #4]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	691b      	ldr	r3, [r3, #16]
 801c34c:	021a      	lsls	r2, r3, #8
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	430a      	orrs	r2, r1
 801c354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	685a      	ldr	r2, [r3, #4]
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801c364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	6859      	ldr	r1, [r3, #4]
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	689a      	ldr	r2, [r3, #8]
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	430a      	orrs	r2, r1
 801c376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	689a      	ldr	r2, [r3, #8]
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	6899      	ldr	r1, [r3, #8]
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	68da      	ldr	r2, [r3, #12]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	430a      	orrs	r2, r1
 801c398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c39e:	4a58      	ldr	r2, [pc, #352]	; (801c500 <ADC_Init+0x1f4>)
 801c3a0:	4293      	cmp	r3, r2
 801c3a2:	d022      	beq.n	801c3ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	689a      	ldr	r2, [r3, #8]
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c3b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	6899      	ldr	r1, [r3, #8]
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	430a      	orrs	r2, r1
 801c3c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	689a      	ldr	r2, [r3, #8]
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c3d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	6899      	ldr	r1, [r3, #8]
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	430a      	orrs	r2, r1
 801c3e6:	609a      	str	r2, [r3, #8]
 801c3e8:	e00f      	b.n	801c40a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	689a      	ldr	r2, [r3, #8]
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801c3f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	689a      	ldr	r2, [r3, #8]
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801c408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	681b      	ldr	r3, [r3, #0]
 801c40e:	689a      	ldr	r2, [r3, #8]
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	f022 0202 	bic.w	r2, r2, #2
 801c418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	6899      	ldr	r1, [r3, #8]
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	7e1b      	ldrb	r3, [r3, #24]
 801c424:	005a      	lsls	r2, r3, #1
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	430a      	orrs	r2, r1
 801c42c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	f893 3020 	ldrb.w	r3, [r3, #32]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d01b      	beq.n	801c470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	685a      	ldr	r2, [r3, #4]
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	681b      	ldr	r3, [r3, #0]
 801c44c:	685a      	ldr	r2, [r3, #4]
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801c456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	6859      	ldr	r1, [r3, #4]
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c462:	3b01      	subs	r3, #1
 801c464:	035a      	lsls	r2, r3, #13
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	430a      	orrs	r2, r1
 801c46c:	605a      	str	r2, [r3, #4]
 801c46e:	e007      	b.n	801c480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	685a      	ldr	r2, [r3, #4]
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801c47e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801c48e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	69db      	ldr	r3, [r3, #28]
 801c49a:	3b01      	subs	r3, #1
 801c49c:	051a      	lsls	r2, r3, #20
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	430a      	orrs	r2, r1
 801c4a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	689a      	ldr	r2, [r3, #8]
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801c4b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	6899      	ldr	r1, [r3, #8]
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c4c2:	025a      	lsls	r2, r3, #9
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	430a      	orrs	r2, r1
 801c4ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	689a      	ldr	r2, [r3, #8]
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801c4da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	6899      	ldr	r1, [r3, #8]
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	695b      	ldr	r3, [r3, #20]
 801c4e6:	029a      	lsls	r2, r3, #10
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	430a      	orrs	r2, r1
 801c4ee:	609a      	str	r2, [r3, #8]
}
 801c4f0:	bf00      	nop
 801c4f2:	3714      	adds	r7, #20
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4fa:	4770      	bx	lr
 801c4fc:	40012300 	.word	0x40012300
 801c500:	0f000001 	.word	0x0f000001

0801c504 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c504:	b580      	push	{r7, lr}
 801c506:	b084      	sub	sp, #16
 801c508:	af00      	add	r7, sp, #0
 801c50a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c510:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d13c      	bne.n	801c598 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	689b      	ldr	r3, [r3, #8]
 801c530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801c534:	2b00      	cmp	r3, #0
 801c536:	d12b      	bne.n	801c590 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d127      	bne.n	801c590 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d006      	beq.n	801c55c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	689b      	ldr	r3, [r3, #8]
 801c554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d119      	bne.n	801c590 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	685a      	ldr	r2, [r3, #4]
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	f022 0220 	bic.w	r2, r2, #32
 801c56a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801c574:	68fb      	ldr	r3, [r7, #12]
 801c576:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c57c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801c580:	2b00      	cmp	r3, #0
 801c582:	d105      	bne.n	801c590 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c588:	f043 0201 	orr.w	r2, r3, #1
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801c590:	68f8      	ldr	r0, [r7, #12]
 801c592:	f7ff fd6b 	bl	801c06c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801c596:	e00e      	b.n	801c5b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c59c:	f003 0310 	and.w	r3, r3, #16
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d003      	beq.n	801c5ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801c5a4:	68f8      	ldr	r0, [r7, #12]
 801c5a6:	f7ff fd75 	bl	801c094 <HAL_ADC_ErrorCallback>
}
 801c5aa:	e004      	b.n	801c5b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801c5ac:	68fb      	ldr	r3, [r7, #12]
 801c5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c5b2:	6878      	ldr	r0, [r7, #4]
 801c5b4:	4798      	blx	r3
}
 801c5b6:	bf00      	nop
 801c5b8:	3710      	adds	r7, #16
 801c5ba:	46bd      	mov	sp, r7
 801c5bc:	bd80      	pop	{r7, pc}

0801c5be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801c5be:	b580      	push	{r7, lr}
 801c5c0:	b084      	sub	sp, #16
 801c5c2:	af00      	add	r7, sp, #0
 801c5c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801c5cc:	68f8      	ldr	r0, [r7, #12]
 801c5ce:	f7ff fd57 	bl	801c080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c5d2:	bf00      	nop
 801c5d4:	3710      	adds	r7, #16
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}

0801c5da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801c5da:	b580      	push	{r7, lr}
 801c5dc:	b084      	sub	sp, #16
 801c5de:	af00      	add	r7, sp, #0
 801c5e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	2240      	movs	r2, #64	; 0x40
 801c5ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c5f2:	f043 0204 	orr.w	r2, r3, #4
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801c5fa:	68f8      	ldr	r0, [r7, #12]
 801c5fc:	f7ff fd4a 	bl	801c094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801c600:	bf00      	nop
 801c602:	3710      	adds	r7, #16
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}

0801c608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c608:	b480      	push	{r7}
 801c60a:	b085      	sub	sp, #20
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	f003 0307 	and.w	r3, r3, #7
 801c616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801c618:	4b0c      	ldr	r3, [pc, #48]	; (801c64c <__NVIC_SetPriorityGrouping+0x44>)
 801c61a:	68db      	ldr	r3, [r3, #12]
 801c61c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801c61e:	68ba      	ldr	r2, [r7, #8]
 801c620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801c624:	4013      	ands	r3, r2
 801c626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801c62c:	68bb      	ldr	r3, [r7, #8]
 801c62e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801c630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801c634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801c63a:	4a04      	ldr	r2, [pc, #16]	; (801c64c <__NVIC_SetPriorityGrouping+0x44>)
 801c63c:	68bb      	ldr	r3, [r7, #8]
 801c63e:	60d3      	str	r3, [r2, #12]
}
 801c640:	bf00      	nop
 801c642:	3714      	adds	r7, #20
 801c644:	46bd      	mov	sp, r7
 801c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c64a:	4770      	bx	lr
 801c64c:	e000ed00 	.word	0xe000ed00

0801c650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801c650:	b480      	push	{r7}
 801c652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801c654:	4b04      	ldr	r3, [pc, #16]	; (801c668 <__NVIC_GetPriorityGrouping+0x18>)
 801c656:	68db      	ldr	r3, [r3, #12]
 801c658:	0a1b      	lsrs	r3, r3, #8
 801c65a:	f003 0307 	and.w	r3, r3, #7
}
 801c65e:	4618      	mov	r0, r3
 801c660:	46bd      	mov	sp, r7
 801c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c666:	4770      	bx	lr
 801c668:	e000ed00 	.word	0xe000ed00

0801c66c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c66c:	b480      	push	{r7}
 801c66e:	b083      	sub	sp, #12
 801c670:	af00      	add	r7, sp, #0
 801c672:	4603      	mov	r3, r0
 801c674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	db0b      	blt.n	801c696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c67e:	79fb      	ldrb	r3, [r7, #7]
 801c680:	f003 021f 	and.w	r2, r3, #31
 801c684:	4907      	ldr	r1, [pc, #28]	; (801c6a4 <__NVIC_EnableIRQ+0x38>)
 801c686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c68a:	095b      	lsrs	r3, r3, #5
 801c68c:	2001      	movs	r0, #1
 801c68e:	fa00 f202 	lsl.w	r2, r0, r2
 801c692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801c696:	bf00      	nop
 801c698:	370c      	adds	r7, #12
 801c69a:	46bd      	mov	sp, r7
 801c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a0:	4770      	bx	lr
 801c6a2:	bf00      	nop
 801c6a4:	e000e100 	.word	0xe000e100

0801c6a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c6a8:	b480      	push	{r7}
 801c6aa:	b083      	sub	sp, #12
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	4603      	mov	r3, r0
 801c6b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c6b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	db12      	blt.n	801c6e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801c6ba:	79fb      	ldrb	r3, [r7, #7]
 801c6bc:	f003 021f 	and.w	r2, r3, #31
 801c6c0:	490a      	ldr	r1, [pc, #40]	; (801c6ec <__NVIC_DisableIRQ+0x44>)
 801c6c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c6c6:	095b      	lsrs	r3, r3, #5
 801c6c8:	2001      	movs	r0, #1
 801c6ca:	fa00 f202 	lsl.w	r2, r0, r2
 801c6ce:	3320      	adds	r3, #32
 801c6d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801c6d4:	f3bf 8f4f 	dsb	sy
}
 801c6d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801c6da:	f3bf 8f6f 	isb	sy
}
 801c6de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801c6e0:	bf00      	nop
 801c6e2:	370c      	adds	r7, #12
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ea:	4770      	bx	lr
 801c6ec:	e000e100 	.word	0xe000e100

0801c6f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801c6f0:	b480      	push	{r7}
 801c6f2:	b083      	sub	sp, #12
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	6039      	str	r1, [r7, #0]
 801c6fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c6fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c700:	2b00      	cmp	r3, #0
 801c702:	db0a      	blt.n	801c71a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c704:	683b      	ldr	r3, [r7, #0]
 801c706:	b2da      	uxtb	r2, r3
 801c708:	490c      	ldr	r1, [pc, #48]	; (801c73c <__NVIC_SetPriority+0x4c>)
 801c70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c70e:	0112      	lsls	r2, r2, #4
 801c710:	b2d2      	uxtb	r2, r2
 801c712:	440b      	add	r3, r1
 801c714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801c718:	e00a      	b.n	801c730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c71a:	683b      	ldr	r3, [r7, #0]
 801c71c:	b2da      	uxtb	r2, r3
 801c71e:	4908      	ldr	r1, [pc, #32]	; (801c740 <__NVIC_SetPriority+0x50>)
 801c720:	79fb      	ldrb	r3, [r7, #7]
 801c722:	f003 030f 	and.w	r3, r3, #15
 801c726:	3b04      	subs	r3, #4
 801c728:	0112      	lsls	r2, r2, #4
 801c72a:	b2d2      	uxtb	r2, r2
 801c72c:	440b      	add	r3, r1
 801c72e:	761a      	strb	r2, [r3, #24]
}
 801c730:	bf00      	nop
 801c732:	370c      	adds	r7, #12
 801c734:	46bd      	mov	sp, r7
 801c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c73a:	4770      	bx	lr
 801c73c:	e000e100 	.word	0xe000e100
 801c740:	e000ed00 	.word	0xe000ed00

0801c744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801c744:	b480      	push	{r7}
 801c746:	b089      	sub	sp, #36	; 0x24
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	60b9      	str	r1, [r7, #8]
 801c74e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	f003 0307 	and.w	r3, r3, #7
 801c756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	f1c3 0307 	rsb	r3, r3, #7
 801c75e:	2b04      	cmp	r3, #4
 801c760:	bf28      	it	cs
 801c762:	2304      	movcs	r3, #4
 801c764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801c766:	69fb      	ldr	r3, [r7, #28]
 801c768:	3304      	adds	r3, #4
 801c76a:	2b06      	cmp	r3, #6
 801c76c:	d902      	bls.n	801c774 <NVIC_EncodePriority+0x30>
 801c76e:	69fb      	ldr	r3, [r7, #28]
 801c770:	3b03      	subs	r3, #3
 801c772:	e000      	b.n	801c776 <NVIC_EncodePriority+0x32>
 801c774:	2300      	movs	r3, #0
 801c776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c778:	f04f 32ff 	mov.w	r2, #4294967295
 801c77c:	69bb      	ldr	r3, [r7, #24]
 801c77e:	fa02 f303 	lsl.w	r3, r2, r3
 801c782:	43da      	mvns	r2, r3
 801c784:	68bb      	ldr	r3, [r7, #8]
 801c786:	401a      	ands	r2, r3
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801c78c:	f04f 31ff 	mov.w	r1, #4294967295
 801c790:	697b      	ldr	r3, [r7, #20]
 801c792:	fa01 f303 	lsl.w	r3, r1, r3
 801c796:	43d9      	mvns	r1, r3
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801c79c:	4313      	orrs	r3, r2
         );
}
 801c79e:	4618      	mov	r0, r3
 801c7a0:	3724      	adds	r7, #36	; 0x24
 801c7a2:	46bd      	mov	sp, r7
 801c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7a8:	4770      	bx	lr
	...

0801c7ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b082      	sub	sp, #8
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	3b01      	subs	r3, #1
 801c7b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c7bc:	d301      	bcc.n	801c7c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801c7be:	2301      	movs	r3, #1
 801c7c0:	e00f      	b.n	801c7e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801c7c2:	4a0a      	ldr	r2, [pc, #40]	; (801c7ec <SysTick_Config+0x40>)
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	3b01      	subs	r3, #1
 801c7c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801c7ca:	210f      	movs	r1, #15
 801c7cc:	f04f 30ff 	mov.w	r0, #4294967295
 801c7d0:	f7ff ff8e 	bl	801c6f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801c7d4:	4b05      	ldr	r3, [pc, #20]	; (801c7ec <SysTick_Config+0x40>)
 801c7d6:	2200      	movs	r2, #0
 801c7d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801c7da:	4b04      	ldr	r3, [pc, #16]	; (801c7ec <SysTick_Config+0x40>)
 801c7dc:	2207      	movs	r2, #7
 801c7de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801c7e0:	2300      	movs	r3, #0
}
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	3708      	adds	r7, #8
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}
 801c7ea:	bf00      	nop
 801c7ec:	e000e010 	.word	0xe000e010

0801c7f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801c7f0:	b580      	push	{r7, lr}
 801c7f2:	b082      	sub	sp, #8
 801c7f4:	af00      	add	r7, sp, #0
 801c7f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801c7f8:	6878      	ldr	r0, [r7, #4]
 801c7fa:	f7ff ff05 	bl	801c608 <__NVIC_SetPriorityGrouping>
}
 801c7fe:	bf00      	nop
 801c800:	3708      	adds	r7, #8
 801c802:	46bd      	mov	sp, r7
 801c804:	bd80      	pop	{r7, pc}

0801c806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801c806:	b580      	push	{r7, lr}
 801c808:	b086      	sub	sp, #24
 801c80a:	af00      	add	r7, sp, #0
 801c80c:	4603      	mov	r3, r0
 801c80e:	60b9      	str	r1, [r7, #8]
 801c810:	607a      	str	r2, [r7, #4]
 801c812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801c814:	2300      	movs	r3, #0
 801c816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801c818:	f7ff ff1a 	bl	801c650 <__NVIC_GetPriorityGrouping>
 801c81c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801c81e:	687a      	ldr	r2, [r7, #4]
 801c820:	68b9      	ldr	r1, [r7, #8]
 801c822:	6978      	ldr	r0, [r7, #20]
 801c824:	f7ff ff8e 	bl	801c744 <NVIC_EncodePriority>
 801c828:	4602      	mov	r2, r0
 801c82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c82e:	4611      	mov	r1, r2
 801c830:	4618      	mov	r0, r3
 801c832:	f7ff ff5d 	bl	801c6f0 <__NVIC_SetPriority>
}
 801c836:	bf00      	nop
 801c838:	3718      	adds	r7, #24
 801c83a:	46bd      	mov	sp, r7
 801c83c:	bd80      	pop	{r7, pc}

0801c83e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801c83e:	b580      	push	{r7, lr}
 801c840:	b082      	sub	sp, #8
 801c842:	af00      	add	r7, sp, #0
 801c844:	4603      	mov	r3, r0
 801c846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801c848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c84c:	4618      	mov	r0, r3
 801c84e:	f7ff ff0d 	bl	801c66c <__NVIC_EnableIRQ>
}
 801c852:	bf00      	nop
 801c854:	3708      	adds	r7, #8
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}

0801c85a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801c85a:	b580      	push	{r7, lr}
 801c85c:	b082      	sub	sp, #8
 801c85e:	af00      	add	r7, sp, #0
 801c860:	4603      	mov	r3, r0
 801c862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801c864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c868:	4618      	mov	r0, r3
 801c86a:	f7ff ff1d 	bl	801c6a8 <__NVIC_DisableIRQ>
}
 801c86e:	bf00      	nop
 801c870:	3708      	adds	r7, #8
 801c872:	46bd      	mov	sp, r7
 801c874:	bd80      	pop	{r7, pc}

0801c876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801c876:	b580      	push	{r7, lr}
 801c878:	b082      	sub	sp, #8
 801c87a:	af00      	add	r7, sp, #0
 801c87c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801c87e:	6878      	ldr	r0, [r7, #4]
 801c880:	f7ff ff94 	bl	801c7ac <SysTick_Config>
 801c884:	4603      	mov	r3, r0
}
 801c886:	4618      	mov	r0, r3
 801c888:	3708      	adds	r7, #8
 801c88a:	46bd      	mov	sp, r7
 801c88c:	bd80      	pop	{r7, pc}
	...

0801c890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801c890:	b580      	push	{r7, lr}
 801c892:	b086      	sub	sp, #24
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801c898:	2300      	movs	r3, #0
 801c89a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801c89c:	f7ff faa6 	bl	801bdec <HAL_GetTick>
 801c8a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d101      	bne.n	801c8ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801c8a8:	2301      	movs	r3, #1
 801c8aa:	e099      	b.n	801c9e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	2202      	movs	r2, #2
 801c8b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	681a      	ldr	r2, [r3, #0]
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	f022 0201 	bic.w	r2, r2, #1
 801c8ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c8cc:	e00f      	b.n	801c8ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c8ce:	f7ff fa8d 	bl	801bdec <HAL_GetTick>
 801c8d2:	4602      	mov	r2, r0
 801c8d4:	693b      	ldr	r3, [r7, #16]
 801c8d6:	1ad3      	subs	r3, r2, r3
 801c8d8:	2b05      	cmp	r3, #5
 801c8da:	d908      	bls.n	801c8ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	2220      	movs	r2, #32
 801c8e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	2203      	movs	r2, #3
 801c8e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801c8ea:	2303      	movs	r3, #3
 801c8ec:	e078      	b.n	801c9e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	f003 0301 	and.w	r3, r3, #1
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d1e8      	bne.n	801c8ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c904:	697a      	ldr	r2, [r7, #20]
 801c906:	4b38      	ldr	r3, [pc, #224]	; (801c9e8 <HAL_DMA_Init+0x158>)
 801c908:	4013      	ands	r3, r2
 801c90a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	685a      	ldr	r2, [r3, #4]
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	689b      	ldr	r3, [r3, #8]
 801c914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c91a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	691b      	ldr	r3, [r3, #16]
 801c920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	699b      	ldr	r3, [r3, #24]
 801c92c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	6a1b      	ldr	r3, [r3, #32]
 801c938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801c93a:	697a      	ldr	r2, [r7, #20]
 801c93c:	4313      	orrs	r3, r2
 801c93e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c944:	2b04      	cmp	r3, #4
 801c946:	d107      	bne.n	801c958 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c950:	4313      	orrs	r3, r2
 801c952:	697a      	ldr	r2, [r7, #20]
 801c954:	4313      	orrs	r3, r2
 801c956:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	697a      	ldr	r2, [r7, #20]
 801c95e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	695b      	ldr	r3, [r3, #20]
 801c966:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c968:	697b      	ldr	r3, [r7, #20]
 801c96a:	f023 0307 	bic.w	r3, r3, #7
 801c96e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c974:	697a      	ldr	r2, [r7, #20]
 801c976:	4313      	orrs	r3, r2
 801c978:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c97e:	2b04      	cmp	r3, #4
 801c980:	d117      	bne.n	801c9b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c986:	697a      	ldr	r2, [r7, #20]
 801c988:	4313      	orrs	r3, r2
 801c98a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c990:	2b00      	cmp	r3, #0
 801c992:	d00e      	beq.n	801c9b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c994:	6878      	ldr	r0, [r7, #4]
 801c996:	f000 fb1b 	bl	801cfd0 <DMA_CheckFifoParam>
 801c99a:	4603      	mov	r3, r0
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d008      	beq.n	801c9b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	2240      	movs	r2, #64	; 0x40
 801c9a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	2201      	movs	r2, #1
 801c9aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801c9ae:	2301      	movs	r3, #1
 801c9b0:	e016      	b.n	801c9e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	697a      	ldr	r2, [r7, #20]
 801c9b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c9ba:	6878      	ldr	r0, [r7, #4]
 801c9bc:	f000 fad2 	bl	801cf64 <DMA_CalcBaseAndBitshift>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c9c8:	223f      	movs	r2, #63	; 0x3f
 801c9ca:	409a      	lsls	r2, r3
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	2201      	movs	r2, #1
 801c9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801c9de:	2300      	movs	r3, #0
}
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	3718      	adds	r7, #24
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	bd80      	pop	{r7, pc}
 801c9e8:	f010803f 	.word	0xf010803f

0801c9ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b086      	sub	sp, #24
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	60f8      	str	r0, [r7, #12]
 801c9f4:	60b9      	str	r1, [r7, #8]
 801c9f6:	607a      	str	r2, [r7, #4]
 801c9f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ca0a:	2b01      	cmp	r3, #1
 801ca0c:	d101      	bne.n	801ca12 <HAL_DMA_Start_IT+0x26>
 801ca0e:	2302      	movs	r3, #2
 801ca10:	e040      	b.n	801ca94 <HAL_DMA_Start_IT+0xa8>
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	2201      	movs	r2, #1
 801ca16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801ca20:	b2db      	uxtb	r3, r3
 801ca22:	2b01      	cmp	r3, #1
 801ca24:	d12f      	bne.n	801ca86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	2202      	movs	r2, #2
 801ca2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	2200      	movs	r2, #0
 801ca32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801ca34:	683b      	ldr	r3, [r7, #0]
 801ca36:	687a      	ldr	r2, [r7, #4]
 801ca38:	68b9      	ldr	r1, [r7, #8]
 801ca3a:	68f8      	ldr	r0, [r7, #12]
 801ca3c:	f000 fa64 	bl	801cf08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ca44:	223f      	movs	r2, #63	; 0x3f
 801ca46:	409a      	lsls	r2, r3
 801ca48:	693b      	ldr	r3, [r7, #16]
 801ca4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	681a      	ldr	r2, [r3, #0]
 801ca52:	68fb      	ldr	r3, [r7, #12]
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	f042 0216 	orr.w	r2, r2, #22
 801ca5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d007      	beq.n	801ca74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	681a      	ldr	r2, [r3, #0]
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	f042 0208 	orr.w	r2, r2, #8
 801ca72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	681a      	ldr	r2, [r3, #0]
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	f042 0201 	orr.w	r2, r2, #1
 801ca82:	601a      	str	r2, [r3, #0]
 801ca84:	e005      	b.n	801ca92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	2200      	movs	r2, #0
 801ca8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801ca8e:	2302      	movs	r3, #2
 801ca90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801ca92:	7dfb      	ldrb	r3, [r7, #23]
}
 801ca94:	4618      	mov	r0, r3
 801ca96:	3718      	adds	r7, #24
 801ca98:	46bd      	mov	sp, r7
 801ca9a:	bd80      	pop	{r7, pc}

0801ca9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b084      	sub	sp, #16
 801caa0:	af00      	add	r7, sp, #0
 801caa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801caa8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801caaa:	f7ff f99f 	bl	801bdec <HAL_GetTick>
 801caae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cab6:	b2db      	uxtb	r3, r3
 801cab8:	2b02      	cmp	r3, #2
 801caba:	d008      	beq.n	801cace <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2280      	movs	r2, #128	; 0x80
 801cac0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	2200      	movs	r2, #0
 801cac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801caca:	2301      	movs	r3, #1
 801cacc:	e052      	b.n	801cb74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	681a      	ldr	r2, [r3, #0]
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	f022 0216 	bic.w	r2, r2, #22
 801cadc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	695a      	ldr	r2, [r3, #20]
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801caec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d103      	bne.n	801cafe <HAL_DMA_Abort+0x62>
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d007      	beq.n	801cb0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	681a      	ldr	r2, [r3, #0]
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	f022 0208 	bic.w	r2, r2, #8
 801cb0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	681a      	ldr	r2, [r3, #0]
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f022 0201 	bic.w	r2, r2, #1
 801cb1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cb1e:	e013      	b.n	801cb48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cb20:	f7ff f964 	bl	801bdec <HAL_GetTick>
 801cb24:	4602      	mov	r2, r0
 801cb26:	68bb      	ldr	r3, [r7, #8]
 801cb28:	1ad3      	subs	r3, r2, r3
 801cb2a:	2b05      	cmp	r3, #5
 801cb2c:	d90c      	bls.n	801cb48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	2220      	movs	r2, #32
 801cb32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2203      	movs	r2, #3
 801cb38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	2200      	movs	r2, #0
 801cb40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801cb44:	2303      	movs	r3, #3
 801cb46:	e015      	b.n	801cb74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	f003 0301 	and.w	r3, r3, #1
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d1e4      	bne.n	801cb20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cb5a:	223f      	movs	r2, #63	; 0x3f
 801cb5c:	409a      	lsls	r2, r3
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	2201      	movs	r2, #1
 801cb66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	2200      	movs	r2, #0
 801cb6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801cb72:	2300      	movs	r3, #0
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	3710      	adds	r7, #16
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd80      	pop	{r7, pc}

0801cb7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801cb7c:	b480      	push	{r7}
 801cb7e:	b083      	sub	sp, #12
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cb8a:	b2db      	uxtb	r3, r3
 801cb8c:	2b02      	cmp	r3, #2
 801cb8e:	d004      	beq.n	801cb9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	2280      	movs	r2, #128	; 0x80
 801cb94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801cb96:	2301      	movs	r3, #1
 801cb98:	e00c      	b.n	801cbb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2205      	movs	r2, #5
 801cb9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	681a      	ldr	r2, [r3, #0]
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	f022 0201 	bic.w	r2, r2, #1
 801cbb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801cbb2:	2300      	movs	r3, #0
}
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	370c      	adds	r7, #12
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbbe:	4770      	bx	lr

0801cbc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b086      	sub	sp, #24
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801cbc8:	2300      	movs	r3, #0
 801cbca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801cbcc:	4b8e      	ldr	r3, [pc, #568]	; (801ce08 <HAL_DMA_IRQHandler+0x248>)
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	4a8e      	ldr	r2, [pc, #568]	; (801ce0c <HAL_DMA_IRQHandler+0x24c>)
 801cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 801cbd6:	0a9b      	lsrs	r3, r3, #10
 801cbd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cbde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801cbe0:	693b      	ldr	r3, [r7, #16]
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cbea:	2208      	movs	r2, #8
 801cbec:	409a      	lsls	r2, r3
 801cbee:	68fb      	ldr	r3, [r7, #12]
 801cbf0:	4013      	ands	r3, r2
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d01a      	beq.n	801cc2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	f003 0304 	and.w	r3, r3, #4
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d013      	beq.n	801cc2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	681a      	ldr	r2, [r3, #0]
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	f022 0204 	bic.w	r2, r2, #4
 801cc12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc18:	2208      	movs	r2, #8
 801cc1a:	409a      	lsls	r2, r3
 801cc1c:	693b      	ldr	r3, [r7, #16]
 801cc1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc24:	f043 0201 	orr.w	r2, r3, #1
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc30:	2201      	movs	r2, #1
 801cc32:	409a      	lsls	r2, r3
 801cc34:	68fb      	ldr	r3, [r7, #12]
 801cc36:	4013      	ands	r3, r2
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d012      	beq.n	801cc62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	695b      	ldr	r3, [r3, #20]
 801cc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d00b      	beq.n	801cc62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc4e:	2201      	movs	r2, #1
 801cc50:	409a      	lsls	r2, r3
 801cc52:	693b      	ldr	r3, [r7, #16]
 801cc54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc5a:	f043 0202 	orr.w	r2, r3, #2
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc66:	2204      	movs	r2, #4
 801cc68:	409a      	lsls	r2, r3
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	4013      	ands	r3, r2
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d012      	beq.n	801cc98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	f003 0302 	and.w	r3, r3, #2
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d00b      	beq.n	801cc98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc84:	2204      	movs	r2, #4
 801cc86:	409a      	lsls	r2, r3
 801cc88:	693b      	ldr	r3, [r7, #16]
 801cc8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cc90:	f043 0204 	orr.w	r2, r3, #4
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cc9c:	2210      	movs	r2, #16
 801cc9e:	409a      	lsls	r2, r3
 801cca0:	68fb      	ldr	r3, [r7, #12]
 801cca2:	4013      	ands	r3, r2
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d043      	beq.n	801cd30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	f003 0308 	and.w	r3, r3, #8
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d03c      	beq.n	801cd30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ccba:	2210      	movs	r2, #16
 801ccbc:	409a      	lsls	r2, r3
 801ccbe:	693b      	ldr	r3, [r7, #16]
 801ccc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d018      	beq.n	801cd02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d108      	bne.n	801ccf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d024      	beq.n	801cd30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ccea:	6878      	ldr	r0, [r7, #4]
 801ccec:	4798      	blx	r3
 801ccee:	e01f      	b.n	801cd30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d01b      	beq.n	801cd30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ccfc:	6878      	ldr	r0, [r7, #4]
 801ccfe:	4798      	blx	r3
 801cd00:	e016      	b.n	801cd30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d107      	bne.n	801cd20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	681a      	ldr	r2, [r3, #0]
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	f022 0208 	bic.w	r2, r2, #8
 801cd1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d003      	beq.n	801cd30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd34:	2220      	movs	r2, #32
 801cd36:	409a      	lsls	r2, r3
 801cd38:	68fb      	ldr	r3, [r7, #12]
 801cd3a:	4013      	ands	r3, r2
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	f000 808f 	beq.w	801ce60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	f003 0310 	and.w	r3, r3, #16
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	f000 8087 	beq.w	801ce60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cd56:	2220      	movs	r2, #32
 801cd58:	409a      	lsls	r2, r3
 801cd5a:	693b      	ldr	r3, [r7, #16]
 801cd5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cd64:	b2db      	uxtb	r3, r3
 801cd66:	2b05      	cmp	r3, #5
 801cd68:	d136      	bne.n	801cdd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	681a      	ldr	r2, [r3, #0]
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	f022 0216 	bic.w	r2, r2, #22
 801cd78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	695a      	ldr	r2, [r3, #20]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cd88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d103      	bne.n	801cd9a <HAL_DMA_IRQHandler+0x1da>
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d007      	beq.n	801cdaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	681a      	ldr	r2, [r3, #0]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	f022 0208 	bic.w	r2, r2, #8
 801cda8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cdae:	223f      	movs	r2, #63	; 0x3f
 801cdb0:	409a      	lsls	r2, r3
 801cdb2:	693b      	ldr	r3, [r7, #16]
 801cdb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2201      	movs	r2, #1
 801cdba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	2200      	movs	r2, #0
 801cdc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d07e      	beq.n	801cecc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cdd2:	6878      	ldr	r0, [r7, #4]
 801cdd4:	4798      	blx	r3
        }
        return;
 801cdd6:	e079      	b.n	801cecc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	d01d      	beq.n	801ce22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d10d      	bne.n	801ce10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d031      	beq.n	801ce60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce00:	6878      	ldr	r0, [r7, #4]
 801ce02:	4798      	blx	r3
 801ce04:	e02c      	b.n	801ce60 <HAL_DMA_IRQHandler+0x2a0>
 801ce06:	bf00      	nop
 801ce08:	20000020 	.word	0x20000020
 801ce0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d023      	beq.n	801ce60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce1c:	6878      	ldr	r0, [r7, #4]
 801ce1e:	4798      	blx	r3
 801ce20:	e01e      	b.n	801ce60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d10f      	bne.n	801ce50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	681a      	ldr	r2, [r3, #0]
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	f022 0210 	bic.w	r2, r2, #16
 801ce3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2201      	movs	r2, #1
 801ce44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	2200      	movs	r2, #0
 801ce4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	d003      	beq.n	801ce60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce5c:	6878      	ldr	r0, [r7, #4]
 801ce5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d032      	beq.n	801cece <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce6c:	f003 0301 	and.w	r3, r3, #1
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d022      	beq.n	801ceba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	2205      	movs	r2, #5
 801ce78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	681a      	ldr	r2, [r3, #0]
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	f022 0201 	bic.w	r2, r2, #1
 801ce8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801ce8c:	68bb      	ldr	r3, [r7, #8]
 801ce8e:	3301      	adds	r3, #1
 801ce90:	60bb      	str	r3, [r7, #8]
 801ce92:	697a      	ldr	r2, [r7, #20]
 801ce94:	429a      	cmp	r2, r3
 801ce96:	d307      	bcc.n	801cea8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	f003 0301 	and.w	r3, r3, #1
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d1f2      	bne.n	801ce8c <HAL_DMA_IRQHandler+0x2cc>
 801cea6:	e000      	b.n	801ceaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 801cea8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	2201      	movs	r2, #1
 801ceae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d005      	beq.n	801cece <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cec6:	6878      	ldr	r0, [r7, #4]
 801cec8:	4798      	blx	r3
 801ceca:	e000      	b.n	801cece <HAL_DMA_IRQHandler+0x30e>
        return;
 801cecc:	bf00      	nop
    }
  }
}
 801cece:	3718      	adds	r7, #24
 801ced0:	46bd      	mov	sp, r7
 801ced2:	bd80      	pop	{r7, pc}

0801ced4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801ced4:	b480      	push	{r7}
 801ced6:	b083      	sub	sp, #12
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801cee2:	b2db      	uxtb	r3, r3
}
 801cee4:	4618      	mov	r0, r3
 801cee6:	370c      	adds	r7, #12
 801cee8:	46bd      	mov	sp, r7
 801ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceee:	4770      	bx	lr

0801cef0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801cef0:	b480      	push	{r7}
 801cef2:	b083      	sub	sp, #12
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801cefc:	4618      	mov	r0, r3
 801cefe:	370c      	adds	r7, #12
 801cf00:	46bd      	mov	sp, r7
 801cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf06:	4770      	bx	lr

0801cf08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801cf08:	b480      	push	{r7}
 801cf0a:	b085      	sub	sp, #20
 801cf0c:	af00      	add	r7, sp, #0
 801cf0e:	60f8      	str	r0, [r7, #12]
 801cf10:	60b9      	str	r1, [r7, #8]
 801cf12:	607a      	str	r2, [r7, #4]
 801cf14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801cf16:	68fb      	ldr	r3, [r7, #12]
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	681a      	ldr	r2, [r3, #0]
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801cf24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801cf26:	68fb      	ldr	r3, [r7, #12]
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	683a      	ldr	r2, [r7, #0]
 801cf2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	689b      	ldr	r3, [r3, #8]
 801cf32:	2b40      	cmp	r3, #64	; 0x40
 801cf34:	d108      	bne.n	801cf48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801cf36:	68fb      	ldr	r3, [r7, #12]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	687a      	ldr	r2, [r7, #4]
 801cf3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	68ba      	ldr	r2, [r7, #8]
 801cf44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801cf46:	e007      	b.n	801cf58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	68ba      	ldr	r2, [r7, #8]
 801cf4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	687a      	ldr	r2, [r7, #4]
 801cf56:	60da      	str	r2, [r3, #12]
}
 801cf58:	bf00      	nop
 801cf5a:	3714      	adds	r7, #20
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf62:	4770      	bx	lr

0801cf64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801cf64:	b480      	push	{r7}
 801cf66:	b085      	sub	sp, #20
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	b2db      	uxtb	r3, r3
 801cf72:	3b10      	subs	r3, #16
 801cf74:	4a14      	ldr	r2, [pc, #80]	; (801cfc8 <DMA_CalcBaseAndBitshift+0x64>)
 801cf76:	fba2 2303 	umull	r2, r3, r2, r3
 801cf7a:	091b      	lsrs	r3, r3, #4
 801cf7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801cf7e:	4a13      	ldr	r2, [pc, #76]	; (801cfcc <DMA_CalcBaseAndBitshift+0x68>)
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	4413      	add	r3, r2
 801cf84:	781b      	ldrb	r3, [r3, #0]
 801cf86:	461a      	mov	r2, r3
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	2b03      	cmp	r3, #3
 801cf90:	d909      	bls.n	801cfa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	681b      	ldr	r3, [r3, #0]
 801cf96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801cf9a:	f023 0303 	bic.w	r3, r3, #3
 801cf9e:	1d1a      	adds	r2, r3, #4
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	659a      	str	r2, [r3, #88]	; 0x58
 801cfa4:	e007      	b.n	801cfb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801cfae:	f023 0303 	bic.w	r3, r3, #3
 801cfb2:	687a      	ldr	r2, [r7, #4]
 801cfb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	3714      	adds	r7, #20
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc4:	4770      	bx	lr
 801cfc6:	bf00      	nop
 801cfc8:	aaaaaaab 	.word	0xaaaaaaab
 801cfcc:	080293b0 	.word	0x080293b0

0801cfd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801cfd0:	b480      	push	{r7}
 801cfd2:	b085      	sub	sp, #20
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cfd8:	2300      	movs	r3, #0
 801cfda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	699b      	ldr	r3, [r3, #24]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d11f      	bne.n	801d02a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801cfea:	68bb      	ldr	r3, [r7, #8]
 801cfec:	2b03      	cmp	r3, #3
 801cfee:	d856      	bhi.n	801d09e <DMA_CheckFifoParam+0xce>
 801cff0:	a201      	add	r2, pc, #4	; (adr r2, 801cff8 <DMA_CheckFifoParam+0x28>)
 801cff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cff6:	bf00      	nop
 801cff8:	0801d009 	.word	0x0801d009
 801cffc:	0801d01b 	.word	0x0801d01b
 801d000:	0801d009 	.word	0x0801d009
 801d004:	0801d09f 	.word	0x0801d09f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d00c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d010:	2b00      	cmp	r3, #0
 801d012:	d046      	beq.n	801d0a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801d014:	2301      	movs	r3, #1
 801d016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d018:	e043      	b.n	801d0a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d01e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801d022:	d140      	bne.n	801d0a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801d024:	2301      	movs	r3, #1
 801d026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d028:	e03d      	b.n	801d0a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	699b      	ldr	r3, [r3, #24]
 801d02e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d032:	d121      	bne.n	801d078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801d034:	68bb      	ldr	r3, [r7, #8]
 801d036:	2b03      	cmp	r3, #3
 801d038:	d837      	bhi.n	801d0aa <DMA_CheckFifoParam+0xda>
 801d03a:	a201      	add	r2, pc, #4	; (adr r2, 801d040 <DMA_CheckFifoParam+0x70>)
 801d03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d040:	0801d051 	.word	0x0801d051
 801d044:	0801d057 	.word	0x0801d057
 801d048:	0801d051 	.word	0x0801d051
 801d04c:	0801d069 	.word	0x0801d069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801d050:	2301      	movs	r3, #1
 801d052:	73fb      	strb	r3, [r7, #15]
      break;
 801d054:	e030      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d05a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d025      	beq.n	801d0ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801d062:	2301      	movs	r3, #1
 801d064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d066:	e022      	b.n	801d0ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d06c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801d070:	d11f      	bne.n	801d0b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801d072:	2301      	movs	r3, #1
 801d074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801d076:	e01c      	b.n	801d0b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801d078:	68bb      	ldr	r3, [r7, #8]
 801d07a:	2b02      	cmp	r3, #2
 801d07c:	d903      	bls.n	801d086 <DMA_CheckFifoParam+0xb6>
 801d07e:	68bb      	ldr	r3, [r7, #8]
 801d080:	2b03      	cmp	r3, #3
 801d082:	d003      	beq.n	801d08c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801d084:	e018      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801d086:	2301      	movs	r3, #1
 801d088:	73fb      	strb	r3, [r7, #15]
      break;
 801d08a:	e015      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d094:	2b00      	cmp	r3, #0
 801d096:	d00e      	beq.n	801d0b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801d098:	2301      	movs	r3, #1
 801d09a:	73fb      	strb	r3, [r7, #15]
      break;
 801d09c:	e00b      	b.n	801d0b6 <DMA_CheckFifoParam+0xe6>
      break;
 801d09e:	bf00      	nop
 801d0a0:	e00a      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d0a2:	bf00      	nop
 801d0a4:	e008      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d0a6:	bf00      	nop
 801d0a8:	e006      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d0aa:	bf00      	nop
 801d0ac:	e004      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d0ae:	bf00      	nop
 801d0b0:	e002      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      break;   
 801d0b2:	bf00      	nop
 801d0b4:	e000      	b.n	801d0b8 <DMA_CheckFifoParam+0xe8>
      break;
 801d0b6:	bf00      	nop
    }
  } 
  
  return status; 
 801d0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	3714      	adds	r7, #20
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0c4:	4770      	bx	lr
 801d0c6:	bf00      	nop

0801d0c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801d0c8:	b480      	push	{r7}
 801d0ca:	b089      	sub	sp, #36	; 0x24
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	6078      	str	r0, [r7, #4]
 801d0d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d0d2:	2300      	movs	r3, #0
 801d0d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801d0da:	2300      	movs	r3, #0
 801d0dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d0de:	2300      	movs	r3, #0
 801d0e0:	61fb      	str	r3, [r7, #28]
 801d0e2:	e159      	b.n	801d398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d0e4:	2201      	movs	r2, #1
 801d0e6:	69fb      	ldr	r3, [r7, #28]
 801d0e8:	fa02 f303 	lsl.w	r3, r2, r3
 801d0ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	697a      	ldr	r2, [r7, #20]
 801d0f4:	4013      	ands	r3, r2
 801d0f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801d0f8:	693a      	ldr	r2, [r7, #16]
 801d0fa:	697b      	ldr	r3, [r7, #20]
 801d0fc:	429a      	cmp	r2, r3
 801d0fe:	f040 8148 	bne.w	801d392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801d102:	683b      	ldr	r3, [r7, #0]
 801d104:	685b      	ldr	r3, [r3, #4]
 801d106:	f003 0303 	and.w	r3, r3, #3
 801d10a:	2b01      	cmp	r3, #1
 801d10c:	d005      	beq.n	801d11a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d10e:	683b      	ldr	r3, [r7, #0]
 801d110:	685b      	ldr	r3, [r3, #4]
 801d112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801d116:	2b02      	cmp	r3, #2
 801d118:	d130      	bne.n	801d17c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	689b      	ldr	r3, [r3, #8]
 801d11e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d120:	69fb      	ldr	r3, [r7, #28]
 801d122:	005b      	lsls	r3, r3, #1
 801d124:	2203      	movs	r2, #3
 801d126:	fa02 f303 	lsl.w	r3, r2, r3
 801d12a:	43db      	mvns	r3, r3
 801d12c:	69ba      	ldr	r2, [r7, #24]
 801d12e:	4013      	ands	r3, r2
 801d130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801d132:	683b      	ldr	r3, [r7, #0]
 801d134:	68da      	ldr	r2, [r3, #12]
 801d136:	69fb      	ldr	r3, [r7, #28]
 801d138:	005b      	lsls	r3, r3, #1
 801d13a:	fa02 f303 	lsl.w	r3, r2, r3
 801d13e:	69ba      	ldr	r2, [r7, #24]
 801d140:	4313      	orrs	r3, r2
 801d142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	69ba      	ldr	r2, [r7, #24]
 801d148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	685b      	ldr	r3, [r3, #4]
 801d14e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d150:	2201      	movs	r2, #1
 801d152:	69fb      	ldr	r3, [r7, #28]
 801d154:	fa02 f303 	lsl.w	r3, r2, r3
 801d158:	43db      	mvns	r3, r3
 801d15a:	69ba      	ldr	r2, [r7, #24]
 801d15c:	4013      	ands	r3, r2
 801d15e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801d160:	683b      	ldr	r3, [r7, #0]
 801d162:	685b      	ldr	r3, [r3, #4]
 801d164:	091b      	lsrs	r3, r3, #4
 801d166:	f003 0201 	and.w	r2, r3, #1
 801d16a:	69fb      	ldr	r3, [r7, #28]
 801d16c:	fa02 f303 	lsl.w	r3, r2, r3
 801d170:	69ba      	ldr	r2, [r7, #24]
 801d172:	4313      	orrs	r3, r2
 801d174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	69ba      	ldr	r2, [r7, #24]
 801d17a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801d17c:	683b      	ldr	r3, [r7, #0]
 801d17e:	685b      	ldr	r3, [r3, #4]
 801d180:	f003 0303 	and.w	r3, r3, #3
 801d184:	2b03      	cmp	r3, #3
 801d186:	d017      	beq.n	801d1b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801d188:	687b      	ldr	r3, [r7, #4]
 801d18a:	68db      	ldr	r3, [r3, #12]
 801d18c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d18e:	69fb      	ldr	r3, [r7, #28]
 801d190:	005b      	lsls	r3, r3, #1
 801d192:	2203      	movs	r2, #3
 801d194:	fa02 f303 	lsl.w	r3, r2, r3
 801d198:	43db      	mvns	r3, r3
 801d19a:	69ba      	ldr	r2, [r7, #24]
 801d19c:	4013      	ands	r3, r2
 801d19e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801d1a0:	683b      	ldr	r3, [r7, #0]
 801d1a2:	689a      	ldr	r2, [r3, #8]
 801d1a4:	69fb      	ldr	r3, [r7, #28]
 801d1a6:	005b      	lsls	r3, r3, #1
 801d1a8:	fa02 f303 	lsl.w	r3, r2, r3
 801d1ac:	69ba      	ldr	r2, [r7, #24]
 801d1ae:	4313      	orrs	r3, r2
 801d1b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	69ba      	ldr	r2, [r7, #24]
 801d1b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801d1b8:	683b      	ldr	r3, [r7, #0]
 801d1ba:	685b      	ldr	r3, [r3, #4]
 801d1bc:	f003 0303 	and.w	r3, r3, #3
 801d1c0:	2b02      	cmp	r3, #2
 801d1c2:	d123      	bne.n	801d20c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801d1c4:	69fb      	ldr	r3, [r7, #28]
 801d1c6:	08da      	lsrs	r2, r3, #3
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	3208      	adds	r2, #8
 801d1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d1d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d1d2:	69fb      	ldr	r3, [r7, #28]
 801d1d4:	f003 0307 	and.w	r3, r3, #7
 801d1d8:	009b      	lsls	r3, r3, #2
 801d1da:	220f      	movs	r2, #15
 801d1dc:	fa02 f303 	lsl.w	r3, r2, r3
 801d1e0:	43db      	mvns	r3, r3
 801d1e2:	69ba      	ldr	r2, [r7, #24]
 801d1e4:	4013      	ands	r3, r2
 801d1e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801d1e8:	683b      	ldr	r3, [r7, #0]
 801d1ea:	691a      	ldr	r2, [r3, #16]
 801d1ec:	69fb      	ldr	r3, [r7, #28]
 801d1ee:	f003 0307 	and.w	r3, r3, #7
 801d1f2:	009b      	lsls	r3, r3, #2
 801d1f4:	fa02 f303 	lsl.w	r3, r2, r3
 801d1f8:	69ba      	ldr	r2, [r7, #24]
 801d1fa:	4313      	orrs	r3, r2
 801d1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	08da      	lsrs	r2, r3, #3
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	3208      	adds	r2, #8
 801d206:	69b9      	ldr	r1, [r7, #24]
 801d208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d212:	69fb      	ldr	r3, [r7, #28]
 801d214:	005b      	lsls	r3, r3, #1
 801d216:	2203      	movs	r2, #3
 801d218:	fa02 f303 	lsl.w	r3, r2, r3
 801d21c:	43db      	mvns	r3, r3
 801d21e:	69ba      	ldr	r2, [r7, #24]
 801d220:	4013      	ands	r3, r2
 801d222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801d224:	683b      	ldr	r3, [r7, #0]
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	f003 0203 	and.w	r2, r3, #3
 801d22c:	69fb      	ldr	r3, [r7, #28]
 801d22e:	005b      	lsls	r3, r3, #1
 801d230:	fa02 f303 	lsl.w	r3, r2, r3
 801d234:	69ba      	ldr	r2, [r7, #24]
 801d236:	4313      	orrs	r3, r2
 801d238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	69ba      	ldr	r2, [r7, #24]
 801d23e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801d240:	683b      	ldr	r3, [r7, #0]
 801d242:	685b      	ldr	r3, [r3, #4]
 801d244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d248:	2b00      	cmp	r3, #0
 801d24a:	f000 80a2 	beq.w	801d392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d24e:	2300      	movs	r3, #0
 801d250:	60fb      	str	r3, [r7, #12]
 801d252:	4b57      	ldr	r3, [pc, #348]	; (801d3b0 <HAL_GPIO_Init+0x2e8>)
 801d254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d256:	4a56      	ldr	r2, [pc, #344]	; (801d3b0 <HAL_GPIO_Init+0x2e8>)
 801d258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d25c:	6453      	str	r3, [r2, #68]	; 0x44
 801d25e:	4b54      	ldr	r3, [pc, #336]	; (801d3b0 <HAL_GPIO_Init+0x2e8>)
 801d260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d266:	60fb      	str	r3, [r7, #12]
 801d268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801d26a:	4a52      	ldr	r2, [pc, #328]	; (801d3b4 <HAL_GPIO_Init+0x2ec>)
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	089b      	lsrs	r3, r3, #2
 801d270:	3302      	adds	r3, #2
 801d272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801d278:	69fb      	ldr	r3, [r7, #28]
 801d27a:	f003 0303 	and.w	r3, r3, #3
 801d27e:	009b      	lsls	r3, r3, #2
 801d280:	220f      	movs	r2, #15
 801d282:	fa02 f303 	lsl.w	r3, r2, r3
 801d286:	43db      	mvns	r3, r3
 801d288:	69ba      	ldr	r2, [r7, #24]
 801d28a:	4013      	ands	r3, r2
 801d28c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	4a49      	ldr	r2, [pc, #292]	; (801d3b8 <HAL_GPIO_Init+0x2f0>)
 801d292:	4293      	cmp	r3, r2
 801d294:	d019      	beq.n	801d2ca <HAL_GPIO_Init+0x202>
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	4a48      	ldr	r2, [pc, #288]	; (801d3bc <HAL_GPIO_Init+0x2f4>)
 801d29a:	4293      	cmp	r3, r2
 801d29c:	d013      	beq.n	801d2c6 <HAL_GPIO_Init+0x1fe>
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	4a47      	ldr	r2, [pc, #284]	; (801d3c0 <HAL_GPIO_Init+0x2f8>)
 801d2a2:	4293      	cmp	r3, r2
 801d2a4:	d00d      	beq.n	801d2c2 <HAL_GPIO_Init+0x1fa>
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	4a46      	ldr	r2, [pc, #280]	; (801d3c4 <HAL_GPIO_Init+0x2fc>)
 801d2aa:	4293      	cmp	r3, r2
 801d2ac:	d007      	beq.n	801d2be <HAL_GPIO_Init+0x1f6>
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	4a45      	ldr	r2, [pc, #276]	; (801d3c8 <HAL_GPIO_Init+0x300>)
 801d2b2:	4293      	cmp	r3, r2
 801d2b4:	d101      	bne.n	801d2ba <HAL_GPIO_Init+0x1f2>
 801d2b6:	2304      	movs	r3, #4
 801d2b8:	e008      	b.n	801d2cc <HAL_GPIO_Init+0x204>
 801d2ba:	2307      	movs	r3, #7
 801d2bc:	e006      	b.n	801d2cc <HAL_GPIO_Init+0x204>
 801d2be:	2303      	movs	r3, #3
 801d2c0:	e004      	b.n	801d2cc <HAL_GPIO_Init+0x204>
 801d2c2:	2302      	movs	r3, #2
 801d2c4:	e002      	b.n	801d2cc <HAL_GPIO_Init+0x204>
 801d2c6:	2301      	movs	r3, #1
 801d2c8:	e000      	b.n	801d2cc <HAL_GPIO_Init+0x204>
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	69fa      	ldr	r2, [r7, #28]
 801d2ce:	f002 0203 	and.w	r2, r2, #3
 801d2d2:	0092      	lsls	r2, r2, #2
 801d2d4:	4093      	lsls	r3, r2
 801d2d6:	69ba      	ldr	r2, [r7, #24]
 801d2d8:	4313      	orrs	r3, r2
 801d2da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801d2dc:	4935      	ldr	r1, [pc, #212]	; (801d3b4 <HAL_GPIO_Init+0x2ec>)
 801d2de:	69fb      	ldr	r3, [r7, #28]
 801d2e0:	089b      	lsrs	r3, r3, #2
 801d2e2:	3302      	adds	r3, #2
 801d2e4:	69ba      	ldr	r2, [r7, #24]
 801d2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801d2ea:	4b38      	ldr	r3, [pc, #224]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d2ec:	689b      	ldr	r3, [r3, #8]
 801d2ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d2f0:	693b      	ldr	r3, [r7, #16]
 801d2f2:	43db      	mvns	r3, r3
 801d2f4:	69ba      	ldr	r2, [r7, #24]
 801d2f6:	4013      	ands	r3, r2
 801d2f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801d2fa:	683b      	ldr	r3, [r7, #0]
 801d2fc:	685b      	ldr	r3, [r3, #4]
 801d2fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d302:	2b00      	cmp	r3, #0
 801d304:	d003      	beq.n	801d30e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801d306:	69ba      	ldr	r2, [r7, #24]
 801d308:	693b      	ldr	r3, [r7, #16]
 801d30a:	4313      	orrs	r3, r2
 801d30c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801d30e:	4a2f      	ldr	r2, [pc, #188]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d310:	69bb      	ldr	r3, [r7, #24]
 801d312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801d314:	4b2d      	ldr	r3, [pc, #180]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d316:	68db      	ldr	r3, [r3, #12]
 801d318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d31a:	693b      	ldr	r3, [r7, #16]
 801d31c:	43db      	mvns	r3, r3
 801d31e:	69ba      	ldr	r2, [r7, #24]
 801d320:	4013      	ands	r3, r2
 801d322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801d324:	683b      	ldr	r3, [r7, #0]
 801d326:	685b      	ldr	r3, [r3, #4]
 801d328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d003      	beq.n	801d338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801d330:	69ba      	ldr	r2, [r7, #24]
 801d332:	693b      	ldr	r3, [r7, #16]
 801d334:	4313      	orrs	r3, r2
 801d336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801d338:	4a24      	ldr	r2, [pc, #144]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d33a:	69bb      	ldr	r3, [r7, #24]
 801d33c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801d33e:	4b23      	ldr	r3, [pc, #140]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d340:	685b      	ldr	r3, [r3, #4]
 801d342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d344:	693b      	ldr	r3, [r7, #16]
 801d346:	43db      	mvns	r3, r3
 801d348:	69ba      	ldr	r2, [r7, #24]
 801d34a:	4013      	ands	r3, r2
 801d34c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801d34e:	683b      	ldr	r3, [r7, #0]
 801d350:	685b      	ldr	r3, [r3, #4]
 801d352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d356:	2b00      	cmp	r3, #0
 801d358:	d003      	beq.n	801d362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801d35a:	69ba      	ldr	r2, [r7, #24]
 801d35c:	693b      	ldr	r3, [r7, #16]
 801d35e:	4313      	orrs	r3, r2
 801d360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801d362:	4a1a      	ldr	r2, [pc, #104]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d364:	69bb      	ldr	r3, [r7, #24]
 801d366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801d368:	4b18      	ldr	r3, [pc, #96]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801d36e:	693b      	ldr	r3, [r7, #16]
 801d370:	43db      	mvns	r3, r3
 801d372:	69ba      	ldr	r2, [r7, #24]
 801d374:	4013      	ands	r3, r2
 801d376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801d378:	683b      	ldr	r3, [r7, #0]
 801d37a:	685b      	ldr	r3, [r3, #4]
 801d37c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d380:	2b00      	cmp	r3, #0
 801d382:	d003      	beq.n	801d38c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801d384:	69ba      	ldr	r2, [r7, #24]
 801d386:	693b      	ldr	r3, [r7, #16]
 801d388:	4313      	orrs	r3, r2
 801d38a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801d38c:	4a0f      	ldr	r2, [pc, #60]	; (801d3cc <HAL_GPIO_Init+0x304>)
 801d38e:	69bb      	ldr	r3, [r7, #24]
 801d390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d392:	69fb      	ldr	r3, [r7, #28]
 801d394:	3301      	adds	r3, #1
 801d396:	61fb      	str	r3, [r7, #28]
 801d398:	69fb      	ldr	r3, [r7, #28]
 801d39a:	2b0f      	cmp	r3, #15
 801d39c:	f67f aea2 	bls.w	801d0e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801d3a0:	bf00      	nop
 801d3a2:	bf00      	nop
 801d3a4:	3724      	adds	r7, #36	; 0x24
 801d3a6:	46bd      	mov	sp, r7
 801d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ac:	4770      	bx	lr
 801d3ae:	bf00      	nop
 801d3b0:	40023800 	.word	0x40023800
 801d3b4:	40013800 	.word	0x40013800
 801d3b8:	40020000 	.word	0x40020000
 801d3bc:	40020400 	.word	0x40020400
 801d3c0:	40020800 	.word	0x40020800
 801d3c4:	40020c00 	.word	0x40020c00
 801d3c8:	40021000 	.word	0x40021000
 801d3cc:	40013c00 	.word	0x40013c00

0801d3d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801d3d0:	b480      	push	{r7}
 801d3d2:	b087      	sub	sp, #28
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
 801d3d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801d3da:	2300      	movs	r3, #0
 801d3dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801d3de:	2300      	movs	r3, #0
 801d3e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	617b      	str	r3, [r7, #20]
 801d3ea:	e0bb      	b.n	801d564 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801d3ec:	2201      	movs	r2, #1
 801d3ee:	697b      	ldr	r3, [r7, #20]
 801d3f0:	fa02 f303 	lsl.w	r3, r2, r3
 801d3f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801d3f6:	683a      	ldr	r2, [r7, #0]
 801d3f8:	693b      	ldr	r3, [r7, #16]
 801d3fa:	4013      	ands	r3, r2
 801d3fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801d3fe:	68fa      	ldr	r2, [r7, #12]
 801d400:	693b      	ldr	r3, [r7, #16]
 801d402:	429a      	cmp	r2, r3
 801d404:	f040 80ab 	bne.w	801d55e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801d408:	4a5c      	ldr	r2, [pc, #368]	; (801d57c <HAL_GPIO_DeInit+0x1ac>)
 801d40a:	697b      	ldr	r3, [r7, #20]
 801d40c:	089b      	lsrs	r3, r3, #2
 801d40e:	3302      	adds	r3, #2
 801d410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d414:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801d416:	697b      	ldr	r3, [r7, #20]
 801d418:	f003 0303 	and.w	r3, r3, #3
 801d41c:	009b      	lsls	r3, r3, #2
 801d41e:	220f      	movs	r2, #15
 801d420:	fa02 f303 	lsl.w	r3, r2, r3
 801d424:	68ba      	ldr	r2, [r7, #8]
 801d426:	4013      	ands	r3, r2
 801d428:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	4a54      	ldr	r2, [pc, #336]	; (801d580 <HAL_GPIO_DeInit+0x1b0>)
 801d42e:	4293      	cmp	r3, r2
 801d430:	d019      	beq.n	801d466 <HAL_GPIO_DeInit+0x96>
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	4a53      	ldr	r2, [pc, #332]	; (801d584 <HAL_GPIO_DeInit+0x1b4>)
 801d436:	4293      	cmp	r3, r2
 801d438:	d013      	beq.n	801d462 <HAL_GPIO_DeInit+0x92>
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	4a52      	ldr	r2, [pc, #328]	; (801d588 <HAL_GPIO_DeInit+0x1b8>)
 801d43e:	4293      	cmp	r3, r2
 801d440:	d00d      	beq.n	801d45e <HAL_GPIO_DeInit+0x8e>
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	4a51      	ldr	r2, [pc, #324]	; (801d58c <HAL_GPIO_DeInit+0x1bc>)
 801d446:	4293      	cmp	r3, r2
 801d448:	d007      	beq.n	801d45a <HAL_GPIO_DeInit+0x8a>
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	4a50      	ldr	r2, [pc, #320]	; (801d590 <HAL_GPIO_DeInit+0x1c0>)
 801d44e:	4293      	cmp	r3, r2
 801d450:	d101      	bne.n	801d456 <HAL_GPIO_DeInit+0x86>
 801d452:	2304      	movs	r3, #4
 801d454:	e008      	b.n	801d468 <HAL_GPIO_DeInit+0x98>
 801d456:	2307      	movs	r3, #7
 801d458:	e006      	b.n	801d468 <HAL_GPIO_DeInit+0x98>
 801d45a:	2303      	movs	r3, #3
 801d45c:	e004      	b.n	801d468 <HAL_GPIO_DeInit+0x98>
 801d45e:	2302      	movs	r3, #2
 801d460:	e002      	b.n	801d468 <HAL_GPIO_DeInit+0x98>
 801d462:	2301      	movs	r3, #1
 801d464:	e000      	b.n	801d468 <HAL_GPIO_DeInit+0x98>
 801d466:	2300      	movs	r3, #0
 801d468:	697a      	ldr	r2, [r7, #20]
 801d46a:	f002 0203 	and.w	r2, r2, #3
 801d46e:	0092      	lsls	r2, r2, #2
 801d470:	4093      	lsls	r3, r2
 801d472:	68ba      	ldr	r2, [r7, #8]
 801d474:	429a      	cmp	r2, r3
 801d476:	d132      	bne.n	801d4de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801d478:	4b46      	ldr	r3, [pc, #280]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d47a:	681a      	ldr	r2, [r3, #0]
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	43db      	mvns	r3, r3
 801d480:	4944      	ldr	r1, [pc, #272]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d482:	4013      	ands	r3, r2
 801d484:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801d486:	4b43      	ldr	r3, [pc, #268]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d488:	685a      	ldr	r2, [r3, #4]
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	43db      	mvns	r3, r3
 801d48e:	4941      	ldr	r1, [pc, #260]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d490:	4013      	ands	r3, r2
 801d492:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801d494:	4b3f      	ldr	r3, [pc, #252]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d496:	68da      	ldr	r2, [r3, #12]
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	43db      	mvns	r3, r3
 801d49c:	493d      	ldr	r1, [pc, #244]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d49e:	4013      	ands	r3, r2
 801d4a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801d4a2:	4b3c      	ldr	r3, [pc, #240]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d4a4:	689a      	ldr	r2, [r3, #8]
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	43db      	mvns	r3, r3
 801d4aa:	493a      	ldr	r1, [pc, #232]	; (801d594 <HAL_GPIO_DeInit+0x1c4>)
 801d4ac:	4013      	ands	r3, r2
 801d4ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801d4b0:	697b      	ldr	r3, [r7, #20]
 801d4b2:	f003 0303 	and.w	r3, r3, #3
 801d4b6:	009b      	lsls	r3, r3, #2
 801d4b8:	220f      	movs	r2, #15
 801d4ba:	fa02 f303 	lsl.w	r3, r2, r3
 801d4be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801d4c0:	4a2e      	ldr	r2, [pc, #184]	; (801d57c <HAL_GPIO_DeInit+0x1ac>)
 801d4c2:	697b      	ldr	r3, [r7, #20]
 801d4c4:	089b      	lsrs	r3, r3, #2
 801d4c6:	3302      	adds	r3, #2
 801d4c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d4cc:	68bb      	ldr	r3, [r7, #8]
 801d4ce:	43da      	mvns	r2, r3
 801d4d0:	482a      	ldr	r0, [pc, #168]	; (801d57c <HAL_GPIO_DeInit+0x1ac>)
 801d4d2:	697b      	ldr	r3, [r7, #20]
 801d4d4:	089b      	lsrs	r3, r3, #2
 801d4d6:	400a      	ands	r2, r1
 801d4d8:	3302      	adds	r3, #2
 801d4da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681a      	ldr	r2, [r3, #0]
 801d4e2:	697b      	ldr	r3, [r7, #20]
 801d4e4:	005b      	lsls	r3, r3, #1
 801d4e6:	2103      	movs	r1, #3
 801d4e8:	fa01 f303 	lsl.w	r3, r1, r3
 801d4ec:	43db      	mvns	r3, r3
 801d4ee:	401a      	ands	r2, r3
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801d4f4:	697b      	ldr	r3, [r7, #20]
 801d4f6:	08da      	lsrs	r2, r3, #3
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	3208      	adds	r2, #8
 801d4fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	f003 0307 	and.w	r3, r3, #7
 801d506:	009b      	lsls	r3, r3, #2
 801d508:	220f      	movs	r2, #15
 801d50a:	fa02 f303 	lsl.w	r3, r2, r3
 801d50e:	43db      	mvns	r3, r3
 801d510:	697a      	ldr	r2, [r7, #20]
 801d512:	08d2      	lsrs	r2, r2, #3
 801d514:	4019      	ands	r1, r3
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	3208      	adds	r2, #8
 801d51a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	68da      	ldr	r2, [r3, #12]
 801d522:	697b      	ldr	r3, [r7, #20]
 801d524:	005b      	lsls	r3, r3, #1
 801d526:	2103      	movs	r1, #3
 801d528:	fa01 f303 	lsl.w	r3, r1, r3
 801d52c:	43db      	mvns	r3, r3
 801d52e:	401a      	ands	r2, r3
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	685a      	ldr	r2, [r3, #4]
 801d538:	2101      	movs	r1, #1
 801d53a:	697b      	ldr	r3, [r7, #20]
 801d53c:	fa01 f303 	lsl.w	r3, r1, r3
 801d540:	43db      	mvns	r3, r3
 801d542:	401a      	ands	r2, r3
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	689a      	ldr	r2, [r3, #8]
 801d54c:	697b      	ldr	r3, [r7, #20]
 801d54e:	005b      	lsls	r3, r3, #1
 801d550:	2103      	movs	r1, #3
 801d552:	fa01 f303 	lsl.w	r3, r1, r3
 801d556:	43db      	mvns	r3, r3
 801d558:	401a      	ands	r2, r3
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801d55e:	697b      	ldr	r3, [r7, #20]
 801d560:	3301      	adds	r3, #1
 801d562:	617b      	str	r3, [r7, #20]
 801d564:	697b      	ldr	r3, [r7, #20]
 801d566:	2b0f      	cmp	r3, #15
 801d568:	f67f af40 	bls.w	801d3ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801d56c:	bf00      	nop
 801d56e:	bf00      	nop
 801d570:	371c      	adds	r7, #28
 801d572:	46bd      	mov	sp, r7
 801d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d578:	4770      	bx	lr
 801d57a:	bf00      	nop
 801d57c:	40013800 	.word	0x40013800
 801d580:	40020000 	.word	0x40020000
 801d584:	40020400 	.word	0x40020400
 801d588:	40020800 	.word	0x40020800
 801d58c:	40020c00 	.word	0x40020c00
 801d590:	40021000 	.word	0x40021000
 801d594:	40013c00 	.word	0x40013c00

0801d598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801d598:	b480      	push	{r7}
 801d59a:	b083      	sub	sp, #12
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	460b      	mov	r3, r1
 801d5a2:	807b      	strh	r3, [r7, #2]
 801d5a4:	4613      	mov	r3, r2
 801d5a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801d5a8:	787b      	ldrb	r3, [r7, #1]
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d003      	beq.n	801d5b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801d5ae:	887a      	ldrh	r2, [r7, #2]
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801d5b4:	e003      	b.n	801d5be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801d5b6:	887b      	ldrh	r3, [r7, #2]
 801d5b8:	041a      	lsls	r2, r3, #16
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	619a      	str	r2, [r3, #24]
}
 801d5be:	bf00      	nop
 801d5c0:	370c      	adds	r7, #12
 801d5c2:	46bd      	mov	sp, r7
 801d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5c8:	4770      	bx	lr
	...

0801d5cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b082      	sub	sp, #8
 801d5d0:	af00      	add	r7, sp, #0
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801d5d6:	4b08      	ldr	r3, [pc, #32]	; (801d5f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d5d8:	695a      	ldr	r2, [r3, #20]
 801d5da:	88fb      	ldrh	r3, [r7, #6]
 801d5dc:	4013      	ands	r3, r2
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d006      	beq.n	801d5f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801d5e2:	4a05      	ldr	r2, [pc, #20]	; (801d5f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801d5e4:	88fb      	ldrh	r3, [r7, #6]
 801d5e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801d5e8:	88fb      	ldrh	r3, [r7, #6]
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7e4 fdbb 	bl	8002166 <HAL_GPIO_EXTI_Callback>
  }
}
 801d5f0:	bf00      	nop
 801d5f2:	3708      	adds	r7, #8
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	bd80      	pop	{r7, pc}
 801d5f8:	40013c00 	.word	0x40013c00

0801d5fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b084      	sub	sp, #16
 801d600:	af00      	add	r7, sp, #0
 801d602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d101      	bne.n	801d60e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801d60a:	2301      	movs	r3, #1
 801d60c:	e12b      	b.n	801d866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d614:	b2db      	uxtb	r3, r3
 801d616:	2b00      	cmp	r3, #0
 801d618:	d106      	bne.n	801d628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	2200      	movs	r2, #0
 801d61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801d622:	6878      	ldr	r0, [r7, #4]
 801d624:	f7e5 ffa0 	bl	8003568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	2224      	movs	r2, #36	; 0x24
 801d62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	681a      	ldr	r2, [r3, #0]
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	f022 0201 	bic.w	r2, r2, #1
 801d63e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	681a      	ldr	r2, [r3, #0]
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801d64e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	681a      	ldr	r2, [r3, #0]
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801d65e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801d660:	f003 fb62 	bl	8020d28 <HAL_RCC_GetPCLK1Freq>
 801d664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	685b      	ldr	r3, [r3, #4]
 801d66a:	4a81      	ldr	r2, [pc, #516]	; (801d870 <HAL_I2C_Init+0x274>)
 801d66c:	4293      	cmp	r3, r2
 801d66e:	d807      	bhi.n	801d680 <HAL_I2C_Init+0x84>
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	4a80      	ldr	r2, [pc, #512]	; (801d874 <HAL_I2C_Init+0x278>)
 801d674:	4293      	cmp	r3, r2
 801d676:	bf94      	ite	ls
 801d678:	2301      	movls	r3, #1
 801d67a:	2300      	movhi	r3, #0
 801d67c:	b2db      	uxtb	r3, r3
 801d67e:	e006      	b.n	801d68e <HAL_I2C_Init+0x92>
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	4a7d      	ldr	r2, [pc, #500]	; (801d878 <HAL_I2C_Init+0x27c>)
 801d684:	4293      	cmp	r3, r2
 801d686:	bf94      	ite	ls
 801d688:	2301      	movls	r3, #1
 801d68a:	2300      	movhi	r3, #0
 801d68c:	b2db      	uxtb	r3, r3
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d001      	beq.n	801d696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801d692:	2301      	movs	r3, #1
 801d694:	e0e7      	b.n	801d866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	4a78      	ldr	r2, [pc, #480]	; (801d87c <HAL_I2C_Init+0x280>)
 801d69a:	fba2 2303 	umull	r2, r3, r2, r3
 801d69e:	0c9b      	lsrs	r3, r3, #18
 801d6a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	685b      	ldr	r3, [r3, #4]
 801d6a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	68ba      	ldr	r2, [r7, #8]
 801d6b2:	430a      	orrs	r2, r1
 801d6b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	6a1b      	ldr	r3, [r3, #32]
 801d6bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	685b      	ldr	r3, [r3, #4]
 801d6c4:	4a6a      	ldr	r2, [pc, #424]	; (801d870 <HAL_I2C_Init+0x274>)
 801d6c6:	4293      	cmp	r3, r2
 801d6c8:	d802      	bhi.n	801d6d0 <HAL_I2C_Init+0xd4>
 801d6ca:	68bb      	ldr	r3, [r7, #8]
 801d6cc:	3301      	adds	r3, #1
 801d6ce:	e009      	b.n	801d6e4 <HAL_I2C_Init+0xe8>
 801d6d0:	68bb      	ldr	r3, [r7, #8]
 801d6d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801d6d6:	fb02 f303 	mul.w	r3, r2, r3
 801d6da:	4a69      	ldr	r2, [pc, #420]	; (801d880 <HAL_I2C_Init+0x284>)
 801d6dc:	fba2 2303 	umull	r2, r3, r2, r3
 801d6e0:	099b      	lsrs	r3, r3, #6
 801d6e2:	3301      	adds	r3, #1
 801d6e4:	687a      	ldr	r2, [r7, #4]
 801d6e6:	6812      	ldr	r2, [r2, #0]
 801d6e8:	430b      	orrs	r3, r1
 801d6ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	681b      	ldr	r3, [r3, #0]
 801d6f0:	69db      	ldr	r3, [r3, #28]
 801d6f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801d6f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	685b      	ldr	r3, [r3, #4]
 801d6fe:	495c      	ldr	r1, [pc, #368]	; (801d870 <HAL_I2C_Init+0x274>)
 801d700:	428b      	cmp	r3, r1
 801d702:	d819      	bhi.n	801d738 <HAL_I2C_Init+0x13c>
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	1e59      	subs	r1, r3, #1
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	685b      	ldr	r3, [r3, #4]
 801d70c:	005b      	lsls	r3, r3, #1
 801d70e:	fbb1 f3f3 	udiv	r3, r1, r3
 801d712:	1c59      	adds	r1, r3, #1
 801d714:	f640 73fc 	movw	r3, #4092	; 0xffc
 801d718:	400b      	ands	r3, r1
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d00a      	beq.n	801d734 <HAL_I2C_Init+0x138>
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	1e59      	subs	r1, r3, #1
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	685b      	ldr	r3, [r3, #4]
 801d726:	005b      	lsls	r3, r3, #1
 801d728:	fbb1 f3f3 	udiv	r3, r1, r3
 801d72c:	3301      	adds	r3, #1
 801d72e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d732:	e051      	b.n	801d7d8 <HAL_I2C_Init+0x1dc>
 801d734:	2304      	movs	r3, #4
 801d736:	e04f      	b.n	801d7d8 <HAL_I2C_Init+0x1dc>
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	689b      	ldr	r3, [r3, #8]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d111      	bne.n	801d764 <HAL_I2C_Init+0x168>
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	1e58      	subs	r0, r3, #1
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	6859      	ldr	r1, [r3, #4]
 801d748:	460b      	mov	r3, r1
 801d74a:	005b      	lsls	r3, r3, #1
 801d74c:	440b      	add	r3, r1
 801d74e:	fbb0 f3f3 	udiv	r3, r0, r3
 801d752:	3301      	adds	r3, #1
 801d754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d758:	2b00      	cmp	r3, #0
 801d75a:	bf0c      	ite	eq
 801d75c:	2301      	moveq	r3, #1
 801d75e:	2300      	movne	r3, #0
 801d760:	b2db      	uxtb	r3, r3
 801d762:	e012      	b.n	801d78a <HAL_I2C_Init+0x18e>
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	1e58      	subs	r0, r3, #1
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	6859      	ldr	r1, [r3, #4]
 801d76c:	460b      	mov	r3, r1
 801d76e:	009b      	lsls	r3, r3, #2
 801d770:	440b      	add	r3, r1
 801d772:	0099      	lsls	r1, r3, #2
 801d774:	440b      	add	r3, r1
 801d776:	fbb0 f3f3 	udiv	r3, r0, r3
 801d77a:	3301      	adds	r3, #1
 801d77c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d780:	2b00      	cmp	r3, #0
 801d782:	bf0c      	ite	eq
 801d784:	2301      	moveq	r3, #1
 801d786:	2300      	movne	r3, #0
 801d788:	b2db      	uxtb	r3, r3
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	d001      	beq.n	801d792 <HAL_I2C_Init+0x196>
 801d78e:	2301      	movs	r3, #1
 801d790:	e022      	b.n	801d7d8 <HAL_I2C_Init+0x1dc>
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	689b      	ldr	r3, [r3, #8]
 801d796:	2b00      	cmp	r3, #0
 801d798:	d10e      	bne.n	801d7b8 <HAL_I2C_Init+0x1bc>
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	1e58      	subs	r0, r3, #1
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6859      	ldr	r1, [r3, #4]
 801d7a2:	460b      	mov	r3, r1
 801d7a4:	005b      	lsls	r3, r3, #1
 801d7a6:	440b      	add	r3, r1
 801d7a8:	fbb0 f3f3 	udiv	r3, r0, r3
 801d7ac:	3301      	adds	r3, #1
 801d7ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d7b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d7b6:	e00f      	b.n	801d7d8 <HAL_I2C_Init+0x1dc>
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	1e58      	subs	r0, r3, #1
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	6859      	ldr	r1, [r3, #4]
 801d7c0:	460b      	mov	r3, r1
 801d7c2:	009b      	lsls	r3, r3, #2
 801d7c4:	440b      	add	r3, r1
 801d7c6:	0099      	lsls	r1, r3, #2
 801d7c8:	440b      	add	r3, r1
 801d7ca:	fbb0 f3f3 	udiv	r3, r0, r3
 801d7ce:	3301      	adds	r3, #1
 801d7d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d7d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801d7d8:	6879      	ldr	r1, [r7, #4]
 801d7da:	6809      	ldr	r1, [r1, #0]
 801d7dc:	4313      	orrs	r3, r2
 801d7de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	69da      	ldr	r2, [r3, #28]
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	6a1b      	ldr	r3, [r3, #32]
 801d7f2:	431a      	orrs	r2, r3
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	430a      	orrs	r2, r1
 801d7fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	689b      	ldr	r3, [r3, #8]
 801d802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801d806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801d80a:	687a      	ldr	r2, [r7, #4]
 801d80c:	6911      	ldr	r1, [r2, #16]
 801d80e:	687a      	ldr	r2, [r7, #4]
 801d810:	68d2      	ldr	r2, [r2, #12]
 801d812:	4311      	orrs	r1, r2
 801d814:	687a      	ldr	r2, [r7, #4]
 801d816:	6812      	ldr	r2, [r2, #0]
 801d818:	430b      	orrs	r3, r1
 801d81a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	68db      	ldr	r3, [r3, #12]
 801d822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	695a      	ldr	r2, [r3, #20]
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	699b      	ldr	r3, [r3, #24]
 801d82e:	431a      	orrs	r2, r3
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	430a      	orrs	r2, r1
 801d836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	681a      	ldr	r2, [r3, #0]
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	f042 0201 	orr.w	r2, r2, #1
 801d846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	2200      	movs	r2, #0
 801d84c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	2220      	movs	r2, #32
 801d852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	2200      	movs	r2, #0
 801d85a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	2200      	movs	r2, #0
 801d860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801d864:	2300      	movs	r3, #0
}
 801d866:	4618      	mov	r0, r3
 801d868:	3710      	adds	r7, #16
 801d86a:	46bd      	mov	sp, r7
 801d86c:	bd80      	pop	{r7, pc}
 801d86e:	bf00      	nop
 801d870:	000186a0 	.word	0x000186a0
 801d874:	001e847f 	.word	0x001e847f
 801d878:	003d08ff 	.word	0x003d08ff
 801d87c:	431bde83 	.word	0x431bde83
 801d880:	10624dd3 	.word	0x10624dd3

0801d884 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801d884:	b580      	push	{r7, lr}
 801d886:	b086      	sub	sp, #24
 801d888:	af00      	add	r7, sp, #0
 801d88a:	60f8      	str	r0, [r7, #12]
 801d88c:	607a      	str	r2, [r7, #4]
 801d88e:	461a      	mov	r2, r3
 801d890:	460b      	mov	r3, r1
 801d892:	817b      	strh	r3, [r7, #10]
 801d894:	4613      	mov	r3, r2
 801d896:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801d898:	2300      	movs	r3, #0
 801d89a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d89c:	68fb      	ldr	r3, [r7, #12]
 801d89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d8a2:	b2db      	uxtb	r3, r3
 801d8a4:	2b20      	cmp	r3, #32
 801d8a6:	f040 810d 	bne.w	801dac4 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801d8aa:	4b89      	ldr	r3, [pc, #548]	; (801dad0 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	08db      	lsrs	r3, r3, #3
 801d8b0:	4a88      	ldr	r2, [pc, #544]	; (801dad4 <HAL_I2C_Master_Transmit_DMA+0x250>)
 801d8b2:	fba2 2303 	umull	r2, r3, r2, r3
 801d8b6:	0a1a      	lsrs	r2, r3, #8
 801d8b8:	4613      	mov	r3, r2
 801d8ba:	009b      	lsls	r3, r3, #2
 801d8bc:	4413      	add	r3, r2
 801d8be:	009a      	lsls	r2, r3, #2
 801d8c0:	4413      	add	r3, r2
 801d8c2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801d8c4:	693b      	ldr	r3, [r7, #16]
 801d8c6:	3b01      	subs	r3, #1
 801d8c8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801d8ca:	693b      	ldr	r3, [r7, #16]
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d116      	bne.n	801d8fe <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	2220      	movs	r2, #32
 801d8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8ea:	f043 0220 	orr.w	r2, r3, #32
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801d8fa:	2301      	movs	r3, #1
 801d8fc:	e0e3      	b.n	801dac6 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	699b      	ldr	r3, [r3, #24]
 801d904:	f003 0302 	and.w	r3, r3, #2
 801d908:	2b02      	cmp	r3, #2
 801d90a:	d0db      	beq.n	801d8c4 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d912:	2b01      	cmp	r3, #1
 801d914:	d101      	bne.n	801d91a <HAL_I2C_Master_Transmit_DMA+0x96>
 801d916:	2302      	movs	r3, #2
 801d918:	e0d5      	b.n	801dac6 <HAL_I2C_Master_Transmit_DMA+0x242>
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	2201      	movs	r2, #1
 801d91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	f003 0301 	and.w	r3, r3, #1
 801d92c:	2b01      	cmp	r3, #1
 801d92e:	d007      	beq.n	801d940 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	681a      	ldr	r2, [r3, #0]
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	f042 0201 	orr.w	r2, r2, #1
 801d93e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	681a      	ldr	r2, [r3, #0]
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d94e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	2221      	movs	r2, #33	; 0x21
 801d954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	2210      	movs	r2, #16
 801d95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	2200      	movs	r2, #0
 801d964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	687a      	ldr	r2, [r7, #4]
 801d96a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801d96c:	68fb      	ldr	r3, [r7, #12]
 801d96e:	893a      	ldrh	r2, [r7, #8]
 801d970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801d976:	b29a      	uxth	r2, r3
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	4a56      	ldr	r2, [pc, #344]	; (801dad8 <HAL_I2C_Master_Transmit_DMA+0x254>)
 801d980:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801d982:	897a      	ldrh	r2, [r7, #10]
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d07b      	beq.n	801da88 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d994:	2b00      	cmp	r3, #0
 801d996:	d02a      	beq.n	801d9ee <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d99c:	4a4f      	ldr	r2, [pc, #316]	; (801dadc <HAL_I2C_Master_Transmit_DMA+0x258>)
 801d99e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9a4:	4a4e      	ldr	r2, [pc, #312]	; (801dae0 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 801d9a6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9ac:	2200      	movs	r2, #0
 801d9ae:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9b4:	2200      	movs	r2, #0
 801d9b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9bc:	2200      	movs	r2, #0
 801d9be:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d9c4:	2200      	movs	r2, #0
 801d9c6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9d0:	4619      	mov	r1, r3
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	3310      	adds	r3, #16
 801d9d8:	461a      	mov	r2, r3
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d9de:	f7ff f805 	bl	801c9ec <HAL_DMA_Start_IT>
 801d9e2:	4603      	mov	r3, r0
 801d9e4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801d9e6:	7dfb      	ldrb	r3, [r7, #23]
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d139      	bne.n	801da60 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 801d9ec:	e013      	b.n	801da16 <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	2220      	movs	r2, #32
 801d9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	2200      	movs	r2, #0
 801d9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	2200      	movs	r2, #0
 801da0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801da12:	2301      	movs	r3, #1
 801da14:	e057      	b.n	801dac6 <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801da16:	68fb      	ldr	r3, [r7, #12]
 801da18:	2200      	movs	r2, #0
 801da1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	685a      	ldr	r2, [r3, #4]
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801da2c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	685a      	ldr	r2, [r3, #4]
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801da3c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	681a      	ldr	r2, [r3, #0]
 801da44:	68fb      	ldr	r3, [r7, #12]
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801da4c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	681a      	ldr	r2, [r3, #0]
 801da54:	68fb      	ldr	r3, [r7, #12]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801da5c:	601a      	str	r2, [r3, #0]
 801da5e:	e02f      	b.n	801dac0 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	2220      	movs	r2, #32
 801da64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	2200      	movs	r2, #0
 801da6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da74:	f043 0210 	orr.w	r2, r3, #16
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	2200      	movs	r2, #0
 801da80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801da84:	2301      	movs	r3, #1
 801da86:	e01e      	b.n	801dac6 <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	681a      	ldr	r2, [r3, #0]
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801da96:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	681a      	ldr	r2, [r3, #0]
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	681b      	ldr	r3, [r3, #0]
 801daa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801daa6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	2200      	movs	r2, #0
 801daac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	685a      	ldr	r2, [r3, #4]
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	681b      	ldr	r3, [r3, #0]
 801daba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801dabe:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 801dac0:	2300      	movs	r3, #0
 801dac2:	e000      	b.n	801dac6 <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801dac4:	2302      	movs	r3, #2
  }
}
 801dac6:	4618      	mov	r0, r3
 801dac8:	3718      	adds	r7, #24
 801daca:	46bd      	mov	sp, r7
 801dacc:	bd80      	pop	{r7, pc}
 801dace:	bf00      	nop
 801dad0:	20000020 	.word	0x20000020
 801dad4:	14f8b589 	.word	0x14f8b589
 801dad8:	ffff0000 	.word	0xffff0000
 801dadc:	0801fdad 	.word	0x0801fdad
 801dae0:	0801ff57 	.word	0x0801ff57

0801dae4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 801dae4:	b580      	push	{r7, lr}
 801dae6:	b086      	sub	sp, #24
 801dae8:	af00      	add	r7, sp, #0
 801daea:	60f8      	str	r0, [r7, #12]
 801daec:	607a      	str	r2, [r7, #4]
 801daee:	461a      	mov	r2, r3
 801daf0:	460b      	mov	r3, r1
 801daf2:	817b      	strh	r3, [r7, #10]
 801daf4:	4613      	mov	r3, r2
 801daf6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 801daf8:	2300      	movs	r3, #0
 801dafa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801db02:	b2db      	uxtb	r3, r3
 801db04:	2b20      	cmp	r3, #32
 801db06:	f040 810d 	bne.w	801dd24 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801db0a:	4b89      	ldr	r3, [pc, #548]	; (801dd30 <HAL_I2C_Master_Receive_DMA+0x24c>)
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	08db      	lsrs	r3, r3, #3
 801db10:	4a88      	ldr	r2, [pc, #544]	; (801dd34 <HAL_I2C_Master_Receive_DMA+0x250>)
 801db12:	fba2 2303 	umull	r2, r3, r2, r3
 801db16:	0a1a      	lsrs	r2, r3, #8
 801db18:	4613      	mov	r3, r2
 801db1a:	009b      	lsls	r3, r3, #2
 801db1c:	4413      	add	r3, r2
 801db1e:	009a      	lsls	r2, r3, #2
 801db20:	4413      	add	r3, r2
 801db22:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 801db24:	693b      	ldr	r3, [r7, #16]
 801db26:	3b01      	subs	r3, #1
 801db28:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 801db2a:	693b      	ldr	r3, [r7, #16]
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	d116      	bne.n	801db5e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	2200      	movs	r2, #0
 801db34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	2220      	movs	r2, #32
 801db3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	2200      	movs	r2, #0
 801db42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db4a:	f043 0220 	orr.w	r2, r3, #32
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	2200      	movs	r2, #0
 801db56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801db5a:	2301      	movs	r3, #1
 801db5c:	e0e3      	b.n	801dd26 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	699b      	ldr	r3, [r3, #24]
 801db64:	f003 0302 	and.w	r3, r3, #2
 801db68:	2b02      	cmp	r3, #2
 801db6a:	d0db      	beq.n	801db24 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801db72:	2b01      	cmp	r3, #1
 801db74:	d101      	bne.n	801db7a <HAL_I2C_Master_Receive_DMA+0x96>
 801db76:	2302      	movs	r3, #2
 801db78:	e0d5      	b.n	801dd26 <HAL_I2C_Master_Receive_DMA+0x242>
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	2201      	movs	r2, #1
 801db7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	f003 0301 	and.w	r3, r3, #1
 801db8c:	2b01      	cmp	r3, #1
 801db8e:	d007      	beq.n	801dba0 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	681a      	ldr	r2, [r3, #0]
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	f042 0201 	orr.w	r2, r2, #1
 801db9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	681a      	ldr	r2, [r3, #0]
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dbae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	2222      	movs	r2, #34	; 0x22
 801dbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	2210      	movs	r2, #16
 801dbbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	2200      	movs	r2, #0
 801dbc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	687a      	ldr	r2, [r7, #4]
 801dbca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	893a      	ldrh	r2, [r7, #8]
 801dbd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dbd6:	b29a      	uxth	r2, r3
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801dbdc:	68fb      	ldr	r3, [r7, #12]
 801dbde:	4a56      	ldr	r2, [pc, #344]	; (801dd38 <HAL_I2C_Master_Receive_DMA+0x254>)
 801dbe0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801dbe2:	897a      	ldrh	r2, [r7, #10]
 801dbe4:	68fb      	ldr	r3, [r7, #12]
 801dbe6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d07b      	beq.n	801dce8 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d02a      	beq.n	801dc4e <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbfc:	4a4f      	ldr	r2, [pc, #316]	; (801dd3c <HAL_I2C_Master_Receive_DMA+0x258>)
 801dbfe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc04:	4a4e      	ldr	r2, [pc, #312]	; (801dd40 <HAL_I2C_Master_Receive_DMA+0x25c>)
 801dc06:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc14:	2200      	movs	r2, #0
 801dc16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc1c:	2200      	movs	r2, #0
 801dc1e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc24:	2200      	movs	r2, #0
 801dc26:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801dc28:	68fb      	ldr	r3, [r7, #12]
 801dc2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	3310      	adds	r3, #16
 801dc32:	4619      	mov	r1, r3
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc38:	461a      	mov	r2, r3
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dc3e:	f7fe fed5 	bl	801c9ec <HAL_DMA_Start_IT>
 801dc42:	4603      	mov	r3, r0
 801dc44:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801dc46:	7dfb      	ldrb	r3, [r7, #23]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d139      	bne.n	801dcc0 <HAL_I2C_Master_Receive_DMA+0x1dc>
 801dc4c:	e013      	b.n	801dc76 <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 801dc4e:	68fb      	ldr	r3, [r7, #12]
 801dc50:	2220      	movs	r2, #32
 801dc52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	2200      	movs	r2, #0
 801dc5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801dc5e:	68fb      	ldr	r3, [r7, #12]
 801dc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	2200      	movs	r2, #0
 801dc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801dc72:	2301      	movs	r3, #1
 801dc74:	e057      	b.n	801dd26 <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	681a      	ldr	r2, [r3, #0]
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dc84:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	681a      	ldr	r2, [r3, #0]
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dc94:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	2200      	movs	r2, #0
 801dc9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	685a      	ldr	r2, [r3, #4]
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801dcac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	685a      	ldr	r2, [r3, #4]
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dcbc:	605a      	str	r2, [r3, #4]
 801dcbe:	e02f      	b.n	801dd20 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	2220      	movs	r2, #32
 801dcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	2200      	movs	r2, #0
 801dccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dcd4:	f043 0210 	orr.w	r2, r3, #16
 801dcd8:	68fb      	ldr	r3, [r7, #12]
 801dcda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	2200      	movs	r2, #0
 801dce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dce4:	2301      	movs	r3, #1
 801dce6:	e01e      	b.n	801dd26 <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	2200      	movs	r2, #0
 801dcec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	685a      	ldr	r2, [r3, #4]
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 801dcfe:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	681a      	ldr	r2, [r3, #0]
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801dd0e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801dd10:	68fb      	ldr	r3, [r7, #12]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	681a      	ldr	r2, [r3, #0]
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dd1e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 801dd20:	2300      	movs	r3, #0
 801dd22:	e000      	b.n	801dd26 <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 801dd24:	2302      	movs	r3, #2
  }
}
 801dd26:	4618      	mov	r0, r3
 801dd28:	3718      	adds	r7, #24
 801dd2a:	46bd      	mov	sp, r7
 801dd2c:	bd80      	pop	{r7, pc}
 801dd2e:	bf00      	nop
 801dd30:	20000020 	.word	0x20000020
 801dd34:	14f8b589 	.word	0x14f8b589
 801dd38:	ffff0000 	.word	0xffff0000
 801dd3c:	0801fdad 	.word	0x0801fdad
 801dd40:	0801ff57 	.word	0x0801ff57

0801dd44 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b08a      	sub	sp, #40	; 0x28
 801dd48:	af02      	add	r7, sp, #8
 801dd4a:	60f8      	str	r0, [r7, #12]
 801dd4c:	4608      	mov	r0, r1
 801dd4e:	4611      	mov	r1, r2
 801dd50:	461a      	mov	r2, r3
 801dd52:	4603      	mov	r3, r0
 801dd54:	817b      	strh	r3, [r7, #10]
 801dd56:	460b      	mov	r3, r1
 801dd58:	813b      	strh	r3, [r7, #8]
 801dd5a:	4613      	mov	r3, r2
 801dd5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 801dd5e:	2300      	movs	r3, #0
 801dd60:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801dd62:	f7fe f843 	bl	801bdec <HAL_GetTick>
 801dd66:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801dd68:	68fb      	ldr	r3, [r7, #12]
 801dd6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dd6e:	b2db      	uxtb	r3, r3
 801dd70:	2b20      	cmp	r3, #32
 801dd72:	f040 8145 	bne.w	801e000 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801dd76:	4b9d      	ldr	r3, [pc, #628]	; (801dfec <HAL_I2C_Mem_Write_DMA+0x2a8>)
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	08db      	lsrs	r3, r3, #3
 801dd7c:	4a9c      	ldr	r2, [pc, #624]	; (801dff0 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 801dd7e:	fba2 2303 	umull	r2, r3, r2, r3
 801dd82:	0a1a      	lsrs	r2, r3, #8
 801dd84:	4613      	mov	r3, r2
 801dd86:	009b      	lsls	r3, r3, #2
 801dd88:	4413      	add	r3, r2
 801dd8a:	009a      	lsls	r2, r3, #2
 801dd8c:	4413      	add	r3, r2
 801dd8e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 801dd90:	697b      	ldr	r3, [r7, #20]
 801dd92:	3b01      	subs	r3, #1
 801dd94:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801dd96:	697b      	ldr	r3, [r7, #20]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d116      	bne.n	801ddca <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	2200      	movs	r2, #0
 801dda0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	2220      	movs	r2, #32
 801dda6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	2200      	movs	r2, #0
 801ddae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddb6:	f043 0220 	orr.w	r2, r3, #32
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	2200      	movs	r2, #0
 801ddc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801ddc6:	2301      	movs	r3, #1
 801ddc8:	e11b      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	699b      	ldr	r3, [r3, #24]
 801ddd0:	f003 0302 	and.w	r3, r3, #2
 801ddd4:	2b02      	cmp	r3, #2
 801ddd6:	d0db      	beq.n	801dd90 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ddd8:	68fb      	ldr	r3, [r7, #12]
 801ddda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ddde:	2b01      	cmp	r3, #1
 801dde0:	d101      	bne.n	801dde6 <HAL_I2C_Mem_Write_DMA+0xa2>
 801dde2:	2302      	movs	r3, #2
 801dde4:	e10d      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	2201      	movs	r2, #1
 801ddea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	f003 0301 	and.w	r3, r3, #1
 801ddf8:	2b01      	cmp	r3, #1
 801ddfa:	d007      	beq.n	801de0c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	681a      	ldr	r2, [r3, #0]
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	f042 0201 	orr.w	r2, r2, #1
 801de0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	681a      	ldr	r2, [r3, #0]
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801de1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	2221      	movs	r2, #33	; 0x21
 801de20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	2240      	movs	r2, #64	; 0x40
 801de28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	2200      	movs	r2, #0
 801de30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801de36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801de3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801de42:	b29a      	uxth	r2, r3
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	4a6a      	ldr	r2, [pc, #424]	; (801dff4 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 801de4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801de4e:	897a      	ldrh	r2, [r7, #10]
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801de54:	893a      	ldrh	r2, [r7, #8]
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801de5a:	88fa      	ldrh	r2, [r7, #6]
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	2200      	movs	r2, #0
 801de64:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	f000 80a9 	beq.w	801dfc2 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de74:	2b00      	cmp	r3, #0
 801de76:	d02a      	beq.n	801dece <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de7c:	4a5e      	ldr	r2, [pc, #376]	; (801dff8 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 801de7e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801de80:	68fb      	ldr	r3, [r7, #12]
 801de82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de84:	4a5d      	ldr	r2, [pc, #372]	; (801dffc <HAL_I2C_Mem_Write_DMA+0x2b8>)
 801de86:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de8c:	2200      	movs	r2, #0
 801de8e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de94:	2200      	movs	r2, #0
 801de96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 801de98:	68fb      	ldr	r3, [r7, #12]
 801de9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801de9c:	2200      	movs	r2, #0
 801de9e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dea4:	2200      	movs	r2, #0
 801dea6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801deb0:	4619      	mov	r1, r3
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	3310      	adds	r3, #16
 801deb8:	461a      	mov	r2, r3
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801debe:	f7fe fd95 	bl	801c9ec <HAL_DMA_Start_IT>
 801dec2:	4603      	mov	r3, r0
 801dec4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801dec6:	7efb      	ldrb	r3, [r7, #27]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d166      	bne.n	801df9a <HAL_I2C_Mem_Write_DMA+0x256>
 801decc:	e013      	b.n	801def6 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	2220      	movs	r2, #32
 801ded2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	2200      	movs	r2, #0
 801deda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dee2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	2200      	movs	r2, #0
 801deee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801def2:	2301      	movs	r3, #1
 801def4:	e085      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801def6:	88f8      	ldrh	r0, [r7, #6]
 801def8:	893a      	ldrh	r2, [r7, #8]
 801defa:	8979      	ldrh	r1, [r7, #10]
 801defc:	69fb      	ldr	r3, [r7, #28]
 801defe:	9301      	str	r3, [sp, #4]
 801df00:	2323      	movs	r3, #35	; 0x23
 801df02:	9300      	str	r3, [sp, #0]
 801df04:	4603      	mov	r3, r0
 801df06:	68f8      	ldr	r0, [r7, #12]
 801df08:	f001 fdd2 	bl	801fab0 <I2C_RequestMemoryWrite>
 801df0c:	4603      	mov	r3, r0
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d022      	beq.n	801df58 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df16:	4618      	mov	r0, r3
 801df18:	f7fe fe30 	bl	801cb7c <HAL_DMA_Abort_IT>
 801df1c:	4603      	mov	r3, r0
 801df1e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df24:	2200      	movs	r2, #0
 801df26:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	681a      	ldr	r2, [r3, #0]
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801df36:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	2200      	movs	r2, #0
 801df3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	2200      	movs	r2, #0
 801df42:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	681a      	ldr	r2, [r3, #0]
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	f022 0201 	bic.w	r2, r2, #1
 801df52:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801df54:	2301      	movs	r3, #1
 801df56:	e054      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801df58:	2300      	movs	r3, #0
 801df5a:	613b      	str	r3, [r7, #16]
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	695b      	ldr	r3, [r3, #20]
 801df62:	613b      	str	r3, [r7, #16]
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	681b      	ldr	r3, [r3, #0]
 801df68:	699b      	ldr	r3, [r3, #24]
 801df6a:	613b      	str	r3, [r7, #16]
 801df6c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	2200      	movs	r2, #0
 801df72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801df76:	68fb      	ldr	r3, [r7, #12]
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	685a      	ldr	r2, [r3, #4]
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801df84:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	685a      	ldr	r2, [r3, #4]
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	681b      	ldr	r3, [r3, #0]
 801df90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801df94:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 801df96:	2300      	movs	r3, #0
 801df98:	e033      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801df9a:	68fb      	ldr	r3, [r7, #12]
 801df9c:	2220      	movs	r2, #32
 801df9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfae:	f043 0210 	orr.w	r2, r3, #16
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	2200      	movs	r2, #0
 801dfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801dfbe:	2301      	movs	r3, #1
 801dfc0:	e01f      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 801dfc2:	68fb      	ldr	r3, [r7, #12]
 801dfc4:	2220      	movs	r2, #32
 801dfc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	2200      	movs	r2, #0
 801dfce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801dfde:	68fb      	ldr	r3, [r7, #12]
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801dfe6:	2301      	movs	r3, #1
 801dfe8:	e00b      	b.n	801e002 <HAL_I2C_Mem_Write_DMA+0x2be>
 801dfea:	bf00      	nop
 801dfec:	20000020 	.word	0x20000020
 801dff0:	14f8b589 	.word	0x14f8b589
 801dff4:	ffff0000 	.word	0xffff0000
 801dff8:	0801fdad 	.word	0x0801fdad
 801dffc:	0801ff57 	.word	0x0801ff57
    }
  }
  else
  {
    return HAL_BUSY;
 801e000:	2302      	movs	r3, #2
  }
}
 801e002:	4618      	mov	r0, r3
 801e004:	3720      	adds	r7, #32
 801e006:	46bd      	mov	sp, r7
 801e008:	bd80      	pop	{r7, pc}
 801e00a:	bf00      	nop

0801e00c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801e00c:	b580      	push	{r7, lr}
 801e00e:	b08c      	sub	sp, #48	; 0x30
 801e010:	af02      	add	r7, sp, #8
 801e012:	60f8      	str	r0, [r7, #12]
 801e014:	4608      	mov	r0, r1
 801e016:	4611      	mov	r1, r2
 801e018:	461a      	mov	r2, r3
 801e01a:	4603      	mov	r3, r0
 801e01c:	817b      	strh	r3, [r7, #10]
 801e01e:	460b      	mov	r3, r1
 801e020:	813b      	strh	r3, [r7, #8]
 801e022:	4613      	mov	r3, r2
 801e024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801e026:	f7fd fee1 	bl	801bdec <HAL_GetTick>
 801e02a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 801e02c:	2300      	movs	r3, #0
 801e02e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e036:	b2db      	uxtb	r3, r3
 801e038:	2b20      	cmp	r3, #32
 801e03a:	f040 8176 	bne.w	801e32a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801e03e:	4b95      	ldr	r3, [pc, #596]	; (801e294 <HAL_I2C_Mem_Read_DMA+0x288>)
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	08db      	lsrs	r3, r3, #3
 801e044:	4a94      	ldr	r2, [pc, #592]	; (801e298 <HAL_I2C_Mem_Read_DMA+0x28c>)
 801e046:	fba2 2303 	umull	r2, r3, r2, r3
 801e04a:	0a1a      	lsrs	r2, r3, #8
 801e04c:	4613      	mov	r3, r2
 801e04e:	009b      	lsls	r3, r3, #2
 801e050:	4413      	add	r3, r2
 801e052:	009a      	lsls	r2, r3, #2
 801e054:	4413      	add	r3, r2
 801e056:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 801e058:	69fb      	ldr	r3, [r7, #28]
 801e05a:	3b01      	subs	r3, #1
 801e05c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801e05e:	69fb      	ldr	r3, [r7, #28]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d116      	bne.n	801e092 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	2200      	movs	r2, #0
 801e068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	2220      	movs	r2, #32
 801e06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	2200      	movs	r2, #0
 801e076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e07e:	f043 0220 	orr.w	r2, r3, #32
 801e082:	68fb      	ldr	r3, [r7, #12]
 801e084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	2200      	movs	r2, #0
 801e08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e08e:	2301      	movs	r3, #1
 801e090:	e14c      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801e092:	68fb      	ldr	r3, [r7, #12]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	699b      	ldr	r3, [r3, #24]
 801e098:	f003 0302 	and.w	r3, r3, #2
 801e09c:	2b02      	cmp	r3, #2
 801e09e:	d0db      	beq.n	801e058 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e0a6:	2b01      	cmp	r3, #1
 801e0a8:	d101      	bne.n	801e0ae <HAL_I2C_Mem_Read_DMA+0xa2>
 801e0aa:	2302      	movs	r3, #2
 801e0ac:	e13e      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	2201      	movs	r2, #1
 801e0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	f003 0301 	and.w	r3, r3, #1
 801e0c0:	2b01      	cmp	r3, #1
 801e0c2:	d007      	beq.n	801e0d4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	681a      	ldr	r2, [r3, #0]
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	f042 0201 	orr.w	r2, r2, #1
 801e0d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	681a      	ldr	r2, [r3, #0]
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801e0e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801e0e4:	68fb      	ldr	r3, [r7, #12]
 801e0e6:	2222      	movs	r2, #34	; 0x22
 801e0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	2240      	movs	r2, #64	; 0x40
 801e0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	2200      	movs	r2, #0
 801e0f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801e0fa:	68fb      	ldr	r3, [r7, #12]
 801e0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e0fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801e104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e10a:	b29a      	uxth	r2, r3
 801e10c:	68fb      	ldr	r3, [r7, #12]
 801e10e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	4a62      	ldr	r2, [pc, #392]	; (801e29c <HAL_I2C_Mem_Read_DMA+0x290>)
 801e114:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801e116:	897a      	ldrh	r2, [r7, #10]
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 801e11c:	893a      	ldrh	r2, [r7, #8]
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801e122:	88fa      	ldrh	r2, [r7, #6]
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	2200      	movs	r2, #0
 801e12c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e132:	2b00      	cmp	r3, #0
 801e134:	f000 80cc 	beq.w	801e2d0 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d02d      	beq.n	801e19c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 801e140:	68fb      	ldr	r3, [r7, #12]
 801e142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e144:	4a56      	ldr	r2, [pc, #344]	; (801e2a0 <HAL_I2C_Mem_Read_DMA+0x294>)
 801e146:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e14c:	4a55      	ldr	r2, [pc, #340]	; (801e2a4 <HAL_I2C_Mem_Read_DMA+0x298>)
 801e14e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e154:	2200      	movs	r2, #0
 801e156:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e15c:	2200      	movs	r2, #0
 801e15e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e164:	2200      	movs	r2, #0
 801e166:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e16c:	2200      	movs	r2, #0
 801e16e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801e174:	68fb      	ldr	r3, [r7, #12]
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	3310      	adds	r3, #16
 801e17a:	4619      	mov	r1, r3
 801e17c:	68fb      	ldr	r3, [r7, #12]
 801e17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e180:	461a      	mov	r2, r3
 801e182:	68fb      	ldr	r3, [r7, #12]
 801e184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e186:	f7fe fc31 	bl	801c9ec <HAL_DMA_Start_IT>
 801e18a:	4603      	mov	r3, r0
 801e18c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801e190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e194:	2b00      	cmp	r3, #0
 801e196:	f040 8087 	bne.w	801e2a8 <HAL_I2C_Mem_Read_DMA+0x29c>
 801e19a:	e013      	b.n	801e1c4 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 801e19c:	68fb      	ldr	r3, [r7, #12]
 801e19e:	2220      	movs	r2, #32
 801e1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	2200      	movs	r2, #0
 801e1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	2200      	movs	r2, #0
 801e1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 801e1c0:	2301      	movs	r3, #1
 801e1c2:	e0b3      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e1c4:	88f8      	ldrh	r0, [r7, #6]
 801e1c6:	893a      	ldrh	r2, [r7, #8]
 801e1c8:	8979      	ldrh	r1, [r7, #10]
 801e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1cc:	9301      	str	r3, [sp, #4]
 801e1ce:	2323      	movs	r3, #35	; 0x23
 801e1d0:	9300      	str	r3, [sp, #0]
 801e1d2:	4603      	mov	r3, r0
 801e1d4:	68f8      	ldr	r0, [r7, #12]
 801e1d6:	f001 fd01 	bl	801fbdc <I2C_RequestMemoryRead>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d023      	beq.n	801e228 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	f7fe fcc9 	bl	801cb7c <HAL_DMA_Abort_IT>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1f4:	2200      	movs	r2, #0
 801e1f6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	681a      	ldr	r2, [r3, #0]
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e206:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	2200      	movs	r2, #0
 801e20c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	2200      	movs	r2, #0
 801e212:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	681b      	ldr	r3, [r3, #0]
 801e218:	681a      	ldr	r2, [r3, #0]
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	f022 0201 	bic.w	r2, r2, #1
 801e222:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 801e224:	2301      	movs	r3, #1
 801e226:	e081      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e22c:	2b01      	cmp	r3, #1
 801e22e:	d108      	bne.n	801e242 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	681a      	ldr	r2, [r3, #0]
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e23e:	601a      	str	r2, [r3, #0]
 801e240:	e007      	b.n	801e252 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801e242:	68fb      	ldr	r3, [r7, #12]
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	685a      	ldr	r2, [r3, #4]
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e250:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e252:	2300      	movs	r3, #0
 801e254:	61bb      	str	r3, [r7, #24]
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	695b      	ldr	r3, [r3, #20]
 801e25c:	61bb      	str	r3, [r7, #24]
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	699b      	ldr	r3, [r3, #24]
 801e264:	61bb      	str	r3, [r7, #24]
 801e266:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	2200      	movs	r2, #0
 801e26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	685a      	ldr	r2, [r3, #4]
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e27e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	685a      	ldr	r2, [r3, #4]
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e28e:	605a      	str	r2, [r3, #4]
 801e290:	e049      	b.n	801e326 <HAL_I2C_Mem_Read_DMA+0x31a>
 801e292:	bf00      	nop
 801e294:	20000020 	.word	0x20000020
 801e298:	14f8b589 	.word	0x14f8b589
 801e29c:	ffff0000 	.word	0xffff0000
 801e2a0:	0801fdad 	.word	0x0801fdad
 801e2a4:	0801ff57 	.word	0x0801ff57
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	2220      	movs	r2, #32
 801e2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	2200      	movs	r2, #0
 801e2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2bc:	f043 0210 	orr.w	r2, r3, #16
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	2200      	movs	r2, #0
 801e2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801e2cc:	2301      	movs	r3, #1
 801e2ce:	e02d      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 801e2d0:	88f8      	ldrh	r0, [r7, #6]
 801e2d2:	893a      	ldrh	r2, [r7, #8]
 801e2d4:	8979      	ldrh	r1, [r7, #10]
 801e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2d8:	9301      	str	r3, [sp, #4]
 801e2da:	2323      	movs	r3, #35	; 0x23
 801e2dc:	9300      	str	r3, [sp, #0]
 801e2de:	4603      	mov	r3, r0
 801e2e0:	68f8      	ldr	r0, [r7, #12]
 801e2e2:	f001 fc7b 	bl	801fbdc <I2C_RequestMemoryRead>
 801e2e6:	4603      	mov	r3, r0
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d001      	beq.n	801e2f0 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 801e2ec:	2301      	movs	r3, #1
 801e2ee:	e01d      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	617b      	str	r3, [r7, #20]
 801e2f4:	68fb      	ldr	r3, [r7, #12]
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	695b      	ldr	r3, [r3, #20]
 801e2fa:	617b      	str	r3, [r7, #20]
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	699b      	ldr	r3, [r3, #24]
 801e302:	617b      	str	r3, [r7, #20]
 801e304:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	681a      	ldr	r2, [r3, #0]
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e314:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	2220      	movs	r2, #32
 801e31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	2200      	movs	r2, #0
 801e322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 801e326:	2300      	movs	r3, #0
 801e328:	e000      	b.n	801e32c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 801e32a:	2302      	movs	r3, #2
  }
}
 801e32c:	4618      	mov	r0, r3
 801e32e:	3728      	adds	r7, #40	; 0x28
 801e330:	46bd      	mov	sp, r7
 801e332:	bd80      	pop	{r7, pc}

0801e334 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e334:	b580      	push	{r7, lr}
 801e336:	b088      	sub	sp, #32
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 801e33c:	2300      	movs	r3, #0
 801e33e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	685b      	ldr	r3, [r3, #4]
 801e346:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e34c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e354:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e35c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e35e:	7bfb      	ldrb	r3, [r7, #15]
 801e360:	2b10      	cmp	r3, #16
 801e362:	d003      	beq.n	801e36c <HAL_I2C_EV_IRQHandler+0x38>
 801e364:	7bfb      	ldrb	r3, [r7, #15]
 801e366:	2b40      	cmp	r3, #64	; 0x40
 801e368:	f040 80c1 	bne.w	801e4ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	681b      	ldr	r3, [r3, #0]
 801e370:	699b      	ldr	r3, [r3, #24]
 801e372:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	695b      	ldr	r3, [r3, #20]
 801e37a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 801e37c:	69fb      	ldr	r3, [r7, #28]
 801e37e:	f003 0301 	and.w	r3, r3, #1
 801e382:	2b00      	cmp	r3, #0
 801e384:	d10d      	bne.n	801e3a2 <HAL_I2C_EV_IRQHandler+0x6e>
 801e386:	693b      	ldr	r3, [r7, #16]
 801e388:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801e38c:	d003      	beq.n	801e396 <HAL_I2C_EV_IRQHandler+0x62>
 801e38e:	693b      	ldr	r3, [r7, #16]
 801e390:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801e394:	d101      	bne.n	801e39a <HAL_I2C_EV_IRQHandler+0x66>
 801e396:	2301      	movs	r3, #1
 801e398:	e000      	b.n	801e39c <HAL_I2C_EV_IRQHandler+0x68>
 801e39a:	2300      	movs	r3, #0
 801e39c:	2b01      	cmp	r3, #1
 801e39e:	f000 8132 	beq.w	801e606 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e3a2:	69fb      	ldr	r3, [r7, #28]
 801e3a4:	f003 0301 	and.w	r3, r3, #1
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d00c      	beq.n	801e3c6 <HAL_I2C_EV_IRQHandler+0x92>
 801e3ac:	697b      	ldr	r3, [r7, #20]
 801e3ae:	0a5b      	lsrs	r3, r3, #9
 801e3b0:	f003 0301 	and.w	r3, r3, #1
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d006      	beq.n	801e3c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801e3b8:	6878      	ldr	r0, [r7, #4]
 801e3ba:	f002 f82a 	bl	8020412 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 801e3be:	6878      	ldr	r0, [r7, #4]
 801e3c0:	f000 fd5b 	bl	801ee7a <I2C_Master_SB>
 801e3c4:	e092      	b.n	801e4ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e3c6:	69fb      	ldr	r3, [r7, #28]
 801e3c8:	08db      	lsrs	r3, r3, #3
 801e3ca:	f003 0301 	and.w	r3, r3, #1
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d009      	beq.n	801e3e6 <HAL_I2C_EV_IRQHandler+0xb2>
 801e3d2:	697b      	ldr	r3, [r7, #20]
 801e3d4:	0a5b      	lsrs	r3, r3, #9
 801e3d6:	f003 0301 	and.w	r3, r3, #1
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d003      	beq.n	801e3e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 801e3de:	6878      	ldr	r0, [r7, #4]
 801e3e0:	f000 fdd1 	bl	801ef86 <I2C_Master_ADD10>
 801e3e4:	e082      	b.n	801e4ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e3e6:	69fb      	ldr	r3, [r7, #28]
 801e3e8:	085b      	lsrs	r3, r3, #1
 801e3ea:	f003 0301 	and.w	r3, r3, #1
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d009      	beq.n	801e406 <HAL_I2C_EV_IRQHandler+0xd2>
 801e3f2:	697b      	ldr	r3, [r7, #20]
 801e3f4:	0a5b      	lsrs	r3, r3, #9
 801e3f6:	f003 0301 	and.w	r3, r3, #1
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d003      	beq.n	801e406 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 801e3fe:	6878      	ldr	r0, [r7, #4]
 801e400:	f000 fdeb 	bl	801efda <I2C_Master_ADDR>
 801e404:	e072      	b.n	801e4ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801e406:	69bb      	ldr	r3, [r7, #24]
 801e408:	089b      	lsrs	r3, r3, #2
 801e40a:	f003 0301 	and.w	r3, r3, #1
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d03b      	beq.n	801e48a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	685b      	ldr	r3, [r3, #4]
 801e418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e41c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e420:	f000 80f3 	beq.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e424:	69fb      	ldr	r3, [r7, #28]
 801e426:	09db      	lsrs	r3, r3, #7
 801e428:	f003 0301 	and.w	r3, r3, #1
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d00f      	beq.n	801e450 <HAL_I2C_EV_IRQHandler+0x11c>
 801e430:	697b      	ldr	r3, [r7, #20]
 801e432:	0a9b      	lsrs	r3, r3, #10
 801e434:	f003 0301 	and.w	r3, r3, #1
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d009      	beq.n	801e450 <HAL_I2C_EV_IRQHandler+0x11c>
 801e43c:	69fb      	ldr	r3, [r7, #28]
 801e43e:	089b      	lsrs	r3, r3, #2
 801e440:	f003 0301 	and.w	r3, r3, #1
 801e444:	2b00      	cmp	r3, #0
 801e446:	d103      	bne.n	801e450 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 801e448:	6878      	ldr	r0, [r7, #4]
 801e44a:	f000 f9cb 	bl	801e7e4 <I2C_MasterTransmit_TXE>
 801e44e:	e04d      	b.n	801e4ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e450:	69fb      	ldr	r3, [r7, #28]
 801e452:	089b      	lsrs	r3, r3, #2
 801e454:	f003 0301 	and.w	r3, r3, #1
 801e458:	2b00      	cmp	r3, #0
 801e45a:	f000 80d6 	beq.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
 801e45e:	697b      	ldr	r3, [r7, #20]
 801e460:	0a5b      	lsrs	r3, r3, #9
 801e462:	f003 0301 	and.w	r3, r3, #1
 801e466:	2b00      	cmp	r3, #0
 801e468:	f000 80cf 	beq.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801e46c:	7bbb      	ldrb	r3, [r7, #14]
 801e46e:	2b21      	cmp	r3, #33	; 0x21
 801e470:	d103      	bne.n	801e47a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 801e472:	6878      	ldr	r0, [r7, #4]
 801e474:	f000 fa52 	bl	801e91c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e478:	e0c7      	b.n	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 801e47a:	7bfb      	ldrb	r3, [r7, #15]
 801e47c:	2b40      	cmp	r3, #64	; 0x40
 801e47e:	f040 80c4 	bne.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e482:	6878      	ldr	r0, [r7, #4]
 801e484:	f000 fac0 	bl	801ea08 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e488:	e0bf      	b.n	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	685b      	ldr	r3, [r3, #4]
 801e490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e498:	f000 80b7 	beq.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e49c:	69fb      	ldr	r3, [r7, #28]
 801e49e:	099b      	lsrs	r3, r3, #6
 801e4a0:	f003 0301 	and.w	r3, r3, #1
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d00f      	beq.n	801e4c8 <HAL_I2C_EV_IRQHandler+0x194>
 801e4a8:	697b      	ldr	r3, [r7, #20]
 801e4aa:	0a9b      	lsrs	r3, r3, #10
 801e4ac:	f003 0301 	and.w	r3, r3, #1
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d009      	beq.n	801e4c8 <HAL_I2C_EV_IRQHandler+0x194>
 801e4b4:	69fb      	ldr	r3, [r7, #28]
 801e4b6:	089b      	lsrs	r3, r3, #2
 801e4b8:	f003 0301 	and.w	r3, r3, #1
 801e4bc:	2b00      	cmp	r3, #0
 801e4be:	d103      	bne.n	801e4c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 801e4c0:	6878      	ldr	r0, [r7, #4]
 801e4c2:	f000 fb35 	bl	801eb30 <I2C_MasterReceive_RXNE>
 801e4c6:	e011      	b.n	801e4ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e4c8:	69fb      	ldr	r3, [r7, #28]
 801e4ca:	089b      	lsrs	r3, r3, #2
 801e4cc:	f003 0301 	and.w	r3, r3, #1
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	f000 809a 	beq.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
 801e4d6:	697b      	ldr	r3, [r7, #20]
 801e4d8:	0a5b      	lsrs	r3, r3, #9
 801e4da:	f003 0301 	and.w	r3, r3, #1
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	f000 8093 	beq.w	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 801e4e4:	6878      	ldr	r0, [r7, #4]
 801e4e6:	f000 fbde 	bl	801eca6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e4ea:	e08e      	b.n	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
 801e4ec:	e08d      	b.n	801e60a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d004      	beq.n	801e500 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	695b      	ldr	r3, [r3, #20]
 801e4fc:	61fb      	str	r3, [r7, #28]
 801e4fe:	e007      	b.n	801e510 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	699b      	ldr	r3, [r3, #24]
 801e506:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	695b      	ldr	r3, [r3, #20]
 801e50e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e510:	69fb      	ldr	r3, [r7, #28]
 801e512:	085b      	lsrs	r3, r3, #1
 801e514:	f003 0301 	and.w	r3, r3, #1
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d012      	beq.n	801e542 <HAL_I2C_EV_IRQHandler+0x20e>
 801e51c:	697b      	ldr	r3, [r7, #20]
 801e51e:	0a5b      	lsrs	r3, r3, #9
 801e520:	f003 0301 	and.w	r3, r3, #1
 801e524:	2b00      	cmp	r3, #0
 801e526:	d00c      	beq.n	801e542 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	d003      	beq.n	801e538 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	699b      	ldr	r3, [r3, #24]
 801e536:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 801e538:	69b9      	ldr	r1, [r7, #24]
 801e53a:	6878      	ldr	r0, [r7, #4]
 801e53c:	f000 ff9c 	bl	801f478 <I2C_Slave_ADDR>
 801e540:	e066      	b.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e542:	69fb      	ldr	r3, [r7, #28]
 801e544:	091b      	lsrs	r3, r3, #4
 801e546:	f003 0301 	and.w	r3, r3, #1
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d009      	beq.n	801e562 <HAL_I2C_EV_IRQHandler+0x22e>
 801e54e:	697b      	ldr	r3, [r7, #20]
 801e550:	0a5b      	lsrs	r3, r3, #9
 801e552:	f003 0301 	and.w	r3, r3, #1
 801e556:	2b00      	cmp	r3, #0
 801e558:	d003      	beq.n	801e562 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 801e55a:	6878      	ldr	r0, [r7, #4]
 801e55c:	f000 ffd6 	bl	801f50c <I2C_Slave_STOPF>
 801e560:	e056      	b.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801e562:	7bbb      	ldrb	r3, [r7, #14]
 801e564:	2b21      	cmp	r3, #33	; 0x21
 801e566:	d002      	beq.n	801e56e <HAL_I2C_EV_IRQHandler+0x23a>
 801e568:	7bbb      	ldrb	r3, [r7, #14]
 801e56a:	2b29      	cmp	r3, #41	; 0x29
 801e56c:	d125      	bne.n	801e5ba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e56e:	69fb      	ldr	r3, [r7, #28]
 801e570:	09db      	lsrs	r3, r3, #7
 801e572:	f003 0301 	and.w	r3, r3, #1
 801e576:	2b00      	cmp	r3, #0
 801e578:	d00f      	beq.n	801e59a <HAL_I2C_EV_IRQHandler+0x266>
 801e57a:	697b      	ldr	r3, [r7, #20]
 801e57c:	0a9b      	lsrs	r3, r3, #10
 801e57e:	f003 0301 	and.w	r3, r3, #1
 801e582:	2b00      	cmp	r3, #0
 801e584:	d009      	beq.n	801e59a <HAL_I2C_EV_IRQHandler+0x266>
 801e586:	69fb      	ldr	r3, [r7, #28]
 801e588:	089b      	lsrs	r3, r3, #2
 801e58a:	f003 0301 	and.w	r3, r3, #1
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d103      	bne.n	801e59a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 801e592:	6878      	ldr	r0, [r7, #4]
 801e594:	f000 feb2 	bl	801f2fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e598:	e039      	b.n	801e60e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e59a:	69fb      	ldr	r3, [r7, #28]
 801e59c:	089b      	lsrs	r3, r3, #2
 801e59e:	f003 0301 	and.w	r3, r3, #1
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d033      	beq.n	801e60e <HAL_I2C_EV_IRQHandler+0x2da>
 801e5a6:	697b      	ldr	r3, [r7, #20]
 801e5a8:	0a5b      	lsrs	r3, r3, #9
 801e5aa:	f003 0301 	and.w	r3, r3, #1
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d02d      	beq.n	801e60e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f000 fedf 	bl	801f376 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e5b8:	e029      	b.n	801e60e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e5ba:	69fb      	ldr	r3, [r7, #28]
 801e5bc:	099b      	lsrs	r3, r3, #6
 801e5be:	f003 0301 	and.w	r3, r3, #1
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d00f      	beq.n	801e5e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 801e5c6:	697b      	ldr	r3, [r7, #20]
 801e5c8:	0a9b      	lsrs	r3, r3, #10
 801e5ca:	f003 0301 	and.w	r3, r3, #1
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d009      	beq.n	801e5e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 801e5d2:	69fb      	ldr	r3, [r7, #28]
 801e5d4:	089b      	lsrs	r3, r3, #2
 801e5d6:	f003 0301 	and.w	r3, r3, #1
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d103      	bne.n	801e5e6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 801e5de:	6878      	ldr	r0, [r7, #4]
 801e5e0:	f000 feea 	bl	801f3b8 <I2C_SlaveReceive_RXNE>
 801e5e4:	e014      	b.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e5e6:	69fb      	ldr	r3, [r7, #28]
 801e5e8:	089b      	lsrs	r3, r3, #2
 801e5ea:	f003 0301 	and.w	r3, r3, #1
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d00e      	beq.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
 801e5f2:	697b      	ldr	r3, [r7, #20]
 801e5f4:	0a5b      	lsrs	r3, r3, #9
 801e5f6:	f003 0301 	and.w	r3, r3, #1
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d008      	beq.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 801e5fe:	6878      	ldr	r0, [r7, #4]
 801e600:	f000 ff18 	bl	801f434 <I2C_SlaveReceive_BTF>
 801e604:	e004      	b.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801e606:	bf00      	nop
 801e608:	e002      	b.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801e60a:	bf00      	nop
 801e60c:	e000      	b.n	801e610 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801e60e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 801e610:	3720      	adds	r7, #32
 801e612:	46bd      	mov	sp, r7
 801e614:	bd80      	pop	{r7, pc}

0801e616 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801e616:	b580      	push	{r7, lr}
 801e618:	b08a      	sub	sp, #40	; 0x28
 801e61a:	af00      	add	r7, sp, #0
 801e61c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	695b      	ldr	r3, [r3, #20]
 801e624:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	685b      	ldr	r3, [r3, #4]
 801e62c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 801e62e:	2300      	movs	r3, #0
 801e630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e638:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e63a:	6a3b      	ldr	r3, [r7, #32]
 801e63c:	0a1b      	lsrs	r3, r3, #8
 801e63e:	f003 0301 	and.w	r3, r3, #1
 801e642:	2b00      	cmp	r3, #0
 801e644:	d00e      	beq.n	801e664 <HAL_I2C_ER_IRQHandler+0x4e>
 801e646:	69fb      	ldr	r3, [r7, #28]
 801e648:	0a1b      	lsrs	r3, r3, #8
 801e64a:	f003 0301 	and.w	r3, r3, #1
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d008      	beq.n	801e664 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 801e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e654:	f043 0301 	orr.w	r3, r3, #1
 801e658:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e662:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e664:	6a3b      	ldr	r3, [r7, #32]
 801e666:	0a5b      	lsrs	r3, r3, #9
 801e668:	f003 0301 	and.w	r3, r3, #1
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d00e      	beq.n	801e68e <HAL_I2C_ER_IRQHandler+0x78>
 801e670:	69fb      	ldr	r3, [r7, #28]
 801e672:	0a1b      	lsrs	r3, r3, #8
 801e674:	f003 0301 	and.w	r3, r3, #1
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d008      	beq.n	801e68e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 801e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e67e:	f043 0302 	orr.w	r3, r3, #2
 801e682:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	f46f 7200 	mvn.w	r2, #512	; 0x200
 801e68c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e68e:	6a3b      	ldr	r3, [r7, #32]
 801e690:	0a9b      	lsrs	r3, r3, #10
 801e692:	f003 0301 	and.w	r3, r3, #1
 801e696:	2b00      	cmp	r3, #0
 801e698:	d03f      	beq.n	801e71a <HAL_I2C_ER_IRQHandler+0x104>
 801e69a:	69fb      	ldr	r3, [r7, #28]
 801e69c:	0a1b      	lsrs	r3, r3, #8
 801e69e:	f003 0301 	and.w	r3, r3, #1
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d039      	beq.n	801e71a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801e6a6:	7efb      	ldrb	r3, [r7, #27]
 801e6a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e6ae:	b29b      	uxth	r3, r3
 801e6b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e6b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e6be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 801e6c0:	7ebb      	ldrb	r3, [r7, #26]
 801e6c2:	2b20      	cmp	r3, #32
 801e6c4:	d112      	bne.n	801e6ec <HAL_I2C_ER_IRQHandler+0xd6>
 801e6c6:	697b      	ldr	r3, [r7, #20]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d10f      	bne.n	801e6ec <HAL_I2C_ER_IRQHandler+0xd6>
 801e6cc:	7cfb      	ldrb	r3, [r7, #19]
 801e6ce:	2b21      	cmp	r3, #33	; 0x21
 801e6d0:	d008      	beq.n	801e6e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 801e6d2:	7cfb      	ldrb	r3, [r7, #19]
 801e6d4:	2b29      	cmp	r3, #41	; 0x29
 801e6d6:	d005      	beq.n	801e6e4 <HAL_I2C_ER_IRQHandler+0xce>
 801e6d8:	7cfb      	ldrb	r3, [r7, #19]
 801e6da:	2b28      	cmp	r3, #40	; 0x28
 801e6dc:	d106      	bne.n	801e6ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	2b21      	cmp	r3, #33	; 0x21
 801e6e2:	d103      	bne.n	801e6ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 801e6e4:	6878      	ldr	r0, [r7, #4]
 801e6e6:	f001 f841 	bl	801f76c <I2C_Slave_AF>
 801e6ea:	e016      	b.n	801e71a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801e6f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f8:	f043 0304 	orr.w	r3, r3, #4
 801e6fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801e6fe:	7efb      	ldrb	r3, [r7, #27]
 801e700:	2b10      	cmp	r3, #16
 801e702:	d002      	beq.n	801e70a <HAL_I2C_ER_IRQHandler+0xf4>
 801e704:	7efb      	ldrb	r3, [r7, #27]
 801e706:	2b40      	cmp	r3, #64	; 0x40
 801e708:	d107      	bne.n	801e71a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	681a      	ldr	r2, [r3, #0]
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e718:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801e71a:	6a3b      	ldr	r3, [r7, #32]
 801e71c:	0adb      	lsrs	r3, r3, #11
 801e71e:	f003 0301 	and.w	r3, r3, #1
 801e722:	2b00      	cmp	r3, #0
 801e724:	d00e      	beq.n	801e744 <HAL_I2C_ER_IRQHandler+0x12e>
 801e726:	69fb      	ldr	r3, [r7, #28]
 801e728:	0a1b      	lsrs	r3, r3, #8
 801e72a:	f003 0301 	and.w	r3, r3, #1
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d008      	beq.n	801e744 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 801e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e734:	f043 0308 	orr.w	r3, r3, #8
 801e738:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 801e742:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 801e744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e746:	2b00      	cmp	r3, #0
 801e748:	d008      	beq.n	801e75c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e750:	431a      	orrs	r2, r3
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 801e756:	6878      	ldr	r0, [r7, #4]
 801e758:	f001 f878 	bl	801f84c <I2C_ITError>
  }
}
 801e75c:	bf00      	nop
 801e75e:	3728      	adds	r7, #40	; 0x28
 801e760:	46bd      	mov	sp, r7
 801e762:	bd80      	pop	{r7, pc}

0801e764 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e764:	b480      	push	{r7}
 801e766:	b083      	sub	sp, #12
 801e768:	af00      	add	r7, sp, #0
 801e76a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801e76c:	bf00      	nop
 801e76e:	370c      	adds	r7, #12
 801e770:	46bd      	mov	sp, r7
 801e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e776:	4770      	bx	lr

0801e778 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e778:	b480      	push	{r7}
 801e77a:	b083      	sub	sp, #12
 801e77c:	af00      	add	r7, sp, #0
 801e77e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801e780:	bf00      	nop
 801e782:	370c      	adds	r7, #12
 801e784:	46bd      	mov	sp, r7
 801e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e78a:	4770      	bx	lr

0801e78c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801e78c:	b480      	push	{r7}
 801e78e:	b083      	sub	sp, #12
 801e790:	af00      	add	r7, sp, #0
 801e792:	6078      	str	r0, [r7, #4]
 801e794:	460b      	mov	r3, r1
 801e796:	70fb      	strb	r3, [r7, #3]
 801e798:	4613      	mov	r3, r2
 801e79a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801e79c:	bf00      	nop
 801e79e:	370c      	adds	r7, #12
 801e7a0:	46bd      	mov	sp, r7
 801e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7a6:	4770      	bx	lr

0801e7a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e7a8:	b480      	push	{r7}
 801e7aa:	b083      	sub	sp, #12
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801e7b0:	bf00      	nop
 801e7b2:	370c      	adds	r7, #12
 801e7b4:	46bd      	mov	sp, r7
 801e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ba:	4770      	bx	lr

0801e7bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801e7bc:	b480      	push	{r7}
 801e7be:	b083      	sub	sp, #12
 801e7c0:	af00      	add	r7, sp, #0
 801e7c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801e7c4:	bf00      	nop
 801e7c6:	370c      	adds	r7, #12
 801e7c8:	46bd      	mov	sp, r7
 801e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ce:	4770      	bx	lr

0801e7d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801e7d0:	b480      	push	{r7}
 801e7d2:	b083      	sub	sp, #12
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801e7d8:	bf00      	nop
 801e7da:	370c      	adds	r7, #12
 801e7dc:	46bd      	mov	sp, r7
 801e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7e2:	4770      	bx	lr

0801e7e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801e7e4:	b580      	push	{r7, lr}
 801e7e6:	b084      	sub	sp, #16
 801e7e8:	af00      	add	r7, sp, #0
 801e7ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e7f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e7fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e800:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e806:	2b00      	cmp	r3, #0
 801e808:	d150      	bne.n	801e8ac <I2C_MasterTransmit_TXE+0xc8>
 801e80a:	7bfb      	ldrb	r3, [r7, #15]
 801e80c:	2b21      	cmp	r3, #33	; 0x21
 801e80e:	d14d      	bne.n	801e8ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e810:	68bb      	ldr	r3, [r7, #8]
 801e812:	2b08      	cmp	r3, #8
 801e814:	d01d      	beq.n	801e852 <I2C_MasterTransmit_TXE+0x6e>
 801e816:	68bb      	ldr	r3, [r7, #8]
 801e818:	2b20      	cmp	r3, #32
 801e81a:	d01a      	beq.n	801e852 <I2C_MasterTransmit_TXE+0x6e>
 801e81c:	68bb      	ldr	r3, [r7, #8]
 801e81e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e822:	d016      	beq.n	801e852 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	685a      	ldr	r2, [r3, #4]
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e832:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	2211      	movs	r2, #17
 801e838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	2200      	movs	r2, #0
 801e83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	2220      	movs	r2, #32
 801e846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801e84a:	6878      	ldr	r0, [r7, #4]
 801e84c:	f7e3 f932 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e850:	e060      	b.n	801e914 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	685a      	ldr	r2, [r3, #4]
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e860:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	681b      	ldr	r3, [r3, #0]
 801e866:	681a      	ldr	r2, [r3, #0]
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	681b      	ldr	r3, [r3, #0]
 801e86c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e870:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	2200      	movs	r2, #0
 801e876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	2220      	movs	r2, #32
 801e87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e886:	b2db      	uxtb	r3, r3
 801e888:	2b40      	cmp	r3, #64	; 0x40
 801e88a:	d107      	bne.n	801e89c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	2200      	movs	r2, #0
 801e890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 801e894:	6878      	ldr	r0, [r7, #4]
 801e896:	f7e3 f8f7 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e89a:	e03b      	b.n	801e914 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	2200      	movs	r2, #0
 801e8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e8a4:	6878      	ldr	r0, [r7, #4]
 801e8a6:	f7e3 f905 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e8aa:	e033      	b.n	801e914 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801e8ac:	7bfb      	ldrb	r3, [r7, #15]
 801e8ae:	2b21      	cmp	r3, #33	; 0x21
 801e8b0:	d005      	beq.n	801e8be <I2C_MasterTransmit_TXE+0xda>
 801e8b2:	7bbb      	ldrb	r3, [r7, #14]
 801e8b4:	2b40      	cmp	r3, #64	; 0x40
 801e8b6:	d12d      	bne.n	801e914 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801e8b8:	7bfb      	ldrb	r3, [r7, #15]
 801e8ba:	2b22      	cmp	r3, #34	; 0x22
 801e8bc:	d12a      	bne.n	801e914 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e8c2:	b29b      	uxth	r3, r3
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	d108      	bne.n	801e8da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	685a      	ldr	r2, [r3, #4]
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	681b      	ldr	r3, [r3, #0]
 801e8d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e8d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801e8d8:	e01c      	b.n	801e914 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e8e0:	b2db      	uxtb	r3, r3
 801e8e2:	2b40      	cmp	r3, #64	; 0x40
 801e8e4:	d103      	bne.n	801e8ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 801e8e6:	6878      	ldr	r0, [r7, #4]
 801e8e8:	f000 f88e 	bl	801ea08 <I2C_MemoryTransmit_TXE_BTF>
}
 801e8ec:	e012      	b.n	801e914 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8f2:	781a      	ldrb	r2, [r3, #0]
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8fe:	1c5a      	adds	r2, r3, #1
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e908:	b29b      	uxth	r3, r3
 801e90a:	3b01      	subs	r3, #1
 801e90c:	b29a      	uxth	r2, r3
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801e912:	e7ff      	b.n	801e914 <I2C_MasterTransmit_TXE+0x130>
 801e914:	bf00      	nop
 801e916:	3710      	adds	r7, #16
 801e918:	46bd      	mov	sp, r7
 801e91a:	bd80      	pop	{r7, pc}

0801e91c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801e91c:	b580      	push	{r7, lr}
 801e91e:	b084      	sub	sp, #16
 801e920:	af00      	add	r7, sp, #0
 801e922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e928:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e930:	b2db      	uxtb	r3, r3
 801e932:	2b21      	cmp	r3, #33	; 0x21
 801e934:	d164      	bne.n	801ea00 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e93a:	b29b      	uxth	r3, r3
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d012      	beq.n	801e966 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e944:	781a      	ldrb	r2, [r3, #0]
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e950:	1c5a      	adds	r2, r3, #1
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801e95a:	b29b      	uxth	r3, r3
 801e95c:	3b01      	subs	r3, #1
 801e95e:	b29a      	uxth	r2, r3
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 801e964:	e04c      	b.n	801ea00 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801e966:	68fb      	ldr	r3, [r7, #12]
 801e968:	2b08      	cmp	r3, #8
 801e96a:	d01d      	beq.n	801e9a8 <I2C_MasterTransmit_BTF+0x8c>
 801e96c:	68fb      	ldr	r3, [r7, #12]
 801e96e:	2b20      	cmp	r3, #32
 801e970:	d01a      	beq.n	801e9a8 <I2C_MasterTransmit_BTF+0x8c>
 801e972:	68fb      	ldr	r3, [r7, #12]
 801e974:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801e978:	d016      	beq.n	801e9a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	685a      	ldr	r2, [r3, #4]
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e988:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	2211      	movs	r2, #17
 801e98e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	2200      	movs	r2, #0
 801e994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	2220      	movs	r2, #32
 801e99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 801e9a0:	6878      	ldr	r0, [r7, #4]
 801e9a2:	f7e3 f887 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801e9a6:	e02b      	b.n	801ea00 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	685a      	ldr	r2, [r3, #4]
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801e9b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801e9b8:	687b      	ldr	r3, [r7, #4]
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	681a      	ldr	r2, [r3, #0]
 801e9be:	687b      	ldr	r3, [r7, #4]
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e9c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	2200      	movs	r2, #0
 801e9cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	2220      	movs	r2, #32
 801e9d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e9dc:	b2db      	uxtb	r3, r3
 801e9de:	2b40      	cmp	r3, #64	; 0x40
 801e9e0:	d107      	bne.n	801e9f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	2200      	movs	r2, #0
 801e9e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 801e9ea:	6878      	ldr	r0, [r7, #4]
 801e9ec:	f7e3 f84c 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801e9f0:	e006      	b.n	801ea00 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 801e9fa:	6878      	ldr	r0, [r7, #4]
 801e9fc:	f7e3 f85a 	bl	8001ab4 <HAL_I2C_MasterTxCpltCallback>
}
 801ea00:	bf00      	nop
 801ea02:	3710      	adds	r7, #16
 801ea04:	46bd      	mov	sp, r7
 801ea06:	bd80      	pop	{r7, pc}

0801ea08 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 801ea08:	b580      	push	{r7, lr}
 801ea0a:	b084      	sub	sp, #16
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d11d      	bne.n	801ea5c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ea24:	2b01      	cmp	r3, #1
 801ea26:	d10b      	bne.n	801ea40 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ea2c:	b2da      	uxtb	r2, r3
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea38:	1c9a      	adds	r2, r3, #2
 801ea3a:	687b      	ldr	r3, [r7, #4]
 801ea3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801ea3e:	e073      	b.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ea44:	b29b      	uxth	r3, r3
 801ea46:	121b      	asrs	r3, r3, #8
 801ea48:	b2da      	uxtb	r2, r3
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea54:	1c5a      	adds	r2, r3, #1
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ea5a:	e065      	b.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea60:	2b01      	cmp	r3, #1
 801ea62:	d10b      	bne.n	801ea7c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ea68:	b2da      	uxtb	r2, r3
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	681b      	ldr	r3, [r3, #0]
 801ea6e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea74:	1c5a      	adds	r2, r3, #1
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	651a      	str	r2, [r3, #80]	; 0x50
}
 801ea7a:	e055      	b.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea80:	2b02      	cmp	r3, #2
 801ea82:	d151      	bne.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 801ea84:	7bfb      	ldrb	r3, [r7, #15]
 801ea86:	2b22      	cmp	r3, #34	; 0x22
 801ea88:	d10d      	bne.n	801eaa6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	681a      	ldr	r2, [r3, #0]
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ea98:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ea9e:	1c5a      	adds	r2, r3, #1
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	651a      	str	r2, [r3, #80]	; 0x50
}
 801eaa4:	e040      	b.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eaaa:	b29b      	uxth	r3, r3
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d015      	beq.n	801eadc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 801eab0:	7bfb      	ldrb	r3, [r7, #15]
 801eab2:	2b21      	cmp	r3, #33	; 0x21
 801eab4:	d112      	bne.n	801eadc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eaba:	781a      	ldrb	r2, [r3, #0]
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eac6:	1c5a      	adds	r2, r3, #1
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	3b01      	subs	r3, #1
 801ead4:	b29a      	uxth	r2, r3
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801eada:	e025      	b.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eae0:	b29b      	uxth	r3, r3
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d120      	bne.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
 801eae6:	7bfb      	ldrb	r3, [r7, #15]
 801eae8:	2b21      	cmp	r3, #33	; 0x21
 801eaea:	d11d      	bne.n	801eb28 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	685a      	ldr	r2, [r3, #4]
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	681b      	ldr	r3, [r3, #0]
 801eaf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801eafa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	681a      	ldr	r2, [r3, #0]
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eb0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	2200      	movs	r2, #0
 801eb10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	2220      	movs	r2, #32
 801eb16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801eb22:	6878      	ldr	r0, [r7, #4]
 801eb24:	f7e2 ffb0 	bl	8001a88 <HAL_I2C_MemTxCpltCallback>
}
 801eb28:	bf00      	nop
 801eb2a:	3710      	adds	r7, #16
 801eb2c:	46bd      	mov	sp, r7
 801eb2e:	bd80      	pop	{r7, pc}

0801eb30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801eb30:	b580      	push	{r7, lr}
 801eb32:	b084      	sub	sp, #16
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb3e:	b2db      	uxtb	r3, r3
 801eb40:	2b22      	cmp	r3, #34	; 0x22
 801eb42:	f040 80ac 	bne.w	801ec9e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb4a:	b29b      	uxth	r3, r3
 801eb4c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	2b03      	cmp	r3, #3
 801eb52:	d921      	bls.n	801eb98 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	691a      	ldr	r2, [r3, #16]
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb5e:	b2d2      	uxtb	r2, r2
 801eb60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb66:	1c5a      	adds	r2, r3, #1
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb70:	b29b      	uxth	r3, r3
 801eb72:	3b01      	subs	r3, #1
 801eb74:	b29a      	uxth	r2, r3
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 801eb7a:	687b      	ldr	r3, [r7, #4]
 801eb7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eb7e:	b29b      	uxth	r3, r3
 801eb80:	2b03      	cmp	r3, #3
 801eb82:	f040 808c 	bne.w	801ec9e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	685a      	ldr	r2, [r3, #4]
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eb94:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 801eb96:	e082      	b.n	801ec9e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb9c:	2b02      	cmp	r3, #2
 801eb9e:	d075      	beq.n	801ec8c <I2C_MasterReceive_RXNE+0x15c>
 801eba0:	68fb      	ldr	r3, [r7, #12]
 801eba2:	2b01      	cmp	r3, #1
 801eba4:	d002      	beq.n	801ebac <I2C_MasterReceive_RXNE+0x7c>
 801eba6:	68fb      	ldr	r3, [r7, #12]
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d16f      	bne.n	801ec8c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ebac:	6878      	ldr	r0, [r7, #4]
 801ebae:	f001 fbcf 	bl	8020350 <I2C_WaitOnSTOPRequestThroughIT>
 801ebb2:	4603      	mov	r3, r0
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d142      	bne.n	801ec3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	681b      	ldr	r3, [r3, #0]
 801ebbc:	681a      	ldr	r2, [r3, #0]
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ebc6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	685a      	ldr	r2, [r3, #4]
 801ebce:	687b      	ldr	r3, [r7, #4]
 801ebd0:	681b      	ldr	r3, [r3, #0]
 801ebd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ebd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	681b      	ldr	r3, [r3, #0]
 801ebdc:	691a      	ldr	r2, [r3, #16]
 801ebde:	687b      	ldr	r3, [r7, #4]
 801ebe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebe2:	b2d2      	uxtb	r2, r2
 801ebe4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ebea:	1c5a      	adds	r2, r3, #1
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ebf4:	b29b      	uxth	r3, r3
 801ebf6:	3b01      	subs	r3, #1
 801ebf8:	b29a      	uxth	r2, r3
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	2220      	movs	r2, #32
 801ec02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ec0c:	b2db      	uxtb	r3, r3
 801ec0e:	2b40      	cmp	r3, #64	; 0x40
 801ec10:	d10a      	bne.n	801ec28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	2200      	movs	r2, #0
 801ec16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801ec20:	6878      	ldr	r0, [r7, #4]
 801ec22:	f7e2 ff05 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ec26:	e03a      	b.n	801ec9e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	2200      	movs	r2, #0
 801ec2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	2212      	movs	r2, #18
 801ec34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801ec36:	6878      	ldr	r0, [r7, #4]
 801ec38:	f7e2 ff10 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ec3c:	e02f      	b.n	801ec9e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	685a      	ldr	r2, [r3, #4]
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801ec4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	691a      	ldr	r2, [r3, #16]
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec58:	b2d2      	uxtb	r2, r2
 801ec5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec60:	1c5a      	adds	r2, r3, #1
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ec6a:	b29b      	uxth	r3, r3
 801ec6c:	3b01      	subs	r3, #1
 801ec6e:	b29a      	uxth	r2, r3
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	2220      	movs	r2, #32
 801ec78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	2200      	movs	r2, #0
 801ec80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801ec84:	6878      	ldr	r0, [r7, #4]
 801ec86:	f7ff fd99 	bl	801e7bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 801ec8a:	e008      	b.n	801ec9e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	685a      	ldr	r2, [r3, #4]
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ec9a:	605a      	str	r2, [r3, #4]
}
 801ec9c:	e7ff      	b.n	801ec9e <I2C_MasterReceive_RXNE+0x16e>
 801ec9e:	bf00      	nop
 801eca0:	3710      	adds	r7, #16
 801eca2:	46bd      	mov	sp, r7
 801eca4:	bd80      	pop	{r7, pc}

0801eca6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801eca6:	b580      	push	{r7, lr}
 801eca8:	b084      	sub	sp, #16
 801ecaa:	af00      	add	r7, sp, #0
 801ecac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ecb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecb8:	b29b      	uxth	r3, r3
 801ecba:	2b04      	cmp	r3, #4
 801ecbc:	d11b      	bne.n	801ecf6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	685a      	ldr	r2, [r3, #4]
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801eccc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	681b      	ldr	r3, [r3, #0]
 801ecd2:	691a      	ldr	r2, [r3, #16]
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ecd8:	b2d2      	uxtb	r2, r2
 801ecda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ece0:	1c5a      	adds	r2, r3, #1
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecea:	b29b      	uxth	r3, r3
 801ecec:	3b01      	subs	r3, #1
 801ecee:	b29a      	uxth	r2, r3
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801ecf4:	e0bd      	b.n	801ee72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ecfa:	b29b      	uxth	r3, r3
 801ecfc:	2b03      	cmp	r3, #3
 801ecfe:	d129      	bne.n	801ed54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	685a      	ldr	r2, [r3, #4]
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	2b04      	cmp	r3, #4
 801ed14:	d00a      	beq.n	801ed2c <I2C_MasterReceive_BTF+0x86>
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	2b02      	cmp	r3, #2
 801ed1a:	d007      	beq.n	801ed2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	681a      	ldr	r2, [r3, #0]
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	691a      	ldr	r2, [r3, #16]
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed36:	b2d2      	uxtb	r2, r2
 801ed38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ed3a:	687b      	ldr	r3, [r7, #4]
 801ed3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed3e:	1c5a      	adds	r2, r3, #1
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed48:	b29b      	uxth	r3, r3
 801ed4a:	3b01      	subs	r3, #1
 801ed4c:	b29a      	uxth	r2, r3
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801ed52:	e08e      	b.n	801ee72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed58:	b29b      	uxth	r3, r3
 801ed5a:	2b02      	cmp	r3, #2
 801ed5c:	d176      	bne.n	801ee4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	2b01      	cmp	r3, #1
 801ed62:	d002      	beq.n	801ed6a <I2C_MasterReceive_BTF+0xc4>
 801ed64:	68fb      	ldr	r3, [r7, #12]
 801ed66:	2b10      	cmp	r3, #16
 801ed68:	d108      	bne.n	801ed7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	681a      	ldr	r2, [r3, #0]
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ed78:	601a      	str	r2, [r3, #0]
 801ed7a:	e019      	b.n	801edb0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	2b04      	cmp	r3, #4
 801ed80:	d002      	beq.n	801ed88 <I2C_MasterReceive_BTF+0xe2>
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	2b02      	cmp	r3, #2
 801ed86:	d108      	bne.n	801ed9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	681a      	ldr	r2, [r3, #0]
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ed96:	601a      	str	r2, [r3, #0]
 801ed98:	e00a      	b.n	801edb0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801ed9a:	68fb      	ldr	r3, [r7, #12]
 801ed9c:	2b10      	cmp	r3, #16
 801ed9e:	d007      	beq.n	801edb0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	681a      	ldr	r2, [r3, #0]
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801edae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	691a      	ldr	r2, [r3, #16]
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edba:	b2d2      	uxtb	r2, r2
 801edbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edc2:	1c5a      	adds	r2, r3, #1
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edcc:	b29b      	uxth	r3, r3
 801edce:	3b01      	subs	r3, #1
 801edd0:	b29a      	uxth	r2, r3
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	691a      	ldr	r2, [r3, #16]
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ede0:	b2d2      	uxtb	r2, r2
 801ede2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ede8:	1c5a      	adds	r2, r3, #1
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801edf2:	b29b      	uxth	r3, r3
 801edf4:	3b01      	subs	r3, #1
 801edf6:	b29a      	uxth	r2, r3
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	685a      	ldr	r2, [r3, #4]
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801ee0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	2220      	movs	r2, #32
 801ee10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ee1a:	b2db      	uxtb	r3, r3
 801ee1c:	2b40      	cmp	r3, #64	; 0x40
 801ee1e:	d10a      	bne.n	801ee36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	2200      	movs	r2, #0
 801ee24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	2200      	movs	r2, #0
 801ee2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801ee2e:	6878      	ldr	r0, [r7, #4]
 801ee30:	f7e2 fdfe 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 801ee34:	e01d      	b.n	801ee72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	2200      	movs	r2, #0
 801ee3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	2212      	movs	r2, #18
 801ee42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801ee44:	6878      	ldr	r0, [r7, #4]
 801ee46:	f7e2 fe09 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 801ee4a:	e012      	b.n	801ee72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	691a      	ldr	r2, [r3, #16]
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee56:	b2d2      	uxtb	r2, r2
 801ee58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee5e:	1c5a      	adds	r2, r3, #1
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee68:	b29b      	uxth	r3, r3
 801ee6a:	3b01      	subs	r3, #1
 801ee6c:	b29a      	uxth	r2, r3
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801ee72:	bf00      	nop
 801ee74:	3710      	adds	r7, #16
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}

0801ee7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801ee7a:	b480      	push	{r7}
 801ee7c:	b083      	sub	sp, #12
 801ee7e:	af00      	add	r7, sp, #0
 801ee80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ee88:	b2db      	uxtb	r3, r3
 801ee8a:	2b40      	cmp	r3, #64	; 0x40
 801ee8c:	d117      	bne.n	801eebe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d109      	bne.n	801eeaa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ee9a:	b2db      	uxtb	r3, r3
 801ee9c:	461a      	mov	r2, r3
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801eea6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801eea8:	e067      	b.n	801ef7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eeae:	b2db      	uxtb	r3, r3
 801eeb0:	f043 0301 	orr.w	r3, r3, #1
 801eeb4:	b2da      	uxtb	r2, r3
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	611a      	str	r2, [r3, #16]
}
 801eebc:	e05d      	b.n	801ef7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	691b      	ldr	r3, [r3, #16]
 801eec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801eec6:	d133      	bne.n	801ef30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	2b21      	cmp	r3, #33	; 0x21
 801eed2:	d109      	bne.n	801eee8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eed8:	b2db      	uxtb	r3, r3
 801eeda:	461a      	mov	r2, r3
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801eee4:	611a      	str	r2, [r3, #16]
 801eee6:	e008      	b.n	801eefa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eeec:	b2db      	uxtb	r3, r3
 801eeee:	f043 0301 	orr.w	r3, r3, #1
 801eef2:	b2da      	uxtb	r2, r3
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d004      	beq.n	801ef0c <I2C_Master_SB+0x92>
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d108      	bne.n	801ef1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	d032      	beq.n	801ef7a <I2C_Master_SB+0x100>
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d02d      	beq.n	801ef7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	685a      	ldr	r2, [r3, #4]
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ef2c:	605a      	str	r2, [r3, #4]
}
 801ef2e:	e024      	b.n	801ef7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d10e      	bne.n	801ef56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef3c:	b29b      	uxth	r3, r3
 801ef3e:	11db      	asrs	r3, r3, #7
 801ef40:	b2db      	uxtb	r3, r3
 801ef42:	f003 0306 	and.w	r3, r3, #6
 801ef46:	b2db      	uxtb	r3, r3
 801ef48:	f063 030f 	orn	r3, r3, #15
 801ef4c:	b2da      	uxtb	r2, r3
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	681b      	ldr	r3, [r3, #0]
 801ef52:	611a      	str	r2, [r3, #16]
}
 801ef54:	e011      	b.n	801ef7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef5a:	2b01      	cmp	r3, #1
 801ef5c:	d10d      	bne.n	801ef7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef62:	b29b      	uxth	r3, r3
 801ef64:	11db      	asrs	r3, r3, #7
 801ef66:	b2db      	uxtb	r3, r3
 801ef68:	f003 0306 	and.w	r3, r3, #6
 801ef6c:	b2db      	uxtb	r3, r3
 801ef6e:	f063 030e 	orn	r3, r3, #14
 801ef72:	b2da      	uxtb	r2, r3
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	611a      	str	r2, [r3, #16]
}
 801ef7a:	bf00      	nop
 801ef7c:	370c      	adds	r7, #12
 801ef7e:	46bd      	mov	sp, r7
 801ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef84:	4770      	bx	lr

0801ef86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801ef86:	b480      	push	{r7}
 801ef88:	b083      	sub	sp, #12
 801ef8a:	af00      	add	r7, sp, #0
 801ef8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef92:	b2da      	uxtb	r2, r3
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d004      	beq.n	801efac <I2C_Master_ADD10+0x26>
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d108      	bne.n	801efbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	d00c      	beq.n	801efce <I2C_Master_ADD10+0x48>
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801efb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d007      	beq.n	801efce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	685a      	ldr	r2, [r3, #4]
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801efcc:	605a      	str	r2, [r3, #4]
  }
}
 801efce:	bf00      	nop
 801efd0:	370c      	adds	r7, #12
 801efd2:	46bd      	mov	sp, r7
 801efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd8:	4770      	bx	lr

0801efda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801efda:	b480      	push	{r7}
 801efdc:	b091      	sub	sp, #68	; 0x44
 801efde:	af00      	add	r7, sp, #0
 801efe0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801efe8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eff0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eff6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801effe:	b2db      	uxtb	r3, r3
 801f000:	2b22      	cmp	r3, #34	; 0x22
 801f002:	f040 8169 	bne.w	801f2d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d10f      	bne.n	801f02e <I2C_Master_ADDR+0x54>
 801f00e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801f012:	2b40      	cmp	r3, #64	; 0x40
 801f014:	d10b      	bne.n	801f02e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f016:	2300      	movs	r3, #0
 801f018:	633b      	str	r3, [r7, #48]	; 0x30
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	681b      	ldr	r3, [r3, #0]
 801f01e:	695b      	ldr	r3, [r3, #20]
 801f020:	633b      	str	r3, [r7, #48]	; 0x30
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	699b      	ldr	r3, [r3, #24]
 801f028:	633b      	str	r3, [r7, #48]	; 0x30
 801f02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f02c:	e160      	b.n	801f2f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f032:	2b00      	cmp	r3, #0
 801f034:	d11d      	bne.n	801f072 <I2C_Master_ADDR+0x98>
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	691b      	ldr	r3, [r3, #16]
 801f03a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f03e:	d118      	bne.n	801f072 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f040:	2300      	movs	r3, #0
 801f042:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	695b      	ldr	r3, [r3, #20]
 801f04a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	699b      	ldr	r3, [r3, #24]
 801f052:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	681a      	ldr	r2, [r3, #0]
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f064:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f06a:	1c5a      	adds	r2, r3, #1
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	651a      	str	r2, [r3, #80]	; 0x50
 801f070:	e13e      	b.n	801f2f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f076:	b29b      	uxth	r3, r3
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d113      	bne.n	801f0a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f07c:	2300      	movs	r3, #0
 801f07e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	695b      	ldr	r3, [r3, #20]
 801f086:	62bb      	str	r3, [r7, #40]	; 0x28
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	699b      	ldr	r3, [r3, #24]
 801f08e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f090:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	681b      	ldr	r3, [r3, #0]
 801f096:	681a      	ldr	r2, [r3, #0]
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f0a0:	601a      	str	r2, [r3, #0]
 801f0a2:	e115      	b.n	801f2d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f0a8:	b29b      	uxth	r3, r3
 801f0aa:	2b01      	cmp	r3, #1
 801f0ac:	f040 808a 	bne.w	801f1c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 801f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f0b6:	d137      	bne.n	801f128 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	681a      	ldr	r2, [r3, #0]
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f0c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	681b      	ldr	r3, [r3, #0]
 801f0cc:	685b      	ldr	r3, [r3, #4]
 801f0ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f0d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f0d6:	d113      	bne.n	801f100 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	681a      	ldr	r2, [r3, #0]
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f0e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	627b      	str	r3, [r7, #36]	; 0x24
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	695b      	ldr	r3, [r3, #20]
 801f0f2:	627b      	str	r3, [r7, #36]	; 0x24
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	699b      	ldr	r3, [r3, #24]
 801f0fa:	627b      	str	r3, [r7, #36]	; 0x24
 801f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0fe:	e0e7      	b.n	801f2d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f100:	2300      	movs	r3, #0
 801f102:	623b      	str	r3, [r7, #32]
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	695b      	ldr	r3, [r3, #20]
 801f10a:	623b      	str	r3, [r7, #32]
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	699b      	ldr	r3, [r3, #24]
 801f112:	623b      	str	r3, [r7, #32]
 801f114:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	681a      	ldr	r2, [r3, #0]
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f124:	601a      	str	r2, [r3, #0]
 801f126:	e0d3      	b.n	801f2d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801f128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f12a:	2b08      	cmp	r3, #8
 801f12c:	d02e      	beq.n	801f18c <I2C_Master_ADDR+0x1b2>
 801f12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f130:	2b20      	cmp	r3, #32
 801f132:	d02b      	beq.n	801f18c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 801f134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f136:	2b12      	cmp	r3, #18
 801f138:	d102      	bne.n	801f140 <I2C_Master_ADDR+0x166>
 801f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f13c:	2b01      	cmp	r3, #1
 801f13e:	d125      	bne.n	801f18c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f142:	2b04      	cmp	r3, #4
 801f144:	d00e      	beq.n	801f164 <I2C_Master_ADDR+0x18a>
 801f146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f148:	2b02      	cmp	r3, #2
 801f14a:	d00b      	beq.n	801f164 <I2C_Master_ADDR+0x18a>
 801f14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f14e:	2b10      	cmp	r3, #16
 801f150:	d008      	beq.n	801f164 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	681b      	ldr	r3, [r3, #0]
 801f156:	681a      	ldr	r2, [r3, #0]
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f160:	601a      	str	r2, [r3, #0]
 801f162:	e007      	b.n	801f174 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	681a      	ldr	r2, [r3, #0]
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f172:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f174:	2300      	movs	r3, #0
 801f176:	61fb      	str	r3, [r7, #28]
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	695b      	ldr	r3, [r3, #20]
 801f17e:	61fb      	str	r3, [r7, #28]
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	699b      	ldr	r3, [r3, #24]
 801f186:	61fb      	str	r3, [r7, #28]
 801f188:	69fb      	ldr	r3, [r7, #28]
 801f18a:	e0a1      	b.n	801f2d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	681a      	ldr	r2, [r3, #0]
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	681b      	ldr	r3, [r3, #0]
 801f196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f19a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f19c:	2300      	movs	r3, #0
 801f19e:	61bb      	str	r3, [r7, #24]
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	695b      	ldr	r3, [r3, #20]
 801f1a6:	61bb      	str	r3, [r7, #24]
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	699b      	ldr	r3, [r3, #24]
 801f1ae:	61bb      	str	r3, [r7, #24]
 801f1b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	681a      	ldr	r2, [r3, #0]
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f1c0:	601a      	str	r2, [r3, #0]
 801f1c2:	e085      	b.n	801f2d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	2b02      	cmp	r3, #2
 801f1cc:	d14d      	bne.n	801f26a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1d0:	2b04      	cmp	r3, #4
 801f1d2:	d016      	beq.n	801f202 <I2C_Master_ADDR+0x228>
 801f1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1d6:	2b02      	cmp	r3, #2
 801f1d8:	d013      	beq.n	801f202 <I2C_Master_ADDR+0x228>
 801f1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f1dc:	2b10      	cmp	r3, #16
 801f1de:	d010      	beq.n	801f202 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	681a      	ldr	r2, [r3, #0]
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f1ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801f1f0:	687b      	ldr	r3, [r7, #4]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	681a      	ldr	r2, [r3, #0]
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f1fe:	601a      	str	r2, [r3, #0]
 801f200:	e007      	b.n	801f212 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	681a      	ldr	r2, [r3, #0]
 801f208:	687b      	ldr	r3, [r7, #4]
 801f20a:	681b      	ldr	r3, [r3, #0]
 801f20c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f210:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	685b      	ldr	r3, [r3, #4]
 801f218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f21c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f220:	d117      	bne.n	801f252 <I2C_Master_ADDR+0x278>
 801f222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f228:	d00b      	beq.n	801f242 <I2C_Master_ADDR+0x268>
 801f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f22c:	2b01      	cmp	r3, #1
 801f22e:	d008      	beq.n	801f242 <I2C_Master_ADDR+0x268>
 801f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f232:	2b08      	cmp	r3, #8
 801f234:	d005      	beq.n	801f242 <I2C_Master_ADDR+0x268>
 801f236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f238:	2b10      	cmp	r3, #16
 801f23a:	d002      	beq.n	801f242 <I2C_Master_ADDR+0x268>
 801f23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f23e:	2b20      	cmp	r3, #32
 801f240:	d107      	bne.n	801f252 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	685a      	ldr	r2, [r3, #4]
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f250:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f252:	2300      	movs	r3, #0
 801f254:	617b      	str	r3, [r7, #20]
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	695b      	ldr	r3, [r3, #20]
 801f25c:	617b      	str	r3, [r7, #20]
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	699b      	ldr	r3, [r3, #24]
 801f264:	617b      	str	r3, [r7, #20]
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	e032      	b.n	801f2d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	681b      	ldr	r3, [r3, #0]
 801f26e:	681a      	ldr	r2, [r3, #0]
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801f278:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	685b      	ldr	r3, [r3, #4]
 801f280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f288:	d117      	bne.n	801f2ba <I2C_Master_ADDR+0x2e0>
 801f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f28c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f290:	d00b      	beq.n	801f2aa <I2C_Master_ADDR+0x2d0>
 801f292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f294:	2b01      	cmp	r3, #1
 801f296:	d008      	beq.n	801f2aa <I2C_Master_ADDR+0x2d0>
 801f298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f29a:	2b08      	cmp	r3, #8
 801f29c:	d005      	beq.n	801f2aa <I2C_Master_ADDR+0x2d0>
 801f29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2a0:	2b10      	cmp	r3, #16
 801f2a2:	d002      	beq.n	801f2aa <I2C_Master_ADDR+0x2d0>
 801f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f2a6:	2b20      	cmp	r3, #32
 801f2a8:	d107      	bne.n	801f2ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	685a      	ldr	r2, [r3, #4]
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f2b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f2ba:	2300      	movs	r3, #0
 801f2bc:	613b      	str	r3, [r7, #16]
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	695b      	ldr	r3, [r3, #20]
 801f2c4:	613b      	str	r3, [r7, #16]
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	699b      	ldr	r3, [r3, #24]
 801f2cc:	613b      	str	r3, [r7, #16]
 801f2ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	2200      	movs	r2, #0
 801f2d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801f2d6:	e00b      	b.n	801f2f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f2d8:	2300      	movs	r3, #0
 801f2da:	60fb      	str	r3, [r7, #12]
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	695b      	ldr	r3, [r3, #20]
 801f2e2:	60fb      	str	r3, [r7, #12]
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	699b      	ldr	r3, [r3, #24]
 801f2ea:	60fb      	str	r3, [r7, #12]
 801f2ec:	68fb      	ldr	r3, [r7, #12]
}
 801f2ee:	e7ff      	b.n	801f2f0 <I2C_Master_ADDR+0x316>
 801f2f0:	bf00      	nop
 801f2f2:	3744      	adds	r7, #68	; 0x44
 801f2f4:	46bd      	mov	sp, r7
 801f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2fa:	4770      	bx	lr

0801f2fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 801f2fc:	b580      	push	{r7, lr}
 801f2fe:	b084      	sub	sp, #16
 801f300:	af00      	add	r7, sp, #0
 801f302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f30a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f30c:	687b      	ldr	r3, [r7, #4]
 801f30e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f310:	b29b      	uxth	r3, r3
 801f312:	2b00      	cmp	r3, #0
 801f314:	d02b      	beq.n	801f36e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f31a:	781a      	ldrb	r2, [r3, #0]
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f322:	687b      	ldr	r3, [r7, #4]
 801f324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f326:	1c5a      	adds	r2, r3, #1
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f330:	b29b      	uxth	r3, r3
 801f332:	3b01      	subs	r3, #1
 801f334:	b29a      	uxth	r2, r3
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f33e:	b29b      	uxth	r3, r3
 801f340:	2b00      	cmp	r3, #0
 801f342:	d114      	bne.n	801f36e <I2C_SlaveTransmit_TXE+0x72>
 801f344:	7bfb      	ldrb	r3, [r7, #15]
 801f346:	2b29      	cmp	r3, #41	; 0x29
 801f348:	d111      	bne.n	801f36e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	685a      	ldr	r2, [r3, #4]
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f358:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	2221      	movs	r2, #33	; 0x21
 801f35e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	2228      	movs	r2, #40	; 0x28
 801f364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f368:	6878      	ldr	r0, [r7, #4]
 801f36a:	f7ff f9fb 	bl	801e764 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f36e:	bf00      	nop
 801f370:	3710      	adds	r7, #16
 801f372:	46bd      	mov	sp, r7
 801f374:	bd80      	pop	{r7, pc}

0801f376 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801f376:	b480      	push	{r7}
 801f378:	b083      	sub	sp, #12
 801f37a:	af00      	add	r7, sp, #0
 801f37c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f382:	b29b      	uxth	r3, r3
 801f384:	2b00      	cmp	r3, #0
 801f386:	d011      	beq.n	801f3ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f38c:	781a      	ldrb	r2, [r3, #0]
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f398:	1c5a      	adds	r2, r3, #1
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3a2:	b29b      	uxth	r3, r3
 801f3a4:	3b01      	subs	r3, #1
 801f3a6:	b29a      	uxth	r2, r3
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f3ac:	bf00      	nop
 801f3ae:	370c      	adds	r7, #12
 801f3b0:	46bd      	mov	sp, r7
 801f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3b6:	4770      	bx	lr

0801f3b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	b084      	sub	sp, #16
 801f3bc:	af00      	add	r7, sp, #0
 801f3be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f3c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801f3c8:	687b      	ldr	r3, [r7, #4]
 801f3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3cc:	b29b      	uxth	r3, r3
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d02c      	beq.n	801f42c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f3d2:	687b      	ldr	r3, [r7, #4]
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	691a      	ldr	r2, [r3, #16]
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3dc:	b2d2      	uxtb	r2, r2
 801f3de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3e4:	1c5a      	adds	r2, r3, #1
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3ee:	b29b      	uxth	r3, r3
 801f3f0:	3b01      	subs	r3, #1
 801f3f2:	b29a      	uxth	r2, r3
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f3f8:	687b      	ldr	r3, [r7, #4]
 801f3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f3fc:	b29b      	uxth	r3, r3
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d114      	bne.n	801f42c <I2C_SlaveReceive_RXNE+0x74>
 801f402:	7bfb      	ldrb	r3, [r7, #15]
 801f404:	2b2a      	cmp	r3, #42	; 0x2a
 801f406:	d111      	bne.n	801f42c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	685a      	ldr	r2, [r3, #4]
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f416:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	2222      	movs	r2, #34	; 0x22
 801f41c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	2228      	movs	r2, #40	; 0x28
 801f422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f426:	6878      	ldr	r0, [r7, #4]
 801f428:	f7ff f9a6 	bl	801e778 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 801f42c:	bf00      	nop
 801f42e:	3710      	adds	r7, #16
 801f430:	46bd      	mov	sp, r7
 801f432:	bd80      	pop	{r7, pc}

0801f434 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801f434:	b480      	push	{r7}
 801f436:	b083      	sub	sp, #12
 801f438:	af00      	add	r7, sp, #0
 801f43a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f440:	b29b      	uxth	r3, r3
 801f442:	2b00      	cmp	r3, #0
 801f444:	d012      	beq.n	801f46c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	691a      	ldr	r2, [r3, #16]
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f450:	b2d2      	uxtb	r2, r2
 801f452:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f458:	1c5a      	adds	r2, r3, #1
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f462:	b29b      	uxth	r3, r3
 801f464:	3b01      	subs	r3, #1
 801f466:	b29a      	uxth	r2, r3
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801f46c:	bf00      	nop
 801f46e:	370c      	adds	r7, #12
 801f470:	46bd      	mov	sp, r7
 801f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f476:	4770      	bx	lr

0801f478 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801f478:	b580      	push	{r7, lr}
 801f47a:	b084      	sub	sp, #16
 801f47c:	af00      	add	r7, sp, #0
 801f47e:	6078      	str	r0, [r7, #4]
 801f480:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 801f482:	2300      	movs	r3, #0
 801f484:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f48c:	b2db      	uxtb	r3, r3
 801f48e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f492:	2b28      	cmp	r3, #40	; 0x28
 801f494:	d127      	bne.n	801f4e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	685a      	ldr	r2, [r3, #4]
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	681b      	ldr	r3, [r3, #0]
 801f4a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f4a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801f4a6:	683b      	ldr	r3, [r7, #0]
 801f4a8:	089b      	lsrs	r3, r3, #2
 801f4aa:	f003 0301 	and.w	r3, r3, #1
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d101      	bne.n	801f4b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 801f4b2:	2301      	movs	r3, #1
 801f4b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801f4b6:	683b      	ldr	r3, [r7, #0]
 801f4b8:	09db      	lsrs	r3, r3, #7
 801f4ba:	f003 0301 	and.w	r3, r3, #1
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d103      	bne.n	801f4ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	68db      	ldr	r3, [r3, #12]
 801f4c6:	81bb      	strh	r3, [r7, #12]
 801f4c8:	e002      	b.n	801f4d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	699b      	ldr	r3, [r3, #24]
 801f4ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	2200      	movs	r2, #0
 801f4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801f4d8:	89ba      	ldrh	r2, [r7, #12]
 801f4da:	7bfb      	ldrb	r3, [r7, #15]
 801f4dc:	4619      	mov	r1, r3
 801f4de:	6878      	ldr	r0, [r7, #4]
 801f4e0:	f7ff f954 	bl	801e78c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801f4e4:	e00e      	b.n	801f504 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	60bb      	str	r3, [r7, #8]
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	695b      	ldr	r3, [r3, #20]
 801f4f0:	60bb      	str	r3, [r7, #8]
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	681b      	ldr	r3, [r3, #0]
 801f4f6:	699b      	ldr	r3, [r3, #24]
 801f4f8:	60bb      	str	r3, [r7, #8]
 801f4fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	2200      	movs	r2, #0
 801f500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 801f504:	bf00      	nop
 801f506:	3710      	adds	r7, #16
 801f508:	46bd      	mov	sp, r7
 801f50a:	bd80      	pop	{r7, pc}

0801f50c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 801f50c:	b580      	push	{r7, lr}
 801f50e:	b084      	sub	sp, #16
 801f510:	af00      	add	r7, sp, #0
 801f512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f51a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	685a      	ldr	r2, [r3, #4]
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	681b      	ldr	r3, [r3, #0]
 801f526:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f52a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 801f52c:	2300      	movs	r3, #0
 801f52e:	60bb      	str	r3, [r7, #8]
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	695b      	ldr	r3, [r3, #20]
 801f536:	60bb      	str	r3, [r7, #8]
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	681a      	ldr	r2, [r3, #0]
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	681b      	ldr	r3, [r3, #0]
 801f542:	f042 0201 	orr.w	r2, r2, #1
 801f546:	601a      	str	r2, [r3, #0]
 801f548:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	681a      	ldr	r2, [r3, #0]
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f558:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	685b      	ldr	r3, [r3, #4]
 801f560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f568:	d172      	bne.n	801f650 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801f56a:	7bfb      	ldrb	r3, [r7, #15]
 801f56c:	2b22      	cmp	r3, #34	; 0x22
 801f56e:	d002      	beq.n	801f576 <I2C_Slave_STOPF+0x6a>
 801f570:	7bfb      	ldrb	r3, [r7, #15]
 801f572:	2b2a      	cmp	r3, #42	; 0x2a
 801f574:	d135      	bne.n	801f5e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f57a:	681b      	ldr	r3, [r3, #0]
 801f57c:	685b      	ldr	r3, [r3, #4]
 801f57e:	b29a      	uxth	r2, r3
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f588:	b29b      	uxth	r3, r3
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d005      	beq.n	801f59a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f592:	f043 0204 	orr.w	r2, r3, #4
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	685a      	ldr	r2, [r3, #4]
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f5a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5ae:	4618      	mov	r0, r3
 801f5b0:	f7fd fc90 	bl	801ced4 <HAL_DMA_GetState>
 801f5b4:	4603      	mov	r3, r0
 801f5b6:	2b01      	cmp	r3, #1
 801f5b8:	d049      	beq.n	801f64e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f5ba:	687b      	ldr	r3, [r7, #4]
 801f5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5be:	4a69      	ldr	r2, [pc, #420]	; (801f764 <I2C_Slave_STOPF+0x258>)
 801f5c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	f7fd fad8 	bl	801cb7c <HAL_DMA_Abort_IT>
 801f5cc:	4603      	mov	r3, r0
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d03d      	beq.n	801f64e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f5d8:	687a      	ldr	r2, [r7, #4]
 801f5da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f5dc:	4610      	mov	r0, r2
 801f5de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f5e0:	e035      	b.n	801f64e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	685b      	ldr	r3, [r3, #4]
 801f5ea:	b29a      	uxth	r2, r3
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f5f4:	b29b      	uxth	r3, r3
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d005      	beq.n	801f606 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f5fe:	f043 0204 	orr.w	r2, r3, #4
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	685a      	ldr	r2, [r3, #4]
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f614:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801f616:	687b      	ldr	r3, [r7, #4]
 801f618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f61a:	4618      	mov	r0, r3
 801f61c:	f7fd fc5a 	bl	801ced4 <HAL_DMA_GetState>
 801f620:	4603      	mov	r3, r0
 801f622:	2b01      	cmp	r3, #1
 801f624:	d014      	beq.n	801f650 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f62a:	4a4e      	ldr	r2, [pc, #312]	; (801f764 <I2C_Slave_STOPF+0x258>)
 801f62c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f632:	4618      	mov	r0, r3
 801f634:	f7fd faa2 	bl	801cb7c <HAL_DMA_Abort_IT>
 801f638:	4603      	mov	r3, r0
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d008      	beq.n	801f650 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f644:	687a      	ldr	r2, [r7, #4]
 801f646:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f648:	4610      	mov	r0, r2
 801f64a:	4798      	blx	r3
 801f64c:	e000      	b.n	801f650 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801f64e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f654:	b29b      	uxth	r3, r3
 801f656:	2b00      	cmp	r3, #0
 801f658:	d03e      	beq.n	801f6d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	695b      	ldr	r3, [r3, #20]
 801f660:	f003 0304 	and.w	r3, r3, #4
 801f664:	2b04      	cmp	r3, #4
 801f666:	d112      	bne.n	801f68e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	691a      	ldr	r2, [r3, #16]
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f672:	b2d2      	uxtb	r2, r2
 801f674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f676:	687b      	ldr	r3, [r7, #4]
 801f678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f67a:	1c5a      	adds	r2, r3, #1
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f684:	b29b      	uxth	r3, r3
 801f686:	3b01      	subs	r3, #1
 801f688:	b29a      	uxth	r2, r3
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	695b      	ldr	r3, [r3, #20]
 801f694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f698:	2b40      	cmp	r3, #64	; 0x40
 801f69a:	d112      	bne.n	801f6c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	691a      	ldr	r2, [r3, #16]
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f6a6:	b2d2      	uxtb	r2, r2
 801f6a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f6ae:	1c5a      	adds	r2, r3, #1
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f6b8:	b29b      	uxth	r3, r3
 801f6ba:	3b01      	subs	r3, #1
 801f6bc:	b29a      	uxth	r2, r3
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801f6c6:	b29b      	uxth	r3, r3
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d005      	beq.n	801f6d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6d0:	f043 0204 	orr.w	r2, r3, #4
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d003      	beq.n	801f6e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801f6e0:	6878      	ldr	r0, [r7, #4]
 801f6e2:	f000 f8b3 	bl	801f84c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 801f6e6:	e039      	b.n	801f75c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801f6e8:	7bfb      	ldrb	r3, [r7, #15]
 801f6ea:	2b2a      	cmp	r3, #42	; 0x2a
 801f6ec:	d109      	bne.n	801f702 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	2228      	movs	r2, #40	; 0x28
 801f6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f6fc:	6878      	ldr	r0, [r7, #4]
 801f6fe:	f7ff f83b 	bl	801e778 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f708:	b2db      	uxtb	r3, r3
 801f70a:	2b28      	cmp	r3, #40	; 0x28
 801f70c:	d111      	bne.n	801f732 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	4a15      	ldr	r2, [pc, #84]	; (801f768 <I2C_Slave_STOPF+0x25c>)
 801f712:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 801f714:	687b      	ldr	r3, [r7, #4]
 801f716:	2200      	movs	r2, #0
 801f718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	2220      	movs	r2, #32
 801f71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	2200      	movs	r2, #0
 801f726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801f72a:	6878      	ldr	r0, [r7, #4]
 801f72c:	f7ff f83c 	bl	801e7a8 <HAL_I2C_ListenCpltCallback>
}
 801f730:	e014      	b.n	801f75c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f736:	2b22      	cmp	r3, #34	; 0x22
 801f738:	d002      	beq.n	801f740 <I2C_Slave_STOPF+0x234>
 801f73a:	7bfb      	ldrb	r3, [r7, #15]
 801f73c:	2b22      	cmp	r3, #34	; 0x22
 801f73e:	d10d      	bne.n	801f75c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	2200      	movs	r2, #0
 801f744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	2220      	movs	r2, #32
 801f74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	2200      	movs	r2, #0
 801f752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801f756:	6878      	ldr	r0, [r7, #4]
 801f758:	f7ff f80e 	bl	801e778 <HAL_I2C_SlaveRxCpltCallback>
}
 801f75c:	bf00      	nop
 801f75e:	3710      	adds	r7, #16
 801f760:	46bd      	mov	sp, r7
 801f762:	bd80      	pop	{r7, pc}
 801f764:	0801ffd1 	.word	0x0801ffd1
 801f768:	ffff0000 	.word	0xffff0000

0801f76c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 801f76c:	b580      	push	{r7, lr}
 801f76e:	b084      	sub	sp, #16
 801f770:	af00      	add	r7, sp, #0
 801f772:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f77a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f780:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801f782:	68bb      	ldr	r3, [r7, #8]
 801f784:	2b08      	cmp	r3, #8
 801f786:	d002      	beq.n	801f78e <I2C_Slave_AF+0x22>
 801f788:	68bb      	ldr	r3, [r7, #8]
 801f78a:	2b20      	cmp	r3, #32
 801f78c:	d129      	bne.n	801f7e2 <I2C_Slave_AF+0x76>
 801f78e:	7bfb      	ldrb	r3, [r7, #15]
 801f790:	2b28      	cmp	r3, #40	; 0x28
 801f792:	d126      	bne.n	801f7e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	4a2c      	ldr	r2, [pc, #176]	; (801f848 <I2C_Slave_AF+0xdc>)
 801f798:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f79a:	687b      	ldr	r3, [r7, #4]
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	685a      	ldr	r2, [r3, #4]
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f7a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	681b      	ldr	r3, [r3, #0]
 801f7ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f7b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	681a      	ldr	r2, [r3, #0]
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f7c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	2200      	movs	r2, #0
 801f7c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	2220      	movs	r2, #32
 801f7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	2200      	movs	r2, #0
 801f7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801f7da:	6878      	ldr	r0, [r7, #4]
 801f7dc:	f7fe ffe4 	bl	801e7a8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801f7e0:	e02e      	b.n	801f840 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801f7e2:	7bfb      	ldrb	r3, [r7, #15]
 801f7e4:	2b21      	cmp	r3, #33	; 0x21
 801f7e6:	d126      	bne.n	801f836 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	4a17      	ldr	r2, [pc, #92]	; (801f848 <I2C_Slave_AF+0xdc>)
 801f7ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801f7ee:	687b      	ldr	r3, [r7, #4]
 801f7f0:	2221      	movs	r2, #33	; 0x21
 801f7f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	2220      	movs	r2, #32
 801f7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	2200      	movs	r2, #0
 801f800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	685a      	ldr	r2, [r3, #4]
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801f812:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f81c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	681a      	ldr	r2, [r3, #0]
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	681b      	ldr	r3, [r3, #0]
 801f828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f82c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801f82e:	6878      	ldr	r0, [r7, #4]
 801f830:	f7fe ff98 	bl	801e764 <HAL_I2C_SlaveTxCpltCallback>
}
 801f834:	e004      	b.n	801f840 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f83e:	615a      	str	r2, [r3, #20]
}
 801f840:	bf00      	nop
 801f842:	3710      	adds	r7, #16
 801f844:	46bd      	mov	sp, r7
 801f846:	bd80      	pop	{r7, pc}
 801f848:	ffff0000 	.word	0xffff0000

0801f84c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 801f84c:	b580      	push	{r7, lr}
 801f84e:	b084      	sub	sp, #16
 801f850:	af00      	add	r7, sp, #0
 801f852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f85a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 801f85c:	687b      	ldr	r3, [r7, #4]
 801f85e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801f862:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 801f864:	7bbb      	ldrb	r3, [r7, #14]
 801f866:	2b10      	cmp	r3, #16
 801f868:	d002      	beq.n	801f870 <I2C_ITError+0x24>
 801f86a:	7bbb      	ldrb	r3, [r7, #14]
 801f86c:	2b40      	cmp	r3, #64	; 0x40
 801f86e:	d10a      	bne.n	801f886 <I2C_ITError+0x3a>
 801f870:	7bfb      	ldrb	r3, [r7, #15]
 801f872:	2b22      	cmp	r3, #34	; 0x22
 801f874:	d107      	bne.n	801f886 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	681a      	ldr	r2, [r3, #0]
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f884:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801f886:	7bfb      	ldrb	r3, [r7, #15]
 801f888:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801f88c:	2b28      	cmp	r3, #40	; 0x28
 801f88e:	d107      	bne.n	801f8a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	2200      	movs	r2, #0
 801f894:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	2228      	movs	r2, #40	; 0x28
 801f89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801f89e:	e015      	b.n	801f8cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	681b      	ldr	r3, [r3, #0]
 801f8a4:	685b      	ldr	r3, [r3, #4]
 801f8a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f8aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f8ae:	d00a      	beq.n	801f8c6 <I2C_ITError+0x7a>
 801f8b0:	7bfb      	ldrb	r3, [r7, #15]
 801f8b2:	2b60      	cmp	r3, #96	; 0x60
 801f8b4:	d007      	beq.n	801f8c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	2220      	movs	r2, #32
 801f8ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	2200      	movs	r2, #0
 801f8c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	2200      	movs	r2, #0
 801f8ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	681b      	ldr	r3, [r3, #0]
 801f8d0:	685b      	ldr	r3, [r3, #4]
 801f8d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f8d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f8da:	d162      	bne.n	801f9a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	685a      	ldr	r2, [r3, #4]
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f8ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f8f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801f8f4:	b2db      	uxtb	r3, r3
 801f8f6:	2b01      	cmp	r3, #1
 801f8f8:	d020      	beq.n	801f93c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f8fe:	4a6a      	ldr	r2, [pc, #424]	; (801faa8 <I2C_ITError+0x25c>)
 801f900:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f906:	4618      	mov	r0, r3
 801f908:	f7fd f938 	bl	801cb7c <HAL_DMA_Abort_IT>
 801f90c:	4603      	mov	r3, r0
 801f90e:	2b00      	cmp	r3, #0
 801f910:	f000 8089 	beq.w	801fa26 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	681a      	ldr	r2, [r3, #0]
 801f91a:	687b      	ldr	r3, [r7, #4]
 801f91c:	681b      	ldr	r3, [r3, #0]
 801f91e:	f022 0201 	bic.w	r2, r2, #1
 801f922:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	2220      	movs	r2, #32
 801f928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f932:	687a      	ldr	r2, [r7, #4]
 801f934:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801f936:	4610      	mov	r0, r2
 801f938:	4798      	blx	r3
 801f93a:	e074      	b.n	801fa26 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f940:	4a59      	ldr	r2, [pc, #356]	; (801faa8 <I2C_ITError+0x25c>)
 801f942:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f948:	4618      	mov	r0, r3
 801f94a:	f7fd f917 	bl	801cb7c <HAL_DMA_Abort_IT>
 801f94e:	4603      	mov	r3, r0
 801f950:	2b00      	cmp	r3, #0
 801f952:	d068      	beq.n	801fa26 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	695b      	ldr	r3, [r3, #20]
 801f95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f95e:	2b40      	cmp	r3, #64	; 0x40
 801f960:	d10b      	bne.n	801f97a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	691a      	ldr	r2, [r3, #16]
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f96c:	b2d2      	uxtb	r2, r2
 801f96e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801f970:	687b      	ldr	r3, [r7, #4]
 801f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f974:	1c5a      	adds	r2, r3, #1
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801f97a:	687b      	ldr	r3, [r7, #4]
 801f97c:	681b      	ldr	r3, [r3, #0]
 801f97e:	681a      	ldr	r2, [r3, #0]
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	681b      	ldr	r3, [r3, #0]
 801f984:	f022 0201 	bic.w	r2, r2, #1
 801f988:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	2220      	movs	r2, #32
 801f98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f998:	687a      	ldr	r2, [r7, #4]
 801f99a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801f99c:	4610      	mov	r0, r2
 801f99e:	4798      	blx	r3
 801f9a0:	e041      	b.n	801fa26 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f9a8:	b2db      	uxtb	r3, r3
 801f9aa:	2b60      	cmp	r3, #96	; 0x60
 801f9ac:	d125      	bne.n	801f9fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	2220      	movs	r2, #32
 801f9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	2200      	movs	r2, #0
 801f9ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f9bc:	687b      	ldr	r3, [r7, #4]
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	695b      	ldr	r3, [r3, #20]
 801f9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f9c6:	2b40      	cmp	r3, #64	; 0x40
 801f9c8:	d10b      	bne.n	801f9e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	681b      	ldr	r3, [r3, #0]
 801f9ce:	691a      	ldr	r2, [r3, #16]
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9d4:	b2d2      	uxtb	r2, r2
 801f9d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f9dc:	1c5a      	adds	r2, r3, #1
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	681b      	ldr	r3, [r3, #0]
 801f9e6:	681a      	ldr	r2, [r3, #0]
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	f022 0201 	bic.w	r2, r2, #1
 801f9f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801f9f2:	6878      	ldr	r0, [r7, #4]
 801f9f4:	f7fe feec 	bl	801e7d0 <HAL_I2C_AbortCpltCallback>
 801f9f8:	e015      	b.n	801fa26 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	681b      	ldr	r3, [r3, #0]
 801f9fe:	695b      	ldr	r3, [r3, #20]
 801fa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fa04:	2b40      	cmp	r3, #64	; 0x40
 801fa06:	d10b      	bne.n	801fa20 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801fa08:	687b      	ldr	r3, [r7, #4]
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	691a      	ldr	r2, [r3, #16]
 801fa0e:	687b      	ldr	r3, [r7, #4]
 801fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa12:	b2d2      	uxtb	r2, r2
 801fa14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801fa16:	687b      	ldr	r3, [r7, #4]
 801fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa1a:	1c5a      	adds	r2, r3, #1
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801fa20:	6878      	ldr	r0, [r7, #4]
 801fa22:	f7fe fecb 	bl	801e7bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa2a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801fa2c:	68bb      	ldr	r3, [r7, #8]
 801fa2e:	f003 0301 	and.w	r3, r3, #1
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	d10e      	bne.n	801fa54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801fa36:	68bb      	ldr	r3, [r7, #8]
 801fa38:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d109      	bne.n	801fa54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801fa40:	68bb      	ldr	r3, [r7, #8]
 801fa42:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d104      	bne.n	801fa54 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801fa4a:	68bb      	ldr	r3, [r7, #8]
 801fa4c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d007      	beq.n	801fa64 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	685a      	ldr	r2, [r3, #4]
 801fa5a:	687b      	ldr	r3, [r7, #4]
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801fa62:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fa6a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa70:	f003 0304 	and.w	r3, r3, #4
 801fa74:	2b04      	cmp	r3, #4
 801fa76:	d113      	bne.n	801faa0 <I2C_ITError+0x254>
 801fa78:	7bfb      	ldrb	r3, [r7, #15]
 801fa7a:	2b28      	cmp	r3, #40	; 0x28
 801fa7c:	d110      	bne.n	801faa0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	4a0a      	ldr	r2, [pc, #40]	; (801faac <I2C_ITError+0x260>)
 801fa82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801fa84:	687b      	ldr	r3, [r7, #4]
 801fa86:	2200      	movs	r2, #0
 801fa88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	2220      	movs	r2, #32
 801fa8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	2200      	movs	r2, #0
 801fa96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801fa9a:	6878      	ldr	r0, [r7, #4]
 801fa9c:	f7fe fe84 	bl	801e7a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801faa0:	bf00      	nop
 801faa2:	3710      	adds	r7, #16
 801faa4:	46bd      	mov	sp, r7
 801faa6:	bd80      	pop	{r7, pc}
 801faa8:	0801ffd1 	.word	0x0801ffd1
 801faac:	ffff0000 	.word	0xffff0000

0801fab0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fab0:	b580      	push	{r7, lr}
 801fab2:	b088      	sub	sp, #32
 801fab4:	af02      	add	r7, sp, #8
 801fab6:	60f8      	str	r0, [r7, #12]
 801fab8:	4608      	mov	r0, r1
 801faba:	4611      	mov	r1, r2
 801fabc:	461a      	mov	r2, r3
 801fabe:	4603      	mov	r3, r0
 801fac0:	817b      	strh	r3, [r7, #10]
 801fac2:	460b      	mov	r3, r1
 801fac4:	813b      	strh	r3, [r7, #8]
 801fac6:	4613      	mov	r3, r2
 801fac8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801faca:	68fb      	ldr	r3, [r7, #12]
 801facc:	681b      	ldr	r3, [r3, #0]
 801face:	681a      	ldr	r2, [r3, #0]
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fadc:	9300      	str	r3, [sp, #0]
 801fade:	6a3b      	ldr	r3, [r7, #32]
 801fae0:	2200      	movs	r2, #0
 801fae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fae6:	68f8      	ldr	r0, [r7, #12]
 801fae8:	f000 fb1a 	bl	8020120 <I2C_WaitOnFlagUntilTimeout>
 801faec:	4603      	mov	r3, r0
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d00d      	beq.n	801fb0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801faf2:	68fb      	ldr	r3, [r7, #12]
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	681b      	ldr	r3, [r3, #0]
 801faf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fafc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fb00:	d103      	bne.n	801fb0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fb02:	68fb      	ldr	r3, [r7, #12]
 801fb04:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fb08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fb0a:	2303      	movs	r3, #3
 801fb0c:	e05f      	b.n	801fbce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fb0e:	897b      	ldrh	r3, [r7, #10]
 801fb10:	b2db      	uxtb	r3, r3
 801fb12:	461a      	mov	r2, r3
 801fb14:	68fb      	ldr	r3, [r7, #12]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fb1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb20:	6a3a      	ldr	r2, [r7, #32]
 801fb22:	492d      	ldr	r1, [pc, #180]	; (801fbd8 <I2C_RequestMemoryWrite+0x128>)
 801fb24:	68f8      	ldr	r0, [r7, #12]
 801fb26:	f000 fb52 	bl	80201ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fb2a:	4603      	mov	r3, r0
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d001      	beq.n	801fb34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801fb30:	2301      	movs	r3, #1
 801fb32:	e04c      	b.n	801fbce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fb34:	2300      	movs	r3, #0
 801fb36:	617b      	str	r3, [r7, #20]
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	695b      	ldr	r3, [r3, #20]
 801fb3e:	617b      	str	r3, [r7, #20]
 801fb40:	68fb      	ldr	r3, [r7, #12]
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	699b      	ldr	r3, [r3, #24]
 801fb46:	617b      	str	r3, [r7, #20]
 801fb48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fb4c:	6a39      	ldr	r1, [r7, #32]
 801fb4e:	68f8      	ldr	r0, [r7, #12]
 801fb50:	f000 fbbc 	bl	80202cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fb54:	4603      	mov	r3, r0
 801fb56:	2b00      	cmp	r3, #0
 801fb58:	d00d      	beq.n	801fb76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fb5a:	68fb      	ldr	r3, [r7, #12]
 801fb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fb5e:	2b04      	cmp	r3, #4
 801fb60:	d107      	bne.n	801fb72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fb62:	68fb      	ldr	r3, [r7, #12]
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	681a      	ldr	r2, [r3, #0]
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fb70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fb72:	2301      	movs	r3, #1
 801fb74:	e02b      	b.n	801fbce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801fb76:	88fb      	ldrh	r3, [r7, #6]
 801fb78:	2b01      	cmp	r3, #1
 801fb7a:	d105      	bne.n	801fb88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fb7c:	893b      	ldrh	r3, [r7, #8]
 801fb7e:	b2da      	uxtb	r2, r3
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	611a      	str	r2, [r3, #16]
 801fb86:	e021      	b.n	801fbcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fb88:	893b      	ldrh	r3, [r7, #8]
 801fb8a:	0a1b      	lsrs	r3, r3, #8
 801fb8c:	b29b      	uxth	r3, r3
 801fb8e:	b2da      	uxtb	r2, r3
 801fb90:	68fb      	ldr	r3, [r7, #12]
 801fb92:	681b      	ldr	r3, [r3, #0]
 801fb94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fb96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fb98:	6a39      	ldr	r1, [r7, #32]
 801fb9a:	68f8      	ldr	r0, [r7, #12]
 801fb9c:	f000 fb96 	bl	80202cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fba0:	4603      	mov	r3, r0
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d00d      	beq.n	801fbc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fbaa:	2b04      	cmp	r3, #4
 801fbac:	d107      	bne.n	801fbbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	681a      	ldr	r2, [r3, #0]
 801fbb4:	68fb      	ldr	r3, [r7, #12]
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fbbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fbbe:	2301      	movs	r3, #1
 801fbc0:	e005      	b.n	801fbce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fbc2:	893b      	ldrh	r3, [r7, #8]
 801fbc4:	b2da      	uxtb	r2, r3
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801fbcc:	2300      	movs	r3, #0
}
 801fbce:	4618      	mov	r0, r3
 801fbd0:	3718      	adds	r7, #24
 801fbd2:	46bd      	mov	sp, r7
 801fbd4:	bd80      	pop	{r7, pc}
 801fbd6:	bf00      	nop
 801fbd8:	00010002 	.word	0x00010002

0801fbdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801fbdc:	b580      	push	{r7, lr}
 801fbde:	b088      	sub	sp, #32
 801fbe0:	af02      	add	r7, sp, #8
 801fbe2:	60f8      	str	r0, [r7, #12]
 801fbe4:	4608      	mov	r0, r1
 801fbe6:	4611      	mov	r1, r2
 801fbe8:	461a      	mov	r2, r3
 801fbea:	4603      	mov	r3, r0
 801fbec:	817b      	strh	r3, [r7, #10]
 801fbee:	460b      	mov	r3, r1
 801fbf0:	813b      	strh	r3, [r7, #8]
 801fbf2:	4613      	mov	r3, r2
 801fbf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fbf6:	68fb      	ldr	r3, [r7, #12]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	681a      	ldr	r2, [r3, #0]
 801fbfc:	68fb      	ldr	r3, [r7, #12]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fc04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fc06:	68fb      	ldr	r3, [r7, #12]
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	681a      	ldr	r2, [r3, #0]
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fc14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc18:	9300      	str	r3, [sp, #0]
 801fc1a:	6a3b      	ldr	r3, [r7, #32]
 801fc1c:	2200      	movs	r2, #0
 801fc1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fc22:	68f8      	ldr	r0, [r7, #12]
 801fc24:	f000 fa7c 	bl	8020120 <I2C_WaitOnFlagUntilTimeout>
 801fc28:	4603      	mov	r3, r0
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d00d      	beq.n	801fc4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fc2e:	68fb      	ldr	r3, [r7, #12]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fc38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fc3c:	d103      	bne.n	801fc46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fc3e:	68fb      	ldr	r3, [r7, #12]
 801fc40:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fc44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fc46:	2303      	movs	r3, #3
 801fc48:	e0aa      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801fc4a:	897b      	ldrh	r3, [r7, #10]
 801fc4c:	b2db      	uxtb	r3, r3
 801fc4e:	461a      	mov	r2, r3
 801fc50:	68fb      	ldr	r3, [r7, #12]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801fc58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc5c:	6a3a      	ldr	r2, [r7, #32]
 801fc5e:	4952      	ldr	r1, [pc, #328]	; (801fda8 <I2C_RequestMemoryRead+0x1cc>)
 801fc60:	68f8      	ldr	r0, [r7, #12]
 801fc62:	f000 fab4 	bl	80201ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fc66:	4603      	mov	r3, r0
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d001      	beq.n	801fc70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 801fc6c:	2301      	movs	r3, #1
 801fc6e:	e097      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801fc70:	2300      	movs	r3, #0
 801fc72:	617b      	str	r3, [r7, #20]
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	695b      	ldr	r3, [r3, #20]
 801fc7a:	617b      	str	r3, [r7, #20]
 801fc7c:	68fb      	ldr	r3, [r7, #12]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	699b      	ldr	r3, [r3, #24]
 801fc82:	617b      	str	r3, [r7, #20]
 801fc84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc88:	6a39      	ldr	r1, [r7, #32]
 801fc8a:	68f8      	ldr	r0, [r7, #12]
 801fc8c:	f000 fb1e 	bl	80202cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fc90:	4603      	mov	r3, r0
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d00d      	beq.n	801fcb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fc96:	68fb      	ldr	r3, [r7, #12]
 801fc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fc9a:	2b04      	cmp	r3, #4
 801fc9c:	d107      	bne.n	801fcae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fc9e:	68fb      	ldr	r3, [r7, #12]
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	681a      	ldr	r2, [r3, #0]
 801fca4:	68fb      	ldr	r3, [r7, #12]
 801fca6:	681b      	ldr	r3, [r3, #0]
 801fca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fcac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fcae:	2301      	movs	r3, #1
 801fcb0:	e076      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801fcb2:	88fb      	ldrh	r3, [r7, #6]
 801fcb4:	2b01      	cmp	r3, #1
 801fcb6:	d105      	bne.n	801fcc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fcb8:	893b      	ldrh	r3, [r7, #8]
 801fcba:	b2da      	uxtb	r2, r3
 801fcbc:	68fb      	ldr	r3, [r7, #12]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	611a      	str	r2, [r3, #16]
 801fcc2:	e021      	b.n	801fd08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801fcc4:	893b      	ldrh	r3, [r7, #8]
 801fcc6:	0a1b      	lsrs	r3, r3, #8
 801fcc8:	b29b      	uxth	r3, r3
 801fcca:	b2da      	uxtb	r2, r3
 801fccc:	68fb      	ldr	r3, [r7, #12]
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fcd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fcd4:	6a39      	ldr	r1, [r7, #32]
 801fcd6:	68f8      	ldr	r0, [r7, #12]
 801fcd8:	f000 faf8 	bl	80202cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fcdc:	4603      	mov	r3, r0
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d00d      	beq.n	801fcfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fce2:	68fb      	ldr	r3, [r7, #12]
 801fce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fce6:	2b04      	cmp	r3, #4
 801fce8:	d107      	bne.n	801fcfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fcea:	68fb      	ldr	r3, [r7, #12]
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	681a      	ldr	r2, [r3, #0]
 801fcf0:	68fb      	ldr	r3, [r7, #12]
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fcf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	e050      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801fcfe:	893b      	ldrh	r3, [r7, #8]
 801fd00:	b2da      	uxtb	r2, r3
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	681b      	ldr	r3, [r3, #0]
 801fd06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801fd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fd0a:	6a39      	ldr	r1, [r7, #32]
 801fd0c:	68f8      	ldr	r0, [r7, #12]
 801fd0e:	f000 fadd 	bl	80202cc <I2C_WaitOnTXEFlagUntilTimeout>
 801fd12:	4603      	mov	r3, r0
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d00d      	beq.n	801fd34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801fd18:	68fb      	ldr	r3, [r7, #12]
 801fd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd1c:	2b04      	cmp	r3, #4
 801fd1e:	d107      	bne.n	801fd30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	681a      	ldr	r2, [r3, #0]
 801fd26:	68fb      	ldr	r3, [r7, #12]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fd2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801fd30:	2301      	movs	r3, #1
 801fd32:	e035      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	681b      	ldr	r3, [r3, #0]
 801fd38:	681a      	ldr	r2, [r3, #0]
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	681b      	ldr	r3, [r3, #0]
 801fd3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801fd42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801fd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd46:	9300      	str	r3, [sp, #0]
 801fd48:	6a3b      	ldr	r3, [r7, #32]
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801fd50:	68f8      	ldr	r0, [r7, #12]
 801fd52:	f000 f9e5 	bl	8020120 <I2C_WaitOnFlagUntilTimeout>
 801fd56:	4603      	mov	r3, r0
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d00d      	beq.n	801fd78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801fd5c:	68fb      	ldr	r3, [r7, #12]
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fd6a:	d103      	bne.n	801fd74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801fd6c:	68fb      	ldr	r3, [r7, #12]
 801fd6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801fd72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801fd74:	2303      	movs	r3, #3
 801fd76:	e013      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801fd78:	897b      	ldrh	r3, [r7, #10]
 801fd7a:	b2db      	uxtb	r3, r3
 801fd7c:	f043 0301 	orr.w	r3, r3, #1
 801fd80:	b2da      	uxtb	r2, r3
 801fd82:	68fb      	ldr	r3, [r7, #12]
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801fd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd8a:	6a3a      	ldr	r2, [r7, #32]
 801fd8c:	4906      	ldr	r1, [pc, #24]	; (801fda8 <I2C_RequestMemoryRead+0x1cc>)
 801fd8e:	68f8      	ldr	r0, [r7, #12]
 801fd90:	f000 fa1d 	bl	80201ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801fd94:	4603      	mov	r3, r0
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d001      	beq.n	801fd9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801fd9a:	2301      	movs	r3, #1
 801fd9c:	e000      	b.n	801fda0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 801fd9e:	2300      	movs	r3, #0
}
 801fda0:	4618      	mov	r0, r3
 801fda2:	3718      	adds	r7, #24
 801fda4:	46bd      	mov	sp, r7
 801fda6:	bd80      	pop	{r7, pc}
 801fda8:	00010002 	.word	0x00010002

0801fdac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801fdac:	b580      	push	{r7, lr}
 801fdae:	b086      	sub	sp, #24
 801fdb0:	af00      	add	r7, sp, #0
 801fdb2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdb8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801fdba:	697b      	ldr	r3, [r7, #20]
 801fdbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fdc0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801fdc2:	697b      	ldr	r3, [r7, #20]
 801fdc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fdc8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801fdca:	697b      	ldr	r3, [r7, #20]
 801fdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fdd0:	697b      	ldr	r3, [r7, #20]
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	685a      	ldr	r2, [r3, #4]
 801fdd6:	697b      	ldr	r3, [r7, #20]
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801fdde:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801fde0:	697b      	ldr	r3, [r7, #20]
 801fde2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d003      	beq.n	801fdf0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fdec:	2200      	movs	r2, #0
 801fdee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801fdf0:	697b      	ldr	r3, [r7, #20]
 801fdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdf4:	2b00      	cmp	r3, #0
 801fdf6:	d003      	beq.n	801fe00 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801fdf8:	697b      	ldr	r3, [r7, #20]
 801fdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fdfc:	2200      	movs	r2, #0
 801fdfe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 801fe00:	7cfb      	ldrb	r3, [r7, #19]
 801fe02:	f003 0321 	and.w	r3, r3, #33	; 0x21
 801fe06:	2b21      	cmp	r3, #33	; 0x21
 801fe08:	d007      	beq.n	801fe1a <I2C_DMAXferCplt+0x6e>
 801fe0a:	7cfb      	ldrb	r3, [r7, #19]
 801fe0c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 801fe10:	2b22      	cmp	r3, #34	; 0x22
 801fe12:	d131      	bne.n	801fe78 <I2C_DMAXferCplt+0xcc>
 801fe14:	7cbb      	ldrb	r3, [r7, #18]
 801fe16:	2b20      	cmp	r3, #32
 801fe18:	d12e      	bne.n	801fe78 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801fe1a:	697b      	ldr	r3, [r7, #20]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	685a      	ldr	r2, [r3, #4]
 801fe20:	697b      	ldr	r3, [r7, #20]
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801fe28:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801fe2a:	697b      	ldr	r3, [r7, #20]
 801fe2c:	2200      	movs	r2, #0
 801fe2e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801fe30:	7cfb      	ldrb	r3, [r7, #19]
 801fe32:	2b29      	cmp	r3, #41	; 0x29
 801fe34:	d10a      	bne.n	801fe4c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801fe36:	697b      	ldr	r3, [r7, #20]
 801fe38:	2221      	movs	r2, #33	; 0x21
 801fe3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	2228      	movs	r2, #40	; 0x28
 801fe40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801fe44:	6978      	ldr	r0, [r7, #20]
 801fe46:	f7fe fc8d 	bl	801e764 <HAL_I2C_SlaveTxCpltCallback>
 801fe4a:	e00c      	b.n	801fe66 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801fe4c:	7cfb      	ldrb	r3, [r7, #19]
 801fe4e:	2b2a      	cmp	r3, #42	; 0x2a
 801fe50:	d109      	bne.n	801fe66 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801fe52:	697b      	ldr	r3, [r7, #20]
 801fe54:	2222      	movs	r2, #34	; 0x22
 801fe56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801fe58:	697b      	ldr	r3, [r7, #20]
 801fe5a:	2228      	movs	r2, #40	; 0x28
 801fe5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801fe60:	6978      	ldr	r0, [r7, #20]
 801fe62:	f7fe fc89 	bl	801e778 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fe66:	697b      	ldr	r3, [r7, #20]
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	685a      	ldr	r2, [r3, #4]
 801fe6c:	697b      	ldr	r3, [r7, #20]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 801fe74:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801fe76:	e06a      	b.n	801ff4e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801fe78:	697b      	ldr	r3, [r7, #20]
 801fe7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801fe7e:	b2db      	uxtb	r3, r3
 801fe80:	2b00      	cmp	r3, #0
 801fe82:	d064      	beq.n	801ff4e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 801fe84:	697b      	ldr	r3, [r7, #20]
 801fe86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801fe88:	b29b      	uxth	r3, r3
 801fe8a:	2b01      	cmp	r3, #1
 801fe8c:	d107      	bne.n	801fe9e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801fe8e:	697b      	ldr	r3, [r7, #20]
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	681a      	ldr	r2, [r3, #0]
 801fe94:	697b      	ldr	r3, [r7, #20]
 801fe96:	681b      	ldr	r3, [r3, #0]
 801fe98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801fe9c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801fe9e:	697b      	ldr	r3, [r7, #20]
 801fea0:	681b      	ldr	r3, [r3, #0]
 801fea2:	685a      	ldr	r2, [r3, #4]
 801fea4:	697b      	ldr	r3, [r7, #20]
 801fea6:	681b      	ldr	r3, [r3, #0]
 801fea8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801feac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801feb4:	d009      	beq.n	801feca <I2C_DMAXferCplt+0x11e>
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	2b08      	cmp	r3, #8
 801feba:	d006      	beq.n	801feca <I2C_DMAXferCplt+0x11e>
 801febc:	68fb      	ldr	r3, [r7, #12]
 801febe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801fec2:	d002      	beq.n	801feca <I2C_DMAXferCplt+0x11e>
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	2b20      	cmp	r3, #32
 801fec8:	d107      	bne.n	801feda <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801feca:	697b      	ldr	r3, [r7, #20]
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	681a      	ldr	r2, [r3, #0]
 801fed0:	697b      	ldr	r3, [r7, #20]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fed8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801feda:	697b      	ldr	r3, [r7, #20]
 801fedc:	681b      	ldr	r3, [r3, #0]
 801fede:	685a      	ldr	r2, [r3, #4]
 801fee0:	697b      	ldr	r3, [r7, #20]
 801fee2:	681b      	ldr	r3, [r3, #0]
 801fee4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801fee8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801feea:	697b      	ldr	r3, [r7, #20]
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	685a      	ldr	r2, [r3, #4]
 801fef0:	697b      	ldr	r3, [r7, #20]
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801fef8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	2200      	movs	r2, #0
 801fefe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801ff00:	697b      	ldr	r3, [r7, #20]
 801ff02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ff04:	2b00      	cmp	r3, #0
 801ff06:	d003      	beq.n	801ff10 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 801ff08:	6978      	ldr	r0, [r7, #20]
 801ff0a:	f7fe fc57 	bl	801e7bc <HAL_I2C_ErrorCallback>
}
 801ff0e:	e01e      	b.n	801ff4e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 801ff10:	697b      	ldr	r3, [r7, #20]
 801ff12:	2220      	movs	r2, #32
 801ff14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801ff18:	697b      	ldr	r3, [r7, #20]
 801ff1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ff1e:	b2db      	uxtb	r3, r3
 801ff20:	2b40      	cmp	r3, #64	; 0x40
 801ff22:	d10a      	bne.n	801ff3a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ff24:	697b      	ldr	r3, [r7, #20]
 801ff26:	2200      	movs	r2, #0
 801ff28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801ff2c:	697b      	ldr	r3, [r7, #20]
 801ff2e:	2200      	movs	r2, #0
 801ff30:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801ff32:	6978      	ldr	r0, [r7, #20]
 801ff34:	f7e1 fd7c 	bl	8001a30 <HAL_I2C_MemRxCpltCallback>
}
 801ff38:	e009      	b.n	801ff4e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801ff3a:	697b      	ldr	r3, [r7, #20]
 801ff3c:	2200      	movs	r2, #0
 801ff3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801ff42:	697b      	ldr	r3, [r7, #20]
 801ff44:	2212      	movs	r2, #18
 801ff46:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801ff48:	6978      	ldr	r0, [r7, #20]
 801ff4a:	f7e1 fd87 	bl	8001a5c <HAL_I2C_MasterRxCpltCallback>
}
 801ff4e:	bf00      	nop
 801ff50:	3718      	adds	r7, #24
 801ff52:	46bd      	mov	sp, r7
 801ff54:	bd80      	pop	{r7, pc}

0801ff56 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801ff56:	b580      	push	{r7, lr}
 801ff58:	b084      	sub	sp, #16
 801ff5a:	af00      	add	r7, sp, #0
 801ff5c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff62:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801ff64:	68fb      	ldr	r3, [r7, #12]
 801ff66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d003      	beq.n	801ff74 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801ff6c:	68fb      	ldr	r3, [r7, #12]
 801ff6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ff70:	2200      	movs	r2, #0
 801ff72:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff78:	2b00      	cmp	r3, #0
 801ff7a:	d003      	beq.n	801ff84 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801ff7c:	68fb      	ldr	r3, [r7, #12]
 801ff7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ff80:	2200      	movs	r2, #0
 801ff82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801ff84:	6878      	ldr	r0, [r7, #4]
 801ff86:	f7fc ffb3 	bl	801cef0 <HAL_DMA_GetError>
 801ff8a:	4603      	mov	r3, r0
 801ff8c:	2b02      	cmp	r3, #2
 801ff8e:	d01b      	beq.n	801ffc8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801ff90:	68fb      	ldr	r3, [r7, #12]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	681a      	ldr	r2, [r3, #0]
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ff9e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801ffa0:	68fb      	ldr	r3, [r7, #12]
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801ffa6:	68fb      	ldr	r3, [r7, #12]
 801ffa8:	2220      	movs	r2, #32
 801ffaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801ffae:	68fb      	ldr	r3, [r7, #12]
 801ffb0:	2200      	movs	r2, #0
 801ffb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801ffb6:	68fb      	ldr	r3, [r7, #12]
 801ffb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ffba:	f043 0210 	orr.w	r2, r3, #16
 801ffbe:	68fb      	ldr	r3, [r7, #12]
 801ffc0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801ffc2:	68f8      	ldr	r0, [r7, #12]
 801ffc4:	f7fe fbfa 	bl	801e7bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801ffc8:	bf00      	nop
 801ffca:	3710      	adds	r7, #16
 801ffcc:	46bd      	mov	sp, r7
 801ffce:	bd80      	pop	{r7, pc}

0801ffd0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801ffd0:	b580      	push	{r7, lr}
 801ffd2:	b086      	sub	sp, #24
 801ffd4:	af00      	add	r7, sp, #0
 801ffd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801ffd8:	2300      	movs	r3, #0
 801ffda:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801ffdc:	687b      	ldr	r3, [r7, #4]
 801ffde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ffe0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801ffe2:	697b      	ldr	r3, [r7, #20]
 801ffe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ffe8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801ffea:	4b4b      	ldr	r3, [pc, #300]	; (8020118 <I2C_DMAAbort+0x148>)
 801ffec:	681b      	ldr	r3, [r3, #0]
 801ffee:	08db      	lsrs	r3, r3, #3
 801fff0:	4a4a      	ldr	r2, [pc, #296]	; (802011c <I2C_DMAAbort+0x14c>)
 801fff2:	fba2 2303 	umull	r2, r3, r2, r3
 801fff6:	0a1a      	lsrs	r2, r3, #8
 801fff8:	4613      	mov	r3, r2
 801fffa:	009b      	lsls	r3, r3, #2
 801fffc:	4413      	add	r3, r2
 801fffe:	00da      	lsls	r2, r3, #3
 8020000:	1ad3      	subs	r3, r2, r3
 8020002:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8020004:	68fb      	ldr	r3, [r7, #12]
 8020006:	2b00      	cmp	r3, #0
 8020008:	d106      	bne.n	8020018 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 802000a:	697b      	ldr	r3, [r7, #20]
 802000c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802000e:	f043 0220 	orr.w	r2, r3, #32
 8020012:	697b      	ldr	r3, [r7, #20]
 8020014:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8020016:	e00a      	b.n	802002e <I2C_DMAAbort+0x5e>
    }
    count--;
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	3b01      	subs	r3, #1
 802001c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 802001e:	697b      	ldr	r3, [r7, #20]
 8020020:	681b      	ldr	r3, [r3, #0]
 8020022:	681b      	ldr	r3, [r3, #0]
 8020024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802002c:	d0ea      	beq.n	8020004 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 802002e:	697b      	ldr	r3, [r7, #20]
 8020030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020032:	2b00      	cmp	r3, #0
 8020034:	d003      	beq.n	802003e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8020036:	697b      	ldr	r3, [r7, #20]
 8020038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802003a:	2200      	movs	r2, #0
 802003c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 802003e:	697b      	ldr	r3, [r7, #20]
 8020040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020042:	2b00      	cmp	r3, #0
 8020044:	d003      	beq.n	802004e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8020046:	697b      	ldr	r3, [r7, #20]
 8020048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802004a:	2200      	movs	r2, #0
 802004c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802004e:	697b      	ldr	r3, [r7, #20]
 8020050:	681b      	ldr	r3, [r3, #0]
 8020052:	681a      	ldr	r2, [r3, #0]
 8020054:	697b      	ldr	r3, [r7, #20]
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802005c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 802005e:	697b      	ldr	r3, [r7, #20]
 8020060:	2200      	movs	r2, #0
 8020062:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8020064:	697b      	ldr	r3, [r7, #20]
 8020066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020068:	2b00      	cmp	r3, #0
 802006a:	d003      	beq.n	8020074 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802006c:	697b      	ldr	r3, [r7, #20]
 802006e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020070:	2200      	movs	r2, #0
 8020072:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8020074:	697b      	ldr	r3, [r7, #20]
 8020076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020078:	2b00      	cmp	r3, #0
 802007a:	d003      	beq.n	8020084 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802007c:	697b      	ldr	r3, [r7, #20]
 802007e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020080:	2200      	movs	r2, #0
 8020082:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8020084:	697b      	ldr	r3, [r7, #20]
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	681a      	ldr	r2, [r3, #0]
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	681b      	ldr	r3, [r3, #0]
 802008e:	f022 0201 	bic.w	r2, r2, #1
 8020092:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802009a:	b2db      	uxtb	r3, r3
 802009c:	2b60      	cmp	r3, #96	; 0x60
 802009e:	d10e      	bne.n	80200be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80200a0:	697b      	ldr	r3, [r7, #20]
 80200a2:	2220      	movs	r2, #32
 80200a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80200a8:	697b      	ldr	r3, [r7, #20]
 80200aa:	2200      	movs	r2, #0
 80200ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	2200      	movs	r2, #0
 80200b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80200b6:	6978      	ldr	r0, [r7, #20]
 80200b8:	f7fe fb8a 	bl	801e7d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80200bc:	e027      	b.n	802010e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80200be:	7cfb      	ldrb	r3, [r7, #19]
 80200c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80200c4:	2b28      	cmp	r3, #40	; 0x28
 80200c6:	d117      	bne.n	80200f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80200c8:	697b      	ldr	r3, [r7, #20]
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	681a      	ldr	r2, [r3, #0]
 80200ce:	697b      	ldr	r3, [r7, #20]
 80200d0:	681b      	ldr	r3, [r3, #0]
 80200d2:	f042 0201 	orr.w	r2, r2, #1
 80200d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80200d8:	697b      	ldr	r3, [r7, #20]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	681a      	ldr	r2, [r3, #0]
 80200de:	697b      	ldr	r3, [r7, #20]
 80200e0:	681b      	ldr	r3, [r3, #0]
 80200e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80200e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80200e8:	697b      	ldr	r3, [r7, #20]
 80200ea:	2200      	movs	r2, #0
 80200ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80200ee:	697b      	ldr	r3, [r7, #20]
 80200f0:	2228      	movs	r2, #40	; 0x28
 80200f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80200f6:	e007      	b.n	8020108 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80200f8:	697b      	ldr	r3, [r7, #20]
 80200fa:	2220      	movs	r2, #32
 80200fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8020100:	697b      	ldr	r3, [r7, #20]
 8020102:	2200      	movs	r2, #0
 8020104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8020108:	6978      	ldr	r0, [r7, #20]
 802010a:	f7fe fb57 	bl	801e7bc <HAL_I2C_ErrorCallback>
}
 802010e:	bf00      	nop
 8020110:	3718      	adds	r7, #24
 8020112:	46bd      	mov	sp, r7
 8020114:	bd80      	pop	{r7, pc}
 8020116:	bf00      	nop
 8020118:	20000020 	.word	0x20000020
 802011c:	14f8b589 	.word	0x14f8b589

08020120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8020120:	b580      	push	{r7, lr}
 8020122:	b084      	sub	sp, #16
 8020124:	af00      	add	r7, sp, #0
 8020126:	60f8      	str	r0, [r7, #12]
 8020128:	60b9      	str	r1, [r7, #8]
 802012a:	603b      	str	r3, [r7, #0]
 802012c:	4613      	mov	r3, r2
 802012e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8020130:	e025      	b.n	802017e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020132:	683b      	ldr	r3, [r7, #0]
 8020134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020138:	d021      	beq.n	802017e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802013a:	f7fb fe57 	bl	801bdec <HAL_GetTick>
 802013e:	4602      	mov	r2, r0
 8020140:	69bb      	ldr	r3, [r7, #24]
 8020142:	1ad3      	subs	r3, r2, r3
 8020144:	683a      	ldr	r2, [r7, #0]
 8020146:	429a      	cmp	r2, r3
 8020148:	d302      	bcc.n	8020150 <I2C_WaitOnFlagUntilTimeout+0x30>
 802014a:	683b      	ldr	r3, [r7, #0]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d116      	bne.n	802017e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8020150:	68fb      	ldr	r3, [r7, #12]
 8020152:	2200      	movs	r2, #0
 8020154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8020156:	68fb      	ldr	r3, [r7, #12]
 8020158:	2220      	movs	r2, #32
 802015a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802015e:	68fb      	ldr	r3, [r7, #12]
 8020160:	2200      	movs	r2, #0
 8020162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8020166:	68fb      	ldr	r3, [r7, #12]
 8020168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802016a:	f043 0220 	orr.w	r2, r3, #32
 802016e:	68fb      	ldr	r3, [r7, #12]
 8020170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020172:	68fb      	ldr	r3, [r7, #12]
 8020174:	2200      	movs	r2, #0
 8020176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802017a:	2301      	movs	r3, #1
 802017c:	e023      	b.n	80201c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802017e:	68bb      	ldr	r3, [r7, #8]
 8020180:	0c1b      	lsrs	r3, r3, #16
 8020182:	b2db      	uxtb	r3, r3
 8020184:	2b01      	cmp	r3, #1
 8020186:	d10d      	bne.n	80201a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	695b      	ldr	r3, [r3, #20]
 802018e:	43da      	mvns	r2, r3
 8020190:	68bb      	ldr	r3, [r7, #8]
 8020192:	4013      	ands	r3, r2
 8020194:	b29b      	uxth	r3, r3
 8020196:	2b00      	cmp	r3, #0
 8020198:	bf0c      	ite	eq
 802019a:	2301      	moveq	r3, #1
 802019c:	2300      	movne	r3, #0
 802019e:	b2db      	uxtb	r3, r3
 80201a0:	461a      	mov	r2, r3
 80201a2:	e00c      	b.n	80201be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80201a4:	68fb      	ldr	r3, [r7, #12]
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	699b      	ldr	r3, [r3, #24]
 80201aa:	43da      	mvns	r2, r3
 80201ac:	68bb      	ldr	r3, [r7, #8]
 80201ae:	4013      	ands	r3, r2
 80201b0:	b29b      	uxth	r3, r3
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	bf0c      	ite	eq
 80201b6:	2301      	moveq	r3, #1
 80201b8:	2300      	movne	r3, #0
 80201ba:	b2db      	uxtb	r3, r3
 80201bc:	461a      	mov	r2, r3
 80201be:	79fb      	ldrb	r3, [r7, #7]
 80201c0:	429a      	cmp	r2, r3
 80201c2:	d0b6      	beq.n	8020132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80201c4:	2300      	movs	r3, #0
}
 80201c6:	4618      	mov	r0, r3
 80201c8:	3710      	adds	r7, #16
 80201ca:	46bd      	mov	sp, r7
 80201cc:	bd80      	pop	{r7, pc}

080201ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80201ce:	b580      	push	{r7, lr}
 80201d0:	b084      	sub	sp, #16
 80201d2:	af00      	add	r7, sp, #0
 80201d4:	60f8      	str	r0, [r7, #12]
 80201d6:	60b9      	str	r1, [r7, #8]
 80201d8:	607a      	str	r2, [r7, #4]
 80201da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80201dc:	e051      	b.n	8020282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	695b      	ldr	r3, [r3, #20]
 80201e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80201e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80201ec:	d123      	bne.n	8020236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80201ee:	68fb      	ldr	r3, [r7, #12]
 80201f0:	681b      	ldr	r3, [r3, #0]
 80201f2:	681a      	ldr	r2, [r3, #0]
 80201f4:	68fb      	ldr	r3, [r7, #12]
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80201fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8020206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8020208:	68fb      	ldr	r3, [r7, #12]
 802020a:	2200      	movs	r2, #0
 802020c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802020e:	68fb      	ldr	r3, [r7, #12]
 8020210:	2220      	movs	r2, #32
 8020212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020216:	68fb      	ldr	r3, [r7, #12]
 8020218:	2200      	movs	r2, #0
 802021a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802021e:	68fb      	ldr	r3, [r7, #12]
 8020220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020222:	f043 0204 	orr.w	r2, r3, #4
 8020226:	68fb      	ldr	r3, [r7, #12]
 8020228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802022a:	68fb      	ldr	r3, [r7, #12]
 802022c:	2200      	movs	r2, #0
 802022e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8020232:	2301      	movs	r3, #1
 8020234:	e046      	b.n	80202c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	f1b3 3fff 	cmp.w	r3, #4294967295
 802023c:	d021      	beq.n	8020282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802023e:	f7fb fdd5 	bl	801bdec <HAL_GetTick>
 8020242:	4602      	mov	r2, r0
 8020244:	683b      	ldr	r3, [r7, #0]
 8020246:	1ad3      	subs	r3, r2, r3
 8020248:	687a      	ldr	r2, [r7, #4]
 802024a:	429a      	cmp	r2, r3
 802024c:	d302      	bcc.n	8020254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	2b00      	cmp	r3, #0
 8020252:	d116      	bne.n	8020282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8020254:	68fb      	ldr	r3, [r7, #12]
 8020256:	2200      	movs	r2, #0
 8020258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802025a:	68fb      	ldr	r3, [r7, #12]
 802025c:	2220      	movs	r2, #32
 802025e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020262:	68fb      	ldr	r3, [r7, #12]
 8020264:	2200      	movs	r2, #0
 8020266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802026e:	f043 0220 	orr.w	r2, r3, #32
 8020272:	68fb      	ldr	r3, [r7, #12]
 8020274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	2200      	movs	r2, #0
 802027a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802027e:	2301      	movs	r3, #1
 8020280:	e020      	b.n	80202c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8020282:	68bb      	ldr	r3, [r7, #8]
 8020284:	0c1b      	lsrs	r3, r3, #16
 8020286:	b2db      	uxtb	r3, r3
 8020288:	2b01      	cmp	r3, #1
 802028a:	d10c      	bne.n	80202a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 802028c:	68fb      	ldr	r3, [r7, #12]
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	695b      	ldr	r3, [r3, #20]
 8020292:	43da      	mvns	r2, r3
 8020294:	68bb      	ldr	r3, [r7, #8]
 8020296:	4013      	ands	r3, r2
 8020298:	b29b      	uxth	r3, r3
 802029a:	2b00      	cmp	r3, #0
 802029c:	bf14      	ite	ne
 802029e:	2301      	movne	r3, #1
 80202a0:	2300      	moveq	r3, #0
 80202a2:	b2db      	uxtb	r3, r3
 80202a4:	e00b      	b.n	80202be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80202a6:	68fb      	ldr	r3, [r7, #12]
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	699b      	ldr	r3, [r3, #24]
 80202ac:	43da      	mvns	r2, r3
 80202ae:	68bb      	ldr	r3, [r7, #8]
 80202b0:	4013      	ands	r3, r2
 80202b2:	b29b      	uxth	r3, r3
 80202b4:	2b00      	cmp	r3, #0
 80202b6:	bf14      	ite	ne
 80202b8:	2301      	movne	r3, #1
 80202ba:	2300      	moveq	r3, #0
 80202bc:	b2db      	uxtb	r3, r3
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d18d      	bne.n	80201de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80202c2:	2300      	movs	r3, #0
}
 80202c4:	4618      	mov	r0, r3
 80202c6:	3710      	adds	r7, #16
 80202c8:	46bd      	mov	sp, r7
 80202ca:	bd80      	pop	{r7, pc}

080202cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80202cc:	b580      	push	{r7, lr}
 80202ce:	b084      	sub	sp, #16
 80202d0:	af00      	add	r7, sp, #0
 80202d2:	60f8      	str	r0, [r7, #12]
 80202d4:	60b9      	str	r1, [r7, #8]
 80202d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80202d8:	e02d      	b.n	8020336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80202da:	68f8      	ldr	r0, [r7, #12]
 80202dc:	f000 f86a 	bl	80203b4 <I2C_IsAcknowledgeFailed>
 80202e0:	4603      	mov	r3, r0
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	d001      	beq.n	80202ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80202e6:	2301      	movs	r3, #1
 80202e8:	e02d      	b.n	8020346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80202ea:	68bb      	ldr	r3, [r7, #8]
 80202ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80202f0:	d021      	beq.n	8020336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80202f2:	f7fb fd7b 	bl	801bdec <HAL_GetTick>
 80202f6:	4602      	mov	r2, r0
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	1ad3      	subs	r3, r2, r3
 80202fc:	68ba      	ldr	r2, [r7, #8]
 80202fe:	429a      	cmp	r2, r3
 8020300:	d302      	bcc.n	8020308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8020302:	68bb      	ldr	r3, [r7, #8]
 8020304:	2b00      	cmp	r3, #0
 8020306:	d116      	bne.n	8020336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8020308:	68fb      	ldr	r3, [r7, #12]
 802030a:	2200      	movs	r2, #0
 802030c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802030e:	68fb      	ldr	r3, [r7, #12]
 8020310:	2220      	movs	r2, #32
 8020312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	2200      	movs	r2, #0
 802031a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802031e:	68fb      	ldr	r3, [r7, #12]
 8020320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020322:	f043 0220 	orr.w	r2, r3, #32
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802032a:	68fb      	ldr	r3, [r7, #12]
 802032c:	2200      	movs	r2, #0
 802032e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8020332:	2301      	movs	r3, #1
 8020334:	e007      	b.n	8020346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8020336:	68fb      	ldr	r3, [r7, #12]
 8020338:	681b      	ldr	r3, [r3, #0]
 802033a:	695b      	ldr	r3, [r3, #20]
 802033c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020340:	2b80      	cmp	r3, #128	; 0x80
 8020342:	d1ca      	bne.n	80202da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8020344:	2300      	movs	r3, #0
}
 8020346:	4618      	mov	r0, r3
 8020348:	3710      	adds	r7, #16
 802034a:	46bd      	mov	sp, r7
 802034c:	bd80      	pop	{r7, pc}
	...

08020350 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8020350:	b480      	push	{r7}
 8020352:	b085      	sub	sp, #20
 8020354:	af00      	add	r7, sp, #0
 8020356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8020358:	2300      	movs	r3, #0
 802035a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 802035c:	4b13      	ldr	r3, [pc, #76]	; (80203ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	08db      	lsrs	r3, r3, #3
 8020362:	4a13      	ldr	r2, [pc, #76]	; (80203b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8020364:	fba2 2303 	umull	r2, r3, r2, r3
 8020368:	0a1a      	lsrs	r2, r3, #8
 802036a:	4613      	mov	r3, r2
 802036c:	009b      	lsls	r3, r3, #2
 802036e:	4413      	add	r3, r2
 8020370:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8020372:	68fb      	ldr	r3, [r7, #12]
 8020374:	3b01      	subs	r3, #1
 8020376:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8020378:	68fb      	ldr	r3, [r7, #12]
 802037a:	2b00      	cmp	r3, #0
 802037c:	d107      	bne.n	802038e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020382:	f043 0220 	orr.w	r2, r3, #32
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802038a:	2301      	movs	r3, #1
 802038c:	e008      	b.n	80203a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802039c:	d0e9      	beq.n	8020372 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 802039e:	2300      	movs	r3, #0
}
 80203a0:	4618      	mov	r0, r3
 80203a2:	3714      	adds	r7, #20
 80203a4:	46bd      	mov	sp, r7
 80203a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203aa:	4770      	bx	lr
 80203ac:	20000020 	.word	0x20000020
 80203b0:	14f8b589 	.word	0x14f8b589

080203b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80203b4:	b480      	push	{r7}
 80203b6:	b083      	sub	sp, #12
 80203b8:	af00      	add	r7, sp, #0
 80203ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	695b      	ldr	r3, [r3, #20]
 80203c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80203c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80203ca:	d11b      	bne.n	8020404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80203d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	2200      	movs	r2, #0
 80203da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	2220      	movs	r2, #32
 80203e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	2200      	movs	r2, #0
 80203e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80203f0:	f043 0204 	orr.w	r2, r3, #4
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	2200      	movs	r2, #0
 80203fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8020400:	2301      	movs	r3, #1
 8020402:	e000      	b.n	8020406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8020404:	2300      	movs	r3, #0
}
 8020406:	4618      	mov	r0, r3
 8020408:	370c      	adds	r7, #12
 802040a:	46bd      	mov	sp, r7
 802040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020410:	4770      	bx	lr

08020412 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8020412:	b480      	push	{r7}
 8020414:	b083      	sub	sp, #12
 8020416:	af00      	add	r7, sp, #0
 8020418:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802041e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8020422:	d103      	bne.n	802042c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	2201      	movs	r2, #1
 8020428:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 802042a:	e007      	b.n	802043c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020430:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8020434:	d102      	bne.n	802043c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	2208      	movs	r2, #8
 802043a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 802043c:	bf00      	nop
 802043e:	370c      	adds	r7, #12
 8020440:	46bd      	mov	sp, r7
 8020442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020446:	4770      	bx	lr

08020448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020448:	b580      	push	{r7, lr}
 802044a:	b086      	sub	sp, #24
 802044c:	af00      	add	r7, sp, #0
 802044e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020450:	687b      	ldr	r3, [r7, #4]
 8020452:	2b00      	cmp	r3, #0
 8020454:	d101      	bne.n	802045a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8020456:	2301      	movs	r3, #1
 8020458:	e267      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	681b      	ldr	r3, [r3, #0]
 802045e:	f003 0301 	and.w	r3, r3, #1
 8020462:	2b00      	cmp	r3, #0
 8020464:	d075      	beq.n	8020552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8020466:	4b88      	ldr	r3, [pc, #544]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020468:	689b      	ldr	r3, [r3, #8]
 802046a:	f003 030c 	and.w	r3, r3, #12
 802046e:	2b04      	cmp	r3, #4
 8020470:	d00c      	beq.n	802048c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8020472:	4b85      	ldr	r3, [pc, #532]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020474:	689b      	ldr	r3, [r3, #8]
 8020476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802047a:	2b08      	cmp	r3, #8
 802047c:	d112      	bne.n	80204a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802047e:	4b82      	ldr	r3, [pc, #520]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020480:	685b      	ldr	r3, [r3, #4]
 8020482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802048a:	d10b      	bne.n	80204a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802048c:	4b7e      	ldr	r3, [pc, #504]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020494:	2b00      	cmp	r3, #0
 8020496:	d05b      	beq.n	8020550 <HAL_RCC_OscConfig+0x108>
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	685b      	ldr	r3, [r3, #4]
 802049c:	2b00      	cmp	r3, #0
 802049e:	d157      	bne.n	8020550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80204a0:	2301      	movs	r3, #1
 80204a2:	e242      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	685b      	ldr	r3, [r3, #4]
 80204a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80204ac:	d106      	bne.n	80204bc <HAL_RCC_OscConfig+0x74>
 80204ae:	4b76      	ldr	r3, [pc, #472]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204b0:	681b      	ldr	r3, [r3, #0]
 80204b2:	4a75      	ldr	r2, [pc, #468]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80204b8:	6013      	str	r3, [r2, #0]
 80204ba:	e01d      	b.n	80204f8 <HAL_RCC_OscConfig+0xb0>
 80204bc:	687b      	ldr	r3, [r7, #4]
 80204be:	685b      	ldr	r3, [r3, #4]
 80204c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80204c4:	d10c      	bne.n	80204e0 <HAL_RCC_OscConfig+0x98>
 80204c6:	4b70      	ldr	r3, [pc, #448]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	4a6f      	ldr	r2, [pc, #444]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80204d0:	6013      	str	r3, [r2, #0]
 80204d2:	4b6d      	ldr	r3, [pc, #436]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	4a6c      	ldr	r2, [pc, #432]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80204dc:	6013      	str	r3, [r2, #0]
 80204de:	e00b      	b.n	80204f8 <HAL_RCC_OscConfig+0xb0>
 80204e0:	4b69      	ldr	r3, [pc, #420]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	4a68      	ldr	r2, [pc, #416]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80204ea:	6013      	str	r3, [r2, #0]
 80204ec:	4b66      	ldr	r3, [pc, #408]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	4a65      	ldr	r2, [pc, #404]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80204f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80204f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	685b      	ldr	r3, [r3, #4]
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	d013      	beq.n	8020528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020500:	f7fb fc74 	bl	801bdec <HAL_GetTick>
 8020504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020506:	e008      	b.n	802051a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020508:	f7fb fc70 	bl	801bdec <HAL_GetTick>
 802050c:	4602      	mov	r2, r0
 802050e:	693b      	ldr	r3, [r7, #16]
 8020510:	1ad3      	subs	r3, r2, r3
 8020512:	2b64      	cmp	r3, #100	; 0x64
 8020514:	d901      	bls.n	802051a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8020516:	2303      	movs	r3, #3
 8020518:	e207      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802051a:	4b5b      	ldr	r3, [pc, #364]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020522:	2b00      	cmp	r3, #0
 8020524:	d0f0      	beq.n	8020508 <HAL_RCC_OscConfig+0xc0>
 8020526:	e014      	b.n	8020552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020528:	f7fb fc60 	bl	801bdec <HAL_GetTick>
 802052c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802052e:	e008      	b.n	8020542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020530:	f7fb fc5c 	bl	801bdec <HAL_GetTick>
 8020534:	4602      	mov	r2, r0
 8020536:	693b      	ldr	r3, [r7, #16]
 8020538:	1ad3      	subs	r3, r2, r3
 802053a:	2b64      	cmp	r3, #100	; 0x64
 802053c:	d901      	bls.n	8020542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802053e:	2303      	movs	r3, #3
 8020540:	e1f3      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020542:	4b51      	ldr	r3, [pc, #324]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802054a:	2b00      	cmp	r3, #0
 802054c:	d1f0      	bne.n	8020530 <HAL_RCC_OscConfig+0xe8>
 802054e:	e000      	b.n	8020552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8020552:	687b      	ldr	r3, [r7, #4]
 8020554:	681b      	ldr	r3, [r3, #0]
 8020556:	f003 0302 	and.w	r3, r3, #2
 802055a:	2b00      	cmp	r3, #0
 802055c:	d063      	beq.n	8020626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802055e:	4b4a      	ldr	r3, [pc, #296]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020560:	689b      	ldr	r3, [r3, #8]
 8020562:	f003 030c 	and.w	r3, r3, #12
 8020566:	2b00      	cmp	r3, #0
 8020568:	d00b      	beq.n	8020582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802056a:	4b47      	ldr	r3, [pc, #284]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 802056c:	689b      	ldr	r3, [r3, #8]
 802056e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8020572:	2b08      	cmp	r3, #8
 8020574:	d11c      	bne.n	80205b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8020576:	4b44      	ldr	r3, [pc, #272]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020578:	685b      	ldr	r3, [r3, #4]
 802057a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802057e:	2b00      	cmp	r3, #0
 8020580:	d116      	bne.n	80205b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020582:	4b41      	ldr	r3, [pc, #260]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	f003 0302 	and.w	r3, r3, #2
 802058a:	2b00      	cmp	r3, #0
 802058c:	d005      	beq.n	802059a <HAL_RCC_OscConfig+0x152>
 802058e:	687b      	ldr	r3, [r7, #4]
 8020590:	68db      	ldr	r3, [r3, #12]
 8020592:	2b01      	cmp	r3, #1
 8020594:	d001      	beq.n	802059a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8020596:	2301      	movs	r3, #1
 8020598:	e1c7      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802059a:	4b3b      	ldr	r3, [pc, #236]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	691b      	ldr	r3, [r3, #16]
 80205a6:	00db      	lsls	r3, r3, #3
 80205a8:	4937      	ldr	r1, [pc, #220]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80205aa:	4313      	orrs	r3, r2
 80205ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80205ae:	e03a      	b.n	8020626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80205b0:	687b      	ldr	r3, [r7, #4]
 80205b2:	68db      	ldr	r3, [r3, #12]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d020      	beq.n	80205fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80205b8:	4b34      	ldr	r3, [pc, #208]	; (802068c <HAL_RCC_OscConfig+0x244>)
 80205ba:	2201      	movs	r2, #1
 80205bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80205be:	f7fb fc15 	bl	801bdec <HAL_GetTick>
 80205c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80205c4:	e008      	b.n	80205d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80205c6:	f7fb fc11 	bl	801bdec <HAL_GetTick>
 80205ca:	4602      	mov	r2, r0
 80205cc:	693b      	ldr	r3, [r7, #16]
 80205ce:	1ad3      	subs	r3, r2, r3
 80205d0:	2b02      	cmp	r3, #2
 80205d2:	d901      	bls.n	80205d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80205d4:	2303      	movs	r3, #3
 80205d6:	e1a8      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80205d8:	4b2b      	ldr	r3, [pc, #172]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	f003 0302 	and.w	r3, r3, #2
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	d0f0      	beq.n	80205c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80205e4:	4b28      	ldr	r3, [pc, #160]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	691b      	ldr	r3, [r3, #16]
 80205f0:	00db      	lsls	r3, r3, #3
 80205f2:	4925      	ldr	r1, [pc, #148]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 80205f4:	4313      	orrs	r3, r2
 80205f6:	600b      	str	r3, [r1, #0]
 80205f8:	e015      	b.n	8020626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80205fa:	4b24      	ldr	r3, [pc, #144]	; (802068c <HAL_RCC_OscConfig+0x244>)
 80205fc:	2200      	movs	r2, #0
 80205fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020600:	f7fb fbf4 	bl	801bdec <HAL_GetTick>
 8020604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8020606:	e008      	b.n	802061a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8020608:	f7fb fbf0 	bl	801bdec <HAL_GetTick>
 802060c:	4602      	mov	r2, r0
 802060e:	693b      	ldr	r3, [r7, #16]
 8020610:	1ad3      	subs	r3, r2, r3
 8020612:	2b02      	cmp	r3, #2
 8020614:	d901      	bls.n	802061a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8020616:	2303      	movs	r3, #3
 8020618:	e187      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802061a:	4b1b      	ldr	r3, [pc, #108]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	f003 0302 	and.w	r3, r3, #2
 8020622:	2b00      	cmp	r3, #0
 8020624:	d1f0      	bne.n	8020608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8020626:	687b      	ldr	r3, [r7, #4]
 8020628:	681b      	ldr	r3, [r3, #0]
 802062a:	f003 0308 	and.w	r3, r3, #8
 802062e:	2b00      	cmp	r3, #0
 8020630:	d036      	beq.n	80206a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	695b      	ldr	r3, [r3, #20]
 8020636:	2b00      	cmp	r3, #0
 8020638:	d016      	beq.n	8020668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802063a:	4b15      	ldr	r3, [pc, #84]	; (8020690 <HAL_RCC_OscConfig+0x248>)
 802063c:	2201      	movs	r2, #1
 802063e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020640:	f7fb fbd4 	bl	801bdec <HAL_GetTick>
 8020644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8020646:	e008      	b.n	802065a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8020648:	f7fb fbd0 	bl	801bdec <HAL_GetTick>
 802064c:	4602      	mov	r2, r0
 802064e:	693b      	ldr	r3, [r7, #16]
 8020650:	1ad3      	subs	r3, r2, r3
 8020652:	2b02      	cmp	r3, #2
 8020654:	d901      	bls.n	802065a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8020656:	2303      	movs	r3, #3
 8020658:	e167      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802065a:	4b0b      	ldr	r3, [pc, #44]	; (8020688 <HAL_RCC_OscConfig+0x240>)
 802065c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802065e:	f003 0302 	and.w	r3, r3, #2
 8020662:	2b00      	cmp	r3, #0
 8020664:	d0f0      	beq.n	8020648 <HAL_RCC_OscConfig+0x200>
 8020666:	e01b      	b.n	80206a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8020668:	4b09      	ldr	r3, [pc, #36]	; (8020690 <HAL_RCC_OscConfig+0x248>)
 802066a:	2200      	movs	r2, #0
 802066c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802066e:	f7fb fbbd 	bl	801bdec <HAL_GetTick>
 8020672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020674:	e00e      	b.n	8020694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8020676:	f7fb fbb9 	bl	801bdec <HAL_GetTick>
 802067a:	4602      	mov	r2, r0
 802067c:	693b      	ldr	r3, [r7, #16]
 802067e:	1ad3      	subs	r3, r2, r3
 8020680:	2b02      	cmp	r3, #2
 8020682:	d907      	bls.n	8020694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8020684:	2303      	movs	r3, #3
 8020686:	e150      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
 8020688:	40023800 	.word	0x40023800
 802068c:	42470000 	.word	0x42470000
 8020690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020694:	4b88      	ldr	r3, [pc, #544]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020698:	f003 0302 	and.w	r3, r3, #2
 802069c:	2b00      	cmp	r3, #0
 802069e:	d1ea      	bne.n	8020676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	f003 0304 	and.w	r3, r3, #4
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	f000 8097 	beq.w	80207dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80206ae:	2300      	movs	r3, #0
 80206b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80206b2:	4b81      	ldr	r3, [pc, #516]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80206b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d10f      	bne.n	80206de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80206be:	2300      	movs	r3, #0
 80206c0:	60bb      	str	r3, [r7, #8]
 80206c2:	4b7d      	ldr	r3, [pc, #500]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80206c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206c6:	4a7c      	ldr	r2, [pc, #496]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80206c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80206cc:	6413      	str	r3, [r2, #64]	; 0x40
 80206ce:	4b7a      	ldr	r3, [pc, #488]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80206d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206d6:	60bb      	str	r3, [r7, #8]
 80206d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80206da:	2301      	movs	r3, #1
 80206dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80206de:	4b77      	ldr	r3, [pc, #476]	; (80208bc <HAL_RCC_OscConfig+0x474>)
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d118      	bne.n	802071c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80206ea:	4b74      	ldr	r3, [pc, #464]	; (80208bc <HAL_RCC_OscConfig+0x474>)
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	4a73      	ldr	r2, [pc, #460]	; (80208bc <HAL_RCC_OscConfig+0x474>)
 80206f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80206f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80206f6:	f7fb fb79 	bl	801bdec <HAL_GetTick>
 80206fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80206fc:	e008      	b.n	8020710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80206fe:	f7fb fb75 	bl	801bdec <HAL_GetTick>
 8020702:	4602      	mov	r2, r0
 8020704:	693b      	ldr	r3, [r7, #16]
 8020706:	1ad3      	subs	r3, r2, r3
 8020708:	2b02      	cmp	r3, #2
 802070a:	d901      	bls.n	8020710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802070c:	2303      	movs	r3, #3
 802070e:	e10c      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020710:	4b6a      	ldr	r3, [pc, #424]	; (80208bc <HAL_RCC_OscConfig+0x474>)
 8020712:	681b      	ldr	r3, [r3, #0]
 8020714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020718:	2b00      	cmp	r3, #0
 802071a:	d0f0      	beq.n	80206fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	689b      	ldr	r3, [r3, #8]
 8020720:	2b01      	cmp	r3, #1
 8020722:	d106      	bne.n	8020732 <HAL_RCC_OscConfig+0x2ea>
 8020724:	4b64      	ldr	r3, [pc, #400]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020728:	4a63      	ldr	r2, [pc, #396]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 802072a:	f043 0301 	orr.w	r3, r3, #1
 802072e:	6713      	str	r3, [r2, #112]	; 0x70
 8020730:	e01c      	b.n	802076c <HAL_RCC_OscConfig+0x324>
 8020732:	687b      	ldr	r3, [r7, #4]
 8020734:	689b      	ldr	r3, [r3, #8]
 8020736:	2b05      	cmp	r3, #5
 8020738:	d10c      	bne.n	8020754 <HAL_RCC_OscConfig+0x30c>
 802073a:	4b5f      	ldr	r3, [pc, #380]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 802073c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802073e:	4a5e      	ldr	r2, [pc, #376]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020740:	f043 0304 	orr.w	r3, r3, #4
 8020744:	6713      	str	r3, [r2, #112]	; 0x70
 8020746:	4b5c      	ldr	r3, [pc, #368]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802074a:	4a5b      	ldr	r2, [pc, #364]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 802074c:	f043 0301 	orr.w	r3, r3, #1
 8020750:	6713      	str	r3, [r2, #112]	; 0x70
 8020752:	e00b      	b.n	802076c <HAL_RCC_OscConfig+0x324>
 8020754:	4b58      	ldr	r3, [pc, #352]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020758:	4a57      	ldr	r2, [pc, #348]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 802075a:	f023 0301 	bic.w	r3, r3, #1
 802075e:	6713      	str	r3, [r2, #112]	; 0x70
 8020760:	4b55      	ldr	r3, [pc, #340]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020764:	4a54      	ldr	r2, [pc, #336]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020766:	f023 0304 	bic.w	r3, r3, #4
 802076a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	689b      	ldr	r3, [r3, #8]
 8020770:	2b00      	cmp	r3, #0
 8020772:	d015      	beq.n	80207a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020774:	f7fb fb3a 	bl	801bdec <HAL_GetTick>
 8020778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802077a:	e00a      	b.n	8020792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802077c:	f7fb fb36 	bl	801bdec <HAL_GetTick>
 8020780:	4602      	mov	r2, r0
 8020782:	693b      	ldr	r3, [r7, #16]
 8020784:	1ad3      	subs	r3, r2, r3
 8020786:	f241 3288 	movw	r2, #5000	; 0x1388
 802078a:	4293      	cmp	r3, r2
 802078c:	d901      	bls.n	8020792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802078e:	2303      	movs	r3, #3
 8020790:	e0cb      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8020792:	4b49      	ldr	r3, [pc, #292]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020796:	f003 0302 	and.w	r3, r3, #2
 802079a:	2b00      	cmp	r3, #0
 802079c:	d0ee      	beq.n	802077c <HAL_RCC_OscConfig+0x334>
 802079e:	e014      	b.n	80207ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80207a0:	f7fb fb24 	bl	801bdec <HAL_GetTick>
 80207a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80207a6:	e00a      	b.n	80207be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80207a8:	f7fb fb20 	bl	801bdec <HAL_GetTick>
 80207ac:	4602      	mov	r2, r0
 80207ae:	693b      	ldr	r3, [r7, #16]
 80207b0:	1ad3      	subs	r3, r2, r3
 80207b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80207b6:	4293      	cmp	r3, r2
 80207b8:	d901      	bls.n	80207be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80207ba:	2303      	movs	r3, #3
 80207bc:	e0b5      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80207be:	4b3e      	ldr	r3, [pc, #248]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80207c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207c2:	f003 0302 	and.w	r3, r3, #2
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d1ee      	bne.n	80207a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80207ca:	7dfb      	ldrb	r3, [r7, #23]
 80207cc:	2b01      	cmp	r3, #1
 80207ce:	d105      	bne.n	80207dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80207d0:	4b39      	ldr	r3, [pc, #228]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80207d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80207d4:	4a38      	ldr	r2, [pc, #224]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80207d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80207da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	699b      	ldr	r3, [r3, #24]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	f000 80a1 	beq.w	8020928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80207e6:	4b34      	ldr	r3, [pc, #208]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80207e8:	689b      	ldr	r3, [r3, #8]
 80207ea:	f003 030c 	and.w	r3, r3, #12
 80207ee:	2b08      	cmp	r3, #8
 80207f0:	d05c      	beq.n	80208ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80207f2:	687b      	ldr	r3, [r7, #4]
 80207f4:	699b      	ldr	r3, [r3, #24]
 80207f6:	2b02      	cmp	r3, #2
 80207f8:	d141      	bne.n	802087e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80207fa:	4b31      	ldr	r3, [pc, #196]	; (80208c0 <HAL_RCC_OscConfig+0x478>)
 80207fc:	2200      	movs	r2, #0
 80207fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020800:	f7fb faf4 	bl	801bdec <HAL_GetTick>
 8020804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020806:	e008      	b.n	802081a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020808:	f7fb faf0 	bl	801bdec <HAL_GetTick>
 802080c:	4602      	mov	r2, r0
 802080e:	693b      	ldr	r3, [r7, #16]
 8020810:	1ad3      	subs	r3, r2, r3
 8020812:	2b02      	cmp	r3, #2
 8020814:	d901      	bls.n	802081a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8020816:	2303      	movs	r3, #3
 8020818:	e087      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802081a:	4b27      	ldr	r3, [pc, #156]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 802081c:	681b      	ldr	r3, [r3, #0]
 802081e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020822:	2b00      	cmp	r3, #0
 8020824:	d1f0      	bne.n	8020808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	69da      	ldr	r2, [r3, #28]
 802082a:	687b      	ldr	r3, [r7, #4]
 802082c:	6a1b      	ldr	r3, [r3, #32]
 802082e:	431a      	orrs	r2, r3
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020834:	019b      	lsls	r3, r3, #6
 8020836:	431a      	orrs	r2, r3
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802083c:	085b      	lsrs	r3, r3, #1
 802083e:	3b01      	subs	r3, #1
 8020840:	041b      	lsls	r3, r3, #16
 8020842:	431a      	orrs	r2, r3
 8020844:	687b      	ldr	r3, [r7, #4]
 8020846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020848:	061b      	lsls	r3, r3, #24
 802084a:	491b      	ldr	r1, [pc, #108]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 802084c:	4313      	orrs	r3, r2
 802084e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8020850:	4b1b      	ldr	r3, [pc, #108]	; (80208c0 <HAL_RCC_OscConfig+0x478>)
 8020852:	2201      	movs	r2, #1
 8020854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020856:	f7fb fac9 	bl	801bdec <HAL_GetTick>
 802085a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802085c:	e008      	b.n	8020870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802085e:	f7fb fac5 	bl	801bdec <HAL_GetTick>
 8020862:	4602      	mov	r2, r0
 8020864:	693b      	ldr	r3, [r7, #16]
 8020866:	1ad3      	subs	r3, r2, r3
 8020868:	2b02      	cmp	r3, #2
 802086a:	d901      	bls.n	8020870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802086c:	2303      	movs	r3, #3
 802086e:	e05c      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020870:	4b11      	ldr	r3, [pc, #68]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020878:	2b00      	cmp	r3, #0
 802087a:	d0f0      	beq.n	802085e <HAL_RCC_OscConfig+0x416>
 802087c:	e054      	b.n	8020928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802087e:	4b10      	ldr	r3, [pc, #64]	; (80208c0 <HAL_RCC_OscConfig+0x478>)
 8020880:	2200      	movs	r2, #0
 8020882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020884:	f7fb fab2 	bl	801bdec <HAL_GetTick>
 8020888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802088a:	e008      	b.n	802089e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802088c:	f7fb faae 	bl	801bdec <HAL_GetTick>
 8020890:	4602      	mov	r2, r0
 8020892:	693b      	ldr	r3, [r7, #16]
 8020894:	1ad3      	subs	r3, r2, r3
 8020896:	2b02      	cmp	r3, #2
 8020898:	d901      	bls.n	802089e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802089a:	2303      	movs	r3, #3
 802089c:	e045      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802089e:	4b06      	ldr	r3, [pc, #24]	; (80208b8 <HAL_RCC_OscConfig+0x470>)
 80208a0:	681b      	ldr	r3, [r3, #0]
 80208a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d1f0      	bne.n	802088c <HAL_RCC_OscConfig+0x444>
 80208aa:	e03d      	b.n	8020928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80208ac:	687b      	ldr	r3, [r7, #4]
 80208ae:	699b      	ldr	r3, [r3, #24]
 80208b0:	2b01      	cmp	r3, #1
 80208b2:	d107      	bne.n	80208c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80208b4:	2301      	movs	r3, #1
 80208b6:	e038      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
 80208b8:	40023800 	.word	0x40023800
 80208bc:	40007000 	.word	0x40007000
 80208c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80208c4:	4b1b      	ldr	r3, [pc, #108]	; (8020934 <HAL_RCC_OscConfig+0x4ec>)
 80208c6:	685b      	ldr	r3, [r3, #4]
 80208c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80208ca:	687b      	ldr	r3, [r7, #4]
 80208cc:	699b      	ldr	r3, [r3, #24]
 80208ce:	2b01      	cmp	r3, #1
 80208d0:	d028      	beq.n	8020924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80208dc:	429a      	cmp	r2, r3
 80208de:	d121      	bne.n	8020924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80208e0:	68fb      	ldr	r3, [r7, #12]
 80208e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80208ea:	429a      	cmp	r2, r3
 80208ec:	d11a      	bne.n	8020924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80208ee:	68fa      	ldr	r2, [r7, #12]
 80208f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80208f4:	4013      	ands	r3, r2
 80208f6:	687a      	ldr	r2, [r7, #4]
 80208f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80208fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80208fc:	4293      	cmp	r3, r2
 80208fe:	d111      	bne.n	8020924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8020900:	68fb      	ldr	r3, [r7, #12]
 8020902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802090a:	085b      	lsrs	r3, r3, #1
 802090c:	3b01      	subs	r3, #1
 802090e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8020910:	429a      	cmp	r2, r3
 8020912:	d107      	bne.n	8020924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8020914:	68fb      	ldr	r3, [r7, #12]
 8020916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802091e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8020920:	429a      	cmp	r2, r3
 8020922:	d001      	beq.n	8020928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8020924:	2301      	movs	r3, #1
 8020926:	e000      	b.n	802092a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8020928:	2300      	movs	r3, #0
}
 802092a:	4618      	mov	r0, r3
 802092c:	3718      	adds	r7, #24
 802092e:	46bd      	mov	sp, r7
 8020930:	bd80      	pop	{r7, pc}
 8020932:	bf00      	nop
 8020934:	40023800 	.word	0x40023800

08020938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8020938:	b580      	push	{r7, lr}
 802093a:	b084      	sub	sp, #16
 802093c:	af00      	add	r7, sp, #0
 802093e:	6078      	str	r0, [r7, #4]
 8020940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	2b00      	cmp	r3, #0
 8020946:	d101      	bne.n	802094c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8020948:	2301      	movs	r3, #1
 802094a:	e0cc      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802094c:	4b68      	ldr	r3, [pc, #416]	; (8020af0 <HAL_RCC_ClockConfig+0x1b8>)
 802094e:	681b      	ldr	r3, [r3, #0]
 8020950:	f003 0307 	and.w	r3, r3, #7
 8020954:	683a      	ldr	r2, [r7, #0]
 8020956:	429a      	cmp	r2, r3
 8020958:	d90c      	bls.n	8020974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802095a:	4b65      	ldr	r3, [pc, #404]	; (8020af0 <HAL_RCC_ClockConfig+0x1b8>)
 802095c:	683a      	ldr	r2, [r7, #0]
 802095e:	b2d2      	uxtb	r2, r2
 8020960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020962:	4b63      	ldr	r3, [pc, #396]	; (8020af0 <HAL_RCC_ClockConfig+0x1b8>)
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	f003 0307 	and.w	r3, r3, #7
 802096a:	683a      	ldr	r2, [r7, #0]
 802096c:	429a      	cmp	r2, r3
 802096e:	d001      	beq.n	8020974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8020970:	2301      	movs	r3, #1
 8020972:	e0b8      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	f003 0302 	and.w	r3, r3, #2
 802097c:	2b00      	cmp	r3, #0
 802097e:	d020      	beq.n	80209c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	f003 0304 	and.w	r3, r3, #4
 8020988:	2b00      	cmp	r3, #0
 802098a:	d005      	beq.n	8020998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802098c:	4b59      	ldr	r3, [pc, #356]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 802098e:	689b      	ldr	r3, [r3, #8]
 8020990:	4a58      	ldr	r2, [pc, #352]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8020996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	681b      	ldr	r3, [r3, #0]
 802099c:	f003 0308 	and.w	r3, r3, #8
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d005      	beq.n	80209b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80209a4:	4b53      	ldr	r3, [pc, #332]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 80209a6:	689b      	ldr	r3, [r3, #8]
 80209a8:	4a52      	ldr	r2, [pc, #328]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 80209aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80209ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80209b0:	4b50      	ldr	r3, [pc, #320]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 80209b2:	689b      	ldr	r3, [r3, #8]
 80209b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	689b      	ldr	r3, [r3, #8]
 80209bc:	494d      	ldr	r1, [pc, #308]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 80209be:	4313      	orrs	r3, r2
 80209c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	681b      	ldr	r3, [r3, #0]
 80209c6:	f003 0301 	and.w	r3, r3, #1
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d044      	beq.n	8020a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	685b      	ldr	r3, [r3, #4]
 80209d2:	2b01      	cmp	r3, #1
 80209d4:	d107      	bne.n	80209e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80209d6:	4b47      	ldr	r3, [pc, #284]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d119      	bne.n	8020a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80209e2:	2301      	movs	r3, #1
 80209e4:	e07f      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	685b      	ldr	r3, [r3, #4]
 80209ea:	2b02      	cmp	r3, #2
 80209ec:	d003      	beq.n	80209f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80209f2:	2b03      	cmp	r3, #3
 80209f4:	d107      	bne.n	8020a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80209f6:	4b3f      	ldr	r3, [pc, #252]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 80209f8:	681b      	ldr	r3, [r3, #0]
 80209fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d109      	bne.n	8020a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020a02:	2301      	movs	r3, #1
 8020a04:	e06f      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020a06:	4b3b      	ldr	r3, [pc, #236]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	f003 0302 	and.w	r3, r3, #2
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d101      	bne.n	8020a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8020a12:	2301      	movs	r3, #1
 8020a14:	e067      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8020a16:	4b37      	ldr	r3, [pc, #220]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020a18:	689b      	ldr	r3, [r3, #8]
 8020a1a:	f023 0203 	bic.w	r2, r3, #3
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	685b      	ldr	r3, [r3, #4]
 8020a22:	4934      	ldr	r1, [pc, #208]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020a24:	4313      	orrs	r3, r2
 8020a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8020a28:	f7fb f9e0 	bl	801bdec <HAL_GetTick>
 8020a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020a2e:	e00a      	b.n	8020a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020a30:	f7fb f9dc 	bl	801bdec <HAL_GetTick>
 8020a34:	4602      	mov	r2, r0
 8020a36:	68fb      	ldr	r3, [r7, #12]
 8020a38:	1ad3      	subs	r3, r2, r3
 8020a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8020a3e:	4293      	cmp	r3, r2
 8020a40:	d901      	bls.n	8020a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8020a42:	2303      	movs	r3, #3
 8020a44:	e04f      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020a46:	4b2b      	ldr	r3, [pc, #172]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020a48:	689b      	ldr	r3, [r3, #8]
 8020a4a:	f003 020c 	and.w	r2, r3, #12
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	685b      	ldr	r3, [r3, #4]
 8020a52:	009b      	lsls	r3, r3, #2
 8020a54:	429a      	cmp	r2, r3
 8020a56:	d1eb      	bne.n	8020a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020a58:	4b25      	ldr	r3, [pc, #148]	; (8020af0 <HAL_RCC_ClockConfig+0x1b8>)
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	f003 0307 	and.w	r3, r3, #7
 8020a60:	683a      	ldr	r2, [r7, #0]
 8020a62:	429a      	cmp	r2, r3
 8020a64:	d20c      	bcs.n	8020a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020a66:	4b22      	ldr	r3, [pc, #136]	; (8020af0 <HAL_RCC_ClockConfig+0x1b8>)
 8020a68:	683a      	ldr	r2, [r7, #0]
 8020a6a:	b2d2      	uxtb	r2, r2
 8020a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020a6e:	4b20      	ldr	r3, [pc, #128]	; (8020af0 <HAL_RCC_ClockConfig+0x1b8>)
 8020a70:	681b      	ldr	r3, [r3, #0]
 8020a72:	f003 0307 	and.w	r3, r3, #7
 8020a76:	683a      	ldr	r2, [r7, #0]
 8020a78:	429a      	cmp	r2, r3
 8020a7a:	d001      	beq.n	8020a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8020a7c:	2301      	movs	r3, #1
 8020a7e:	e032      	b.n	8020ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	681b      	ldr	r3, [r3, #0]
 8020a84:	f003 0304 	and.w	r3, r3, #4
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	d008      	beq.n	8020a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8020a8c:	4b19      	ldr	r3, [pc, #100]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020a8e:	689b      	ldr	r3, [r3, #8]
 8020a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	68db      	ldr	r3, [r3, #12]
 8020a98:	4916      	ldr	r1, [pc, #88]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020a9a:	4313      	orrs	r3, r2
 8020a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	f003 0308 	and.w	r3, r3, #8
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	d009      	beq.n	8020abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8020aaa:	4b12      	ldr	r3, [pc, #72]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020aac:	689b      	ldr	r3, [r3, #8]
 8020aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	691b      	ldr	r3, [r3, #16]
 8020ab6:	00db      	lsls	r3, r3, #3
 8020ab8:	490e      	ldr	r1, [pc, #56]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020aba:	4313      	orrs	r3, r2
 8020abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8020abe:	f000 f821 	bl	8020b04 <HAL_RCC_GetSysClockFreq>
 8020ac2:	4602      	mov	r2, r0
 8020ac4:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <HAL_RCC_ClockConfig+0x1bc>)
 8020ac6:	689b      	ldr	r3, [r3, #8]
 8020ac8:	091b      	lsrs	r3, r3, #4
 8020aca:	f003 030f 	and.w	r3, r3, #15
 8020ace:	490a      	ldr	r1, [pc, #40]	; (8020af8 <HAL_RCC_ClockConfig+0x1c0>)
 8020ad0:	5ccb      	ldrb	r3, [r1, r3]
 8020ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8020ad6:	4a09      	ldr	r2, [pc, #36]	; (8020afc <HAL_RCC_ClockConfig+0x1c4>)
 8020ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8020ada:	4b09      	ldr	r3, [pc, #36]	; (8020b00 <HAL_RCC_ClockConfig+0x1c8>)
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	4618      	mov	r0, r3
 8020ae0:	f7fb f940 	bl	801bd64 <HAL_InitTick>

  return HAL_OK;
 8020ae4:	2300      	movs	r3, #0
}
 8020ae6:	4618      	mov	r0, r3
 8020ae8:	3710      	adds	r7, #16
 8020aea:	46bd      	mov	sp, r7
 8020aec:	bd80      	pop	{r7, pc}
 8020aee:	bf00      	nop
 8020af0:	40023c00 	.word	0x40023c00
 8020af4:	40023800 	.word	0x40023800
 8020af8:	08027c80 	.word	0x08027c80
 8020afc:	20000020 	.word	0x20000020
 8020b00:	20000138 	.word	0x20000138

08020b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020b08:	b094      	sub	sp, #80	; 0x50
 8020b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8020b10:	2300      	movs	r3, #0
 8020b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020b14:	2300      	movs	r3, #0
 8020b16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8020b18:	2300      	movs	r3, #0
 8020b1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020b1c:	4b79      	ldr	r3, [pc, #484]	; (8020d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020b1e:	689b      	ldr	r3, [r3, #8]
 8020b20:	f003 030c 	and.w	r3, r3, #12
 8020b24:	2b08      	cmp	r3, #8
 8020b26:	d00d      	beq.n	8020b44 <HAL_RCC_GetSysClockFreq+0x40>
 8020b28:	2b08      	cmp	r3, #8
 8020b2a:	f200 80e1 	bhi.w	8020cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d002      	beq.n	8020b38 <HAL_RCC_GetSysClockFreq+0x34>
 8020b32:	2b04      	cmp	r3, #4
 8020b34:	d003      	beq.n	8020b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8020b36:	e0db      	b.n	8020cf0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8020b38:	4b73      	ldr	r3, [pc, #460]	; (8020d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8020b3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8020b3c:	e0db      	b.n	8020cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8020b3e:	4b73      	ldr	r3, [pc, #460]	; (8020d0c <HAL_RCC_GetSysClockFreq+0x208>)
 8020b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020b42:	e0d8      	b.n	8020cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8020b44:	4b6f      	ldr	r3, [pc, #444]	; (8020d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020b46:	685b      	ldr	r3, [r3, #4]
 8020b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020b4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8020b4e:	4b6d      	ldr	r3, [pc, #436]	; (8020d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020b50:	685b      	ldr	r3, [r3, #4]
 8020b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d063      	beq.n	8020c22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020b5a:	4b6a      	ldr	r3, [pc, #424]	; (8020d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020b5c:	685b      	ldr	r3, [r3, #4]
 8020b5e:	099b      	lsrs	r3, r3, #6
 8020b60:	2200      	movs	r2, #0
 8020b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8020b64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8020b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8020b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8020b6e:	2300      	movs	r3, #0
 8020b70:	637b      	str	r3, [r7, #52]	; 0x34
 8020b72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8020b76:	4622      	mov	r2, r4
 8020b78:	462b      	mov	r3, r5
 8020b7a:	f04f 0000 	mov.w	r0, #0
 8020b7e:	f04f 0100 	mov.w	r1, #0
 8020b82:	0159      	lsls	r1, r3, #5
 8020b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020b88:	0150      	lsls	r0, r2, #5
 8020b8a:	4602      	mov	r2, r0
 8020b8c:	460b      	mov	r3, r1
 8020b8e:	4621      	mov	r1, r4
 8020b90:	1a51      	subs	r1, r2, r1
 8020b92:	6139      	str	r1, [r7, #16]
 8020b94:	4629      	mov	r1, r5
 8020b96:	eb63 0301 	sbc.w	r3, r3, r1
 8020b9a:	617b      	str	r3, [r7, #20]
 8020b9c:	f04f 0200 	mov.w	r2, #0
 8020ba0:	f04f 0300 	mov.w	r3, #0
 8020ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8020ba8:	4659      	mov	r1, fp
 8020baa:	018b      	lsls	r3, r1, #6
 8020bac:	4651      	mov	r1, sl
 8020bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8020bb2:	4651      	mov	r1, sl
 8020bb4:	018a      	lsls	r2, r1, #6
 8020bb6:	4651      	mov	r1, sl
 8020bb8:	ebb2 0801 	subs.w	r8, r2, r1
 8020bbc:	4659      	mov	r1, fp
 8020bbe:	eb63 0901 	sbc.w	r9, r3, r1
 8020bc2:	f04f 0200 	mov.w	r2, #0
 8020bc6:	f04f 0300 	mov.w	r3, #0
 8020bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8020bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8020bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8020bd6:	4690      	mov	r8, r2
 8020bd8:	4699      	mov	r9, r3
 8020bda:	4623      	mov	r3, r4
 8020bdc:	eb18 0303 	adds.w	r3, r8, r3
 8020be0:	60bb      	str	r3, [r7, #8]
 8020be2:	462b      	mov	r3, r5
 8020be4:	eb49 0303 	adc.w	r3, r9, r3
 8020be8:	60fb      	str	r3, [r7, #12]
 8020bea:	f04f 0200 	mov.w	r2, #0
 8020bee:	f04f 0300 	mov.w	r3, #0
 8020bf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020bf6:	4629      	mov	r1, r5
 8020bf8:	024b      	lsls	r3, r1, #9
 8020bfa:	4621      	mov	r1, r4
 8020bfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8020c00:	4621      	mov	r1, r4
 8020c02:	024a      	lsls	r2, r1, #9
 8020c04:	4610      	mov	r0, r2
 8020c06:	4619      	mov	r1, r3
 8020c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8020c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020c14:	f7e0 f934 	bl	8000e80 <__aeabi_uldivmod>
 8020c18:	4602      	mov	r2, r0
 8020c1a:	460b      	mov	r3, r1
 8020c1c:	4613      	mov	r3, r2
 8020c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020c20:	e058      	b.n	8020cd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020c22:	4b38      	ldr	r3, [pc, #224]	; (8020d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020c24:	685b      	ldr	r3, [r3, #4]
 8020c26:	099b      	lsrs	r3, r3, #6
 8020c28:	2200      	movs	r2, #0
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	4611      	mov	r1, r2
 8020c2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8020c32:	623b      	str	r3, [r7, #32]
 8020c34:	2300      	movs	r3, #0
 8020c36:	627b      	str	r3, [r7, #36]	; 0x24
 8020c38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8020c3c:	4642      	mov	r2, r8
 8020c3e:	464b      	mov	r3, r9
 8020c40:	f04f 0000 	mov.w	r0, #0
 8020c44:	f04f 0100 	mov.w	r1, #0
 8020c48:	0159      	lsls	r1, r3, #5
 8020c4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020c4e:	0150      	lsls	r0, r2, #5
 8020c50:	4602      	mov	r2, r0
 8020c52:	460b      	mov	r3, r1
 8020c54:	4641      	mov	r1, r8
 8020c56:	ebb2 0a01 	subs.w	sl, r2, r1
 8020c5a:	4649      	mov	r1, r9
 8020c5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8020c60:	f04f 0200 	mov.w	r2, #0
 8020c64:	f04f 0300 	mov.w	r3, #0
 8020c68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8020c6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8020c70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8020c74:	ebb2 040a 	subs.w	r4, r2, sl
 8020c78:	eb63 050b 	sbc.w	r5, r3, fp
 8020c7c:	f04f 0200 	mov.w	r2, #0
 8020c80:	f04f 0300 	mov.w	r3, #0
 8020c84:	00eb      	lsls	r3, r5, #3
 8020c86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020c8a:	00e2      	lsls	r2, r4, #3
 8020c8c:	4614      	mov	r4, r2
 8020c8e:	461d      	mov	r5, r3
 8020c90:	4643      	mov	r3, r8
 8020c92:	18e3      	adds	r3, r4, r3
 8020c94:	603b      	str	r3, [r7, #0]
 8020c96:	464b      	mov	r3, r9
 8020c98:	eb45 0303 	adc.w	r3, r5, r3
 8020c9c:	607b      	str	r3, [r7, #4]
 8020c9e:	f04f 0200 	mov.w	r2, #0
 8020ca2:	f04f 0300 	mov.w	r3, #0
 8020ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8020caa:	4629      	mov	r1, r5
 8020cac:	028b      	lsls	r3, r1, #10
 8020cae:	4621      	mov	r1, r4
 8020cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8020cb4:	4621      	mov	r1, r4
 8020cb6:	028a      	lsls	r2, r1, #10
 8020cb8:	4610      	mov	r0, r2
 8020cba:	4619      	mov	r1, r3
 8020cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020cbe:	2200      	movs	r2, #0
 8020cc0:	61bb      	str	r3, [r7, #24]
 8020cc2:	61fa      	str	r2, [r7, #28]
 8020cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020cc8:	f7e0 f8da 	bl	8000e80 <__aeabi_uldivmod>
 8020ccc:	4602      	mov	r2, r0
 8020cce:	460b      	mov	r3, r1
 8020cd0:	4613      	mov	r3, r2
 8020cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8020cd4:	4b0b      	ldr	r3, [pc, #44]	; (8020d04 <HAL_RCC_GetSysClockFreq+0x200>)
 8020cd6:	685b      	ldr	r3, [r3, #4]
 8020cd8:	0c1b      	lsrs	r3, r3, #16
 8020cda:	f003 0303 	and.w	r3, r3, #3
 8020cde:	3301      	adds	r3, #1
 8020ce0:	005b      	lsls	r3, r3, #1
 8020ce2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8020ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8020cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020cee:	e002      	b.n	8020cf6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8020cf0:	4b05      	ldr	r3, [pc, #20]	; (8020d08 <HAL_RCC_GetSysClockFreq+0x204>)
 8020cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8020cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8020cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8020cf8:	4618      	mov	r0, r3
 8020cfa:	3750      	adds	r7, #80	; 0x50
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020d02:	bf00      	nop
 8020d04:	40023800 	.word	0x40023800
 8020d08:	00f42400 	.word	0x00f42400
 8020d0c:	007a1200 	.word	0x007a1200

08020d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8020d10:	b480      	push	{r7}
 8020d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020d14:	4b03      	ldr	r3, [pc, #12]	; (8020d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8020d16:	681b      	ldr	r3, [r3, #0]
}
 8020d18:	4618      	mov	r0, r3
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d20:	4770      	bx	lr
 8020d22:	bf00      	nop
 8020d24:	20000020 	.word	0x20000020

08020d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8020d28:	b580      	push	{r7, lr}
 8020d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8020d2c:	f7ff fff0 	bl	8020d10 <HAL_RCC_GetHCLKFreq>
 8020d30:	4602      	mov	r2, r0
 8020d32:	4b05      	ldr	r3, [pc, #20]	; (8020d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8020d34:	689b      	ldr	r3, [r3, #8]
 8020d36:	0a9b      	lsrs	r3, r3, #10
 8020d38:	f003 0307 	and.w	r3, r3, #7
 8020d3c:	4903      	ldr	r1, [pc, #12]	; (8020d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8020d3e:	5ccb      	ldrb	r3, [r1, r3]
 8020d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020d44:	4618      	mov	r0, r3
 8020d46:	bd80      	pop	{r7, pc}
 8020d48:	40023800 	.word	0x40023800
 8020d4c:	08027c90 	.word	0x08027c90

08020d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8020d50:	b580      	push	{r7, lr}
 8020d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020d54:	f7ff ffdc 	bl	8020d10 <HAL_RCC_GetHCLKFreq>
 8020d58:	4602      	mov	r2, r0
 8020d5a:	4b05      	ldr	r3, [pc, #20]	; (8020d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8020d5c:	689b      	ldr	r3, [r3, #8]
 8020d5e:	0b5b      	lsrs	r3, r3, #13
 8020d60:	f003 0307 	and.w	r3, r3, #7
 8020d64:	4903      	ldr	r1, [pc, #12]	; (8020d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8020d66:	5ccb      	ldrb	r3, [r1, r3]
 8020d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	bd80      	pop	{r7, pc}
 8020d70:	40023800 	.word	0x40023800
 8020d74:	08027c90 	.word	0x08027c90

08020d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8020d78:	b580      	push	{r7, lr}
 8020d7a:	b082      	sub	sp, #8
 8020d7c:	af00      	add	r7, sp, #0
 8020d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020d80:	687b      	ldr	r3, [r7, #4]
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d101      	bne.n	8020d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020d86:	2301      	movs	r3, #1
 8020d88:	e041      	b.n	8020e0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020d8a:	687b      	ldr	r3, [r7, #4]
 8020d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020d90:	b2db      	uxtb	r3, r3
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	d106      	bne.n	8020da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	2200      	movs	r2, #0
 8020d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020d9e:	6878      	ldr	r0, [r7, #4]
 8020da0:	f7e2 fc9e 	bl	80036e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	2202      	movs	r2, #2
 8020da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	681a      	ldr	r2, [r3, #0]
 8020db0:	687b      	ldr	r3, [r7, #4]
 8020db2:	3304      	adds	r3, #4
 8020db4:	4619      	mov	r1, r3
 8020db6:	4610      	mov	r0, r2
 8020db8:	f000 fd14 	bl	80217e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020dbc:	687b      	ldr	r3, [r7, #4]
 8020dbe:	2201      	movs	r2, #1
 8020dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	2201      	movs	r2, #1
 8020dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	2201      	movs	r2, #1
 8020dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	2201      	movs	r2, #1
 8020dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	2201      	movs	r2, #1
 8020de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	2201      	movs	r2, #1
 8020de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020dec:	687b      	ldr	r3, [r7, #4]
 8020dee:	2201      	movs	r2, #1
 8020df0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	2201      	movs	r2, #1
 8020df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	2201      	movs	r2, #1
 8020e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	2201      	movs	r2, #1
 8020e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020e0c:	2300      	movs	r3, #0
}
 8020e0e:	4618      	mov	r0, r3
 8020e10:	3708      	adds	r7, #8
 8020e12:	46bd      	mov	sp, r7
 8020e14:	bd80      	pop	{r7, pc}

08020e16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020e16:	b580      	push	{r7, lr}
 8020e18:	b082      	sub	sp, #8
 8020e1a:	af00      	add	r7, sp, #0
 8020e1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d101      	bne.n	8020e28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020e24:	2301      	movs	r3, #1
 8020e26:	e041      	b.n	8020eac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8020e2e:	b2db      	uxtb	r3, r3
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d106      	bne.n	8020e42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	2200      	movs	r2, #0
 8020e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8020e3c:	6878      	ldr	r0, [r7, #4]
 8020e3e:	f000 f839 	bl	8020eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	2202      	movs	r2, #2
 8020e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	681a      	ldr	r2, [r3, #0]
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	3304      	adds	r3, #4
 8020e52:	4619      	mov	r1, r3
 8020e54:	4610      	mov	r0, r2
 8020e56:	f000 fcc5 	bl	80217e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	2201      	movs	r2, #1
 8020e5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	2201      	movs	r2, #1
 8020e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	2201      	movs	r2, #1
 8020e6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	2201      	movs	r2, #1
 8020e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	2201      	movs	r2, #1
 8020e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	2201      	movs	r2, #1
 8020e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	2201      	movs	r2, #1
 8020e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8020e92:	687b      	ldr	r3, [r7, #4]
 8020e94:	2201      	movs	r2, #1
 8020e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	2201      	movs	r2, #1
 8020e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	2201      	movs	r2, #1
 8020ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8020eaa:	2300      	movs	r3, #0
}
 8020eac:	4618      	mov	r0, r3
 8020eae:	3708      	adds	r7, #8
 8020eb0:	46bd      	mov	sp, r7
 8020eb2:	bd80      	pop	{r7, pc}

08020eb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020eb4:	b480      	push	{r7}
 8020eb6:	b083      	sub	sp, #12
 8020eb8:	af00      	add	r7, sp, #0
 8020eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8020ebc:	bf00      	nop
 8020ebe:	370c      	adds	r7, #12
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr

08020ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b084      	sub	sp, #16
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
 8020ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8020ed2:	683b      	ldr	r3, [r7, #0]
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d109      	bne.n	8020eec <HAL_TIM_PWM_Start+0x24>
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8020ede:	b2db      	uxtb	r3, r3
 8020ee0:	2b01      	cmp	r3, #1
 8020ee2:	bf14      	ite	ne
 8020ee4:	2301      	movne	r3, #1
 8020ee6:	2300      	moveq	r3, #0
 8020ee8:	b2db      	uxtb	r3, r3
 8020eea:	e022      	b.n	8020f32 <HAL_TIM_PWM_Start+0x6a>
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	2b04      	cmp	r3, #4
 8020ef0:	d109      	bne.n	8020f06 <HAL_TIM_PWM_Start+0x3e>
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8020ef8:	b2db      	uxtb	r3, r3
 8020efa:	2b01      	cmp	r3, #1
 8020efc:	bf14      	ite	ne
 8020efe:	2301      	movne	r3, #1
 8020f00:	2300      	moveq	r3, #0
 8020f02:	b2db      	uxtb	r3, r3
 8020f04:	e015      	b.n	8020f32 <HAL_TIM_PWM_Start+0x6a>
 8020f06:	683b      	ldr	r3, [r7, #0]
 8020f08:	2b08      	cmp	r3, #8
 8020f0a:	d109      	bne.n	8020f20 <HAL_TIM_PWM_Start+0x58>
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8020f12:	b2db      	uxtb	r3, r3
 8020f14:	2b01      	cmp	r3, #1
 8020f16:	bf14      	ite	ne
 8020f18:	2301      	movne	r3, #1
 8020f1a:	2300      	moveq	r3, #0
 8020f1c:	b2db      	uxtb	r3, r3
 8020f1e:	e008      	b.n	8020f32 <HAL_TIM_PWM_Start+0x6a>
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020f26:	b2db      	uxtb	r3, r3
 8020f28:	2b01      	cmp	r3, #1
 8020f2a:	bf14      	ite	ne
 8020f2c:	2301      	movne	r3, #1
 8020f2e:	2300      	moveq	r3, #0
 8020f30:	b2db      	uxtb	r3, r3
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d001      	beq.n	8020f3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8020f36:	2301      	movs	r3, #1
 8020f38:	e068      	b.n	802100c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8020f3a:	683b      	ldr	r3, [r7, #0]
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	d104      	bne.n	8020f4a <HAL_TIM_PWM_Start+0x82>
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	2202      	movs	r2, #2
 8020f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8020f48:	e013      	b.n	8020f72 <HAL_TIM_PWM_Start+0xaa>
 8020f4a:	683b      	ldr	r3, [r7, #0]
 8020f4c:	2b04      	cmp	r3, #4
 8020f4e:	d104      	bne.n	8020f5a <HAL_TIM_PWM_Start+0x92>
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	2202      	movs	r2, #2
 8020f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8020f58:	e00b      	b.n	8020f72 <HAL_TIM_PWM_Start+0xaa>
 8020f5a:	683b      	ldr	r3, [r7, #0]
 8020f5c:	2b08      	cmp	r3, #8
 8020f5e:	d104      	bne.n	8020f6a <HAL_TIM_PWM_Start+0xa2>
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	2202      	movs	r2, #2
 8020f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8020f68:	e003      	b.n	8020f72 <HAL_TIM_PWM_Start+0xaa>
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	2202      	movs	r2, #2
 8020f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	2201      	movs	r2, #1
 8020f78:	6839      	ldr	r1, [r7, #0]
 8020f7a:	4618      	mov	r0, r3
 8020f7c:	f000 fed8 	bl	8021d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	4a23      	ldr	r2, [pc, #140]	; (8021014 <HAL_TIM_PWM_Start+0x14c>)
 8020f86:	4293      	cmp	r3, r2
 8020f88:	d107      	bne.n	8020f9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020f98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	681b      	ldr	r3, [r3, #0]
 8020f9e:	4a1d      	ldr	r2, [pc, #116]	; (8021014 <HAL_TIM_PWM_Start+0x14c>)
 8020fa0:	4293      	cmp	r3, r2
 8020fa2:	d018      	beq.n	8020fd6 <HAL_TIM_PWM_Start+0x10e>
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	681b      	ldr	r3, [r3, #0]
 8020fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020fac:	d013      	beq.n	8020fd6 <HAL_TIM_PWM_Start+0x10e>
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	681b      	ldr	r3, [r3, #0]
 8020fb2:	4a19      	ldr	r2, [pc, #100]	; (8021018 <HAL_TIM_PWM_Start+0x150>)
 8020fb4:	4293      	cmp	r3, r2
 8020fb6:	d00e      	beq.n	8020fd6 <HAL_TIM_PWM_Start+0x10e>
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	4a17      	ldr	r2, [pc, #92]	; (802101c <HAL_TIM_PWM_Start+0x154>)
 8020fbe:	4293      	cmp	r3, r2
 8020fc0:	d009      	beq.n	8020fd6 <HAL_TIM_PWM_Start+0x10e>
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	4a16      	ldr	r2, [pc, #88]	; (8021020 <HAL_TIM_PWM_Start+0x158>)
 8020fc8:	4293      	cmp	r3, r2
 8020fca:	d004      	beq.n	8020fd6 <HAL_TIM_PWM_Start+0x10e>
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	4a14      	ldr	r2, [pc, #80]	; (8021024 <HAL_TIM_PWM_Start+0x15c>)
 8020fd2:	4293      	cmp	r3, r2
 8020fd4:	d111      	bne.n	8020ffa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	681b      	ldr	r3, [r3, #0]
 8020fda:	689b      	ldr	r3, [r3, #8]
 8020fdc:	f003 0307 	and.w	r3, r3, #7
 8020fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020fe2:	68fb      	ldr	r3, [r7, #12]
 8020fe4:	2b06      	cmp	r3, #6
 8020fe6:	d010      	beq.n	802100a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	681a      	ldr	r2, [r3, #0]
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	681b      	ldr	r3, [r3, #0]
 8020ff2:	f042 0201 	orr.w	r2, r2, #1
 8020ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020ff8:	e007      	b.n	802100a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	681b      	ldr	r3, [r3, #0]
 8020ffe:	681a      	ldr	r2, [r3, #0]
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	681b      	ldr	r3, [r3, #0]
 8021004:	f042 0201 	orr.w	r2, r2, #1
 8021008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802100a:	2300      	movs	r3, #0
}
 802100c:	4618      	mov	r0, r3
 802100e:	3710      	adds	r7, #16
 8021010:	46bd      	mov	sp, r7
 8021012:	bd80      	pop	{r7, pc}
 8021014:	40010000 	.word	0x40010000
 8021018:	40000400 	.word	0x40000400
 802101c:	40000800 	.word	0x40000800
 8021020:	40000c00 	.word	0x40000c00
 8021024:	40014000 	.word	0x40014000

08021028 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8021028:	b580      	push	{r7, lr}
 802102a:	b084      	sub	sp, #16
 802102c:	af00      	add	r7, sp, #0
 802102e:	6078      	str	r0, [r7, #4]
 8021030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8021032:	2300      	movs	r3, #0
 8021034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8021036:	683b      	ldr	r3, [r7, #0]
 8021038:	2b00      	cmp	r3, #0
 802103a:	d104      	bne.n	8021046 <HAL_TIM_IC_Start_IT+0x1e>
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021042:	b2db      	uxtb	r3, r3
 8021044:	e013      	b.n	802106e <HAL_TIM_IC_Start_IT+0x46>
 8021046:	683b      	ldr	r3, [r7, #0]
 8021048:	2b04      	cmp	r3, #4
 802104a:	d104      	bne.n	8021056 <HAL_TIM_IC_Start_IT+0x2e>
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8021052:	b2db      	uxtb	r3, r3
 8021054:	e00b      	b.n	802106e <HAL_TIM_IC_Start_IT+0x46>
 8021056:	683b      	ldr	r3, [r7, #0]
 8021058:	2b08      	cmp	r3, #8
 802105a:	d104      	bne.n	8021066 <HAL_TIM_IC_Start_IT+0x3e>
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8021062:	b2db      	uxtb	r3, r3
 8021064:	e003      	b.n	802106e <HAL_TIM_IC_Start_IT+0x46>
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802106c:	b2db      	uxtb	r3, r3
 802106e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	2b00      	cmp	r3, #0
 8021074:	d104      	bne.n	8021080 <HAL_TIM_IC_Start_IT+0x58>
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802107c:	b2db      	uxtb	r3, r3
 802107e:	e013      	b.n	80210a8 <HAL_TIM_IC_Start_IT+0x80>
 8021080:	683b      	ldr	r3, [r7, #0]
 8021082:	2b04      	cmp	r3, #4
 8021084:	d104      	bne.n	8021090 <HAL_TIM_IC_Start_IT+0x68>
 8021086:	687b      	ldr	r3, [r7, #4]
 8021088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 802108c:	b2db      	uxtb	r3, r3
 802108e:	e00b      	b.n	80210a8 <HAL_TIM_IC_Start_IT+0x80>
 8021090:	683b      	ldr	r3, [r7, #0]
 8021092:	2b08      	cmp	r3, #8
 8021094:	d104      	bne.n	80210a0 <HAL_TIM_IC_Start_IT+0x78>
 8021096:	687b      	ldr	r3, [r7, #4]
 8021098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802109c:	b2db      	uxtb	r3, r3
 802109e:	e003      	b.n	80210a8 <HAL_TIM_IC_Start_IT+0x80>
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80210a6:	b2db      	uxtb	r3, r3
 80210a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80210aa:	7bbb      	ldrb	r3, [r7, #14]
 80210ac:	2b01      	cmp	r3, #1
 80210ae:	d102      	bne.n	80210b6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80210b0:	7b7b      	ldrb	r3, [r7, #13]
 80210b2:	2b01      	cmp	r3, #1
 80210b4:	d001      	beq.n	80210ba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80210b6:	2301      	movs	r3, #1
 80210b8:	e0c2      	b.n	8021240 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80210ba:	683b      	ldr	r3, [r7, #0]
 80210bc:	2b00      	cmp	r3, #0
 80210be:	d104      	bne.n	80210ca <HAL_TIM_IC_Start_IT+0xa2>
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	2202      	movs	r2, #2
 80210c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80210c8:	e013      	b.n	80210f2 <HAL_TIM_IC_Start_IT+0xca>
 80210ca:	683b      	ldr	r3, [r7, #0]
 80210cc:	2b04      	cmp	r3, #4
 80210ce:	d104      	bne.n	80210da <HAL_TIM_IC_Start_IT+0xb2>
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	2202      	movs	r2, #2
 80210d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80210d8:	e00b      	b.n	80210f2 <HAL_TIM_IC_Start_IT+0xca>
 80210da:	683b      	ldr	r3, [r7, #0]
 80210dc:	2b08      	cmp	r3, #8
 80210de:	d104      	bne.n	80210ea <HAL_TIM_IC_Start_IT+0xc2>
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	2202      	movs	r2, #2
 80210e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80210e8:	e003      	b.n	80210f2 <HAL_TIM_IC_Start_IT+0xca>
 80210ea:	687b      	ldr	r3, [r7, #4]
 80210ec:	2202      	movs	r2, #2
 80210ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80210f2:	683b      	ldr	r3, [r7, #0]
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d104      	bne.n	8021102 <HAL_TIM_IC_Start_IT+0xda>
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	2202      	movs	r2, #2
 80210fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8021100:	e013      	b.n	802112a <HAL_TIM_IC_Start_IT+0x102>
 8021102:	683b      	ldr	r3, [r7, #0]
 8021104:	2b04      	cmp	r3, #4
 8021106:	d104      	bne.n	8021112 <HAL_TIM_IC_Start_IT+0xea>
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	2202      	movs	r2, #2
 802110c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021110:	e00b      	b.n	802112a <HAL_TIM_IC_Start_IT+0x102>
 8021112:	683b      	ldr	r3, [r7, #0]
 8021114:	2b08      	cmp	r3, #8
 8021116:	d104      	bne.n	8021122 <HAL_TIM_IC_Start_IT+0xfa>
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	2202      	movs	r2, #2
 802111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021120:	e003      	b.n	802112a <HAL_TIM_IC_Start_IT+0x102>
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	2202      	movs	r2, #2
 8021126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 802112a:	683b      	ldr	r3, [r7, #0]
 802112c:	2b0c      	cmp	r3, #12
 802112e:	d841      	bhi.n	80211b4 <HAL_TIM_IC_Start_IT+0x18c>
 8021130:	a201      	add	r2, pc, #4	; (adr r2, 8021138 <HAL_TIM_IC_Start_IT+0x110>)
 8021132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021136:	bf00      	nop
 8021138:	0802116d 	.word	0x0802116d
 802113c:	080211b5 	.word	0x080211b5
 8021140:	080211b5 	.word	0x080211b5
 8021144:	080211b5 	.word	0x080211b5
 8021148:	0802117f 	.word	0x0802117f
 802114c:	080211b5 	.word	0x080211b5
 8021150:	080211b5 	.word	0x080211b5
 8021154:	080211b5 	.word	0x080211b5
 8021158:	08021191 	.word	0x08021191
 802115c:	080211b5 	.word	0x080211b5
 8021160:	080211b5 	.word	0x080211b5
 8021164:	080211b5 	.word	0x080211b5
 8021168:	080211a3 	.word	0x080211a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	68da      	ldr	r2, [r3, #12]
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	f042 0202 	orr.w	r2, r2, #2
 802117a:	60da      	str	r2, [r3, #12]
      break;
 802117c:	e01d      	b.n	80211ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	68da      	ldr	r2, [r3, #12]
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	f042 0204 	orr.w	r2, r2, #4
 802118c:	60da      	str	r2, [r3, #12]
      break;
 802118e:	e014      	b.n	80211ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8021190:	687b      	ldr	r3, [r7, #4]
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	68da      	ldr	r2, [r3, #12]
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	681b      	ldr	r3, [r3, #0]
 802119a:	f042 0208 	orr.w	r2, r2, #8
 802119e:	60da      	str	r2, [r3, #12]
      break;
 80211a0:	e00b      	b.n	80211ba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	68da      	ldr	r2, [r3, #12]
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	f042 0210 	orr.w	r2, r2, #16
 80211b0:	60da      	str	r2, [r3, #12]
      break;
 80211b2:	e002      	b.n	80211ba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80211b4:	2301      	movs	r3, #1
 80211b6:	73fb      	strb	r3, [r7, #15]
      break;
 80211b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80211ba:	7bfb      	ldrb	r3, [r7, #15]
 80211bc:	2b00      	cmp	r3, #0
 80211be:	d13e      	bne.n	802123e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	2201      	movs	r2, #1
 80211c6:	6839      	ldr	r1, [r7, #0]
 80211c8:	4618      	mov	r0, r3
 80211ca:	f000 fdb1 	bl	8021d30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	681b      	ldr	r3, [r3, #0]
 80211d2:	4a1d      	ldr	r2, [pc, #116]	; (8021248 <HAL_TIM_IC_Start_IT+0x220>)
 80211d4:	4293      	cmp	r3, r2
 80211d6:	d018      	beq.n	802120a <HAL_TIM_IC_Start_IT+0x1e2>
 80211d8:	687b      	ldr	r3, [r7, #4]
 80211da:	681b      	ldr	r3, [r3, #0]
 80211dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80211e0:	d013      	beq.n	802120a <HAL_TIM_IC_Start_IT+0x1e2>
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	681b      	ldr	r3, [r3, #0]
 80211e6:	4a19      	ldr	r2, [pc, #100]	; (802124c <HAL_TIM_IC_Start_IT+0x224>)
 80211e8:	4293      	cmp	r3, r2
 80211ea:	d00e      	beq.n	802120a <HAL_TIM_IC_Start_IT+0x1e2>
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	4a17      	ldr	r2, [pc, #92]	; (8021250 <HAL_TIM_IC_Start_IT+0x228>)
 80211f2:	4293      	cmp	r3, r2
 80211f4:	d009      	beq.n	802120a <HAL_TIM_IC_Start_IT+0x1e2>
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	4a16      	ldr	r2, [pc, #88]	; (8021254 <HAL_TIM_IC_Start_IT+0x22c>)
 80211fc:	4293      	cmp	r3, r2
 80211fe:	d004      	beq.n	802120a <HAL_TIM_IC_Start_IT+0x1e2>
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	4a14      	ldr	r2, [pc, #80]	; (8021258 <HAL_TIM_IC_Start_IT+0x230>)
 8021206:	4293      	cmp	r3, r2
 8021208:	d111      	bne.n	802122e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	681b      	ldr	r3, [r3, #0]
 802120e:	689b      	ldr	r3, [r3, #8]
 8021210:	f003 0307 	and.w	r3, r3, #7
 8021214:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021216:	68bb      	ldr	r3, [r7, #8]
 8021218:	2b06      	cmp	r3, #6
 802121a:	d010      	beq.n	802123e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	681b      	ldr	r3, [r3, #0]
 8021220:	681a      	ldr	r2, [r3, #0]
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	f042 0201 	orr.w	r2, r2, #1
 802122a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802122c:	e007      	b.n	802123e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	681a      	ldr	r2, [r3, #0]
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	681b      	ldr	r3, [r3, #0]
 8021238:	f042 0201 	orr.w	r2, r2, #1
 802123c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 802123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021240:	4618      	mov	r0, r3
 8021242:	3710      	adds	r7, #16
 8021244:	46bd      	mov	sp, r7
 8021246:	bd80      	pop	{r7, pc}
 8021248:	40010000 	.word	0x40010000
 802124c:	40000400 	.word	0x40000400
 8021250:	40000800 	.word	0x40000800
 8021254:	40000c00 	.word	0x40000c00
 8021258:	40014000 	.word	0x40014000

0802125c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802125c:	b580      	push	{r7, lr}
 802125e:	b082      	sub	sp, #8
 8021260:	af00      	add	r7, sp, #0
 8021262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	691b      	ldr	r3, [r3, #16]
 802126a:	f003 0302 	and.w	r3, r3, #2
 802126e:	2b02      	cmp	r3, #2
 8021270:	d122      	bne.n	80212b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	681b      	ldr	r3, [r3, #0]
 8021276:	68db      	ldr	r3, [r3, #12]
 8021278:	f003 0302 	and.w	r3, r3, #2
 802127c:	2b02      	cmp	r3, #2
 802127e:	d11b      	bne.n	80212b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8021280:	687b      	ldr	r3, [r7, #4]
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	f06f 0202 	mvn.w	r2, #2
 8021288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	2201      	movs	r2, #1
 802128e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	699b      	ldr	r3, [r3, #24]
 8021296:	f003 0303 	and.w	r3, r3, #3
 802129a:	2b00      	cmp	r3, #0
 802129c:	d003      	beq.n	80212a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802129e:	6878      	ldr	r0, [r7, #4]
 80212a0:	f000 fa81 	bl	80217a6 <HAL_TIM_IC_CaptureCallback>
 80212a4:	e005      	b.n	80212b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80212a6:	6878      	ldr	r0, [r7, #4]
 80212a8:	f000 fa73 	bl	8021792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80212ac:	6878      	ldr	r0, [r7, #4]
 80212ae:	f000 fa84 	bl	80217ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	2200      	movs	r2, #0
 80212b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	691b      	ldr	r3, [r3, #16]
 80212be:	f003 0304 	and.w	r3, r3, #4
 80212c2:	2b04      	cmp	r3, #4
 80212c4:	d122      	bne.n	802130c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	681b      	ldr	r3, [r3, #0]
 80212ca:	68db      	ldr	r3, [r3, #12]
 80212cc:	f003 0304 	and.w	r3, r3, #4
 80212d0:	2b04      	cmp	r3, #4
 80212d2:	d11b      	bne.n	802130c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	f06f 0204 	mvn.w	r2, #4
 80212dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80212de:	687b      	ldr	r3, [r7, #4]
 80212e0:	2202      	movs	r2, #2
 80212e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	699b      	ldr	r3, [r3, #24]
 80212ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80212ee:	2b00      	cmp	r3, #0
 80212f0:	d003      	beq.n	80212fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80212f2:	6878      	ldr	r0, [r7, #4]
 80212f4:	f000 fa57 	bl	80217a6 <HAL_TIM_IC_CaptureCallback>
 80212f8:	e005      	b.n	8021306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80212fa:	6878      	ldr	r0, [r7, #4]
 80212fc:	f000 fa49 	bl	8021792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021300:	6878      	ldr	r0, [r7, #4]
 8021302:	f000 fa5a 	bl	80217ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	2200      	movs	r2, #0
 802130a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	691b      	ldr	r3, [r3, #16]
 8021312:	f003 0308 	and.w	r3, r3, #8
 8021316:	2b08      	cmp	r3, #8
 8021318:	d122      	bne.n	8021360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	68db      	ldr	r3, [r3, #12]
 8021320:	f003 0308 	and.w	r3, r3, #8
 8021324:	2b08      	cmp	r3, #8
 8021326:	d11b      	bne.n	8021360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	681b      	ldr	r3, [r3, #0]
 802132c:	f06f 0208 	mvn.w	r2, #8
 8021330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	2204      	movs	r2, #4
 8021336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	681b      	ldr	r3, [r3, #0]
 802133c:	69db      	ldr	r3, [r3, #28]
 802133e:	f003 0303 	and.w	r3, r3, #3
 8021342:	2b00      	cmp	r3, #0
 8021344:	d003      	beq.n	802134e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021346:	6878      	ldr	r0, [r7, #4]
 8021348:	f000 fa2d 	bl	80217a6 <HAL_TIM_IC_CaptureCallback>
 802134c:	e005      	b.n	802135a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802134e:	6878      	ldr	r0, [r7, #4]
 8021350:	f000 fa1f 	bl	8021792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021354:	6878      	ldr	r0, [r7, #4]
 8021356:	f000 fa30 	bl	80217ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	2200      	movs	r2, #0
 802135e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	691b      	ldr	r3, [r3, #16]
 8021366:	f003 0310 	and.w	r3, r3, #16
 802136a:	2b10      	cmp	r3, #16
 802136c:	d122      	bne.n	80213b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	68db      	ldr	r3, [r3, #12]
 8021374:	f003 0310 	and.w	r3, r3, #16
 8021378:	2b10      	cmp	r3, #16
 802137a:	d11b      	bne.n	80213b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	681b      	ldr	r3, [r3, #0]
 8021380:	f06f 0210 	mvn.w	r2, #16
 8021384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8021386:	687b      	ldr	r3, [r7, #4]
 8021388:	2208      	movs	r2, #8
 802138a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	681b      	ldr	r3, [r3, #0]
 8021390:	69db      	ldr	r3, [r3, #28]
 8021392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021396:	2b00      	cmp	r3, #0
 8021398:	d003      	beq.n	80213a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802139a:	6878      	ldr	r0, [r7, #4]
 802139c:	f000 fa03 	bl	80217a6 <HAL_TIM_IC_CaptureCallback>
 80213a0:	e005      	b.n	80213ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80213a2:	6878      	ldr	r0, [r7, #4]
 80213a4:	f000 f9f5 	bl	8021792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80213a8:	6878      	ldr	r0, [r7, #4]
 80213aa:	f000 fa06 	bl	80217ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	2200      	movs	r2, #0
 80213b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	691b      	ldr	r3, [r3, #16]
 80213ba:	f003 0301 	and.w	r3, r3, #1
 80213be:	2b01      	cmp	r3, #1
 80213c0:	d10e      	bne.n	80213e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	681b      	ldr	r3, [r3, #0]
 80213c6:	68db      	ldr	r3, [r3, #12]
 80213c8:	f003 0301 	and.w	r3, r3, #1
 80213cc:	2b01      	cmp	r3, #1
 80213ce:	d107      	bne.n	80213e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	681b      	ldr	r3, [r3, #0]
 80213d4:	f06f 0201 	mvn.w	r2, #1
 80213d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80213da:	6878      	ldr	r0, [r7, #4]
 80213dc:	f000 f9cf 	bl	802177e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	691b      	ldr	r3, [r3, #16]
 80213e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80213ea:	2b80      	cmp	r3, #128	; 0x80
 80213ec:	d10e      	bne.n	802140c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80213ee:	687b      	ldr	r3, [r7, #4]
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	68db      	ldr	r3, [r3, #12]
 80213f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80213f8:	2b80      	cmp	r3, #128	; 0x80
 80213fa:	d107      	bne.n	802140c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8021404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 fd30 	bl	8021e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	691b      	ldr	r3, [r3, #16]
 8021412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021416:	2b40      	cmp	r3, #64	; 0x40
 8021418:	d10e      	bne.n	8021438 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	681b      	ldr	r3, [r3, #0]
 802141e:	68db      	ldr	r3, [r3, #12]
 8021420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021424:	2b40      	cmp	r3, #64	; 0x40
 8021426:	d107      	bne.n	8021438 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8021428:	687b      	ldr	r3, [r7, #4]
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8021430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8021432:	6878      	ldr	r0, [r7, #4]
 8021434:	f000 f9cb 	bl	80217ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	691b      	ldr	r3, [r3, #16]
 802143e:	f003 0320 	and.w	r3, r3, #32
 8021442:	2b20      	cmp	r3, #32
 8021444:	d10e      	bne.n	8021464 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	68db      	ldr	r3, [r3, #12]
 802144c:	f003 0320 	and.w	r3, r3, #32
 8021450:	2b20      	cmp	r3, #32
 8021452:	d107      	bne.n	8021464 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	f06f 0220 	mvn.w	r2, #32
 802145c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802145e:	6878      	ldr	r0, [r7, #4]
 8021460:	f000 fcfa 	bl	8021e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8021464:	bf00      	nop
 8021466:	3708      	adds	r7, #8
 8021468:	46bd      	mov	sp, r7
 802146a:	bd80      	pop	{r7, pc}

0802146c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802146c:	b580      	push	{r7, lr}
 802146e:	b086      	sub	sp, #24
 8021470:	af00      	add	r7, sp, #0
 8021472:	60f8      	str	r0, [r7, #12]
 8021474:	60b9      	str	r1, [r7, #8]
 8021476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021478:	2300      	movs	r3, #0
 802147a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802147c:	68fb      	ldr	r3, [r7, #12]
 802147e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021482:	2b01      	cmp	r3, #1
 8021484:	d101      	bne.n	802148a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8021486:	2302      	movs	r3, #2
 8021488:	e0ae      	b.n	80215e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 802148a:	68fb      	ldr	r3, [r7, #12]
 802148c:	2201      	movs	r2, #1
 802148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	2b0c      	cmp	r3, #12
 8021496:	f200 809f 	bhi.w	80215d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 802149a:	a201      	add	r2, pc, #4	; (adr r2, 80214a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214a0:	080214d5 	.word	0x080214d5
 80214a4:	080215d9 	.word	0x080215d9
 80214a8:	080215d9 	.word	0x080215d9
 80214ac:	080215d9 	.word	0x080215d9
 80214b0:	08021515 	.word	0x08021515
 80214b4:	080215d9 	.word	0x080215d9
 80214b8:	080215d9 	.word	0x080215d9
 80214bc:	080215d9 	.word	0x080215d9
 80214c0:	08021557 	.word	0x08021557
 80214c4:	080215d9 	.word	0x080215d9
 80214c8:	080215d9 	.word	0x080215d9
 80214cc:	080215d9 	.word	0x080215d9
 80214d0:	08021597 	.word	0x08021597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80214d4:	68fb      	ldr	r3, [r7, #12]
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	68b9      	ldr	r1, [r7, #8]
 80214da:	4618      	mov	r0, r3
 80214dc:	f000 fa02 	bl	80218e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80214e0:	68fb      	ldr	r3, [r7, #12]
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	699a      	ldr	r2, [r3, #24]
 80214e6:	68fb      	ldr	r3, [r7, #12]
 80214e8:	681b      	ldr	r3, [r3, #0]
 80214ea:	f042 0208 	orr.w	r2, r2, #8
 80214ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80214f0:	68fb      	ldr	r3, [r7, #12]
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	699a      	ldr	r2, [r3, #24]
 80214f6:	68fb      	ldr	r3, [r7, #12]
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	f022 0204 	bic.w	r2, r2, #4
 80214fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8021500:	68fb      	ldr	r3, [r7, #12]
 8021502:	681b      	ldr	r3, [r3, #0]
 8021504:	6999      	ldr	r1, [r3, #24]
 8021506:	68bb      	ldr	r3, [r7, #8]
 8021508:	691a      	ldr	r2, [r3, #16]
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	430a      	orrs	r2, r1
 8021510:	619a      	str	r2, [r3, #24]
      break;
 8021512:	e064      	b.n	80215de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8021514:	68fb      	ldr	r3, [r7, #12]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	68b9      	ldr	r1, [r7, #8]
 802151a:	4618      	mov	r0, r3
 802151c:	f000 fa48 	bl	80219b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8021520:	68fb      	ldr	r3, [r7, #12]
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	699a      	ldr	r2, [r3, #24]
 8021526:	68fb      	ldr	r3, [r7, #12]
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802152e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8021530:	68fb      	ldr	r3, [r7, #12]
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	699a      	ldr	r2, [r3, #24]
 8021536:	68fb      	ldr	r3, [r7, #12]
 8021538:	681b      	ldr	r3, [r3, #0]
 802153a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802153e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8021540:	68fb      	ldr	r3, [r7, #12]
 8021542:	681b      	ldr	r3, [r3, #0]
 8021544:	6999      	ldr	r1, [r3, #24]
 8021546:	68bb      	ldr	r3, [r7, #8]
 8021548:	691b      	ldr	r3, [r3, #16]
 802154a:	021a      	lsls	r2, r3, #8
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	681b      	ldr	r3, [r3, #0]
 8021550:	430a      	orrs	r2, r1
 8021552:	619a      	str	r2, [r3, #24]
      break;
 8021554:	e043      	b.n	80215de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8021556:	68fb      	ldr	r3, [r7, #12]
 8021558:	681b      	ldr	r3, [r3, #0]
 802155a:	68b9      	ldr	r1, [r7, #8]
 802155c:	4618      	mov	r0, r3
 802155e:	f000 fa93 	bl	8021a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8021562:	68fb      	ldr	r3, [r7, #12]
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	69da      	ldr	r2, [r3, #28]
 8021568:	68fb      	ldr	r3, [r7, #12]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	f042 0208 	orr.w	r2, r2, #8
 8021570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8021572:	68fb      	ldr	r3, [r7, #12]
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	69da      	ldr	r2, [r3, #28]
 8021578:	68fb      	ldr	r3, [r7, #12]
 802157a:	681b      	ldr	r3, [r3, #0]
 802157c:	f022 0204 	bic.w	r2, r2, #4
 8021580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8021582:	68fb      	ldr	r3, [r7, #12]
 8021584:	681b      	ldr	r3, [r3, #0]
 8021586:	69d9      	ldr	r1, [r3, #28]
 8021588:	68bb      	ldr	r3, [r7, #8]
 802158a:	691a      	ldr	r2, [r3, #16]
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	430a      	orrs	r2, r1
 8021592:	61da      	str	r2, [r3, #28]
      break;
 8021594:	e023      	b.n	80215de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8021596:	68fb      	ldr	r3, [r7, #12]
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	68b9      	ldr	r1, [r7, #8]
 802159c:	4618      	mov	r0, r3
 802159e:	f000 fadd 	bl	8021b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80215a2:	68fb      	ldr	r3, [r7, #12]
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	69da      	ldr	r2, [r3, #28]
 80215a8:	68fb      	ldr	r3, [r7, #12]
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80215b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80215b2:	68fb      	ldr	r3, [r7, #12]
 80215b4:	681b      	ldr	r3, [r3, #0]
 80215b6:	69da      	ldr	r2, [r3, #28]
 80215b8:	68fb      	ldr	r3, [r7, #12]
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80215c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80215c2:	68fb      	ldr	r3, [r7, #12]
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	69d9      	ldr	r1, [r3, #28]
 80215c8:	68bb      	ldr	r3, [r7, #8]
 80215ca:	691b      	ldr	r3, [r3, #16]
 80215cc:	021a      	lsls	r2, r3, #8
 80215ce:	68fb      	ldr	r3, [r7, #12]
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	430a      	orrs	r2, r1
 80215d4:	61da      	str	r2, [r3, #28]
      break;
 80215d6:	e002      	b.n	80215de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80215d8:	2301      	movs	r3, #1
 80215da:	75fb      	strb	r3, [r7, #23]
      break;
 80215dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80215de:	68fb      	ldr	r3, [r7, #12]
 80215e0:	2200      	movs	r2, #0
 80215e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80215e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80215e8:	4618      	mov	r0, r3
 80215ea:	3718      	adds	r7, #24
 80215ec:	46bd      	mov	sp, r7
 80215ee:	bd80      	pop	{r7, pc}

080215f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80215f0:	b580      	push	{r7, lr}
 80215f2:	b084      	sub	sp, #16
 80215f4:	af00      	add	r7, sp, #0
 80215f6:	6078      	str	r0, [r7, #4]
 80215f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80215fa:	2300      	movs	r3, #0
 80215fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021604:	2b01      	cmp	r3, #1
 8021606:	d101      	bne.n	802160c <HAL_TIM_ConfigClockSource+0x1c>
 8021608:	2302      	movs	r3, #2
 802160a:	e0b4      	b.n	8021776 <HAL_TIM_ConfigClockSource+0x186>
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	2201      	movs	r2, #1
 8021610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	2202      	movs	r2, #2
 8021618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	689b      	ldr	r3, [r3, #8]
 8021622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8021624:	68bb      	ldr	r3, [r7, #8]
 8021626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802162a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802162c:	68bb      	ldr	r3, [r7, #8]
 802162e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	681b      	ldr	r3, [r3, #0]
 8021638:	68ba      	ldr	r2, [r7, #8]
 802163a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802163c:	683b      	ldr	r3, [r7, #0]
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8021644:	d03e      	beq.n	80216c4 <HAL_TIM_ConfigClockSource+0xd4>
 8021646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802164a:	f200 8087 	bhi.w	802175c <HAL_TIM_ConfigClockSource+0x16c>
 802164e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021652:	f000 8086 	beq.w	8021762 <HAL_TIM_ConfigClockSource+0x172>
 8021656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802165a:	d87f      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 802165c:	2b70      	cmp	r3, #112	; 0x70
 802165e:	d01a      	beq.n	8021696 <HAL_TIM_ConfigClockSource+0xa6>
 8021660:	2b70      	cmp	r3, #112	; 0x70
 8021662:	d87b      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 8021664:	2b60      	cmp	r3, #96	; 0x60
 8021666:	d050      	beq.n	802170a <HAL_TIM_ConfigClockSource+0x11a>
 8021668:	2b60      	cmp	r3, #96	; 0x60
 802166a:	d877      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 802166c:	2b50      	cmp	r3, #80	; 0x50
 802166e:	d03c      	beq.n	80216ea <HAL_TIM_ConfigClockSource+0xfa>
 8021670:	2b50      	cmp	r3, #80	; 0x50
 8021672:	d873      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 8021674:	2b40      	cmp	r3, #64	; 0x40
 8021676:	d058      	beq.n	802172a <HAL_TIM_ConfigClockSource+0x13a>
 8021678:	2b40      	cmp	r3, #64	; 0x40
 802167a:	d86f      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 802167c:	2b30      	cmp	r3, #48	; 0x30
 802167e:	d064      	beq.n	802174a <HAL_TIM_ConfigClockSource+0x15a>
 8021680:	2b30      	cmp	r3, #48	; 0x30
 8021682:	d86b      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 8021684:	2b20      	cmp	r3, #32
 8021686:	d060      	beq.n	802174a <HAL_TIM_ConfigClockSource+0x15a>
 8021688:	2b20      	cmp	r3, #32
 802168a:	d867      	bhi.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
 802168c:	2b00      	cmp	r3, #0
 802168e:	d05c      	beq.n	802174a <HAL_TIM_ConfigClockSource+0x15a>
 8021690:	2b10      	cmp	r3, #16
 8021692:	d05a      	beq.n	802174a <HAL_TIM_ConfigClockSource+0x15a>
 8021694:	e062      	b.n	802175c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	6818      	ldr	r0, [r3, #0]
 802169a:	683b      	ldr	r3, [r7, #0]
 802169c:	6899      	ldr	r1, [r3, #8]
 802169e:	683b      	ldr	r3, [r7, #0]
 80216a0:	685a      	ldr	r2, [r3, #4]
 80216a2:	683b      	ldr	r3, [r7, #0]
 80216a4:	68db      	ldr	r3, [r3, #12]
 80216a6:	f000 fb23 	bl	8021cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	681b      	ldr	r3, [r3, #0]
 80216ae:	689b      	ldr	r3, [r3, #8]
 80216b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80216b2:	68bb      	ldr	r3, [r7, #8]
 80216b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80216b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	68ba      	ldr	r2, [r7, #8]
 80216c0:	609a      	str	r2, [r3, #8]
      break;
 80216c2:	e04f      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	6818      	ldr	r0, [r3, #0]
 80216c8:	683b      	ldr	r3, [r7, #0]
 80216ca:	6899      	ldr	r1, [r3, #8]
 80216cc:	683b      	ldr	r3, [r7, #0]
 80216ce:	685a      	ldr	r2, [r3, #4]
 80216d0:	683b      	ldr	r3, [r7, #0]
 80216d2:	68db      	ldr	r3, [r3, #12]
 80216d4:	f000 fb0c 	bl	8021cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	681b      	ldr	r3, [r3, #0]
 80216dc:	689a      	ldr	r2, [r3, #8]
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	681b      	ldr	r3, [r3, #0]
 80216e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80216e6:	609a      	str	r2, [r3, #8]
      break;
 80216e8:	e03c      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	6818      	ldr	r0, [r3, #0]
 80216ee:	683b      	ldr	r3, [r7, #0]
 80216f0:	6859      	ldr	r1, [r3, #4]
 80216f2:	683b      	ldr	r3, [r7, #0]
 80216f4:	68db      	ldr	r3, [r3, #12]
 80216f6:	461a      	mov	r2, r3
 80216f8:	f000 fa80 	bl	8021bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	681b      	ldr	r3, [r3, #0]
 8021700:	2150      	movs	r1, #80	; 0x50
 8021702:	4618      	mov	r0, r3
 8021704:	f000 fad9 	bl	8021cba <TIM_ITRx_SetConfig>
      break;
 8021708:	e02c      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	6818      	ldr	r0, [r3, #0]
 802170e:	683b      	ldr	r3, [r7, #0]
 8021710:	6859      	ldr	r1, [r3, #4]
 8021712:	683b      	ldr	r3, [r7, #0]
 8021714:	68db      	ldr	r3, [r3, #12]
 8021716:	461a      	mov	r2, r3
 8021718:	f000 fa9f 	bl	8021c5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	681b      	ldr	r3, [r3, #0]
 8021720:	2160      	movs	r1, #96	; 0x60
 8021722:	4618      	mov	r0, r3
 8021724:	f000 fac9 	bl	8021cba <TIM_ITRx_SetConfig>
      break;
 8021728:	e01c      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	6818      	ldr	r0, [r3, #0]
 802172e:	683b      	ldr	r3, [r7, #0]
 8021730:	6859      	ldr	r1, [r3, #4]
 8021732:	683b      	ldr	r3, [r7, #0]
 8021734:	68db      	ldr	r3, [r3, #12]
 8021736:	461a      	mov	r2, r3
 8021738:	f000 fa60 	bl	8021bfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802173c:	687b      	ldr	r3, [r7, #4]
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	2140      	movs	r1, #64	; 0x40
 8021742:	4618      	mov	r0, r3
 8021744:	f000 fab9 	bl	8021cba <TIM_ITRx_SetConfig>
      break;
 8021748:	e00c      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	681a      	ldr	r2, [r3, #0]
 802174e:	683b      	ldr	r3, [r7, #0]
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	4619      	mov	r1, r3
 8021754:	4610      	mov	r0, r2
 8021756:	f000 fab0 	bl	8021cba <TIM_ITRx_SetConfig>
      break;
 802175a:	e003      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 802175c:	2301      	movs	r3, #1
 802175e:	73fb      	strb	r3, [r7, #15]
      break;
 8021760:	e000      	b.n	8021764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8021762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	2201      	movs	r2, #1
 8021768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	2200      	movs	r2, #0
 8021770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8021774:	7bfb      	ldrb	r3, [r7, #15]
}
 8021776:	4618      	mov	r0, r3
 8021778:	3710      	adds	r7, #16
 802177a:	46bd      	mov	sp, r7
 802177c:	bd80      	pop	{r7, pc}

0802177e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802177e:	b480      	push	{r7}
 8021780:	b083      	sub	sp, #12
 8021782:	af00      	add	r7, sp, #0
 8021784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8021786:	bf00      	nop
 8021788:	370c      	adds	r7, #12
 802178a:	46bd      	mov	sp, r7
 802178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021790:	4770      	bx	lr

08021792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021792:	b480      	push	{r7}
 8021794:	b083      	sub	sp, #12
 8021796:	af00      	add	r7, sp, #0
 8021798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802179a:	bf00      	nop
 802179c:	370c      	adds	r7, #12
 802179e:	46bd      	mov	sp, r7
 80217a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a4:	4770      	bx	lr

080217a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80217a6:	b480      	push	{r7}
 80217a8:	b083      	sub	sp, #12
 80217aa:	af00      	add	r7, sp, #0
 80217ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80217ae:	bf00      	nop
 80217b0:	370c      	adds	r7, #12
 80217b2:	46bd      	mov	sp, r7
 80217b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b8:	4770      	bx	lr

080217ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80217ba:	b480      	push	{r7}
 80217bc:	b083      	sub	sp, #12
 80217be:	af00      	add	r7, sp, #0
 80217c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80217c2:	bf00      	nop
 80217c4:	370c      	adds	r7, #12
 80217c6:	46bd      	mov	sp, r7
 80217c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217cc:	4770      	bx	lr

080217ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80217ce:	b480      	push	{r7}
 80217d0:	b083      	sub	sp, #12
 80217d2:	af00      	add	r7, sp, #0
 80217d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80217d6:	bf00      	nop
 80217d8:	370c      	adds	r7, #12
 80217da:	46bd      	mov	sp, r7
 80217dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e0:	4770      	bx	lr
	...

080217e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80217e4:	b480      	push	{r7}
 80217e6:	b085      	sub	sp, #20
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
 80217ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80217ee:	687b      	ldr	r3, [r7, #4]
 80217f0:	681b      	ldr	r3, [r3, #0]
 80217f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80217f4:	687b      	ldr	r3, [r7, #4]
 80217f6:	4a34      	ldr	r2, [pc, #208]	; (80218c8 <TIM_Base_SetConfig+0xe4>)
 80217f8:	4293      	cmp	r3, r2
 80217fa:	d00f      	beq.n	802181c <TIM_Base_SetConfig+0x38>
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021802:	d00b      	beq.n	802181c <TIM_Base_SetConfig+0x38>
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	4a31      	ldr	r2, [pc, #196]	; (80218cc <TIM_Base_SetConfig+0xe8>)
 8021808:	4293      	cmp	r3, r2
 802180a:	d007      	beq.n	802181c <TIM_Base_SetConfig+0x38>
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	4a30      	ldr	r2, [pc, #192]	; (80218d0 <TIM_Base_SetConfig+0xec>)
 8021810:	4293      	cmp	r3, r2
 8021812:	d003      	beq.n	802181c <TIM_Base_SetConfig+0x38>
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	4a2f      	ldr	r2, [pc, #188]	; (80218d4 <TIM_Base_SetConfig+0xf0>)
 8021818:	4293      	cmp	r3, r2
 802181a:	d108      	bne.n	802182e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802181c:	68fb      	ldr	r3, [r7, #12]
 802181e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8021824:	683b      	ldr	r3, [r7, #0]
 8021826:	685b      	ldr	r3, [r3, #4]
 8021828:	68fa      	ldr	r2, [r7, #12]
 802182a:	4313      	orrs	r3, r2
 802182c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	4a25      	ldr	r2, [pc, #148]	; (80218c8 <TIM_Base_SetConfig+0xe4>)
 8021832:	4293      	cmp	r3, r2
 8021834:	d01b      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802183c:	d017      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	4a22      	ldr	r2, [pc, #136]	; (80218cc <TIM_Base_SetConfig+0xe8>)
 8021842:	4293      	cmp	r3, r2
 8021844:	d013      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	4a21      	ldr	r2, [pc, #132]	; (80218d0 <TIM_Base_SetConfig+0xec>)
 802184a:	4293      	cmp	r3, r2
 802184c:	d00f      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 802184e:	687b      	ldr	r3, [r7, #4]
 8021850:	4a20      	ldr	r2, [pc, #128]	; (80218d4 <TIM_Base_SetConfig+0xf0>)
 8021852:	4293      	cmp	r3, r2
 8021854:	d00b      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	4a1f      	ldr	r2, [pc, #124]	; (80218d8 <TIM_Base_SetConfig+0xf4>)
 802185a:	4293      	cmp	r3, r2
 802185c:	d007      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	4a1e      	ldr	r2, [pc, #120]	; (80218dc <TIM_Base_SetConfig+0xf8>)
 8021862:	4293      	cmp	r3, r2
 8021864:	d003      	beq.n	802186e <TIM_Base_SetConfig+0x8a>
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	4a1d      	ldr	r2, [pc, #116]	; (80218e0 <TIM_Base_SetConfig+0xfc>)
 802186a:	4293      	cmp	r3, r2
 802186c:	d108      	bne.n	8021880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802186e:	68fb      	ldr	r3, [r7, #12]
 8021870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8021876:	683b      	ldr	r3, [r7, #0]
 8021878:	68db      	ldr	r3, [r3, #12]
 802187a:	68fa      	ldr	r2, [r7, #12]
 802187c:	4313      	orrs	r3, r2
 802187e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8021886:	683b      	ldr	r3, [r7, #0]
 8021888:	695b      	ldr	r3, [r3, #20]
 802188a:	4313      	orrs	r3, r2
 802188c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	68fa      	ldr	r2, [r7, #12]
 8021892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8021894:	683b      	ldr	r3, [r7, #0]
 8021896:	689a      	ldr	r2, [r3, #8]
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802189c:	683b      	ldr	r3, [r7, #0]
 802189e:	681a      	ldr	r2, [r3, #0]
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80218a4:	687b      	ldr	r3, [r7, #4]
 80218a6:	4a08      	ldr	r2, [pc, #32]	; (80218c8 <TIM_Base_SetConfig+0xe4>)
 80218a8:	4293      	cmp	r3, r2
 80218aa:	d103      	bne.n	80218b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80218ac:	683b      	ldr	r3, [r7, #0]
 80218ae:	691a      	ldr	r2, [r3, #16]
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	2201      	movs	r2, #1
 80218b8:	615a      	str	r2, [r3, #20]
}
 80218ba:	bf00      	nop
 80218bc:	3714      	adds	r7, #20
 80218be:	46bd      	mov	sp, r7
 80218c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218c4:	4770      	bx	lr
 80218c6:	bf00      	nop
 80218c8:	40010000 	.word	0x40010000
 80218cc:	40000400 	.word	0x40000400
 80218d0:	40000800 	.word	0x40000800
 80218d4:	40000c00 	.word	0x40000c00
 80218d8:	40014000 	.word	0x40014000
 80218dc:	40014400 	.word	0x40014400
 80218e0:	40014800 	.word	0x40014800

080218e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80218e4:	b480      	push	{r7}
 80218e6:	b087      	sub	sp, #28
 80218e8:	af00      	add	r7, sp, #0
 80218ea:	6078      	str	r0, [r7, #4]
 80218ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	6a1b      	ldr	r3, [r3, #32]
 80218f2:	f023 0201 	bic.w	r2, r3, #1
 80218f6:	687b      	ldr	r3, [r7, #4]
 80218f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	6a1b      	ldr	r3, [r3, #32]
 80218fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	685b      	ldr	r3, [r3, #4]
 8021904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8021906:	687b      	ldr	r3, [r7, #4]
 8021908:	699b      	ldr	r3, [r3, #24]
 802190a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	f023 0303 	bic.w	r3, r3, #3
 802191a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802191c:	683b      	ldr	r3, [r7, #0]
 802191e:	681b      	ldr	r3, [r3, #0]
 8021920:	68fa      	ldr	r2, [r7, #12]
 8021922:	4313      	orrs	r3, r2
 8021924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8021926:	697b      	ldr	r3, [r7, #20]
 8021928:	f023 0302 	bic.w	r3, r3, #2
 802192c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802192e:	683b      	ldr	r3, [r7, #0]
 8021930:	689b      	ldr	r3, [r3, #8]
 8021932:	697a      	ldr	r2, [r7, #20]
 8021934:	4313      	orrs	r3, r2
 8021936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	4a1c      	ldr	r2, [pc, #112]	; (80219ac <TIM_OC1_SetConfig+0xc8>)
 802193c:	4293      	cmp	r3, r2
 802193e:	d10c      	bne.n	802195a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8021940:	697b      	ldr	r3, [r7, #20]
 8021942:	f023 0308 	bic.w	r3, r3, #8
 8021946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8021948:	683b      	ldr	r3, [r7, #0]
 802194a:	68db      	ldr	r3, [r3, #12]
 802194c:	697a      	ldr	r2, [r7, #20]
 802194e:	4313      	orrs	r3, r2
 8021950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8021952:	697b      	ldr	r3, [r7, #20]
 8021954:	f023 0304 	bic.w	r3, r3, #4
 8021958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	4a13      	ldr	r2, [pc, #76]	; (80219ac <TIM_OC1_SetConfig+0xc8>)
 802195e:	4293      	cmp	r3, r2
 8021960:	d111      	bne.n	8021986 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8021962:	693b      	ldr	r3, [r7, #16]
 8021964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8021968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802196a:	693b      	ldr	r3, [r7, #16]
 802196c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8021972:	683b      	ldr	r3, [r7, #0]
 8021974:	695b      	ldr	r3, [r3, #20]
 8021976:	693a      	ldr	r2, [r7, #16]
 8021978:	4313      	orrs	r3, r2
 802197a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802197c:	683b      	ldr	r3, [r7, #0]
 802197e:	699b      	ldr	r3, [r3, #24]
 8021980:	693a      	ldr	r2, [r7, #16]
 8021982:	4313      	orrs	r3, r2
 8021984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	693a      	ldr	r2, [r7, #16]
 802198a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	68fa      	ldr	r2, [r7, #12]
 8021990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8021992:	683b      	ldr	r3, [r7, #0]
 8021994:	685a      	ldr	r2, [r3, #4]
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	697a      	ldr	r2, [r7, #20]
 802199e:	621a      	str	r2, [r3, #32]
}
 80219a0:	bf00      	nop
 80219a2:	371c      	adds	r7, #28
 80219a4:	46bd      	mov	sp, r7
 80219a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219aa:	4770      	bx	lr
 80219ac:	40010000 	.word	0x40010000

080219b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80219b0:	b480      	push	{r7}
 80219b2:	b087      	sub	sp, #28
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	6078      	str	r0, [r7, #4]
 80219b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80219ba:	687b      	ldr	r3, [r7, #4]
 80219bc:	6a1b      	ldr	r3, [r3, #32]
 80219be:	f023 0210 	bic.w	r2, r3, #16
 80219c2:	687b      	ldr	r3, [r7, #4]
 80219c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	6a1b      	ldr	r3, [r3, #32]
 80219ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80219cc:	687b      	ldr	r3, [r7, #4]
 80219ce:	685b      	ldr	r3, [r3, #4]
 80219d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	699b      	ldr	r3, [r3, #24]
 80219d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80219de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80219e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80219e8:	683b      	ldr	r3, [r7, #0]
 80219ea:	681b      	ldr	r3, [r3, #0]
 80219ec:	021b      	lsls	r3, r3, #8
 80219ee:	68fa      	ldr	r2, [r7, #12]
 80219f0:	4313      	orrs	r3, r2
 80219f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80219f4:	697b      	ldr	r3, [r7, #20]
 80219f6:	f023 0320 	bic.w	r3, r3, #32
 80219fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80219fc:	683b      	ldr	r3, [r7, #0]
 80219fe:	689b      	ldr	r3, [r3, #8]
 8021a00:	011b      	lsls	r3, r3, #4
 8021a02:	697a      	ldr	r2, [r7, #20]
 8021a04:	4313      	orrs	r3, r2
 8021a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	4a1e      	ldr	r2, [pc, #120]	; (8021a84 <TIM_OC2_SetConfig+0xd4>)
 8021a0c:	4293      	cmp	r3, r2
 8021a0e:	d10d      	bne.n	8021a2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8021a10:	697b      	ldr	r3, [r7, #20]
 8021a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8021a18:	683b      	ldr	r3, [r7, #0]
 8021a1a:	68db      	ldr	r3, [r3, #12]
 8021a1c:	011b      	lsls	r3, r3, #4
 8021a1e:	697a      	ldr	r2, [r7, #20]
 8021a20:	4313      	orrs	r3, r2
 8021a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8021a24:	697b      	ldr	r3, [r7, #20]
 8021a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8021a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	4a15      	ldr	r2, [pc, #84]	; (8021a84 <TIM_OC2_SetConfig+0xd4>)
 8021a30:	4293      	cmp	r3, r2
 8021a32:	d113      	bne.n	8021a5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8021a34:	693b      	ldr	r3, [r7, #16]
 8021a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8021a3c:	693b      	ldr	r3, [r7, #16]
 8021a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8021a44:	683b      	ldr	r3, [r7, #0]
 8021a46:	695b      	ldr	r3, [r3, #20]
 8021a48:	009b      	lsls	r3, r3, #2
 8021a4a:	693a      	ldr	r2, [r7, #16]
 8021a4c:	4313      	orrs	r3, r2
 8021a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8021a50:	683b      	ldr	r3, [r7, #0]
 8021a52:	699b      	ldr	r3, [r3, #24]
 8021a54:	009b      	lsls	r3, r3, #2
 8021a56:	693a      	ldr	r2, [r7, #16]
 8021a58:	4313      	orrs	r3, r2
 8021a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	693a      	ldr	r2, [r7, #16]
 8021a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	68fa      	ldr	r2, [r7, #12]
 8021a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8021a68:	683b      	ldr	r3, [r7, #0]
 8021a6a:	685a      	ldr	r2, [r3, #4]
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	697a      	ldr	r2, [r7, #20]
 8021a74:	621a      	str	r2, [r3, #32]
}
 8021a76:	bf00      	nop
 8021a78:	371c      	adds	r7, #28
 8021a7a:	46bd      	mov	sp, r7
 8021a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a80:	4770      	bx	lr
 8021a82:	bf00      	nop
 8021a84:	40010000 	.word	0x40010000

08021a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021a88:	b480      	push	{r7}
 8021a8a:	b087      	sub	sp, #28
 8021a8c:	af00      	add	r7, sp, #0
 8021a8e:	6078      	str	r0, [r7, #4]
 8021a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	6a1b      	ldr	r3, [r3, #32]
 8021a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	6a1b      	ldr	r3, [r3, #32]
 8021aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	685b      	ldr	r3, [r3, #4]
 8021aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	69db      	ldr	r3, [r3, #28]
 8021aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8021ab8:	68fb      	ldr	r3, [r7, #12]
 8021aba:	f023 0303 	bic.w	r3, r3, #3
 8021abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021ac0:	683b      	ldr	r3, [r7, #0]
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	68fa      	ldr	r2, [r7, #12]
 8021ac6:	4313      	orrs	r3, r2
 8021ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8021aca:	697b      	ldr	r3, [r7, #20]
 8021acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8021ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8021ad2:	683b      	ldr	r3, [r7, #0]
 8021ad4:	689b      	ldr	r3, [r3, #8]
 8021ad6:	021b      	lsls	r3, r3, #8
 8021ad8:	697a      	ldr	r2, [r7, #20]
 8021ada:	4313      	orrs	r3, r2
 8021adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	4a1d      	ldr	r2, [pc, #116]	; (8021b58 <TIM_OC3_SetConfig+0xd0>)
 8021ae2:	4293      	cmp	r3, r2
 8021ae4:	d10d      	bne.n	8021b02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8021ae6:	697b      	ldr	r3, [r7, #20]
 8021ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8021aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8021aee:	683b      	ldr	r3, [r7, #0]
 8021af0:	68db      	ldr	r3, [r3, #12]
 8021af2:	021b      	lsls	r3, r3, #8
 8021af4:	697a      	ldr	r2, [r7, #20]
 8021af6:	4313      	orrs	r3, r2
 8021af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8021afa:	697b      	ldr	r3, [r7, #20]
 8021afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8021b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	4a14      	ldr	r2, [pc, #80]	; (8021b58 <TIM_OC3_SetConfig+0xd0>)
 8021b06:	4293      	cmp	r3, r2
 8021b08:	d113      	bne.n	8021b32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8021b0a:	693b      	ldr	r3, [r7, #16]
 8021b0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8021b12:	693b      	ldr	r3, [r7, #16]
 8021b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8021b1a:	683b      	ldr	r3, [r7, #0]
 8021b1c:	695b      	ldr	r3, [r3, #20]
 8021b1e:	011b      	lsls	r3, r3, #4
 8021b20:	693a      	ldr	r2, [r7, #16]
 8021b22:	4313      	orrs	r3, r2
 8021b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8021b26:	683b      	ldr	r3, [r7, #0]
 8021b28:	699b      	ldr	r3, [r3, #24]
 8021b2a:	011b      	lsls	r3, r3, #4
 8021b2c:	693a      	ldr	r2, [r7, #16]
 8021b2e:	4313      	orrs	r3, r2
 8021b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	693a      	ldr	r2, [r7, #16]
 8021b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	68fa      	ldr	r2, [r7, #12]
 8021b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8021b3e:	683b      	ldr	r3, [r7, #0]
 8021b40:	685a      	ldr	r2, [r3, #4]
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	697a      	ldr	r2, [r7, #20]
 8021b4a:	621a      	str	r2, [r3, #32]
}
 8021b4c:	bf00      	nop
 8021b4e:	371c      	adds	r7, #28
 8021b50:	46bd      	mov	sp, r7
 8021b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b56:	4770      	bx	lr
 8021b58:	40010000 	.word	0x40010000

08021b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8021b5c:	b480      	push	{r7}
 8021b5e:	b087      	sub	sp, #28
 8021b60:	af00      	add	r7, sp, #0
 8021b62:	6078      	str	r0, [r7, #4]
 8021b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8021b66:	687b      	ldr	r3, [r7, #4]
 8021b68:	6a1b      	ldr	r3, [r3, #32]
 8021b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8021b6e:	687b      	ldr	r3, [r7, #4]
 8021b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	6a1b      	ldr	r3, [r3, #32]
 8021b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	685b      	ldr	r3, [r3, #4]
 8021b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8021b7e:	687b      	ldr	r3, [r7, #4]
 8021b80:	69db      	ldr	r3, [r3, #28]
 8021b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8021b84:	68fb      	ldr	r3, [r7, #12]
 8021b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8021b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8021b8c:	68fb      	ldr	r3, [r7, #12]
 8021b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021b94:	683b      	ldr	r3, [r7, #0]
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	021b      	lsls	r3, r3, #8
 8021b9a:	68fa      	ldr	r2, [r7, #12]
 8021b9c:	4313      	orrs	r3, r2
 8021b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8021ba0:	693b      	ldr	r3, [r7, #16]
 8021ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8021ba8:	683b      	ldr	r3, [r7, #0]
 8021baa:	689b      	ldr	r3, [r3, #8]
 8021bac:	031b      	lsls	r3, r3, #12
 8021bae:	693a      	ldr	r2, [r7, #16]
 8021bb0:	4313      	orrs	r3, r2
 8021bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	4a10      	ldr	r2, [pc, #64]	; (8021bf8 <TIM_OC4_SetConfig+0x9c>)
 8021bb8:	4293      	cmp	r3, r2
 8021bba:	d109      	bne.n	8021bd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8021bbc:	697b      	ldr	r3, [r7, #20]
 8021bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8021bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8021bc4:	683b      	ldr	r3, [r7, #0]
 8021bc6:	695b      	ldr	r3, [r3, #20]
 8021bc8:	019b      	lsls	r3, r3, #6
 8021bca:	697a      	ldr	r2, [r7, #20]
 8021bcc:	4313      	orrs	r3, r2
 8021bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	697a      	ldr	r2, [r7, #20]
 8021bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	68fa      	ldr	r2, [r7, #12]
 8021bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8021bdc:	683b      	ldr	r3, [r7, #0]
 8021bde:	685a      	ldr	r2, [r3, #4]
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	693a      	ldr	r2, [r7, #16]
 8021be8:	621a      	str	r2, [r3, #32]
}
 8021bea:	bf00      	nop
 8021bec:	371c      	adds	r7, #28
 8021bee:	46bd      	mov	sp, r7
 8021bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bf4:	4770      	bx	lr
 8021bf6:	bf00      	nop
 8021bf8:	40010000 	.word	0x40010000

08021bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021bfc:	b480      	push	{r7}
 8021bfe:	b087      	sub	sp, #28
 8021c00:	af00      	add	r7, sp, #0
 8021c02:	60f8      	str	r0, [r7, #12]
 8021c04:	60b9      	str	r1, [r7, #8]
 8021c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	6a1b      	ldr	r3, [r3, #32]
 8021c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8021c0e:	68fb      	ldr	r3, [r7, #12]
 8021c10:	6a1b      	ldr	r3, [r3, #32]
 8021c12:	f023 0201 	bic.w	r2, r3, #1
 8021c16:	68fb      	ldr	r3, [r7, #12]
 8021c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021c1a:	68fb      	ldr	r3, [r7, #12]
 8021c1c:	699b      	ldr	r3, [r3, #24]
 8021c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021c20:	693b      	ldr	r3, [r7, #16]
 8021c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8021c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	011b      	lsls	r3, r3, #4
 8021c2c:	693a      	ldr	r2, [r7, #16]
 8021c2e:	4313      	orrs	r3, r2
 8021c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021c32:	697b      	ldr	r3, [r7, #20]
 8021c34:	f023 030a 	bic.w	r3, r3, #10
 8021c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8021c3a:	697a      	ldr	r2, [r7, #20]
 8021c3c:	68bb      	ldr	r3, [r7, #8]
 8021c3e:	4313      	orrs	r3, r2
 8021c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021c42:	68fb      	ldr	r3, [r7, #12]
 8021c44:	693a      	ldr	r2, [r7, #16]
 8021c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021c48:	68fb      	ldr	r3, [r7, #12]
 8021c4a:	697a      	ldr	r2, [r7, #20]
 8021c4c:	621a      	str	r2, [r3, #32]
}
 8021c4e:	bf00      	nop
 8021c50:	371c      	adds	r7, #28
 8021c52:	46bd      	mov	sp, r7
 8021c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c58:	4770      	bx	lr

08021c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8021c5a:	b480      	push	{r7}
 8021c5c:	b087      	sub	sp, #28
 8021c5e:	af00      	add	r7, sp, #0
 8021c60:	60f8      	str	r0, [r7, #12]
 8021c62:	60b9      	str	r1, [r7, #8]
 8021c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021c66:	68fb      	ldr	r3, [r7, #12]
 8021c68:	6a1b      	ldr	r3, [r3, #32]
 8021c6a:	f023 0210 	bic.w	r2, r3, #16
 8021c6e:	68fb      	ldr	r3, [r7, #12]
 8021c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021c72:	68fb      	ldr	r3, [r7, #12]
 8021c74:	699b      	ldr	r3, [r3, #24]
 8021c76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8021c78:	68fb      	ldr	r3, [r7, #12]
 8021c7a:	6a1b      	ldr	r3, [r3, #32]
 8021c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8021c7e:	697b      	ldr	r3, [r7, #20]
 8021c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8021c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	031b      	lsls	r3, r3, #12
 8021c8a:	697a      	ldr	r2, [r7, #20]
 8021c8c:	4313      	orrs	r3, r2
 8021c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021c90:	693b      	ldr	r3, [r7, #16]
 8021c92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8021c96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021c98:	68bb      	ldr	r3, [r7, #8]
 8021c9a:	011b      	lsls	r3, r3, #4
 8021c9c:	693a      	ldr	r2, [r7, #16]
 8021c9e:	4313      	orrs	r3, r2
 8021ca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021ca2:	68fb      	ldr	r3, [r7, #12]
 8021ca4:	697a      	ldr	r2, [r7, #20]
 8021ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	693a      	ldr	r2, [r7, #16]
 8021cac:	621a      	str	r2, [r3, #32]
}
 8021cae:	bf00      	nop
 8021cb0:	371c      	adds	r7, #28
 8021cb2:	46bd      	mov	sp, r7
 8021cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb8:	4770      	bx	lr

08021cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8021cba:	b480      	push	{r7}
 8021cbc:	b085      	sub	sp, #20
 8021cbe:	af00      	add	r7, sp, #0
 8021cc0:	6078      	str	r0, [r7, #4]
 8021cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	689b      	ldr	r3, [r3, #8]
 8021cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021cd2:	683a      	ldr	r2, [r7, #0]
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	4313      	orrs	r3, r2
 8021cd8:	f043 0307 	orr.w	r3, r3, #7
 8021cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	68fa      	ldr	r2, [r7, #12]
 8021ce2:	609a      	str	r2, [r3, #8]
}
 8021ce4:	bf00      	nop
 8021ce6:	3714      	adds	r7, #20
 8021ce8:	46bd      	mov	sp, r7
 8021cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cee:	4770      	bx	lr

08021cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8021cf0:	b480      	push	{r7}
 8021cf2:	b087      	sub	sp, #28
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	60f8      	str	r0, [r7, #12]
 8021cf8:	60b9      	str	r1, [r7, #8]
 8021cfa:	607a      	str	r2, [r7, #4]
 8021cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8021cfe:	68fb      	ldr	r3, [r7, #12]
 8021d00:	689b      	ldr	r3, [r3, #8]
 8021d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8021d04:	697b      	ldr	r3, [r7, #20]
 8021d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8021d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021d0c:	683b      	ldr	r3, [r7, #0]
 8021d0e:	021a      	lsls	r2, r3, #8
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	431a      	orrs	r2, r3
 8021d14:	68bb      	ldr	r3, [r7, #8]
 8021d16:	4313      	orrs	r3, r2
 8021d18:	697a      	ldr	r2, [r7, #20]
 8021d1a:	4313      	orrs	r3, r2
 8021d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021d1e:	68fb      	ldr	r3, [r7, #12]
 8021d20:	697a      	ldr	r2, [r7, #20]
 8021d22:	609a      	str	r2, [r3, #8]
}
 8021d24:	bf00      	nop
 8021d26:	371c      	adds	r7, #28
 8021d28:	46bd      	mov	sp, r7
 8021d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d2e:	4770      	bx	lr

08021d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8021d30:	b480      	push	{r7}
 8021d32:	b087      	sub	sp, #28
 8021d34:	af00      	add	r7, sp, #0
 8021d36:	60f8      	str	r0, [r7, #12]
 8021d38:	60b9      	str	r1, [r7, #8]
 8021d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8021d3c:	68bb      	ldr	r3, [r7, #8]
 8021d3e:	f003 031f 	and.w	r3, r3, #31
 8021d42:	2201      	movs	r2, #1
 8021d44:	fa02 f303 	lsl.w	r3, r2, r3
 8021d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8021d4a:	68fb      	ldr	r3, [r7, #12]
 8021d4c:	6a1a      	ldr	r2, [r3, #32]
 8021d4e:	697b      	ldr	r3, [r7, #20]
 8021d50:	43db      	mvns	r3, r3
 8021d52:	401a      	ands	r2, r3
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8021d58:	68fb      	ldr	r3, [r7, #12]
 8021d5a:	6a1a      	ldr	r2, [r3, #32]
 8021d5c:	68bb      	ldr	r3, [r7, #8]
 8021d5e:	f003 031f 	and.w	r3, r3, #31
 8021d62:	6879      	ldr	r1, [r7, #4]
 8021d64:	fa01 f303 	lsl.w	r3, r1, r3
 8021d68:	431a      	orrs	r2, r3
 8021d6a:	68fb      	ldr	r3, [r7, #12]
 8021d6c:	621a      	str	r2, [r3, #32]
}
 8021d6e:	bf00      	nop
 8021d70:	371c      	adds	r7, #28
 8021d72:	46bd      	mov	sp, r7
 8021d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d78:	4770      	bx	lr
	...

08021d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021d7c:	b480      	push	{r7}
 8021d7e:	b085      	sub	sp, #20
 8021d80:	af00      	add	r7, sp, #0
 8021d82:	6078      	str	r0, [r7, #4]
 8021d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021d86:	687b      	ldr	r3, [r7, #4]
 8021d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021d8c:	2b01      	cmp	r3, #1
 8021d8e:	d101      	bne.n	8021d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021d90:	2302      	movs	r3, #2
 8021d92:	e050      	b.n	8021e36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	2201      	movs	r2, #1
 8021d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	2202      	movs	r2, #2
 8021da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	681b      	ldr	r3, [r3, #0]
 8021da8:	685b      	ldr	r3, [r3, #4]
 8021daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	689b      	ldr	r3, [r3, #8]
 8021db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021db4:	68fb      	ldr	r3, [r7, #12]
 8021db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8021dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8021dbc:	683b      	ldr	r3, [r7, #0]
 8021dbe:	681b      	ldr	r3, [r3, #0]
 8021dc0:	68fa      	ldr	r2, [r7, #12]
 8021dc2:	4313      	orrs	r3, r2
 8021dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	68fa      	ldr	r2, [r7, #12]
 8021dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	4a1c      	ldr	r2, [pc, #112]	; (8021e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8021dd4:	4293      	cmp	r3, r2
 8021dd6:	d018      	beq.n	8021e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	681b      	ldr	r3, [r3, #0]
 8021ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021de0:	d013      	beq.n	8021e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	681b      	ldr	r3, [r3, #0]
 8021de6:	4a18      	ldr	r2, [pc, #96]	; (8021e48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8021de8:	4293      	cmp	r3, r2
 8021dea:	d00e      	beq.n	8021e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	4a16      	ldr	r2, [pc, #88]	; (8021e4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8021df2:	4293      	cmp	r3, r2
 8021df4:	d009      	beq.n	8021e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	4a15      	ldr	r2, [pc, #84]	; (8021e50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8021dfc:	4293      	cmp	r3, r2
 8021dfe:	d004      	beq.n	8021e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	681b      	ldr	r3, [r3, #0]
 8021e04:	4a13      	ldr	r2, [pc, #76]	; (8021e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8021e06:	4293      	cmp	r3, r2
 8021e08:	d10c      	bne.n	8021e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8021e0a:	68bb      	ldr	r3, [r7, #8]
 8021e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021e12:	683b      	ldr	r3, [r7, #0]
 8021e14:	685b      	ldr	r3, [r3, #4]
 8021e16:	68ba      	ldr	r2, [r7, #8]
 8021e18:	4313      	orrs	r3, r2
 8021e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	681b      	ldr	r3, [r3, #0]
 8021e20:	68ba      	ldr	r2, [r7, #8]
 8021e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	2201      	movs	r2, #1
 8021e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	2200      	movs	r2, #0
 8021e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021e34:	2300      	movs	r3, #0
}
 8021e36:	4618      	mov	r0, r3
 8021e38:	3714      	adds	r7, #20
 8021e3a:	46bd      	mov	sp, r7
 8021e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e40:	4770      	bx	lr
 8021e42:	bf00      	nop
 8021e44:	40010000 	.word	0x40010000
 8021e48:	40000400 	.word	0x40000400
 8021e4c:	40000800 	.word	0x40000800
 8021e50:	40000c00 	.word	0x40000c00
 8021e54:	40014000 	.word	0x40014000

08021e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021e58:	b480      	push	{r7}
 8021e5a:	b083      	sub	sp, #12
 8021e5c:	af00      	add	r7, sp, #0
 8021e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021e60:	bf00      	nop
 8021e62:	370c      	adds	r7, #12
 8021e64:	46bd      	mov	sp, r7
 8021e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e6a:	4770      	bx	lr

08021e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021e6c:	b480      	push	{r7}
 8021e6e:	b083      	sub	sp, #12
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021e74:	bf00      	nop
 8021e76:	370c      	adds	r7, #12
 8021e78:	46bd      	mov	sp, r7
 8021e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e7e:	4770      	bx	lr

08021e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021e80:	b580      	push	{r7, lr}
 8021e82:	b082      	sub	sp, #8
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	d101      	bne.n	8021e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021e8e:	2301      	movs	r3, #1
 8021e90:	e03f      	b.n	8021f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021e92:	687b      	ldr	r3, [r7, #4]
 8021e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021e98:	b2db      	uxtb	r3, r3
 8021e9a:	2b00      	cmp	r3, #0
 8021e9c:	d106      	bne.n	8021eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021e9e:	687b      	ldr	r3, [r7, #4]
 8021ea0:	2200      	movs	r2, #0
 8021ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021ea6:	6878      	ldr	r0, [r7, #4]
 8021ea8:	f7e1 fcb0 	bl	800380c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	2224      	movs	r2, #36	; 0x24
 8021eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	68da      	ldr	r2, [r3, #12]
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021ec4:	6878      	ldr	r0, [r7, #4]
 8021ec6:	f000 fec7 	bl	8022c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	691a      	ldr	r2, [r3, #16]
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	681b      	ldr	r3, [r3, #0]
 8021ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	681b      	ldr	r3, [r3, #0]
 8021ede:	695a      	ldr	r2, [r3, #20]
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	68da      	ldr	r2, [r3, #12]
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	681b      	ldr	r3, [r3, #0]
 8021ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021efa:	687b      	ldr	r3, [r7, #4]
 8021efc:	2200      	movs	r2, #0
 8021efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	2220      	movs	r2, #32
 8021f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	2220      	movs	r2, #32
 8021f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021f10:	2300      	movs	r3, #0
}
 8021f12:	4618      	mov	r0, r3
 8021f14:	3708      	adds	r7, #8
 8021f16:	46bd      	mov	sp, r7
 8021f18:	bd80      	pop	{r7, pc}

08021f1a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8021f1a:	b580      	push	{r7, lr}
 8021f1c:	b082      	sub	sp, #8
 8021f1e:	af00      	add	r7, sp, #0
 8021f20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d101      	bne.n	8021f2c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8021f28:	2301      	movs	r3, #1
 8021f2a:	e021      	b.n	8021f70 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	2224      	movs	r2, #36	; 0x24
 8021f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	681b      	ldr	r3, [r3, #0]
 8021f38:	68da      	ldr	r2, [r3, #12]
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021f42:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8021f44:	6878      	ldr	r0, [r7, #4]
 8021f46:	f7e1 fd2b 	bl	80039a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	2200      	movs	r2, #0
 8021f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	2200      	movs	r2, #0
 8021f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	2200      	movs	r2, #0
 8021f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021f60:	687b      	ldr	r3, [r7, #4]
 8021f62:	2200      	movs	r2, #0
 8021f64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	2200      	movs	r2, #0
 8021f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021f6e:	2300      	movs	r3, #0
}
 8021f70:	4618      	mov	r0, r3
 8021f72:	3708      	adds	r7, #8
 8021f74:	46bd      	mov	sp, r7
 8021f76:	bd80      	pop	{r7, pc}

08021f78 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8021f78:	b480      	push	{r7}
 8021f7a:	b085      	sub	sp, #20
 8021f7c:	af00      	add	r7, sp, #0
 8021f7e:	60f8      	str	r0, [r7, #12]
 8021f80:	60b9      	str	r1, [r7, #8]
 8021f82:	4613      	mov	r3, r2
 8021f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021f86:	68fb      	ldr	r3, [r7, #12]
 8021f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021f8c:	b2db      	uxtb	r3, r3
 8021f8e:	2b20      	cmp	r3, #32
 8021f90:	d130      	bne.n	8021ff4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8021f92:	68bb      	ldr	r3, [r7, #8]
 8021f94:	2b00      	cmp	r3, #0
 8021f96:	d002      	beq.n	8021f9e <HAL_UART_Transmit_IT+0x26>
 8021f98:	88fb      	ldrh	r3, [r7, #6]
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d101      	bne.n	8021fa2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8021f9e:	2301      	movs	r3, #1
 8021fa0:	e029      	b.n	8021ff6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021fa2:	68fb      	ldr	r3, [r7, #12]
 8021fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021fa8:	2b01      	cmp	r3, #1
 8021faa:	d101      	bne.n	8021fb0 <HAL_UART_Transmit_IT+0x38>
 8021fac:	2302      	movs	r3, #2
 8021fae:	e022      	b.n	8021ff6 <HAL_UART_Transmit_IT+0x7e>
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	2201      	movs	r2, #1
 8021fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8021fb8:	68fb      	ldr	r3, [r7, #12]
 8021fba:	68ba      	ldr	r2, [r7, #8]
 8021fbc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8021fbe:	68fb      	ldr	r3, [r7, #12]
 8021fc0:	88fa      	ldrh	r2, [r7, #6]
 8021fc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8021fc4:	68fb      	ldr	r3, [r7, #12]
 8021fc6:	88fa      	ldrh	r2, [r7, #6]
 8021fc8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	2200      	movs	r2, #0
 8021fce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021fd0:	68fb      	ldr	r3, [r7, #12]
 8021fd2:	2221      	movs	r2, #33	; 0x21
 8021fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021fd8:	68fb      	ldr	r3, [r7, #12]
 8021fda:	2200      	movs	r2, #0
 8021fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8021fe0:	68fb      	ldr	r3, [r7, #12]
 8021fe2:	681b      	ldr	r3, [r3, #0]
 8021fe4:	68da      	ldr	r2, [r3, #12]
 8021fe6:	68fb      	ldr	r3, [r7, #12]
 8021fe8:	681b      	ldr	r3, [r3, #0]
 8021fea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021fee:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8021ff0:	2300      	movs	r3, #0
 8021ff2:	e000      	b.n	8021ff6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8021ff4:	2302      	movs	r3, #2
  }
}
 8021ff6:	4618      	mov	r0, r3
 8021ff8:	3714      	adds	r7, #20
 8021ffa:	46bd      	mov	sp, r7
 8021ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022000:	4770      	bx	lr

08022002 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022002:	b580      	push	{r7, lr}
 8022004:	b084      	sub	sp, #16
 8022006:	af00      	add	r7, sp, #0
 8022008:	60f8      	str	r0, [r7, #12]
 802200a:	60b9      	str	r1, [r7, #8]
 802200c:	4613      	mov	r3, r2
 802200e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022010:	68fb      	ldr	r3, [r7, #12]
 8022012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022016:	b2db      	uxtb	r3, r3
 8022018:	2b20      	cmp	r3, #32
 802201a:	d11d      	bne.n	8022058 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802201c:	68bb      	ldr	r3, [r7, #8]
 802201e:	2b00      	cmp	r3, #0
 8022020:	d002      	beq.n	8022028 <HAL_UART_Receive_IT+0x26>
 8022022:	88fb      	ldrh	r3, [r7, #6]
 8022024:	2b00      	cmp	r3, #0
 8022026:	d101      	bne.n	802202c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8022028:	2301      	movs	r3, #1
 802202a:	e016      	b.n	802205a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802202c:	68fb      	ldr	r3, [r7, #12]
 802202e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022032:	2b01      	cmp	r3, #1
 8022034:	d101      	bne.n	802203a <HAL_UART_Receive_IT+0x38>
 8022036:	2302      	movs	r3, #2
 8022038:	e00f      	b.n	802205a <HAL_UART_Receive_IT+0x58>
 802203a:	68fb      	ldr	r3, [r7, #12]
 802203c:	2201      	movs	r2, #1
 802203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022042:	68fb      	ldr	r3, [r7, #12]
 8022044:	2200      	movs	r2, #0
 8022046:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8022048:	88fb      	ldrh	r3, [r7, #6]
 802204a:	461a      	mov	r2, r3
 802204c:	68b9      	ldr	r1, [r7, #8]
 802204e:	68f8      	ldr	r0, [r7, #12]
 8022050:	f000 fbca 	bl	80227e8 <UART_Start_Receive_IT>
 8022054:	4603      	mov	r3, r0
 8022056:	e000      	b.n	802205a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8022058:	2302      	movs	r3, #2
  }
}
 802205a:	4618      	mov	r0, r3
 802205c:	3710      	adds	r7, #16
 802205e:	46bd      	mov	sp, r7
 8022060:	bd80      	pop	{r7, pc}
	...

08022064 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8022064:	b580      	push	{r7, lr}
 8022066:	b0a2      	sub	sp, #136	; 0x88
 8022068:	af00      	add	r7, sp, #0
 802206a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 802206c:	2301      	movs	r3, #1
 802206e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	330c      	adds	r3, #12
 8022078:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802207c:	e853 3f00 	ldrex	r3, [r3]
 8022080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8022082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022084:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8022088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	681b      	ldr	r3, [r3, #0]
 8022090:	330c      	adds	r3, #12
 8022092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8022096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8022098:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802209a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802209c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802209e:	e841 2300 	strex	r3, r2, [r1]
 80220a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80220a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d1e3      	bne.n	8022072 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	681b      	ldr	r3, [r3, #0]
 80220ae:	3314      	adds	r3, #20
 80220b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80220b4:	e853 3f00 	ldrex	r3, [r3]
 80220b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80220ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80220bc:	f023 0301 	bic.w	r3, r3, #1
 80220c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	3314      	adds	r3, #20
 80220c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80220ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80220cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80220ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80220d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80220d2:	e841 2300 	strex	r3, r2, [r1]
 80220d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80220d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d1e5      	bne.n	80220aa <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220e2:	2b01      	cmp	r3, #1
 80220e4:	d119      	bne.n	802211a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80220e6:	687b      	ldr	r3, [r7, #4]
 80220e8:	681b      	ldr	r3, [r3, #0]
 80220ea:	330c      	adds	r3, #12
 80220ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80220f0:	e853 3f00 	ldrex	r3, [r3]
 80220f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80220f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80220f8:	f023 0310 	bic.w	r3, r3, #16
 80220fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	681b      	ldr	r3, [r3, #0]
 8022102:	330c      	adds	r3, #12
 8022104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8022106:	647a      	str	r2, [r7, #68]	; 0x44
 8022108:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802210a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802210c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802210e:	e841 2300 	strex	r3, r2, [r1]
 8022112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8022114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022116:	2b00      	cmp	r3, #0
 8022118:	d1e5      	bne.n	80220e6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 802211a:	687b      	ldr	r3, [r7, #4]
 802211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802211e:	2b00      	cmp	r3, #0
 8022120:	d00f      	beq.n	8022142 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	695b      	ldr	r3, [r3, #20]
 8022128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802212c:	2b80      	cmp	r3, #128	; 0x80
 802212e:	d104      	bne.n	802213a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022134:	4a53      	ldr	r2, [pc, #332]	; (8022284 <HAL_UART_Abort_IT+0x220>)
 8022136:	651a      	str	r2, [r3, #80]	; 0x50
 8022138:	e003      	b.n	8022142 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802213e:	2200      	movs	r2, #0
 8022140:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022146:	2b00      	cmp	r3, #0
 8022148:	d00f      	beq.n	802216a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	681b      	ldr	r3, [r3, #0]
 802214e:	695b      	ldr	r3, [r3, #20]
 8022150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022154:	2b40      	cmp	r3, #64	; 0x40
 8022156:	d104      	bne.n	8022162 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802215c:	4a4a      	ldr	r2, [pc, #296]	; (8022288 <HAL_UART_Abort_IT+0x224>)
 802215e:	651a      	str	r2, [r3, #80]	; 0x50
 8022160:	e003      	b.n	802216a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022166:	2200      	movs	r2, #0
 8022168:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	695b      	ldr	r3, [r3, #20]
 8022170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022174:	2b80      	cmp	r3, #128	; 0x80
 8022176:	d12d      	bne.n	80221d4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	681b      	ldr	r3, [r3, #0]
 802217c:	3314      	adds	r3, #20
 802217e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022182:	e853 3f00 	ldrex	r3, [r3]
 8022186:	623b      	str	r3, [r7, #32]
   return(result);
 8022188:	6a3b      	ldr	r3, [r7, #32]
 802218a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802218e:	677b      	str	r3, [r7, #116]	; 0x74
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	681b      	ldr	r3, [r3, #0]
 8022194:	3314      	adds	r3, #20
 8022196:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8022198:	633a      	str	r2, [r7, #48]	; 0x30
 802219a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802219c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802219e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80221a0:	e841 2300 	strex	r3, r2, [r1]
 80221a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80221a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	d1e5      	bne.n	8022178 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80221ac:	687b      	ldr	r3, [r7, #4]
 80221ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d00f      	beq.n	80221d4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80221b8:	4618      	mov	r0, r3
 80221ba:	f7fa fcdf 	bl	801cb7c <HAL_DMA_Abort_IT>
 80221be:	4603      	mov	r3, r0
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d004      	beq.n	80221ce <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80221c8:	2200      	movs	r2, #0
 80221ca:	651a      	str	r2, [r3, #80]	; 0x50
 80221cc:	e002      	b.n	80221d4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80221ce:	2300      	movs	r3, #0
 80221d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	695b      	ldr	r3, [r3, #20]
 80221da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80221de:	2b40      	cmp	r3, #64	; 0x40
 80221e0:	d130      	bne.n	8022244 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	3314      	adds	r3, #20
 80221e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80221ea:	693b      	ldr	r3, [r7, #16]
 80221ec:	e853 3f00 	ldrex	r3, [r3]
 80221f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80221f2:	68fb      	ldr	r3, [r7, #12]
 80221f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80221f8:	673b      	str	r3, [r7, #112]	; 0x70
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	681b      	ldr	r3, [r3, #0]
 80221fe:	3314      	adds	r3, #20
 8022200:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022202:	61fa      	str	r2, [r7, #28]
 8022204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022206:	69b9      	ldr	r1, [r7, #24]
 8022208:	69fa      	ldr	r2, [r7, #28]
 802220a:	e841 2300 	strex	r3, r2, [r1]
 802220e:	617b      	str	r3, [r7, #20]
   return(result);
 8022210:	697b      	ldr	r3, [r7, #20]
 8022212:	2b00      	cmp	r3, #0
 8022214:	d1e5      	bne.n	80221e2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802221a:	2b00      	cmp	r3, #0
 802221c:	d012      	beq.n	8022244 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022222:	4618      	mov	r0, r3
 8022224:	f7fa fcaa 	bl	801cb7c <HAL_DMA_Abort_IT>
 8022228:	4603      	mov	r3, r0
 802222a:	2b00      	cmp	r3, #0
 802222c:	d007      	beq.n	802223e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 802222e:	687b      	ldr	r3, [r7, #4]
 8022230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022232:	2200      	movs	r2, #0
 8022234:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8022236:	2301      	movs	r3, #1
 8022238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802223c:	e002      	b.n	8022244 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 802223e:	2300      	movs	r3, #0
 8022240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8022244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022248:	2b01      	cmp	r3, #1
 802224a:	d116      	bne.n	802227a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	2200      	movs	r2, #0
 8022250:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	2200      	movs	r2, #0
 8022256:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	2200      	movs	r2, #0
 802225c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	2220      	movs	r2, #32
 8022262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	2220      	movs	r2, #32
 802226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	2200      	movs	r2, #0
 8022272:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8022274:	6878      	ldr	r0, [r7, #4]
 8022276:	f000 faa1 	bl	80227bc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 802227a:	2300      	movs	r3, #0
}
 802227c:	4618      	mov	r0, r3
 802227e:	3788      	adds	r7, #136	; 0x88
 8022280:	46bd      	mov	sp, r7
 8022282:	bd80      	pop	{r7, pc}
 8022284:	08022953 	.word	0x08022953
 8022288:	080229b3 	.word	0x080229b3

0802228c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802228c:	b580      	push	{r7, lr}
 802228e:	b0ba      	sub	sp, #232	; 0xe8
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	681b      	ldr	r3, [r3, #0]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	68db      	ldr	r3, [r3, #12]
 80222a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	681b      	ldr	r3, [r3, #0]
 80222ac:	695b      	ldr	r3, [r3, #20]
 80222ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80222b2:	2300      	movs	r3, #0
 80222b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80222b8:	2300      	movs	r3, #0
 80222ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80222be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80222c2:	f003 030f 	and.w	r3, r3, #15
 80222c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80222ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d10f      	bne.n	80222f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80222d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80222d6:	f003 0320 	and.w	r3, r3, #32
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d009      	beq.n	80222f2 <HAL_UART_IRQHandler+0x66>
 80222de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80222e2:	f003 0320 	and.w	r3, r3, #32
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	d003      	beq.n	80222f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80222ea:	6878      	ldr	r0, [r7, #4]
 80222ec:	f000 fbf9 	bl	8022ae2 <UART_Receive_IT>
      return;
 80222f0:	e256      	b.n	80227a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80222f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80222f6:	2b00      	cmp	r3, #0
 80222f8:	f000 80de 	beq.w	80224b8 <HAL_UART_IRQHandler+0x22c>
 80222fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022300:	f003 0301 	and.w	r3, r3, #1
 8022304:	2b00      	cmp	r3, #0
 8022306:	d106      	bne.n	8022316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8022308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802230c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8022310:	2b00      	cmp	r3, #0
 8022312:	f000 80d1 	beq.w	80224b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8022316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802231a:	f003 0301 	and.w	r3, r3, #1
 802231e:	2b00      	cmp	r3, #0
 8022320:	d00b      	beq.n	802233a <HAL_UART_IRQHandler+0xae>
 8022322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802232a:	2b00      	cmp	r3, #0
 802232c:	d005      	beq.n	802233a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022332:	f043 0201 	orr.w	r2, r3, #1
 8022336:	687b      	ldr	r3, [r7, #4]
 8022338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802233e:	f003 0304 	and.w	r3, r3, #4
 8022342:	2b00      	cmp	r3, #0
 8022344:	d00b      	beq.n	802235e <HAL_UART_IRQHandler+0xd2>
 8022346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802234a:	f003 0301 	and.w	r3, r3, #1
 802234e:	2b00      	cmp	r3, #0
 8022350:	d005      	beq.n	802235e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022356:	f043 0202 	orr.w	r2, r3, #2
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802235e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022362:	f003 0302 	and.w	r3, r3, #2
 8022366:	2b00      	cmp	r3, #0
 8022368:	d00b      	beq.n	8022382 <HAL_UART_IRQHandler+0xf6>
 802236a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802236e:	f003 0301 	and.w	r3, r3, #1
 8022372:	2b00      	cmp	r3, #0
 8022374:	d005      	beq.n	8022382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802237a:	f043 0204 	orr.w	r2, r3, #4
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8022382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022386:	f003 0308 	and.w	r3, r3, #8
 802238a:	2b00      	cmp	r3, #0
 802238c:	d011      	beq.n	80223b2 <HAL_UART_IRQHandler+0x126>
 802238e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022392:	f003 0320 	and.w	r3, r3, #32
 8022396:	2b00      	cmp	r3, #0
 8022398:	d105      	bne.n	80223a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802239a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802239e:	f003 0301 	and.w	r3, r3, #1
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	d005      	beq.n	80223b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80223a6:	687b      	ldr	r3, [r7, #4]
 80223a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223aa:	f043 0208 	orr.w	r2, r3, #8
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	f000 81ed 	beq.w	8022796 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80223bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80223c0:	f003 0320 	and.w	r3, r3, #32
 80223c4:	2b00      	cmp	r3, #0
 80223c6:	d008      	beq.n	80223da <HAL_UART_IRQHandler+0x14e>
 80223c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80223cc:	f003 0320 	and.w	r3, r3, #32
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d002      	beq.n	80223da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80223d4:	6878      	ldr	r0, [r7, #4]
 80223d6:	f000 fb84 	bl	8022ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	681b      	ldr	r3, [r3, #0]
 80223de:	695b      	ldr	r3, [r3, #20]
 80223e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80223e4:	2b40      	cmp	r3, #64	; 0x40
 80223e6:	bf0c      	ite	eq
 80223e8:	2301      	moveq	r3, #1
 80223ea:	2300      	movne	r3, #0
 80223ec:	b2db      	uxtb	r3, r3
 80223ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223f6:	f003 0308 	and.w	r3, r3, #8
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	d103      	bne.n	8022406 <HAL_UART_IRQHandler+0x17a>
 80223fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8022402:	2b00      	cmp	r3, #0
 8022404:	d04f      	beq.n	80224a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8022406:	6878      	ldr	r0, [r7, #4]
 8022408:	f000 fa2c 	bl	8022864 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	695b      	ldr	r3, [r3, #20]
 8022412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022416:	2b40      	cmp	r3, #64	; 0x40
 8022418:	d141      	bne.n	802249e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	681b      	ldr	r3, [r3, #0]
 802241e:	3314      	adds	r3, #20
 8022420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8022428:	e853 3f00 	ldrex	r3, [r3]
 802242c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8022430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	681b      	ldr	r3, [r3, #0]
 8022440:	3314      	adds	r3, #20
 8022442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8022446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802244a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802244e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8022452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8022456:	e841 2300 	strex	r3, r2, [r1]
 802245a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802245e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8022462:	2b00      	cmp	r3, #0
 8022464:	d1d9      	bne.n	802241a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802246a:	2b00      	cmp	r3, #0
 802246c:	d013      	beq.n	8022496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022472:	4a7d      	ldr	r2, [pc, #500]	; (8022668 <HAL_UART_IRQHandler+0x3dc>)
 8022474:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802247a:	4618      	mov	r0, r3
 802247c:	f7fa fb7e 	bl	801cb7c <HAL_DMA_Abort_IT>
 8022480:	4603      	mov	r3, r0
 8022482:	2b00      	cmp	r3, #0
 8022484:	d016      	beq.n	80224b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802248a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802248c:	687a      	ldr	r2, [r7, #4]
 802248e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8022490:	4610      	mov	r0, r2
 8022492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022494:	e00e      	b.n	80224b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8022496:	6878      	ldr	r0, [r7, #4]
 8022498:	f000 f986 	bl	80227a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802249c:	e00a      	b.n	80224b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802249e:	6878      	ldr	r0, [r7, #4]
 80224a0:	f000 f982 	bl	80227a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80224a4:	e006      	b.n	80224b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80224a6:	6878      	ldr	r0, [r7, #4]
 80224a8:	f000 f97e 	bl	80227a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	2200      	movs	r2, #0
 80224b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80224b2:	e170      	b.n	8022796 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80224b4:	bf00      	nop
    return;
 80224b6:	e16e      	b.n	8022796 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80224bc:	2b01      	cmp	r3, #1
 80224be:	f040 814a 	bne.w	8022756 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80224c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80224c6:	f003 0310 	and.w	r3, r3, #16
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	f000 8143 	beq.w	8022756 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80224d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80224d4:	f003 0310 	and.w	r3, r3, #16
 80224d8:	2b00      	cmp	r3, #0
 80224da:	f000 813c 	beq.w	8022756 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80224de:	2300      	movs	r3, #0
 80224e0:	60bb      	str	r3, [r7, #8]
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	681b      	ldr	r3, [r3, #0]
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	60bb      	str	r3, [r7, #8]
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	681b      	ldr	r3, [r3, #0]
 80224ee:	685b      	ldr	r3, [r3, #4]
 80224f0:	60bb      	str	r3, [r7, #8]
 80224f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	695b      	ldr	r3, [r3, #20]
 80224fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80224fe:	2b40      	cmp	r3, #64	; 0x40
 8022500:	f040 80b4 	bne.w	802266c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022508:	681b      	ldr	r3, [r3, #0]
 802250a:	685b      	ldr	r3, [r3, #4]
 802250c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8022510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8022514:	2b00      	cmp	r3, #0
 8022516:	f000 8140 	beq.w	802279a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802251e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8022522:	429a      	cmp	r2, r3
 8022524:	f080 8139 	bcs.w	802279a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802252e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022534:	69db      	ldr	r3, [r3, #28]
 8022536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802253a:	f000 8088 	beq.w	802264e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	330c      	adds	r3, #12
 8022544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802254c:	e853 3f00 	ldrex	r3, [r3]
 8022550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8022554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802255c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	681b      	ldr	r3, [r3, #0]
 8022564:	330c      	adds	r3, #12
 8022566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802256a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802256e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8022576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802257a:	e841 2300 	strex	r3, r2, [r1]
 802257e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8022582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022586:	2b00      	cmp	r3, #0
 8022588:	d1d9      	bne.n	802253e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802258a:	687b      	ldr	r3, [r7, #4]
 802258c:	681b      	ldr	r3, [r3, #0]
 802258e:	3314      	adds	r3, #20
 8022590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022594:	e853 3f00 	ldrex	r3, [r3]
 8022598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802259a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802259c:	f023 0301 	bic.w	r3, r3, #1
 80225a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80225a4:	687b      	ldr	r3, [r7, #4]
 80225a6:	681b      	ldr	r3, [r3, #0]
 80225a8:	3314      	adds	r3, #20
 80225aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80225ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80225b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80225b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80225b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80225ba:	e841 2300 	strex	r3, r2, [r1]
 80225be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80225c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d1e1      	bne.n	802258a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	681b      	ldr	r3, [r3, #0]
 80225ca:	3314      	adds	r3, #20
 80225cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80225ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80225d0:	e853 3f00 	ldrex	r3, [r3]
 80225d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80225d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80225d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80225dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	681b      	ldr	r3, [r3, #0]
 80225e4:	3314      	adds	r3, #20
 80225e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80225ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80225ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80225ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80225f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80225f2:	e841 2300 	strex	r3, r2, [r1]
 80225f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80225f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d1e3      	bne.n	80225c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	2220      	movs	r2, #32
 8022602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	2200      	movs	r2, #0
 802260a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	330c      	adds	r3, #12
 8022612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022616:	e853 3f00 	ldrex	r3, [r3]
 802261a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802261e:	f023 0310 	bic.w	r3, r3, #16
 8022622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	330c      	adds	r3, #12
 802262c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8022630:	65ba      	str	r2, [r7, #88]	; 0x58
 8022632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022638:	e841 2300 	strex	r3, r2, [r1]
 802263c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802263e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022640:	2b00      	cmp	r3, #0
 8022642:	d1e3      	bne.n	802260c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022648:	4618      	mov	r0, r3
 802264a:	f7fa fa27 	bl	801ca9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802264e:	687b      	ldr	r3, [r7, #4]
 8022650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022656:	b29b      	uxth	r3, r3
 8022658:	1ad3      	subs	r3, r2, r3
 802265a:	b29b      	uxth	r3, r3
 802265c:	4619      	mov	r1, r3
 802265e:	6878      	ldr	r0, [r7, #4]
 8022660:	f000 f8b6 	bl	80227d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022664:	e099      	b.n	802279a <HAL_UART_IRQHandler+0x50e>
 8022666:	bf00      	nop
 8022668:	0802292b 	.word	0x0802292b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022674:	b29b      	uxth	r3, r3
 8022676:	1ad3      	subs	r3, r2, r3
 8022678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022680:	b29b      	uxth	r3, r3
 8022682:	2b00      	cmp	r3, #0
 8022684:	f000 808b 	beq.w	802279e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8022688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802268c:	2b00      	cmp	r3, #0
 802268e:	f000 8086 	beq.w	802279e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	330c      	adds	r3, #12
 8022698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802269c:	e853 3f00 	ldrex	r3, [r3]
 80226a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80226a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80226a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80226a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	330c      	adds	r3, #12
 80226b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80226b6:	647a      	str	r2, [r7, #68]	; 0x44
 80226b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80226bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80226be:	e841 2300 	strex	r3, r2, [r1]
 80226c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80226c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80226c6:	2b00      	cmp	r3, #0
 80226c8:	d1e3      	bne.n	8022692 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	3314      	adds	r3, #20
 80226d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80226d4:	e853 3f00 	ldrex	r3, [r3]
 80226d8:	623b      	str	r3, [r7, #32]
   return(result);
 80226da:	6a3b      	ldr	r3, [r7, #32]
 80226dc:	f023 0301 	bic.w	r3, r3, #1
 80226e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	681b      	ldr	r3, [r3, #0]
 80226e8:	3314      	adds	r3, #20
 80226ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80226ee:	633a      	str	r2, [r7, #48]	; 0x30
 80226f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80226f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80226f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80226f6:	e841 2300 	strex	r3, r2, [r1]
 80226fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80226fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d1e3      	bne.n	80226ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	2220      	movs	r2, #32
 8022706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	2200      	movs	r2, #0
 802270e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	330c      	adds	r3, #12
 8022716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022718:	693b      	ldr	r3, [r7, #16]
 802271a:	e853 3f00 	ldrex	r3, [r3]
 802271e:	60fb      	str	r3, [r7, #12]
   return(result);
 8022720:	68fb      	ldr	r3, [r7, #12]
 8022722:	f023 0310 	bic.w	r3, r3, #16
 8022726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	330c      	adds	r3, #12
 8022730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8022734:	61fa      	str	r2, [r7, #28]
 8022736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022738:	69b9      	ldr	r1, [r7, #24]
 802273a:	69fa      	ldr	r2, [r7, #28]
 802273c:	e841 2300 	strex	r3, r2, [r1]
 8022740:	617b      	str	r3, [r7, #20]
   return(result);
 8022742:	697b      	ldr	r3, [r7, #20]
 8022744:	2b00      	cmp	r3, #0
 8022746:	d1e3      	bne.n	8022710 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8022748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802274c:	4619      	mov	r1, r3
 802274e:	6878      	ldr	r0, [r7, #4]
 8022750:	f000 f83e 	bl	80227d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022754:	e023      	b.n	802279e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8022756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802275e:	2b00      	cmp	r3, #0
 8022760:	d009      	beq.n	8022776 <HAL_UART_IRQHandler+0x4ea>
 8022762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802276a:	2b00      	cmp	r3, #0
 802276c:	d003      	beq.n	8022776 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802276e:	6878      	ldr	r0, [r7, #4]
 8022770:	f000 f94f 	bl	8022a12 <UART_Transmit_IT>
    return;
 8022774:	e014      	b.n	80227a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8022776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802277e:	2b00      	cmp	r3, #0
 8022780:	d00e      	beq.n	80227a0 <HAL_UART_IRQHandler+0x514>
 8022782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802278a:	2b00      	cmp	r3, #0
 802278c:	d008      	beq.n	80227a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802278e:	6878      	ldr	r0, [r7, #4]
 8022790:	f000 f98f 	bl	8022ab2 <UART_EndTransmit_IT>
    return;
 8022794:	e004      	b.n	80227a0 <HAL_UART_IRQHandler+0x514>
    return;
 8022796:	bf00      	nop
 8022798:	e002      	b.n	80227a0 <HAL_UART_IRQHandler+0x514>
      return;
 802279a:	bf00      	nop
 802279c:	e000      	b.n	80227a0 <HAL_UART_IRQHandler+0x514>
      return;
 802279e:	bf00      	nop
  }
}
 80227a0:	37e8      	adds	r7, #232	; 0xe8
 80227a2:	46bd      	mov	sp, r7
 80227a4:	bd80      	pop	{r7, pc}
 80227a6:	bf00      	nop

080227a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80227a8:	b480      	push	{r7}
 80227aa:	b083      	sub	sp, #12
 80227ac:	af00      	add	r7, sp, #0
 80227ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80227b0:	bf00      	nop
 80227b2:	370c      	adds	r7, #12
 80227b4:	46bd      	mov	sp, r7
 80227b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ba:	4770      	bx	lr

080227bc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80227bc:	b480      	push	{r7}
 80227be:	b083      	sub	sp, #12
 80227c0:	af00      	add	r7, sp, #0
 80227c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80227c4:	bf00      	nop
 80227c6:	370c      	adds	r7, #12
 80227c8:	46bd      	mov	sp, r7
 80227ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ce:	4770      	bx	lr

080227d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80227d0:	b480      	push	{r7}
 80227d2:	b083      	sub	sp, #12
 80227d4:	af00      	add	r7, sp, #0
 80227d6:	6078      	str	r0, [r7, #4]
 80227d8:	460b      	mov	r3, r1
 80227da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80227dc:	bf00      	nop
 80227de:	370c      	adds	r7, #12
 80227e0:	46bd      	mov	sp, r7
 80227e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227e6:	4770      	bx	lr

080227e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80227e8:	b480      	push	{r7}
 80227ea:	b085      	sub	sp, #20
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	60f8      	str	r0, [r7, #12]
 80227f0:	60b9      	str	r1, [r7, #8]
 80227f2:	4613      	mov	r3, r2
 80227f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80227f6:	68fb      	ldr	r3, [r7, #12]
 80227f8:	68ba      	ldr	r2, [r7, #8]
 80227fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80227fc:	68fb      	ldr	r3, [r7, #12]
 80227fe:	88fa      	ldrh	r2, [r7, #6]
 8022800:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8022802:	68fb      	ldr	r3, [r7, #12]
 8022804:	88fa      	ldrh	r2, [r7, #6]
 8022806:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022808:	68fb      	ldr	r3, [r7, #12]
 802280a:	2200      	movs	r2, #0
 802280c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802280e:	68fb      	ldr	r3, [r7, #12]
 8022810:	2222      	movs	r2, #34	; 0x22
 8022812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022816:	68fb      	ldr	r3, [r7, #12]
 8022818:	2200      	movs	r2, #0
 802281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802281e:	68fb      	ldr	r3, [r7, #12]
 8022820:	691b      	ldr	r3, [r3, #16]
 8022822:	2b00      	cmp	r3, #0
 8022824:	d007      	beq.n	8022836 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8022826:	68fb      	ldr	r3, [r7, #12]
 8022828:	681b      	ldr	r3, [r3, #0]
 802282a:	68da      	ldr	r2, [r3, #12]
 802282c:	68fb      	ldr	r3, [r7, #12]
 802282e:	681b      	ldr	r3, [r3, #0]
 8022830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022834:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8022836:	68fb      	ldr	r3, [r7, #12]
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	695a      	ldr	r2, [r3, #20]
 802283c:	68fb      	ldr	r3, [r7, #12]
 802283e:	681b      	ldr	r3, [r3, #0]
 8022840:	f042 0201 	orr.w	r2, r2, #1
 8022844:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8022846:	68fb      	ldr	r3, [r7, #12]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	68da      	ldr	r2, [r3, #12]
 802284c:	68fb      	ldr	r3, [r7, #12]
 802284e:	681b      	ldr	r3, [r3, #0]
 8022850:	f042 0220 	orr.w	r2, r2, #32
 8022854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8022856:	2300      	movs	r3, #0
}
 8022858:	4618      	mov	r0, r3
 802285a:	3714      	adds	r7, #20
 802285c:	46bd      	mov	sp, r7
 802285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022862:	4770      	bx	lr

08022864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022864:	b480      	push	{r7}
 8022866:	b095      	sub	sp, #84	; 0x54
 8022868:	af00      	add	r7, sp, #0
 802286a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	681b      	ldr	r3, [r3, #0]
 8022870:	330c      	adds	r3, #12
 8022872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022876:	e853 3f00 	ldrex	r3, [r3]
 802287a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802287e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8022882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	681b      	ldr	r3, [r3, #0]
 8022888:	330c      	adds	r3, #12
 802288a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802288c:	643a      	str	r2, [r7, #64]	; 0x40
 802288e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022890:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022894:	e841 2300 	strex	r3, r2, [r1]
 8022898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802289c:	2b00      	cmp	r3, #0
 802289e:	d1e5      	bne.n	802286c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	3314      	adds	r3, #20
 80228a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80228a8:	6a3b      	ldr	r3, [r7, #32]
 80228aa:	e853 3f00 	ldrex	r3, [r3]
 80228ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80228b0:	69fb      	ldr	r3, [r7, #28]
 80228b2:	f023 0301 	bic.w	r3, r3, #1
 80228b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	3314      	adds	r3, #20
 80228be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80228c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80228c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80228c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80228c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80228c8:	e841 2300 	strex	r3, r2, [r1]
 80228cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80228ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d1e5      	bne.n	80228a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80228d4:	687b      	ldr	r3, [r7, #4]
 80228d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80228d8:	2b01      	cmp	r3, #1
 80228da:	d119      	bne.n	8022910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	681b      	ldr	r3, [r3, #0]
 80228e0:	330c      	adds	r3, #12
 80228e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80228e4:	68fb      	ldr	r3, [r7, #12]
 80228e6:	e853 3f00 	ldrex	r3, [r3]
 80228ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80228ec:	68bb      	ldr	r3, [r7, #8]
 80228ee:	f023 0310 	bic.w	r3, r3, #16
 80228f2:	647b      	str	r3, [r7, #68]	; 0x44
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	681b      	ldr	r3, [r3, #0]
 80228f8:	330c      	adds	r3, #12
 80228fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80228fc:	61ba      	str	r2, [r7, #24]
 80228fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022900:	6979      	ldr	r1, [r7, #20]
 8022902:	69ba      	ldr	r2, [r7, #24]
 8022904:	e841 2300 	strex	r3, r2, [r1]
 8022908:	613b      	str	r3, [r7, #16]
   return(result);
 802290a:	693b      	ldr	r3, [r7, #16]
 802290c:	2b00      	cmp	r3, #0
 802290e:	d1e5      	bne.n	80228dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	2220      	movs	r2, #32
 8022914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022918:	687b      	ldr	r3, [r7, #4]
 802291a:	2200      	movs	r2, #0
 802291c:	631a      	str	r2, [r3, #48]	; 0x30
}
 802291e:	bf00      	nop
 8022920:	3754      	adds	r7, #84	; 0x54
 8022922:	46bd      	mov	sp, r7
 8022924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022928:	4770      	bx	lr

0802292a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802292a:	b580      	push	{r7, lr}
 802292c:	b084      	sub	sp, #16
 802292e:	af00      	add	r7, sp, #0
 8022930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022936:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8022938:	68fb      	ldr	r3, [r7, #12]
 802293a:	2200      	movs	r2, #0
 802293c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802293e:	68fb      	ldr	r3, [r7, #12]
 8022940:	2200      	movs	r2, #0
 8022942:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022944:	68f8      	ldr	r0, [r7, #12]
 8022946:	f7ff ff2f 	bl	80227a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802294a:	bf00      	nop
 802294c:	3710      	adds	r7, #16
 802294e:	46bd      	mov	sp, r7
 8022950:	bd80      	pop	{r7, pc}

08022952 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8022952:	b580      	push	{r7, lr}
 8022954:	b084      	sub	sp, #16
 8022956:	af00      	add	r7, sp, #0
 8022958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802295e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022964:	2200      	movs	r2, #0
 8022966:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8022968:	68fb      	ldr	r3, [r7, #12]
 802296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802296c:	2b00      	cmp	r3, #0
 802296e:	d004      	beq.n	802297a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8022970:	68fb      	ldr	r3, [r7, #12]
 8022972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022976:	2b00      	cmp	r3, #0
 8022978:	d117      	bne.n	80229aa <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 802297a:	68fb      	ldr	r3, [r7, #12]
 802297c:	2200      	movs	r2, #0
 802297e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8022980:	68fb      	ldr	r3, [r7, #12]
 8022982:	2200      	movs	r2, #0
 8022984:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022986:	68fb      	ldr	r3, [r7, #12]
 8022988:	2200      	movs	r2, #0
 802298a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 802298c:	68fb      	ldr	r3, [r7, #12]
 802298e:	2220      	movs	r2, #32
 8022990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8022994:	68fb      	ldr	r3, [r7, #12]
 8022996:	2220      	movs	r2, #32
 8022998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802299c:	68fb      	ldr	r3, [r7, #12]
 802299e:	2200      	movs	r2, #0
 80229a0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80229a2:	68f8      	ldr	r0, [r7, #12]
 80229a4:	f7ff ff0a 	bl	80227bc <HAL_UART_AbortCpltCallback>
 80229a8:	e000      	b.n	80229ac <UART_DMATxAbortCallback+0x5a>
      return;
 80229aa:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80229ac:	3710      	adds	r7, #16
 80229ae:	46bd      	mov	sp, r7
 80229b0:	bd80      	pop	{r7, pc}

080229b2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80229b2:	b580      	push	{r7, lr}
 80229b4:	b084      	sub	sp, #16
 80229b6:	af00      	add	r7, sp, #0
 80229b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229be:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80229c0:	68fb      	ldr	r3, [r7, #12]
 80229c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229c4:	2200      	movs	r2, #0
 80229c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80229c8:	68fb      	ldr	r3, [r7, #12]
 80229ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80229cc:	2b00      	cmp	r3, #0
 80229ce:	d004      	beq.n	80229da <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80229d0:	68fb      	ldr	r3, [r7, #12]
 80229d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80229d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80229d6:	2b00      	cmp	r3, #0
 80229d8:	d117      	bne.n	8022a0a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	2200      	movs	r2, #0
 80229de:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80229e0:	68fb      	ldr	r3, [r7, #12]
 80229e2:	2200      	movs	r2, #0
 80229e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80229e6:	68fb      	ldr	r3, [r7, #12]
 80229e8:	2200      	movs	r2, #0
 80229ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80229ec:	68fb      	ldr	r3, [r7, #12]
 80229ee:	2220      	movs	r2, #32
 80229f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	2220      	movs	r2, #32
 80229f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80229fc:	68fb      	ldr	r3, [r7, #12]
 80229fe:	2200      	movs	r2, #0
 8022a00:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8022a02:	68f8      	ldr	r0, [r7, #12]
 8022a04:	f7ff feda 	bl	80227bc <HAL_UART_AbortCpltCallback>
 8022a08:	e000      	b.n	8022a0c <UART_DMARxAbortCallback+0x5a>
      return;
 8022a0a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022a0c:	3710      	adds	r7, #16
 8022a0e:	46bd      	mov	sp, r7
 8022a10:	bd80      	pop	{r7, pc}

08022a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8022a12:	b480      	push	{r7}
 8022a14:	b085      	sub	sp, #20
 8022a16:	af00      	add	r7, sp, #0
 8022a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022a20:	b2db      	uxtb	r3, r3
 8022a22:	2b21      	cmp	r3, #33	; 0x21
 8022a24:	d13e      	bne.n	8022aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	689b      	ldr	r3, [r3, #8]
 8022a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022a2e:	d114      	bne.n	8022a5a <UART_Transmit_IT+0x48>
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	691b      	ldr	r3, [r3, #16]
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d110      	bne.n	8022a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	6a1b      	ldr	r3, [r3, #32]
 8022a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8022a3e:	68fb      	ldr	r3, [r7, #12]
 8022a40:	881b      	ldrh	r3, [r3, #0]
 8022a42:	461a      	mov	r2, r3
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	681b      	ldr	r3, [r3, #0]
 8022a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	6a1b      	ldr	r3, [r3, #32]
 8022a52:	1c9a      	adds	r2, r3, #2
 8022a54:	687b      	ldr	r3, [r7, #4]
 8022a56:	621a      	str	r2, [r3, #32]
 8022a58:	e008      	b.n	8022a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	6a1b      	ldr	r3, [r3, #32]
 8022a5e:	1c59      	adds	r1, r3, #1
 8022a60:	687a      	ldr	r2, [r7, #4]
 8022a62:	6211      	str	r1, [r2, #32]
 8022a64:	781a      	ldrb	r2, [r3, #0]
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022a70:	b29b      	uxth	r3, r3
 8022a72:	3b01      	subs	r3, #1
 8022a74:	b29b      	uxth	r3, r3
 8022a76:	687a      	ldr	r2, [r7, #4]
 8022a78:	4619      	mov	r1, r3
 8022a7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d10f      	bne.n	8022aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	68da      	ldr	r2, [r3, #12]
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8022a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	68da      	ldr	r2, [r3, #12]
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8022a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022aa0:	2300      	movs	r3, #0
 8022aa2:	e000      	b.n	8022aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022aa4:	2302      	movs	r3, #2
  }
}
 8022aa6:	4618      	mov	r0, r3
 8022aa8:	3714      	adds	r7, #20
 8022aaa:	46bd      	mov	sp, r7
 8022aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ab0:	4770      	bx	lr

08022ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022ab2:	b580      	push	{r7, lr}
 8022ab4:	b082      	sub	sp, #8
 8022ab6:	af00      	add	r7, sp, #0
 8022ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	68da      	ldr	r2, [r3, #12]
 8022ac0:	687b      	ldr	r3, [r7, #4]
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	2220      	movs	r2, #32
 8022ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022ad2:	6878      	ldr	r0, [r7, #4]
 8022ad4:	f7df fccc 	bl	8002470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022ad8:	2300      	movs	r3, #0
}
 8022ada:	4618      	mov	r0, r3
 8022adc:	3708      	adds	r7, #8
 8022ade:	46bd      	mov	sp, r7
 8022ae0:	bd80      	pop	{r7, pc}

08022ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022ae2:	b580      	push	{r7, lr}
 8022ae4:	b08c      	sub	sp, #48	; 0x30
 8022ae6:	af00      	add	r7, sp, #0
 8022ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8022af0:	b2db      	uxtb	r3, r3
 8022af2:	2b22      	cmp	r3, #34	; 0x22
 8022af4:	f040 80ab 	bne.w	8022c4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	689b      	ldr	r3, [r3, #8]
 8022afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022b00:	d117      	bne.n	8022b32 <UART_Receive_IT+0x50>
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	691b      	ldr	r3, [r3, #16]
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d113      	bne.n	8022b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8022b0a:	2300      	movs	r3, #0
 8022b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8022b0e:	687b      	ldr	r3, [r7, #4]
 8022b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	681b      	ldr	r3, [r3, #0]
 8022b18:	685b      	ldr	r3, [r3, #4]
 8022b1a:	b29b      	uxth	r3, r3
 8022b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022b20:	b29a      	uxth	r2, r3
 8022b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8022b26:	687b      	ldr	r3, [r7, #4]
 8022b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b2a:	1c9a      	adds	r2, r3, #2
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8022b30:	e026      	b.n	8022b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8022b38:	2300      	movs	r3, #0
 8022b3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	689b      	ldr	r3, [r3, #8]
 8022b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022b44:	d007      	beq.n	8022b56 <UART_Receive_IT+0x74>
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	689b      	ldr	r3, [r3, #8]
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d10a      	bne.n	8022b64 <UART_Receive_IT+0x82>
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	691b      	ldr	r3, [r3, #16]
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d106      	bne.n	8022b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	681b      	ldr	r3, [r3, #0]
 8022b5a:	685b      	ldr	r3, [r3, #4]
 8022b5c:	b2da      	uxtb	r2, r3
 8022b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b60:	701a      	strb	r2, [r3, #0]
 8022b62:	e008      	b.n	8022b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022b64:	687b      	ldr	r3, [r7, #4]
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	685b      	ldr	r3, [r3, #4]
 8022b6a:	b2db      	uxtb	r3, r3
 8022b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022b70:	b2da      	uxtb	r2, r3
 8022b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b7a:	1c5a      	adds	r2, r3, #1
 8022b7c:	687b      	ldr	r3, [r7, #4]
 8022b7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022b84:	b29b      	uxth	r3, r3
 8022b86:	3b01      	subs	r3, #1
 8022b88:	b29b      	uxth	r3, r3
 8022b8a:	687a      	ldr	r2, [r7, #4]
 8022b8c:	4619      	mov	r1, r3
 8022b8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d15a      	bne.n	8022c4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	681b      	ldr	r3, [r3, #0]
 8022b98:	68da      	ldr	r2, [r3, #12]
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	681b      	ldr	r3, [r3, #0]
 8022b9e:	f022 0220 	bic.w	r2, r2, #32
 8022ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	68da      	ldr	r2, [r3, #12]
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	695a      	ldr	r2, [r3, #20]
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	f022 0201 	bic.w	r2, r2, #1
 8022bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022bc4:	687b      	ldr	r3, [r7, #4]
 8022bc6:	2220      	movs	r2, #32
 8022bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022bcc:	687b      	ldr	r3, [r7, #4]
 8022bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022bd0:	2b01      	cmp	r3, #1
 8022bd2:	d135      	bne.n	8022c40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	2200      	movs	r2, #0
 8022bd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	330c      	adds	r3, #12
 8022be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022be2:	697b      	ldr	r3, [r7, #20]
 8022be4:	e853 3f00 	ldrex	r3, [r3]
 8022be8:	613b      	str	r3, [r7, #16]
   return(result);
 8022bea:	693b      	ldr	r3, [r7, #16]
 8022bec:	f023 0310 	bic.w	r3, r3, #16
 8022bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	330c      	adds	r3, #12
 8022bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022bfa:	623a      	str	r2, [r7, #32]
 8022bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022bfe:	69f9      	ldr	r1, [r7, #28]
 8022c00:	6a3a      	ldr	r2, [r7, #32]
 8022c02:	e841 2300 	strex	r3, r2, [r1]
 8022c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8022c08:	69bb      	ldr	r3, [r7, #24]
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	d1e5      	bne.n	8022bda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	681b      	ldr	r3, [r3, #0]
 8022c14:	f003 0310 	and.w	r3, r3, #16
 8022c18:	2b10      	cmp	r3, #16
 8022c1a:	d10a      	bne.n	8022c32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8022c1c:	2300      	movs	r3, #0
 8022c1e:	60fb      	str	r3, [r7, #12]
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	681b      	ldr	r3, [r3, #0]
 8022c24:	681b      	ldr	r3, [r3, #0]
 8022c26:	60fb      	str	r3, [r7, #12]
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	685b      	ldr	r3, [r3, #4]
 8022c2e:	60fb      	str	r3, [r7, #12]
 8022c30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8022c32:	687b      	ldr	r3, [r7, #4]
 8022c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8022c36:	4619      	mov	r1, r3
 8022c38:	6878      	ldr	r0, [r7, #4]
 8022c3a:	f7ff fdc9 	bl	80227d0 <HAL_UARTEx_RxEventCallback>
 8022c3e:	e002      	b.n	8022c46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8022c40:	6878      	ldr	r0, [r7, #4]
 8022c42:	f7df fc71 	bl	8002528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8022c46:	2300      	movs	r3, #0
 8022c48:	e002      	b.n	8022c50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8022c4a:	2300      	movs	r3, #0
 8022c4c:	e000      	b.n	8022c50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8022c4e:	2302      	movs	r3, #2
  }
}
 8022c50:	4618      	mov	r0, r3
 8022c52:	3730      	adds	r7, #48	; 0x30
 8022c54:	46bd      	mov	sp, r7
 8022c56:	bd80      	pop	{r7, pc}

08022c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022c5c:	b0c0      	sub	sp, #256	; 0x100
 8022c5e:	af00      	add	r7, sp, #0
 8022c60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c68:	681b      	ldr	r3, [r3, #0]
 8022c6a:	691b      	ldr	r3, [r3, #16]
 8022c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c74:	68d9      	ldr	r1, [r3, #12]
 8022c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c7a:	681a      	ldr	r2, [r3, #0]
 8022c7c:	ea40 0301 	orr.w	r3, r0, r1
 8022c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c86:	689a      	ldr	r2, [r3, #8]
 8022c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c8c:	691b      	ldr	r3, [r3, #16]
 8022c8e:	431a      	orrs	r2, r3
 8022c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c94:	695b      	ldr	r3, [r3, #20]
 8022c96:	431a      	orrs	r2, r3
 8022c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022c9c:	69db      	ldr	r3, [r3, #28]
 8022c9e:	4313      	orrs	r3, r2
 8022ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8022ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	68db      	ldr	r3, [r3, #12]
 8022cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022cb0:	f021 010c 	bic.w	r1, r1, #12
 8022cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cb8:	681a      	ldr	r2, [r3, #0]
 8022cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8022cbe:	430b      	orrs	r3, r1
 8022cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	695b      	ldr	r3, [r3, #20]
 8022cca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8022cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cd2:	6999      	ldr	r1, [r3, #24]
 8022cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cd8:	681a      	ldr	r2, [r3, #0]
 8022cda:	ea40 0301 	orr.w	r3, r0, r1
 8022cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ce4:	681a      	ldr	r2, [r3, #0]
 8022ce6:	4b8f      	ldr	r3, [pc, #572]	; (8022f24 <UART_SetConfig+0x2cc>)
 8022ce8:	429a      	cmp	r2, r3
 8022cea:	d005      	beq.n	8022cf8 <UART_SetConfig+0xa0>
 8022cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cf0:	681a      	ldr	r2, [r3, #0]
 8022cf2:	4b8d      	ldr	r3, [pc, #564]	; (8022f28 <UART_SetConfig+0x2d0>)
 8022cf4:	429a      	cmp	r2, r3
 8022cf6:	d104      	bne.n	8022d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022cf8:	f7fe f82a 	bl	8020d50 <HAL_RCC_GetPCLK2Freq>
 8022cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8022d00:	e003      	b.n	8022d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022d02:	f7fe f811 	bl	8020d28 <HAL_RCC_GetPCLK1Freq>
 8022d06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d0e:	69db      	ldr	r3, [r3, #28]
 8022d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022d14:	f040 810c 	bne.w	8022f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022d1c:	2200      	movs	r2, #0
 8022d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8022d22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8022d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022d2a:	4622      	mov	r2, r4
 8022d2c:	462b      	mov	r3, r5
 8022d2e:	1891      	adds	r1, r2, r2
 8022d30:	65b9      	str	r1, [r7, #88]	; 0x58
 8022d32:	415b      	adcs	r3, r3
 8022d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8022d3a:	4621      	mov	r1, r4
 8022d3c:	eb12 0801 	adds.w	r8, r2, r1
 8022d40:	4629      	mov	r1, r5
 8022d42:	eb43 0901 	adc.w	r9, r3, r1
 8022d46:	f04f 0200 	mov.w	r2, #0
 8022d4a:	f04f 0300 	mov.w	r3, #0
 8022d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022d5a:	4690      	mov	r8, r2
 8022d5c:	4699      	mov	r9, r3
 8022d5e:	4623      	mov	r3, r4
 8022d60:	eb18 0303 	adds.w	r3, r8, r3
 8022d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8022d68:	462b      	mov	r3, r5
 8022d6a:	eb49 0303 	adc.w	r3, r9, r3
 8022d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d76:	685b      	ldr	r3, [r3, #4]
 8022d78:	2200      	movs	r2, #0
 8022d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8022d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8022d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8022d86:	460b      	mov	r3, r1
 8022d88:	18db      	adds	r3, r3, r3
 8022d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8022d8c:	4613      	mov	r3, r2
 8022d8e:	eb42 0303 	adc.w	r3, r2, r3
 8022d92:	657b      	str	r3, [r7, #84]	; 0x54
 8022d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8022d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8022d9c:	f7de f870 	bl	8000e80 <__aeabi_uldivmod>
 8022da0:	4602      	mov	r2, r0
 8022da2:	460b      	mov	r3, r1
 8022da4:	4b61      	ldr	r3, [pc, #388]	; (8022f2c <UART_SetConfig+0x2d4>)
 8022da6:	fba3 2302 	umull	r2, r3, r3, r2
 8022daa:	095b      	lsrs	r3, r3, #5
 8022dac:	011c      	lsls	r4, r3, #4
 8022dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022db2:	2200      	movs	r2, #0
 8022db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022db8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8022dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8022dc0:	4642      	mov	r2, r8
 8022dc2:	464b      	mov	r3, r9
 8022dc4:	1891      	adds	r1, r2, r2
 8022dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8022dc8:	415b      	adcs	r3, r3
 8022dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8022dd0:	4641      	mov	r1, r8
 8022dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8022dd6:	4649      	mov	r1, r9
 8022dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8022ddc:	f04f 0200 	mov.w	r2, #0
 8022de0:	f04f 0300 	mov.w	r3, #0
 8022de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8022dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8022df0:	4692      	mov	sl, r2
 8022df2:	469b      	mov	fp, r3
 8022df4:	4643      	mov	r3, r8
 8022df6:	eb1a 0303 	adds.w	r3, sl, r3
 8022dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8022dfe:	464b      	mov	r3, r9
 8022e00:	eb4b 0303 	adc.w	r3, fp, r3
 8022e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022e0c:	685b      	ldr	r3, [r3, #4]
 8022e0e:	2200      	movs	r2, #0
 8022e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022e14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8022e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8022e1c:	460b      	mov	r3, r1
 8022e1e:	18db      	adds	r3, r3, r3
 8022e20:	643b      	str	r3, [r7, #64]	; 0x40
 8022e22:	4613      	mov	r3, r2
 8022e24:	eb42 0303 	adc.w	r3, r2, r3
 8022e28:	647b      	str	r3, [r7, #68]	; 0x44
 8022e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8022e32:	f7de f825 	bl	8000e80 <__aeabi_uldivmod>
 8022e36:	4602      	mov	r2, r0
 8022e38:	460b      	mov	r3, r1
 8022e3a:	4611      	mov	r1, r2
 8022e3c:	4b3b      	ldr	r3, [pc, #236]	; (8022f2c <UART_SetConfig+0x2d4>)
 8022e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8022e42:	095b      	lsrs	r3, r3, #5
 8022e44:	2264      	movs	r2, #100	; 0x64
 8022e46:	fb02 f303 	mul.w	r3, r2, r3
 8022e4a:	1acb      	subs	r3, r1, r3
 8022e4c:	00db      	lsls	r3, r3, #3
 8022e4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8022e52:	4b36      	ldr	r3, [pc, #216]	; (8022f2c <UART_SetConfig+0x2d4>)
 8022e54:	fba3 2302 	umull	r2, r3, r3, r2
 8022e58:	095b      	lsrs	r3, r3, #5
 8022e5a:	005b      	lsls	r3, r3, #1
 8022e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022e60:	441c      	add	r4, r3
 8022e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022e66:	2200      	movs	r2, #0
 8022e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8022e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8022e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8022e74:	4642      	mov	r2, r8
 8022e76:	464b      	mov	r3, r9
 8022e78:	1891      	adds	r1, r2, r2
 8022e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8022e7c:	415b      	adcs	r3, r3
 8022e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022e84:	4641      	mov	r1, r8
 8022e86:	1851      	adds	r1, r2, r1
 8022e88:	6339      	str	r1, [r7, #48]	; 0x30
 8022e8a:	4649      	mov	r1, r9
 8022e8c:	414b      	adcs	r3, r1
 8022e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8022e90:	f04f 0200 	mov.w	r2, #0
 8022e94:	f04f 0300 	mov.w	r3, #0
 8022e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8022e9c:	4659      	mov	r1, fp
 8022e9e:	00cb      	lsls	r3, r1, #3
 8022ea0:	4651      	mov	r1, sl
 8022ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022ea6:	4651      	mov	r1, sl
 8022ea8:	00ca      	lsls	r2, r1, #3
 8022eaa:	4610      	mov	r0, r2
 8022eac:	4619      	mov	r1, r3
 8022eae:	4603      	mov	r3, r0
 8022eb0:	4642      	mov	r2, r8
 8022eb2:	189b      	adds	r3, r3, r2
 8022eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8022eb8:	464b      	mov	r3, r9
 8022eba:	460a      	mov	r2, r1
 8022ebc:	eb42 0303 	adc.w	r3, r2, r3
 8022ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ec8:	685b      	ldr	r3, [r3, #4]
 8022eca:	2200      	movs	r2, #0
 8022ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8022ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8022ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8022ed8:	460b      	mov	r3, r1
 8022eda:	18db      	adds	r3, r3, r3
 8022edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8022ede:	4613      	mov	r3, r2
 8022ee0:	eb42 0303 	adc.w	r3, r2, r3
 8022ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8022eee:	f7dd ffc7 	bl	8000e80 <__aeabi_uldivmod>
 8022ef2:	4602      	mov	r2, r0
 8022ef4:	460b      	mov	r3, r1
 8022ef6:	4b0d      	ldr	r3, [pc, #52]	; (8022f2c <UART_SetConfig+0x2d4>)
 8022ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8022efc:	095b      	lsrs	r3, r3, #5
 8022efe:	2164      	movs	r1, #100	; 0x64
 8022f00:	fb01 f303 	mul.w	r3, r1, r3
 8022f04:	1ad3      	subs	r3, r2, r3
 8022f06:	00db      	lsls	r3, r3, #3
 8022f08:	3332      	adds	r3, #50	; 0x32
 8022f0a:	4a08      	ldr	r2, [pc, #32]	; (8022f2c <UART_SetConfig+0x2d4>)
 8022f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8022f10:	095b      	lsrs	r3, r3, #5
 8022f12:	f003 0207 	and.w	r2, r3, #7
 8022f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	4422      	add	r2, r4
 8022f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8022f20:	e105      	b.n	802312e <UART_SetConfig+0x4d6>
 8022f22:	bf00      	nop
 8022f24:	40011000 	.word	0x40011000
 8022f28:	40011400 	.word	0x40011400
 8022f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022f34:	2200      	movs	r2, #0
 8022f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8022f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8022f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8022f42:	4642      	mov	r2, r8
 8022f44:	464b      	mov	r3, r9
 8022f46:	1891      	adds	r1, r2, r2
 8022f48:	6239      	str	r1, [r7, #32]
 8022f4a:	415b      	adcs	r3, r3
 8022f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8022f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022f52:	4641      	mov	r1, r8
 8022f54:	1854      	adds	r4, r2, r1
 8022f56:	4649      	mov	r1, r9
 8022f58:	eb43 0501 	adc.w	r5, r3, r1
 8022f5c:	f04f 0200 	mov.w	r2, #0
 8022f60:	f04f 0300 	mov.w	r3, #0
 8022f64:	00eb      	lsls	r3, r5, #3
 8022f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022f6a:	00e2      	lsls	r2, r4, #3
 8022f6c:	4614      	mov	r4, r2
 8022f6e:	461d      	mov	r5, r3
 8022f70:	4643      	mov	r3, r8
 8022f72:	18e3      	adds	r3, r4, r3
 8022f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8022f78:	464b      	mov	r3, r9
 8022f7a:	eb45 0303 	adc.w	r3, r5, r3
 8022f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022f86:	685b      	ldr	r3, [r3, #4]
 8022f88:	2200      	movs	r2, #0
 8022f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8022f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8022f92:	f04f 0200 	mov.w	r2, #0
 8022f96:	f04f 0300 	mov.w	r3, #0
 8022f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8022f9e:	4629      	mov	r1, r5
 8022fa0:	008b      	lsls	r3, r1, #2
 8022fa2:	4621      	mov	r1, r4
 8022fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022fa8:	4621      	mov	r1, r4
 8022faa:	008a      	lsls	r2, r1, #2
 8022fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8022fb0:	f7dd ff66 	bl	8000e80 <__aeabi_uldivmod>
 8022fb4:	4602      	mov	r2, r0
 8022fb6:	460b      	mov	r3, r1
 8022fb8:	4b60      	ldr	r3, [pc, #384]	; (802313c <UART_SetConfig+0x4e4>)
 8022fba:	fba3 2302 	umull	r2, r3, r3, r2
 8022fbe:	095b      	lsrs	r3, r3, #5
 8022fc0:	011c      	lsls	r4, r3, #4
 8022fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022fc6:	2200      	movs	r2, #0
 8022fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8022fcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8022fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8022fd4:	4642      	mov	r2, r8
 8022fd6:	464b      	mov	r3, r9
 8022fd8:	1891      	adds	r1, r2, r2
 8022fda:	61b9      	str	r1, [r7, #24]
 8022fdc:	415b      	adcs	r3, r3
 8022fde:	61fb      	str	r3, [r7, #28]
 8022fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022fe4:	4641      	mov	r1, r8
 8022fe6:	1851      	adds	r1, r2, r1
 8022fe8:	6139      	str	r1, [r7, #16]
 8022fea:	4649      	mov	r1, r9
 8022fec:	414b      	adcs	r3, r1
 8022fee:	617b      	str	r3, [r7, #20]
 8022ff0:	f04f 0200 	mov.w	r2, #0
 8022ff4:	f04f 0300 	mov.w	r3, #0
 8022ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022ffc:	4659      	mov	r1, fp
 8022ffe:	00cb      	lsls	r3, r1, #3
 8023000:	4651      	mov	r1, sl
 8023002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023006:	4651      	mov	r1, sl
 8023008:	00ca      	lsls	r2, r1, #3
 802300a:	4610      	mov	r0, r2
 802300c:	4619      	mov	r1, r3
 802300e:	4603      	mov	r3, r0
 8023010:	4642      	mov	r2, r8
 8023012:	189b      	adds	r3, r3, r2
 8023014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023018:	464b      	mov	r3, r9
 802301a:	460a      	mov	r2, r1
 802301c:	eb42 0303 	adc.w	r3, r2, r3
 8023020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023028:	685b      	ldr	r3, [r3, #4]
 802302a:	2200      	movs	r2, #0
 802302c:	67bb      	str	r3, [r7, #120]	; 0x78
 802302e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8023030:	f04f 0200 	mov.w	r2, #0
 8023034:	f04f 0300 	mov.w	r3, #0
 8023038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802303c:	4649      	mov	r1, r9
 802303e:	008b      	lsls	r3, r1, #2
 8023040:	4641      	mov	r1, r8
 8023042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023046:	4641      	mov	r1, r8
 8023048:	008a      	lsls	r2, r1, #2
 802304a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802304e:	f7dd ff17 	bl	8000e80 <__aeabi_uldivmod>
 8023052:	4602      	mov	r2, r0
 8023054:	460b      	mov	r3, r1
 8023056:	4b39      	ldr	r3, [pc, #228]	; (802313c <UART_SetConfig+0x4e4>)
 8023058:	fba3 1302 	umull	r1, r3, r3, r2
 802305c:	095b      	lsrs	r3, r3, #5
 802305e:	2164      	movs	r1, #100	; 0x64
 8023060:	fb01 f303 	mul.w	r3, r1, r3
 8023064:	1ad3      	subs	r3, r2, r3
 8023066:	011b      	lsls	r3, r3, #4
 8023068:	3332      	adds	r3, #50	; 0x32
 802306a:	4a34      	ldr	r2, [pc, #208]	; (802313c <UART_SetConfig+0x4e4>)
 802306c:	fba2 2303 	umull	r2, r3, r2, r3
 8023070:	095b      	lsrs	r3, r3, #5
 8023072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023076:	441c      	add	r4, r3
 8023078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802307c:	2200      	movs	r2, #0
 802307e:	673b      	str	r3, [r7, #112]	; 0x70
 8023080:	677a      	str	r2, [r7, #116]	; 0x74
 8023082:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8023086:	4642      	mov	r2, r8
 8023088:	464b      	mov	r3, r9
 802308a:	1891      	adds	r1, r2, r2
 802308c:	60b9      	str	r1, [r7, #8]
 802308e:	415b      	adcs	r3, r3
 8023090:	60fb      	str	r3, [r7, #12]
 8023092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023096:	4641      	mov	r1, r8
 8023098:	1851      	adds	r1, r2, r1
 802309a:	6039      	str	r1, [r7, #0]
 802309c:	4649      	mov	r1, r9
 802309e:	414b      	adcs	r3, r1
 80230a0:	607b      	str	r3, [r7, #4]
 80230a2:	f04f 0200 	mov.w	r2, #0
 80230a6:	f04f 0300 	mov.w	r3, #0
 80230aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80230ae:	4659      	mov	r1, fp
 80230b0:	00cb      	lsls	r3, r1, #3
 80230b2:	4651      	mov	r1, sl
 80230b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80230b8:	4651      	mov	r1, sl
 80230ba:	00ca      	lsls	r2, r1, #3
 80230bc:	4610      	mov	r0, r2
 80230be:	4619      	mov	r1, r3
 80230c0:	4603      	mov	r3, r0
 80230c2:	4642      	mov	r2, r8
 80230c4:	189b      	adds	r3, r3, r2
 80230c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80230c8:	464b      	mov	r3, r9
 80230ca:	460a      	mov	r2, r1
 80230cc:	eb42 0303 	adc.w	r3, r2, r3
 80230d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80230d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80230d6:	685b      	ldr	r3, [r3, #4]
 80230d8:	2200      	movs	r2, #0
 80230da:	663b      	str	r3, [r7, #96]	; 0x60
 80230dc:	667a      	str	r2, [r7, #100]	; 0x64
 80230de:	f04f 0200 	mov.w	r2, #0
 80230e2:	f04f 0300 	mov.w	r3, #0
 80230e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80230ea:	4649      	mov	r1, r9
 80230ec:	008b      	lsls	r3, r1, #2
 80230ee:	4641      	mov	r1, r8
 80230f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80230f4:	4641      	mov	r1, r8
 80230f6:	008a      	lsls	r2, r1, #2
 80230f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80230fc:	f7dd fec0 	bl	8000e80 <__aeabi_uldivmod>
 8023100:	4602      	mov	r2, r0
 8023102:	460b      	mov	r3, r1
 8023104:	4b0d      	ldr	r3, [pc, #52]	; (802313c <UART_SetConfig+0x4e4>)
 8023106:	fba3 1302 	umull	r1, r3, r3, r2
 802310a:	095b      	lsrs	r3, r3, #5
 802310c:	2164      	movs	r1, #100	; 0x64
 802310e:	fb01 f303 	mul.w	r3, r1, r3
 8023112:	1ad3      	subs	r3, r2, r3
 8023114:	011b      	lsls	r3, r3, #4
 8023116:	3332      	adds	r3, #50	; 0x32
 8023118:	4a08      	ldr	r2, [pc, #32]	; (802313c <UART_SetConfig+0x4e4>)
 802311a:	fba2 2303 	umull	r2, r3, r2, r3
 802311e:	095b      	lsrs	r3, r3, #5
 8023120:	f003 020f 	and.w	r2, r3, #15
 8023124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023128:	681b      	ldr	r3, [r3, #0]
 802312a:	4422      	add	r2, r4
 802312c:	609a      	str	r2, [r3, #8]
}
 802312e:	bf00      	nop
 8023130:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8023134:	46bd      	mov	sp, r7
 8023136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802313a:	bf00      	nop
 802313c:	51eb851f 	.word	0x51eb851f

08023140 <atoi>:
 8023140:	220a      	movs	r2, #10
 8023142:	2100      	movs	r1, #0
 8023144:	f000 ba6a 	b.w	802361c <strtol>

08023148 <calloc>:
 8023148:	4b02      	ldr	r3, [pc, #8]	; (8023154 <calloc+0xc>)
 802314a:	460a      	mov	r2, r1
 802314c:	4601      	mov	r1, r0
 802314e:	6818      	ldr	r0, [r3, #0]
 8023150:	f000 b852 	b.w	80231f8 <_calloc_r>
 8023154:	20000140 	.word	0x20000140

08023158 <__errno>:
 8023158:	4b01      	ldr	r3, [pc, #4]	; (8023160 <__errno+0x8>)
 802315a:	6818      	ldr	r0, [r3, #0]
 802315c:	4770      	bx	lr
 802315e:	bf00      	nop
 8023160:	20000140 	.word	0x20000140

08023164 <__libc_init_array>:
 8023164:	b570      	push	{r4, r5, r6, lr}
 8023166:	4d0d      	ldr	r5, [pc, #52]	; (802319c <__libc_init_array+0x38>)
 8023168:	4c0d      	ldr	r4, [pc, #52]	; (80231a0 <__libc_init_array+0x3c>)
 802316a:	1b64      	subs	r4, r4, r5
 802316c:	10a4      	asrs	r4, r4, #2
 802316e:	2600      	movs	r6, #0
 8023170:	42a6      	cmp	r6, r4
 8023172:	d109      	bne.n	8023188 <__libc_init_array+0x24>
 8023174:	4d0b      	ldr	r5, [pc, #44]	; (80231a4 <__libc_init_array+0x40>)
 8023176:	4c0c      	ldr	r4, [pc, #48]	; (80231a8 <__libc_init_array+0x44>)
 8023178:	f002 ff02 	bl	8025f80 <_init>
 802317c:	1b64      	subs	r4, r4, r5
 802317e:	10a4      	asrs	r4, r4, #2
 8023180:	2600      	movs	r6, #0
 8023182:	42a6      	cmp	r6, r4
 8023184:	d105      	bne.n	8023192 <__libc_init_array+0x2e>
 8023186:	bd70      	pop	{r4, r5, r6, pc}
 8023188:	f855 3b04 	ldr.w	r3, [r5], #4
 802318c:	4798      	blx	r3
 802318e:	3601      	adds	r6, #1
 8023190:	e7ee      	b.n	8023170 <__libc_init_array+0xc>
 8023192:	f855 3b04 	ldr.w	r3, [r5], #4
 8023196:	4798      	blx	r3
 8023198:	3601      	adds	r6, #1
 802319a:	e7f2      	b.n	8023182 <__libc_init_array+0x1e>
 802319c:	08029ac8 	.word	0x08029ac8
 80231a0:	08029ac8 	.word	0x08029ac8
 80231a4:	08029ac8 	.word	0x08029ac8
 80231a8:	08029acc 	.word	0x08029acc

080231ac <malloc>:
 80231ac:	4b02      	ldr	r3, [pc, #8]	; (80231b8 <malloc+0xc>)
 80231ae:	4601      	mov	r1, r0
 80231b0:	6818      	ldr	r0, [r3, #0]
 80231b2:	f000 b8a3 	b.w	80232fc <_malloc_r>
 80231b6:	bf00      	nop
 80231b8:	20000140 	.word	0x20000140

080231bc <free>:
 80231bc:	4b02      	ldr	r3, [pc, #8]	; (80231c8 <free+0xc>)
 80231be:	4601      	mov	r1, r0
 80231c0:	6818      	ldr	r0, [r3, #0]
 80231c2:	f000 b82f 	b.w	8023224 <_free_r>
 80231c6:	bf00      	nop
 80231c8:	20000140 	.word	0x20000140

080231cc <memcpy>:
 80231cc:	440a      	add	r2, r1
 80231ce:	4291      	cmp	r1, r2
 80231d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80231d4:	d100      	bne.n	80231d8 <memcpy+0xc>
 80231d6:	4770      	bx	lr
 80231d8:	b510      	push	{r4, lr}
 80231da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80231de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80231e2:	4291      	cmp	r1, r2
 80231e4:	d1f9      	bne.n	80231da <memcpy+0xe>
 80231e6:	bd10      	pop	{r4, pc}

080231e8 <memset>:
 80231e8:	4402      	add	r2, r0
 80231ea:	4603      	mov	r3, r0
 80231ec:	4293      	cmp	r3, r2
 80231ee:	d100      	bne.n	80231f2 <memset+0xa>
 80231f0:	4770      	bx	lr
 80231f2:	f803 1b01 	strb.w	r1, [r3], #1
 80231f6:	e7f9      	b.n	80231ec <memset+0x4>

080231f8 <_calloc_r>:
 80231f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80231fa:	fba1 2402 	umull	r2, r4, r1, r2
 80231fe:	b94c      	cbnz	r4, 8023214 <_calloc_r+0x1c>
 8023200:	4611      	mov	r1, r2
 8023202:	9201      	str	r2, [sp, #4]
 8023204:	f000 f87a 	bl	80232fc <_malloc_r>
 8023208:	9a01      	ldr	r2, [sp, #4]
 802320a:	4605      	mov	r5, r0
 802320c:	b930      	cbnz	r0, 802321c <_calloc_r+0x24>
 802320e:	4628      	mov	r0, r5
 8023210:	b003      	add	sp, #12
 8023212:	bd30      	pop	{r4, r5, pc}
 8023214:	220c      	movs	r2, #12
 8023216:	6002      	str	r2, [r0, #0]
 8023218:	2500      	movs	r5, #0
 802321a:	e7f8      	b.n	802320e <_calloc_r+0x16>
 802321c:	4621      	mov	r1, r4
 802321e:	f7ff ffe3 	bl	80231e8 <memset>
 8023222:	e7f4      	b.n	802320e <_calloc_r+0x16>

08023224 <_free_r>:
 8023224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023226:	2900      	cmp	r1, #0
 8023228:	d044      	beq.n	80232b4 <_free_r+0x90>
 802322a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802322e:	9001      	str	r0, [sp, #4]
 8023230:	2b00      	cmp	r3, #0
 8023232:	f1a1 0404 	sub.w	r4, r1, #4
 8023236:	bfb8      	it	lt
 8023238:	18e4      	addlt	r4, r4, r3
 802323a:	f000 f9f9 	bl	8023630 <__malloc_lock>
 802323e:	4a1e      	ldr	r2, [pc, #120]	; (80232b8 <_free_r+0x94>)
 8023240:	9801      	ldr	r0, [sp, #4]
 8023242:	6813      	ldr	r3, [r2, #0]
 8023244:	b933      	cbnz	r3, 8023254 <_free_r+0x30>
 8023246:	6063      	str	r3, [r4, #4]
 8023248:	6014      	str	r4, [r2, #0]
 802324a:	b003      	add	sp, #12
 802324c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023250:	f000 b9f4 	b.w	802363c <__malloc_unlock>
 8023254:	42a3      	cmp	r3, r4
 8023256:	d908      	bls.n	802326a <_free_r+0x46>
 8023258:	6825      	ldr	r5, [r4, #0]
 802325a:	1961      	adds	r1, r4, r5
 802325c:	428b      	cmp	r3, r1
 802325e:	bf01      	itttt	eq
 8023260:	6819      	ldreq	r1, [r3, #0]
 8023262:	685b      	ldreq	r3, [r3, #4]
 8023264:	1949      	addeq	r1, r1, r5
 8023266:	6021      	streq	r1, [r4, #0]
 8023268:	e7ed      	b.n	8023246 <_free_r+0x22>
 802326a:	461a      	mov	r2, r3
 802326c:	685b      	ldr	r3, [r3, #4]
 802326e:	b10b      	cbz	r3, 8023274 <_free_r+0x50>
 8023270:	42a3      	cmp	r3, r4
 8023272:	d9fa      	bls.n	802326a <_free_r+0x46>
 8023274:	6811      	ldr	r1, [r2, #0]
 8023276:	1855      	adds	r5, r2, r1
 8023278:	42a5      	cmp	r5, r4
 802327a:	d10b      	bne.n	8023294 <_free_r+0x70>
 802327c:	6824      	ldr	r4, [r4, #0]
 802327e:	4421      	add	r1, r4
 8023280:	1854      	adds	r4, r2, r1
 8023282:	42a3      	cmp	r3, r4
 8023284:	6011      	str	r1, [r2, #0]
 8023286:	d1e0      	bne.n	802324a <_free_r+0x26>
 8023288:	681c      	ldr	r4, [r3, #0]
 802328a:	685b      	ldr	r3, [r3, #4]
 802328c:	6053      	str	r3, [r2, #4]
 802328e:	4421      	add	r1, r4
 8023290:	6011      	str	r1, [r2, #0]
 8023292:	e7da      	b.n	802324a <_free_r+0x26>
 8023294:	d902      	bls.n	802329c <_free_r+0x78>
 8023296:	230c      	movs	r3, #12
 8023298:	6003      	str	r3, [r0, #0]
 802329a:	e7d6      	b.n	802324a <_free_r+0x26>
 802329c:	6825      	ldr	r5, [r4, #0]
 802329e:	1961      	adds	r1, r4, r5
 80232a0:	428b      	cmp	r3, r1
 80232a2:	bf04      	itt	eq
 80232a4:	6819      	ldreq	r1, [r3, #0]
 80232a6:	685b      	ldreq	r3, [r3, #4]
 80232a8:	6063      	str	r3, [r4, #4]
 80232aa:	bf04      	itt	eq
 80232ac:	1949      	addeq	r1, r1, r5
 80232ae:	6021      	streq	r1, [r4, #0]
 80232b0:	6054      	str	r4, [r2, #4]
 80232b2:	e7ca      	b.n	802324a <_free_r+0x26>
 80232b4:	b003      	add	sp, #12
 80232b6:	bd30      	pop	{r4, r5, pc}
 80232b8:	20001ef0 	.word	0x20001ef0

080232bc <sbrk_aligned>:
 80232bc:	b570      	push	{r4, r5, r6, lr}
 80232be:	4e0e      	ldr	r6, [pc, #56]	; (80232f8 <sbrk_aligned+0x3c>)
 80232c0:	460c      	mov	r4, r1
 80232c2:	6831      	ldr	r1, [r6, #0]
 80232c4:	4605      	mov	r5, r0
 80232c6:	b911      	cbnz	r1, 80232ce <sbrk_aligned+0x12>
 80232c8:	f000 f88c 	bl	80233e4 <_sbrk_r>
 80232cc:	6030      	str	r0, [r6, #0]
 80232ce:	4621      	mov	r1, r4
 80232d0:	4628      	mov	r0, r5
 80232d2:	f000 f887 	bl	80233e4 <_sbrk_r>
 80232d6:	1c43      	adds	r3, r0, #1
 80232d8:	d00a      	beq.n	80232f0 <sbrk_aligned+0x34>
 80232da:	1cc4      	adds	r4, r0, #3
 80232dc:	f024 0403 	bic.w	r4, r4, #3
 80232e0:	42a0      	cmp	r0, r4
 80232e2:	d007      	beq.n	80232f4 <sbrk_aligned+0x38>
 80232e4:	1a21      	subs	r1, r4, r0
 80232e6:	4628      	mov	r0, r5
 80232e8:	f000 f87c 	bl	80233e4 <_sbrk_r>
 80232ec:	3001      	adds	r0, #1
 80232ee:	d101      	bne.n	80232f4 <sbrk_aligned+0x38>
 80232f0:	f04f 34ff 	mov.w	r4, #4294967295
 80232f4:	4620      	mov	r0, r4
 80232f6:	bd70      	pop	{r4, r5, r6, pc}
 80232f8:	20001ef4 	.word	0x20001ef4

080232fc <_malloc_r>:
 80232fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023300:	1ccd      	adds	r5, r1, #3
 8023302:	f025 0503 	bic.w	r5, r5, #3
 8023306:	3508      	adds	r5, #8
 8023308:	2d0c      	cmp	r5, #12
 802330a:	bf38      	it	cc
 802330c:	250c      	movcc	r5, #12
 802330e:	2d00      	cmp	r5, #0
 8023310:	4607      	mov	r7, r0
 8023312:	db01      	blt.n	8023318 <_malloc_r+0x1c>
 8023314:	42a9      	cmp	r1, r5
 8023316:	d905      	bls.n	8023324 <_malloc_r+0x28>
 8023318:	230c      	movs	r3, #12
 802331a:	603b      	str	r3, [r7, #0]
 802331c:	2600      	movs	r6, #0
 802331e:	4630      	mov	r0, r6
 8023320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023324:	4e2e      	ldr	r6, [pc, #184]	; (80233e0 <_malloc_r+0xe4>)
 8023326:	f000 f983 	bl	8023630 <__malloc_lock>
 802332a:	6833      	ldr	r3, [r6, #0]
 802332c:	461c      	mov	r4, r3
 802332e:	bb34      	cbnz	r4, 802337e <_malloc_r+0x82>
 8023330:	4629      	mov	r1, r5
 8023332:	4638      	mov	r0, r7
 8023334:	f7ff ffc2 	bl	80232bc <sbrk_aligned>
 8023338:	1c43      	adds	r3, r0, #1
 802333a:	4604      	mov	r4, r0
 802333c:	d14d      	bne.n	80233da <_malloc_r+0xde>
 802333e:	6834      	ldr	r4, [r6, #0]
 8023340:	4626      	mov	r6, r4
 8023342:	2e00      	cmp	r6, #0
 8023344:	d140      	bne.n	80233c8 <_malloc_r+0xcc>
 8023346:	6823      	ldr	r3, [r4, #0]
 8023348:	4631      	mov	r1, r6
 802334a:	4638      	mov	r0, r7
 802334c:	eb04 0803 	add.w	r8, r4, r3
 8023350:	f000 f848 	bl	80233e4 <_sbrk_r>
 8023354:	4580      	cmp	r8, r0
 8023356:	d13a      	bne.n	80233ce <_malloc_r+0xd2>
 8023358:	6821      	ldr	r1, [r4, #0]
 802335a:	3503      	adds	r5, #3
 802335c:	1a6d      	subs	r5, r5, r1
 802335e:	f025 0503 	bic.w	r5, r5, #3
 8023362:	3508      	adds	r5, #8
 8023364:	2d0c      	cmp	r5, #12
 8023366:	bf38      	it	cc
 8023368:	250c      	movcc	r5, #12
 802336a:	4629      	mov	r1, r5
 802336c:	4638      	mov	r0, r7
 802336e:	f7ff ffa5 	bl	80232bc <sbrk_aligned>
 8023372:	3001      	adds	r0, #1
 8023374:	d02b      	beq.n	80233ce <_malloc_r+0xd2>
 8023376:	6823      	ldr	r3, [r4, #0]
 8023378:	442b      	add	r3, r5
 802337a:	6023      	str	r3, [r4, #0]
 802337c:	e00e      	b.n	802339c <_malloc_r+0xa0>
 802337e:	6822      	ldr	r2, [r4, #0]
 8023380:	1b52      	subs	r2, r2, r5
 8023382:	d41e      	bmi.n	80233c2 <_malloc_r+0xc6>
 8023384:	2a0b      	cmp	r2, #11
 8023386:	d916      	bls.n	80233b6 <_malloc_r+0xba>
 8023388:	1961      	adds	r1, r4, r5
 802338a:	42a3      	cmp	r3, r4
 802338c:	6025      	str	r5, [r4, #0]
 802338e:	bf18      	it	ne
 8023390:	6059      	strne	r1, [r3, #4]
 8023392:	6863      	ldr	r3, [r4, #4]
 8023394:	bf08      	it	eq
 8023396:	6031      	streq	r1, [r6, #0]
 8023398:	5162      	str	r2, [r4, r5]
 802339a:	604b      	str	r3, [r1, #4]
 802339c:	4638      	mov	r0, r7
 802339e:	f104 060b 	add.w	r6, r4, #11
 80233a2:	f000 f94b 	bl	802363c <__malloc_unlock>
 80233a6:	f026 0607 	bic.w	r6, r6, #7
 80233aa:	1d23      	adds	r3, r4, #4
 80233ac:	1af2      	subs	r2, r6, r3
 80233ae:	d0b6      	beq.n	802331e <_malloc_r+0x22>
 80233b0:	1b9b      	subs	r3, r3, r6
 80233b2:	50a3      	str	r3, [r4, r2]
 80233b4:	e7b3      	b.n	802331e <_malloc_r+0x22>
 80233b6:	6862      	ldr	r2, [r4, #4]
 80233b8:	42a3      	cmp	r3, r4
 80233ba:	bf0c      	ite	eq
 80233bc:	6032      	streq	r2, [r6, #0]
 80233be:	605a      	strne	r2, [r3, #4]
 80233c0:	e7ec      	b.n	802339c <_malloc_r+0xa0>
 80233c2:	4623      	mov	r3, r4
 80233c4:	6864      	ldr	r4, [r4, #4]
 80233c6:	e7b2      	b.n	802332e <_malloc_r+0x32>
 80233c8:	4634      	mov	r4, r6
 80233ca:	6876      	ldr	r6, [r6, #4]
 80233cc:	e7b9      	b.n	8023342 <_malloc_r+0x46>
 80233ce:	230c      	movs	r3, #12
 80233d0:	603b      	str	r3, [r7, #0]
 80233d2:	4638      	mov	r0, r7
 80233d4:	f000 f932 	bl	802363c <__malloc_unlock>
 80233d8:	e7a1      	b.n	802331e <_malloc_r+0x22>
 80233da:	6025      	str	r5, [r4, #0]
 80233dc:	e7de      	b.n	802339c <_malloc_r+0xa0>
 80233de:	bf00      	nop
 80233e0:	20001ef0 	.word	0x20001ef0

080233e4 <_sbrk_r>:
 80233e4:	b538      	push	{r3, r4, r5, lr}
 80233e6:	4d06      	ldr	r5, [pc, #24]	; (8023400 <_sbrk_r+0x1c>)
 80233e8:	2300      	movs	r3, #0
 80233ea:	4604      	mov	r4, r0
 80233ec:	4608      	mov	r0, r1
 80233ee:	602b      	str	r3, [r5, #0]
 80233f0:	f7e0 fbc2 	bl	8003b78 <_sbrk>
 80233f4:	1c43      	adds	r3, r0, #1
 80233f6:	d102      	bne.n	80233fe <_sbrk_r+0x1a>
 80233f8:	682b      	ldr	r3, [r5, #0]
 80233fa:	b103      	cbz	r3, 80233fe <_sbrk_r+0x1a>
 80233fc:	6023      	str	r3, [r4, #0]
 80233fe:	bd38      	pop	{r3, r4, r5, pc}
 8023400:	20001ef8 	.word	0x20001ef8

08023404 <strcasecmp>:
 8023404:	b530      	push	{r4, r5, lr}
 8023406:	4d0b      	ldr	r5, [pc, #44]	; (8023434 <strcasecmp+0x30>)
 8023408:	4604      	mov	r4, r0
 802340a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802340e:	5d5a      	ldrb	r2, [r3, r5]
 8023410:	f002 0203 	and.w	r2, r2, #3
 8023414:	2a01      	cmp	r2, #1
 8023416:	f811 2b01 	ldrb.w	r2, [r1], #1
 802341a:	5ca8      	ldrb	r0, [r5, r2]
 802341c:	f000 0003 	and.w	r0, r0, #3
 8023420:	bf08      	it	eq
 8023422:	3320      	addeq	r3, #32
 8023424:	2801      	cmp	r0, #1
 8023426:	bf08      	it	eq
 8023428:	3220      	addeq	r2, #32
 802342a:	1a98      	subs	r0, r3, r2
 802342c:	d101      	bne.n	8023432 <strcasecmp+0x2e>
 802342e:	2a00      	cmp	r2, #0
 8023430:	d1eb      	bne.n	802340a <strcasecmp+0x6>
 8023432:	bd30      	pop	{r4, r5, pc}
 8023434:	080293b9 	.word	0x080293b9

08023438 <strcat>:
 8023438:	b510      	push	{r4, lr}
 802343a:	4602      	mov	r2, r0
 802343c:	7814      	ldrb	r4, [r2, #0]
 802343e:	4613      	mov	r3, r2
 8023440:	3201      	adds	r2, #1
 8023442:	2c00      	cmp	r4, #0
 8023444:	d1fa      	bne.n	802343c <strcat+0x4>
 8023446:	3b01      	subs	r3, #1
 8023448:	f811 2b01 	ldrb.w	r2, [r1], #1
 802344c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023450:	2a00      	cmp	r2, #0
 8023452:	d1f9      	bne.n	8023448 <strcat+0x10>
 8023454:	bd10      	pop	{r4, pc}

08023456 <strchr>:
 8023456:	b2c9      	uxtb	r1, r1
 8023458:	4603      	mov	r3, r0
 802345a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802345e:	b11a      	cbz	r2, 8023468 <strchr+0x12>
 8023460:	428a      	cmp	r2, r1
 8023462:	d1f9      	bne.n	8023458 <strchr+0x2>
 8023464:	4618      	mov	r0, r3
 8023466:	4770      	bx	lr
 8023468:	2900      	cmp	r1, #0
 802346a:	bf18      	it	ne
 802346c:	2300      	movne	r3, #0
 802346e:	e7f9      	b.n	8023464 <strchr+0xe>

08023470 <strcpy>:
 8023470:	4603      	mov	r3, r0
 8023472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023476:	f803 2b01 	strb.w	r2, [r3], #1
 802347a:	2a00      	cmp	r2, #0
 802347c:	d1f9      	bne.n	8023472 <strcpy+0x2>
 802347e:	4770      	bx	lr

08023480 <strncasecmp>:
 8023480:	b570      	push	{r4, r5, r6, lr}
 8023482:	4e0f      	ldr	r6, [pc, #60]	; (80234c0 <strncasecmp+0x40>)
 8023484:	4604      	mov	r4, r0
 8023486:	440a      	add	r2, r1
 8023488:	428a      	cmp	r2, r1
 802348a:	d101      	bne.n	8023490 <strncasecmp+0x10>
 802348c:	2000      	movs	r0, #0
 802348e:	e013      	b.n	80234b8 <strncasecmp+0x38>
 8023490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023494:	5d98      	ldrb	r0, [r3, r6]
 8023496:	f000 0003 	and.w	r0, r0, #3
 802349a:	2801      	cmp	r0, #1
 802349c:	f811 0b01 	ldrb.w	r0, [r1], #1
 80234a0:	5c35      	ldrb	r5, [r6, r0]
 80234a2:	f005 0503 	and.w	r5, r5, #3
 80234a6:	bf08      	it	eq
 80234a8:	3320      	addeq	r3, #32
 80234aa:	2d01      	cmp	r5, #1
 80234ac:	bf08      	it	eq
 80234ae:	3020      	addeq	r0, #32
 80234b0:	1a1b      	subs	r3, r3, r0
 80234b2:	d102      	bne.n	80234ba <strncasecmp+0x3a>
 80234b4:	2800      	cmp	r0, #0
 80234b6:	d1e7      	bne.n	8023488 <strncasecmp+0x8>
 80234b8:	bd70      	pop	{r4, r5, r6, pc}
 80234ba:	4618      	mov	r0, r3
 80234bc:	e7fc      	b.n	80234b8 <strncasecmp+0x38>
 80234be:	bf00      	nop
 80234c0:	080293b9 	.word	0x080293b9

080234c4 <strncpy>:
 80234c4:	b510      	push	{r4, lr}
 80234c6:	3901      	subs	r1, #1
 80234c8:	4603      	mov	r3, r0
 80234ca:	b132      	cbz	r2, 80234da <strncpy+0x16>
 80234cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80234d0:	f803 4b01 	strb.w	r4, [r3], #1
 80234d4:	3a01      	subs	r2, #1
 80234d6:	2c00      	cmp	r4, #0
 80234d8:	d1f7      	bne.n	80234ca <strncpy+0x6>
 80234da:	441a      	add	r2, r3
 80234dc:	2100      	movs	r1, #0
 80234de:	4293      	cmp	r3, r2
 80234e0:	d100      	bne.n	80234e4 <strncpy+0x20>
 80234e2:	bd10      	pop	{r4, pc}
 80234e4:	f803 1b01 	strb.w	r1, [r3], #1
 80234e8:	e7f9      	b.n	80234de <strncpy+0x1a>

080234ea <strstr>:
 80234ea:	780a      	ldrb	r2, [r1, #0]
 80234ec:	b570      	push	{r4, r5, r6, lr}
 80234ee:	b96a      	cbnz	r2, 802350c <strstr+0x22>
 80234f0:	bd70      	pop	{r4, r5, r6, pc}
 80234f2:	429a      	cmp	r2, r3
 80234f4:	d109      	bne.n	802350a <strstr+0x20>
 80234f6:	460c      	mov	r4, r1
 80234f8:	4605      	mov	r5, r0
 80234fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80234fe:	2b00      	cmp	r3, #0
 8023500:	d0f6      	beq.n	80234f0 <strstr+0x6>
 8023502:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8023506:	429e      	cmp	r6, r3
 8023508:	d0f7      	beq.n	80234fa <strstr+0x10>
 802350a:	3001      	adds	r0, #1
 802350c:	7803      	ldrb	r3, [r0, #0]
 802350e:	2b00      	cmp	r3, #0
 8023510:	d1ef      	bne.n	80234f2 <strstr+0x8>
 8023512:	4618      	mov	r0, r3
 8023514:	e7ec      	b.n	80234f0 <strstr+0x6>
	...

08023518 <_strtol_l.constprop.0>:
 8023518:	2b01      	cmp	r3, #1
 802351a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802351e:	d001      	beq.n	8023524 <_strtol_l.constprop.0+0xc>
 8023520:	2b24      	cmp	r3, #36	; 0x24
 8023522:	d906      	bls.n	8023532 <_strtol_l.constprop.0+0x1a>
 8023524:	f7ff fe18 	bl	8023158 <__errno>
 8023528:	2316      	movs	r3, #22
 802352a:	6003      	str	r3, [r0, #0]
 802352c:	2000      	movs	r0, #0
 802352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023532:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8023618 <_strtol_l.constprop.0+0x100>
 8023536:	460d      	mov	r5, r1
 8023538:	462e      	mov	r6, r5
 802353a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802353e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8023542:	f017 0708 	ands.w	r7, r7, #8
 8023546:	d1f7      	bne.n	8023538 <_strtol_l.constprop.0+0x20>
 8023548:	2c2d      	cmp	r4, #45	; 0x2d
 802354a:	d132      	bne.n	80235b2 <_strtol_l.constprop.0+0x9a>
 802354c:	782c      	ldrb	r4, [r5, #0]
 802354e:	2701      	movs	r7, #1
 8023550:	1cb5      	adds	r5, r6, #2
 8023552:	2b00      	cmp	r3, #0
 8023554:	d05b      	beq.n	802360e <_strtol_l.constprop.0+0xf6>
 8023556:	2b10      	cmp	r3, #16
 8023558:	d109      	bne.n	802356e <_strtol_l.constprop.0+0x56>
 802355a:	2c30      	cmp	r4, #48	; 0x30
 802355c:	d107      	bne.n	802356e <_strtol_l.constprop.0+0x56>
 802355e:	782c      	ldrb	r4, [r5, #0]
 8023560:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023564:	2c58      	cmp	r4, #88	; 0x58
 8023566:	d14d      	bne.n	8023604 <_strtol_l.constprop.0+0xec>
 8023568:	786c      	ldrb	r4, [r5, #1]
 802356a:	2310      	movs	r3, #16
 802356c:	3502      	adds	r5, #2
 802356e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8023572:	f108 38ff 	add.w	r8, r8, #4294967295
 8023576:	f04f 0c00 	mov.w	ip, #0
 802357a:	fbb8 f9f3 	udiv	r9, r8, r3
 802357e:	4666      	mov	r6, ip
 8023580:	fb03 8a19 	mls	sl, r3, r9, r8
 8023584:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8023588:	f1be 0f09 	cmp.w	lr, #9
 802358c:	d816      	bhi.n	80235bc <_strtol_l.constprop.0+0xa4>
 802358e:	4674      	mov	r4, lr
 8023590:	42a3      	cmp	r3, r4
 8023592:	dd24      	ble.n	80235de <_strtol_l.constprop.0+0xc6>
 8023594:	f1bc 0f00 	cmp.w	ip, #0
 8023598:	db1e      	blt.n	80235d8 <_strtol_l.constprop.0+0xc0>
 802359a:	45b1      	cmp	r9, r6
 802359c:	d31c      	bcc.n	80235d8 <_strtol_l.constprop.0+0xc0>
 802359e:	d101      	bne.n	80235a4 <_strtol_l.constprop.0+0x8c>
 80235a0:	45a2      	cmp	sl, r4
 80235a2:	db19      	blt.n	80235d8 <_strtol_l.constprop.0+0xc0>
 80235a4:	fb06 4603 	mla	r6, r6, r3, r4
 80235a8:	f04f 0c01 	mov.w	ip, #1
 80235ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80235b0:	e7e8      	b.n	8023584 <_strtol_l.constprop.0+0x6c>
 80235b2:	2c2b      	cmp	r4, #43	; 0x2b
 80235b4:	bf04      	itt	eq
 80235b6:	782c      	ldrbeq	r4, [r5, #0]
 80235b8:	1cb5      	addeq	r5, r6, #2
 80235ba:	e7ca      	b.n	8023552 <_strtol_l.constprop.0+0x3a>
 80235bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80235c0:	f1be 0f19 	cmp.w	lr, #25
 80235c4:	d801      	bhi.n	80235ca <_strtol_l.constprop.0+0xb2>
 80235c6:	3c37      	subs	r4, #55	; 0x37
 80235c8:	e7e2      	b.n	8023590 <_strtol_l.constprop.0+0x78>
 80235ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80235ce:	f1be 0f19 	cmp.w	lr, #25
 80235d2:	d804      	bhi.n	80235de <_strtol_l.constprop.0+0xc6>
 80235d4:	3c57      	subs	r4, #87	; 0x57
 80235d6:	e7db      	b.n	8023590 <_strtol_l.constprop.0+0x78>
 80235d8:	f04f 3cff 	mov.w	ip, #4294967295
 80235dc:	e7e6      	b.n	80235ac <_strtol_l.constprop.0+0x94>
 80235de:	f1bc 0f00 	cmp.w	ip, #0
 80235e2:	da05      	bge.n	80235f0 <_strtol_l.constprop.0+0xd8>
 80235e4:	2322      	movs	r3, #34	; 0x22
 80235e6:	6003      	str	r3, [r0, #0]
 80235e8:	4646      	mov	r6, r8
 80235ea:	b942      	cbnz	r2, 80235fe <_strtol_l.constprop.0+0xe6>
 80235ec:	4630      	mov	r0, r6
 80235ee:	e79e      	b.n	802352e <_strtol_l.constprop.0+0x16>
 80235f0:	b107      	cbz	r7, 80235f4 <_strtol_l.constprop.0+0xdc>
 80235f2:	4276      	negs	r6, r6
 80235f4:	2a00      	cmp	r2, #0
 80235f6:	d0f9      	beq.n	80235ec <_strtol_l.constprop.0+0xd4>
 80235f8:	f1bc 0f00 	cmp.w	ip, #0
 80235fc:	d000      	beq.n	8023600 <_strtol_l.constprop.0+0xe8>
 80235fe:	1e69      	subs	r1, r5, #1
 8023600:	6011      	str	r1, [r2, #0]
 8023602:	e7f3      	b.n	80235ec <_strtol_l.constprop.0+0xd4>
 8023604:	2430      	movs	r4, #48	; 0x30
 8023606:	2b00      	cmp	r3, #0
 8023608:	d1b1      	bne.n	802356e <_strtol_l.constprop.0+0x56>
 802360a:	2308      	movs	r3, #8
 802360c:	e7af      	b.n	802356e <_strtol_l.constprop.0+0x56>
 802360e:	2c30      	cmp	r4, #48	; 0x30
 8023610:	d0a5      	beq.n	802355e <_strtol_l.constprop.0+0x46>
 8023612:	230a      	movs	r3, #10
 8023614:	e7ab      	b.n	802356e <_strtol_l.constprop.0+0x56>
 8023616:	bf00      	nop
 8023618:	080293b9 	.word	0x080293b9

0802361c <strtol>:
 802361c:	4613      	mov	r3, r2
 802361e:	460a      	mov	r2, r1
 8023620:	4601      	mov	r1, r0
 8023622:	4802      	ldr	r0, [pc, #8]	; (802362c <strtol+0x10>)
 8023624:	6800      	ldr	r0, [r0, #0]
 8023626:	f7ff bf77 	b.w	8023518 <_strtol_l.constprop.0>
 802362a:	bf00      	nop
 802362c:	20000140 	.word	0x20000140

08023630 <__malloc_lock>:
 8023630:	4801      	ldr	r0, [pc, #4]	; (8023638 <__malloc_lock+0x8>)
 8023632:	f000 b809 	b.w	8023648 <__retarget_lock_acquire_recursive>
 8023636:	bf00      	nop
 8023638:	20001efc 	.word	0x20001efc

0802363c <__malloc_unlock>:
 802363c:	4801      	ldr	r0, [pc, #4]	; (8023644 <__malloc_unlock+0x8>)
 802363e:	f000 b804 	b.w	802364a <__retarget_lock_release_recursive>
 8023642:	bf00      	nop
 8023644:	20001efc 	.word	0x20001efc

08023648 <__retarget_lock_acquire_recursive>:
 8023648:	4770      	bx	lr

0802364a <__retarget_lock_release_recursive>:
 802364a:	4770      	bx	lr
 802364c:	0000      	movs	r0, r0
	...

08023650 <cos>:
 8023650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023652:	ec53 2b10 	vmov	r2, r3, d0
 8023656:	4826      	ldr	r0, [pc, #152]	; (80236f0 <cos+0xa0>)
 8023658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802365c:	4281      	cmp	r1, r0
 802365e:	dc06      	bgt.n	802366e <cos+0x1e>
 8023660:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80236e8 <cos+0x98>
 8023664:	b005      	add	sp, #20
 8023666:	f85d eb04 	ldr.w	lr, [sp], #4
 802366a:	f001 b9c1 	b.w	80249f0 <__kernel_cos>
 802366e:	4821      	ldr	r0, [pc, #132]	; (80236f4 <cos+0xa4>)
 8023670:	4281      	cmp	r1, r0
 8023672:	dd09      	ble.n	8023688 <cos+0x38>
 8023674:	ee10 0a10 	vmov	r0, s0
 8023678:	4619      	mov	r1, r3
 802367a:	f7dc fdb9 	bl	80001f0 <__aeabi_dsub>
 802367e:	ec41 0b10 	vmov	d0, r0, r1
 8023682:	b005      	add	sp, #20
 8023684:	f85d fb04 	ldr.w	pc, [sp], #4
 8023688:	4668      	mov	r0, sp
 802368a:	f000 f9fd 	bl	8023a88 <__ieee754_rem_pio2>
 802368e:	f000 0003 	and.w	r0, r0, #3
 8023692:	2801      	cmp	r0, #1
 8023694:	d00b      	beq.n	80236ae <cos+0x5e>
 8023696:	2802      	cmp	r0, #2
 8023698:	d016      	beq.n	80236c8 <cos+0x78>
 802369a:	b9e0      	cbnz	r0, 80236d6 <cos+0x86>
 802369c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80236a0:	ed9d 0b00 	vldr	d0, [sp]
 80236a4:	f001 f9a4 	bl	80249f0 <__kernel_cos>
 80236a8:	ec51 0b10 	vmov	r0, r1, d0
 80236ac:	e7e7      	b.n	802367e <cos+0x2e>
 80236ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80236b2:	ed9d 0b00 	vldr	d0, [sp]
 80236b6:	f001 fdb3 	bl	8025220 <__kernel_sin>
 80236ba:	ec53 2b10 	vmov	r2, r3, d0
 80236be:	ee10 0a10 	vmov	r0, s0
 80236c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80236c6:	e7da      	b.n	802367e <cos+0x2e>
 80236c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80236cc:	ed9d 0b00 	vldr	d0, [sp]
 80236d0:	f001 f98e 	bl	80249f0 <__kernel_cos>
 80236d4:	e7f1      	b.n	80236ba <cos+0x6a>
 80236d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80236da:	ed9d 0b00 	vldr	d0, [sp]
 80236de:	2001      	movs	r0, #1
 80236e0:	f001 fd9e 	bl	8025220 <__kernel_sin>
 80236e4:	e7e0      	b.n	80236a8 <cos+0x58>
 80236e6:	bf00      	nop
	...
 80236f0:	3fe921fb 	.word	0x3fe921fb
 80236f4:	7fefffff 	.word	0x7fefffff

080236f8 <sin>:
 80236f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80236fa:	ec53 2b10 	vmov	r2, r3, d0
 80236fe:	4828      	ldr	r0, [pc, #160]	; (80237a0 <sin+0xa8>)
 8023700:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8023704:	4281      	cmp	r1, r0
 8023706:	dc07      	bgt.n	8023718 <sin+0x20>
 8023708:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023798 <sin+0xa0>
 802370c:	2000      	movs	r0, #0
 802370e:	b005      	add	sp, #20
 8023710:	f85d eb04 	ldr.w	lr, [sp], #4
 8023714:	f001 bd84 	b.w	8025220 <__kernel_sin>
 8023718:	4822      	ldr	r0, [pc, #136]	; (80237a4 <sin+0xac>)
 802371a:	4281      	cmp	r1, r0
 802371c:	dd09      	ble.n	8023732 <sin+0x3a>
 802371e:	ee10 0a10 	vmov	r0, s0
 8023722:	4619      	mov	r1, r3
 8023724:	f7dc fd64 	bl	80001f0 <__aeabi_dsub>
 8023728:	ec41 0b10 	vmov	d0, r0, r1
 802372c:	b005      	add	sp, #20
 802372e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023732:	4668      	mov	r0, sp
 8023734:	f000 f9a8 	bl	8023a88 <__ieee754_rem_pio2>
 8023738:	f000 0003 	and.w	r0, r0, #3
 802373c:	2801      	cmp	r0, #1
 802373e:	d00c      	beq.n	802375a <sin+0x62>
 8023740:	2802      	cmp	r0, #2
 8023742:	d011      	beq.n	8023768 <sin+0x70>
 8023744:	b9f0      	cbnz	r0, 8023784 <sin+0x8c>
 8023746:	ed9d 1b02 	vldr	d1, [sp, #8]
 802374a:	ed9d 0b00 	vldr	d0, [sp]
 802374e:	2001      	movs	r0, #1
 8023750:	f001 fd66 	bl	8025220 <__kernel_sin>
 8023754:	ec51 0b10 	vmov	r0, r1, d0
 8023758:	e7e6      	b.n	8023728 <sin+0x30>
 802375a:	ed9d 1b02 	vldr	d1, [sp, #8]
 802375e:	ed9d 0b00 	vldr	d0, [sp]
 8023762:	f001 f945 	bl	80249f0 <__kernel_cos>
 8023766:	e7f5      	b.n	8023754 <sin+0x5c>
 8023768:	ed9d 1b02 	vldr	d1, [sp, #8]
 802376c:	ed9d 0b00 	vldr	d0, [sp]
 8023770:	2001      	movs	r0, #1
 8023772:	f001 fd55 	bl	8025220 <__kernel_sin>
 8023776:	ec53 2b10 	vmov	r2, r3, d0
 802377a:	ee10 0a10 	vmov	r0, s0
 802377e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023782:	e7d1      	b.n	8023728 <sin+0x30>
 8023784:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023788:	ed9d 0b00 	vldr	d0, [sp]
 802378c:	f001 f930 	bl	80249f0 <__kernel_cos>
 8023790:	e7f1      	b.n	8023776 <sin+0x7e>
 8023792:	bf00      	nop
 8023794:	f3af 8000 	nop.w
	...
 80237a0:	3fe921fb 	.word	0x3fe921fb
 80237a4:	7fefffff 	.word	0x7fefffff

080237a8 <cosf>:
 80237a8:	ee10 3a10 	vmov	r3, s0
 80237ac:	b507      	push	{r0, r1, r2, lr}
 80237ae:	4a1e      	ldr	r2, [pc, #120]	; (8023828 <cosf+0x80>)
 80237b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80237b4:	4293      	cmp	r3, r2
 80237b6:	dc06      	bgt.n	80237c6 <cosf+0x1e>
 80237b8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 802382c <cosf+0x84>
 80237bc:	b003      	add	sp, #12
 80237be:	f85d eb04 	ldr.w	lr, [sp], #4
 80237c2:	f001 bdeb 	b.w	802539c <__kernel_cosf>
 80237c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80237ca:	db04      	blt.n	80237d6 <cosf+0x2e>
 80237cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80237d0:	b003      	add	sp, #12
 80237d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80237d6:	4668      	mov	r0, sp
 80237d8:	f000 ffc8 	bl	802476c <__ieee754_rem_pio2f>
 80237dc:	f000 0003 	and.w	r0, r0, #3
 80237e0:	2801      	cmp	r0, #1
 80237e2:	d009      	beq.n	80237f8 <cosf+0x50>
 80237e4:	2802      	cmp	r0, #2
 80237e6:	d010      	beq.n	802380a <cosf+0x62>
 80237e8:	b9b0      	cbnz	r0, 8023818 <cosf+0x70>
 80237ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80237ee:	ed9d 0a00 	vldr	s0, [sp]
 80237f2:	f001 fdd3 	bl	802539c <__kernel_cosf>
 80237f6:	e7eb      	b.n	80237d0 <cosf+0x28>
 80237f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80237fc:	ed9d 0a00 	vldr	s0, [sp]
 8023800:	f002 f8a2 	bl	8025948 <__kernel_sinf>
 8023804:	eeb1 0a40 	vneg.f32	s0, s0
 8023808:	e7e2      	b.n	80237d0 <cosf+0x28>
 802380a:	eddd 0a01 	vldr	s1, [sp, #4]
 802380e:	ed9d 0a00 	vldr	s0, [sp]
 8023812:	f001 fdc3 	bl	802539c <__kernel_cosf>
 8023816:	e7f5      	b.n	8023804 <cosf+0x5c>
 8023818:	eddd 0a01 	vldr	s1, [sp, #4]
 802381c:	ed9d 0a00 	vldr	s0, [sp]
 8023820:	2001      	movs	r0, #1
 8023822:	f002 f891 	bl	8025948 <__kernel_sinf>
 8023826:	e7d3      	b.n	80237d0 <cosf+0x28>
 8023828:	3f490fd8 	.word	0x3f490fd8
 802382c:	00000000 	.word	0x00000000

08023830 <lrintf>:
 8023830:	ee10 3a10 	vmov	r3, s0
 8023834:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023838:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 802383c:	281e      	cmp	r0, #30
 802383e:	b082      	sub	sp, #8
 8023840:	dc2e      	bgt.n	80238a0 <lrintf+0x70>
 8023842:	1c41      	adds	r1, r0, #1
 8023844:	da02      	bge.n	802384c <lrintf+0x1c>
 8023846:	2000      	movs	r0, #0
 8023848:	b002      	add	sp, #8
 802384a:	4770      	bx	lr
 802384c:	2816      	cmp	r0, #22
 802384e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8023852:	dd09      	ble.n	8023868 <lrintf+0x38>
 8023854:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023858:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802385c:	3a96      	subs	r2, #150	; 0x96
 802385e:	4090      	lsls	r0, r2
 8023860:	2900      	cmp	r1, #0
 8023862:	d0f1      	beq.n	8023848 <lrintf+0x18>
 8023864:	4240      	negs	r0, r0
 8023866:	e7ef      	b.n	8023848 <lrintf+0x18>
 8023868:	4b10      	ldr	r3, [pc, #64]	; (80238ac <lrintf+0x7c>)
 802386a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802386e:	ed93 7a00 	vldr	s14, [r3]
 8023872:	ee37 0a00 	vadd.f32	s0, s14, s0
 8023876:	ed8d 0a01 	vstr	s0, [sp, #4]
 802387a:	eddd 7a01 	vldr	s15, [sp, #4]
 802387e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023882:	ee17 3a90 	vmov	r3, s15
 8023886:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802388a:	d0dc      	beq.n	8023846 <lrintf+0x16>
 802388c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8023890:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8023894:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8023898:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802389c:	40d8      	lsrs	r0, r3
 802389e:	e7df      	b.n	8023860 <lrintf+0x30>
 80238a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80238a4:	ee17 0a90 	vmov	r0, s15
 80238a8:	e7ce      	b.n	8023848 <lrintf+0x18>
 80238aa:	bf00      	nop
 80238ac:	080294bc 	.word	0x080294bc

080238b0 <sinf>:
 80238b0:	ee10 3a10 	vmov	r3, s0
 80238b4:	b507      	push	{r0, r1, r2, lr}
 80238b6:	4a1f      	ldr	r2, [pc, #124]	; (8023934 <sinf+0x84>)
 80238b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80238bc:	4293      	cmp	r3, r2
 80238be:	dc07      	bgt.n	80238d0 <sinf+0x20>
 80238c0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8023938 <sinf+0x88>
 80238c4:	2000      	movs	r0, #0
 80238c6:	b003      	add	sp, #12
 80238c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80238cc:	f002 b83c 	b.w	8025948 <__kernel_sinf>
 80238d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80238d4:	db04      	blt.n	80238e0 <sinf+0x30>
 80238d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80238da:	b003      	add	sp, #12
 80238dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80238e0:	4668      	mov	r0, sp
 80238e2:	f000 ff43 	bl	802476c <__ieee754_rem_pio2f>
 80238e6:	f000 0003 	and.w	r0, r0, #3
 80238ea:	2801      	cmp	r0, #1
 80238ec:	d00a      	beq.n	8023904 <sinf+0x54>
 80238ee:	2802      	cmp	r0, #2
 80238f0:	d00f      	beq.n	8023912 <sinf+0x62>
 80238f2:	b9c0      	cbnz	r0, 8023926 <sinf+0x76>
 80238f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80238f8:	ed9d 0a00 	vldr	s0, [sp]
 80238fc:	2001      	movs	r0, #1
 80238fe:	f002 f823 	bl	8025948 <__kernel_sinf>
 8023902:	e7ea      	b.n	80238da <sinf+0x2a>
 8023904:	eddd 0a01 	vldr	s1, [sp, #4]
 8023908:	ed9d 0a00 	vldr	s0, [sp]
 802390c:	f001 fd46 	bl	802539c <__kernel_cosf>
 8023910:	e7e3      	b.n	80238da <sinf+0x2a>
 8023912:	eddd 0a01 	vldr	s1, [sp, #4]
 8023916:	ed9d 0a00 	vldr	s0, [sp]
 802391a:	2001      	movs	r0, #1
 802391c:	f002 f814 	bl	8025948 <__kernel_sinf>
 8023920:	eeb1 0a40 	vneg.f32	s0, s0
 8023924:	e7d9      	b.n	80238da <sinf+0x2a>
 8023926:	eddd 0a01 	vldr	s1, [sp, #4]
 802392a:	ed9d 0a00 	vldr	s0, [sp]
 802392e:	f001 fd35 	bl	802539c <__kernel_cosf>
 8023932:	e7f5      	b.n	8023920 <sinf+0x70>
 8023934:	3f490fd8 	.word	0x3f490fd8
 8023938:	00000000 	.word	0x00000000

0802393c <acosf>:
 802393c:	b508      	push	{r3, lr}
 802393e:	ed2d 8b02 	vpush	{d8}
 8023942:	eeb0 8a40 	vmov.f32	s16, s0
 8023946:	f000 faab 	bl	8023ea0 <__ieee754_acosf>
 802394a:	eeb4 8a48 	vcmp.f32	s16, s16
 802394e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023952:	eef0 8a40 	vmov.f32	s17, s0
 8023956:	d615      	bvs.n	8023984 <acosf+0x48>
 8023958:	eeb0 0a48 	vmov.f32	s0, s16
 802395c:	f002 fa42 	bl	8025de4 <fabsf>
 8023960:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023964:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802396c:	dd0a      	ble.n	8023984 <acosf+0x48>
 802396e:	f7ff fbf3 	bl	8023158 <__errno>
 8023972:	ecbd 8b02 	vpop	{d8}
 8023976:	2321      	movs	r3, #33	; 0x21
 8023978:	6003      	str	r3, [r0, #0]
 802397a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802397e:	4804      	ldr	r0, [pc, #16]	; (8023990 <acosf+0x54>)
 8023980:	f002 ba86 	b.w	8025e90 <nanf>
 8023984:	eeb0 0a68 	vmov.f32	s0, s17
 8023988:	ecbd 8b02 	vpop	{d8}
 802398c:	bd08      	pop	{r3, pc}
 802398e:	bf00      	nop
 8023990:	080294c4 	.word	0x080294c4

08023994 <atan2f>:
 8023994:	f000 bb7c 	b.w	8024090 <__ieee754_atan2f>

08023998 <powf>:
 8023998:	b508      	push	{r3, lr}
 802399a:	ed2d 8b04 	vpush	{d8-d9}
 802399e:	eeb0 8a60 	vmov.f32	s16, s1
 80239a2:	eeb0 9a40 	vmov.f32	s18, s0
 80239a6:	f000 fc13 	bl	80241d0 <__ieee754_powf>
 80239aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80239ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239b2:	eef0 8a40 	vmov.f32	s17, s0
 80239b6:	d63e      	bvs.n	8023a36 <powf+0x9e>
 80239b8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80239bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239c0:	d112      	bne.n	80239e8 <powf+0x50>
 80239c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80239c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239ca:	d039      	beq.n	8023a40 <powf+0xa8>
 80239cc:	eeb0 0a48 	vmov.f32	s0, s16
 80239d0:	f002 fa0f 	bl	8025df2 <finitef>
 80239d4:	b378      	cbz	r0, 8023a36 <powf+0x9e>
 80239d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80239da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239de:	d52a      	bpl.n	8023a36 <powf+0x9e>
 80239e0:	f7ff fbba 	bl	8023158 <__errno>
 80239e4:	2322      	movs	r3, #34	; 0x22
 80239e6:	e014      	b.n	8023a12 <powf+0x7a>
 80239e8:	f002 fa03 	bl	8025df2 <finitef>
 80239ec:	b998      	cbnz	r0, 8023a16 <powf+0x7e>
 80239ee:	eeb0 0a49 	vmov.f32	s0, s18
 80239f2:	f002 f9fe 	bl	8025df2 <finitef>
 80239f6:	b170      	cbz	r0, 8023a16 <powf+0x7e>
 80239f8:	eeb0 0a48 	vmov.f32	s0, s16
 80239fc:	f002 f9f9 	bl	8025df2 <finitef>
 8023a00:	b148      	cbz	r0, 8023a16 <powf+0x7e>
 8023a02:	eef4 8a68 	vcmp.f32	s17, s17
 8023a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a0a:	d7e9      	bvc.n	80239e0 <powf+0x48>
 8023a0c:	f7ff fba4 	bl	8023158 <__errno>
 8023a10:	2321      	movs	r3, #33	; 0x21
 8023a12:	6003      	str	r3, [r0, #0]
 8023a14:	e00f      	b.n	8023a36 <powf+0x9e>
 8023a16:	eef5 8a40 	vcmp.f32	s17, #0.0
 8023a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a1e:	d10a      	bne.n	8023a36 <powf+0x9e>
 8023a20:	eeb0 0a49 	vmov.f32	s0, s18
 8023a24:	f002 f9e5 	bl	8025df2 <finitef>
 8023a28:	b128      	cbz	r0, 8023a36 <powf+0x9e>
 8023a2a:	eeb0 0a48 	vmov.f32	s0, s16
 8023a2e:	f002 f9e0 	bl	8025df2 <finitef>
 8023a32:	2800      	cmp	r0, #0
 8023a34:	d1d4      	bne.n	80239e0 <powf+0x48>
 8023a36:	eeb0 0a68 	vmov.f32	s0, s17
 8023a3a:	ecbd 8b04 	vpop	{d8-d9}
 8023a3e:	bd08      	pop	{r3, pc}
 8023a40:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8023a44:	e7f7      	b.n	8023a36 <powf+0x9e>
	...

08023a48 <sqrtf>:
 8023a48:	b508      	push	{r3, lr}
 8023a4a:	ed2d 8b02 	vpush	{d8}
 8023a4e:	eeb0 8a40 	vmov.f32	s16, s0
 8023a52:	f000 ffc7 	bl	80249e4 <__ieee754_sqrtf>
 8023a56:	eeb4 8a48 	vcmp.f32	s16, s16
 8023a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a5e:	d60c      	bvs.n	8023a7a <sqrtf+0x32>
 8023a60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8023a80 <sqrtf+0x38>
 8023a64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8023a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a6c:	d505      	bpl.n	8023a7a <sqrtf+0x32>
 8023a6e:	f7ff fb73 	bl	8023158 <__errno>
 8023a72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8023a76:	2321      	movs	r3, #33	; 0x21
 8023a78:	6003      	str	r3, [r0, #0]
 8023a7a:	ecbd 8b02 	vpop	{d8}
 8023a7e:	bd08      	pop	{r3, pc}
	...

08023a88 <__ieee754_rem_pio2>:
 8023a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a8c:	ed2d 8b02 	vpush	{d8}
 8023a90:	ec55 4b10 	vmov	r4, r5, d0
 8023a94:	4bca      	ldr	r3, [pc, #808]	; (8023dc0 <__ieee754_rem_pio2+0x338>)
 8023a96:	b08b      	sub	sp, #44	; 0x2c
 8023a98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023a9c:	4598      	cmp	r8, r3
 8023a9e:	4682      	mov	sl, r0
 8023aa0:	9502      	str	r5, [sp, #8]
 8023aa2:	dc08      	bgt.n	8023ab6 <__ieee754_rem_pio2+0x2e>
 8023aa4:	2200      	movs	r2, #0
 8023aa6:	2300      	movs	r3, #0
 8023aa8:	ed80 0b00 	vstr	d0, [r0]
 8023aac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023ab0:	f04f 0b00 	mov.w	fp, #0
 8023ab4:	e028      	b.n	8023b08 <__ieee754_rem_pio2+0x80>
 8023ab6:	4bc3      	ldr	r3, [pc, #780]	; (8023dc4 <__ieee754_rem_pio2+0x33c>)
 8023ab8:	4598      	cmp	r8, r3
 8023aba:	dc78      	bgt.n	8023bae <__ieee754_rem_pio2+0x126>
 8023abc:	9b02      	ldr	r3, [sp, #8]
 8023abe:	4ec2      	ldr	r6, [pc, #776]	; (8023dc8 <__ieee754_rem_pio2+0x340>)
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	ee10 0a10 	vmov	r0, s0
 8023ac6:	a3b0      	add	r3, pc, #704	; (adr r3, 8023d88 <__ieee754_rem_pio2+0x300>)
 8023ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023acc:	4629      	mov	r1, r5
 8023ace:	dd39      	ble.n	8023b44 <__ieee754_rem_pio2+0xbc>
 8023ad0:	f7dc fb8e 	bl	80001f0 <__aeabi_dsub>
 8023ad4:	45b0      	cmp	r8, r6
 8023ad6:	4604      	mov	r4, r0
 8023ad8:	460d      	mov	r5, r1
 8023ada:	d01b      	beq.n	8023b14 <__ieee754_rem_pio2+0x8c>
 8023adc:	a3ac      	add	r3, pc, #688	; (adr r3, 8023d90 <__ieee754_rem_pio2+0x308>)
 8023ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ae2:	f7dc fb85 	bl	80001f0 <__aeabi_dsub>
 8023ae6:	4602      	mov	r2, r0
 8023ae8:	460b      	mov	r3, r1
 8023aea:	e9ca 2300 	strd	r2, r3, [sl]
 8023aee:	4620      	mov	r0, r4
 8023af0:	4629      	mov	r1, r5
 8023af2:	f7dc fb7d 	bl	80001f0 <__aeabi_dsub>
 8023af6:	a3a6      	add	r3, pc, #664	; (adr r3, 8023d90 <__ieee754_rem_pio2+0x308>)
 8023af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023afc:	f7dc fb78 	bl	80001f0 <__aeabi_dsub>
 8023b00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023b04:	f04f 0b01 	mov.w	fp, #1
 8023b08:	4658      	mov	r0, fp
 8023b0a:	b00b      	add	sp, #44	; 0x2c
 8023b0c:	ecbd 8b02 	vpop	{d8}
 8023b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b14:	a3a0      	add	r3, pc, #640	; (adr r3, 8023d98 <__ieee754_rem_pio2+0x310>)
 8023b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b1a:	f7dc fb69 	bl	80001f0 <__aeabi_dsub>
 8023b1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8023da0 <__ieee754_rem_pio2+0x318>)
 8023b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b24:	4604      	mov	r4, r0
 8023b26:	460d      	mov	r5, r1
 8023b28:	f7dc fb62 	bl	80001f0 <__aeabi_dsub>
 8023b2c:	4602      	mov	r2, r0
 8023b2e:	460b      	mov	r3, r1
 8023b30:	e9ca 2300 	strd	r2, r3, [sl]
 8023b34:	4620      	mov	r0, r4
 8023b36:	4629      	mov	r1, r5
 8023b38:	f7dc fb5a 	bl	80001f0 <__aeabi_dsub>
 8023b3c:	a398      	add	r3, pc, #608	; (adr r3, 8023da0 <__ieee754_rem_pio2+0x318>)
 8023b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b42:	e7db      	b.n	8023afc <__ieee754_rem_pio2+0x74>
 8023b44:	f7dc fb56 	bl	80001f4 <__adddf3>
 8023b48:	45b0      	cmp	r8, r6
 8023b4a:	4604      	mov	r4, r0
 8023b4c:	460d      	mov	r5, r1
 8023b4e:	d016      	beq.n	8023b7e <__ieee754_rem_pio2+0xf6>
 8023b50:	a38f      	add	r3, pc, #572	; (adr r3, 8023d90 <__ieee754_rem_pio2+0x308>)
 8023b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b56:	f7dc fb4d 	bl	80001f4 <__adddf3>
 8023b5a:	4602      	mov	r2, r0
 8023b5c:	460b      	mov	r3, r1
 8023b5e:	e9ca 2300 	strd	r2, r3, [sl]
 8023b62:	4620      	mov	r0, r4
 8023b64:	4629      	mov	r1, r5
 8023b66:	f7dc fb43 	bl	80001f0 <__aeabi_dsub>
 8023b6a:	a389      	add	r3, pc, #548	; (adr r3, 8023d90 <__ieee754_rem_pio2+0x308>)
 8023b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b70:	f7dc fb40 	bl	80001f4 <__adddf3>
 8023b74:	f04f 3bff 	mov.w	fp, #4294967295
 8023b78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023b7c:	e7c4      	b.n	8023b08 <__ieee754_rem_pio2+0x80>
 8023b7e:	a386      	add	r3, pc, #536	; (adr r3, 8023d98 <__ieee754_rem_pio2+0x310>)
 8023b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b84:	f7dc fb36 	bl	80001f4 <__adddf3>
 8023b88:	a385      	add	r3, pc, #532	; (adr r3, 8023da0 <__ieee754_rem_pio2+0x318>)
 8023b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b8e:	4604      	mov	r4, r0
 8023b90:	460d      	mov	r5, r1
 8023b92:	f7dc fb2f 	bl	80001f4 <__adddf3>
 8023b96:	4602      	mov	r2, r0
 8023b98:	460b      	mov	r3, r1
 8023b9a:	e9ca 2300 	strd	r2, r3, [sl]
 8023b9e:	4620      	mov	r0, r4
 8023ba0:	4629      	mov	r1, r5
 8023ba2:	f7dc fb25 	bl	80001f0 <__aeabi_dsub>
 8023ba6:	a37e      	add	r3, pc, #504	; (adr r3, 8023da0 <__ieee754_rem_pio2+0x318>)
 8023ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bac:	e7e0      	b.n	8023b70 <__ieee754_rem_pio2+0xe8>
 8023bae:	4b87      	ldr	r3, [pc, #540]	; (8023dcc <__ieee754_rem_pio2+0x344>)
 8023bb0:	4598      	cmp	r8, r3
 8023bb2:	f300 80d9 	bgt.w	8023d68 <__ieee754_rem_pio2+0x2e0>
 8023bb6:	f001 ff31 	bl	8025a1c <fabs>
 8023bba:	ec55 4b10 	vmov	r4, r5, d0
 8023bbe:	ee10 0a10 	vmov	r0, s0
 8023bc2:	a379      	add	r3, pc, #484	; (adr r3, 8023da8 <__ieee754_rem_pio2+0x320>)
 8023bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bc8:	4629      	mov	r1, r5
 8023bca:	f7dc fcc9 	bl	8000560 <__aeabi_dmul>
 8023bce:	4b80      	ldr	r3, [pc, #512]	; (8023dd0 <__ieee754_rem_pio2+0x348>)
 8023bd0:	2200      	movs	r2, #0
 8023bd2:	f7dc fb0f 	bl	80001f4 <__adddf3>
 8023bd6:	f7dc ff5d 	bl	8000a94 <__aeabi_d2iz>
 8023bda:	4683      	mov	fp, r0
 8023bdc:	f7dc fc56 	bl	800048c <__aeabi_i2d>
 8023be0:	4602      	mov	r2, r0
 8023be2:	460b      	mov	r3, r1
 8023be4:	ec43 2b18 	vmov	d8, r2, r3
 8023be8:	a367      	add	r3, pc, #412	; (adr r3, 8023d88 <__ieee754_rem_pio2+0x300>)
 8023bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bee:	f7dc fcb7 	bl	8000560 <__aeabi_dmul>
 8023bf2:	4602      	mov	r2, r0
 8023bf4:	460b      	mov	r3, r1
 8023bf6:	4620      	mov	r0, r4
 8023bf8:	4629      	mov	r1, r5
 8023bfa:	f7dc faf9 	bl	80001f0 <__aeabi_dsub>
 8023bfe:	a364      	add	r3, pc, #400	; (adr r3, 8023d90 <__ieee754_rem_pio2+0x308>)
 8023c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c04:	4606      	mov	r6, r0
 8023c06:	460f      	mov	r7, r1
 8023c08:	ec51 0b18 	vmov	r0, r1, d8
 8023c0c:	f7dc fca8 	bl	8000560 <__aeabi_dmul>
 8023c10:	f1bb 0f1f 	cmp.w	fp, #31
 8023c14:	4604      	mov	r4, r0
 8023c16:	460d      	mov	r5, r1
 8023c18:	dc0d      	bgt.n	8023c36 <__ieee754_rem_pio2+0x1ae>
 8023c1a:	4b6e      	ldr	r3, [pc, #440]	; (8023dd4 <__ieee754_rem_pio2+0x34c>)
 8023c1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c24:	4543      	cmp	r3, r8
 8023c26:	d006      	beq.n	8023c36 <__ieee754_rem_pio2+0x1ae>
 8023c28:	4622      	mov	r2, r4
 8023c2a:	462b      	mov	r3, r5
 8023c2c:	4630      	mov	r0, r6
 8023c2e:	4639      	mov	r1, r7
 8023c30:	f7dc fade 	bl	80001f0 <__aeabi_dsub>
 8023c34:	e00f      	b.n	8023c56 <__ieee754_rem_pio2+0x1ce>
 8023c36:	462b      	mov	r3, r5
 8023c38:	4622      	mov	r2, r4
 8023c3a:	4630      	mov	r0, r6
 8023c3c:	4639      	mov	r1, r7
 8023c3e:	f7dc fad7 	bl	80001f0 <__aeabi_dsub>
 8023c42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023c46:	9303      	str	r3, [sp, #12]
 8023c48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023c4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023c50:	f1b8 0f10 	cmp.w	r8, #16
 8023c54:	dc02      	bgt.n	8023c5c <__ieee754_rem_pio2+0x1d4>
 8023c56:	e9ca 0100 	strd	r0, r1, [sl]
 8023c5a:	e039      	b.n	8023cd0 <__ieee754_rem_pio2+0x248>
 8023c5c:	a34e      	add	r3, pc, #312	; (adr r3, 8023d98 <__ieee754_rem_pio2+0x310>)
 8023c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c62:	ec51 0b18 	vmov	r0, r1, d8
 8023c66:	f7dc fc7b 	bl	8000560 <__aeabi_dmul>
 8023c6a:	4604      	mov	r4, r0
 8023c6c:	460d      	mov	r5, r1
 8023c6e:	4602      	mov	r2, r0
 8023c70:	460b      	mov	r3, r1
 8023c72:	4630      	mov	r0, r6
 8023c74:	4639      	mov	r1, r7
 8023c76:	f7dc fabb 	bl	80001f0 <__aeabi_dsub>
 8023c7a:	4602      	mov	r2, r0
 8023c7c:	460b      	mov	r3, r1
 8023c7e:	4680      	mov	r8, r0
 8023c80:	4689      	mov	r9, r1
 8023c82:	4630      	mov	r0, r6
 8023c84:	4639      	mov	r1, r7
 8023c86:	f7dc fab3 	bl	80001f0 <__aeabi_dsub>
 8023c8a:	4622      	mov	r2, r4
 8023c8c:	462b      	mov	r3, r5
 8023c8e:	f7dc faaf 	bl	80001f0 <__aeabi_dsub>
 8023c92:	a343      	add	r3, pc, #268	; (adr r3, 8023da0 <__ieee754_rem_pio2+0x318>)
 8023c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c98:	4604      	mov	r4, r0
 8023c9a:	460d      	mov	r5, r1
 8023c9c:	ec51 0b18 	vmov	r0, r1, d8
 8023ca0:	f7dc fc5e 	bl	8000560 <__aeabi_dmul>
 8023ca4:	4622      	mov	r2, r4
 8023ca6:	462b      	mov	r3, r5
 8023ca8:	f7dc faa2 	bl	80001f0 <__aeabi_dsub>
 8023cac:	4602      	mov	r2, r0
 8023cae:	460b      	mov	r3, r1
 8023cb0:	4604      	mov	r4, r0
 8023cb2:	460d      	mov	r5, r1
 8023cb4:	4640      	mov	r0, r8
 8023cb6:	4649      	mov	r1, r9
 8023cb8:	f7dc fa9a 	bl	80001f0 <__aeabi_dsub>
 8023cbc:	9a03      	ldr	r2, [sp, #12]
 8023cbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023cc2:	1ad3      	subs	r3, r2, r3
 8023cc4:	2b31      	cmp	r3, #49	; 0x31
 8023cc6:	dc24      	bgt.n	8023d12 <__ieee754_rem_pio2+0x28a>
 8023cc8:	e9ca 0100 	strd	r0, r1, [sl]
 8023ccc:	4646      	mov	r6, r8
 8023cce:	464f      	mov	r7, r9
 8023cd0:	e9da 8900 	ldrd	r8, r9, [sl]
 8023cd4:	4630      	mov	r0, r6
 8023cd6:	4642      	mov	r2, r8
 8023cd8:	464b      	mov	r3, r9
 8023cda:	4639      	mov	r1, r7
 8023cdc:	f7dc fa88 	bl	80001f0 <__aeabi_dsub>
 8023ce0:	462b      	mov	r3, r5
 8023ce2:	4622      	mov	r2, r4
 8023ce4:	f7dc fa84 	bl	80001f0 <__aeabi_dsub>
 8023ce8:	9b02      	ldr	r3, [sp, #8]
 8023cea:	2b00      	cmp	r3, #0
 8023cec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023cf0:	f6bf af0a 	bge.w	8023b08 <__ieee754_rem_pio2+0x80>
 8023cf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023cf8:	f8ca 3004 	str.w	r3, [sl, #4]
 8023cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023d00:	f8ca 8000 	str.w	r8, [sl]
 8023d04:	f8ca 0008 	str.w	r0, [sl, #8]
 8023d08:	f8ca 300c 	str.w	r3, [sl, #12]
 8023d0c:	f1cb 0b00 	rsb	fp, fp, #0
 8023d10:	e6fa      	b.n	8023b08 <__ieee754_rem_pio2+0x80>
 8023d12:	a327      	add	r3, pc, #156	; (adr r3, 8023db0 <__ieee754_rem_pio2+0x328>)
 8023d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d18:	ec51 0b18 	vmov	r0, r1, d8
 8023d1c:	f7dc fc20 	bl	8000560 <__aeabi_dmul>
 8023d20:	4604      	mov	r4, r0
 8023d22:	460d      	mov	r5, r1
 8023d24:	4602      	mov	r2, r0
 8023d26:	460b      	mov	r3, r1
 8023d28:	4640      	mov	r0, r8
 8023d2a:	4649      	mov	r1, r9
 8023d2c:	f7dc fa60 	bl	80001f0 <__aeabi_dsub>
 8023d30:	4602      	mov	r2, r0
 8023d32:	460b      	mov	r3, r1
 8023d34:	4606      	mov	r6, r0
 8023d36:	460f      	mov	r7, r1
 8023d38:	4640      	mov	r0, r8
 8023d3a:	4649      	mov	r1, r9
 8023d3c:	f7dc fa58 	bl	80001f0 <__aeabi_dsub>
 8023d40:	4622      	mov	r2, r4
 8023d42:	462b      	mov	r3, r5
 8023d44:	f7dc fa54 	bl	80001f0 <__aeabi_dsub>
 8023d48:	a31b      	add	r3, pc, #108	; (adr r3, 8023db8 <__ieee754_rem_pio2+0x330>)
 8023d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d4e:	4604      	mov	r4, r0
 8023d50:	460d      	mov	r5, r1
 8023d52:	ec51 0b18 	vmov	r0, r1, d8
 8023d56:	f7dc fc03 	bl	8000560 <__aeabi_dmul>
 8023d5a:	4622      	mov	r2, r4
 8023d5c:	462b      	mov	r3, r5
 8023d5e:	f7dc fa47 	bl	80001f0 <__aeabi_dsub>
 8023d62:	4604      	mov	r4, r0
 8023d64:	460d      	mov	r5, r1
 8023d66:	e75f      	b.n	8023c28 <__ieee754_rem_pio2+0x1a0>
 8023d68:	4b1b      	ldr	r3, [pc, #108]	; (8023dd8 <__ieee754_rem_pio2+0x350>)
 8023d6a:	4598      	cmp	r8, r3
 8023d6c:	dd36      	ble.n	8023ddc <__ieee754_rem_pio2+0x354>
 8023d6e:	ee10 2a10 	vmov	r2, s0
 8023d72:	462b      	mov	r3, r5
 8023d74:	4620      	mov	r0, r4
 8023d76:	4629      	mov	r1, r5
 8023d78:	f7dc fa3a 	bl	80001f0 <__aeabi_dsub>
 8023d7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023d80:	e9ca 0100 	strd	r0, r1, [sl]
 8023d84:	e694      	b.n	8023ab0 <__ieee754_rem_pio2+0x28>
 8023d86:	bf00      	nop
 8023d88:	54400000 	.word	0x54400000
 8023d8c:	3ff921fb 	.word	0x3ff921fb
 8023d90:	1a626331 	.word	0x1a626331
 8023d94:	3dd0b461 	.word	0x3dd0b461
 8023d98:	1a600000 	.word	0x1a600000
 8023d9c:	3dd0b461 	.word	0x3dd0b461
 8023da0:	2e037073 	.word	0x2e037073
 8023da4:	3ba3198a 	.word	0x3ba3198a
 8023da8:	6dc9c883 	.word	0x6dc9c883
 8023dac:	3fe45f30 	.word	0x3fe45f30
 8023db0:	2e000000 	.word	0x2e000000
 8023db4:	3ba3198a 	.word	0x3ba3198a
 8023db8:	252049c1 	.word	0x252049c1
 8023dbc:	397b839a 	.word	0x397b839a
 8023dc0:	3fe921fb 	.word	0x3fe921fb
 8023dc4:	4002d97b 	.word	0x4002d97b
 8023dc8:	3ff921fb 	.word	0x3ff921fb
 8023dcc:	413921fb 	.word	0x413921fb
 8023dd0:	3fe00000 	.word	0x3fe00000
 8023dd4:	080294c8 	.word	0x080294c8
 8023dd8:	7fefffff 	.word	0x7fefffff
 8023ddc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8023de0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8023de4:	ee10 0a10 	vmov	r0, s0
 8023de8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8023dec:	ee10 6a10 	vmov	r6, s0
 8023df0:	460f      	mov	r7, r1
 8023df2:	f7dc fe4f 	bl	8000a94 <__aeabi_d2iz>
 8023df6:	f7dc fb49 	bl	800048c <__aeabi_i2d>
 8023dfa:	4602      	mov	r2, r0
 8023dfc:	460b      	mov	r3, r1
 8023dfe:	4630      	mov	r0, r6
 8023e00:	4639      	mov	r1, r7
 8023e02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023e06:	f7dc f9f3 	bl	80001f0 <__aeabi_dsub>
 8023e0a:	4b23      	ldr	r3, [pc, #140]	; (8023e98 <__ieee754_rem_pio2+0x410>)
 8023e0c:	2200      	movs	r2, #0
 8023e0e:	f7dc fba7 	bl	8000560 <__aeabi_dmul>
 8023e12:	460f      	mov	r7, r1
 8023e14:	4606      	mov	r6, r0
 8023e16:	f7dc fe3d 	bl	8000a94 <__aeabi_d2iz>
 8023e1a:	f7dc fb37 	bl	800048c <__aeabi_i2d>
 8023e1e:	4602      	mov	r2, r0
 8023e20:	460b      	mov	r3, r1
 8023e22:	4630      	mov	r0, r6
 8023e24:	4639      	mov	r1, r7
 8023e26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023e2a:	f7dc f9e1 	bl	80001f0 <__aeabi_dsub>
 8023e2e:	4b1a      	ldr	r3, [pc, #104]	; (8023e98 <__ieee754_rem_pio2+0x410>)
 8023e30:	2200      	movs	r2, #0
 8023e32:	f7dc fb95 	bl	8000560 <__aeabi_dmul>
 8023e36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023e3a:	ad04      	add	r5, sp, #16
 8023e3c:	f04f 0803 	mov.w	r8, #3
 8023e40:	46a9      	mov	r9, r5
 8023e42:	2600      	movs	r6, #0
 8023e44:	2700      	movs	r7, #0
 8023e46:	4632      	mov	r2, r6
 8023e48:	463b      	mov	r3, r7
 8023e4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8023e4e:	46c3      	mov	fp, r8
 8023e50:	3d08      	subs	r5, #8
 8023e52:	f108 38ff 	add.w	r8, r8, #4294967295
 8023e56:	f7dc fdeb 	bl	8000a30 <__aeabi_dcmpeq>
 8023e5a:	2800      	cmp	r0, #0
 8023e5c:	d1f3      	bne.n	8023e46 <__ieee754_rem_pio2+0x3be>
 8023e5e:	4b0f      	ldr	r3, [pc, #60]	; (8023e9c <__ieee754_rem_pio2+0x414>)
 8023e60:	9301      	str	r3, [sp, #4]
 8023e62:	2302      	movs	r3, #2
 8023e64:	9300      	str	r3, [sp, #0]
 8023e66:	4622      	mov	r2, r4
 8023e68:	465b      	mov	r3, fp
 8023e6a:	4651      	mov	r1, sl
 8023e6c:	4648      	mov	r0, r9
 8023e6e:	f000 fe87 	bl	8024b80 <__kernel_rem_pio2>
 8023e72:	9b02      	ldr	r3, [sp, #8]
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	4683      	mov	fp, r0
 8023e78:	f6bf ae46 	bge.w	8023b08 <__ieee754_rem_pio2+0x80>
 8023e7c:	e9da 2100 	ldrd	r2, r1, [sl]
 8023e80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023e84:	e9ca 2300 	strd	r2, r3, [sl]
 8023e88:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8023e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023e90:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8023e94:	e73a      	b.n	8023d0c <__ieee754_rem_pio2+0x284>
 8023e96:	bf00      	nop
 8023e98:	41700000 	.word	0x41700000
 8023e9c:	08029548 	.word	0x08029548

08023ea0 <__ieee754_acosf>:
 8023ea0:	b508      	push	{r3, lr}
 8023ea2:	ee10 3a10 	vmov	r3, s0
 8023ea6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8023eaa:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8023eae:	ed2d 8b0c 	vpush	{d8-d13}
 8023eb2:	d10a      	bne.n	8023eca <__ieee754_acosf+0x2a>
 8023eb4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 802404c <__ieee754_acosf+0x1ac>
 8023eb8:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8024050 <__ieee754_acosf+0x1b0>
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	bfd8      	it	le
 8023ec0:	eeb0 0a48 	vmovle.f32	s0, s16
 8023ec4:	ecbd 8b0c 	vpop	{d8-d13}
 8023ec8:	bd08      	pop	{r3, pc}
 8023eca:	dd04      	ble.n	8023ed6 <__ieee754_acosf+0x36>
 8023ecc:	ee30 8a40 	vsub.f32	s16, s0, s0
 8023ed0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023ed4:	e7f6      	b.n	8023ec4 <__ieee754_acosf+0x24>
 8023ed6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8023eda:	da3c      	bge.n	8023f56 <__ieee754_acosf+0xb6>
 8023edc:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8023ee0:	f340 80b1 	ble.w	8024046 <__ieee754_acosf+0x1a6>
 8023ee4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8023ee8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8024054 <__ieee754_acosf+0x1b4>
 8023eec:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8024058 <__ieee754_acosf+0x1b8>
 8023ef0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 802405c <__ieee754_acosf+0x1bc>
 8023ef4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8024060 <__ieee754_acosf+0x1c0>
 8023ef8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8023efc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8024064 <__ieee754_acosf+0x1c4>
 8023f00:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023f04:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8024068 <__ieee754_acosf+0x1c8>
 8023f08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023f0c:	eddf 6a57 	vldr	s13, [pc, #348]	; 802406c <__ieee754_acosf+0x1cc>
 8023f10:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023f14:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8024070 <__ieee754_acosf+0x1d0>
 8023f18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8023f1c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8024074 <__ieee754_acosf+0x1d4>
 8023f20:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8023f24:	eddf 6a54 	vldr	s13, [pc, #336]	; 8024078 <__ieee754_acosf+0x1d8>
 8023f28:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023f2c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 802407c <__ieee754_acosf+0x1dc>
 8023f30:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8023f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023f38:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8023f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8023f44:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023f48:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8024080 <__ieee754_acosf+0x1e0>
 8023f4c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8023f50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8023f54:	e7b6      	b.n	8023ec4 <__ieee754_acosf+0x24>
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	eddf da3e 	vldr	s27, [pc, #248]	; 8024054 <__ieee754_acosf+0x1b4>
 8023f5c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8024058 <__ieee754_acosf+0x1b8>
 8023f60:	ed9f ca40 	vldr	s24, [pc, #256]	; 8024064 <__ieee754_acosf+0x1c4>
 8023f64:	eddf ba40 	vldr	s23, [pc, #256]	; 8024068 <__ieee754_acosf+0x1c8>
 8023f68:	ed9f ba40 	vldr	s22, [pc, #256]	; 802406c <__ieee754_acosf+0x1cc>
 8023f6c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8024070 <__ieee754_acosf+0x1d0>
 8023f70:	ed9f da40 	vldr	s26, [pc, #256]	; 8024074 <__ieee754_acosf+0x1d4>
 8023f74:	eddf aa39 	vldr	s21, [pc, #228]	; 802405c <__ieee754_acosf+0x1bc>
 8023f78:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8024078 <__ieee754_acosf+0x1d8>
 8023f7c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 802407c <__ieee754_acosf+0x1dc>
 8023f80:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8023f84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023f88:	da28      	bge.n	8023fdc <__ieee754_acosf+0x13c>
 8023f8a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8023f8e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023f92:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8023f96:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8023f9a:	eeac ca80 	vfma.f32	s24, s25, s0
 8023f9e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8023fa2:	eeec ba00 	vfma.f32	s23, s24, s0
 8023fa6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8023faa:	eeab ba80 	vfma.f32	s22, s23, s0
 8023fae:	eea9 9a80 	vfma.f32	s18, s19, s0
 8023fb2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8023fb6:	ee68 8a80 	vmul.f32	s17, s17, s0
 8023fba:	f000 fd13 	bl	80249e4 <__ieee754_sqrtf>
 8023fbe:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8023fc2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8024084 <__ieee754_acosf+0x1e4>
 8023fc6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023fca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8023fce:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023fd2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8024088 <__ieee754_acosf+0x1e8>
 8023fd6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8023fda:	e773      	b.n	8023ec4 <__ieee754_acosf+0x24>
 8023fdc:	ee39 8a40 	vsub.f32	s16, s18, s0
 8023fe0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8023fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8023fe8:	f000 fcfc 	bl	80249e4 <__ieee754_sqrtf>
 8023fec:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8023ff0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8023ff4:	eeac ca88 	vfma.f32	s24, s25, s16
 8023ff8:	eeaa aa88 	vfma.f32	s20, s21, s16
 8023ffc:	eeec ba08 	vfma.f32	s23, s24, s16
 8024000:	ee10 3a10 	vmov	r3, s0
 8024004:	eeab ba88 	vfma.f32	s22, s23, s16
 8024008:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802400c:	f023 030f 	bic.w	r3, r3, #15
 8024010:	eeea 9a08 	vfma.f32	s19, s20, s16
 8024014:	ee07 3a90 	vmov	s15, r3
 8024018:	eeeb 8a08 	vfma.f32	s17, s22, s16
 802401c:	eeb0 6a48 	vmov.f32	s12, s16
 8024020:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8024024:	eea9 9a88 	vfma.f32	s18, s19, s16
 8024028:	ee70 6a27 	vadd.f32	s13, s0, s15
 802402c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8024030:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8024034:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8024038:	eea0 7a26 	vfma.f32	s14, s0, s13
 802403c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8024040:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024044:	e73e      	b.n	8023ec4 <__ieee754_acosf+0x24>
 8024046:	ed9f 0a11 	vldr	s0, [pc, #68]	; 802408c <__ieee754_acosf+0x1ec>
 802404a:	e73b      	b.n	8023ec4 <__ieee754_acosf+0x24>
 802404c:	00000000 	.word	0x00000000
 8024050:	40490fdb 	.word	0x40490fdb
 8024054:	3811ef08 	.word	0x3811ef08
 8024058:	3a4f7f04 	.word	0x3a4f7f04
 802405c:	bf303361 	.word	0xbf303361
 8024060:	33a22168 	.word	0x33a22168
 8024064:	bd241146 	.word	0xbd241146
 8024068:	3e4e0aa8 	.word	0x3e4e0aa8
 802406c:	bea6b090 	.word	0xbea6b090
 8024070:	3e2aaaab 	.word	0x3e2aaaab
 8024074:	3d9dc62e 	.word	0x3d9dc62e
 8024078:	4001572d 	.word	0x4001572d
 802407c:	c019d139 	.word	0xc019d139
 8024080:	3fc90fda 	.word	0x3fc90fda
 8024084:	b3a22168 	.word	0xb3a22168
 8024088:	40490fda 	.word	0x40490fda
 802408c:	3fc90fdb 	.word	0x3fc90fdb

08024090 <__ieee754_atan2f>:
 8024090:	ee10 2a90 	vmov	r2, s1
 8024094:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024098:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802409c:	b510      	push	{r4, lr}
 802409e:	eef0 7a40 	vmov.f32	s15, s0
 80240a2:	dc06      	bgt.n	80240b2 <__ieee754_atan2f+0x22>
 80240a4:	ee10 0a10 	vmov	r0, s0
 80240a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80240ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80240b0:	dd04      	ble.n	80240bc <__ieee754_atan2f+0x2c>
 80240b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80240b6:	eeb0 0a67 	vmov.f32	s0, s15
 80240ba:	bd10      	pop	{r4, pc}
 80240bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80240c0:	d103      	bne.n	80240ca <__ieee754_atan2f+0x3a>
 80240c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240c6:	f001 bdb9 	b.w	8025c3c <atanf>
 80240ca:	1794      	asrs	r4, r2, #30
 80240cc:	f004 0402 	and.w	r4, r4, #2
 80240d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80240d4:	b943      	cbnz	r3, 80240e8 <__ieee754_atan2f+0x58>
 80240d6:	2c02      	cmp	r4, #2
 80240d8:	d05e      	beq.n	8024198 <__ieee754_atan2f+0x108>
 80240da:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80241ac <__ieee754_atan2f+0x11c>
 80240de:	2c03      	cmp	r4, #3
 80240e0:	bf08      	it	eq
 80240e2:	eef0 7a47 	vmoveq.f32	s15, s14
 80240e6:	e7e6      	b.n	80240b6 <__ieee754_atan2f+0x26>
 80240e8:	b941      	cbnz	r1, 80240fc <__ieee754_atan2f+0x6c>
 80240ea:	eddf 7a31 	vldr	s15, [pc, #196]	; 80241b0 <__ieee754_atan2f+0x120>
 80240ee:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80241b4 <__ieee754_atan2f+0x124>
 80240f2:	2800      	cmp	r0, #0
 80240f4:	bfb8      	it	lt
 80240f6:	eef0 7a40 	vmovlt.f32	s15, s0
 80240fa:	e7dc      	b.n	80240b6 <__ieee754_atan2f+0x26>
 80240fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024100:	d110      	bne.n	8024124 <__ieee754_atan2f+0x94>
 8024102:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024106:	f104 34ff 	add.w	r4, r4, #4294967295
 802410a:	d107      	bne.n	802411c <__ieee754_atan2f+0x8c>
 802410c:	2c02      	cmp	r4, #2
 802410e:	d846      	bhi.n	802419e <__ieee754_atan2f+0x10e>
 8024110:	4b29      	ldr	r3, [pc, #164]	; (80241b8 <__ieee754_atan2f+0x128>)
 8024112:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8024116:	edd4 7a00 	vldr	s15, [r4]
 802411a:	e7cc      	b.n	80240b6 <__ieee754_atan2f+0x26>
 802411c:	2c02      	cmp	r4, #2
 802411e:	d841      	bhi.n	80241a4 <__ieee754_atan2f+0x114>
 8024120:	4b26      	ldr	r3, [pc, #152]	; (80241bc <__ieee754_atan2f+0x12c>)
 8024122:	e7f6      	b.n	8024112 <__ieee754_atan2f+0x82>
 8024124:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024128:	d0df      	beq.n	80240ea <__ieee754_atan2f+0x5a>
 802412a:	1a5b      	subs	r3, r3, r1
 802412c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8024130:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8024134:	da1a      	bge.n	802416c <__ieee754_atan2f+0xdc>
 8024136:	2a00      	cmp	r2, #0
 8024138:	da01      	bge.n	802413e <__ieee754_atan2f+0xae>
 802413a:	313c      	adds	r1, #60	; 0x3c
 802413c:	db19      	blt.n	8024172 <__ieee754_atan2f+0xe2>
 802413e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8024142:	f001 fe4f 	bl	8025de4 <fabsf>
 8024146:	f001 fd79 	bl	8025c3c <atanf>
 802414a:	eef0 7a40 	vmov.f32	s15, s0
 802414e:	2c01      	cmp	r4, #1
 8024150:	d012      	beq.n	8024178 <__ieee754_atan2f+0xe8>
 8024152:	2c02      	cmp	r4, #2
 8024154:	d017      	beq.n	8024186 <__ieee754_atan2f+0xf6>
 8024156:	2c00      	cmp	r4, #0
 8024158:	d0ad      	beq.n	80240b6 <__ieee754_atan2f+0x26>
 802415a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80241c0 <__ieee754_atan2f+0x130>
 802415e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024162:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80241c4 <__ieee754_atan2f+0x134>
 8024166:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802416a:	e7a4      	b.n	80240b6 <__ieee754_atan2f+0x26>
 802416c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80241b0 <__ieee754_atan2f+0x120>
 8024170:	e7ed      	b.n	802414e <__ieee754_atan2f+0xbe>
 8024172:	eddf 7a15 	vldr	s15, [pc, #84]	; 80241c8 <__ieee754_atan2f+0x138>
 8024176:	e7ea      	b.n	802414e <__ieee754_atan2f+0xbe>
 8024178:	ee17 3a90 	vmov	r3, s15
 802417c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024180:	ee07 3a90 	vmov	s15, r3
 8024184:	e797      	b.n	80240b6 <__ieee754_atan2f+0x26>
 8024186:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80241c0 <__ieee754_atan2f+0x130>
 802418a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802418e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80241c4 <__ieee754_atan2f+0x134>
 8024192:	ee70 7a67 	vsub.f32	s15, s0, s15
 8024196:	e78e      	b.n	80240b6 <__ieee754_atan2f+0x26>
 8024198:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80241c4 <__ieee754_atan2f+0x134>
 802419c:	e78b      	b.n	80240b6 <__ieee754_atan2f+0x26>
 802419e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80241cc <__ieee754_atan2f+0x13c>
 80241a2:	e788      	b.n	80240b6 <__ieee754_atan2f+0x26>
 80241a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80241c8 <__ieee754_atan2f+0x138>
 80241a8:	e785      	b.n	80240b6 <__ieee754_atan2f+0x26>
 80241aa:	bf00      	nop
 80241ac:	c0490fdb 	.word	0xc0490fdb
 80241b0:	3fc90fdb 	.word	0x3fc90fdb
 80241b4:	bfc90fdb 	.word	0xbfc90fdb
 80241b8:	08029650 	.word	0x08029650
 80241bc:	0802965c 	.word	0x0802965c
 80241c0:	33bbbd2e 	.word	0x33bbbd2e
 80241c4:	40490fdb 	.word	0x40490fdb
 80241c8:	00000000 	.word	0x00000000
 80241cc:	3f490fdb 	.word	0x3f490fdb

080241d0 <__ieee754_powf>:
 80241d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241d4:	ee10 4a90 	vmov	r4, s1
 80241d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80241dc:	ed2d 8b02 	vpush	{d8}
 80241e0:	ee10 6a10 	vmov	r6, s0
 80241e4:	eeb0 8a40 	vmov.f32	s16, s0
 80241e8:	eef0 8a60 	vmov.f32	s17, s1
 80241ec:	d10c      	bne.n	8024208 <__ieee754_powf+0x38>
 80241ee:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80241f2:	0076      	lsls	r6, r6, #1
 80241f4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80241f8:	f240 8296 	bls.w	8024728 <__ieee754_powf+0x558>
 80241fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8024200:	ecbd 8b02 	vpop	{d8}
 8024204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024208:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 802420c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024210:	dcf4      	bgt.n	80241fc <__ieee754_powf+0x2c>
 8024212:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024216:	dd08      	ble.n	802422a <__ieee754_powf+0x5a>
 8024218:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 802421c:	d1ee      	bne.n	80241fc <__ieee754_powf+0x2c>
 802421e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8024222:	0064      	lsls	r4, r4, #1
 8024224:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8024228:	e7e6      	b.n	80241f8 <__ieee754_powf+0x28>
 802422a:	2e00      	cmp	r6, #0
 802422c:	da20      	bge.n	8024270 <__ieee754_powf+0xa0>
 802422e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8024232:	da2d      	bge.n	8024290 <__ieee754_powf+0xc0>
 8024234:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8024238:	f2c0 827f 	blt.w	802473a <__ieee754_powf+0x56a>
 802423c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8024240:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8024244:	fa48 f703 	asr.w	r7, r8, r3
 8024248:	fa07 f303 	lsl.w	r3, r7, r3
 802424c:	4543      	cmp	r3, r8
 802424e:	f040 8274 	bne.w	802473a <__ieee754_powf+0x56a>
 8024252:	f007 0701 	and.w	r7, r7, #1
 8024256:	f1c7 0702 	rsb	r7, r7, #2
 802425a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802425e:	d11f      	bne.n	80242a0 <__ieee754_powf+0xd0>
 8024260:	2c00      	cmp	r4, #0
 8024262:	f280 8267 	bge.w	8024734 <__ieee754_powf+0x564>
 8024266:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802426a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802426e:	e7c7      	b.n	8024200 <__ieee754_powf+0x30>
 8024270:	2700      	movs	r7, #0
 8024272:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8024276:	d1f0      	bne.n	802425a <__ieee754_powf+0x8a>
 8024278:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 802427c:	f000 8254 	beq.w	8024728 <__ieee754_powf+0x558>
 8024280:	dd08      	ble.n	8024294 <__ieee754_powf+0xc4>
 8024282:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 802458c <__ieee754_powf+0x3bc>
 8024286:	2c00      	cmp	r4, #0
 8024288:	bfa8      	it	ge
 802428a:	eeb0 0a68 	vmovge.f32	s0, s17
 802428e:	e7b7      	b.n	8024200 <__ieee754_powf+0x30>
 8024290:	2702      	movs	r7, #2
 8024292:	e7ee      	b.n	8024272 <__ieee754_powf+0xa2>
 8024294:	2c00      	cmp	r4, #0
 8024296:	f280 824a 	bge.w	802472e <__ieee754_powf+0x55e>
 802429a:	eeb1 0a68 	vneg.f32	s0, s17
 802429e:	e7af      	b.n	8024200 <__ieee754_powf+0x30>
 80242a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80242a4:	d102      	bne.n	80242ac <__ieee754_powf+0xdc>
 80242a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80242aa:	e7a9      	b.n	8024200 <__ieee754_powf+0x30>
 80242ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80242b0:	eeb0 0a48 	vmov.f32	s0, s16
 80242b4:	d107      	bne.n	80242c6 <__ieee754_powf+0xf6>
 80242b6:	2e00      	cmp	r6, #0
 80242b8:	db05      	blt.n	80242c6 <__ieee754_powf+0xf6>
 80242ba:	ecbd 8b02 	vpop	{d8}
 80242be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80242c2:	f000 bb8f 	b.w	80249e4 <__ieee754_sqrtf>
 80242c6:	f001 fd8d 	bl	8025de4 <fabsf>
 80242ca:	b125      	cbz	r5, 80242d6 <__ieee754_powf+0x106>
 80242cc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80242d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80242d4:	d116      	bne.n	8024304 <__ieee754_powf+0x134>
 80242d6:	2c00      	cmp	r4, #0
 80242d8:	bfbc      	itt	lt
 80242da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80242de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80242e2:	2e00      	cmp	r6, #0
 80242e4:	da8c      	bge.n	8024200 <__ieee754_powf+0x30>
 80242e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80242ea:	ea55 0307 	orrs.w	r3, r5, r7
 80242ee:	d104      	bne.n	80242fa <__ieee754_powf+0x12a>
 80242f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80242f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80242f8:	e782      	b.n	8024200 <__ieee754_powf+0x30>
 80242fa:	2f01      	cmp	r7, #1
 80242fc:	d180      	bne.n	8024200 <__ieee754_powf+0x30>
 80242fe:	eeb1 0a40 	vneg.f32	s0, s0
 8024302:	e77d      	b.n	8024200 <__ieee754_powf+0x30>
 8024304:	0ff0      	lsrs	r0, r6, #31
 8024306:	3801      	subs	r0, #1
 8024308:	ea57 0300 	orrs.w	r3, r7, r0
 802430c:	d104      	bne.n	8024318 <__ieee754_powf+0x148>
 802430e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8024312:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8024316:	e773      	b.n	8024200 <__ieee754_powf+0x30>
 8024318:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 802431c:	dd74      	ble.n	8024408 <__ieee754_powf+0x238>
 802431e:	4b9c      	ldr	r3, [pc, #624]	; (8024590 <__ieee754_powf+0x3c0>)
 8024320:	429d      	cmp	r5, r3
 8024322:	dc08      	bgt.n	8024336 <__ieee754_powf+0x166>
 8024324:	2c00      	cmp	r4, #0
 8024326:	da0b      	bge.n	8024340 <__ieee754_powf+0x170>
 8024328:	2000      	movs	r0, #0
 802432a:	ecbd 8b02 	vpop	{d8}
 802432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024332:	f001 bb6d 	b.w	8025a10 <__math_oflowf>
 8024336:	4b97      	ldr	r3, [pc, #604]	; (8024594 <__ieee754_powf+0x3c4>)
 8024338:	429d      	cmp	r5, r3
 802433a:	dd08      	ble.n	802434e <__ieee754_powf+0x17e>
 802433c:	2c00      	cmp	r4, #0
 802433e:	dcf3      	bgt.n	8024328 <__ieee754_powf+0x158>
 8024340:	2000      	movs	r0, #0
 8024342:	ecbd 8b02 	vpop	{d8}
 8024346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802434a:	f001 bb5b 	b.w	8025a04 <__math_uflowf>
 802434e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024352:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024356:	eddf 6a90 	vldr	s13, [pc, #576]	; 8024598 <__ieee754_powf+0x3c8>
 802435a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 802435e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8024362:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024366:	eee6 7ac0 	vfms.f32	s15, s13, s0
 802436a:	ee20 7a00 	vmul.f32	s14, s0, s0
 802436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024372:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 802459c <__ieee754_powf+0x3cc>
 8024376:	ee67 7a67 	vnmul.f32	s15, s14, s15
 802437a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80245a0 <__ieee754_powf+0x3d0>
 802437e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024382:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80245a4 <__ieee754_powf+0x3d4>
 8024386:	eef0 6a67 	vmov.f32	s13, s15
 802438a:	eee0 6a07 	vfma.f32	s13, s0, s14
 802438e:	ee16 3a90 	vmov	r3, s13
 8024392:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024396:	f023 030f 	bic.w	r3, r3, #15
 802439a:	ee00 3a90 	vmov	s1, r3
 802439e:	eee0 0a47 	vfms.f32	s1, s0, s14
 80243a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80243a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80243aa:	f024 040f 	bic.w	r4, r4, #15
 80243ae:	ee07 4a10 	vmov	s14, r4
 80243b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80243b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80243ba:	ee07 3a90 	vmov	s15, r3
 80243be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80243c2:	3f01      	subs	r7, #1
 80243c4:	ea57 0200 	orrs.w	r2, r7, r0
 80243c8:	ee07 4a10 	vmov	s14, r4
 80243cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80243d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80243d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80243d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80243dc:	ee17 4a10 	vmov	r4, s14
 80243e0:	bf08      	it	eq
 80243e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80243e6:	2c00      	cmp	r4, #0
 80243e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80243ec:	f340 817e 	ble.w	80246ec <__ieee754_powf+0x51c>
 80243f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80243f4:	f340 80f8 	ble.w	80245e8 <__ieee754_powf+0x418>
 80243f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80243fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024400:	bf4c      	ite	mi
 8024402:	2001      	movmi	r0, #1
 8024404:	2000      	movpl	r0, #0
 8024406:	e790      	b.n	802432a <__ieee754_powf+0x15a>
 8024408:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 802440c:	bf01      	itttt	eq
 802440e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80245a8 <__ieee754_powf+0x3d8>
 8024412:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8024416:	f06f 0217 	mvneq.w	r2, #23
 802441a:	ee17 5a90 	vmoveq	r5, s15
 802441e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8024422:	bf18      	it	ne
 8024424:	2200      	movne	r2, #0
 8024426:	3b7f      	subs	r3, #127	; 0x7f
 8024428:	4413      	add	r3, r2
 802442a:	4a60      	ldr	r2, [pc, #384]	; (80245ac <__ieee754_powf+0x3dc>)
 802442c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8024430:	4295      	cmp	r5, r2
 8024432:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8024436:	dd06      	ble.n	8024446 <__ieee754_powf+0x276>
 8024438:	4a5d      	ldr	r2, [pc, #372]	; (80245b0 <__ieee754_powf+0x3e0>)
 802443a:	4295      	cmp	r5, r2
 802443c:	f340 80a4 	ble.w	8024588 <__ieee754_powf+0x3b8>
 8024440:	3301      	adds	r3, #1
 8024442:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8024446:	2500      	movs	r5, #0
 8024448:	4a5a      	ldr	r2, [pc, #360]	; (80245b4 <__ieee754_powf+0x3e4>)
 802444a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802444e:	ee07 1a90 	vmov	s15, r1
 8024452:	ed92 7a00 	vldr	s14, [r2]
 8024456:	4a58      	ldr	r2, [pc, #352]	; (80245b8 <__ieee754_powf+0x3e8>)
 8024458:	ee37 6a27 	vadd.f32	s12, s14, s15
 802445c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8024460:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8024464:	1049      	asrs	r1, r1, #1
 8024466:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 802446a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802446e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8024472:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8024476:	ee06 1a10 	vmov	s12, r1
 802447a:	ee65 4a26 	vmul.f32	s9, s10, s13
 802447e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8024482:	ee14 6a90 	vmov	r6, s9
 8024486:	4016      	ands	r6, r2
 8024488:	ee05 6a90 	vmov	s11, r6
 802448c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8024490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024494:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80245bc <__ieee754_powf+0x3ec>
 8024498:	eea5 5ae7 	vfms.f32	s10, s11, s15
 802449c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80244a0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80244a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80245c0 <__ieee754_powf+0x3f0>
 80244a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80244ac:	eddf 6a45 	vldr	s13, [pc, #276]	; 80245c4 <__ieee754_powf+0x3f4>
 80244b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80244b4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8024598 <__ieee754_powf+0x3c8>
 80244b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80244bc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80245c8 <__ieee754_powf+0x3f8>
 80244c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80244c4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80245cc <__ieee754_powf+0x3fc>
 80244c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80244cc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80244d0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80244d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80244d8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80244dc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80244e0:	eef0 7a45 	vmov.f32	s15, s10
 80244e4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80244e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80244ec:	ee17 1a90 	vmov	r1, s15
 80244f0:	4011      	ands	r1, r2
 80244f2:	ee07 1a90 	vmov	s15, r1
 80244f6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80244fa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80244fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8024502:	ee27 7a24 	vmul.f32	s14, s14, s9
 8024506:	eea6 7a27 	vfma.f32	s14, s12, s15
 802450a:	eeb0 6a47 	vmov.f32	s12, s14
 802450e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8024512:	ee16 1a10 	vmov	r1, s12
 8024516:	4011      	ands	r1, r2
 8024518:	ee06 1a90 	vmov	s13, r1
 802451c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8024520:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80245d0 <__ieee754_powf+0x400>
 8024524:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80245d4 <__ieee754_powf+0x404>
 8024528:	ee37 7a66 	vsub.f32	s14, s14, s13
 802452c:	ee06 1a10 	vmov	s12, r1
 8024530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8024534:	eddf 7a28 	vldr	s15, [pc, #160]	; 80245d8 <__ieee754_powf+0x408>
 8024538:	4928      	ldr	r1, [pc, #160]	; (80245dc <__ieee754_powf+0x40c>)
 802453a:	eea6 7a27 	vfma.f32	s14, s12, s15
 802453e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8024542:	edd1 7a00 	vldr	s15, [r1]
 8024546:	ee37 7a27 	vadd.f32	s14, s14, s15
 802454a:	ee07 3a90 	vmov	s15, r3
 802454e:	4b24      	ldr	r3, [pc, #144]	; (80245e0 <__ieee754_powf+0x410>)
 8024550:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8024554:	eef0 7a47 	vmov.f32	s15, s14
 8024558:	eee6 7a25 	vfma.f32	s15, s12, s11
 802455c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8024560:	edd5 0a00 	vldr	s1, [r5]
 8024564:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802456c:	ee17 3a90 	vmov	r3, s15
 8024570:	4013      	ands	r3, r2
 8024572:	ee07 3a90 	vmov	s15, r3
 8024576:	ee77 6ae6 	vsub.f32	s13, s15, s13
 802457a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 802457e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8024582:	ee77 7a66 	vsub.f32	s15, s14, s13
 8024586:	e70e      	b.n	80243a6 <__ieee754_powf+0x1d6>
 8024588:	2501      	movs	r5, #1
 802458a:	e75d      	b.n	8024448 <__ieee754_powf+0x278>
 802458c:	00000000 	.word	0x00000000
 8024590:	3f7ffff3 	.word	0x3f7ffff3
 8024594:	3f800007 	.word	0x3f800007
 8024598:	3eaaaaab 	.word	0x3eaaaaab
 802459c:	3fb8aa3b 	.word	0x3fb8aa3b
 80245a0:	36eca570 	.word	0x36eca570
 80245a4:	3fb8aa00 	.word	0x3fb8aa00
 80245a8:	4b800000 	.word	0x4b800000
 80245ac:	001cc471 	.word	0x001cc471
 80245b0:	005db3d6 	.word	0x005db3d6
 80245b4:	08029668 	.word	0x08029668
 80245b8:	fffff000 	.word	0xfffff000
 80245bc:	3e6c3255 	.word	0x3e6c3255
 80245c0:	3e53f142 	.word	0x3e53f142
 80245c4:	3e8ba305 	.word	0x3e8ba305
 80245c8:	3edb6db7 	.word	0x3edb6db7
 80245cc:	3f19999a 	.word	0x3f19999a
 80245d0:	3f76384f 	.word	0x3f76384f
 80245d4:	3f763800 	.word	0x3f763800
 80245d8:	369dc3a0 	.word	0x369dc3a0
 80245dc:	08029678 	.word	0x08029678
 80245e0:	08029670 	.word	0x08029670
 80245e4:	3338aa3c 	.word	0x3338aa3c
 80245e8:	f040 8095 	bne.w	8024716 <__ieee754_powf+0x546>
 80245ec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80245e4 <__ieee754_powf+0x414>
 80245f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80245f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80245f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80245fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024600:	f73f aefa 	bgt.w	80243f8 <__ieee754_powf+0x228>
 8024604:	15db      	asrs	r3, r3, #23
 8024606:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 802460a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802460e:	4103      	asrs	r3, r0
 8024610:	4423      	add	r3, r4
 8024612:	494b      	ldr	r1, [pc, #300]	; (8024740 <__ieee754_powf+0x570>)
 8024614:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024618:	3a7f      	subs	r2, #127	; 0x7f
 802461a:	4111      	asrs	r1, r2
 802461c:	ea23 0101 	bic.w	r1, r3, r1
 8024620:	ee07 1a10 	vmov	s14, r1
 8024624:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8024628:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 802462c:	f1c2 0217 	rsb	r2, r2, #23
 8024630:	4110      	asrs	r0, r2
 8024632:	2c00      	cmp	r4, #0
 8024634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024638:	bfb8      	it	lt
 802463a:	4240      	neglt	r0, r0
 802463c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8024640:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8024744 <__ieee754_powf+0x574>
 8024644:	eddf 6a40 	vldr	s13, [pc, #256]	; 8024748 <__ieee754_powf+0x578>
 8024648:	ee17 3a10 	vmov	r3, s14
 802464c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8024650:	f023 030f 	bic.w	r3, r3, #15
 8024654:	ee07 3a10 	vmov	s14, r3
 8024658:	ee77 7a67 	vsub.f32	s15, s14, s15
 802465c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8024660:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8024664:	eddf 7a39 	vldr	s15, [pc, #228]	; 802474c <__ieee754_powf+0x57c>
 8024668:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802466c:	eef0 7a40 	vmov.f32	s15, s0
 8024670:	eee7 7a26 	vfma.f32	s15, s14, s13
 8024674:	eeb0 6a67 	vmov.f32	s12, s15
 8024678:	eea7 6a66 	vfms.f32	s12, s14, s13
 802467c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8024680:	ee30 0a46 	vsub.f32	s0, s0, s12
 8024684:	eddf 6a32 	vldr	s13, [pc, #200]	; 8024750 <__ieee754_powf+0x580>
 8024688:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8024754 <__ieee754_powf+0x584>
 802468c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8024690:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8024758 <__ieee754_powf+0x588>
 8024694:	eea6 6a87 	vfma.f32	s12, s13, s14
 8024698:	eddf 6a30 	vldr	s13, [pc, #192]	; 802475c <__ieee754_powf+0x58c>
 802469c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80246a0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8024760 <__ieee754_powf+0x590>
 80246a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80246a8:	eef0 6a67 	vmov.f32	s13, s15
 80246ac:	eee6 6a47 	vfms.f32	s13, s12, s14
 80246b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80246b4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80246b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80246bc:	eea7 0a80 	vfma.f32	s0, s15, s0
 80246c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80246c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80246c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80246cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80246d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80246d4:	ee10 3a10 	vmov	r3, s0
 80246d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80246dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80246e0:	da1f      	bge.n	8024722 <__ieee754_powf+0x552>
 80246e2:	f001 fbdb 	bl	8025e9c <scalbnf>
 80246e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80246ea:	e589      	b.n	8024200 <__ieee754_powf+0x30>
 80246ec:	4a1d      	ldr	r2, [pc, #116]	; (8024764 <__ieee754_powf+0x594>)
 80246ee:	4293      	cmp	r3, r2
 80246f0:	dd07      	ble.n	8024702 <__ieee754_powf+0x532>
 80246f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80246f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246fa:	bf4c      	ite	mi
 80246fc:	2001      	movmi	r0, #1
 80246fe:	2000      	movpl	r0, #0
 8024700:	e61f      	b.n	8024342 <__ieee754_powf+0x172>
 8024702:	d108      	bne.n	8024716 <__ieee754_powf+0x546>
 8024704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8024708:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024710:	f6ff af78 	blt.w	8024604 <__ieee754_powf+0x434>
 8024714:	e7ed      	b.n	80246f2 <__ieee754_powf+0x522>
 8024716:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802471a:	f73f af73 	bgt.w	8024604 <__ieee754_powf+0x434>
 802471e:	2000      	movs	r0, #0
 8024720:	e78c      	b.n	802463c <__ieee754_powf+0x46c>
 8024722:	ee00 3a10 	vmov	s0, r3
 8024726:	e7de      	b.n	80246e6 <__ieee754_powf+0x516>
 8024728:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802472c:	e568      	b.n	8024200 <__ieee754_powf+0x30>
 802472e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8024768 <__ieee754_powf+0x598>
 8024732:	e565      	b.n	8024200 <__ieee754_powf+0x30>
 8024734:	eeb0 0a48 	vmov.f32	s0, s16
 8024738:	e562      	b.n	8024200 <__ieee754_powf+0x30>
 802473a:	2700      	movs	r7, #0
 802473c:	e58d      	b.n	802425a <__ieee754_powf+0x8a>
 802473e:	bf00      	nop
 8024740:	007fffff 	.word	0x007fffff
 8024744:	35bfbe8c 	.word	0x35bfbe8c
 8024748:	3f317200 	.word	0x3f317200
 802474c:	3f317218 	.word	0x3f317218
 8024750:	b5ddea0e 	.word	0xb5ddea0e
 8024754:	3331bb4c 	.word	0x3331bb4c
 8024758:	388ab355 	.word	0x388ab355
 802475c:	bb360b61 	.word	0xbb360b61
 8024760:	3e2aaaab 	.word	0x3e2aaaab
 8024764:	43160000 	.word	0x43160000
 8024768:	00000000 	.word	0x00000000

0802476c <__ieee754_rem_pio2f>:
 802476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802476e:	ee10 6a10 	vmov	r6, s0
 8024772:	4b8e      	ldr	r3, [pc, #568]	; (80249ac <__ieee754_rem_pio2f+0x240>)
 8024774:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8024778:	429d      	cmp	r5, r3
 802477a:	b087      	sub	sp, #28
 802477c:	eef0 7a40 	vmov.f32	s15, s0
 8024780:	4604      	mov	r4, r0
 8024782:	dc05      	bgt.n	8024790 <__ieee754_rem_pio2f+0x24>
 8024784:	2300      	movs	r3, #0
 8024786:	ed80 0a00 	vstr	s0, [r0]
 802478a:	6043      	str	r3, [r0, #4]
 802478c:	2000      	movs	r0, #0
 802478e:	e01a      	b.n	80247c6 <__ieee754_rem_pio2f+0x5a>
 8024790:	4b87      	ldr	r3, [pc, #540]	; (80249b0 <__ieee754_rem_pio2f+0x244>)
 8024792:	429d      	cmp	r5, r3
 8024794:	dc46      	bgt.n	8024824 <__ieee754_rem_pio2f+0xb8>
 8024796:	2e00      	cmp	r6, #0
 8024798:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80249b4 <__ieee754_rem_pio2f+0x248>
 802479c:	4b86      	ldr	r3, [pc, #536]	; (80249b8 <__ieee754_rem_pio2f+0x24c>)
 802479e:	f025 050f 	bic.w	r5, r5, #15
 80247a2:	dd1f      	ble.n	80247e4 <__ieee754_rem_pio2f+0x78>
 80247a4:	429d      	cmp	r5, r3
 80247a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80247aa:	d00e      	beq.n	80247ca <__ieee754_rem_pio2f+0x5e>
 80247ac:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80249bc <__ieee754_rem_pio2f+0x250>
 80247b0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80247b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80247b8:	ed80 0a00 	vstr	s0, [r0]
 80247bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80247c0:	2001      	movs	r0, #1
 80247c2:	edc4 7a01 	vstr	s15, [r4, #4]
 80247c6:	b007      	add	sp, #28
 80247c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247ca:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80249c0 <__ieee754_rem_pio2f+0x254>
 80247ce:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80249c4 <__ieee754_rem_pio2f+0x258>
 80247d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80247d6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80247da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80247de:	edc0 6a00 	vstr	s13, [r0]
 80247e2:	e7eb      	b.n	80247bc <__ieee754_rem_pio2f+0x50>
 80247e4:	429d      	cmp	r5, r3
 80247e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80247ea:	d00e      	beq.n	802480a <__ieee754_rem_pio2f+0x9e>
 80247ec:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80249bc <__ieee754_rem_pio2f+0x250>
 80247f0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80247f4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80247f8:	ed80 0a00 	vstr	s0, [r0]
 80247fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024800:	f04f 30ff 	mov.w	r0, #4294967295
 8024804:	edc4 7a01 	vstr	s15, [r4, #4]
 8024808:	e7dd      	b.n	80247c6 <__ieee754_rem_pio2f+0x5a>
 802480a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80249c0 <__ieee754_rem_pio2f+0x254>
 802480e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80249c4 <__ieee754_rem_pio2f+0x258>
 8024812:	ee77 7a80 	vadd.f32	s15, s15, s0
 8024816:	ee77 6a87 	vadd.f32	s13, s15, s14
 802481a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802481e:	edc0 6a00 	vstr	s13, [r0]
 8024822:	e7eb      	b.n	80247fc <__ieee754_rem_pio2f+0x90>
 8024824:	4b68      	ldr	r3, [pc, #416]	; (80249c8 <__ieee754_rem_pio2f+0x25c>)
 8024826:	429d      	cmp	r5, r3
 8024828:	dc72      	bgt.n	8024910 <__ieee754_rem_pio2f+0x1a4>
 802482a:	f001 fadb 	bl	8025de4 <fabsf>
 802482e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80249cc <__ieee754_rem_pio2f+0x260>
 8024832:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024836:	eee0 7a07 	vfma.f32	s15, s0, s14
 802483a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802483e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8024842:	ee17 0a90 	vmov	r0, s15
 8024846:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80249b4 <__ieee754_rem_pio2f+0x248>
 802484a:	eea7 0a67 	vfms.f32	s0, s14, s15
 802484e:	281f      	cmp	r0, #31
 8024850:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80249bc <__ieee754_rem_pio2f+0x250>
 8024854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024858:	eeb1 6a47 	vneg.f32	s12, s14
 802485c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024860:	ee16 2a90 	vmov	r2, s13
 8024864:	dc1c      	bgt.n	80248a0 <__ieee754_rem_pio2f+0x134>
 8024866:	495a      	ldr	r1, [pc, #360]	; (80249d0 <__ieee754_rem_pio2f+0x264>)
 8024868:	1e47      	subs	r7, r0, #1
 802486a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 802486e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024872:	428b      	cmp	r3, r1
 8024874:	d014      	beq.n	80248a0 <__ieee754_rem_pio2f+0x134>
 8024876:	6022      	str	r2, [r4, #0]
 8024878:	ed94 7a00 	vldr	s14, [r4]
 802487c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024880:	2e00      	cmp	r6, #0
 8024882:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024886:	ed84 0a01 	vstr	s0, [r4, #4]
 802488a:	da9c      	bge.n	80247c6 <__ieee754_rem_pio2f+0x5a>
 802488c:	eeb1 7a47 	vneg.f32	s14, s14
 8024890:	eeb1 0a40 	vneg.f32	s0, s0
 8024894:	ed84 7a00 	vstr	s14, [r4]
 8024898:	ed84 0a01 	vstr	s0, [r4, #4]
 802489c:	4240      	negs	r0, r0
 802489e:	e792      	b.n	80247c6 <__ieee754_rem_pio2f+0x5a>
 80248a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80248a4:	15eb      	asrs	r3, r5, #23
 80248a6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80248aa:	2d08      	cmp	r5, #8
 80248ac:	dde3      	ble.n	8024876 <__ieee754_rem_pio2f+0x10a>
 80248ae:	eddf 7a44 	vldr	s15, [pc, #272]	; 80249c0 <__ieee754_rem_pio2f+0x254>
 80248b2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80249c4 <__ieee754_rem_pio2f+0x258>
 80248b6:	eef0 6a40 	vmov.f32	s13, s0
 80248ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 80248be:	ee30 0a66 	vsub.f32	s0, s0, s13
 80248c2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80248c6:	eef0 7a40 	vmov.f32	s15, s0
 80248ca:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80248ce:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80248d2:	ee15 2a90 	vmov	r2, s11
 80248d6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80248da:	1a5b      	subs	r3, r3, r1
 80248dc:	2b19      	cmp	r3, #25
 80248de:	dc04      	bgt.n	80248ea <__ieee754_rem_pio2f+0x17e>
 80248e0:	edc4 5a00 	vstr	s11, [r4]
 80248e4:	eeb0 0a66 	vmov.f32	s0, s13
 80248e8:	e7c6      	b.n	8024878 <__ieee754_rem_pio2f+0x10c>
 80248ea:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80249d4 <__ieee754_rem_pio2f+0x268>
 80248ee:	eeb0 0a66 	vmov.f32	s0, s13
 80248f2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80248f6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80248fa:	eddf 6a37 	vldr	s13, [pc, #220]	; 80249d8 <__ieee754_rem_pio2f+0x26c>
 80248fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8024902:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8024906:	ee30 7a67 	vsub.f32	s14, s0, s15
 802490a:	ed84 7a00 	vstr	s14, [r4]
 802490e:	e7b3      	b.n	8024878 <__ieee754_rem_pio2f+0x10c>
 8024910:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8024914:	db06      	blt.n	8024924 <__ieee754_rem_pio2f+0x1b8>
 8024916:	ee70 7a40 	vsub.f32	s15, s0, s0
 802491a:	edc0 7a01 	vstr	s15, [r0, #4]
 802491e:	edc0 7a00 	vstr	s15, [r0]
 8024922:	e733      	b.n	802478c <__ieee754_rem_pio2f+0x20>
 8024924:	15ea      	asrs	r2, r5, #23
 8024926:	3a86      	subs	r2, #134	; 0x86
 8024928:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 802492c:	ee07 3a90 	vmov	s15, r3
 8024930:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8024934:	eddf 6a29 	vldr	s13, [pc, #164]	; 80249dc <__ieee754_rem_pio2f+0x270>
 8024938:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802493c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024940:	ed8d 7a03 	vstr	s14, [sp, #12]
 8024944:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8024948:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802494c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8024950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024954:	ed8d 7a04 	vstr	s14, [sp, #16]
 8024958:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802495c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8024960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024964:	edcd 7a05 	vstr	s15, [sp, #20]
 8024968:	d11e      	bne.n	80249a8 <__ieee754_rem_pio2f+0x23c>
 802496a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 802496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024972:	bf14      	ite	ne
 8024974:	2302      	movne	r3, #2
 8024976:	2301      	moveq	r3, #1
 8024978:	4919      	ldr	r1, [pc, #100]	; (80249e0 <__ieee754_rem_pio2f+0x274>)
 802497a:	9101      	str	r1, [sp, #4]
 802497c:	2102      	movs	r1, #2
 802497e:	9100      	str	r1, [sp, #0]
 8024980:	a803      	add	r0, sp, #12
 8024982:	4621      	mov	r1, r4
 8024984:	f000 fd6a 	bl	802545c <__kernel_rem_pio2f>
 8024988:	2e00      	cmp	r6, #0
 802498a:	f6bf af1c 	bge.w	80247c6 <__ieee754_rem_pio2f+0x5a>
 802498e:	edd4 7a00 	vldr	s15, [r4]
 8024992:	eef1 7a67 	vneg.f32	s15, s15
 8024996:	edc4 7a00 	vstr	s15, [r4]
 802499a:	edd4 7a01 	vldr	s15, [r4, #4]
 802499e:	eef1 7a67 	vneg.f32	s15, s15
 80249a2:	edc4 7a01 	vstr	s15, [r4, #4]
 80249a6:	e779      	b.n	802489c <__ieee754_rem_pio2f+0x130>
 80249a8:	2303      	movs	r3, #3
 80249aa:	e7e5      	b.n	8024978 <__ieee754_rem_pio2f+0x20c>
 80249ac:	3f490fd8 	.word	0x3f490fd8
 80249b0:	4016cbe3 	.word	0x4016cbe3
 80249b4:	3fc90f80 	.word	0x3fc90f80
 80249b8:	3fc90fd0 	.word	0x3fc90fd0
 80249bc:	37354443 	.word	0x37354443
 80249c0:	37354400 	.word	0x37354400
 80249c4:	2e85a308 	.word	0x2e85a308
 80249c8:	43490f80 	.word	0x43490f80
 80249cc:	3f22f984 	.word	0x3f22f984
 80249d0:	08029680 	.word	0x08029680
 80249d4:	2e85a300 	.word	0x2e85a300
 80249d8:	248d3132 	.word	0x248d3132
 80249dc:	43800000 	.word	0x43800000
 80249e0:	08029700 	.word	0x08029700

080249e4 <__ieee754_sqrtf>:
 80249e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80249e8:	4770      	bx	lr
 80249ea:	0000      	movs	r0, r0
 80249ec:	0000      	movs	r0, r0
	...

080249f0 <__kernel_cos>:
 80249f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f4:	ec57 6b10 	vmov	r6, r7, d0
 80249f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80249fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024a00:	ed8d 1b00 	vstr	d1, [sp]
 8024a04:	da07      	bge.n	8024a16 <__kernel_cos+0x26>
 8024a06:	ee10 0a10 	vmov	r0, s0
 8024a0a:	4639      	mov	r1, r7
 8024a0c:	f7dc f842 	bl	8000a94 <__aeabi_d2iz>
 8024a10:	2800      	cmp	r0, #0
 8024a12:	f000 8088 	beq.w	8024b26 <__kernel_cos+0x136>
 8024a16:	4632      	mov	r2, r6
 8024a18:	463b      	mov	r3, r7
 8024a1a:	4630      	mov	r0, r6
 8024a1c:	4639      	mov	r1, r7
 8024a1e:	f7db fd9f 	bl	8000560 <__aeabi_dmul>
 8024a22:	4b51      	ldr	r3, [pc, #324]	; (8024b68 <__kernel_cos+0x178>)
 8024a24:	2200      	movs	r2, #0
 8024a26:	4604      	mov	r4, r0
 8024a28:	460d      	mov	r5, r1
 8024a2a:	f7db fd99 	bl	8000560 <__aeabi_dmul>
 8024a2e:	a340      	add	r3, pc, #256	; (adr r3, 8024b30 <__kernel_cos+0x140>)
 8024a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a34:	4682      	mov	sl, r0
 8024a36:	468b      	mov	fp, r1
 8024a38:	4620      	mov	r0, r4
 8024a3a:	4629      	mov	r1, r5
 8024a3c:	f7db fd90 	bl	8000560 <__aeabi_dmul>
 8024a40:	a33d      	add	r3, pc, #244	; (adr r3, 8024b38 <__kernel_cos+0x148>)
 8024a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a46:	f7db fbd5 	bl	80001f4 <__adddf3>
 8024a4a:	4622      	mov	r2, r4
 8024a4c:	462b      	mov	r3, r5
 8024a4e:	f7db fd87 	bl	8000560 <__aeabi_dmul>
 8024a52:	a33b      	add	r3, pc, #236	; (adr r3, 8024b40 <__kernel_cos+0x150>)
 8024a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a58:	f7db fbca 	bl	80001f0 <__aeabi_dsub>
 8024a5c:	4622      	mov	r2, r4
 8024a5e:	462b      	mov	r3, r5
 8024a60:	f7db fd7e 	bl	8000560 <__aeabi_dmul>
 8024a64:	a338      	add	r3, pc, #224	; (adr r3, 8024b48 <__kernel_cos+0x158>)
 8024a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a6a:	f7db fbc3 	bl	80001f4 <__adddf3>
 8024a6e:	4622      	mov	r2, r4
 8024a70:	462b      	mov	r3, r5
 8024a72:	f7db fd75 	bl	8000560 <__aeabi_dmul>
 8024a76:	a336      	add	r3, pc, #216	; (adr r3, 8024b50 <__kernel_cos+0x160>)
 8024a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a7c:	f7db fbb8 	bl	80001f0 <__aeabi_dsub>
 8024a80:	4622      	mov	r2, r4
 8024a82:	462b      	mov	r3, r5
 8024a84:	f7db fd6c 	bl	8000560 <__aeabi_dmul>
 8024a88:	a333      	add	r3, pc, #204	; (adr r3, 8024b58 <__kernel_cos+0x168>)
 8024a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a8e:	f7db fbb1 	bl	80001f4 <__adddf3>
 8024a92:	4622      	mov	r2, r4
 8024a94:	462b      	mov	r3, r5
 8024a96:	f7db fd63 	bl	8000560 <__aeabi_dmul>
 8024a9a:	4622      	mov	r2, r4
 8024a9c:	462b      	mov	r3, r5
 8024a9e:	f7db fd5f 	bl	8000560 <__aeabi_dmul>
 8024aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024aa6:	4604      	mov	r4, r0
 8024aa8:	460d      	mov	r5, r1
 8024aaa:	4630      	mov	r0, r6
 8024aac:	4639      	mov	r1, r7
 8024aae:	f7db fd57 	bl	8000560 <__aeabi_dmul>
 8024ab2:	460b      	mov	r3, r1
 8024ab4:	4602      	mov	r2, r0
 8024ab6:	4629      	mov	r1, r5
 8024ab8:	4620      	mov	r0, r4
 8024aba:	f7db fb99 	bl	80001f0 <__aeabi_dsub>
 8024abe:	4b2b      	ldr	r3, [pc, #172]	; (8024b6c <__kernel_cos+0x17c>)
 8024ac0:	4598      	cmp	r8, r3
 8024ac2:	4606      	mov	r6, r0
 8024ac4:	460f      	mov	r7, r1
 8024ac6:	dc10      	bgt.n	8024aea <__kernel_cos+0xfa>
 8024ac8:	4602      	mov	r2, r0
 8024aca:	460b      	mov	r3, r1
 8024acc:	4650      	mov	r0, sl
 8024ace:	4659      	mov	r1, fp
 8024ad0:	f7db fb8e 	bl	80001f0 <__aeabi_dsub>
 8024ad4:	460b      	mov	r3, r1
 8024ad6:	4926      	ldr	r1, [pc, #152]	; (8024b70 <__kernel_cos+0x180>)
 8024ad8:	4602      	mov	r2, r0
 8024ada:	2000      	movs	r0, #0
 8024adc:	f7db fb88 	bl	80001f0 <__aeabi_dsub>
 8024ae0:	ec41 0b10 	vmov	d0, r0, r1
 8024ae4:	b003      	add	sp, #12
 8024ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024aea:	4b22      	ldr	r3, [pc, #136]	; (8024b74 <__kernel_cos+0x184>)
 8024aec:	4920      	ldr	r1, [pc, #128]	; (8024b70 <__kernel_cos+0x180>)
 8024aee:	4598      	cmp	r8, r3
 8024af0:	bfcc      	ite	gt
 8024af2:	4d21      	ldrgt	r5, [pc, #132]	; (8024b78 <__kernel_cos+0x188>)
 8024af4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024af8:	2400      	movs	r4, #0
 8024afa:	4622      	mov	r2, r4
 8024afc:	462b      	mov	r3, r5
 8024afe:	2000      	movs	r0, #0
 8024b00:	f7db fb76 	bl	80001f0 <__aeabi_dsub>
 8024b04:	4622      	mov	r2, r4
 8024b06:	4680      	mov	r8, r0
 8024b08:	4689      	mov	r9, r1
 8024b0a:	462b      	mov	r3, r5
 8024b0c:	4650      	mov	r0, sl
 8024b0e:	4659      	mov	r1, fp
 8024b10:	f7db fb6e 	bl	80001f0 <__aeabi_dsub>
 8024b14:	4632      	mov	r2, r6
 8024b16:	463b      	mov	r3, r7
 8024b18:	f7db fb6a 	bl	80001f0 <__aeabi_dsub>
 8024b1c:	4602      	mov	r2, r0
 8024b1e:	460b      	mov	r3, r1
 8024b20:	4640      	mov	r0, r8
 8024b22:	4649      	mov	r1, r9
 8024b24:	e7da      	b.n	8024adc <__kernel_cos+0xec>
 8024b26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8024b60 <__kernel_cos+0x170>
 8024b2a:	e7db      	b.n	8024ae4 <__kernel_cos+0xf4>
 8024b2c:	f3af 8000 	nop.w
 8024b30:	be8838d4 	.word	0xbe8838d4
 8024b34:	bda8fae9 	.word	0xbda8fae9
 8024b38:	bdb4b1c4 	.word	0xbdb4b1c4
 8024b3c:	3e21ee9e 	.word	0x3e21ee9e
 8024b40:	809c52ad 	.word	0x809c52ad
 8024b44:	3e927e4f 	.word	0x3e927e4f
 8024b48:	19cb1590 	.word	0x19cb1590
 8024b4c:	3efa01a0 	.word	0x3efa01a0
 8024b50:	16c15177 	.word	0x16c15177
 8024b54:	3f56c16c 	.word	0x3f56c16c
 8024b58:	5555554c 	.word	0x5555554c
 8024b5c:	3fa55555 	.word	0x3fa55555
 8024b60:	00000000 	.word	0x00000000
 8024b64:	3ff00000 	.word	0x3ff00000
 8024b68:	3fe00000 	.word	0x3fe00000
 8024b6c:	3fd33332 	.word	0x3fd33332
 8024b70:	3ff00000 	.word	0x3ff00000
 8024b74:	3fe90000 	.word	0x3fe90000
 8024b78:	3fd20000 	.word	0x3fd20000
 8024b7c:	00000000 	.word	0x00000000

08024b80 <__kernel_rem_pio2>:
 8024b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b84:	ed2d 8b02 	vpush	{d8}
 8024b88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8024b8c:	f112 0f14 	cmn.w	r2, #20
 8024b90:	9308      	str	r3, [sp, #32]
 8024b92:	9101      	str	r1, [sp, #4]
 8024b94:	4bc4      	ldr	r3, [pc, #784]	; (8024ea8 <__kernel_rem_pio2+0x328>)
 8024b96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8024b98:	900b      	str	r0, [sp, #44]	; 0x2c
 8024b9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8024b9e:	9302      	str	r3, [sp, #8]
 8024ba0:	9b08      	ldr	r3, [sp, #32]
 8024ba2:	f103 33ff 	add.w	r3, r3, #4294967295
 8024ba6:	bfa8      	it	ge
 8024ba8:	1ed4      	subge	r4, r2, #3
 8024baa:	9306      	str	r3, [sp, #24]
 8024bac:	bfb2      	itee	lt
 8024bae:	2400      	movlt	r4, #0
 8024bb0:	2318      	movge	r3, #24
 8024bb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8024bb6:	f06f 0317 	mvn.w	r3, #23
 8024bba:	fb04 3303 	mla	r3, r4, r3, r3
 8024bbe:	eb03 0a02 	add.w	sl, r3, r2
 8024bc2:	9b02      	ldr	r3, [sp, #8]
 8024bc4:	9a06      	ldr	r2, [sp, #24]
 8024bc6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8024e98 <__kernel_rem_pio2+0x318>
 8024bca:	eb03 0802 	add.w	r8, r3, r2
 8024bce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024bd0:	1aa7      	subs	r7, r4, r2
 8024bd2:	ae22      	add	r6, sp, #136	; 0x88
 8024bd4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024bd8:	2500      	movs	r5, #0
 8024bda:	4545      	cmp	r5, r8
 8024bdc:	dd13      	ble.n	8024c06 <__kernel_rem_pio2+0x86>
 8024bde:	9b08      	ldr	r3, [sp, #32]
 8024be0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8024e98 <__kernel_rem_pio2+0x318>
 8024be4:	aa22      	add	r2, sp, #136	; 0x88
 8024be6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024bea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024bee:	f04f 0800 	mov.w	r8, #0
 8024bf2:	9b02      	ldr	r3, [sp, #8]
 8024bf4:	4598      	cmp	r8, r3
 8024bf6:	dc2f      	bgt.n	8024c58 <__kernel_rem_pio2+0xd8>
 8024bf8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024bfc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024c00:	462f      	mov	r7, r5
 8024c02:	2600      	movs	r6, #0
 8024c04:	e01b      	b.n	8024c3e <__kernel_rem_pio2+0xbe>
 8024c06:	42ef      	cmn	r7, r5
 8024c08:	d407      	bmi.n	8024c1a <__kernel_rem_pio2+0x9a>
 8024c0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024c0e:	f7db fc3d 	bl	800048c <__aeabi_i2d>
 8024c12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8024c16:	3501      	adds	r5, #1
 8024c18:	e7df      	b.n	8024bda <__kernel_rem_pio2+0x5a>
 8024c1a:	ec51 0b18 	vmov	r0, r1, d8
 8024c1e:	e7f8      	b.n	8024c12 <__kernel_rem_pio2+0x92>
 8024c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024c24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024c28:	f7db fc9a 	bl	8000560 <__aeabi_dmul>
 8024c2c:	4602      	mov	r2, r0
 8024c2e:	460b      	mov	r3, r1
 8024c30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024c34:	f7db fade 	bl	80001f4 <__adddf3>
 8024c38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024c3c:	3601      	adds	r6, #1
 8024c3e:	9b06      	ldr	r3, [sp, #24]
 8024c40:	429e      	cmp	r6, r3
 8024c42:	f1a7 0708 	sub.w	r7, r7, #8
 8024c46:	ddeb      	ble.n	8024c20 <__kernel_rem_pio2+0xa0>
 8024c48:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024c4c:	f108 0801 	add.w	r8, r8, #1
 8024c50:	ecab 7b02 	vstmia	fp!, {d7}
 8024c54:	3508      	adds	r5, #8
 8024c56:	e7cc      	b.n	8024bf2 <__kernel_rem_pio2+0x72>
 8024c58:	9b02      	ldr	r3, [sp, #8]
 8024c5a:	aa0e      	add	r2, sp, #56	; 0x38
 8024c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024c60:	930d      	str	r3, [sp, #52]	; 0x34
 8024c62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024c64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8024c68:	9c02      	ldr	r4, [sp, #8]
 8024c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8024c6c:	00e3      	lsls	r3, r4, #3
 8024c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8024c70:	ab9a      	add	r3, sp, #616	; 0x268
 8024c72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8024c76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8024c7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8024c7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8024c80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8024c84:	46c3      	mov	fp, r8
 8024c86:	46a1      	mov	r9, r4
 8024c88:	f1b9 0f00 	cmp.w	r9, #0
 8024c8c:	f1a5 0508 	sub.w	r5, r5, #8
 8024c90:	dc77      	bgt.n	8024d82 <__kernel_rem_pio2+0x202>
 8024c92:	ec47 6b10 	vmov	d0, r6, r7
 8024c96:	4650      	mov	r0, sl
 8024c98:	f000 ff4a 	bl	8025b30 <scalbn>
 8024c9c:	ec57 6b10 	vmov	r6, r7, d0
 8024ca0:	2200      	movs	r2, #0
 8024ca2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8024ca6:	ee10 0a10 	vmov	r0, s0
 8024caa:	4639      	mov	r1, r7
 8024cac:	f7db fc58 	bl	8000560 <__aeabi_dmul>
 8024cb0:	ec41 0b10 	vmov	d0, r0, r1
 8024cb4:	f000 febc 	bl	8025a30 <floor>
 8024cb8:	4b7c      	ldr	r3, [pc, #496]	; (8024eac <__kernel_rem_pio2+0x32c>)
 8024cba:	ec51 0b10 	vmov	r0, r1, d0
 8024cbe:	2200      	movs	r2, #0
 8024cc0:	f7db fc4e 	bl	8000560 <__aeabi_dmul>
 8024cc4:	4602      	mov	r2, r0
 8024cc6:	460b      	mov	r3, r1
 8024cc8:	4630      	mov	r0, r6
 8024cca:	4639      	mov	r1, r7
 8024ccc:	f7db fa90 	bl	80001f0 <__aeabi_dsub>
 8024cd0:	460f      	mov	r7, r1
 8024cd2:	4606      	mov	r6, r0
 8024cd4:	f7db fede 	bl	8000a94 <__aeabi_d2iz>
 8024cd8:	9004      	str	r0, [sp, #16]
 8024cda:	f7db fbd7 	bl	800048c <__aeabi_i2d>
 8024cde:	4602      	mov	r2, r0
 8024ce0:	460b      	mov	r3, r1
 8024ce2:	4630      	mov	r0, r6
 8024ce4:	4639      	mov	r1, r7
 8024ce6:	f7db fa83 	bl	80001f0 <__aeabi_dsub>
 8024cea:	f1ba 0f00 	cmp.w	sl, #0
 8024cee:	4606      	mov	r6, r0
 8024cf0:	460f      	mov	r7, r1
 8024cf2:	dd6d      	ble.n	8024dd0 <__kernel_rem_pio2+0x250>
 8024cf4:	1e62      	subs	r2, r4, #1
 8024cf6:	ab0e      	add	r3, sp, #56	; 0x38
 8024cf8:	9d04      	ldr	r5, [sp, #16]
 8024cfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024cfe:	f1ca 0118 	rsb	r1, sl, #24
 8024d02:	fa40 f301 	asr.w	r3, r0, r1
 8024d06:	441d      	add	r5, r3
 8024d08:	408b      	lsls	r3, r1
 8024d0a:	1ac0      	subs	r0, r0, r3
 8024d0c:	ab0e      	add	r3, sp, #56	; 0x38
 8024d0e:	9504      	str	r5, [sp, #16]
 8024d10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8024d14:	f1ca 0317 	rsb	r3, sl, #23
 8024d18:	fa40 fb03 	asr.w	fp, r0, r3
 8024d1c:	f1bb 0f00 	cmp.w	fp, #0
 8024d20:	dd65      	ble.n	8024dee <__kernel_rem_pio2+0x26e>
 8024d22:	9b04      	ldr	r3, [sp, #16]
 8024d24:	2200      	movs	r2, #0
 8024d26:	3301      	adds	r3, #1
 8024d28:	9304      	str	r3, [sp, #16]
 8024d2a:	4615      	mov	r5, r2
 8024d2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024d30:	4294      	cmp	r4, r2
 8024d32:	f300 809c 	bgt.w	8024e6e <__kernel_rem_pio2+0x2ee>
 8024d36:	f1ba 0f00 	cmp.w	sl, #0
 8024d3a:	dd07      	ble.n	8024d4c <__kernel_rem_pio2+0x1cc>
 8024d3c:	f1ba 0f01 	cmp.w	sl, #1
 8024d40:	f000 80c0 	beq.w	8024ec4 <__kernel_rem_pio2+0x344>
 8024d44:	f1ba 0f02 	cmp.w	sl, #2
 8024d48:	f000 80c6 	beq.w	8024ed8 <__kernel_rem_pio2+0x358>
 8024d4c:	f1bb 0f02 	cmp.w	fp, #2
 8024d50:	d14d      	bne.n	8024dee <__kernel_rem_pio2+0x26e>
 8024d52:	4632      	mov	r2, r6
 8024d54:	463b      	mov	r3, r7
 8024d56:	4956      	ldr	r1, [pc, #344]	; (8024eb0 <__kernel_rem_pio2+0x330>)
 8024d58:	2000      	movs	r0, #0
 8024d5a:	f7db fa49 	bl	80001f0 <__aeabi_dsub>
 8024d5e:	4606      	mov	r6, r0
 8024d60:	460f      	mov	r7, r1
 8024d62:	2d00      	cmp	r5, #0
 8024d64:	d043      	beq.n	8024dee <__kernel_rem_pio2+0x26e>
 8024d66:	4650      	mov	r0, sl
 8024d68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8024ea0 <__kernel_rem_pio2+0x320>
 8024d6c:	f000 fee0 	bl	8025b30 <scalbn>
 8024d70:	4630      	mov	r0, r6
 8024d72:	4639      	mov	r1, r7
 8024d74:	ec53 2b10 	vmov	r2, r3, d0
 8024d78:	f7db fa3a 	bl	80001f0 <__aeabi_dsub>
 8024d7c:	4606      	mov	r6, r0
 8024d7e:	460f      	mov	r7, r1
 8024d80:	e035      	b.n	8024dee <__kernel_rem_pio2+0x26e>
 8024d82:	4b4c      	ldr	r3, [pc, #304]	; (8024eb4 <__kernel_rem_pio2+0x334>)
 8024d84:	2200      	movs	r2, #0
 8024d86:	4630      	mov	r0, r6
 8024d88:	4639      	mov	r1, r7
 8024d8a:	f7db fbe9 	bl	8000560 <__aeabi_dmul>
 8024d8e:	f7db fe81 	bl	8000a94 <__aeabi_d2iz>
 8024d92:	f7db fb7b 	bl	800048c <__aeabi_i2d>
 8024d96:	4602      	mov	r2, r0
 8024d98:	460b      	mov	r3, r1
 8024d9a:	ec43 2b18 	vmov	d8, r2, r3
 8024d9e:	4b46      	ldr	r3, [pc, #280]	; (8024eb8 <__kernel_rem_pio2+0x338>)
 8024da0:	2200      	movs	r2, #0
 8024da2:	f7db fbdd 	bl	8000560 <__aeabi_dmul>
 8024da6:	4602      	mov	r2, r0
 8024da8:	460b      	mov	r3, r1
 8024daa:	4630      	mov	r0, r6
 8024dac:	4639      	mov	r1, r7
 8024dae:	f7db fa1f 	bl	80001f0 <__aeabi_dsub>
 8024db2:	f7db fe6f 	bl	8000a94 <__aeabi_d2iz>
 8024db6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024dba:	f84b 0b04 	str.w	r0, [fp], #4
 8024dbe:	ec51 0b18 	vmov	r0, r1, d8
 8024dc2:	f7db fa17 	bl	80001f4 <__adddf3>
 8024dc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8024dca:	4606      	mov	r6, r0
 8024dcc:	460f      	mov	r7, r1
 8024dce:	e75b      	b.n	8024c88 <__kernel_rem_pio2+0x108>
 8024dd0:	d106      	bne.n	8024de0 <__kernel_rem_pio2+0x260>
 8024dd2:	1e63      	subs	r3, r4, #1
 8024dd4:	aa0e      	add	r2, sp, #56	; 0x38
 8024dd6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024dda:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024dde:	e79d      	b.n	8024d1c <__kernel_rem_pio2+0x19c>
 8024de0:	4b36      	ldr	r3, [pc, #216]	; (8024ebc <__kernel_rem_pio2+0x33c>)
 8024de2:	2200      	movs	r2, #0
 8024de4:	f7db fe42 	bl	8000a6c <__aeabi_dcmpge>
 8024de8:	2800      	cmp	r0, #0
 8024dea:	d13d      	bne.n	8024e68 <__kernel_rem_pio2+0x2e8>
 8024dec:	4683      	mov	fp, r0
 8024dee:	2200      	movs	r2, #0
 8024df0:	2300      	movs	r3, #0
 8024df2:	4630      	mov	r0, r6
 8024df4:	4639      	mov	r1, r7
 8024df6:	f7db fe1b 	bl	8000a30 <__aeabi_dcmpeq>
 8024dfa:	2800      	cmp	r0, #0
 8024dfc:	f000 80c0 	beq.w	8024f80 <__kernel_rem_pio2+0x400>
 8024e00:	1e65      	subs	r5, r4, #1
 8024e02:	462b      	mov	r3, r5
 8024e04:	2200      	movs	r2, #0
 8024e06:	9902      	ldr	r1, [sp, #8]
 8024e08:	428b      	cmp	r3, r1
 8024e0a:	da6c      	bge.n	8024ee6 <__kernel_rem_pio2+0x366>
 8024e0c:	2a00      	cmp	r2, #0
 8024e0e:	f000 8089 	beq.w	8024f24 <__kernel_rem_pio2+0x3a4>
 8024e12:	ab0e      	add	r3, sp, #56	; 0x38
 8024e14:	f1aa 0a18 	sub.w	sl, sl, #24
 8024e18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	f000 80ad 	beq.w	8024f7c <__kernel_rem_pio2+0x3fc>
 8024e22:	4650      	mov	r0, sl
 8024e24:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8024ea0 <__kernel_rem_pio2+0x320>
 8024e28:	f000 fe82 	bl	8025b30 <scalbn>
 8024e2c:	ab9a      	add	r3, sp, #616	; 0x268
 8024e2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024e32:	ec57 6b10 	vmov	r6, r7, d0
 8024e36:	00ec      	lsls	r4, r5, #3
 8024e38:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024e3c:	46aa      	mov	sl, r5
 8024e3e:	f1ba 0f00 	cmp.w	sl, #0
 8024e42:	f280 80d6 	bge.w	8024ff2 <__kernel_rem_pio2+0x472>
 8024e46:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8024e98 <__kernel_rem_pio2+0x318>
 8024e4a:	462e      	mov	r6, r5
 8024e4c:	2e00      	cmp	r6, #0
 8024e4e:	f2c0 8104 	blt.w	802505a <__kernel_rem_pio2+0x4da>
 8024e52:	ab72      	add	r3, sp, #456	; 0x1c8
 8024e54:	ed8d 8b06 	vstr	d8, [sp, #24]
 8024e58:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024ec0 <__kernel_rem_pio2+0x340>
 8024e5c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8024e60:	f04f 0800 	mov.w	r8, #0
 8024e64:	1baf      	subs	r7, r5, r6
 8024e66:	e0ea      	b.n	802503e <__kernel_rem_pio2+0x4be>
 8024e68:	f04f 0b02 	mov.w	fp, #2
 8024e6c:	e759      	b.n	8024d22 <__kernel_rem_pio2+0x1a2>
 8024e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8024e72:	b955      	cbnz	r5, 8024e8a <__kernel_rem_pio2+0x30a>
 8024e74:	b123      	cbz	r3, 8024e80 <__kernel_rem_pio2+0x300>
 8024e76:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8024e7a:	f8c8 3000 	str.w	r3, [r8]
 8024e7e:	2301      	movs	r3, #1
 8024e80:	3201      	adds	r2, #1
 8024e82:	f108 0804 	add.w	r8, r8, #4
 8024e86:	461d      	mov	r5, r3
 8024e88:	e752      	b.n	8024d30 <__kernel_rem_pio2+0x1b0>
 8024e8a:	1acb      	subs	r3, r1, r3
 8024e8c:	f8c8 3000 	str.w	r3, [r8]
 8024e90:	462b      	mov	r3, r5
 8024e92:	e7f5      	b.n	8024e80 <__kernel_rem_pio2+0x300>
 8024e94:	f3af 8000 	nop.w
	...
 8024ea4:	3ff00000 	.word	0x3ff00000
 8024ea8:	08029a58 	.word	0x08029a58
 8024eac:	40200000 	.word	0x40200000
 8024eb0:	3ff00000 	.word	0x3ff00000
 8024eb4:	3e700000 	.word	0x3e700000
 8024eb8:	41700000 	.word	0x41700000
 8024ebc:	3fe00000 	.word	0x3fe00000
 8024ec0:	08029a18 	.word	0x08029a18
 8024ec4:	1e62      	subs	r2, r4, #1
 8024ec6:	ab0e      	add	r3, sp, #56	; 0x38
 8024ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024ecc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024ed0:	a90e      	add	r1, sp, #56	; 0x38
 8024ed2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8024ed6:	e739      	b.n	8024d4c <__kernel_rem_pio2+0x1cc>
 8024ed8:	1e62      	subs	r2, r4, #1
 8024eda:	ab0e      	add	r3, sp, #56	; 0x38
 8024edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024ee0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8024ee4:	e7f4      	b.n	8024ed0 <__kernel_rem_pio2+0x350>
 8024ee6:	a90e      	add	r1, sp, #56	; 0x38
 8024ee8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024eec:	3b01      	subs	r3, #1
 8024eee:	430a      	orrs	r2, r1
 8024ef0:	e789      	b.n	8024e06 <__kernel_rem_pio2+0x286>
 8024ef2:	3301      	adds	r3, #1
 8024ef4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8024ef8:	2900      	cmp	r1, #0
 8024efa:	d0fa      	beq.n	8024ef2 <__kernel_rem_pio2+0x372>
 8024efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024efe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8024f02:	446a      	add	r2, sp
 8024f04:	3a98      	subs	r2, #152	; 0x98
 8024f06:	920a      	str	r2, [sp, #40]	; 0x28
 8024f08:	9a08      	ldr	r2, [sp, #32]
 8024f0a:	18e3      	adds	r3, r4, r3
 8024f0c:	18a5      	adds	r5, r4, r2
 8024f0e:	aa22      	add	r2, sp, #136	; 0x88
 8024f10:	f104 0801 	add.w	r8, r4, #1
 8024f14:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8024f18:	9304      	str	r3, [sp, #16]
 8024f1a:	9b04      	ldr	r3, [sp, #16]
 8024f1c:	4543      	cmp	r3, r8
 8024f1e:	da04      	bge.n	8024f2a <__kernel_rem_pio2+0x3aa>
 8024f20:	461c      	mov	r4, r3
 8024f22:	e6a3      	b.n	8024c6c <__kernel_rem_pio2+0xec>
 8024f24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024f26:	2301      	movs	r3, #1
 8024f28:	e7e4      	b.n	8024ef4 <__kernel_rem_pio2+0x374>
 8024f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024f2c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8024f30:	f7db faac 	bl	800048c <__aeabi_i2d>
 8024f34:	e8e5 0102 	strd	r0, r1, [r5], #8
 8024f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f3a:	46ab      	mov	fp, r5
 8024f3c:	461c      	mov	r4, r3
 8024f3e:	f04f 0900 	mov.w	r9, #0
 8024f42:	2600      	movs	r6, #0
 8024f44:	2700      	movs	r7, #0
 8024f46:	9b06      	ldr	r3, [sp, #24]
 8024f48:	4599      	cmp	r9, r3
 8024f4a:	dd06      	ble.n	8024f5a <__kernel_rem_pio2+0x3da>
 8024f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024f4e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8024f52:	f108 0801 	add.w	r8, r8, #1
 8024f56:	930a      	str	r3, [sp, #40]	; 0x28
 8024f58:	e7df      	b.n	8024f1a <__kernel_rem_pio2+0x39a>
 8024f5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8024f5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8024f62:	f7db fafd 	bl	8000560 <__aeabi_dmul>
 8024f66:	4602      	mov	r2, r0
 8024f68:	460b      	mov	r3, r1
 8024f6a:	4630      	mov	r0, r6
 8024f6c:	4639      	mov	r1, r7
 8024f6e:	f7db f941 	bl	80001f4 <__adddf3>
 8024f72:	f109 0901 	add.w	r9, r9, #1
 8024f76:	4606      	mov	r6, r0
 8024f78:	460f      	mov	r7, r1
 8024f7a:	e7e4      	b.n	8024f46 <__kernel_rem_pio2+0x3c6>
 8024f7c:	3d01      	subs	r5, #1
 8024f7e:	e748      	b.n	8024e12 <__kernel_rem_pio2+0x292>
 8024f80:	ec47 6b10 	vmov	d0, r6, r7
 8024f84:	f1ca 0000 	rsb	r0, sl, #0
 8024f88:	f000 fdd2 	bl	8025b30 <scalbn>
 8024f8c:	ec57 6b10 	vmov	r6, r7, d0
 8024f90:	4ba0      	ldr	r3, [pc, #640]	; (8025214 <__kernel_rem_pio2+0x694>)
 8024f92:	ee10 0a10 	vmov	r0, s0
 8024f96:	2200      	movs	r2, #0
 8024f98:	4639      	mov	r1, r7
 8024f9a:	f7db fd67 	bl	8000a6c <__aeabi_dcmpge>
 8024f9e:	b1f8      	cbz	r0, 8024fe0 <__kernel_rem_pio2+0x460>
 8024fa0:	4b9d      	ldr	r3, [pc, #628]	; (8025218 <__kernel_rem_pio2+0x698>)
 8024fa2:	2200      	movs	r2, #0
 8024fa4:	4630      	mov	r0, r6
 8024fa6:	4639      	mov	r1, r7
 8024fa8:	f7db fada 	bl	8000560 <__aeabi_dmul>
 8024fac:	f7db fd72 	bl	8000a94 <__aeabi_d2iz>
 8024fb0:	4680      	mov	r8, r0
 8024fb2:	f7db fa6b 	bl	800048c <__aeabi_i2d>
 8024fb6:	4b97      	ldr	r3, [pc, #604]	; (8025214 <__kernel_rem_pio2+0x694>)
 8024fb8:	2200      	movs	r2, #0
 8024fba:	f7db fad1 	bl	8000560 <__aeabi_dmul>
 8024fbe:	460b      	mov	r3, r1
 8024fc0:	4602      	mov	r2, r0
 8024fc2:	4639      	mov	r1, r7
 8024fc4:	4630      	mov	r0, r6
 8024fc6:	f7db f913 	bl	80001f0 <__aeabi_dsub>
 8024fca:	f7db fd63 	bl	8000a94 <__aeabi_d2iz>
 8024fce:	1c65      	adds	r5, r4, #1
 8024fd0:	ab0e      	add	r3, sp, #56	; 0x38
 8024fd2:	f10a 0a18 	add.w	sl, sl, #24
 8024fd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024fda:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8024fde:	e720      	b.n	8024e22 <__kernel_rem_pio2+0x2a2>
 8024fe0:	4630      	mov	r0, r6
 8024fe2:	4639      	mov	r1, r7
 8024fe4:	f7db fd56 	bl	8000a94 <__aeabi_d2iz>
 8024fe8:	ab0e      	add	r3, sp, #56	; 0x38
 8024fea:	4625      	mov	r5, r4
 8024fec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024ff0:	e717      	b.n	8024e22 <__kernel_rem_pio2+0x2a2>
 8024ff2:	ab0e      	add	r3, sp, #56	; 0x38
 8024ff4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8024ff8:	f7db fa48 	bl	800048c <__aeabi_i2d>
 8024ffc:	4632      	mov	r2, r6
 8024ffe:	463b      	mov	r3, r7
 8025000:	f7db faae 	bl	8000560 <__aeabi_dmul>
 8025004:	4b84      	ldr	r3, [pc, #528]	; (8025218 <__kernel_rem_pio2+0x698>)
 8025006:	e968 0102 	strd	r0, r1, [r8, #-8]!
 802500a:	2200      	movs	r2, #0
 802500c:	4630      	mov	r0, r6
 802500e:	4639      	mov	r1, r7
 8025010:	f7db faa6 	bl	8000560 <__aeabi_dmul>
 8025014:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025018:	4606      	mov	r6, r0
 802501a:	460f      	mov	r7, r1
 802501c:	e70f      	b.n	8024e3e <__kernel_rem_pio2+0x2be>
 802501e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8025022:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8025026:	f7db fa9b 	bl	8000560 <__aeabi_dmul>
 802502a:	4602      	mov	r2, r0
 802502c:	460b      	mov	r3, r1
 802502e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025032:	f7db f8df 	bl	80001f4 <__adddf3>
 8025036:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802503a:	f108 0801 	add.w	r8, r8, #1
 802503e:	9b02      	ldr	r3, [sp, #8]
 8025040:	4598      	cmp	r8, r3
 8025042:	dc01      	bgt.n	8025048 <__kernel_rem_pio2+0x4c8>
 8025044:	45b8      	cmp	r8, r7
 8025046:	ddea      	ble.n	802501e <__kernel_rem_pio2+0x49e>
 8025048:	ed9d 7b06 	vldr	d7, [sp, #24]
 802504c:	ab4a      	add	r3, sp, #296	; 0x128
 802504e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8025052:	ed87 7b00 	vstr	d7, [r7]
 8025056:	3e01      	subs	r6, #1
 8025058:	e6f8      	b.n	8024e4c <__kernel_rem_pio2+0x2cc>
 802505a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802505c:	2b02      	cmp	r3, #2
 802505e:	dc0b      	bgt.n	8025078 <__kernel_rem_pio2+0x4f8>
 8025060:	2b00      	cmp	r3, #0
 8025062:	dc35      	bgt.n	80250d0 <__kernel_rem_pio2+0x550>
 8025064:	d059      	beq.n	802511a <__kernel_rem_pio2+0x59a>
 8025066:	9b04      	ldr	r3, [sp, #16]
 8025068:	f003 0007 	and.w	r0, r3, #7
 802506c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025070:	ecbd 8b02 	vpop	{d8}
 8025074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025078:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802507a:	2b03      	cmp	r3, #3
 802507c:	d1f3      	bne.n	8025066 <__kernel_rem_pio2+0x4e6>
 802507e:	ab4a      	add	r3, sp, #296	; 0x128
 8025080:	4423      	add	r3, r4
 8025082:	9306      	str	r3, [sp, #24]
 8025084:	461c      	mov	r4, r3
 8025086:	469a      	mov	sl, r3
 8025088:	9502      	str	r5, [sp, #8]
 802508a:	9b02      	ldr	r3, [sp, #8]
 802508c:	2b00      	cmp	r3, #0
 802508e:	f1aa 0a08 	sub.w	sl, sl, #8
 8025092:	dc6b      	bgt.n	802516c <__kernel_rem_pio2+0x5ec>
 8025094:	46aa      	mov	sl, r5
 8025096:	f1ba 0f01 	cmp.w	sl, #1
 802509a:	f1a4 0408 	sub.w	r4, r4, #8
 802509e:	f300 8085 	bgt.w	80251ac <__kernel_rem_pio2+0x62c>
 80250a2:	9c06      	ldr	r4, [sp, #24]
 80250a4:	2000      	movs	r0, #0
 80250a6:	3408      	adds	r4, #8
 80250a8:	2100      	movs	r1, #0
 80250aa:	2d01      	cmp	r5, #1
 80250ac:	f300 809d 	bgt.w	80251ea <__kernel_rem_pio2+0x66a>
 80250b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80250b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80250b8:	f1bb 0f00 	cmp.w	fp, #0
 80250bc:	f040 809b 	bne.w	80251f6 <__kernel_rem_pio2+0x676>
 80250c0:	9b01      	ldr	r3, [sp, #4]
 80250c2:	e9c3 5600 	strd	r5, r6, [r3]
 80250c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80250ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80250ce:	e7ca      	b.n	8025066 <__kernel_rem_pio2+0x4e6>
 80250d0:	3408      	adds	r4, #8
 80250d2:	ab4a      	add	r3, sp, #296	; 0x128
 80250d4:	441c      	add	r4, r3
 80250d6:	462e      	mov	r6, r5
 80250d8:	2000      	movs	r0, #0
 80250da:	2100      	movs	r1, #0
 80250dc:	2e00      	cmp	r6, #0
 80250de:	da36      	bge.n	802514e <__kernel_rem_pio2+0x5ce>
 80250e0:	f1bb 0f00 	cmp.w	fp, #0
 80250e4:	d039      	beq.n	802515a <__kernel_rem_pio2+0x5da>
 80250e6:	4602      	mov	r2, r0
 80250e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80250ec:	9c01      	ldr	r4, [sp, #4]
 80250ee:	e9c4 2300 	strd	r2, r3, [r4]
 80250f2:	4602      	mov	r2, r0
 80250f4:	460b      	mov	r3, r1
 80250f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80250fa:	f7db f879 	bl	80001f0 <__aeabi_dsub>
 80250fe:	ae4c      	add	r6, sp, #304	; 0x130
 8025100:	2401      	movs	r4, #1
 8025102:	42a5      	cmp	r5, r4
 8025104:	da2c      	bge.n	8025160 <__kernel_rem_pio2+0x5e0>
 8025106:	f1bb 0f00 	cmp.w	fp, #0
 802510a:	d002      	beq.n	8025112 <__kernel_rem_pio2+0x592>
 802510c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025110:	4619      	mov	r1, r3
 8025112:	9b01      	ldr	r3, [sp, #4]
 8025114:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8025118:	e7a5      	b.n	8025066 <__kernel_rem_pio2+0x4e6>
 802511a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 802511e:	eb0d 0403 	add.w	r4, sp, r3
 8025122:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8025126:	2000      	movs	r0, #0
 8025128:	2100      	movs	r1, #0
 802512a:	2d00      	cmp	r5, #0
 802512c:	da09      	bge.n	8025142 <__kernel_rem_pio2+0x5c2>
 802512e:	f1bb 0f00 	cmp.w	fp, #0
 8025132:	d002      	beq.n	802513a <__kernel_rem_pio2+0x5ba>
 8025134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025138:	4619      	mov	r1, r3
 802513a:	9b01      	ldr	r3, [sp, #4]
 802513c:	e9c3 0100 	strd	r0, r1, [r3]
 8025140:	e791      	b.n	8025066 <__kernel_rem_pio2+0x4e6>
 8025142:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025146:	f7db f855 	bl	80001f4 <__adddf3>
 802514a:	3d01      	subs	r5, #1
 802514c:	e7ed      	b.n	802512a <__kernel_rem_pio2+0x5aa>
 802514e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025152:	f7db f84f 	bl	80001f4 <__adddf3>
 8025156:	3e01      	subs	r6, #1
 8025158:	e7c0      	b.n	80250dc <__kernel_rem_pio2+0x55c>
 802515a:	4602      	mov	r2, r0
 802515c:	460b      	mov	r3, r1
 802515e:	e7c5      	b.n	80250ec <__kernel_rem_pio2+0x56c>
 8025160:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8025164:	f7db f846 	bl	80001f4 <__adddf3>
 8025168:	3401      	adds	r4, #1
 802516a:	e7ca      	b.n	8025102 <__kernel_rem_pio2+0x582>
 802516c:	e9da 8900 	ldrd	r8, r9, [sl]
 8025170:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8025174:	9b02      	ldr	r3, [sp, #8]
 8025176:	3b01      	subs	r3, #1
 8025178:	9302      	str	r3, [sp, #8]
 802517a:	4632      	mov	r2, r6
 802517c:	463b      	mov	r3, r7
 802517e:	4640      	mov	r0, r8
 8025180:	4649      	mov	r1, r9
 8025182:	f7db f837 	bl	80001f4 <__adddf3>
 8025186:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802518a:	4602      	mov	r2, r0
 802518c:	460b      	mov	r3, r1
 802518e:	4640      	mov	r0, r8
 8025190:	4649      	mov	r1, r9
 8025192:	f7db f82d 	bl	80001f0 <__aeabi_dsub>
 8025196:	4632      	mov	r2, r6
 8025198:	463b      	mov	r3, r7
 802519a:	f7db f82b 	bl	80001f4 <__adddf3>
 802519e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80251a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80251a6:	ed8a 7b00 	vstr	d7, [sl]
 80251aa:	e76e      	b.n	802508a <__kernel_rem_pio2+0x50a>
 80251ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80251b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80251b4:	4640      	mov	r0, r8
 80251b6:	4632      	mov	r2, r6
 80251b8:	463b      	mov	r3, r7
 80251ba:	4649      	mov	r1, r9
 80251bc:	f7db f81a 	bl	80001f4 <__adddf3>
 80251c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80251c4:	4602      	mov	r2, r0
 80251c6:	460b      	mov	r3, r1
 80251c8:	4640      	mov	r0, r8
 80251ca:	4649      	mov	r1, r9
 80251cc:	f7db f810 	bl	80001f0 <__aeabi_dsub>
 80251d0:	4632      	mov	r2, r6
 80251d2:	463b      	mov	r3, r7
 80251d4:	f7db f80e 	bl	80001f4 <__adddf3>
 80251d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80251dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80251e0:	ed84 7b00 	vstr	d7, [r4]
 80251e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80251e8:	e755      	b.n	8025096 <__kernel_rem_pio2+0x516>
 80251ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80251ee:	f7db f801 	bl	80001f4 <__adddf3>
 80251f2:	3d01      	subs	r5, #1
 80251f4:	e759      	b.n	80250aa <__kernel_rem_pio2+0x52a>
 80251f6:	9b01      	ldr	r3, [sp, #4]
 80251f8:	9a01      	ldr	r2, [sp, #4]
 80251fa:	601d      	str	r5, [r3, #0]
 80251fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8025200:	605c      	str	r4, [r3, #4]
 8025202:	609f      	str	r7, [r3, #8]
 8025204:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8025208:	60d3      	str	r3, [r2, #12]
 802520a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802520e:	6110      	str	r0, [r2, #16]
 8025210:	6153      	str	r3, [r2, #20]
 8025212:	e728      	b.n	8025066 <__kernel_rem_pio2+0x4e6>
 8025214:	41700000 	.word	0x41700000
 8025218:	3e700000 	.word	0x3e700000
 802521c:	00000000 	.word	0x00000000

08025220 <__kernel_sin>:
 8025220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025224:	ed2d 8b04 	vpush	{d8-d9}
 8025228:	eeb0 8a41 	vmov.f32	s16, s2
 802522c:	eef0 8a61 	vmov.f32	s17, s3
 8025230:	ec55 4b10 	vmov	r4, r5, d0
 8025234:	b083      	sub	sp, #12
 8025236:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802523a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802523e:	9001      	str	r0, [sp, #4]
 8025240:	da06      	bge.n	8025250 <__kernel_sin+0x30>
 8025242:	ee10 0a10 	vmov	r0, s0
 8025246:	4629      	mov	r1, r5
 8025248:	f7db fc24 	bl	8000a94 <__aeabi_d2iz>
 802524c:	2800      	cmp	r0, #0
 802524e:	d051      	beq.n	80252f4 <__kernel_sin+0xd4>
 8025250:	4622      	mov	r2, r4
 8025252:	462b      	mov	r3, r5
 8025254:	4620      	mov	r0, r4
 8025256:	4629      	mov	r1, r5
 8025258:	f7db f982 	bl	8000560 <__aeabi_dmul>
 802525c:	4682      	mov	sl, r0
 802525e:	468b      	mov	fp, r1
 8025260:	4602      	mov	r2, r0
 8025262:	460b      	mov	r3, r1
 8025264:	4620      	mov	r0, r4
 8025266:	4629      	mov	r1, r5
 8025268:	f7db f97a 	bl	8000560 <__aeabi_dmul>
 802526c:	a341      	add	r3, pc, #260	; (adr r3, 8025374 <__kernel_sin+0x154>)
 802526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025272:	4680      	mov	r8, r0
 8025274:	4689      	mov	r9, r1
 8025276:	4650      	mov	r0, sl
 8025278:	4659      	mov	r1, fp
 802527a:	f7db f971 	bl	8000560 <__aeabi_dmul>
 802527e:	a33f      	add	r3, pc, #252	; (adr r3, 802537c <__kernel_sin+0x15c>)
 8025280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025284:	f7da ffb4 	bl	80001f0 <__aeabi_dsub>
 8025288:	4652      	mov	r2, sl
 802528a:	465b      	mov	r3, fp
 802528c:	f7db f968 	bl	8000560 <__aeabi_dmul>
 8025290:	a33c      	add	r3, pc, #240	; (adr r3, 8025384 <__kernel_sin+0x164>)
 8025292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025296:	f7da ffad 	bl	80001f4 <__adddf3>
 802529a:	4652      	mov	r2, sl
 802529c:	465b      	mov	r3, fp
 802529e:	f7db f95f 	bl	8000560 <__aeabi_dmul>
 80252a2:	a33a      	add	r3, pc, #232	; (adr r3, 802538c <__kernel_sin+0x16c>)
 80252a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252a8:	f7da ffa2 	bl	80001f0 <__aeabi_dsub>
 80252ac:	4652      	mov	r2, sl
 80252ae:	465b      	mov	r3, fp
 80252b0:	f7db f956 	bl	8000560 <__aeabi_dmul>
 80252b4:	a337      	add	r3, pc, #220	; (adr r3, 8025394 <__kernel_sin+0x174>)
 80252b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252ba:	f7da ff9b 	bl	80001f4 <__adddf3>
 80252be:	9b01      	ldr	r3, [sp, #4]
 80252c0:	4606      	mov	r6, r0
 80252c2:	460f      	mov	r7, r1
 80252c4:	b9eb      	cbnz	r3, 8025302 <__kernel_sin+0xe2>
 80252c6:	4602      	mov	r2, r0
 80252c8:	460b      	mov	r3, r1
 80252ca:	4650      	mov	r0, sl
 80252cc:	4659      	mov	r1, fp
 80252ce:	f7db f947 	bl	8000560 <__aeabi_dmul>
 80252d2:	a325      	add	r3, pc, #148	; (adr r3, 8025368 <__kernel_sin+0x148>)
 80252d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252d8:	f7da ff8a 	bl	80001f0 <__aeabi_dsub>
 80252dc:	4642      	mov	r2, r8
 80252de:	464b      	mov	r3, r9
 80252e0:	f7db f93e 	bl	8000560 <__aeabi_dmul>
 80252e4:	4602      	mov	r2, r0
 80252e6:	460b      	mov	r3, r1
 80252e8:	4620      	mov	r0, r4
 80252ea:	4629      	mov	r1, r5
 80252ec:	f7da ff82 	bl	80001f4 <__adddf3>
 80252f0:	4604      	mov	r4, r0
 80252f2:	460d      	mov	r5, r1
 80252f4:	ec45 4b10 	vmov	d0, r4, r5
 80252f8:	b003      	add	sp, #12
 80252fa:	ecbd 8b04 	vpop	{d8-d9}
 80252fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025302:	4b1b      	ldr	r3, [pc, #108]	; (8025370 <__kernel_sin+0x150>)
 8025304:	ec51 0b18 	vmov	r0, r1, d8
 8025308:	2200      	movs	r2, #0
 802530a:	f7db f929 	bl	8000560 <__aeabi_dmul>
 802530e:	4632      	mov	r2, r6
 8025310:	ec41 0b19 	vmov	d9, r0, r1
 8025314:	463b      	mov	r3, r7
 8025316:	4640      	mov	r0, r8
 8025318:	4649      	mov	r1, r9
 802531a:	f7db f921 	bl	8000560 <__aeabi_dmul>
 802531e:	4602      	mov	r2, r0
 8025320:	460b      	mov	r3, r1
 8025322:	ec51 0b19 	vmov	r0, r1, d9
 8025326:	f7da ff63 	bl	80001f0 <__aeabi_dsub>
 802532a:	4652      	mov	r2, sl
 802532c:	465b      	mov	r3, fp
 802532e:	f7db f917 	bl	8000560 <__aeabi_dmul>
 8025332:	ec53 2b18 	vmov	r2, r3, d8
 8025336:	f7da ff5b 	bl	80001f0 <__aeabi_dsub>
 802533a:	a30b      	add	r3, pc, #44	; (adr r3, 8025368 <__kernel_sin+0x148>)
 802533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025340:	4606      	mov	r6, r0
 8025342:	460f      	mov	r7, r1
 8025344:	4640      	mov	r0, r8
 8025346:	4649      	mov	r1, r9
 8025348:	f7db f90a 	bl	8000560 <__aeabi_dmul>
 802534c:	4602      	mov	r2, r0
 802534e:	460b      	mov	r3, r1
 8025350:	4630      	mov	r0, r6
 8025352:	4639      	mov	r1, r7
 8025354:	f7da ff4e 	bl	80001f4 <__adddf3>
 8025358:	4602      	mov	r2, r0
 802535a:	460b      	mov	r3, r1
 802535c:	4620      	mov	r0, r4
 802535e:	4629      	mov	r1, r5
 8025360:	f7da ff46 	bl	80001f0 <__aeabi_dsub>
 8025364:	e7c4      	b.n	80252f0 <__kernel_sin+0xd0>
 8025366:	bf00      	nop
 8025368:	55555549 	.word	0x55555549
 802536c:	3fc55555 	.word	0x3fc55555
 8025370:	3fe00000 	.word	0x3fe00000
 8025374:	5acfd57c 	.word	0x5acfd57c
 8025378:	3de5d93a 	.word	0x3de5d93a
 802537c:	8a2b9ceb 	.word	0x8a2b9ceb
 8025380:	3e5ae5e6 	.word	0x3e5ae5e6
 8025384:	57b1fe7d 	.word	0x57b1fe7d
 8025388:	3ec71de3 	.word	0x3ec71de3
 802538c:	19c161d5 	.word	0x19c161d5
 8025390:	3f2a01a0 	.word	0x3f2a01a0
 8025394:	1110f8a6 	.word	0x1110f8a6
 8025398:	3f811111 	.word	0x3f811111

0802539c <__kernel_cosf>:
 802539c:	ee10 3a10 	vmov	r3, s0
 80253a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80253a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80253a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80253ac:	da05      	bge.n	80253ba <__kernel_cosf+0x1e>
 80253ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80253b2:	ee17 2a90 	vmov	r2, s15
 80253b6:	2a00      	cmp	r2, #0
 80253b8:	d03d      	beq.n	8025436 <__kernel_cosf+0x9a>
 80253ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80253be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802543c <__kernel_cosf+0xa0>
 80253c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8025440 <__kernel_cosf+0xa4>
 80253c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8025444 <__kernel_cosf+0xa8>
 80253ca:	4a1f      	ldr	r2, [pc, #124]	; (8025448 <__kernel_cosf+0xac>)
 80253cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80253d0:	4293      	cmp	r3, r2
 80253d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802544c <__kernel_cosf+0xb0>
 80253d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80253da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8025450 <__kernel_cosf+0xb4>
 80253de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80253e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8025454 <__kernel_cosf+0xb8>
 80253e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80253ea:	eeb0 7a66 	vmov.f32	s14, s13
 80253ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80253f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80253f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80253fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80253fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8025402:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025406:	dc04      	bgt.n	8025412 <__kernel_cosf+0x76>
 8025408:	ee37 7ac7 	vsub.f32	s14, s15, s14
 802540c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8025410:	4770      	bx	lr
 8025412:	4a11      	ldr	r2, [pc, #68]	; (8025458 <__kernel_cosf+0xbc>)
 8025414:	4293      	cmp	r3, r2
 8025416:	bfda      	itte	le
 8025418:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 802541c:	ee06 3a90 	vmovle	s13, r3
 8025420:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8025424:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8025428:	ee36 0a66 	vsub.f32	s0, s12, s13
 802542c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025430:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025434:	4770      	bx	lr
 8025436:	eeb0 0a46 	vmov.f32	s0, s12
 802543a:	4770      	bx	lr
 802543c:	ad47d74e 	.word	0xad47d74e
 8025440:	310f74f6 	.word	0x310f74f6
 8025444:	3d2aaaab 	.word	0x3d2aaaab
 8025448:	3e999999 	.word	0x3e999999
 802544c:	b493f27c 	.word	0xb493f27c
 8025450:	37d00d01 	.word	0x37d00d01
 8025454:	bab60b61 	.word	0xbab60b61
 8025458:	3f480000 	.word	0x3f480000

0802545c <__kernel_rem_pio2f>:
 802545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025460:	ed2d 8b04 	vpush	{d8-d9}
 8025464:	b0d9      	sub	sp, #356	; 0x164
 8025466:	4688      	mov	r8, r1
 8025468:	9002      	str	r0, [sp, #8]
 802546a:	49bb      	ldr	r1, [pc, #748]	; (8025758 <__kernel_rem_pio2f+0x2fc>)
 802546c:	9866      	ldr	r0, [sp, #408]	; 0x198
 802546e:	9301      	str	r3, [sp, #4]
 8025470:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8025474:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8025478:	1e59      	subs	r1, r3, #1
 802547a:	1d13      	adds	r3, r2, #4
 802547c:	db27      	blt.n	80254ce <__kernel_rem_pio2f+0x72>
 802547e:	f1b2 0b03 	subs.w	fp, r2, #3
 8025482:	bf48      	it	mi
 8025484:	f102 0b04 	addmi.w	fp, r2, #4
 8025488:	ea4f 00eb 	mov.w	r0, fp, asr #3
 802548c:	1c45      	adds	r5, r0, #1
 802548e:	00ec      	lsls	r4, r5, #3
 8025490:	1a47      	subs	r7, r0, r1
 8025492:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8025768 <__kernel_rem_pio2f+0x30c>
 8025496:	9403      	str	r4, [sp, #12]
 8025498:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 802549c:	eb0a 0c01 	add.w	ip, sl, r1
 80254a0:	ae1c      	add	r6, sp, #112	; 0x70
 80254a2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80254a6:	2400      	movs	r4, #0
 80254a8:	4564      	cmp	r4, ip
 80254aa:	dd12      	ble.n	80254d2 <__kernel_rem_pio2f+0x76>
 80254ac:	9b01      	ldr	r3, [sp, #4]
 80254ae:	ac1c      	add	r4, sp, #112	; 0x70
 80254b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80254b4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80254b8:	f04f 0c00 	mov.w	ip, #0
 80254bc:	45d4      	cmp	ip, sl
 80254be:	dc27      	bgt.n	8025510 <__kernel_rem_pio2f+0xb4>
 80254c0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80254c4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8025768 <__kernel_rem_pio2f+0x30c>
 80254c8:	4627      	mov	r7, r4
 80254ca:	2600      	movs	r6, #0
 80254cc:	e016      	b.n	80254fc <__kernel_rem_pio2f+0xa0>
 80254ce:	2000      	movs	r0, #0
 80254d0:	e7dc      	b.n	802548c <__kernel_rem_pio2f+0x30>
 80254d2:	42e7      	cmn	r7, r4
 80254d4:	bf5d      	ittte	pl
 80254d6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80254da:	ee07 3a90 	vmovpl	s15, r3
 80254de:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80254e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80254e6:	ece6 7a01 	vstmia	r6!, {s15}
 80254ea:	3401      	adds	r4, #1
 80254ec:	e7dc      	b.n	80254a8 <__kernel_rem_pio2f+0x4c>
 80254ee:	ecf9 6a01 	vldmia	r9!, {s13}
 80254f2:	ed97 7a00 	vldr	s14, [r7]
 80254f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80254fa:	3601      	adds	r6, #1
 80254fc:	428e      	cmp	r6, r1
 80254fe:	f1a7 0704 	sub.w	r7, r7, #4
 8025502:	ddf4      	ble.n	80254ee <__kernel_rem_pio2f+0x92>
 8025504:	eceb 7a01 	vstmia	fp!, {s15}
 8025508:	f10c 0c01 	add.w	ip, ip, #1
 802550c:	3404      	adds	r4, #4
 802550e:	e7d5      	b.n	80254bc <__kernel_rem_pio2f+0x60>
 8025510:	ab08      	add	r3, sp, #32
 8025512:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8025516:	eddf 8a93 	vldr	s17, [pc, #588]	; 8025764 <__kernel_rem_pio2f+0x308>
 802551a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8025760 <__kernel_rem_pio2f+0x304>
 802551e:	9304      	str	r3, [sp, #16]
 8025520:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8025524:	4656      	mov	r6, sl
 8025526:	00b3      	lsls	r3, r6, #2
 8025528:	9305      	str	r3, [sp, #20]
 802552a:	ab58      	add	r3, sp, #352	; 0x160
 802552c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8025530:	ac08      	add	r4, sp, #32
 8025532:	ab44      	add	r3, sp, #272	; 0x110
 8025534:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8025538:	46a4      	mov	ip, r4
 802553a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802553e:	4637      	mov	r7, r6
 8025540:	2f00      	cmp	r7, #0
 8025542:	f1a0 0004 	sub.w	r0, r0, #4
 8025546:	dc4f      	bgt.n	80255e8 <__kernel_rem_pio2f+0x18c>
 8025548:	4628      	mov	r0, r5
 802554a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 802554e:	f000 fca5 	bl	8025e9c <scalbnf>
 8025552:	eeb0 8a40 	vmov.f32	s16, s0
 8025556:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 802555a:	ee28 0a00 	vmul.f32	s0, s16, s0
 802555e:	f000 fc55 	bl	8025e0c <floorf>
 8025562:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8025566:	eea0 8a67 	vfms.f32	s16, s0, s15
 802556a:	2d00      	cmp	r5, #0
 802556c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025570:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8025574:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8025578:	ee17 9a90 	vmov	r9, s15
 802557c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8025580:	dd44      	ble.n	802560c <__kernel_rem_pio2f+0x1b0>
 8025582:	f106 3cff 	add.w	ip, r6, #4294967295
 8025586:	ab08      	add	r3, sp, #32
 8025588:	f1c5 0e08 	rsb	lr, r5, #8
 802558c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8025590:	fa47 f00e 	asr.w	r0, r7, lr
 8025594:	4481      	add	r9, r0
 8025596:	fa00 f00e 	lsl.w	r0, r0, lr
 802559a:	1a3f      	subs	r7, r7, r0
 802559c:	f1c5 0007 	rsb	r0, r5, #7
 80255a0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80255a4:	4107      	asrs	r7, r0
 80255a6:	2f00      	cmp	r7, #0
 80255a8:	dd3f      	ble.n	802562a <__kernel_rem_pio2f+0x1ce>
 80255aa:	f04f 0e00 	mov.w	lr, #0
 80255ae:	f109 0901 	add.w	r9, r9, #1
 80255b2:	4673      	mov	r3, lr
 80255b4:	4576      	cmp	r6, lr
 80255b6:	dc6b      	bgt.n	8025690 <__kernel_rem_pio2f+0x234>
 80255b8:	2d00      	cmp	r5, #0
 80255ba:	dd04      	ble.n	80255c6 <__kernel_rem_pio2f+0x16a>
 80255bc:	2d01      	cmp	r5, #1
 80255be:	d078      	beq.n	80256b2 <__kernel_rem_pio2f+0x256>
 80255c0:	2d02      	cmp	r5, #2
 80255c2:	f000 8081 	beq.w	80256c8 <__kernel_rem_pio2f+0x26c>
 80255c6:	2f02      	cmp	r7, #2
 80255c8:	d12f      	bne.n	802562a <__kernel_rem_pio2f+0x1ce>
 80255ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80255ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80255d2:	b353      	cbz	r3, 802562a <__kernel_rem_pio2f+0x1ce>
 80255d4:	4628      	mov	r0, r5
 80255d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80255da:	f000 fc5f 	bl	8025e9c <scalbnf>
 80255de:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80255e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80255e6:	e020      	b.n	802562a <__kernel_rem_pio2f+0x1ce>
 80255e8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80255ec:	3f01      	subs	r7, #1
 80255ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80255f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80255f6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80255fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80255fe:	ecac 0a01 	vstmia	ip!, {s0}
 8025602:	ed90 0a00 	vldr	s0, [r0]
 8025606:	ee37 0a80 	vadd.f32	s0, s15, s0
 802560a:	e799      	b.n	8025540 <__kernel_rem_pio2f+0xe4>
 802560c:	d105      	bne.n	802561a <__kernel_rem_pio2f+0x1be>
 802560e:	1e70      	subs	r0, r6, #1
 8025610:	ab08      	add	r3, sp, #32
 8025612:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8025616:	11ff      	asrs	r7, r7, #7
 8025618:	e7c5      	b.n	80255a6 <__kernel_rem_pio2f+0x14a>
 802561a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802561e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8025622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025626:	da31      	bge.n	802568c <__kernel_rem_pio2f+0x230>
 8025628:	2700      	movs	r7, #0
 802562a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 802562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025632:	f040 809b 	bne.w	802576c <__kernel_rem_pio2f+0x310>
 8025636:	1e74      	subs	r4, r6, #1
 8025638:	46a4      	mov	ip, r4
 802563a:	2000      	movs	r0, #0
 802563c:	45d4      	cmp	ip, sl
 802563e:	da4a      	bge.n	80256d6 <__kernel_rem_pio2f+0x27a>
 8025640:	2800      	cmp	r0, #0
 8025642:	d07a      	beq.n	802573a <__kernel_rem_pio2f+0x2de>
 8025644:	ab08      	add	r3, sp, #32
 8025646:	3d08      	subs	r5, #8
 8025648:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802564c:	2b00      	cmp	r3, #0
 802564e:	f000 8081 	beq.w	8025754 <__kernel_rem_pio2f+0x2f8>
 8025652:	4628      	mov	r0, r5
 8025654:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025658:	00a5      	lsls	r5, r4, #2
 802565a:	f000 fc1f 	bl	8025e9c <scalbnf>
 802565e:	aa44      	add	r2, sp, #272	; 0x110
 8025660:	1d2b      	adds	r3, r5, #4
 8025662:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8025764 <__kernel_rem_pio2f+0x308>
 8025666:	18d1      	adds	r1, r2, r3
 8025668:	4622      	mov	r2, r4
 802566a:	2a00      	cmp	r2, #0
 802566c:	f280 80ae 	bge.w	80257cc <__kernel_rem_pio2f+0x370>
 8025670:	4622      	mov	r2, r4
 8025672:	2a00      	cmp	r2, #0
 8025674:	f2c0 80cc 	blt.w	8025810 <__kernel_rem_pio2f+0x3b4>
 8025678:	a944      	add	r1, sp, #272	; 0x110
 802567a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 802567e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 802575c <__kernel_rem_pio2f+0x300>
 8025682:	eddf 7a39 	vldr	s15, [pc, #228]	; 8025768 <__kernel_rem_pio2f+0x30c>
 8025686:	2000      	movs	r0, #0
 8025688:	1aa1      	subs	r1, r4, r2
 802568a:	e0b6      	b.n	80257fa <__kernel_rem_pio2f+0x39e>
 802568c:	2702      	movs	r7, #2
 802568e:	e78c      	b.n	80255aa <__kernel_rem_pio2f+0x14e>
 8025690:	6820      	ldr	r0, [r4, #0]
 8025692:	b94b      	cbnz	r3, 80256a8 <__kernel_rem_pio2f+0x24c>
 8025694:	b118      	cbz	r0, 802569e <__kernel_rem_pio2f+0x242>
 8025696:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802569a:	6020      	str	r0, [r4, #0]
 802569c:	2001      	movs	r0, #1
 802569e:	f10e 0e01 	add.w	lr, lr, #1
 80256a2:	3404      	adds	r4, #4
 80256a4:	4603      	mov	r3, r0
 80256a6:	e785      	b.n	80255b4 <__kernel_rem_pio2f+0x158>
 80256a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80256ac:	6020      	str	r0, [r4, #0]
 80256ae:	4618      	mov	r0, r3
 80256b0:	e7f5      	b.n	802569e <__kernel_rem_pio2f+0x242>
 80256b2:	1e74      	subs	r4, r6, #1
 80256b4:	a808      	add	r0, sp, #32
 80256b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80256ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80256be:	f10d 0c20 	add.w	ip, sp, #32
 80256c2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80256c6:	e77e      	b.n	80255c6 <__kernel_rem_pio2f+0x16a>
 80256c8:	1e74      	subs	r4, r6, #1
 80256ca:	a808      	add	r0, sp, #32
 80256cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80256d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80256d4:	e7f3      	b.n	80256be <__kernel_rem_pio2f+0x262>
 80256d6:	ab08      	add	r3, sp, #32
 80256d8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80256dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80256e0:	4318      	orrs	r0, r3
 80256e2:	e7ab      	b.n	802563c <__kernel_rem_pio2f+0x1e0>
 80256e4:	f10c 0c01 	add.w	ip, ip, #1
 80256e8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80256ec:	2c00      	cmp	r4, #0
 80256ee:	d0f9      	beq.n	80256e4 <__kernel_rem_pio2f+0x288>
 80256f0:	9b05      	ldr	r3, [sp, #20]
 80256f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80256f6:	eb0d 0003 	add.w	r0, sp, r3
 80256fa:	9b01      	ldr	r3, [sp, #4]
 80256fc:	18f4      	adds	r4, r6, r3
 80256fe:	ab1c      	add	r3, sp, #112	; 0x70
 8025700:	1c77      	adds	r7, r6, #1
 8025702:	384c      	subs	r0, #76	; 0x4c
 8025704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025708:	4466      	add	r6, ip
 802570a:	42be      	cmp	r6, r7
 802570c:	f6ff af0b 	blt.w	8025526 <__kernel_rem_pio2f+0xca>
 8025710:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8025714:	f8dd e008 	ldr.w	lr, [sp, #8]
 8025718:	ee07 3a90 	vmov	s15, r3
 802571c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025720:	f04f 0c00 	mov.w	ip, #0
 8025724:	ece4 7a01 	vstmia	r4!, {s15}
 8025728:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8025768 <__kernel_rem_pio2f+0x30c>
 802572c:	46a1      	mov	r9, r4
 802572e:	458c      	cmp	ip, r1
 8025730:	dd07      	ble.n	8025742 <__kernel_rem_pio2f+0x2e6>
 8025732:	ece0 7a01 	vstmia	r0!, {s15}
 8025736:	3701      	adds	r7, #1
 8025738:	e7e7      	b.n	802570a <__kernel_rem_pio2f+0x2ae>
 802573a:	9804      	ldr	r0, [sp, #16]
 802573c:	f04f 0c01 	mov.w	ip, #1
 8025740:	e7d2      	b.n	80256e8 <__kernel_rem_pio2f+0x28c>
 8025742:	ecfe 6a01 	vldmia	lr!, {s13}
 8025746:	ed39 7a01 	vldmdb	r9!, {s14}
 802574a:	f10c 0c01 	add.w	ip, ip, #1
 802574e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025752:	e7ec      	b.n	802572e <__kernel_rem_pio2f+0x2d2>
 8025754:	3c01      	subs	r4, #1
 8025756:	e775      	b.n	8025644 <__kernel_rem_pio2f+0x1e8>
 8025758:	08029a94 	.word	0x08029a94
 802575c:	08029a68 	.word	0x08029a68
 8025760:	43800000 	.word	0x43800000
 8025764:	3b800000 	.word	0x3b800000
 8025768:	00000000 	.word	0x00000000
 802576c:	9b03      	ldr	r3, [sp, #12]
 802576e:	eeb0 0a48 	vmov.f32	s0, s16
 8025772:	1a98      	subs	r0, r3, r2
 8025774:	f000 fb92 	bl	8025e9c <scalbnf>
 8025778:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8025760 <__kernel_rem_pio2f+0x304>
 802577c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8025780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025784:	db19      	blt.n	80257ba <__kernel_rem_pio2f+0x35e>
 8025786:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8025764 <__kernel_rem_pio2f+0x308>
 802578a:	ee60 7a27 	vmul.f32	s15, s0, s15
 802578e:	aa08      	add	r2, sp, #32
 8025790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025794:	1c74      	adds	r4, r6, #1
 8025796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802579a:	3508      	adds	r5, #8
 802579c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80257a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80257a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80257a8:	ee10 3a10 	vmov	r3, s0
 80257ac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80257b0:	ee17 3a90 	vmov	r3, s15
 80257b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80257b8:	e74b      	b.n	8025652 <__kernel_rem_pio2f+0x1f6>
 80257ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80257be:	aa08      	add	r2, sp, #32
 80257c0:	ee10 3a10 	vmov	r3, s0
 80257c4:	4634      	mov	r4, r6
 80257c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80257ca:	e742      	b.n	8025652 <__kernel_rem_pio2f+0x1f6>
 80257cc:	a808      	add	r0, sp, #32
 80257ce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80257d2:	9001      	str	r0, [sp, #4]
 80257d4:	ee07 0a90 	vmov	s15, r0
 80257d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80257dc:	3a01      	subs	r2, #1
 80257de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80257e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80257e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80257ea:	e73e      	b.n	802566a <__kernel_rem_pio2f+0x20e>
 80257ec:	ecfc 6a01 	vldmia	ip!, {s13}
 80257f0:	ecb6 7a01 	vldmia	r6!, {s14}
 80257f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80257f8:	3001      	adds	r0, #1
 80257fa:	4550      	cmp	r0, sl
 80257fc:	dc01      	bgt.n	8025802 <__kernel_rem_pio2f+0x3a6>
 80257fe:	4288      	cmp	r0, r1
 8025800:	ddf4      	ble.n	80257ec <__kernel_rem_pio2f+0x390>
 8025802:	a858      	add	r0, sp, #352	; 0x160
 8025804:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8025808:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 802580c:	3a01      	subs	r2, #1
 802580e:	e730      	b.n	8025672 <__kernel_rem_pio2f+0x216>
 8025810:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8025812:	2a02      	cmp	r2, #2
 8025814:	dc09      	bgt.n	802582a <__kernel_rem_pio2f+0x3ce>
 8025816:	2a00      	cmp	r2, #0
 8025818:	dc2a      	bgt.n	8025870 <__kernel_rem_pio2f+0x414>
 802581a:	d043      	beq.n	80258a4 <__kernel_rem_pio2f+0x448>
 802581c:	f009 0007 	and.w	r0, r9, #7
 8025820:	b059      	add	sp, #356	; 0x164
 8025822:	ecbd 8b04 	vpop	{d8-d9}
 8025826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802582a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802582c:	2b03      	cmp	r3, #3
 802582e:	d1f5      	bne.n	802581c <__kernel_rem_pio2f+0x3c0>
 8025830:	ab30      	add	r3, sp, #192	; 0xc0
 8025832:	442b      	add	r3, r5
 8025834:	461a      	mov	r2, r3
 8025836:	4619      	mov	r1, r3
 8025838:	4620      	mov	r0, r4
 802583a:	2800      	cmp	r0, #0
 802583c:	f1a1 0104 	sub.w	r1, r1, #4
 8025840:	dc51      	bgt.n	80258e6 <__kernel_rem_pio2f+0x48a>
 8025842:	4621      	mov	r1, r4
 8025844:	2901      	cmp	r1, #1
 8025846:	f1a2 0204 	sub.w	r2, r2, #4
 802584a:	dc5c      	bgt.n	8025906 <__kernel_rem_pio2f+0x4aa>
 802584c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8025768 <__kernel_rem_pio2f+0x30c>
 8025850:	3304      	adds	r3, #4
 8025852:	2c01      	cmp	r4, #1
 8025854:	dc67      	bgt.n	8025926 <__kernel_rem_pio2f+0x4ca>
 8025856:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802585a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 802585e:	2f00      	cmp	r7, #0
 8025860:	d167      	bne.n	8025932 <__kernel_rem_pio2f+0x4d6>
 8025862:	edc8 6a00 	vstr	s13, [r8]
 8025866:	ed88 7a01 	vstr	s14, [r8, #4]
 802586a:	edc8 7a02 	vstr	s15, [r8, #8]
 802586e:	e7d5      	b.n	802581c <__kernel_rem_pio2f+0x3c0>
 8025870:	aa30      	add	r2, sp, #192	; 0xc0
 8025872:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8025768 <__kernel_rem_pio2f+0x30c>
 8025876:	4413      	add	r3, r2
 8025878:	4622      	mov	r2, r4
 802587a:	2a00      	cmp	r2, #0
 802587c:	da24      	bge.n	80258c8 <__kernel_rem_pio2f+0x46c>
 802587e:	b34f      	cbz	r7, 80258d4 <__kernel_rem_pio2f+0x478>
 8025880:	eef1 7a47 	vneg.f32	s15, s14
 8025884:	edc8 7a00 	vstr	s15, [r8]
 8025888:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 802588c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025890:	aa31      	add	r2, sp, #196	; 0xc4
 8025892:	2301      	movs	r3, #1
 8025894:	429c      	cmp	r4, r3
 8025896:	da20      	bge.n	80258da <__kernel_rem_pio2f+0x47e>
 8025898:	b10f      	cbz	r7, 802589e <__kernel_rem_pio2f+0x442>
 802589a:	eef1 7a67 	vneg.f32	s15, s15
 802589e:	edc8 7a01 	vstr	s15, [r8, #4]
 80258a2:	e7bb      	b.n	802581c <__kernel_rem_pio2f+0x3c0>
 80258a4:	aa30      	add	r2, sp, #192	; 0xc0
 80258a6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8025768 <__kernel_rem_pio2f+0x30c>
 80258aa:	4413      	add	r3, r2
 80258ac:	2c00      	cmp	r4, #0
 80258ae:	da05      	bge.n	80258bc <__kernel_rem_pio2f+0x460>
 80258b0:	b10f      	cbz	r7, 80258b6 <__kernel_rem_pio2f+0x45a>
 80258b2:	eef1 7a67 	vneg.f32	s15, s15
 80258b6:	edc8 7a00 	vstr	s15, [r8]
 80258ba:	e7af      	b.n	802581c <__kernel_rem_pio2f+0x3c0>
 80258bc:	ed33 7a01 	vldmdb	r3!, {s14}
 80258c0:	3c01      	subs	r4, #1
 80258c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80258c6:	e7f1      	b.n	80258ac <__kernel_rem_pio2f+0x450>
 80258c8:	ed73 7a01 	vldmdb	r3!, {s15}
 80258cc:	3a01      	subs	r2, #1
 80258ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80258d2:	e7d2      	b.n	802587a <__kernel_rem_pio2f+0x41e>
 80258d4:	eef0 7a47 	vmov.f32	s15, s14
 80258d8:	e7d4      	b.n	8025884 <__kernel_rem_pio2f+0x428>
 80258da:	ecb2 7a01 	vldmia	r2!, {s14}
 80258de:	3301      	adds	r3, #1
 80258e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80258e4:	e7d6      	b.n	8025894 <__kernel_rem_pio2f+0x438>
 80258e6:	edd1 7a00 	vldr	s15, [r1]
 80258ea:	edd1 6a01 	vldr	s13, [r1, #4]
 80258ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80258f2:	3801      	subs	r0, #1
 80258f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80258f8:	ed81 7a00 	vstr	s14, [r1]
 80258fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025900:	edc1 7a01 	vstr	s15, [r1, #4]
 8025904:	e799      	b.n	802583a <__kernel_rem_pio2f+0x3de>
 8025906:	edd2 7a00 	vldr	s15, [r2]
 802590a:	edd2 6a01 	vldr	s13, [r2, #4]
 802590e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025912:	3901      	subs	r1, #1
 8025914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025918:	ed82 7a00 	vstr	s14, [r2]
 802591c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025920:	edc2 7a01 	vstr	s15, [r2, #4]
 8025924:	e78e      	b.n	8025844 <__kernel_rem_pio2f+0x3e8>
 8025926:	ed33 7a01 	vldmdb	r3!, {s14}
 802592a:	3c01      	subs	r4, #1
 802592c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025930:	e78f      	b.n	8025852 <__kernel_rem_pio2f+0x3f6>
 8025932:	eef1 6a66 	vneg.f32	s13, s13
 8025936:	eeb1 7a47 	vneg.f32	s14, s14
 802593a:	edc8 6a00 	vstr	s13, [r8]
 802593e:	ed88 7a01 	vstr	s14, [r8, #4]
 8025942:	eef1 7a67 	vneg.f32	s15, s15
 8025946:	e790      	b.n	802586a <__kernel_rem_pio2f+0x40e>

08025948 <__kernel_sinf>:
 8025948:	ee10 3a10 	vmov	r3, s0
 802594c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025950:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025954:	da04      	bge.n	8025960 <__kernel_sinf+0x18>
 8025956:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802595a:	ee17 3a90 	vmov	r3, s15
 802595e:	b35b      	cbz	r3, 80259b8 <__kernel_sinf+0x70>
 8025960:	ee20 7a00 	vmul.f32	s14, s0, s0
 8025964:	eddf 7a15 	vldr	s15, [pc, #84]	; 80259bc <__kernel_sinf+0x74>
 8025968:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80259c0 <__kernel_sinf+0x78>
 802596c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025970:	eddf 7a14 	vldr	s15, [pc, #80]	; 80259c4 <__kernel_sinf+0x7c>
 8025974:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025978:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80259c8 <__kernel_sinf+0x80>
 802597c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8025980:	eddf 7a12 	vldr	s15, [pc, #72]	; 80259cc <__kernel_sinf+0x84>
 8025984:	ee60 6a07 	vmul.f32	s13, s0, s14
 8025988:	eee6 7a07 	vfma.f32	s15, s12, s14
 802598c:	b930      	cbnz	r0, 802599c <__kernel_sinf+0x54>
 802598e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80259d0 <__kernel_sinf+0x88>
 8025992:	eea7 6a27 	vfma.f32	s12, s14, s15
 8025996:	eea6 0a26 	vfma.f32	s0, s12, s13
 802599a:	4770      	bx	lr
 802599c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80259a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80259a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80259a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80259ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80259d4 <__kernel_sinf+0x8c>
 80259b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80259b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80259b8:	4770      	bx	lr
 80259ba:	bf00      	nop
 80259bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80259c0:	b2d72f34 	.word	0xb2d72f34
 80259c4:	3638ef1b 	.word	0x3638ef1b
 80259c8:	b9500d01 	.word	0xb9500d01
 80259cc:	3c088889 	.word	0x3c088889
 80259d0:	be2aaaab 	.word	0xbe2aaaab
 80259d4:	3e2aaaab 	.word	0x3e2aaaab

080259d8 <with_errnof>:
 80259d8:	b513      	push	{r0, r1, r4, lr}
 80259da:	4604      	mov	r4, r0
 80259dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80259e0:	f7fd fbba 	bl	8023158 <__errno>
 80259e4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80259e8:	6004      	str	r4, [r0, #0]
 80259ea:	b002      	add	sp, #8
 80259ec:	bd10      	pop	{r4, pc}

080259ee <xflowf>:
 80259ee:	b130      	cbz	r0, 80259fe <xflowf+0x10>
 80259f0:	eef1 7a40 	vneg.f32	s15, s0
 80259f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80259f8:	2022      	movs	r0, #34	; 0x22
 80259fa:	f7ff bfed 	b.w	80259d8 <with_errnof>
 80259fe:	eef0 7a40 	vmov.f32	s15, s0
 8025a02:	e7f7      	b.n	80259f4 <xflowf+0x6>

08025a04 <__math_uflowf>:
 8025a04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025a0c <__math_uflowf+0x8>
 8025a08:	f7ff bff1 	b.w	80259ee <xflowf>
 8025a0c:	10000000 	.word	0x10000000

08025a10 <__math_oflowf>:
 8025a10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025a18 <__math_oflowf+0x8>
 8025a14:	f7ff bfeb 	b.w	80259ee <xflowf>
 8025a18:	70000000 	.word	0x70000000

08025a1c <fabs>:
 8025a1c:	ec51 0b10 	vmov	r0, r1, d0
 8025a20:	ee10 2a10 	vmov	r2, s0
 8025a24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8025a28:	ec43 2b10 	vmov	d0, r2, r3
 8025a2c:	4770      	bx	lr
	...

08025a30 <floor>:
 8025a30:	ec51 0b10 	vmov	r0, r1, d0
 8025a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8025a3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8025a40:	2e13      	cmp	r6, #19
 8025a42:	ee10 5a10 	vmov	r5, s0
 8025a46:	ee10 8a10 	vmov	r8, s0
 8025a4a:	460c      	mov	r4, r1
 8025a4c:	dc32      	bgt.n	8025ab4 <floor+0x84>
 8025a4e:	2e00      	cmp	r6, #0
 8025a50:	da14      	bge.n	8025a7c <floor+0x4c>
 8025a52:	a333      	add	r3, pc, #204	; (adr r3, 8025b20 <floor+0xf0>)
 8025a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a58:	f7da fbcc 	bl	80001f4 <__adddf3>
 8025a5c:	2200      	movs	r2, #0
 8025a5e:	2300      	movs	r3, #0
 8025a60:	f7db f80e 	bl	8000a80 <__aeabi_dcmpgt>
 8025a64:	b138      	cbz	r0, 8025a76 <floor+0x46>
 8025a66:	2c00      	cmp	r4, #0
 8025a68:	da57      	bge.n	8025b1a <floor+0xea>
 8025a6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8025a6e:	431d      	orrs	r5, r3
 8025a70:	d001      	beq.n	8025a76 <floor+0x46>
 8025a72:	4c2d      	ldr	r4, [pc, #180]	; (8025b28 <floor+0xf8>)
 8025a74:	2500      	movs	r5, #0
 8025a76:	4621      	mov	r1, r4
 8025a78:	4628      	mov	r0, r5
 8025a7a:	e025      	b.n	8025ac8 <floor+0x98>
 8025a7c:	4f2b      	ldr	r7, [pc, #172]	; (8025b2c <floor+0xfc>)
 8025a7e:	4137      	asrs	r7, r6
 8025a80:	ea01 0307 	and.w	r3, r1, r7
 8025a84:	4303      	orrs	r3, r0
 8025a86:	d01f      	beq.n	8025ac8 <floor+0x98>
 8025a88:	a325      	add	r3, pc, #148	; (adr r3, 8025b20 <floor+0xf0>)
 8025a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a8e:	f7da fbb1 	bl	80001f4 <__adddf3>
 8025a92:	2200      	movs	r2, #0
 8025a94:	2300      	movs	r3, #0
 8025a96:	f7da fff3 	bl	8000a80 <__aeabi_dcmpgt>
 8025a9a:	2800      	cmp	r0, #0
 8025a9c:	d0eb      	beq.n	8025a76 <floor+0x46>
 8025a9e:	2c00      	cmp	r4, #0
 8025aa0:	bfbe      	ittt	lt
 8025aa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8025aa6:	fa43 f606 	asrlt.w	r6, r3, r6
 8025aaa:	19a4      	addlt	r4, r4, r6
 8025aac:	ea24 0407 	bic.w	r4, r4, r7
 8025ab0:	2500      	movs	r5, #0
 8025ab2:	e7e0      	b.n	8025a76 <floor+0x46>
 8025ab4:	2e33      	cmp	r6, #51	; 0x33
 8025ab6:	dd0b      	ble.n	8025ad0 <floor+0xa0>
 8025ab8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8025abc:	d104      	bne.n	8025ac8 <floor+0x98>
 8025abe:	ee10 2a10 	vmov	r2, s0
 8025ac2:	460b      	mov	r3, r1
 8025ac4:	f7da fb96 	bl	80001f4 <__adddf3>
 8025ac8:	ec41 0b10 	vmov	d0, r0, r1
 8025acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ad0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8025ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8025ad8:	fa23 f707 	lsr.w	r7, r3, r7
 8025adc:	4207      	tst	r7, r0
 8025ade:	d0f3      	beq.n	8025ac8 <floor+0x98>
 8025ae0:	a30f      	add	r3, pc, #60	; (adr r3, 8025b20 <floor+0xf0>)
 8025ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ae6:	f7da fb85 	bl	80001f4 <__adddf3>
 8025aea:	2200      	movs	r2, #0
 8025aec:	2300      	movs	r3, #0
 8025aee:	f7da ffc7 	bl	8000a80 <__aeabi_dcmpgt>
 8025af2:	2800      	cmp	r0, #0
 8025af4:	d0bf      	beq.n	8025a76 <floor+0x46>
 8025af6:	2c00      	cmp	r4, #0
 8025af8:	da02      	bge.n	8025b00 <floor+0xd0>
 8025afa:	2e14      	cmp	r6, #20
 8025afc:	d103      	bne.n	8025b06 <floor+0xd6>
 8025afe:	3401      	adds	r4, #1
 8025b00:	ea25 0507 	bic.w	r5, r5, r7
 8025b04:	e7b7      	b.n	8025a76 <floor+0x46>
 8025b06:	2301      	movs	r3, #1
 8025b08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8025b0c:	fa03 f606 	lsl.w	r6, r3, r6
 8025b10:	4435      	add	r5, r6
 8025b12:	4545      	cmp	r5, r8
 8025b14:	bf38      	it	cc
 8025b16:	18e4      	addcc	r4, r4, r3
 8025b18:	e7f2      	b.n	8025b00 <floor+0xd0>
 8025b1a:	2500      	movs	r5, #0
 8025b1c:	462c      	mov	r4, r5
 8025b1e:	e7aa      	b.n	8025a76 <floor+0x46>
 8025b20:	8800759c 	.word	0x8800759c
 8025b24:	7e37e43c 	.word	0x7e37e43c
 8025b28:	bff00000 	.word	0xbff00000
 8025b2c:	000fffff 	.word	0x000fffff

08025b30 <scalbn>:
 8025b30:	b570      	push	{r4, r5, r6, lr}
 8025b32:	ec55 4b10 	vmov	r4, r5, d0
 8025b36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8025b3a:	4606      	mov	r6, r0
 8025b3c:	462b      	mov	r3, r5
 8025b3e:	b99a      	cbnz	r2, 8025b68 <scalbn+0x38>
 8025b40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8025b44:	4323      	orrs	r3, r4
 8025b46:	d036      	beq.n	8025bb6 <scalbn+0x86>
 8025b48:	4b39      	ldr	r3, [pc, #228]	; (8025c30 <scalbn+0x100>)
 8025b4a:	4629      	mov	r1, r5
 8025b4c:	ee10 0a10 	vmov	r0, s0
 8025b50:	2200      	movs	r2, #0
 8025b52:	f7da fd05 	bl	8000560 <__aeabi_dmul>
 8025b56:	4b37      	ldr	r3, [pc, #220]	; (8025c34 <scalbn+0x104>)
 8025b58:	429e      	cmp	r6, r3
 8025b5a:	4604      	mov	r4, r0
 8025b5c:	460d      	mov	r5, r1
 8025b5e:	da10      	bge.n	8025b82 <scalbn+0x52>
 8025b60:	a32b      	add	r3, pc, #172	; (adr r3, 8025c10 <scalbn+0xe0>)
 8025b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b66:	e03a      	b.n	8025bde <scalbn+0xae>
 8025b68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8025b6c:	428a      	cmp	r2, r1
 8025b6e:	d10c      	bne.n	8025b8a <scalbn+0x5a>
 8025b70:	ee10 2a10 	vmov	r2, s0
 8025b74:	4620      	mov	r0, r4
 8025b76:	4629      	mov	r1, r5
 8025b78:	f7da fb3c 	bl	80001f4 <__adddf3>
 8025b7c:	4604      	mov	r4, r0
 8025b7e:	460d      	mov	r5, r1
 8025b80:	e019      	b.n	8025bb6 <scalbn+0x86>
 8025b82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8025b86:	460b      	mov	r3, r1
 8025b88:	3a36      	subs	r2, #54	; 0x36
 8025b8a:	4432      	add	r2, r6
 8025b8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8025b90:	428a      	cmp	r2, r1
 8025b92:	dd08      	ble.n	8025ba6 <scalbn+0x76>
 8025b94:	2d00      	cmp	r5, #0
 8025b96:	a120      	add	r1, pc, #128	; (adr r1, 8025c18 <scalbn+0xe8>)
 8025b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b9c:	da1c      	bge.n	8025bd8 <scalbn+0xa8>
 8025b9e:	a120      	add	r1, pc, #128	; (adr r1, 8025c20 <scalbn+0xf0>)
 8025ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025ba4:	e018      	b.n	8025bd8 <scalbn+0xa8>
 8025ba6:	2a00      	cmp	r2, #0
 8025ba8:	dd08      	ble.n	8025bbc <scalbn+0x8c>
 8025baa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025bae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025bb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8025bb6:	ec45 4b10 	vmov	d0, r4, r5
 8025bba:	bd70      	pop	{r4, r5, r6, pc}
 8025bbc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8025bc0:	da19      	bge.n	8025bf6 <scalbn+0xc6>
 8025bc2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025bc6:	429e      	cmp	r6, r3
 8025bc8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025bcc:	dd0a      	ble.n	8025be4 <scalbn+0xb4>
 8025bce:	a112      	add	r1, pc, #72	; (adr r1, 8025c18 <scalbn+0xe8>)
 8025bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025bd4:	2b00      	cmp	r3, #0
 8025bd6:	d1e2      	bne.n	8025b9e <scalbn+0x6e>
 8025bd8:	a30f      	add	r3, pc, #60	; (adr r3, 8025c18 <scalbn+0xe8>)
 8025bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bde:	f7da fcbf 	bl	8000560 <__aeabi_dmul>
 8025be2:	e7cb      	b.n	8025b7c <scalbn+0x4c>
 8025be4:	a10a      	add	r1, pc, #40	; (adr r1, 8025c10 <scalbn+0xe0>)
 8025be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025bea:	2b00      	cmp	r3, #0
 8025bec:	d0b8      	beq.n	8025b60 <scalbn+0x30>
 8025bee:	a10e      	add	r1, pc, #56	; (adr r1, 8025c28 <scalbn+0xf8>)
 8025bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025bf4:	e7b4      	b.n	8025b60 <scalbn+0x30>
 8025bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025bfa:	3236      	adds	r2, #54	; 0x36
 8025bfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8025c00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8025c04:	4620      	mov	r0, r4
 8025c06:	4b0c      	ldr	r3, [pc, #48]	; (8025c38 <scalbn+0x108>)
 8025c08:	2200      	movs	r2, #0
 8025c0a:	e7e8      	b.n	8025bde <scalbn+0xae>
 8025c0c:	f3af 8000 	nop.w
 8025c10:	c2f8f359 	.word	0xc2f8f359
 8025c14:	01a56e1f 	.word	0x01a56e1f
 8025c18:	8800759c 	.word	0x8800759c
 8025c1c:	7e37e43c 	.word	0x7e37e43c
 8025c20:	8800759c 	.word	0x8800759c
 8025c24:	fe37e43c 	.word	0xfe37e43c
 8025c28:	c2f8f359 	.word	0xc2f8f359
 8025c2c:	81a56e1f 	.word	0x81a56e1f
 8025c30:	43500000 	.word	0x43500000
 8025c34:	ffff3cb0 	.word	0xffff3cb0
 8025c38:	3c900000 	.word	0x3c900000

08025c3c <atanf>:
 8025c3c:	b538      	push	{r3, r4, r5, lr}
 8025c3e:	ee10 5a10 	vmov	r5, s0
 8025c42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8025c46:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8025c4a:	eef0 7a40 	vmov.f32	s15, s0
 8025c4e:	db10      	blt.n	8025c72 <atanf+0x36>
 8025c50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8025c54:	dd04      	ble.n	8025c60 <atanf+0x24>
 8025c56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8025c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8025c5e:	bd38      	pop	{r3, r4, r5, pc}
 8025c60:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025d98 <atanf+0x15c>
 8025c64:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8025d9c <atanf+0x160>
 8025c68:	2d00      	cmp	r5, #0
 8025c6a:	bfd8      	it	le
 8025c6c:	eef0 7a40 	vmovle.f32	s15, s0
 8025c70:	e7f3      	b.n	8025c5a <atanf+0x1e>
 8025c72:	4b4b      	ldr	r3, [pc, #300]	; (8025da0 <atanf+0x164>)
 8025c74:	429c      	cmp	r4, r3
 8025c76:	dc10      	bgt.n	8025c9a <atanf+0x5e>
 8025c78:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8025c7c:	da0a      	bge.n	8025c94 <atanf+0x58>
 8025c7e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8025da4 <atanf+0x168>
 8025c82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8025c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025c8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8025c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c92:	dce2      	bgt.n	8025c5a <atanf+0x1e>
 8025c94:	f04f 33ff 	mov.w	r3, #4294967295
 8025c98:	e013      	b.n	8025cc2 <atanf+0x86>
 8025c9a:	f000 f8a3 	bl	8025de4 <fabsf>
 8025c9e:	4b42      	ldr	r3, [pc, #264]	; (8025da8 <atanf+0x16c>)
 8025ca0:	429c      	cmp	r4, r3
 8025ca2:	dc4f      	bgt.n	8025d44 <atanf+0x108>
 8025ca4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8025ca8:	429c      	cmp	r4, r3
 8025caa:	dc41      	bgt.n	8025d30 <atanf+0xf4>
 8025cac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8025cb0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025cb4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025cb8:	2300      	movs	r3, #0
 8025cba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025cbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025cc2:	1c5a      	adds	r2, r3, #1
 8025cc4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8025cc8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8025dac <atanf+0x170>
 8025ccc:	eddf 5a38 	vldr	s11, [pc, #224]	; 8025db0 <atanf+0x174>
 8025cd0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8025db4 <atanf+0x178>
 8025cd4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8025cd8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8025cdc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8025db8 <atanf+0x17c>
 8025ce0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025ce4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8025dbc <atanf+0x180>
 8025ce8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025cec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8025dc0 <atanf+0x184>
 8025cf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8025cf4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8025dc4 <atanf+0x188>
 8025cf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8025cfc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8025dc8 <atanf+0x18c>
 8025d00:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025d04:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8025dcc <atanf+0x190>
 8025d08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025d0c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8025dd0 <atanf+0x194>
 8025d10:	eea7 5a26 	vfma.f32	s10, s14, s13
 8025d14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8025dd4 <atanf+0x198>
 8025d18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8025d1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8025d20:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8025d28:	d121      	bne.n	8025d6e <atanf+0x132>
 8025d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025d2e:	e794      	b.n	8025c5a <atanf+0x1e>
 8025d30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025d34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025d38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025d3c:	2301      	movs	r3, #1
 8025d3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d42:	e7be      	b.n	8025cc2 <atanf+0x86>
 8025d44:	4b24      	ldr	r3, [pc, #144]	; (8025dd8 <atanf+0x19c>)
 8025d46:	429c      	cmp	r4, r3
 8025d48:	dc0b      	bgt.n	8025d62 <atanf+0x126>
 8025d4a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8025d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025d52:	eea0 7a27 	vfma.f32	s14, s0, s15
 8025d56:	2302      	movs	r3, #2
 8025d58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8025d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025d60:	e7af      	b.n	8025cc2 <atanf+0x86>
 8025d62:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8025d66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025d6a:	2303      	movs	r3, #3
 8025d6c:	e7a9      	b.n	8025cc2 <atanf+0x86>
 8025d6e:	4a1b      	ldr	r2, [pc, #108]	; (8025ddc <atanf+0x1a0>)
 8025d70:	491b      	ldr	r1, [pc, #108]	; (8025de0 <atanf+0x1a4>)
 8025d72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8025d76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025d7a:	ed93 0a00 	vldr	s0, [r3]
 8025d7e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8025d82:	ed92 0a00 	vldr	s0, [r2]
 8025d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025d8a:	2d00      	cmp	r5, #0
 8025d8c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8025d90:	bfb8      	it	lt
 8025d92:	eef1 7a67 	vneglt.f32	s15, s15
 8025d96:	e760      	b.n	8025c5a <atanf+0x1e>
 8025d98:	3fc90fdb 	.word	0x3fc90fdb
 8025d9c:	bfc90fdb 	.word	0xbfc90fdb
 8025da0:	3edfffff 	.word	0x3edfffff
 8025da4:	7149f2ca 	.word	0x7149f2ca
 8025da8:	3f97ffff 	.word	0x3f97ffff
 8025dac:	3c8569d7 	.word	0x3c8569d7
 8025db0:	3d4bda59 	.word	0x3d4bda59
 8025db4:	bd6ef16b 	.word	0xbd6ef16b
 8025db8:	3d886b35 	.word	0x3d886b35
 8025dbc:	3dba2e6e 	.word	0x3dba2e6e
 8025dc0:	3e124925 	.word	0x3e124925
 8025dc4:	3eaaaaab 	.word	0x3eaaaaab
 8025dc8:	bd15a221 	.word	0xbd15a221
 8025dcc:	bd9d8795 	.word	0xbd9d8795
 8025dd0:	bde38e38 	.word	0xbde38e38
 8025dd4:	be4ccccd 	.word	0xbe4ccccd
 8025dd8:	401bffff 	.word	0x401bffff
 8025ddc:	08029aa0 	.word	0x08029aa0
 8025de0:	08029ab0 	.word	0x08029ab0

08025de4 <fabsf>:
 8025de4:	ee10 3a10 	vmov	r3, s0
 8025de8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025dec:	ee00 3a10 	vmov	s0, r3
 8025df0:	4770      	bx	lr

08025df2 <finitef>:
 8025df2:	b082      	sub	sp, #8
 8025df4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8025df8:	9801      	ldr	r0, [sp, #4]
 8025dfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025dfe:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025e02:	bfac      	ite	ge
 8025e04:	2000      	movge	r0, #0
 8025e06:	2001      	movlt	r0, #1
 8025e08:	b002      	add	sp, #8
 8025e0a:	4770      	bx	lr

08025e0c <floorf>:
 8025e0c:	ee10 3a10 	vmov	r3, s0
 8025e10:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025e14:	3a7f      	subs	r2, #127	; 0x7f
 8025e16:	2a16      	cmp	r2, #22
 8025e18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8025e1c:	dc2a      	bgt.n	8025e74 <floorf+0x68>
 8025e1e:	2a00      	cmp	r2, #0
 8025e20:	da11      	bge.n	8025e46 <floorf+0x3a>
 8025e22:	eddf 7a18 	vldr	s15, [pc, #96]	; 8025e84 <floorf+0x78>
 8025e26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025e2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e32:	dd05      	ble.n	8025e40 <floorf+0x34>
 8025e34:	2b00      	cmp	r3, #0
 8025e36:	da23      	bge.n	8025e80 <floorf+0x74>
 8025e38:	4a13      	ldr	r2, [pc, #76]	; (8025e88 <floorf+0x7c>)
 8025e3a:	2900      	cmp	r1, #0
 8025e3c:	bf18      	it	ne
 8025e3e:	4613      	movne	r3, r2
 8025e40:	ee00 3a10 	vmov	s0, r3
 8025e44:	4770      	bx	lr
 8025e46:	4911      	ldr	r1, [pc, #68]	; (8025e8c <floorf+0x80>)
 8025e48:	4111      	asrs	r1, r2
 8025e4a:	420b      	tst	r3, r1
 8025e4c:	d0fa      	beq.n	8025e44 <floorf+0x38>
 8025e4e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8025e84 <floorf+0x78>
 8025e52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8025e56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e5e:	ddef      	ble.n	8025e40 <floorf+0x34>
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	bfbe      	ittt	lt
 8025e64:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8025e68:	fa40 f202 	asrlt.w	r2, r0, r2
 8025e6c:	189b      	addlt	r3, r3, r2
 8025e6e:	ea23 0301 	bic.w	r3, r3, r1
 8025e72:	e7e5      	b.n	8025e40 <floorf+0x34>
 8025e74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8025e78:	d3e4      	bcc.n	8025e44 <floorf+0x38>
 8025e7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025e7e:	4770      	bx	lr
 8025e80:	2300      	movs	r3, #0
 8025e82:	e7dd      	b.n	8025e40 <floorf+0x34>
 8025e84:	7149f2ca 	.word	0x7149f2ca
 8025e88:	bf800000 	.word	0xbf800000
 8025e8c:	007fffff 	.word	0x007fffff

08025e90 <nanf>:
 8025e90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8025e98 <nanf+0x8>
 8025e94:	4770      	bx	lr
 8025e96:	bf00      	nop
 8025e98:	7fc00000 	.word	0x7fc00000

08025e9c <scalbnf>:
 8025e9c:	ee10 3a10 	vmov	r3, s0
 8025ea0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8025ea4:	d025      	beq.n	8025ef2 <scalbnf+0x56>
 8025ea6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8025eaa:	d302      	bcc.n	8025eb2 <scalbnf+0x16>
 8025eac:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025eb0:	4770      	bx	lr
 8025eb2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8025eb6:	d122      	bne.n	8025efe <scalbnf+0x62>
 8025eb8:	4b2a      	ldr	r3, [pc, #168]	; (8025f64 <scalbnf+0xc8>)
 8025eba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8025f68 <scalbnf+0xcc>
 8025ebe:	4298      	cmp	r0, r3
 8025ec0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025ec4:	db16      	blt.n	8025ef4 <scalbnf+0x58>
 8025ec6:	ee10 3a10 	vmov	r3, s0
 8025eca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025ece:	3a19      	subs	r2, #25
 8025ed0:	4402      	add	r2, r0
 8025ed2:	2afe      	cmp	r2, #254	; 0xfe
 8025ed4:	dd15      	ble.n	8025f02 <scalbnf+0x66>
 8025ed6:	ee10 3a10 	vmov	r3, s0
 8025eda:	eddf 7a24 	vldr	s15, [pc, #144]	; 8025f6c <scalbnf+0xd0>
 8025ede:	eddf 6a24 	vldr	s13, [pc, #144]	; 8025f70 <scalbnf+0xd4>
 8025ee2:	2b00      	cmp	r3, #0
 8025ee4:	eeb0 7a67 	vmov.f32	s14, s15
 8025ee8:	bfb8      	it	lt
 8025eea:	eef0 7a66 	vmovlt.f32	s15, s13
 8025eee:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025ef2:	4770      	bx	lr
 8025ef4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8025f74 <scalbnf+0xd8>
 8025ef8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025efc:	4770      	bx	lr
 8025efe:	0dd2      	lsrs	r2, r2, #23
 8025f00:	e7e6      	b.n	8025ed0 <scalbnf+0x34>
 8025f02:	2a00      	cmp	r2, #0
 8025f04:	dd06      	ble.n	8025f14 <scalbnf+0x78>
 8025f06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025f0a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025f0e:	ee00 3a10 	vmov	s0, r3
 8025f12:	4770      	bx	lr
 8025f14:	f112 0f16 	cmn.w	r2, #22
 8025f18:	da1a      	bge.n	8025f50 <scalbnf+0xb4>
 8025f1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8025f1e:	4298      	cmp	r0, r3
 8025f20:	ee10 3a10 	vmov	r3, s0
 8025f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8025f28:	dd0a      	ble.n	8025f40 <scalbnf+0xa4>
 8025f2a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8025f6c <scalbnf+0xd0>
 8025f2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8025f70 <scalbnf+0xd4>
 8025f32:	eef0 7a40 	vmov.f32	s15, s0
 8025f36:	2b00      	cmp	r3, #0
 8025f38:	bf18      	it	ne
 8025f3a:	eeb0 0a47 	vmovne.f32	s0, s14
 8025f3e:	e7db      	b.n	8025ef8 <scalbnf+0x5c>
 8025f40:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8025f74 <scalbnf+0xd8>
 8025f44:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8025f78 <scalbnf+0xdc>
 8025f48:	eef0 7a40 	vmov.f32	s15, s0
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	e7f3      	b.n	8025f38 <scalbnf+0x9c>
 8025f50:	3219      	adds	r2, #25
 8025f52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8025f56:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025f5a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8025f7c <scalbnf+0xe0>
 8025f5e:	ee07 3a10 	vmov	s14, r3
 8025f62:	e7c4      	b.n	8025eee <scalbnf+0x52>
 8025f64:	ffff3cb0 	.word	0xffff3cb0
 8025f68:	4c000000 	.word	0x4c000000
 8025f6c:	7149f2ca 	.word	0x7149f2ca
 8025f70:	f149f2ca 	.word	0xf149f2ca
 8025f74:	0da24260 	.word	0x0da24260
 8025f78:	8da24260 	.word	0x8da24260
 8025f7c:	33000000 	.word	0x33000000

08025f80 <_init>:
 8025f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f82:	bf00      	nop
 8025f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f86:	bc08      	pop	{r3}
 8025f88:	469e      	mov	lr, r3
 8025f8a:	4770      	bx	lr

08025f8c <_fini>:
 8025f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f8e:	bf00      	nop
 8025f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025f92:	bc08      	pop	{r3}
 8025f94:	469e      	mov	lr, r3
 8025f96:	4770      	bx	lr
